=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:'//.*'
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   '{' statement * ? '}'
const_assert_statement:
   'const_assert' expression
continue_statement:'continue'
continuing_compound_statement:
   '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:
   'bgra8unorm_storage'
 | 'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | const_assert_statement ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   'loop' '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | call_expression
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | const_assert_statement ';'
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression '{' ( switch_body * ) '}'
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'alias' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   'while' expression compound_statement

=Raw rules:
translation_unit  -> ( Choice ( Seq translation_unit/0.0 translation_unit/0.1 ) )
translation_unit .reg_info.index: 561
translation_unit .first: ['ε', "';'", "'const_assert'", "'fn'", "'struct'", "'enable'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
translation_unit .derives_empty: True
translation_unit .follow: ['EndOfText']
global_directive  -> enable_directive
global_directive .reg_info.index: 197
global_directive .first: []
global_directive .derives_empty: False
global_directive .follow: ["'enable'"]
global_decl  -> ( Choice ';' ( Seq global_variable_decl ';' ) ( Seq global_constant_decl ';' ) ( Seq type_alias_decl ';' ) struct_decl function_decl ( Seq const_assert_statement ';' ) )
global_decl .reg_info.index: 208
global_decl .first: ["';'", "'const_assert'", "'fn'", "'struct'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
global_decl .derives_empty: False
global_decl .follow: ["';'", "'const_assert'", "'fn'", "'struct'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
bool_literal  -> ( Choice 'true' 'false' )
bool_literal .reg_info.index: 209
bool_literal .first: ["'true'", "'false'"]
bool_literal .derives_empty: False
bool_literal .follow: []
int_literal  -> ( Choice decimal_int_literal hex_int_literal )
int_literal .reg_info.index: 212
int_literal .first: ['/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/']
int_literal .derives_empty: False
int_literal .follow: []
decimal_int_literal  -> ( Choice /0[iu]?/ /[1-9][0-9]*[iu]?/ )
decimal_int_literal .reg_info.index: 213
decimal_int_literal .first: ['/0[iu]?/', '/[1-9][0-9]*[iu]?/']
decimal_int_literal .derives_empty: False
decimal_int_literal .follow: []
hex_int_literal  -> /0[xX][0-9a-fA-F]+[iu]?/
hex_int_literal .reg_info.index: 7
hex_int_literal .first: ['/0[xX][0-9a-fA-F]+[iu]?/']
hex_int_literal .derives_empty: False
hex_int_literal .follow: []
float_literal  -> ( Choice decimal_float_literal hex_float_literal )
float_literal .reg_info.index: 216
float_literal .first: ['/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/']
float_literal .derives_empty: False
float_literal .follow: []
decimal_float_literal  -> ( Choice /0[fh]/ /[1-9][0-9]*[fh]/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ )
decimal_float_literal .reg_info.index: 217
decimal_float_literal .first: ['/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/']
decimal_float_literal .derives_empty: False
decimal_float_literal .follow: []
hex_float_literal  -> ( Choice /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ )
hex_float_literal .reg_info.index: 218
hex_float_literal .first: ['/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/']
hex_float_literal .derives_empty: False
hex_float_literal .follow: []
literal  -> ( Choice int_literal float_literal bool_literal )
literal .reg_info.index: 222
literal .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/']
literal .derives_empty: False
literal .follow: []
member_ident  -> ident_pattern_token
member_ident .reg_info.index: 223
member_ident .first: []
member_ident .derives_empty: False
member_ident .follow: ["'('", "';'", "'['", "'{'", "'.'", "':'", "'='"]
attribute  -> ( Choice ( Seq '@' 'align' '(' expression attrib_end ) ( Seq '@' 'binding' '(' expression attrib_end ) ( Seq '@' 'builtin' '(' builtin_value_name attrib_end ) ( Seq '@' 'const' ) ( Seq '@' 'group' '(' expression attrib_end ) ( Seq '@' 'id' '(' expression attrib_end ) ( Seq '@' 'interpolate' '(' interpolation_type_name attrib_end ) ( Seq '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ) ( Seq '@' 'invariant' ) ( Seq '@' 'location' '(' expression attrib_end ) ( Seq '@' 'size' '(' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression ',' expression attrib_end ) ( Seq '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ) ( Seq '@' 'vertex' ) ( Seq '@' 'fragment' ) ( Seq '@' 'compute' ) )
attribute .reg_info.index: 246
attribute .first: ["'@'"]
attribute .derives_empty: False
attribute .follow: ["'@'"]
attrib_end  -> ( Choice ( Seq attrib_end/0.0 ')' ) )
attrib_end .reg_info.index: 696
attrib_end .first: ["','", "')'"]
attrib_end .derives_empty: False
attrib_end .follow: ["'@'"]
array_type_specifier  -> ( Choice ( Seq 'array' '<' type_specifier array_type_specifier/0.3 '>' ) )
array_type_specifier .reg_info.index: 705
array_type_specifier .first: ["'array'"]
array_type_specifier .derives_empty: False
array_type_specifier .follow: []
element_count_expression  -> ( Choice additive_expression bitwise_expression )
element_count_expression .reg_info.index: 256
element_count_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
element_count_expression .derives_empty: False
element_count_expression .follow: ["'>'"]
struct_decl  -> ( Choice ( Seq 'struct' ident struct_body_decl ) )
struct_decl .reg_info.index: 516
struct_decl .first: ["'struct'"]
struct_decl .derives_empty: False
struct_decl .follow: []
struct_body_decl  -> ( Choice ( Seq '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ) )
struct_body_decl .reg_info.index: 720
struct_body_decl .first: ["'{'"]
struct_body_decl .derives_empty: False
struct_body_decl .follow: []
struct_member  -> ( Choice ( Seq struct_member/0.0 member_ident ':' type_specifier ) )
struct_member .reg_info.index: 728
struct_member .first: ["'@'", '/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
struct_member .derives_empty: False
struct_member .follow: ["','", "'}'"]
texture_and_sampler_types  -> ( Choice sampler_type depth_texture_type ( Seq sampled_texture_type '<' type_specifier '>' ) ( Seq multisampled_texture_type '<' type_specifier '>' ) ( Seq storage_texture_type '<' texel_format ',' access_mode '>' ) )
texture_and_sampler_types .reg_info.index: 280
texture_and_sampler_types .first: ["'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'"]
texture_and_sampler_types .derives_empty: False
texture_and_sampler_types .follow: []
sampler_type  -> ( Choice 'sampler' 'sampler_comparison' )
sampler_type .reg_info.index: 281
sampler_type .first: ["'sampler'", "'sampler_comparison'"]
sampler_type .derives_empty: False
sampler_type .follow: []
sampled_texture_type  -> ( Choice 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' )
sampled_texture_type .reg_info.index: 282
sampled_texture_type .first: ["'texture_cube_array'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'"]
sampled_texture_type .derives_empty: False
sampled_texture_type .follow: ["'<'"]
multisampled_texture_type  -> 'texture_multisampled_2d'
multisampled_texture_type .reg_info.index: 49
multisampled_texture_type .first: ["'texture_multisampled_2d'"]
multisampled_texture_type .derives_empty: False
multisampled_texture_type .follow: []
storage_texture_type  -> ( Choice 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' )
storage_texture_type .reg_info.index: 283
storage_texture_type .first: ["'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'"]
storage_texture_type .derives_empty: False
storage_texture_type .follow: ["'<'"]
depth_texture_type  -> ( Choice 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' )
depth_texture_type .reg_info.index: 284
depth_texture_type .first: ["'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'"]
depth_texture_type .derives_empty: False
depth_texture_type .follow: []
type_alias_decl  -> ( Choice ( Seq 'alias' ident '=' type_specifier ) )
type_alias_decl .reg_info.index: 519
type_alias_decl .first: ["'alias'"]
type_alias_decl .derives_empty: False
type_alias_decl .follow: ["';'"]
type_specifier  -> ( Choice ident type_specifier_without_ident )
type_specifier .reg_info.index: 287
type_specifier .first: ["'array'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'"]
type_specifier .derives_empty: False
type_specifier .follow: ["';'", "'>'", "'{'", "'}'", "','", "'='"]
type_specifier_without_ident  -> ( Choice 'bool' 'f32' 'f16' 'i32' 'u32' ( Seq vec_prefix '<' type_specifier '>' ) ( Seq mat_prefix '<' type_specifier '>' ) ( Seq 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' ) array_type_specifier ( Seq 'atomic' '<' type_specifier '>' ) texture_and_sampler_types )
type_specifier_without_ident .reg_info.index: 804
type_specifier_without_ident .first: ["'array'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'"]
type_specifier_without_ident .derives_empty: False
type_specifier_without_ident .follow: []
vec_prefix  -> ( Choice 'vec2' 'vec3' 'vec4' )
vec_prefix .reg_info.index: 300
vec_prefix .first: ["'vec2'", "'vec3'", "'vec4'"]
vec_prefix .derives_empty: False
vec_prefix .follow: ["'<'"]
mat_prefix  -> ( Choice 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' )
mat_prefix .reg_info.index: 301
mat_prefix .first: ["'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'"]
mat_prefix .derives_empty: False
mat_prefix .follow: ["'<'"]
variable_statement  -> ( Choice variable_decl ( Seq variable_decl '=' expression ) ( Seq 'let' optionally_typed_ident '=' expression ) ( Seq 'const' optionally_typed_ident '=' expression ) )
variable_statement .reg_info.index: 307
variable_statement .first: ["'let'", "'var'", "'const'"]
variable_statement .derives_empty: False
variable_statement .follow: ["';'"]
variable_decl  -> ( Choice ( Seq 'var' variable_decl/0.1 optionally_typed_ident ) )
variable_decl .reg_info.index: 838
variable_decl .first: ["'var'"]
variable_decl .derives_empty: False
variable_decl .follow: ["';'", "'='"]
optionally_typed_ident  -> ( Choice ( Seq ident optionally_typed_ident/0.1 ) )
optionally_typed_ident .reg_info.index: 844
optionally_typed_ident .first: ['/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
optionally_typed_ident .derives_empty: False
optionally_typed_ident .follow: ["';'", "'='"]
variable_qualifier  -> ( Choice ( Seq '<' address_space variable_qualifier/0.2 '>' ) )
variable_qualifier .reg_info.index: 851
variable_qualifier .first: ["'<'"]
variable_qualifier .derives_empty: False
variable_qualifier .follow: []
global_variable_decl  -> ( Choice ( Seq global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ) )
global_variable_decl .reg_info.index: 858
global_variable_decl .first: ["'@'", "'var'"]
global_variable_decl .derives_empty: False
global_variable_decl .follow: ["';'"]
global_constant_decl  -> ( Choice ( Seq 'const' optionally_typed_ident '=' expression ) ( Seq global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ) )
global_constant_decl .reg_info.index: 870
global_constant_decl .first: ["'@'", "'override'", "'const'"]
global_constant_decl .derives_empty: False
global_constant_decl .follow: ["';'"]
primary_expression  -> ( Choice ident call_expression literal paren_expression ( Seq 'bitcast' '<' type_specifier '>' paren_expression ) )
primary_expression .reg_info.index: 324
primary_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'"]
primary_expression .derives_empty: False
primary_expression .follow: ["'['", "'.'"]
call_expression  -> call_phrase
call_expression .reg_info.index: 325
call_expression .first: []
call_expression .derives_empty: False
call_expression .follow: ["';'"]
call_phrase  -> ( Choice ( Seq callable argument_expression_list ) )
call_phrase .reg_info.index: 524
call_phrase .first: ["'array'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'"]
call_phrase .derives_empty: False
call_phrase .follow: []
callable  -> ( Choice ident type_specifier_without_ident vec_prefix mat_prefix 'array' )
callable .reg_info.index: 329
callable .first: ["'array'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'"]
callable .derives_empty: False
callable .follow: ["'('"]
paren_expression  -> ( Choice ( Seq '(' expression ')' ) )
paren_expression .reg_info.index: 525
paren_expression .first: ["'('"]
paren_expression .derives_empty: False
paren_expression .follow: ["'['", "'.'"]
argument_expression_list  -> ( Choice ( Seq '(' argument_expression_list/0.1 ')' ) )
argument_expression_list .reg_info.index: 899
argument_expression_list .first: ["'('"]
argument_expression_list .derives_empty: False
argument_expression_list .follow: []
expression_comma_list  -> ( Choice ( Seq expression expression_comma_list/0.1 expression_comma_list/0.2 ) )
expression_comma_list .reg_info.index: 906
expression_comma_list .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
expression_comma_list .derives_empty: False
expression_comma_list .follow: []
component_or_swizzle_specifier  -> ( Choice ( Seq '[' expression ']' component_or_swizzle_specifier/0.3 ) ( Seq '.' member_ident component_or_swizzle_specifier/1.2 ) ( Seq '.' swizzle_name component_or_swizzle_specifier/2.2 ) )
component_or_swizzle_specifier .reg_info.index: 924
component_or_swizzle_specifier .first: ["'['", "'.'"]
component_or_swizzle_specifier .derives_empty: False
component_or_swizzle_specifier .follow: []
unary_expression  -> ( Choice singular_expression ( Seq '-' unary_expression ) ( Seq '!' unary_expression ) ( Seq '~' unary_expression ) ( Seq '*' unary_expression ) ( Seq '&' unary_expression ) )
unary_expression .reg_info.index: 352
unary_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
unary_expression .derives_empty: False
unary_expression .follow: ["';'", "']'", "'-'", "','", "'*'", "'&'", "'/'", "'%'", "'+'", "'<<'", "'>>'", "'<='", "'>='", "'=='", "'<'", "'>'", "'!='", "'|'", "'^'", "')'", "'&&'", "'||'", "'{'"]
singular_expression  -> ( Choice ( Seq primary_expression singular_expression/0.1 ) )
singular_expression .reg_info.index: 945
singular_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'"]
singular_expression .derives_empty: False
singular_expression .follow: []
lhs_expression  -> ( Choice ( Seq core_lhs_expression lhs_expression/0.1 ) ( Seq '*' lhs_expression ) ( Seq '&' lhs_expression ) )
lhs_expression .reg_info.index: 956
lhs_expression .first: ["'('", "'&'", "'*'"]
lhs_expression .derives_empty: False
lhs_expression .follow: ["')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
core_lhs_expression  -> ( Choice ident ( Seq '(' lhs_expression ')' ) )
core_lhs_expression .reg_info.index: 362
core_lhs_expression .first: ["'('"]
core_lhs_expression .derives_empty: False
core_lhs_expression .follow: ["'['", "'.'", "')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
multiplicative_expression  -> ( Choice unary_expression ( Seq multiplicative_expression multiplicative_operator unary_expression ) )
multiplicative_expression .reg_info.index: 366
multiplicative_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
multiplicative_expression .derives_empty: False
multiplicative_expression .follow: ["'-'", "'*'", "'/'", "'%'", "'+'"]
multiplicative_operator  -> ( Choice '*' '/' '%' )
multiplicative_operator .reg_info.index: 367
multiplicative_operator .first: ["'*'", "'/'", "'%'"]
multiplicative_operator .derives_empty: False
multiplicative_operator .follow: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
additive_expression  -> ( Choice multiplicative_expression ( Seq additive_expression additive_operator multiplicative_expression ) )
additive_expression .reg_info.index: 370
additive_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
additive_expression .derives_empty: False
additive_expression .follow: ["'+'", "'-'"]
additive_operator  -> ( Choice '+' '-' )
additive_operator .reg_info.index: 371
additive_operator .first: ["'+'", "'-'"]
additive_operator .derives_empty: False
additive_operator .follow: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
shift_expression  -> ( Choice additive_expression ( Seq unary_expression '<<' unary_expression ) ( Seq unary_expression '>>' unary_expression ) )
shift_expression .reg_info.index: 374
shift_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
shift_expression .derives_empty: False
shift_expression .follow: ["'<='", "'>='", "'<'", "'>'", "'=='", "'!='", "')'", "';'", "'&&'", "'||'", "'{'", "']'", "','"]
relational_expression  -> ( Choice shift_expression ( Seq shift_expression '<' shift_expression ) ( Seq shift_expression '>' shift_expression ) ( Seq shift_expression '<=' shift_expression ) ( Seq shift_expression '>=' shift_expression ) ( Seq shift_expression '==' shift_expression ) ( Seq shift_expression '!=' shift_expression ) )
relational_expression .reg_info.index: 382
relational_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
relational_expression .derives_empty: False
relational_expression .follow: ["')'", "';'", "'&&'", "'||'", "']'", "'{'", "','"]
short_circuit_and_expression  -> ( Choice relational_expression ( Seq short_circuit_and_expression '&&' relational_expression ) )
short_circuit_and_expression .reg_info.index: 386
short_circuit_and_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
short_circuit_and_expression .derives_empty: False
short_circuit_and_expression .follow: ["'&&'"]
short_circuit_or_expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) )
short_circuit_or_expression .reg_info.index: 389
short_circuit_or_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
short_circuit_or_expression .derives_empty: False
short_circuit_or_expression .follow: ["'||'"]
binary_or_expression  -> ( Choice unary_expression ( Seq binary_or_expression '|' unary_expression ) )
binary_or_expression .reg_info.index: 392
binary_or_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
binary_or_expression .derives_empty: False
binary_or_expression .follow: ["'|'"]
binary_and_expression  -> ( Choice unary_expression ( Seq binary_and_expression '&' unary_expression ) )
binary_and_expression .reg_info.index: 395
binary_and_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
binary_and_expression .derives_empty: False
binary_and_expression .follow: ["'&'"]
binary_xor_expression  -> ( Choice unary_expression ( Seq binary_xor_expression '^' unary_expression ) )
binary_xor_expression .reg_info.index: 398
binary_xor_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
binary_xor_expression .derives_empty: False
binary_xor_expression .follow: ["'^'"]
bitwise_expression  -> ( Choice ( Seq binary_and_expression '&' unary_expression ) ( Seq binary_or_expression '|' unary_expression ) ( Seq binary_xor_expression '^' unary_expression ) )
bitwise_expression .reg_info.index: 399
bitwise_expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
bitwise_expression .derives_empty: False
bitwise_expression .follow: []
expression  -> ( Choice relational_expression ( Seq short_circuit_or_expression '||' relational_expression ) ( Seq short_circuit_and_expression '&&' relational_expression ) bitwise_expression )
expression .reg_info.index: 400
expression .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
expression .derives_empty: False
expression .follow: ["')'", "';'", "']'", "'{'", "','"]
compound_statement  -> ( Choice ( Seq '{' compound_statement/0.1 '}' ) )
compound_statement .reg_info.index: 1064
compound_statement .first: ["'{'"]
compound_statement .derives_empty: False
compound_statement .follow: ["'else'"]
assignment_statement  -> ( Choice ( Seq lhs_expression assignment_statement/0.1 expression ) ( Seq '_' '=' expression ) )
assignment_statement .reg_info.index: 1075
assignment_statement .first: ["'_'", "'('", "'&'", "'*'"]
assignment_statement .derives_empty: False
assignment_statement .follow: []
compound_assignment_operator  -> ( Choice '+=' '-=' '*=' '/=' '%=' '&=' '|=' '^=' '>>=' '<<=' )
compound_assignment_operator .reg_info.index: 410
compound_assignment_operator .first: ["'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='"]
compound_assignment_operator .derives_empty: False
compound_assignment_operator .follow: []
increment_statement  -> ( Choice ( Seq lhs_expression '++' ) )
increment_statement .reg_info.index: 530
increment_statement .first: ["'('", "'&'", "'*'"]
increment_statement .derives_empty: False
increment_statement .follow: []
decrement_statement  -> ( Choice ( Seq lhs_expression '--' ) )
decrement_statement .reg_info.index: 531
decrement_statement .first: ["'('", "'&'", "'*'"]
decrement_statement .derives_empty: False
decrement_statement .follow: []
if_statement  -> ( Choice ( Seq if_clause if_statement/0.1 if_statement/0.2 ) )
if_statement .reg_info.index: 1099
if_statement .first: ["'if'"]
if_statement .derives_empty: False
if_statement .follow: []
if_clause  -> ( Choice ( Seq 'if' expression compound_statement ) )
if_clause .reg_info.index: 533
if_clause .first: ["'if'"]
if_clause .derives_empty: False
if_clause .follow: ["'else'"]
else_if_clause  -> ( Choice ( Seq 'else' 'if' expression compound_statement ) )
else_if_clause .reg_info.index: 534
else_if_clause .first: ["'else'"]
else_if_clause .derives_empty: False
else_if_clause .follow: ["'else'"]
else_clause  -> ( Choice ( Seq 'else' compound_statement ) )
else_clause .reg_info.index: 535
else_clause .first: ["'else'"]
else_clause .derives_empty: False
else_clause .follow: []
switch_statement  -> ( Choice ( Seq 'switch' expression '{' switch_statement/0.3 '}' ) )
switch_statement .reg_info.index: 1120
switch_statement .first: ["'switch'"]
switch_statement .derives_empty: False
switch_statement .follow: []
switch_body  -> ( Choice case_clause default_alone_clause )
switch_body .reg_info.index: 429
switch_body .first: ["'case'", "'default'"]
switch_body .derives_empty: False
switch_body .follow: ["'case'", "'default'"]
case_clause  -> ( Choice ( Seq 'case' case_selectors case_clause/0.2 compound_statement ) )
case_clause .reg_info.index: 1130
case_clause .first: ["'case'"]
case_clause .derives_empty: False
case_clause .follow: []
default_alone_clause  -> ( Choice ( Seq 'default' default_alone_clause/0.1 compound_statement ) )
default_alone_clause .reg_info.index: 1136
default_alone_clause .first: ["'default'"]
default_alone_clause .derives_empty: False
default_alone_clause .follow: []
case_selectors  -> ( Choice ( Seq case_selector case_selectors/0.1 case_selectors/0.2 ) )
case_selectors .reg_info.index: 1143
case_selectors .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'", "'default'"]
case_selectors .derives_empty: False
case_selectors .follow: ["':'", "'{'"]
case_selector  -> ( Choice 'default' expression )
case_selector .reg_info.index: 439
case_selector .first: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'", "'default'"]
case_selector .derives_empty: False
case_selector .follow: ["':'", "','", "'{'"]
loop_statement  -> ( Choice ( Seq 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ) )
loop_statement .reg_info.index: 1154
loop_statement .first: ["'loop'"]
loop_statement .derives_empty: False
loop_statement .follow: []
for_statement  -> ( Choice ( Seq 'for' '(' for_header ')' compound_statement ) )
for_statement .reg_info.index: 541
for_statement .first: ["'for'"]
for_statement .derives_empty: False
for_statement .follow: []
for_header  -> ( Choice ( Seq for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ) )
for_header .reg_info.index: 1171
for_header .first: ["';'", "'_'", "'let'", "'var'", "'('", "'const'", "'*'", "'&'"]
for_header .derives_empty: False
for_header .follow: ["')'"]
for_init  -> ( Choice variable_statement variable_updating_statement func_call_statement )
for_init .reg_info.index: 454
for_init .first: ["'let'", "'var'", "'('", "'const'", "'_'", "'*'", "'&'"]
for_init .derives_empty: False
for_init .follow: []
for_update  -> ( Choice variable_updating_statement func_call_statement )
for_update .reg_info.index: 455
for_update .first: ["'_'", "'('", "'&'", "'*'"]
for_update .derives_empty: False
for_update .follow: []
while_statement  -> ( Choice ( Seq 'while' expression compound_statement ) )
while_statement .reg_info.index: 543
while_statement .first: ["'while'"]
while_statement .derives_empty: False
while_statement .follow: []
break_statement  -> 'break'
break_statement .reg_info.index: 126
break_statement .first: ["'break'"]
break_statement .derives_empty: False
break_statement .follow: []
break_if_statement  -> ( Choice ( Seq 'break' 'if' expression ';' ) )
break_if_statement .reg_info.index: 544
break_if_statement .first: ["'break'"]
break_if_statement .derives_empty: False
break_if_statement .follow: []
continue_statement  -> 'continue'
continue_statement .reg_info.index: 127
continue_statement .first: ["'continue'"]
continue_statement .derives_empty: False
continue_statement .follow: []
continuing_statement  -> ( Choice ( Seq 'continuing' continuing_compound_statement ) )
continuing_statement .reg_info.index: 545
continuing_statement .first: ["'continuing'"]
continuing_statement .derives_empty: False
continuing_statement .follow: []
continuing_compound_statement  -> ( Choice ( Seq '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' ) )
continuing_compound_statement .reg_info.index: 1196
continuing_compound_statement .first: ["'{'"]
continuing_compound_statement .derives_empty: False
continuing_compound_statement .follow: []
return_statement  -> ( Choice ( Seq 'return' return_statement/0.1 ) )
return_statement .reg_info.index: 1201
return_statement .first: ["'return'"]
return_statement .derives_empty: False
return_statement .follow: ["';'"]
func_call_statement  -> call_phrase
func_call_statement .reg_info.index: 325
func_call_statement .first: []
func_call_statement .derives_empty: False
func_call_statement .follow: ["';'"]
const_assert_statement  -> ( Choice ( Seq 'const_assert' expression ) )
const_assert_statement .reg_info.index: 548
const_assert_statement .first: ["'const_assert'"]
const_assert_statement .derives_empty: False
const_assert_statement .follow: ["';'"]
statement  -> ( Choice ';' ( Seq return_statement ';' ) if_statement switch_statement loop_statement for_statement while_statement ( Seq func_call_statement ';' ) ( Seq variable_statement ';' ) ( Seq break_statement ';' ) ( Seq continue_statement ';' ) ( Seq 'discard' ';' ) ( Seq variable_updating_statement ';' ) compound_statement ( Seq const_assert_statement ';' ) )
statement .reg_info.index: 480
statement .first: ["'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
statement .derives_empty: False
statement .follow: ["'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
variable_updating_statement  -> ( Choice assignment_statement increment_statement decrement_statement )
variable_updating_statement .reg_info.index: 484
variable_updating_statement .first: ["'_'", "'('", "'&'", "'*'"]
variable_updating_statement .derives_empty: False
variable_updating_statement .follow: ["';'"]
function_decl  -> ( Choice ( Seq function_decl/0.0 function_header compound_statement ) )
function_decl .reg_info.index: 1244
function_decl .first: ["'@'", "'fn'"]
function_decl .derives_empty: False
function_decl .follow: []
function_header  -> ( Choice ( Seq 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ) )
function_header .reg_info.index: 1255
function_header .first: ["'fn'"]
function_header .derives_empty: False
function_header .follow: ["'{'"]
param_list  -> ( Choice ( Seq param param_list/0.1 param_list/0.2 ) )
param_list .reg_info.index: 1262
param_list .first: ["'@'", '/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
param_list .derives_empty: False
param_list .follow: []
param  -> ( Choice ( Seq param/0.0 ident ':' type_specifier ) )
param .reg_info.index: 1269
param .first: ["'@'", '/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
param .derives_empty: False
param .follow: ["','"]
enable_directive  -> ( Choice ( Seq 'enable' extension_name ';' ) )
enable_directive .reg_info.index: 553
enable_directive .first: ["'enable'"]
enable_directive .derives_empty: False
enable_directive .follow: []
ident_pattern_token  -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
ident_pattern_token .reg_info.index: 135
ident_pattern_token .first: ['/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
ident_pattern_token .derives_empty: False
ident_pattern_token .follow: []
interpolation_type_name  -> ( Choice 'perspective' 'linear' 'flat' )
interpolation_type_name .reg_info.index: 500
interpolation_type_name .first: ["'perspective'", "'linear'", "'flat'"]
interpolation_type_name .derives_empty: False
interpolation_type_name .follow: ["','", "')'"]
interpolation_sample_name  -> ( Choice 'center' 'centroid' 'sample' )
interpolation_sample_name .reg_info.index: 501
interpolation_sample_name .first: ["'center'", "'centroid'", "'sample'"]
interpolation_sample_name .derives_empty: False
interpolation_sample_name .follow: ["','", "')'"]
builtin_value_name  -> ( Choice 'vertex_index' 'instance_index' 'position' 'front_facing' 'frag_depth' 'local_invocation_id' 'local_invocation_index' 'global_invocation_id' 'workgroup_id' 'num_workgroups' 'sample_index' 'sample_mask' )
builtin_value_name .reg_info.index: 502
builtin_value_name .first: ["'vertex_index'", "'instance_index'", "'position'", "'front_facing'", "'frag_depth'", "'local_invocation_id'", "'local_invocation_index'", "'global_invocation_id'", "'workgroup_id'", "'num_workgroups'", "'sample_index'", "'sample_mask'"]
builtin_value_name .derives_empty: False
builtin_value_name .follow: ["','", "')'"]
access_mode  -> ( Choice 'read' 'write' 'read_write' )
access_mode .reg_info.index: 503
access_mode .first: ["'read'", "'write'", "'read_write'"]
access_mode .derives_empty: False
access_mode .follow: ["'>'"]
address_space  -> ( Choice 'function' 'private' 'workgroup' 'uniform' 'storage' )
address_space .reg_info.index: 504
address_space .first: ["'uniform'", "'storage'", "'function'", "'private'", "'workgroup'"]
address_space .derives_empty: False
address_space .follow: ["','", "'>'"]
texel_format  -> ( Choice 'rgba8unorm' 'rgba8snorm' 'rgba8uint' 'rgba8sint' 'rgba16uint' 'rgba16sint' 'rgba16float' 'r32uint' 'r32sint' 'r32float' 'rg32uint' 'rg32sint' 'rg32float' 'rgba32uint' 'rgba32sint' 'rgba32float' 'bgra8unorm' )
texel_format .reg_info.index: 505
texel_format .first: ["'rgba8unorm'", "'rgba8snorm'", "'rgba8uint'", "'rgba8sint'", "'rgba16uint'", "'rgba16sint'", "'rgba16float'", "'r32uint'", "'r32sint'", "'r32float'", "'rg32uint'", "'rg32sint'", "'rg32float'", "'rgba32uint'", "'rgba32sint'", "'rgba32float'", "'bgra8unorm'"]
texel_format .derives_empty: False
texel_format .follow: ["','"]
extension_name  -> ( Choice 'f16' 'bgra8unorm_storage' )
extension_name .reg_info.index: 506
extension_name .first: ["'bgra8unorm_storage'", "'f16'"]
extension_name .derives_empty: False
extension_name .follow: ["';'"]
swizzle_name  -> ( Choice '/[rgba]/' '/[rgba][rgba]/' '/[rgba][rgba][rgba]/' '/[rgba][rgba][rgba][rgba]/' '/[xyzw]/' '/[xyzw][xyzw]/' '/[xyzw][xyzw][xyzw]/' '/[xyzw][xyzw][xyzw][xyzw]/' )
swizzle_name .reg_info.index: 507
swizzle_name .first: ["'/[rgba]/'", "'/[rgba][rgba]/'", "'/[rgba][rgba][rgba]/'", "'/[rgba][rgba][rgba][rgba]/'", "'/[xyzw]/'", "'/[xyzw][xyzw]/'", "'/[xyzw][xyzw][xyzw]/'", "'/[xyzw][xyzw][xyzw][xyzw]/'"]
swizzle_name .derives_empty: False
swizzle_name .follow: ["'['", "'.'"]
ident  -> ident_pattern_token
ident .reg_info.index: 223
ident .first: []
ident .derives_empty: False
ident .follow: ["'('", "';'", "'['", "'{'", "'.'", "':'", "'='"]
_comment  -> '//.*'
_comment .reg_info.index: 188
_comment .first: ["'//.*'"]
_comment .derives_empty: False
_comment .follow: []
_blankspace  -> /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_blankspace .reg_info.index: 189
_blankspace .first: ['/[\\u0020\\u0009\\u000a\\u000b\\u000c\\u000d\\u0085\\u200e\\u200f\\u2028\\u2029]/']
_blankspace .derives_empty: False
_blankspace .follow: []
language  -> ( Choice ( Seq translation_unit EndOfText ) )
language .reg_info.index: 554
language .first: ['EndOfText', "';'", "'const_assert'", "'fn'", "'struct'", "'enable'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
language .derives_empty: False
language .follow: []
translation_unit/0.0  -> ( Choice translation_unit/0.0/0 ε )
translation_unit/0.0 .reg_info.index: 1382
translation_unit/0.0 .first: ['ε', "'enable'"]
translation_unit/0.0 .derives_empty: True
translation_unit/0.0 .follow: ['EndOfText', "';'", "'const_assert'", "'fn'", "'struct'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
translation_unit/0.1  -> ( Choice translation_unit/0.1/0 ε )
translation_unit/0.1 .reg_info.index: 1386
translation_unit/0.1 .first: ['ε', "';'", "'const_assert'", "'fn'", "'struct'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
translation_unit/0.1 .derives_empty: True
translation_unit/0.1 .follow: ['EndOfText']
attrib_end/0.0  -> ( Choice ',' ε )
attrib_end/0.0 .reg_info.index: 247
attrib_end/0.0 .first: ['ε', "','"]
attrib_end/0.0 .derives_empty: True
attrib_end/0.0 .follow: ["':'", "')'", "'{'", "'}'"]
array_type_specifier/0.3  -> ( Choice ( Seq ',' element_count_expression ) ε )
array_type_specifier/0.3 .reg_info.index: 252
array_type_specifier/0.3 .first: ['ε', "','"]
array_type_specifier/0.3 .derives_empty: True
array_type_specifier/0.3 .follow: ["'>'"]
struct_body_decl/0.2  -> ( Choice struct_body_decl/0.2/0 ε )
struct_body_decl/0.2 .reg_info.index: 1394
struct_body_decl/0.2 .first: ['ε', "','"]
struct_body_decl/0.2 .derives_empty: True
struct_body_decl/0.2 .follow: ["','", "'}'"]
struct_body_decl/0.3  -> ( Choice ',' ε )
struct_body_decl/0.3 .reg_info.index: 247
struct_body_decl/0.3 .first: ['ε', "','"]
struct_body_decl/0.3 .derives_empty: True
struct_body_decl/0.3 .follow: ["':'", "')'", "'{'", "'}'"]
struct_member/0.0  -> ( Choice struct_member/0.0/0 ε )
struct_member/0.0 .reg_info.index: 1399
struct_member/0.0 .first: ['ε', "'@'"]
struct_member/0.0 .derives_empty: True
struct_member/0.0 .follow: ['/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
type_specifier_without_ident/7.5  -> ( Choice ( Seq ',' access_mode ) ε )
type_specifier_without_ident/7.5 .reg_info.index: 294
type_specifier_without_ident/7.5 .first: ['ε', "','"]
type_specifier_without_ident/7.5 .derives_empty: True
type_specifier_without_ident/7.5 .follow: ["'>'"]
variable_decl/0.1  -> ( Choice variable_qualifier ε )
variable_decl/0.1 .reg_info.index: 309
variable_decl/0.1 .first: ['ε', "'<'"]
variable_decl/0.1 .derives_empty: True
variable_decl/0.1 .follow: ['/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
optionally_typed_ident/0.1  -> ( Choice ( Seq ':' type_specifier ) ε )
optionally_typed_ident/0.1 .reg_info.index: 312
optionally_typed_ident/0.1 .first: ['ε', "':'"]
optionally_typed_ident/0.1 .derives_empty: True
optionally_typed_ident/0.1 .follow: ["';'", "'='"]
variable_qualifier/0.2  -> ( Choice ( Seq ',' access_mode ) ε )
variable_qualifier/0.2 .reg_info.index: 294
variable_qualifier/0.2 .first: ['ε', "','"]
variable_qualifier/0.2 .derives_empty: True
variable_qualifier/0.2 .follow: ["'>'"]
global_variable_decl/0.0  -> ( Choice global_variable_decl/0.0/0 ε )
global_variable_decl/0.0 .reg_info.index: 1413
global_variable_decl/0.0 .first: ['ε', "'@'"]
global_variable_decl/0.0 .derives_empty: True
global_variable_decl/0.0 .follow: ["'var'"]
global_variable_decl/0.2  -> ( Choice ( Seq '=' expression ) ε )
global_variable_decl/0.2 .reg_info.index: 316
global_variable_decl/0.2 .first: ['ε', "'='"]
global_variable_decl/0.2 .derives_empty: True
global_variable_decl/0.2 .follow: ["';'"]
global_constant_decl/1.0  -> ( Choice global_constant_decl/1.0/0 ε )
global_constant_decl/1.0 .reg_info.index: 1420
global_constant_decl/1.0 .first: ['ε', "'@'"]
global_constant_decl/1.0 .derives_empty: True
global_constant_decl/1.0 .follow: ["'override'"]
global_constant_decl/1.3  -> ( Choice ( Seq '=' expression ) ε )
global_constant_decl/1.3 .reg_info.index: 316
global_constant_decl/1.3 .first: ['ε', "'='"]
global_constant_decl/1.3 .derives_empty: True
global_constant_decl/1.3 .follow: ["';'"]
argument_expression_list/0.1  -> ( Choice expression_comma_list ε )
argument_expression_list/0.1 .reg_info.index: 332
argument_expression_list/0.1 .first: ['ε', "'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
argument_expression_list/0.1 .derives_empty: True
argument_expression_list/0.1 .follow: ["')'"]
expression_comma_list/0.1  -> ( Choice expression_comma_list/0.1/0 ε )
expression_comma_list/0.1 .reg_info.index: 1428
expression_comma_list/0.1 .first: ['ε', "','"]
expression_comma_list/0.1 .derives_empty: True
expression_comma_list/0.1 .follow: ["','"]
expression_comma_list/0.2  -> ( Choice ',' ε )
expression_comma_list/0.2 .reg_info.index: 247
expression_comma_list/0.2 .first: ['ε', "','"]
expression_comma_list/0.2 .derives_empty: True
expression_comma_list/0.2 .follow: ["':'", "')'", "'{'", "'}'"]
component_or_swizzle_specifier/0.3  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/0.3 .reg_info.index: 339
component_or_swizzle_specifier/0.3 .first: ['ε', "'['", "'.'"]
component_or_swizzle_specifier/0.3 .derives_empty: True
component_or_swizzle_specifier/0.3 .follow: ["')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
component_or_swizzle_specifier/1.2  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/1.2 .reg_info.index: 339
component_or_swizzle_specifier/1.2 .first: ['ε', "'['", "'.'"]
component_or_swizzle_specifier/1.2 .derives_empty: True
component_or_swizzle_specifier/1.2 .follow: ["')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
component_or_swizzle_specifier/2.2  -> ( Choice component_or_swizzle_specifier ε )
component_or_swizzle_specifier/2.2 .reg_info.index: 339
component_or_swizzle_specifier/2.2 .first: ['ε', "'['", "'.'"]
component_or_swizzle_specifier/2.2 .derives_empty: True
component_or_swizzle_specifier/2.2 .follow: ["')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
singular_expression/0.1  -> ( Choice component_or_swizzle_specifier ε )
singular_expression/0.1 .reg_info.index: 339
singular_expression/0.1 .first: ['ε', "'['", "'.'"]
singular_expression/0.1 .derives_empty: True
singular_expression/0.1 .follow: ["')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
lhs_expression/0.1  -> ( Choice component_or_swizzle_specifier ε )
lhs_expression/0.1 .reg_info.index: 339
lhs_expression/0.1 .first: ['ε', "'['", "'.'"]
lhs_expression/0.1 .derives_empty: True
lhs_expression/0.1 .follow: ["')'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'++'", "'--'", "'='"]
compound_statement/0.1  -> ( Choice compound_statement/0.1/0 ε )
compound_statement/0.1 .reg_info.index: 1438
compound_statement/0.1 .first: ['ε', "'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
compound_statement/0.1 .derives_empty: True
compound_statement/0.1 .follow: ["'}'"]
assignment_statement/0.1  -> ( Choice '=' compound_assignment_operator )
assignment_statement/0.1 .reg_info.index: 406
assignment_statement/0.1 .first: ["'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'>>='", "'<<='", "'='"]
assignment_statement/0.1 .derives_empty: False
assignment_statement/0.1 .follow: ["'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
if_statement/0.1  -> ( Choice if_statement/0.1/0 ε )
if_statement/0.1 .reg_info.index: 1443
if_statement/0.1 .first: ['ε', "'else'"]
if_statement/0.1 .derives_empty: True
if_statement/0.1 .follow: ["'else'"]
if_statement/0.2  -> ( Choice else_clause ε )
if_statement/0.2 .reg_info.index: 418
if_statement/0.2 .first: ['ε', "'else'"]
if_statement/0.2 .derives_empty: True
if_statement/0.2 .follow: []
switch_statement/0.3  -> ( Choice switch_statement/0.3/0 )
switch_statement/0.3 .reg_info.index: 1360
switch_statement/0.3 .first: ['ε', "'case'", "'default'"]
switch_statement/0.3 .derives_empty: True
switch_statement/0.3 .follow: ["'}'"]
case_clause/0.2  -> ( Choice ':' ε )
case_clause/0.2 .reg_info.index: 431
case_clause/0.2 .first: ['ε', "':'"]
case_clause/0.2 .derives_empty: True
case_clause/0.2 .follow: ["'{'"]
default_alone_clause/0.1  -> ( Choice ':' ε )
default_alone_clause/0.1 .reg_info.index: 431
default_alone_clause/0.1 .first: ['ε', "':'"]
default_alone_clause/0.1 .derives_empty: True
default_alone_clause/0.1 .follow: ["'{'"]
case_selectors/0.1  -> ( Choice case_selectors/0.1/0 ε )
case_selectors/0.1 .reg_info.index: 1450
case_selectors/0.1 .first: ['ε', "','"]
case_selectors/0.1 .derives_empty: True
case_selectors/0.1 .follow: ["':'", "','", "'{'"]
case_selectors/0.2  -> ( Choice ',' ε )
case_selectors/0.2 .reg_info.index: 247
case_selectors/0.2 .first: ['ε', "','"]
case_selectors/0.2 .derives_empty: True
case_selectors/0.2 .follow: ["':'", "')'", "'{'", "'}'"]
loop_statement/0.2  -> ( Choice loop_statement/0.2/0 ε )
loop_statement/0.2 .reg_info.index: 1455
loop_statement/0.2 .first: ['ε', "'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
loop_statement/0.2 .derives_empty: True
loop_statement/0.2 .follow: ["'continuing'", "'}'"]
loop_statement/0.3  -> ( Choice continuing_statement ε )
loop_statement/0.3 .reg_info.index: 441
loop_statement/0.3 .first: ['ε', "'continuing'"]
loop_statement/0.3 .derives_empty: True
loop_statement/0.3 .follow: ["'}'"]
for_header/0.0  -> ( Choice for_init ε )
for_header/0.0 .reg_info.index: 446
for_header/0.0 .first: ['ε', "'_'", "'let'", "'var'", "'('", "'const'", "'*'", "'&'"]
for_header/0.0 .derives_empty: True
for_header/0.0 .follow: ["';'"]
for_header/0.2  -> ( Choice expression ε )
for_header/0.2 .reg_info.index: 447
for_header/0.2 .first: ['ε', "'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
for_header/0.2 .derives_empty: True
for_header/0.2 .follow: ["';'"]
for_header/0.4  -> ( Choice for_update ε )
for_header/0.4 .reg_info.index: 449
for_header/0.4 .first: ['ε', "'('", "'_'", "'*'", "'&'"]
for_header/0.4 .derives_empty: True
for_header/0.4 .follow: ["')'"]
continuing_compound_statement/0.1  -> ( Choice continuing_compound_statement/0.1/0 ε )
continuing_compound_statement/0.1 .reg_info.index: 1463
continuing_compound_statement/0.1 .first: ['ε', "'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
continuing_compound_statement/0.1 .derives_empty: True
continuing_compound_statement/0.1 .follow: ["'break'", "'}'"]
continuing_compound_statement/0.2  -> ( Choice break_if_statement ε )
continuing_compound_statement/0.2 .reg_info.index: 461
continuing_compound_statement/0.2 .first: ['ε', "'break'"]
continuing_compound_statement/0.2 .derives_empty: True
continuing_compound_statement/0.2 .follow: ["'}'"]
return_statement/0.1  -> ( Choice expression ε )
return_statement/0.1 .reg_info.index: 447
return_statement/0.1 .first: ['ε', "'true'", "'false'", '/0[iu]?/', '/[1-9][0-9]*[iu]?/', '/0[xX][0-9a-fA-F]+[iu]?/', '/0[fh]/', '/[1-9][0-9]*[fh]/', '/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/', '/[0-9]+[eE][+-]?[0-9]+[fh]?/', '/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/', '/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/', "'('", "'bitcast'", "'-'", "'!'", "'~'", "'*'", "'&'"]
return_statement/0.1 .derives_empty: True
return_statement/0.1 .follow: ["';'"]
function_decl/0.0  -> ( Choice function_decl/0.0/0 ε )
function_decl/0.0 .reg_info.index: 1469
function_decl/0.0 .first: ['ε', "'@'"]
function_decl/0.0 .derives_empty: True
function_decl/0.0 .follow: ["'fn'"]
function_header/0.3  -> ( Choice param_list ε )
function_header/0.3 .reg_info.index: 488
function_header/0.3 .first: ['ε', "'@'", '/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
function_header/0.3 .derives_empty: True
function_header/0.3 .follow: ["')'"]
function_header/0.5  -> ( Choice ( Seq '->' function_header/0.5/0.1 type_specifier ) ε )
function_header/0.5 .reg_info.index: 1476
function_header/0.5 .first: ['ε', "'->'"]
function_header/0.5 .derives_empty: True
function_header/0.5 .follow: ["'{'"]
param_list/0.1  -> ( Choice param_list/0.1/0 ε )
param_list/0.1 .reg_info.index: 1480
param_list/0.1 .first: ['ε', "','"]
param_list/0.1 .derives_empty: True
param_list/0.1 .follow: ["','"]
param_list/0.2  -> ( Choice ',' ε )
param_list/0.2 .reg_info.index: 247
param_list/0.2 .first: ['ε', "','"]
param_list/0.2 .derives_empty: True
param_list/0.2 .follow: ["':'", "')'", "'{'", "'}'"]
param/0.0  -> ( Choice param/0.0/0 ε )
param/0.0 .reg_info.index: 1485
param/0.0 .first: ['ε', "'@'"]
param/0.0 .derives_empty: True
param/0.0 .follow: ['/([_\\p{XID_Start}][\\p{XID_Continue}]+)|([\\p{XID_Start}])/']
switch_statement/0.3/0  -> ( Choice ( Seq switch_body switch_statement/0.3/0 ) ε )
switch_statement/0.3/0 .reg_info.index: 1359
switch_statement/0.3/0 .first: ['ε', "'case'", "'default'"]
switch_statement/0.3/0 .derives_empty: True
switch_statement/0.3/0 .follow: []
translation_unit/0.0/0  -> ( Choice ( Seq global_directive translation_unit/0.0/0 ) ε )
translation_unit/0.0/0 .reg_info.index: 1380
translation_unit/0.0/0 .first: ['ε', "'enable'"]
translation_unit/0.0/0 .derives_empty: True
translation_unit/0.0/0 .follow: []
translation_unit/0.1/0  -> ( Choice ( Seq global_decl translation_unit/0.1/0 ) ε )
translation_unit/0.1/0 .reg_info.index: 1384
translation_unit/0.1/0 .first: ['ε', "';'", "'const_assert'", "'fn'", "'struct'", "'@'", "'var'", "'override'", "'const'", "'alias'"]
translation_unit/0.1/0 .derives_empty: True
translation_unit/0.1/0 .follow: []
struct_body_decl/0.2/0  -> ( Choice ( Seq struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ) ε )
struct_body_decl/0.2/0 .reg_info.index: 1504
struct_body_decl/0.2/0 .first: ['ε', "','"]
struct_body_decl/0.2/0 .derives_empty: True
struct_body_decl/0.2/0 .follow: []
struct_member/0.0/0  -> ( Choice ( Seq attribute struct_member/0.0/0 ) ε )
struct_member/0.0/0 .reg_info.index: 1397
struct_member/0.0/0 .first: ['ε', "'@'"]
struct_member/0.0/0 .derives_empty: True
struct_member/0.0/0 .follow: []
global_variable_decl/0.0/0  -> ( Choice ( Seq attribute global_variable_decl/0.0/0 ) ε )
global_variable_decl/0.0/0 .reg_info.index: 1411
global_variable_decl/0.0/0 .first: ['ε', "'@'"]
global_variable_decl/0.0/0 .derives_empty: True
global_variable_decl/0.0/0 .follow: []
global_constant_decl/1.0/0  -> ( Choice ( Seq attribute global_constant_decl/1.0/0 ) ε )
global_constant_decl/1.0/0 .reg_info.index: 1418
global_constant_decl/1.0/0 .first: ['ε', "'@'"]
global_constant_decl/1.0/0 .derives_empty: True
global_constant_decl/1.0/0 .follow: []
expression_comma_list/0.1/0  -> ( Choice ( Seq expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ) ε )
expression_comma_list/0.1/0 .reg_info.index: 1523
expression_comma_list/0.1/0 .first: ['ε', "','"]
expression_comma_list/0.1/0 .derives_empty: True
expression_comma_list/0.1/0 .follow: []
compound_statement/0.1/0  -> ( Choice ( Seq statement compound_statement/0.1/0 ) ε )
compound_statement/0.1/0 .reg_info.index: 1436
compound_statement/0.1/0 .first: ['ε', "'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
compound_statement/0.1/0 .derives_empty: True
compound_statement/0.1/0 .follow: []
if_statement/0.1/0  -> ( Choice ( Seq else_if_clause if_statement/0.1/0 ) ε )
if_statement/0.1/0 .reg_info.index: 1441
if_statement/0.1/0 .first: ['ε', "'else'"]
if_statement/0.1/0 .derives_empty: True
if_statement/0.1/0 .follow: []
case_selectors/0.1/0  -> ( Choice ( Seq case_selectors/0.1/0/0.0 case_selectors/0.1/0 ) ε )
case_selectors/0.1/0 .reg_info.index: 1538
case_selectors/0.1/0 .first: ['ε', "','"]
case_selectors/0.1/0 .derives_empty: True
case_selectors/0.1/0 .follow: []
loop_statement/0.2/0  -> ( Choice ( Seq statement loop_statement/0.2/0 ) ε )
loop_statement/0.2/0 .reg_info.index: 1453
loop_statement/0.2/0 .first: ['ε', "'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
loop_statement/0.2/0 .derives_empty: True
loop_statement/0.2/0 .follow: []
continuing_compound_statement/0.1/0  -> ( Choice ( Seq statement continuing_compound_statement/0.1/0 ) ε )
continuing_compound_statement/0.1/0 .reg_info.index: 1461
continuing_compound_statement/0.1/0 .first: ['ε', "'return'", "';'", "'discard'", "'const_assert'", "'('", "'const'", "'array'", "'{'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'", "'let'", "'var'", "'*'", "'&'", "'_'", "'if'", "'switch'", "'loop'", "'for'", "'while'", "'break'", "'continue'"]
continuing_compound_statement/0.1/0 .derives_empty: True
continuing_compound_statement/0.1/0 .follow: []
function_decl/0.0/0  -> ( Choice ( Seq attribute function_decl/0.0/0 ) ε )
function_decl/0.0/0 .reg_info.index: 1467
function_decl/0.0/0 .first: ['ε', "'@'"]
function_decl/0.0/0 .derives_empty: True
function_decl/0.0/0 .follow: []
function_header/0.5/0.1  -> ( Choice function_header/0.5/0.1/0 ε )
function_header/0.5/0.1 .reg_info.index: 1566
function_header/0.5/0.1 .first: ['ε', "'@'"]
function_header/0.5/0.1 .derives_empty: True
function_header/0.5/0.1 .follow: ["'array'", "'sampler'", "'sampler_comparison'", "'texture_1d'", "'texture_2d'", "'texture_2d_array'", "'texture_3d'", "'texture_cube'", "'texture_cube_array'", "'texture_multisampled_2d'", "'texture_storage_1d'", "'texture_storage_2d'", "'texture_storage_2d_array'", "'texture_storage_3d'", "'texture_depth_2d'", "'texture_depth_2d_array'", "'texture_depth_cube'", "'texture_depth_cube_array'", "'texture_depth_multisampled_2d'", "'bool'", "'f32'", "'f16'", "'i32'", "'u32'", "'ptr'", "'atomic'", "'vec2'", "'vec3'", "'vec4'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4x2'", "'mat4x3'", "'mat4x4'"]
param_list/0.1/0  -> ( Choice ( Seq param_list/0.1/0/0.0 param_list/0.1/0 ) ε )
param_list/0.1/0 .reg_info.index: 1558
param_list/0.1/0 .first: ['ε', "','"]
param_list/0.1/0 .derives_empty: True
param_list/0.1/0 .follow: []
param/0.0/0  -> ( Choice ( Seq attribute param/0.0/0 ) ε )
param/0.0/0 .reg_info.index: 1483
param/0.0/0 .first: ['ε', "'@'"]
param/0.0/0 .derives_empty: True
param/0.0/0 .follow: []
struct_body_decl/0.2/0/0.0  -> ( Choice ( Seq ',' struct_member ) )
struct_body_decl/0.2/0/0.0 .reg_info.index: 1500
struct_body_decl/0.2/0/0.0 .first: ["','"]
struct_body_decl/0.2/0/0.0 .derives_empty: False
struct_body_decl/0.2/0/0.0 .follow: ["','"]
expression_comma_list/0.1/0/0.0  -> ( Choice ( Seq ',' expression ) )
expression_comma_list/0.1/0/0.0 .reg_info.index: 1519
expression_comma_list/0.1/0/0.0 .first: ["','"]
expression_comma_list/0.1/0/0.0 .derives_empty: False
expression_comma_list/0.1/0/0.0 .follow: ["','"]
case_selectors/0.1/0/0.0  -> ( Choice ( Seq ',' case_selector ) )
case_selectors/0.1/0/0.0 .reg_info.index: 1534
case_selectors/0.1/0/0.0 .first: ["','"]
case_selectors/0.1/0/0.0 .derives_empty: False
case_selectors/0.1/0/0.0 .follow: ["','"]
param_list/0.1/0/0.0  -> ( Choice ( Seq ',' param ) )
param_list/0.1/0/0.0 .reg_info.index: 1554
param_list/0.1/0/0.0 .first: ["','"]
param_list/0.1/0/0.0 .derives_empty: False
param_list/0.1/0/0.0 .follow: ["','"]
function_header/0.5/0.1/0  -> ( Choice ( Seq attribute function_header/0.5/0.1/0 ) ε )
function_header/0.5/0.1/0 .reg_info.index: 1564
function_header/0.5/0.1/0 .first: ['ε', "'@'"]
function_header/0.5/0.1/0 .derives_empty: True
function_header/0.5/0.1/0 .follow: []

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
const_assert_statement -> · 'const_assert' expression : {';'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
extension_name -> · 'bgra8unorm_storage' : {';'}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
extension_name -> 'bgra8unorm_storage' · : {';'}

#9
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#10
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#11
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#12
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
const_assert_statement -> · 'const_assert' expression : {';'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {';'}

#13
global_decl -> ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#14
global_decl -> global_variable_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#15
global_decl -> global_constant_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#16
global_decl -> type_alias_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#17
global_decl -> struct_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#18
global_decl -> function_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#19
global_decl -> const_assert_statement · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}

#21
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#22
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#23
type_alias_decl -> 'alias' · ident '=' type_specifier : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#24
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#25
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {'{'}

#26
const_assert_statement -> 'const_assert' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#27
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#28
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#29
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#30
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#31
attribute -> '@' · 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#32
attribute -> '@' 'align' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#33
attribute -> '@' 'binding' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#34
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#35
attribute -> '@' 'const' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#36
attribute -> '@' 'group' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#37
attribute -> '@' 'id' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#38
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#39
attribute -> '@' 'invariant' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#40
attribute -> '@' 'location' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#41
attribute -> '@' 'size' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#42
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#43
attribute -> '@' 'vertex' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#44
attribute -> '@' 'fragment' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#45
attribute -> '@' 'compute' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#46
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#47
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#48
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#49
const_assert_statement -> 'const_assert' expression · : {';'}

#50
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#51
expression -> short_circuit_or_expression · '||' relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {'||'}

#52
expression -> short_circuit_and_expression · '&&' relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {'&&'}

#53
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#54
relational_expression -> shift_expression · '!=' shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · '<' shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · '<=' shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · '==' shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · '>' shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · '>=' shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#55
binary_and_expression -> binary_and_expression · '&' unary_expression : {'&'}
bitwise_expression -> binary_and_expression · '&' unary_expression : {')' ',' ':' ';' '>' ']' '{'}

#56
binary_or_expression -> binary_or_expression · '|' unary_expression : {'|'}
bitwise_expression -> binary_or_expression · '|' unary_expression : {')' ',' ':' ';' '>' ']' '{'}

#57
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {')' ',' ':' ';' '>' ']' '{'}

#58
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#59
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · '<<' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · '>>' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#60
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#61
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#62
unary_expression -> '-' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#63
unary_expression -> '!' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#64
unary_expression -> '~' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#65
unary_expression -> '*' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#66
unary_expression -> '&' · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#67
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#68
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#69
primary_expression -> call_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#70
primary_expression -> literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#71
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#72
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#73
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#74
call_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#75
literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#76
literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#77
literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#78
paren_expression -> '(' · expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')'}
expression -> · short_circuit_or_expression '||' relational_expression : {')'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#79
callable -> type_specifier_without_ident · : {'('}

#80
callable -> vec_prefix · : {'('}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {'('}

#81
callable -> mat_prefix · : {'('}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {'('}

#82
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {'('}
callable -> 'array' · : {'('}

#83
int_literal -> decimal_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#84
int_literal -> hex_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#85
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#87
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#88
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#89
type_specifier_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_specifier_without_ident -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_specifier_without_ident -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_specifier_without_ident -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#93
type_specifier_without_ident -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#94
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#95
type_specifier_without_ident -> array_type_specifier · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#96
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#97
type_specifier_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#98
vec_prefix -> 'vec2' · : {'(' '<'}

#99
vec_prefix -> 'vec3' · : {'(' '<'}

#100
vec_prefix -> 'vec4' · : {'(' '<'}

#101
mat_prefix -> 'mat2x2' · : {'(' '<'}

#102
mat_prefix -> 'mat2x3' · : {'(' '<'}

#103
mat_prefix -> 'mat2x4' · : {'(' '<'}

#104
mat_prefix -> 'mat3x2' · : {'(' '<'}

#105
mat_prefix -> 'mat3x3' · : {'(' '<'}

#106
mat_prefix -> 'mat3x4' · : {'(' '<'}

#107
mat_prefix -> 'mat4x2' · : {'(' '<'}

#108
mat_prefix -> 'mat4x3' · : {'(' '<'}

#109
mat_prefix -> 'mat4x4' · : {'(' '<'}

#110
decimal_int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#115
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#116
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#117
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#118
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#119
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#120
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#121
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#122
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#124
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#125
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#126
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#127
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#128
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#129
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#130
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#131
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#132
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#133
sampled_texture_type -> 'texture_1d' · : {'<'}

#134
sampled_texture_type -> 'texture_2d' · : {'<'}

#135
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#136
sampled_texture_type -> 'texture_3d' · : {'<'}

#137
sampled_texture_type -> 'texture_cube' · : {'<'}

#138
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#139
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#140
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#141
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#142
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#143
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#144
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
compound_statement -> · '{' compound_statement/0.1 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#145
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#146
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#147
type_alias_decl -> 'alias' ident · '=' type_specifier : {';'}

#148
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#149
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {';'}

#150
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {';' '='}
optionally_typed_ident/0.1 -> · ':' type_specifier : {';' '='}

#151
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
global_variable_decl/0.2 -> · '=' expression : {';'}

#152
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#153
global_decl -> const_assert_statement ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#154
global_decl -> type_alias_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#155
global_decl -> global_constant_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#156
global_decl -> global_variable_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#157
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#158
global_directive -> 'enable' extension_name ';' · : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#159
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#160
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#161
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#162
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#163
global_variable_decl/0.2 -> '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#164
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {';' '='}

#165
optionally_typed_ident/0.1 -> ':' · type_specifier : {';' '='}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {';' '='}
depth_texture_type -> · 'texture_depth_2d' : {';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {';' '='}
depth_texture_type -> · 'texture_depth_cube' : {';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';' '='}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';' '='}
sampler_type -> · 'sampler_comparison' : {';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';' '='}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {';' '='}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {';' '='}
texture_and_sampler_types -> · sampler_type : {';' '='}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {';' '='}
type_specifier -> · ident : {';' '='}
type_specifier -> · type_specifier_without_ident : {';' '='}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {';' '='}
type_specifier_without_ident -> · 'bool' : {';' '='}
type_specifier_without_ident -> · 'f16' : {';' '='}
type_specifier_without_ident -> · 'f32' : {';' '='}
type_specifier_without_ident -> · 'i32' : {';' '='}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {';' '='}
type_specifier_without_ident -> · 'u32' : {';' '='}
type_specifier_without_ident -> · array_type_specifier : {';' '='}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {';' '='}
type_specifier_without_ident -> · texture_and_sampler_types : {';' '='}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {';' '='}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#166
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#167
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {';'}
global_constant_decl/1.3 -> · '=' expression : {';'}

#168
type_alias_decl -> 'alias' ident '=' · type_specifier : {';'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {';'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {';'}
type_specifier -> · ident : {';'}
type_specifier -> · type_specifier_without_ident : {';'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {';'}
type_specifier_without_ident -> · 'bool' : {';'}
type_specifier_without_ident -> · 'f16' : {';'}
type_specifier_without_ident -> · 'f32' : {';'}
type_specifier_without_ident -> · 'i32' : {';'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {';'}
type_specifier_without_ident -> · 'u32' : {';'}
type_specifier_without_ident -> · array_type_specifier : {';'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {';'}
type_specifier_without_ident -> · texture_and_sampler_types : {';'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {';'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#169
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#170
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#171
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {'{'}

#172
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#173
compound_statement -> '{' · compound_statement/0.1 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' EndOfText}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#174
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'bgra8unorm' : {','}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#175
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#176
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#177
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#178
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#179
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · 'f16' : {',' '>'}
type_specifier_without_ident -> · 'f32' : {',' '>'}
type_specifier_without_ident -> · 'i32' : {',' '>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {',' '>'}
type_specifier_without_ident -> · 'u32' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#180
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#181
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#182
paren_expression -> '(' expression · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#183
call_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#184
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
argument_expression_list/0.1 -> · expression_comma_list : {')'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#185
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · 'f16' : {'>'}
type_specifier_without_ident -> · 'f32' : {'>'}
type_specifier_without_ident -> · 'i32' : {'>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'>'}
type_specifier_without_ident -> · 'u32' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#186
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#187
singular_expression/0.1 -> component_or_swizzle_specifier · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#188
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {']'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {']'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression '&&' relational_expression : {']'}
expression -> · short_circuit_or_expression '||' relational_expression : {']'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#189
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#190
unary_expression -> '&' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#191
unary_expression -> '*' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#192
unary_expression -> '~' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#193
unary_expression -> '!' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#194
unary_expression -> '-' unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#195
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#196
multiplicative_operator -> '*' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#197
multiplicative_operator -> '/' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#198
multiplicative_operator -> '%' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#199
shift_expression -> unary_expression '<<' · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#200
shift_expression -> unary_expression '>>' · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#201
additive_expression -> additive_expression additive_operator · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#202
additive_operator -> '+' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#203
additive_operator -> '-' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#204
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#205
binary_or_expression -> binary_or_expression '|' · unary_expression : {'|'}
bitwise_expression -> binary_or_expression '|' · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · call_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · '&' unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · '*' unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · '-' unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · '~' unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#206
binary_and_expression -> binary_and_expression '&' · unary_expression : {'&'}
bitwise_expression -> binary_and_expression '&' · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
call_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · decimal_int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · hex_int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · call_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · '&' unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · '*' unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · '-' unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · '~' unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#207
relational_expression -> shift_expression '<' · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#208
relational_expression -> shift_expression '>' · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#209
relational_expression -> shift_expression '<=' · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#210
relational_expression -> shift_expression '>=' · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#211
relational_expression -> shift_expression '==' · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#212
relational_expression -> shift_expression '!=' · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#213
expression -> short_circuit_and_expression '&&' · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {'&&'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · call_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#214
expression -> short_circuit_or_expression '||' · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {'||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · call_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#215
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#216
attribute -> '@' 'size' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#217
attribute -> '@' 'location' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#218
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#219
attribute -> '@' 'id' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#220
attribute -> '@' 'group' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#221
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#222
attribute -> '@' 'binding' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#223
attribute -> '@' 'align' '(' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#224
attribute -> '@' 'align' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#225
attribute -> '@' 'binding' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#226
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#227
builtin_value_name -> 'vertex_index' · : {')' ','}

#228
builtin_value_name -> 'instance_index' · : {')' ','}

#229
builtin_value_name -> 'position' · : {')' ','}

#230
builtin_value_name -> 'front_facing' · : {')' ','}

#231
builtin_value_name -> 'frag_depth' · : {')' ','}

#232
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#233
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#234
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#235
builtin_value_name -> 'workgroup_id' · : {')' ','}

#236
builtin_value_name -> 'num_workgroups' · : {')' ','}

#237
builtin_value_name -> 'sample_index' · : {')' ','}

#238
builtin_value_name -> 'sample_mask' · : {')' ','}

#239
attribute -> '@' 'group' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#240
attribute -> '@' 'id' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#241
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#242
interpolation_type_name -> 'perspective' · : {')' ','}

#243
interpolation_type_name -> 'linear' · : {')' ','}

#244
interpolation_type_name -> 'flat' · : {')' ','}

#245
attribute -> '@' 'location' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#246
attribute -> '@' 'size' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#247
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#248
expression -> short_circuit_or_expression '||' relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {'||'}

#249
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · '<<' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · '>>' unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#250
expression -> short_circuit_and_expression '&&' relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {'&&'}

#251
relational_expression -> shift_expression '!=' shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#252
relational_expression -> shift_expression '==' shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#253
relational_expression -> shift_expression '>=' shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#254
relational_expression -> shift_expression '<=' shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#255
relational_expression -> shift_expression '>' shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#256
relational_expression -> shift_expression '<' shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#257
binary_and_expression -> binary_and_expression '&' unary_expression · : {'&'}
bitwise_expression -> binary_and_expression '&' unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#258
binary_or_expression -> binary_or_expression '|' unary_expression · : {'|'}
bitwise_expression -> binary_or_expression '|' unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#259
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#260
additive_expression -> additive_expression additive_operator multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#261
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#262
shift_expression -> unary_expression '>>' unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#263
shift_expression -> unary_expression '<<' unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#264
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#265
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#266
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#267
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#268
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#269
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#270
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#271
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#272
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#273
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#274
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#275
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#276
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#277
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#278
type_specifier -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#279
type_specifier -> type_specifier_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#280
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {')' ',' ';' '=' '>' '{' '}'}

#281
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {')' ',' ';' '=' '>' '{' '}'}

#282
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {')' ',' ';' '=' '>' '{' '}'}

#283
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#284
argument_expression_list/0.1 -> expression_comma_list · : {')'}

#285
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {')' ','}

#286
paren_expression -> '(' expression ')' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#287
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#288
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#289
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier/0.3 -> · ',' element_count_expression : {'>'}

#290
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#291
address_space -> 'function' · : {',' '>'}

#292
address_space -> 'private' · : {',' '>'}

#293
address_space -> 'workgroup' · : {',' '>'}

#294
address_space -> 'uniform' · : {',' '>'}

#295
address_space -> 'storage' · : {',' '>'}

#296
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#297
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#298
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#299
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#300
texel_format -> 'rgba8unorm' · : {','}

#301
texel_format -> 'rgba8snorm' · : {','}

#302
texel_format -> 'rgba8uint' · : {','}

#303
texel_format -> 'rgba8sint' · : {','}

#304
texel_format -> 'rgba16uint' · : {','}

#305
texel_format -> 'rgba16sint' · : {','}

#306
texel_format -> 'rgba16float' · : {','}

#307
texel_format -> 'r32uint' · : {','}

#308
texel_format -> 'r32sint' · : {','}

#309
texel_format -> 'r32float' · : {','}

#310
texel_format -> 'rg32uint' · : {','}

#311
texel_format -> 'rg32sint' · : {','}

#312
texel_format -> 'rg32float' · : {','}

#313
texel_format -> 'rgba32uint' · : {','}

#314
texel_format -> 'rgba32sint' · : {','}

#315
texel_format -> 'rgba32float' · : {','}

#316
texel_format -> 'bgra8unorm' · : {','}

#317
compound_statement -> '{' compound_statement/0.1 · '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' EndOfText}

#318
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#319
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#320
statement -> ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#321
statement -> return_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#322
statement -> if_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#323
statement -> switch_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#324
statement -> loop_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#325
statement -> for_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#326
statement -> while_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#327
statement -> func_call_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#328
statement -> variable_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#329
statement -> break_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#330
statement -> continue_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#331
statement -> 'discard' · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#332
statement -> variable_updating_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#333
statement -> compound_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#334
statement -> const_assert_statement · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#335
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#336
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#337
switch_statement -> 'switch' · expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#338
loop_statement -> 'loop' · '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#339
for_statement -> 'for' · '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#340
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#341
func_call_statement -> callable · argument_expression_list : {')' ';'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {')' ';'}

#342
variable_statement -> variable_decl · '=' expression : {';'}
variable_statement -> variable_decl · : {';'}

#343
variable_statement -> 'let' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#344
variable_statement -> 'const' · optionally_typed_ident '=' expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#345
break_statement -> 'break' · : {';'}

#346
continue_statement -> 'continue' · : {';'}

#347
variable_updating_statement -> assignment_statement · : {')' ';'}

#348
variable_updating_statement -> increment_statement · : {')' ';'}

#349
variable_updating_statement -> decrement_statement · : {')' ';'}

#350
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#351
callable -> ident · : {'('}
core_lhs_expression -> ident · : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#352
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · '--' : {')' ';'}
increment_statement -> lhs_expression · '++' : {')' ';'}
assignment_statement/0.1 -> · '=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '%=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '&=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '*=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '+=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '-=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '/=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '<<=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '>>=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '^=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '|=' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#353
assignment_statement -> '_' · '=' expression : {')' ';'}

#354
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#355
lhs_expression -> '*' · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#356
lhs_expression -> '&' · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#357
core_lhs_expression -> '(' · lhs_expression ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {')' '.' '['}
core_lhs_expression -> · ident : {')' '.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' '.' '['}
lhs_expression -> · '&' lhs_expression : {')'}
lhs_expression -> · '*' lhs_expression : {')'}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {')'}

#358
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {')'}

#359
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {',' '}'}

#360
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#361
struct_member/0.0 -> struct_member/0.0/0 · : {}

#362
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#363
type_alias_decl -> 'alias' ident '=' type_specifier · : {';'}

#364
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {';'}

#365
global_constant_decl/1.3 -> '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#366
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {';'}

#367
optionally_typed_ident/0.1 -> ':' type_specifier · : {';' '='}

#368
global_variable_decl/0.2 -> '=' expression · : {';'}

#369
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {'>'}

#370
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {';' '='}

#371
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#372
variable_qualifier/0.2 -> ',' · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#373
global_constant_decl/1.3 -> '=' expression · : {';'}

#374
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#375
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {',' '}'}

#376
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.3 -> · ',' : {'}'}

#377
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {',' '}'}

#378
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {',' '}'}

#379
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {',' '}'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#380
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {'{'}

#381
function_header/0.3 -> param_list · : {')'}

#382
param_list -> param · param_list/0.1 param_list/0.2 : {')'}
param_list/0.1 -> · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · ',' param : {')' ','}

#383
param -> param/0.0 · ident ':' type_specifier : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#384
param/0.0 -> param/0.0/0 · : {}

#385
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
param/0.0/0 -> · attribute param/0.0/0 : {}

#386
core_lhs_expression -> '(' lhs_expression · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#387
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#388
lhs_expression -> '&' lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#389
lhs_expression -> '*' lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#390
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#391
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#392
assignment_statement -> '_' '=' · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#393
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ';'}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#394
increment_statement -> lhs_expression '++' · : {')' ';'}

#395
decrement_statement -> lhs_expression '--' · : {')' ';'}

#396
assignment_statement/0.1 -> '=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#397
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#398
compound_assignment_operator -> '+=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#399
compound_assignment_operator -> '-=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#400
compound_assignment_operator -> '*=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#401
compound_assignment_operator -> '/=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#402
compound_assignment_operator -> '%=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#403
compound_assignment_operator -> '&=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#404
compound_assignment_operator -> '|=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#405
compound_assignment_operator -> '^=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#406
compound_assignment_operator -> '>>=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#407
compound_assignment_operator -> '<<=' · : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#408
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#409
variable_statement -> 'const' optionally_typed_ident · '=' expression : {';'}

#410
variable_statement -> 'let' optionally_typed_ident · '=' expression : {';'}

#411
variable_statement -> variable_decl '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#412
func_call_statement -> callable argument_expression_list · : {')' ';'}

#413
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#414
for_statement -> 'for' '(' · for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · variable_statement : {';'}
for_init -> · variable_updating_statement : {';'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#415
loop_statement -> 'loop' '{' · loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#416
switch_statement -> 'switch' expression · '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#417
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#418
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#419
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#420
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#421
return_statement -> 'return' return_statement/0.1 · : {';'}

#422
return_statement/0.1 -> expression · : {';'}

#423
statement -> const_assert_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#424
statement -> variable_updating_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#425
statement -> 'discard' ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#426
statement -> continue_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#427
statement -> break_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#428
statement -> variable_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#429
statement -> func_call_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#430
statement -> return_statement ';' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#431
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#432
compound_statement -> '{' compound_statement/0.1 '}' · : {'&' '(' '*' ';' '@' '_' 'alias' 'array' 'atomic' 'bool' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'f16' 'f32' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' EndOfText}

#433
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#434
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#435
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#436
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#437
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · 'f16' : {',' '>'}
type_specifier_without_ident -> · 'f32' : {',' '>'}
type_specifier_without_ident -> · 'i32' : {',' '>'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {',' '>'}
type_specifier_without_ident -> · 'u32' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#438
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#439
array_type_specifier/0.3 -> ',' · element_count_expression : {'>'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'>'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
call_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · decimal_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · hex_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · call_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '&' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '*' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '-' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · '~' unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#440
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#441
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#442
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {')'}
expression_comma_list/0.2 -> · ',' : {')'}

#443
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {')' ','}

#444
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {')' ','}

#445
expression_comma_list/0.1/0/0.0 -> ',' · expression : {')' ','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#446
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#447
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#448
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#449
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#450
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#451
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#452
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#453
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#454
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#455
attrib_end -> attrib_end/0.0 · ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#456
attribute -> '@' 'size' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#457
attrib_end/0.0 -> ',' · : {')'}

#458
attribute -> '@' 'location' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#459
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#460
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#461
attribute -> '@' 'id' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#462
attribute -> '@' 'group' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#463
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#464
attribute -> '@' 'binding' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#465
attribute -> '@' 'align' '(' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#466
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#467
interpolation_sample_name -> 'center' · : {')' ','}

#468
interpolation_sample_name -> 'centroid' · : {')' ','}

#469
interpolation_sample_name -> 'sample' · : {')' ','}

#470
attrib_end -> attrib_end/0.0 ')' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#471
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#472
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#473
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#474
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#475
expression_comma_list/0.1/0/0.0 -> ',' expression · : {')' ','}

#476
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {')' ','}

#477
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {')'}

#478
expression_comma_list/0.2 -> ',' · : {')'}

#479
array_type_specifier/0.3 -> ',' element_count_expression · : {'>'}

#480
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'bitcast' 'false' 'true' '~' /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#481
element_count_expression -> bitwise_expression · : {'>'}

#482
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#483
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#484
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}
type_specifier_without_ident/7.5 -> · ',' access_mode : {'>'}

#485
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#486
access_mode -> 'read' · : {'>'}

#487
access_mode -> 'write' · : {'>'}

#488
access_mode -> 'read_write' · : {'>'}

#489
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#490
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#491
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#492
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#493
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#494
switch_statement -> 'switch' expression '{' · switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#495
loop_statement -> 'loop' '{' loop_statement/0.2 · loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#496
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#497
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#498
for_statement -> 'for' '(' for_header · ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#499
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {')'}

#500
for_header/0.0 -> for_init · : {';'}

#501
for_init -> variable_statement · : {';'}

#502
for_init -> variable_updating_statement · : {';'}

#503
for_init -> func_call_statement · : {';'}

#504
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#505
variable_statement -> variable_decl '=' expression · : {';'}

#506
variable_statement -> 'let' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#507
variable_statement -> 'const' optionally_typed_ident '=' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#508
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#509
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#510
assignment_statement -> '_' '=' expression · : {')' ';'}

#511
core_lhs_expression -> '(' lhs_expression ')' · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#512
param/0.0/0 -> attribute param/0.0/0 · : {}

#513
param -> param/0.0 ident · ':' type_specifier : {')' ','}

#514
param_list -> param param_list/0.1 · param_list/0.2 : {')'}
param_list/0.2 -> · ',' : {')'}

#515
param_list/0.1 -> param_list/0.1/0 · : {')' ','}

#516
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · ',' param : {')' ','}

#517
param_list/0.1/0/0.0 -> ',' · param : {')' ','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
param -> · param/0.0 ident ':' type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#518
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {'{'}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {'{'}

#519
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {',' '}'}

#520
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {',' '}'}

#521
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#522
struct_body_decl/0.3 -> ',' · : {'}'}

#523
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {',' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {',' '}'}
type_specifier -> · ident : {',' '}'}
type_specifier -> · type_specifier_without_ident : {',' '}'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {',' '}'}
type_specifier_without_ident -> · 'bool' : {',' '}'}
type_specifier_without_ident -> · 'f16' : {',' '}'}
type_specifier_without_ident -> · 'f32' : {',' '}'}
type_specifier_without_ident -> · 'i32' : {',' '}'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {',' '}'}
type_specifier_without_ident -> · 'u32' : {',' '}'}
type_specifier_without_ident -> · array_type_specifier : {',' '}'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {',' '}'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '}'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {',' '}'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#524
variable_qualifier/0.2 -> ',' access_mode · : {'>'}

#525
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#526
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {',' '}'}

#527
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#528
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {'{'}

#529
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#530
param_list/0.1/0/0.0 -> ',' param · : {')' ','}

#531
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {')' ','}

#532
param_list -> param param_list/0.1 param_list/0.2 · : {')'}

#533
param_list/0.2 -> ',' · : {')'}

#534
param -> param/0.0 ident ':' · type_specifier : {')' ','}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {')' ','}
depth_texture_type -> · 'texture_depth_2d' : {')' ','}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ','}
depth_texture_type -> · 'texture_depth_cube' : {')' ','}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ','}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ','}
sampler_type -> · 'sampler_comparison' : {')' ','}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ','}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {')' ','}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {')' ','}
texture_and_sampler_types -> · sampler_type : {')' ','}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {')' ','}
type_specifier -> · ident : {')' ','}
type_specifier -> · type_specifier_without_ident : {')' ','}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {')' ','}
type_specifier_without_ident -> · 'bool' : {')' ','}
type_specifier_without_ident -> · 'f16' : {')' ','}
type_specifier_without_ident -> · 'f32' : {')' ','}
type_specifier_without_ident -> · 'i32' : {')' ','}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {')' ','}
type_specifier_without_ident -> · 'u32' : {')' ','}
type_specifier_without_ident -> · array_type_specifier : {')' ','}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {')' ','}
type_specifier_without_ident -> · texture_and_sampler_types : {')' ','}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {')' ','}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#535
variable_statement -> 'const' optionally_typed_ident '=' expression · : {';'}

#536
variable_statement -> 'let' optionally_typed_ident '=' expression · : {';'}

#537
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {')'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#538
for_statement -> 'for' '(' for_header ')' · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#539
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#540
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 · '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#541
loop_statement/0.3 -> continuing_statement · : {'}'}

#542
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
continuing_compound_statement -> · '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {'}'}

#543
switch_statement -> 'switch' expression '{' switch_statement/0.3 · '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#544
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#545
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#546
switch_body -> case_clause · : {'case' 'default' '}'}

#547
switch_body -> default_alone_clause · : {'case' 'default' '}'}

#548
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#549
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
default_alone_clause/0.1 -> · ':' : {'{'}

#550
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#551
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#552
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#553
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#554
type_specifier_without_ident/7.5 -> ',' · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#555
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#556
attrib_end/0.0 -> ',' · : {')'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#557
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#558
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · ',' : {')'}

#559
type_specifier_without_ident/7.5 -> ',' access_mode · : {'>'}

#560
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#561
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#562
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'case' 'default' '}'}

#563
default_alone_clause/0.1 -> ':' · : {'{'}

#564
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> · ':' : {'{'}

#565
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '{'}

#566
case_selector -> 'default' · : {',' ':' '{'}

#567
case_selector -> expression · : {',' ':' '{'}

#568
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#569
switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#570
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#571
continuing_compound_statement -> '{' · continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {'}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#572
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#573
for_statement -> 'for' '(' for_header ')' compound_statement · : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#574
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {')'}

#575
for_header/0.2 -> expression · : {';'}

#576
param -> param/0.0 ident ':' type_specifier · : {')' ','}

#577
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {'{'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'{'}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'{'}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'{'}
texture_and_sampler_types -> · sampler_type : {'{'}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'{'}
type_specifier -> · ident : {'{'}
type_specifier -> · type_specifier_without_ident : {'{'}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'{'}
type_specifier_without_ident -> · 'bool' : {'{'}
type_specifier_without_ident -> · 'f16' : {'{'}
type_specifier_without_ident -> · 'f32' : {'{'}
type_specifier_without_ident -> · 'i32' : {'{'}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'{'}
type_specifier_without_ident -> · 'u32' : {'{'}
type_specifier_without_ident -> · array_type_specifier : {'{'}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'{'}
type_specifier_without_ident -> · texture_and_sampler_types : {'{'}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'{'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#578
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#579
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#580
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#581
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {'{'}

#582
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {')'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {')'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {')'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_header/0.4 -> · for_update : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · variable_updating_statement : {')'}
func_call_statement -> · callable argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {')'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_updating_statement -> · assignment_statement : {')'}
variable_updating_statement -> · decrement_statement : {')'}
variable_updating_statement -> · increment_statement : {')'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#583
continuing_compound_statement -> '{' continuing_compound_statement/0.1 · continuing_compound_statement/0.2 '}' : {'}'}
break_if_statement -> · 'break' 'if' expression ';' : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#584
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#585
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
assignment_statement -> · '_' '=' expression : {';'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
break_statement -> · 'break' : {';'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
const_assert_statement -> · 'const_assert' expression : {';'}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {';'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
func_call_statement -> · callable argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
increment_statement -> · lhs_expression '++' : {';'}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
return_statement -> · 'return' return_statement/0.1 : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
statement -> · ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {';'}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {';'}
variable_statement -> · variable_decl '=' expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'array' 'atomic' 'bool' 'break' 'const' 'const_assert' 'continue' 'discard' 'f16' 'f32' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'return' 'sampler' 'sampler_comparison' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}'}

#586
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · ',' : {':' '{'}

#587
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#588
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '{'}

#589
case_selectors/0.1/0/0.0 -> ',' · case_selector : {',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '{'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#590
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default' '}'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'case' 'default' '}'}

#591
case_clause/0.2 -> ':' · : {'{'}

#592
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default' '}'}

#593
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#594
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default' '}'}

#595
case_selectors/0.1/0/0.0 -> ',' case_selector · : {',' ':' '{'}

#596
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#597
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#598
case_selectors/0.2 -> ',' · : {':' '{'}

#599
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#600
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 · '}' : {'}'}

#601
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#602
break_if_statement -> 'break' · 'if' expression ';' : {'}'}

#603
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {')'}

#604
for_header/0.4 -> for_update · : {')'}

#605
for_update -> variable_updating_statement · : {')'}

#606
for_update -> func_call_statement · : {')'}

#607
break_if_statement -> 'break' 'if' · expression ';' : {'}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {'('}
binary_and_expression -> · binary_and_expression '&' unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression '|' unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression '&' unary_expression : {';'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {';'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
call_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression '&&' relational_expression : {';'}
expression -> · short_circuit_or_expression '||' relational_expression : {';'}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · '(' expression ')' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · call_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression '!=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '<=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '==' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression '>=' shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '<<' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression '>>' unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {'('}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · 'f16' : {'('}
type_specifier_without_ident -> · 'f32' : {'('}
type_specifier_without_ident -> · 'i32' : {'('}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {'('}
type_specifier_without_ident -> · 'u32' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {'('}
unary_expression -> · '!' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '&' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '*' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '-' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · '~' unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#608
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' · : {'}'}

#609
break_if_statement -> 'break' 'if' expression · ';' : {'}'}

#610
break_if_statement -> 'break' 'if' expression ';' · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 extension_name -> 'bgra8unorm_storage' ·
r#3 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#4 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#5 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#6 global_decl -> ';' ·
r#7 global_decl -> struct_decl ·
r#8 global_decl -> function_decl ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attribute -> '@' 'const' ·
r#13 attribute -> '@' 'invariant' ·
r#14 attribute -> '@' 'vertex' ·
r#15 attribute -> '@' 'fragment' ·
r#16 attribute -> '@' 'compute' ·
r#17 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#18 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#19 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#20 const_assert_statement -> 'const_assert' expression ·
r#21 expression -> relational_expression ·
r#22 short_circuit_or_expression -> relational_expression ·
r#23 short_circuit_and_expression -> relational_expression ·
r#24 expression -> bitwise_expression ·
r#25 relational_expression -> shift_expression ·
r#26 shift_expression -> additive_expression ·
r#27 binary_and_expression -> unary_expression ·
r#28 binary_or_expression -> unary_expression ·
r#29 binary_xor_expression -> unary_expression ·
r#30 multiplicative_expression -> unary_expression ·
r#31 additive_expression -> multiplicative_expression ·
r#32 unary_expression -> singular_expression ·
r#33 primary_expression -> ident ·
r#34 callable -> ident ·
r#35 primary_expression -> call_expression ·
r#36 primary_expression -> literal ·
r#37 primary_expression -> paren_expression ·
r#38 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#39 literal -> int_literal ·
r#40 literal -> float_literal ·
r#41 literal -> bool_literal ·
r#42 callable -> type_specifier_without_ident ·
r#43 callable -> vec_prefix ·
r#44 callable -> mat_prefix ·
r#45 callable -> 'array' ·
r#46 int_literal -> decimal_int_literal ·
r#47 int_literal -> hex_int_literal ·
r#48 float_literal -> decimal_float_literal ·
r#49 float_literal -> hex_float_literal ·
r#50 bool_literal -> 'true' ·
r#51 bool_literal -> 'false' ·
r#52 type_specifier_without_ident -> 'bool' ·
r#53 type_specifier_without_ident -> 'f32' ·
r#54 type_specifier_without_ident -> 'f16' ·
r#55 type_specifier_without_ident -> 'i32' ·
r#56 type_specifier_without_ident -> 'u32' ·
r#57 type_specifier_without_ident -> array_type_specifier ·
r#58 type_specifier_without_ident -> texture_and_sampler_types ·
r#59 vec_prefix -> 'vec2' ·
r#60 vec_prefix -> 'vec3' ·
r#61 vec_prefix -> 'vec4' ·
r#62 mat_prefix -> 'mat2x2' ·
r#63 mat_prefix -> 'mat2x3' ·
r#64 mat_prefix -> 'mat2x4' ·
r#65 mat_prefix -> 'mat3x2' ·
r#66 mat_prefix -> 'mat3x3' ·
r#67 mat_prefix -> 'mat3x4' ·
r#68 mat_prefix -> 'mat4x2' ·
r#69 mat_prefix -> 'mat4x3' ·
r#70 mat_prefix -> 'mat4x4' ·
r#71 decimal_int_literal -> /0[iu]?/ ·
r#72 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#73 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#74 decimal_float_literal -> /0[fh]/ ·
r#75 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#76 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#77 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#78 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#79 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#80 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#81 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#82 texture_and_sampler_types -> sampler_type ·
r#83 texture_and_sampler_types -> depth_texture_type ·
r#84 sampler_type -> 'sampler' ·
r#85 sampler_type -> 'sampler_comparison' ·
r#86 depth_texture_type -> 'texture_depth_2d' ·
r#87 depth_texture_type -> 'texture_depth_2d_array' ·
r#88 depth_texture_type -> 'texture_depth_cube' ·
r#89 depth_texture_type -> 'texture_depth_cube_array' ·
r#90 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#91 sampled_texture_type -> 'texture_1d' ·
r#92 sampled_texture_type -> 'texture_2d' ·
r#93 sampled_texture_type -> 'texture_2d_array' ·
r#94 sampled_texture_type -> 'texture_3d' ·
r#95 sampled_texture_type -> 'texture_cube' ·
r#96 sampled_texture_type -> 'texture_cube_array' ·
r#97 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#98 storage_texture_type -> 'texture_storage_1d' ·
r#99 storage_texture_type -> 'texture_storage_2d' ·
r#100 storage_texture_type -> 'texture_storage_2d_array' ·
r#101 storage_texture_type -> 'texture_storage_3d' ·
r#102 global_decl -> const_assert_statement ';' ·
r#103 global_decl -> type_alias_decl ';' ·
r#104 global_decl -> global_constant_decl ';' ·
r#105 global_decl -> global_variable_decl ';' ·
r#106 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#107 global_directive -> 'enable' extension_name ';' ·
r#108 variable_decl/0.1 -> variable_qualifier ·
r#109 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#110 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#111 struct_decl -> 'struct' ident struct_body_decl ·
r#112 function_decl -> function_decl/0.0 function_header compound_statement ·
r#113 call_expression -> callable argument_expression_list ·
r#114 singular_expression -> primary_expression singular_expression/0.1 ·
r#115 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#116 unary_expression -> '&' unary_expression ·
r#117 unary_expression -> '*' unary_expression ·
r#118 unary_expression -> '~' unary_expression ·
r#119 unary_expression -> '!' unary_expression ·
r#120 unary_expression -> '-' unary_expression ·
r#121 multiplicative_operator -> '*' ·
r#122 multiplicative_operator -> '/' ·
r#123 multiplicative_operator -> '%' ·
r#124 additive_operator -> '+' ·
r#125 additive_operator -> '-' ·
r#126 builtin_value_name -> 'vertex_index' ·
r#127 builtin_value_name -> 'instance_index' ·
r#128 builtin_value_name -> 'position' ·
r#129 builtin_value_name -> 'front_facing' ·
r#130 builtin_value_name -> 'frag_depth' ·
r#131 builtin_value_name -> 'local_invocation_id' ·
r#132 builtin_value_name -> 'local_invocation_index' ·
r#133 builtin_value_name -> 'global_invocation_id' ·
r#134 builtin_value_name -> 'workgroup_id' ·
r#135 builtin_value_name -> 'num_workgroups' ·
r#136 builtin_value_name -> 'sample_index' ·
r#137 builtin_value_name -> 'sample_mask' ·
r#138 interpolation_type_name -> 'perspective' ·
r#139 interpolation_type_name -> 'linear' ·
r#140 interpolation_type_name -> 'flat' ·
r#141 expression -> short_circuit_or_expression '||' relational_expression ·
r#142 short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression ·
r#143 expression -> short_circuit_and_expression '&&' relational_expression ·
r#144 short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression ·
r#145 relational_expression -> shift_expression '!=' shift_expression ·
r#146 relational_expression -> shift_expression '==' shift_expression ·
r#147 relational_expression -> shift_expression '>=' shift_expression ·
r#148 relational_expression -> shift_expression '<=' shift_expression ·
r#149 relational_expression -> shift_expression '>' shift_expression ·
r#150 relational_expression -> shift_expression '<' shift_expression ·
r#151 bitwise_expression -> binary_and_expression '&' unary_expression ·
r#152 binary_and_expression -> binary_and_expression '&' unary_expression ·
r#153 bitwise_expression -> binary_or_expression '|' unary_expression ·
r#154 binary_or_expression -> binary_or_expression '|' unary_expression ·
r#155 bitwise_expression -> binary_xor_expression '^' unary_expression ·
r#156 binary_xor_expression -> binary_xor_expression '^' unary_expression ·
r#157 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#158 shift_expression -> unary_expression '>>' unary_expression ·
r#159 shift_expression -> unary_expression '<<' unary_expression ·
r#160 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#161 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#162 swizzle_name -> '/[rgba]/' ·
r#163 swizzle_name -> '/[rgba][rgba]/' ·
r#164 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#165 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#166 swizzle_name -> '/[xyzw]/' ·
r#167 swizzle_name -> '/[xyzw][xyzw]/' ·
r#168 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#169 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#170 type_specifier -> ident ·
r#171 type_specifier -> type_specifier_without_ident ·
r#172 argument_expression_list/0.1 -> expression_comma_list ·
r#173 paren_expression -> '(' expression ')' ·
r#174 address_space -> 'function' ·
r#175 address_space -> 'private' ·
r#176 address_space -> 'workgroup' ·
r#177 address_space -> 'uniform' ·
r#178 address_space -> 'storage' ·
r#179 texel_format -> 'rgba8unorm' ·
r#180 texel_format -> 'rgba8snorm' ·
r#181 texel_format -> 'rgba8uint' ·
r#182 texel_format -> 'rgba8sint' ·
r#183 texel_format -> 'rgba16uint' ·
r#184 texel_format -> 'rgba16sint' ·
r#185 texel_format -> 'rgba16float' ·
r#186 texel_format -> 'r32uint' ·
r#187 texel_format -> 'r32sint' ·
r#188 texel_format -> 'r32float' ·
r#189 texel_format -> 'rg32uint' ·
r#190 texel_format -> 'rg32sint' ·
r#191 texel_format -> 'rg32float' ·
r#192 texel_format -> 'rgba32uint' ·
r#193 texel_format -> 'rgba32sint' ·
r#194 texel_format -> 'rgba32float' ·
r#195 texel_format -> 'bgra8unorm' ·
r#196 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#197 statement -> ';' ·
r#198 statement -> if_statement ·
r#199 statement -> switch_statement ·
r#200 statement -> loop_statement ·
r#201 statement -> for_statement ·
r#202 statement -> while_statement ·
r#203 statement -> compound_statement ·
r#204 variable_statement -> variable_decl ·
r#205 break_statement -> 'break' ·
r#206 continue_statement -> 'continue' ·
r#207 variable_updating_statement -> assignment_statement ·
r#208 variable_updating_statement -> increment_statement ·
r#209 variable_updating_statement -> decrement_statement ·
r#210 core_lhs_expression -> ident ·
r#211 type_alias_decl -> 'alias' ident '=' type_specifier ·
r#212 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ·
r#213 global_constant_decl -> 'const' optionally_typed_ident '=' expression ·
r#214 optionally_typed_ident/0.1 -> ':' type_specifier ·
r#215 global_variable_decl/0.2 -> '=' expression ·
r#216 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#217 global_constant_decl/1.3 -> '=' expression ·
r#218 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#219 function_header/0.3 -> param_list ·
r#220 lhs_expression -> '&' lhs_expression ·
r#221 lhs_expression -> '*' lhs_expression ·
r#222 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#223 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#224 increment_statement -> lhs_expression '++' ·
r#225 decrement_statement -> lhs_expression '--' ·
r#226 assignment_statement/0.1 -> '=' ·
r#227 assignment_statement/0.1 -> compound_assignment_operator ·
r#228 compound_assignment_operator -> '+=' ·
r#229 compound_assignment_operator -> '-=' ·
r#230 compound_assignment_operator -> '*=' ·
r#231 compound_assignment_operator -> '/=' ·
r#232 compound_assignment_operator -> '%=' ·
r#233 compound_assignment_operator -> '&=' ·
r#234 compound_assignment_operator -> '|=' ·
r#235 compound_assignment_operator -> '^=' ·
r#236 compound_assignment_operator -> '>>=' ·
r#237 compound_assignment_operator -> '<<=' ·
r#238 func_call_statement -> callable argument_expression_list ·
r#239 if_statement/0.1 -> if_statement/0.1/0 ·
r#240 return_statement -> 'return' return_statement/0.1 ·
r#241 return_statement/0.1 -> expression ·
r#242 statement -> const_assert_statement ';' ·
r#243 statement -> variable_updating_statement ';' ·
r#244 statement -> 'discard' ';' ·
r#245 statement -> continue_statement ';' ·
r#246 statement -> break_statement ';' ·
r#247 statement -> variable_statement ';' ·
r#248 statement -> func_call_statement ';' ·
r#249 statement -> return_statement ';' ·
r#250 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#251 compound_statement -> '{' compound_statement/0.1 '}' ·
r#252 texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' ·
r#253 texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' ·
r#254 type_specifier_without_ident -> 'atomic' '<' type_specifier '>' ·
r#255 type_specifier_without_ident -> mat_prefix '<' type_specifier '>' ·
r#256 type_specifier_without_ident -> vec_prefix '<' type_specifier '>' ·
r#257 expression_comma_list/0.1 -> expression_comma_list/0.1/0 ·
r#258 argument_expression_list -> '(' argument_expression_list/0.1 ')' ·
r#259 component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 ·
r#260 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#261 component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 ·
r#262 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#263 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#264 attrib_end/0.0 -> ',' ·
r#265 attribute -> '@' 'size' '(' expression attrib_end ·
r#266 attribute -> '@' 'location' '(' expression attrib_end ·
r#267 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#268 attribute -> '@' 'id' '(' expression attrib_end ·
r#269 attribute -> '@' 'group' '(' expression attrib_end ·
r#270 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#271 attribute -> '@' 'binding' '(' expression attrib_end ·
r#272 attribute -> '@' 'align' '(' expression attrib_end ·
r#273 interpolation_sample_name -> 'center' ·
r#274 interpolation_sample_name -> 'centroid' ·
r#275 interpolation_sample_name -> 'sample' ·
r#276 attrib_end -> attrib_end/0.0 ')' ·
r#277 component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 ·
r#278 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#279 primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression ·
r#280 expression_comma_list/0.1/0/0.0 -> ',' expression ·
r#281 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ·
r#282 expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 ·
r#283 expression_comma_list/0.2 -> ',' ·
r#284 array_type_specifier/0.3 -> ',' element_count_expression ·
r#285 element_count_expression -> additive_expression ·
r#286 element_count_expression -> bitwise_expression ·
r#287 array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' ·
r#288 access_mode -> 'read' ·
r#289 access_mode -> 'write' ·
r#290 access_mode -> 'read_write' ·
r#291 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#292 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#293 if_statement/0.2 -> else_clause ·
r#294 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#295 for_header/0.0 -> for_init ·
r#296 for_init -> variable_statement ·
r#297 for_init -> variable_updating_statement ·
r#298 for_init -> func_call_statement ·
r#299 while_statement -> 'while' expression compound_statement ·
r#300 variable_statement -> variable_decl '=' expression ·
r#301 if_clause -> 'if' expression compound_statement ·
r#302 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#303 assignment_statement -> '_' '=' expression ·
r#304 core_lhs_expression -> '(' lhs_expression ')' ·
r#305 param_list/0.1 -> param_list/0.1/0 ·
r#306 struct_body_decl/0.2/0/0.0 -> ',' struct_member ·
r#307 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#308 struct_body_decl/0.3 -> ',' ·
r#309 variable_qualifier/0.2 -> ',' access_mode ·
r#310 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#311 struct_member -> struct_member/0.0 member_ident ':' type_specifier ·
r#312 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#313 function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ·
r#314 param_list/0.1/0/0.0 -> ',' param ·
r#315 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#316 param_list -> param param_list/0.1 param_list/0.2 ·
r#317 param_list/0.2 -> ',' ·
r#318 variable_statement -> 'const' optionally_typed_ident '=' expression ·
r#319 variable_statement -> 'let' optionally_typed_ident '=' expression ·
r#320 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#321 loop_statement/0.3 -> continuing_statement ·
r#322 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#323 switch_body -> case_clause ·
r#324 switch_body -> default_alone_clause ·
r#325 else_clause -> 'else' compound_statement ·
r#326 texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' ·
r#327 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#328 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#329 type_specifier_without_ident/7.5 -> ',' access_mode ·
r#330 type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' ·
r#331 else_if_clause -> 'else' 'if' expression compound_statement ·
r#332 default_alone_clause/0.1 -> ':' ·
r#333 case_selector -> 'default' ·
r#334 case_selector -> expression ·
r#335 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#336 switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' ·
r#337 continuing_statement -> 'continuing' continuing_compound_statement ·
r#338 loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ·
r#339 for_statement -> 'for' '(' for_header ')' compound_statement ·
r#340 for_header/0.2 -> expression ·
r#341 param -> param/0.0 ident ':' type_specifier ·
r#342 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#343 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#344 function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier ·
r#345 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#346 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#347 case_clause/0.2 -> ':' ·
r#348 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#349 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#350 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#351 case_selectors/0.1/0/0.0 -> ',' case_selector ·
r#352 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#353 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#354 case_selectors/0.2 -> ',' ·
r#355 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#356 continuing_compound_statement/0.2 -> break_if_statement ·
r#357 for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 ·
r#358 for_header/0.4 -> for_update ·
r#359 for_update -> variable_updating_statement ·
r#360 for_update -> func_call_statement ·
r#361 continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' ·
r#362 break_if_statement -> 'break' 'if' expression ';' ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#13
[#2 '@']: s#31
[#2 'alias']: s#23
[#2 'const']: s#21
[#2 'const_assert']: s#26
[#2 'struct']: s#24
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'alias']: r#0
[#3 'const']: r#0
[#3 'const_assert']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'struct']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'bgra8unorm_storage']: s#8
[#5 'f16']: s#7
[#6 ';']: s#158
[#7 ';']: r#1
[#8 ';']: r#2
[#9 ';']: r#3
[#9 '@']: r#3
[#9 'alias']: r#3
[#9 'const']: r#3
[#9 'const_assert']: r#3
[#9 'fn']: r#3
[#9 'override']: r#3
[#9 'struct']: r#3
[#9 'var']: r#3
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 EndOfText]: r#5
[#12 ';']: s#13
[#12 '@']: s#31
[#12 'alias']: s#23
[#12 'const']: s#21
[#12 'const_assert']: s#26
[#12 'struct']: s#24
[#13 ';']: r#6
[#13 '@']: r#6
[#13 'alias']: r#6
[#13 'const']: r#6
[#13 'const_assert']: r#6
[#13 'fn']: r#6
[#13 'override']: r#6
[#13 'struct']: r#6
[#13 'var']: r#6
[#13 EndOfText]: r#6
[#14 ';']: s#156
[#15 ';']: s#155
[#16 ';']: s#154
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'alias']: r#7
[#17 'const']: r#7
[#17 'const_assert']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'struct']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: r#8
[#18 '@']: r#8
[#18 'alias']: r#8
[#18 'const']: r#8
[#18 'const_assert']: r#8
[#18 'fn']: r#8
[#18 'override']: r#8
[#18 'struct']: r#8
[#18 'var']: r#8
[#18 EndOfText]: r#8
[#19 ';']: s#153
[#20 'var']: s#152
[#21 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#22 'override']: s#148
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#25 'fn']: s#145
[#26 '!']: s#63
[#26 '&']: s#66
[#26 '(']: s#78
[#26 '*']: s#65
[#26 '-']: s#62
[#26 'array']: s#82
[#26 'atomic']: s#96
[#26 'bitcast']: s#72
[#26 'bool']: s#89
[#26 'f16']: s#91
[#26 'f32']: s#90
[#26 'false']: s#88
[#26 'i32']: s#92
[#26 'mat2x2']: s#101
[#26 'mat2x3']: s#102
[#26 'mat2x4']: s#103
[#26 'mat3x2']: s#104
[#26 'mat3x3']: s#105
[#26 'mat3x4']: s#106
[#26 'mat4x2']: s#107
[#26 'mat4x3']: s#108
[#26 'mat4x4']: s#109
[#26 'ptr']: s#94
[#26 'sampler']: s#126
[#26 'sampler_comparison']: s#127
[#26 'texture_1d']: s#133
[#26 'texture_2d']: s#134
[#26 'texture_2d_array']: s#135
[#26 'texture_3d']: s#136
[#26 'texture_cube']: s#137
[#26 'texture_cube_array']: s#138
[#26 'texture_depth_2d']: s#128
[#26 'texture_depth_2d_array']: s#129
[#26 'texture_depth_cube']: s#130
[#26 'texture_depth_cube_array']: s#131
[#26 'texture_depth_multisampled_2d']: s#132
[#26 'texture_multisampled_2d']: s#139
[#26 'texture_storage_1d']: s#140
[#26 'texture_storage_2d']: s#141
[#26 'texture_storage_2d_array']: s#142
[#26 'texture_storage_3d']: s#143
[#26 'true']: s#87
[#26 'u32']: s#93
[#26 'vec2']: s#98
[#26 'vec3']: s#99
[#26 'vec4']: s#100
[#26 '~']: s#64
[#26 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#26 /0[fh]/]: s#113
[#26 /0[iu]?/]: s#110
[#26 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#26 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#26 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#26 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#26 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#26 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#26 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#26 /[1-9][0-9]*[fh]/]: s#114
[#26 /[1-9][0-9]*[iu]?/]: s#111
[#27 'var']: r#9
[#28 'override']: r#10
[#29 'fn']: r#11
[#30 '@']: s#31
[#31 'align']: s#32
[#31 'binding']: s#33
[#31 'builtin']: s#34
[#31 'compute']: s#45
[#31 'const']: s#35
[#31 'fragment']: s#44
[#31 'group']: s#36
[#31 'id']: s#37
[#31 'interpolate']: s#38
[#31 'invariant']: s#39
[#31 'location']: s#40
[#31 'size']: s#41
[#31 'vertex']: s#43
[#31 'workgroup_size']: s#42
[#32 '(']: s#223
[#33 '(']: s#222
[#34 '(']: s#221
[#35 '@']: r#12
[#35 'array']: r#12
[#35 'atomic']: r#12
[#35 'bool']: r#12
[#35 'f16']: r#12
[#35 'f32']: r#12
[#35 'fn']: r#12
[#35 'i32']: r#12
[#35 'mat2x2']: r#12
[#35 'mat2x3']: r#12
[#35 'mat2x4']: r#12
[#35 'mat3x2']: r#12
[#35 'mat3x3']: r#12
[#35 'mat3x4']: r#12
[#35 'mat4x2']: r#12
[#35 'mat4x3']: r#12
[#35 'mat4x4']: r#12
[#35 'override']: r#12
[#35 'ptr']: r#12
[#35 'sampler']: r#12
[#35 'sampler_comparison']: r#12
[#35 'texture_1d']: r#12
[#35 'texture_2d']: r#12
[#35 'texture_2d_array']: r#12
[#35 'texture_3d']: r#12
[#35 'texture_cube']: r#12
[#35 'texture_cube_array']: r#12
[#35 'texture_depth_2d']: r#12
[#35 'texture_depth_2d_array']: r#12
[#35 'texture_depth_cube']: r#12
[#35 'texture_depth_cube_array']: r#12
[#35 'texture_depth_multisampled_2d']: r#12
[#35 'texture_multisampled_2d']: r#12
[#35 'texture_storage_1d']: r#12
[#35 'texture_storage_2d']: r#12
[#35 'texture_storage_2d_array']: r#12
[#35 'texture_storage_3d']: r#12
[#35 'u32']: r#12
[#35 'var']: r#12
[#35 'vec2']: r#12
[#35 'vec3']: r#12
[#35 'vec4']: r#12
[#36 '(']: s#220
[#37 '(']: s#219
[#38 '(']: s#218
[#39 '@']: r#13
[#39 'array']: r#13
[#39 'atomic']: r#13
[#39 'bool']: r#13
[#39 'f16']: r#13
[#39 'f32']: r#13
[#39 'fn']: r#13
[#39 'i32']: r#13
[#39 'mat2x2']: r#13
[#39 'mat2x3']: r#13
[#39 'mat2x4']: r#13
[#39 'mat3x2']: r#13
[#39 'mat3x3']: r#13
[#39 'mat3x4']: r#13
[#39 'mat4x2']: r#13
[#39 'mat4x3']: r#13
[#39 'mat4x4']: r#13
[#39 'override']: r#13
[#39 'ptr']: r#13
[#39 'sampler']: r#13
[#39 'sampler_comparison']: r#13
[#39 'texture_1d']: r#13
[#39 'texture_2d']: r#13
[#39 'texture_2d_array']: r#13
[#39 'texture_3d']: r#13
[#39 'texture_cube']: r#13
[#39 'texture_cube_array']: r#13
[#39 'texture_depth_2d']: r#13
[#39 'texture_depth_2d_array']: r#13
[#39 'texture_depth_cube']: r#13
[#39 'texture_depth_cube_array']: r#13
[#39 'texture_depth_multisampled_2d']: r#13
[#39 'texture_multisampled_2d']: r#13
[#39 'texture_storage_1d']: r#13
[#39 'texture_storage_2d']: r#13
[#39 'texture_storage_2d_array']: r#13
[#39 'texture_storage_3d']: r#13
[#39 'u32']: r#13
[#39 'var']: r#13
[#39 'vec2']: r#13
[#39 'vec3']: r#13
[#39 'vec4']: r#13
[#40 '(']: s#217
[#41 '(']: s#216
[#42 '(']: s#215
[#43 '@']: r#14
[#43 'array']: r#14
[#43 'atomic']: r#14
[#43 'bool']: r#14
[#43 'f16']: r#14
[#43 'f32']: r#14
[#43 'fn']: r#14
[#43 'i32']: r#14
[#43 'mat2x2']: r#14
[#43 'mat2x3']: r#14
[#43 'mat2x4']: r#14
[#43 'mat3x2']: r#14
[#43 'mat3x3']: r#14
[#43 'mat3x4']: r#14
[#43 'mat4x2']: r#14
[#43 'mat4x3']: r#14
[#43 'mat4x4']: r#14
[#43 'override']: r#14
[#43 'ptr']: r#14
[#43 'sampler']: r#14
[#43 'sampler_comparison']: r#14
[#43 'texture_1d']: r#14
[#43 'texture_2d']: r#14
[#43 'texture_2d_array']: r#14
[#43 'texture_3d']: r#14
[#43 'texture_cube']: r#14
[#43 'texture_cube_array']: r#14
[#43 'texture_depth_2d']: r#14
[#43 'texture_depth_2d_array']: r#14
[#43 'texture_depth_cube']: r#14
[#43 'texture_depth_cube_array']: r#14
[#43 'texture_depth_multisampled_2d']: r#14
[#43 'texture_multisampled_2d']: r#14
[#43 'texture_storage_1d']: r#14
[#43 'texture_storage_2d']: r#14
[#43 'texture_storage_2d_array']: r#14
[#43 'texture_storage_3d']: r#14
[#43 'u32']: r#14
[#43 'var']: r#14
[#43 'vec2']: r#14
[#43 'vec3']: r#14
[#43 'vec4']: r#14
[#44 '@']: r#15
[#44 'array']: r#15
[#44 'atomic']: r#15
[#44 'bool']: r#15
[#44 'f16']: r#15
[#44 'f32']: r#15
[#44 'fn']: r#15
[#44 'i32']: r#15
[#44 'mat2x2']: r#15
[#44 'mat2x3']: r#15
[#44 'mat2x4']: r#15
[#44 'mat3x2']: r#15
[#44 'mat3x3']: r#15
[#44 'mat3x4']: r#15
[#44 'mat4x2']: r#15
[#44 'mat4x3']: r#15
[#44 'mat4x4']: r#15
[#44 'override']: r#15
[#44 'ptr']: r#15
[#44 'sampler']: r#15
[#44 'sampler_comparison']: r#15
[#44 'texture_1d']: r#15
[#44 'texture_2d']: r#15
[#44 'texture_2d_array']: r#15
[#44 'texture_3d']: r#15
[#44 'texture_cube']: r#15
[#44 'texture_cube_array']: r#15
[#44 'texture_depth_2d']: r#15
[#44 'texture_depth_2d_array']: r#15
[#44 'texture_depth_cube']: r#15
[#44 'texture_depth_cube_array']: r#15
[#44 'texture_depth_multisampled_2d']: r#15
[#44 'texture_multisampled_2d']: r#15
[#44 'texture_storage_1d']: r#15
[#44 'texture_storage_2d']: r#15
[#44 'texture_storage_2d_array']: r#15
[#44 'texture_storage_3d']: r#15
[#44 'u32']: r#15
[#44 'var']: r#15
[#44 'vec2']: r#15
[#44 'vec3']: r#15
[#44 'vec4']: r#15
[#45 '@']: r#16
[#45 'array']: r#16
[#45 'atomic']: r#16
[#45 'bool']: r#16
[#45 'f16']: r#16
[#45 'f32']: r#16
[#45 'fn']: r#16
[#45 'i32']: r#16
[#45 'mat2x2']: r#16
[#45 'mat2x3']: r#16
[#45 'mat2x4']: r#16
[#45 'mat3x2']: r#16
[#45 'mat3x3']: r#16
[#45 'mat3x4']: r#16
[#45 'mat4x2']: r#16
[#45 'mat4x3']: r#16
[#45 'mat4x4']: r#16
[#45 'override']: r#16
[#45 'ptr']: r#16
[#45 'sampler']: r#16
[#45 'sampler_comparison']: r#16
[#45 'texture_1d']: r#16
[#45 'texture_2d']: r#16
[#45 'texture_2d_array']: r#16
[#45 'texture_3d']: r#16
[#45 'texture_cube']: r#16
[#45 'texture_cube_array']: r#16
[#45 'texture_depth_2d']: r#16
[#45 'texture_depth_2d_array']: r#16
[#45 'texture_depth_cube']: r#16
[#45 'texture_depth_cube_array']: r#16
[#45 'texture_depth_multisampled_2d']: r#16
[#45 'texture_multisampled_2d']: r#16
[#45 'texture_storage_1d']: r#16
[#45 'texture_storage_2d']: r#16
[#45 'texture_storage_2d_array']: r#16
[#45 'texture_storage_3d']: r#16
[#45 'u32']: r#16
[#45 'var']: r#16
[#45 'vec2']: r#16
[#45 'vec3']: r#16
[#45 'vec4']: r#16
[#46 'var']: r#17
[#47 'override']: r#18
[#48 'fn']: r#19
[#49 ';']: r#20
[#50 '&&']: r#23
[#50 ')']: r#21
[#50 ',']: r#21
[#50 ':']: r#21
[#50 ';']: r#21
[#50 ']']: r#21
[#50 '{']: r#21
[#50 '||']: r#22
[#51 '||']: s#214
[#52 '&&']: s#213
[#53 ')']: r#24
[#53 ',']: r#24
[#53 ':']: r#24
[#53 ';']: r#24
[#53 ']']: r#24
[#53 '{']: r#24
[#54 '!=']: s#212
[#54 '&&']: r#25
[#54 ')']: r#25
[#54 ',']: r#25
[#54 ':']: r#25
[#54 ';']: r#25
[#54 '<']: s#207
[#54 '<=']: s#209
[#54 '==']: s#211
[#54 '>']: s#208
[#54 '>=']: s#210
[#54 ']']: r#25
[#54 '{']: r#25
[#54 '||']: r#25
[#55 '&']: s#206
[#56 '|']: s#205
[#57 '^']: s#204
[#58 '!=']: r#26
[#58 '&&']: r#26
[#58 ')']: r#26
[#58 '+']: s#202
[#58 ',']: r#26
[#58 '-']: s#203
[#58 ':']: r#26
[#58 ';']: r#26
[#58 '<']: r#26
[#58 '<=']: r#26
[#58 '==']: r#26
[#58 '>']: r#26
[#58 '>=']: r#26
[#58 ']']: r#26
[#58 '{']: r#26
[#58 '||']: r#26
[#59 '!=']: r#30
[#59 '%']: r#30
[#59 '&&']: r#30
[#59 '&']: r#27
[#59 ')']: r#30
[#59 '*']: r#30
[#59 '+']: r#30
[#59 ',']: r#30
[#59 '-']: r#30
[#59 '/']: r#30
[#59 ':']: r#30
[#59 ';']: r#30
[#59 '<']: r#30
[#59 '<<']: s#199
[#59 '<=']: r#30
[#59 '==']: r#30
[#59 '>']: r#30
[#59 '>=']: r#30
[#59 '>>']: s#200
[#59 ']']: r#30
[#59 '^']: r#29
[#59 '{']: r#30
[#59 '|']: r#28
[#59 '||']: r#30
[#60 '!=']: r#31
[#60 '%']: s#198
[#60 '&&']: r#31
[#60 ')']: r#31
[#60 '*']: s#196
[#60 '+']: r#31
[#60 ',']: r#31
[#60 '-']: r#31
[#60 '/']: s#197
[#60 ':']: r#31
[#60 ';']: r#31
[#60 '<']: r#31
[#60 '<=']: r#31
[#60 '==']: r#31
[#60 '>']: r#31
[#60 '>=']: r#31
[#60 ']']: r#31
[#60 '{']: r#31
[#60 '||']: r#31
[#61 '!=']: r#32
[#61 '%']: r#32
[#61 '&&']: r#32
[#61 '&']: r#32
[#61 ')']: r#32
[#61 '*']: r#32
[#61 '+']: r#32
[#61 ',']: r#32
[#61 '-']: r#32
[#61 '/']: r#32
[#61 ':']: r#32
[#61 ';']: r#32
[#61 '<']: r#32
[#61 '<<']: r#32
[#61 '<=']: r#32
[#61 '==']: r#32
[#61 '>']: r#32
[#61 '>=']: r#32
[#61 '>>']: r#32
[#61 ']']: r#32
[#61 '^']: r#32
[#61 '{']: r#32
[#61 '|']: r#32
[#61 '||']: r#32
[#62 '!']: s#63
[#62 '&']: s#66
[#62 '(']: s#78
[#62 '*']: s#65
[#62 '-']: s#62
[#62 'array']: s#82
[#62 'atomic']: s#96
[#62 'bitcast']: s#72
[#62 'bool']: s#89
[#62 'f16']: s#91
[#62 'f32']: s#90
[#62 'false']: s#88
[#62 'i32']: s#92
[#62 'mat2x2']: s#101
[#62 'mat2x3']: s#102
[#62 'mat2x4']: s#103
[#62 'mat3x2']: s#104
[#62 'mat3x3']: s#105
[#62 'mat3x4']: s#106
[#62 'mat4x2']: s#107
[#62 'mat4x3']: s#108
[#62 'mat4x4']: s#109
[#62 'ptr']: s#94
[#62 'sampler']: s#126
[#62 'sampler_comparison']: s#127
[#62 'texture_1d']: s#133
[#62 'texture_2d']: s#134
[#62 'texture_2d_array']: s#135
[#62 'texture_3d']: s#136
[#62 'texture_cube']: s#137
[#62 'texture_cube_array']: s#138
[#62 'texture_depth_2d']: s#128
[#62 'texture_depth_2d_array']: s#129
[#62 'texture_depth_cube']: s#130
[#62 'texture_depth_cube_array']: s#131
[#62 'texture_depth_multisampled_2d']: s#132
[#62 'texture_multisampled_2d']: s#139
[#62 'texture_storage_1d']: s#140
[#62 'texture_storage_2d']: s#141
[#62 'texture_storage_2d_array']: s#142
[#62 'texture_storage_3d']: s#143
[#62 'true']: s#87
[#62 'u32']: s#93
[#62 'vec2']: s#98
[#62 'vec3']: s#99
[#62 'vec4']: s#100
[#62 '~']: s#64
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#62 /0[fh]/]: s#113
[#62 /0[iu]?/]: s#110
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#62 /[1-9][0-9]*[fh]/]: s#114
[#62 /[1-9][0-9]*[iu]?/]: s#111
[#63 '!']: s#63
[#63 '&']: s#66
[#63 '(']: s#78
[#63 '*']: s#65
[#63 '-']: s#62
[#63 'array']: s#82
[#63 'atomic']: s#96
[#63 'bitcast']: s#72
[#63 'bool']: s#89
[#63 'f16']: s#91
[#63 'f32']: s#90
[#63 'false']: s#88
[#63 'i32']: s#92
[#63 'mat2x2']: s#101
[#63 'mat2x3']: s#102
[#63 'mat2x4']: s#103
[#63 'mat3x2']: s#104
[#63 'mat3x3']: s#105
[#63 'mat3x4']: s#106
[#63 'mat4x2']: s#107
[#63 'mat4x3']: s#108
[#63 'mat4x4']: s#109
[#63 'ptr']: s#94
[#63 'sampler']: s#126
[#63 'sampler_comparison']: s#127
[#63 'texture_1d']: s#133
[#63 'texture_2d']: s#134
[#63 'texture_2d_array']: s#135
[#63 'texture_3d']: s#136
[#63 'texture_cube']: s#137
[#63 'texture_cube_array']: s#138
[#63 'texture_depth_2d']: s#128
[#63 'texture_depth_2d_array']: s#129
[#63 'texture_depth_cube']: s#130
[#63 'texture_depth_cube_array']: s#131
[#63 'texture_depth_multisampled_2d']: s#132
[#63 'texture_multisampled_2d']: s#139
[#63 'texture_storage_1d']: s#140
[#63 'texture_storage_2d']: s#141
[#63 'texture_storage_2d_array']: s#142
[#63 'texture_storage_3d']: s#143
[#63 'true']: s#87
[#63 'u32']: s#93
[#63 'vec2']: s#98
[#63 'vec3']: s#99
[#63 'vec4']: s#100
[#63 '~']: s#64
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#63 /0[fh]/]: s#113
[#63 /0[iu]?/]: s#110
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#63 /[1-9][0-9]*[fh]/]: s#114
[#63 /[1-9][0-9]*[iu]?/]: s#111
[#64 '!']: s#63
[#64 '&']: s#66
[#64 '(']: s#78
[#64 '*']: s#65
[#64 '-']: s#62
[#64 'array']: s#82
[#64 'atomic']: s#96
[#64 'bitcast']: s#72
[#64 'bool']: s#89
[#64 'f16']: s#91
[#64 'f32']: s#90
[#64 'false']: s#88
[#64 'i32']: s#92
[#64 'mat2x2']: s#101
[#64 'mat2x3']: s#102
[#64 'mat2x4']: s#103
[#64 'mat3x2']: s#104
[#64 'mat3x3']: s#105
[#64 'mat3x4']: s#106
[#64 'mat4x2']: s#107
[#64 'mat4x3']: s#108
[#64 'mat4x4']: s#109
[#64 'ptr']: s#94
[#64 'sampler']: s#126
[#64 'sampler_comparison']: s#127
[#64 'texture_1d']: s#133
[#64 'texture_2d']: s#134
[#64 'texture_2d_array']: s#135
[#64 'texture_3d']: s#136
[#64 'texture_cube']: s#137
[#64 'texture_cube_array']: s#138
[#64 'texture_depth_2d']: s#128
[#64 'texture_depth_2d_array']: s#129
[#64 'texture_depth_cube']: s#130
[#64 'texture_depth_cube_array']: s#131
[#64 'texture_depth_multisampled_2d']: s#132
[#64 'texture_multisampled_2d']: s#139
[#64 'texture_storage_1d']: s#140
[#64 'texture_storage_2d']: s#141
[#64 'texture_storage_2d_array']: s#142
[#64 'texture_storage_3d']: s#143
[#64 'true']: s#87
[#64 'u32']: s#93
[#64 'vec2']: s#98
[#64 'vec3']: s#99
[#64 'vec4']: s#100
[#64 '~']: s#64
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#64 /0[fh]/]: s#113
[#64 /0[iu]?/]: s#110
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#64 /[1-9][0-9]*[fh]/]: s#114
[#64 /[1-9][0-9]*[iu]?/]: s#111
[#65 '!']: s#63
[#65 '&']: s#66
[#65 '(']: s#78
[#65 '*']: s#65
[#65 '-']: s#62
[#65 'array']: s#82
[#65 'atomic']: s#96
[#65 'bitcast']: s#72
[#65 'bool']: s#89
[#65 'f16']: s#91
[#65 'f32']: s#90
[#65 'false']: s#88
[#65 'i32']: s#92
[#65 'mat2x2']: s#101
[#65 'mat2x3']: s#102
[#65 'mat2x4']: s#103
[#65 'mat3x2']: s#104
[#65 'mat3x3']: s#105
[#65 'mat3x4']: s#106
[#65 'mat4x2']: s#107
[#65 'mat4x3']: s#108
[#65 'mat4x4']: s#109
[#65 'ptr']: s#94
[#65 'sampler']: s#126
[#65 'sampler_comparison']: s#127
[#65 'texture_1d']: s#133
[#65 'texture_2d']: s#134
[#65 'texture_2d_array']: s#135
[#65 'texture_3d']: s#136
[#65 'texture_cube']: s#137
[#65 'texture_cube_array']: s#138
[#65 'texture_depth_2d']: s#128
[#65 'texture_depth_2d_array']: s#129
[#65 'texture_depth_cube']: s#130
[#65 'texture_depth_cube_array']: s#131
[#65 'texture_depth_multisampled_2d']: s#132
[#65 'texture_multisampled_2d']: s#139
[#65 'texture_storage_1d']: s#140
[#65 'texture_storage_2d']: s#141
[#65 'texture_storage_2d_array']: s#142
[#65 'texture_storage_3d']: s#143
[#65 'true']: s#87
[#65 'u32']: s#93
[#65 'vec2']: s#98
[#65 'vec3']: s#99
[#65 'vec4']: s#100
[#65 '~']: s#64
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#65 /0[fh]/]: s#113
[#65 /0[iu]?/]: s#110
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#65 /[1-9][0-9]*[fh]/]: s#114
[#65 /[1-9][0-9]*[iu]?/]: s#111
[#66 '!']: s#63
[#66 '&']: s#66
[#66 '(']: s#78
[#66 '*']: s#65
[#66 '-']: s#62
[#66 'array']: s#82
[#66 'atomic']: s#96
[#66 'bitcast']: s#72
[#66 'bool']: s#89
[#66 'f16']: s#91
[#66 'f32']: s#90
[#66 'false']: s#88
[#66 'i32']: s#92
[#66 'mat2x2']: s#101
[#66 'mat2x3']: s#102
[#66 'mat2x4']: s#103
[#66 'mat3x2']: s#104
[#66 'mat3x3']: s#105
[#66 'mat3x4']: s#106
[#66 'mat4x2']: s#107
[#66 'mat4x3']: s#108
[#66 'mat4x4']: s#109
[#66 'ptr']: s#94
[#66 'sampler']: s#126
[#66 'sampler_comparison']: s#127
[#66 'texture_1d']: s#133
[#66 'texture_2d']: s#134
[#66 'texture_2d_array']: s#135
[#66 'texture_3d']: s#136
[#66 'texture_cube']: s#137
[#66 'texture_cube_array']: s#138
[#66 'texture_depth_2d']: s#128
[#66 'texture_depth_2d_array']: s#129
[#66 'texture_depth_cube']: s#130
[#66 'texture_depth_cube_array']: s#131
[#66 'texture_depth_multisampled_2d']: s#132
[#66 'texture_multisampled_2d']: s#139
[#66 'texture_storage_1d']: s#140
[#66 'texture_storage_2d']: s#141
[#66 'texture_storage_2d_array']: s#142
[#66 'texture_storage_3d']: s#143
[#66 'true']: s#87
[#66 'u32']: s#93
[#66 'vec2']: s#98
[#66 'vec3']: s#99
[#66 'vec4']: s#100
[#66 '~']: s#64
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#66 /0[fh]/]: s#113
[#66 /0[iu]?/]: s#110
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#66 /[1-9][0-9]*[fh]/]: s#114
[#66 /[1-9][0-9]*[iu]?/]: s#111
[#67 '.']: s#189
[#67 '[']: s#188
[#68 '!=']: r#33
[#68 '%']: r#33
[#68 '&&']: r#33
[#68 '&']: r#33
[#68 '(']: r#34
[#68 ')']: r#33
[#68 '*']: r#33
[#68 '+']: r#33
[#68 ',']: r#33
[#68 '-']: r#33
[#68 '.']: r#33
[#68 '/']: r#33
[#68 ':']: r#33
[#68 ';']: r#33
[#68 '<']: r#33
[#68 '<<']: r#33
[#68 '<=']: r#33
[#68 '==']: r#33
[#68 '>']: r#33
[#68 '>=']: r#33
[#68 '>>']: r#33
[#68 '[']: r#33
[#68 ']']: r#33
[#68 '^']: r#33
[#68 '{']: r#33
[#68 '|']: r#33
[#68 '||']: r#33
[#69 '!=']: r#35
[#69 '%']: r#35
[#69 '&&']: r#35
[#69 '&']: r#35
[#69 ')']: r#35
[#69 '*']: r#35
[#69 '+']: r#35
[#69 ',']: r#35
[#69 '-']: r#35
[#69 '.']: r#35
[#69 '/']: r#35
[#69 ':']: r#35
[#69 ';']: r#35
[#69 '<']: r#35
[#69 '<<']: r#35
[#69 '<=']: r#35
[#69 '==']: r#35
[#69 '>']: r#35
[#69 '>=']: r#35
[#69 '>>']: r#35
[#69 '[']: r#35
[#69 ']']: r#35
[#69 '^']: r#35
[#69 '{']: r#35
[#69 '|']: r#35
[#69 '||']: r#35
[#70 '!=']: r#36
[#70 '%']: r#36
[#70 '&&']: r#36
[#70 '&']: r#36
[#70 ')']: r#36
[#70 '*']: r#36
[#70 '+']: r#36
[#70 ',']: r#36
[#70 '-']: r#36
[#70 '.']: r#36
[#70 '/']: r#36
[#70 ':']: r#36
[#70 ';']: r#36
[#70 '<']: r#36
[#70 '<<']: r#36
[#70 '<=']: r#36
[#70 '==']: r#36
[#70 '>']: r#36
[#70 '>=']: r#36
[#70 '>>']: r#36
[#70 '[']: r#36
[#70 ']']: r#36
[#70 '^']: r#36
[#70 '{']: r#36
[#70 '|']: r#36
[#70 '||']: r#36
[#71 '!=']: r#37
[#71 '%']: r#37
[#71 '&&']: r#37
[#71 '&']: r#37
[#71 ')']: r#37
[#71 '*']: r#37
[#71 '+']: r#37
[#71 ',']: r#37
[#71 '-']: r#37
[#71 '.']: r#37
[#71 '/']: r#37
[#71 ':']: r#37
[#71 ';']: r#37
[#71 '<']: r#37
[#71 '<<']: r#37
[#71 '<=']: r#37
[#71 '==']: r#37
[#71 '>']: r#37
[#71 '>=']: r#37
[#71 '>>']: r#37
[#71 '[']: r#37
[#71 ']']: r#37
[#71 '^']: r#37
[#71 '{']: r#37
[#71 '|']: r#37
[#71 '||']: r#37
[#72 '<']: s#185
[#73 '!=']: r#38
[#73 '%']: r#38
[#73 '%=']: r#38
[#73 '&&']: r#38
[#73 '&']: r#38
[#73 '&=']: r#38
[#73 '(']: r#38
[#73 ')']: r#38
[#73 '*']: r#38
[#73 '*=']: r#38
[#73 '+']: r#38
[#73 '++']: r#38
[#73 '+=']: r#38
[#73 ',']: r#38
[#73 '-']: r#38
[#73 '--']: r#38
[#73 '-=']: r#38
[#73 '.']: r#38
[#73 '/']: r#38
[#73 '/=']: r#38
[#73 ':']: r#38
[#73 ';']: r#38
[#73 '<']: r#38
[#73 '<<']: r#38
[#73 '<<=']: r#38
[#73 '<=']: r#38
[#73 '=']: r#38
[#73 '==']: r#38
[#73 '>']: r#38
[#73 '>=']: r#38
[#73 '>>']: r#38
[#73 '>>=']: r#38
[#73 '[']: r#38
[#73 ']']: r#38
[#73 '^']: r#38
[#73 '^=']: r#38
[#73 '{']: r#38
[#73 '|']: r#38
[#73 '|=']: r#38
[#73 '||']: r#38
[#73 '}']: r#38
[#74 '(']: s#184
[#75 '!=']: r#39
[#75 '%']: r#39
[#75 '&&']: r#39
[#75 '&']: r#39
[#75 ')']: r#39
[#75 '*']: r#39
[#75 '+']: r#39
[#75 ',']: r#39
[#75 '-']: r#39
[#75 '.']: r#39
[#75 '/']: r#39
[#75 ':']: r#39
[#75 ';']: r#39
[#75 '<']: r#39
[#75 '<<']: r#39
[#75 '<=']: r#39
[#75 '==']: r#39
[#75 '>']: r#39
[#75 '>=']: r#39
[#75 '>>']: r#39
[#75 '[']: r#39
[#75 ']']: r#39
[#75 '^']: r#39
[#75 '{']: r#39
[#75 '|']: r#39
[#75 '||']: r#39
[#76 '!=']: r#40
[#76 '%']: r#40
[#76 '&&']: r#40
[#76 '&']: r#40
[#76 ')']: r#40
[#76 '*']: r#40
[#76 '+']: r#40
[#76 ',']: r#40
[#76 '-']: r#40
[#76 '.']: r#40
[#76 '/']: r#40
[#76 ':']: r#40
[#76 ';']: r#40
[#76 '<']: r#40
[#76 '<<']: r#40
[#76 '<=']: r#40
[#76 '==']: r#40
[#76 '>']: r#40
[#76 '>=']: r#40
[#76 '>>']: r#40
[#76 '[']: r#40
[#76 ']']: r#40
[#76 '^']: r#40
[#76 '{']: r#40
[#76 '|']: r#40
[#76 '||']: r#40
[#77 '!=']: r#41
[#77 '%']: r#41
[#77 '&&']: r#41
[#77 '&']: r#41
[#77 ')']: r#41
[#77 '*']: r#41
[#77 '+']: r#41
[#77 ',']: r#41
[#77 '-']: r#41
[#77 '.']: r#41
[#77 '/']: r#41
[#77 ':']: r#41
[#77 ';']: r#41
[#77 '<']: r#41
[#77 '<<']: r#41
[#77 '<=']: r#41
[#77 '==']: r#41
[#77 '>']: r#41
[#77 '>=']: r#41
[#77 '>>']: r#41
[#77 '[']: r#41
[#77 ']']: r#41
[#77 '^']: r#41
[#77 '{']: r#41
[#77 '|']: r#41
[#77 '||']: r#41
[#78 '!']: s#63
[#78 '&']: s#66
[#78 '(']: s#78
[#78 '*']: s#65
[#78 '-']: s#62
[#78 'array']: s#82
[#78 'atomic']: s#96
[#78 'bitcast']: s#72
[#78 'bool']: s#89
[#78 'f16']: s#91
[#78 'f32']: s#90
[#78 'false']: s#88
[#78 'i32']: s#92
[#78 'mat2x2']: s#101
[#78 'mat2x3']: s#102
[#78 'mat2x4']: s#103
[#78 'mat3x2']: s#104
[#78 'mat3x3']: s#105
[#78 'mat3x4']: s#106
[#78 'mat4x2']: s#107
[#78 'mat4x3']: s#108
[#78 'mat4x4']: s#109
[#78 'ptr']: s#94
[#78 'sampler']: s#126
[#78 'sampler_comparison']: s#127
[#78 'texture_1d']: s#133
[#78 'texture_2d']: s#134
[#78 'texture_2d_array']: s#135
[#78 'texture_3d']: s#136
[#78 'texture_cube']: s#137
[#78 'texture_cube_array']: s#138
[#78 'texture_depth_2d']: s#128
[#78 'texture_depth_2d_array']: s#129
[#78 'texture_depth_cube']: s#130
[#78 'texture_depth_cube_array']: s#131
[#78 'texture_depth_multisampled_2d']: s#132
[#78 'texture_multisampled_2d']: s#139
[#78 'texture_storage_1d']: s#140
[#78 'texture_storage_2d']: s#141
[#78 'texture_storage_2d_array']: s#142
[#78 'texture_storage_3d']: s#143
[#78 'true']: s#87
[#78 'u32']: s#93
[#78 'vec2']: s#98
[#78 'vec3']: s#99
[#78 'vec4']: s#100
[#78 '~']: s#64
[#78 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#78 /0[fh]/]: s#113
[#78 /0[iu]?/]: s#110
[#78 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#78 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#78 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#78 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#78 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#78 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#78 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#78 /[1-9][0-9]*[fh]/]: s#114
[#78 /[1-9][0-9]*[iu]?/]: s#111
[#79 '(']: r#42
[#80 '(']: r#43
[#80 '<']: s#181
[#81 '(']: r#44
[#81 '<']: s#180
[#82 '(']: r#45
[#82 '<']: s#179
[#83 '!=']: r#46
[#83 '%']: r#46
[#83 '&&']: r#46
[#83 '&']: r#46
[#83 ')']: r#46
[#83 '*']: r#46
[#83 '+']: r#46
[#83 ',']: r#46
[#83 '-']: r#46
[#83 '.']: r#46
[#83 '/']: r#46
[#83 ':']: r#46
[#83 ';']: r#46
[#83 '<']: r#46
[#83 '<<']: r#46
[#83 '<=']: r#46
[#83 '==']: r#46
[#83 '>']: r#46
[#83 '>=']: r#46
[#83 '>>']: r#46
[#83 '[']: r#46
[#83 ']']: r#46
[#83 '^']: r#46
[#83 '{']: r#46
[#83 '|']: r#46
[#83 '||']: r#46
[#84 '!=']: r#47
[#84 '%']: r#47
[#84 '&&']: r#47
[#84 '&']: r#47
[#84 ')']: r#47
[#84 '*']: r#47
[#84 '+']: r#47
[#84 ',']: r#47
[#84 '-']: r#47
[#84 '.']: r#47
[#84 '/']: r#47
[#84 ':']: r#47
[#84 ';']: r#47
[#84 '<']: r#47
[#84 '<<']: r#47
[#84 '<=']: r#47
[#84 '==']: r#47
[#84 '>']: r#47
[#84 '>=']: r#47
[#84 '>>']: r#47
[#84 '[']: r#47
[#84 ']']: r#47
[#84 '^']: r#47
[#84 '{']: r#47
[#84 '|']: r#47
[#84 '||']: r#47
[#85 '!=']: r#48
[#85 '%']: r#48
[#85 '&&']: r#48
[#85 '&']: r#48
[#85 ')']: r#48
[#85 '*']: r#48
[#85 '+']: r#48
[#85 ',']: r#48
[#85 '-']: r#48
[#85 '.']: r#48
[#85 '/']: r#48
[#85 ':']: r#48
[#85 ';']: r#48
[#85 '<']: r#48
[#85 '<<']: r#48
[#85 '<=']: r#48
[#85 '==']: r#48
[#85 '>']: r#48
[#85 '>=']: r#48
[#85 '>>']: r#48
[#85 '[']: r#48
[#85 ']']: r#48
[#85 '^']: r#48
[#85 '{']: r#48
[#85 '|']: r#48
[#85 '||']: r#48
[#86 '!=']: r#49
[#86 '%']: r#49
[#86 '&&']: r#49
[#86 '&']: r#49
[#86 ')']: r#49
[#86 '*']: r#49
[#86 '+']: r#49
[#86 ',']: r#49
[#86 '-']: r#49
[#86 '.']: r#49
[#86 '/']: r#49
[#86 ':']: r#49
[#86 ';']: r#49
[#86 '<']: r#49
[#86 '<<']: r#49
[#86 '<=']: r#49
[#86 '==']: r#49
[#86 '>']: r#49
[#86 '>=']: r#49
[#86 '>>']: r#49
[#86 '[']: r#49
[#86 ']']: r#49
[#86 '^']: r#49
[#86 '{']: r#49
[#86 '|']: r#49
[#86 '||']: r#49
[#87 '!=']: r#50
[#87 '%']: r#50
[#87 '&&']: r#50
[#87 '&']: r#50
[#87 ')']: r#50
[#87 '*']: r#50
[#87 '+']: r#50
[#87 ',']: r#50
[#87 '-']: r#50
[#87 '.']: r#50
[#87 '/']: r#50
[#87 ':']: r#50
[#87 ';']: r#50
[#87 '<']: r#50
[#87 '<<']: r#50
[#87 '<=']: r#50
[#87 '==']: r#50
[#87 '>']: r#50
[#87 '>=']: r#50
[#87 '>>']: r#50
[#87 '[']: r#50
[#87 ']']: r#50
[#87 '^']: r#50
[#87 '{']: r#50
[#87 '|']: r#50
[#87 '||']: r#50
[#88 '!=']: r#51
[#88 '%']: r#51
[#88 '&&']: r#51
[#88 '&']: r#51
[#88 ')']: r#51
[#88 '*']: r#51
[#88 '+']: r#51
[#88 ',']: r#51
[#88 '-']: r#51
[#88 '.']: r#51
[#88 '/']: r#51
[#88 ':']: r#51
[#88 ';']: r#51
[#88 '<']: r#51
[#88 '<<']: r#51
[#88 '<=']: r#51
[#88 '==']: r#51
[#88 '>']: r#51
[#88 '>=']: r#51
[#88 '>>']: r#51
[#88 '[']: r#51
[#88 ']']: r#51
[#88 '^']: r#51
[#88 '{']: r#51
[#88 '|']: r#51
[#88 '||']: r#51
[#89 '(']: r#52
[#89 ')']: r#52
[#89 ',']: r#52
[#89 ';']: r#52
[#89 '=']: r#52
[#89 '>']: r#52
[#89 '{']: r#52
[#89 '}']: r#52
[#90 '(']: r#53
[#90 ')']: r#53
[#90 ',']: r#53
[#90 ';']: r#53
[#90 '=']: r#53
[#90 '>']: r#53
[#90 '{']: r#53
[#90 '}']: r#53
[#91 '(']: r#54
[#91 ')']: r#54
[#91 ',']: r#54
[#91 ';']: r#54
[#91 '=']: r#54
[#91 '>']: r#54
[#91 '{']: r#54
[#91 '}']: r#54
[#92 '(']: r#55
[#92 ')']: r#55
[#92 ',']: r#55
[#92 ';']: r#55
[#92 '=']: r#55
[#92 '>']: r#55
[#92 '{']: r#55
[#92 '}']: r#55
[#93 '(']: r#56
[#93 ')']: r#56
[#93 ',']: r#56
[#93 ';']: r#56
[#93 '=']: r#56
[#93 '>']: r#56
[#93 '{']: r#56
[#93 '}']: r#56
[#94 '<']: s#178
[#95 '(']: r#57
[#95 ')']: r#57
[#95 ',']: r#57
[#95 ';']: r#57
[#95 '=']: r#57
[#95 '>']: r#57
[#95 '{']: r#57
[#95 '}']: r#57
[#96 '<']: s#177
[#97 '(']: r#58
[#97 ')']: r#58
[#97 ',']: r#58
[#97 ';']: r#58
[#97 '=']: r#58
[#97 '>']: r#58
[#97 '{']: r#58
[#97 '}']: r#58
[#98 '(']: r#59
[#98 '<']: r#59
[#99 '(']: r#60
[#99 '<']: r#60
[#100 '(']: r#61
[#100 '<']: r#61
[#101 '(']: r#62
[#101 '<']: r#62
[#102 '(']: r#63
[#102 '<']: r#63
[#103 '(']: r#64
[#103 '<']: r#64
[#104 '(']: r#65
[#104 '<']: r#65
[#105 '(']: r#66
[#105 '<']: r#66
[#106 '(']: r#67
[#106 '<']: r#67
[#107 '(']: r#68
[#107 '<']: r#68
[#108 '(']: r#69
[#108 '<']: r#69
[#109 '(']: r#70
[#109 '<']: r#70
[#110 '!=']: r#71
[#110 '%']: r#71
[#110 '&&']: r#71
[#110 '&']: r#71
[#110 ')']: r#71
[#110 '*']: r#71
[#110 '+']: r#71
[#110 ',']: r#71
[#110 '-']: r#71
[#110 '.']: r#71
[#110 '/']: r#71
[#110 ':']: r#71
[#110 ';']: r#71
[#110 '<']: r#71
[#110 '<<']: r#71
[#110 '<=']: r#71
[#110 '==']: r#71
[#110 '>']: r#71
[#110 '>=']: r#71
[#110 '>>']: r#71
[#110 '[']: r#71
[#110 ']']: r#71
[#110 '^']: r#71
[#110 '{']: r#71
[#110 '|']: r#71
[#110 '||']: r#71
[#111 '!=']: r#72
[#111 '%']: r#72
[#111 '&&']: r#72
[#111 '&']: r#72
[#111 ')']: r#72
[#111 '*']: r#72
[#111 '+']: r#72
[#111 ',']: r#72
[#111 '-']: r#72
[#111 '.']: r#72
[#111 '/']: r#72
[#111 ':']: r#72
[#111 ';']: r#72
[#111 '<']: r#72
[#111 '<<']: r#72
[#111 '<=']: r#72
[#111 '==']: r#72
[#111 '>']: r#72
[#111 '>=']: r#72
[#111 '>>']: r#72
[#111 '[']: r#72
[#111 ']']: r#72
[#111 '^']: r#72
[#111 '{']: r#72
[#111 '|']: r#72
[#111 '||']: r#72
[#112 '!=']: r#73
[#112 '%']: r#73
[#112 '&&']: r#73
[#112 '&']: r#73
[#112 ')']: r#73
[#112 '*']: r#73
[#112 '+']: r#73
[#112 ',']: r#73
[#112 '-']: r#73
[#112 '.']: r#73
[#112 '/']: r#73
[#112 ':']: r#73
[#112 ';']: r#73
[#112 '<']: r#73
[#112 '<<']: r#73
[#112 '<=']: r#73
[#112 '==']: r#73
[#112 '>']: r#73
[#112 '>=']: r#73
[#112 '>>']: r#73
[#112 '[']: r#73
[#112 ']']: r#73
[#112 '^']: r#73
[#112 '{']: r#73
[#112 '|']: r#73
[#112 '||']: r#73
[#113 '!=']: r#74
[#113 '%']: r#74
[#113 '&&']: r#74
[#113 '&']: r#74
[#113 ')']: r#74
[#113 '*']: r#74
[#113 '+']: r#74
[#113 ',']: r#74
[#113 '-']: r#74
[#113 '.']: r#74
[#113 '/']: r#74
[#113 ':']: r#74
[#113 ';']: r#74
[#113 '<']: r#74
[#113 '<<']: r#74
[#113 '<=']: r#74
[#113 '==']: r#74
[#113 '>']: r#74
[#113 '>=']: r#74
[#113 '>>']: r#74
[#113 '[']: r#74
[#113 ']']: r#74
[#113 '^']: r#74
[#113 '{']: r#74
[#113 '|']: r#74
[#113 '||']: r#74
[#114 '!=']: r#75
[#114 '%']: r#75
[#114 '&&']: r#75
[#114 '&']: r#75
[#114 ')']: r#75
[#114 '*']: r#75
[#114 '+']: r#75
[#114 ',']: r#75
[#114 '-']: r#75
[#114 '.']: r#75
[#114 '/']: r#75
[#114 ':']: r#75
[#114 ';']: r#75
[#114 '<']: r#75
[#114 '<<']: r#75
[#114 '<=']: r#75
[#114 '==']: r#75
[#114 '>']: r#75
[#114 '>=']: r#75
[#114 '>>']: r#75
[#114 '[']: r#75
[#114 ']']: r#75
[#114 '^']: r#75
[#114 '{']: r#75
[#114 '|']: r#75
[#114 '||']: r#75
[#115 '!=']: r#76
[#115 '%']: r#76
[#115 '&&']: r#76
[#115 '&']: r#76
[#115 ')']: r#76
[#115 '*']: r#76
[#115 '+']: r#76
[#115 ',']: r#76
[#115 '-']: r#76
[#115 '.']: r#76
[#115 '/']: r#76
[#115 ':']: r#76
[#115 ';']: r#76
[#115 '<']: r#76
[#115 '<<']: r#76
[#115 '<=']: r#76
[#115 '==']: r#76
[#115 '>']: r#76
[#115 '>=']: r#76
[#115 '>>']: r#76
[#115 '[']: r#76
[#115 ']']: r#76
[#115 '^']: r#76
[#115 '{']: r#76
[#115 '|']: r#76
[#115 '||']: r#76
[#116 '!=']: r#77
[#116 '%']: r#77
[#116 '&&']: r#77
[#116 '&']: r#77
[#116 ')']: r#77
[#116 '*']: r#77
[#116 '+']: r#77
[#116 ',']: r#77
[#116 '-']: r#77
[#116 '.']: r#77
[#116 '/']: r#77
[#116 ':']: r#77
[#116 ';']: r#77
[#116 '<']: r#77
[#116 '<<']: r#77
[#116 '<=']: r#77
[#116 '==']: r#77
[#116 '>']: r#77
[#116 '>=']: r#77
[#116 '>>']: r#77
[#116 '[']: r#77
[#116 ']']: r#77
[#116 '^']: r#77
[#116 '{']: r#77
[#116 '|']: r#77
[#116 '||']: r#77
[#117 '!=']: r#78
[#117 '%']: r#78
[#117 '&&']: r#78
[#117 '&']: r#78
[#117 ')']: r#78
[#117 '*']: r#78
[#117 '+']: r#78
[#117 ',']: r#78
[#117 '-']: r#78
[#117 '.']: r#78
[#117 '/']: r#78
[#117 ':']: r#78
[#117 ';']: r#78
[#117 '<']: r#78
[#117 '<<']: r#78
[#117 '<=']: r#78
[#117 '==']: r#78
[#117 '>']: r#78
[#117 '>=']: r#78
[#117 '>>']: r#78
[#117 '[']: r#78
[#117 ']']: r#78
[#117 '^']: r#78
[#117 '{']: r#78
[#117 '|']: r#78
[#117 '||']: r#78
[#118 '!=']: r#79
[#118 '%']: r#79
[#118 '&&']: r#79
[#118 '&']: r#79
[#118 ')']: r#79
[#118 '*']: r#79
[#118 '+']: r#79
[#118 ',']: r#79
[#118 '-']: r#79
[#118 '.']: r#79
[#118 '/']: r#79
[#118 ':']: r#79
[#118 ';']: r#79
[#118 '<']: r#79
[#118 '<<']: r#79
[#118 '<=']: r#79
[#118 '==']: r#79
[#118 '>']: r#79
[#118 '>=']: r#79
[#118 '>>']: r#79
[#118 '[']: r#79
[#118 ']']: r#79
[#118 '^']: r#79
[#118 '{']: r#79
[#118 '|']: r#79
[#118 '||']: r#79
[#119 '!=']: r#80
[#119 '%']: r#80
[#119 '&&']: r#80
[#119 '&']: r#80
[#119 ')']: r#80
[#119 '*']: r#80
[#119 '+']: r#80
[#119 ',']: r#80
[#119 '-']: r#80
[#119 '.']: r#80
[#119 '/']: r#80
[#119 ':']: r#80
[#119 ';']: r#80
[#119 '<']: r#80
[#119 '<<']: r#80
[#119 '<=']: r#80
[#119 '==']: r#80
[#119 '>']: r#80
[#119 '>=']: r#80
[#119 '>>']: r#80
[#119 '[']: r#80
[#119 ']']: r#80
[#119 '^']: r#80
[#119 '{']: r#80
[#119 '|']: r#80
[#119 '||']: r#80
[#120 '!=']: r#81
[#120 '%']: r#81
[#120 '&&']: r#81
[#120 '&']: r#81
[#120 ')']: r#81
[#120 '*']: r#81
[#120 '+']: r#81
[#120 ',']: r#81
[#120 '-']: r#81
[#120 '.']: r#81
[#120 '/']: r#81
[#120 ':']: r#81
[#120 ';']: r#81
[#120 '<']: r#81
[#120 '<<']: r#81
[#120 '<=']: r#81
[#120 '==']: r#81
[#120 '>']: r#81
[#120 '>=']: r#81
[#120 '>>']: r#81
[#120 '[']: r#81
[#120 ']']: r#81
[#120 '^']: r#81
[#120 '{']: r#81
[#120 '|']: r#81
[#120 '||']: r#81
[#121 '(']: r#82
[#121 ')']: r#82
[#121 ',']: r#82
[#121 ';']: r#82
[#121 '=']: r#82
[#121 '>']: r#82
[#121 '{']: r#82
[#121 '}']: r#82
[#122 '(']: r#83
[#122 ')']: r#83
[#122 ',']: r#83
[#122 ';']: r#83
[#122 '=']: r#83
[#122 '>']: r#83
[#122 '{']: r#83
[#122 '}']: r#83
[#123 '<']: s#176
[#124 '<']: s#175
[#125 '<']: s#174
[#126 '(']: r#84
[#126 ')']: r#84
[#126 ',']: r#84
[#126 ';']: r#84
[#126 '=']: r#84
[#126 '>']: r#84
[#126 '{']: r#84
[#126 '}']: r#84
[#127 '(']: r#85
[#127 ')']: r#85
[#127 ',']: r#85
[#127 ';']: r#85
[#127 '=']: r#85
[#127 '>']: r#85
[#127 '{']: r#85
[#127 '}']: r#85
[#128 '(']: r#86
[#128 ')']: r#86
[#128 ',']: r#86
[#128 ';']: r#86
[#128 '=']: r#86
[#128 '>']: r#86
[#128 '{']: r#86
[#128 '}']: r#86
[#129 '(']: r#87
[#129 ')']: r#87
[#129 ',']: r#87
[#129 ';']: r#87
[#129 '=']: r#87
[#129 '>']: r#87
[#129 '{']: r#87
[#129 '}']: r#87
[#130 '(']: r#88
[#130 ')']: r#88
[#130 ',']: r#88
[#130 ';']: r#88
[#130 '=']: r#88
[#130 '>']: r#88
[#130 '{']: r#88
[#130 '}']: r#88
[#131 '(']: r#89
[#131 ')']: r#89
[#131 ',']: r#89
[#131 ';']: r#89
[#131 '=']: r#89
[#131 '>']: r#89
[#131 '{']: r#89
[#131 '}']: r#89
[#132 '(']: r#90
[#132 ')']: r#90
[#132 ',']: r#90
[#132 ';']: r#90
[#132 '=']: r#90
[#132 '>']: r#90
[#132 '{']: r#90
[#132 '}']: r#90
[#133 '<']: r#91
[#134 '<']: r#92
[#135 '<']: r#93
[#136 '<']: r#94
[#137 '<']: r#95
[#138 '<']: r#96
[#139 '<']: r#97
[#140 '<']: r#98
[#141 '<']: r#99
[#142 '<']: r#100
[#143 '<']: r#101
[#144 '{']: s#173
[#145 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#146 '{']: s#170
[#147 '=']: s#168
[#148 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#149 '=']: s#166
[#150 ':']: s#165
[#151 '=']: s#163
[#152 '<']: s#161
[#153 ';']: r#102
[#153 '@']: r#102
[#153 'alias']: r#102
[#153 'const']: r#102
[#153 'const_assert']: r#102
[#153 'fn']: r#102
[#153 'override']: r#102
[#153 'struct']: r#102
[#153 'var']: r#102
[#153 EndOfText]: r#102
[#154 ';']: r#103
[#154 '@']: r#103
[#154 'alias']: r#103
[#154 'const']: r#103
[#154 'const_assert']: r#103
[#154 'fn']: r#103
[#154 'override']: r#103
[#154 'struct']: r#103
[#154 'var']: r#103
[#154 EndOfText]: r#103
[#155 ';']: r#104
[#155 '@']: r#104
[#155 'alias']: r#104
[#155 'const']: r#104
[#155 'const_assert']: r#104
[#155 'fn']: r#104
[#155 'override']: r#104
[#155 'struct']: r#104
[#155 'var']: r#104
[#155 EndOfText]: r#104
[#156 ';']: r#105
[#156 '@']: r#105
[#156 'alias']: r#105
[#156 'const']: r#105
[#156 'const_assert']: r#105
[#156 'fn']: r#105
[#156 'override']: r#105
[#156 'struct']: r#105
[#156 'var']: r#105
[#156 EndOfText]: r#105
[#157 EndOfText]: r#106
[#158 ';']: r#107
[#158 '@']: r#107
[#158 'alias']: r#107
[#158 'const']: r#107
[#158 'const_assert']: r#107
[#158 'enable']: r#107
[#158 'fn']: r#107
[#158 'override']: r#107
[#158 'struct']: r#107
[#158 'var']: r#107
[#158 EndOfText]: r#107
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#160 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#108
[#161 'function']: s#291
[#161 'private']: s#292
[#161 'storage']: s#295
[#161 'uniform']: s#294
[#161 'workgroup']: s#293
[#162 ';']: r#109
[#163 '!']: s#63
[#163 '&']: s#66
[#163 '(']: s#78
[#163 '*']: s#65
[#163 '-']: s#62
[#163 'array']: s#82
[#163 'atomic']: s#96
[#163 'bitcast']: s#72
[#163 'bool']: s#89
[#163 'f16']: s#91
[#163 'f32']: s#90
[#163 'false']: s#88
[#163 'i32']: s#92
[#163 'mat2x2']: s#101
[#163 'mat2x3']: s#102
[#163 'mat2x4']: s#103
[#163 'mat3x2']: s#104
[#163 'mat3x3']: s#105
[#163 'mat3x4']: s#106
[#163 'mat4x2']: s#107
[#163 'mat4x3']: s#108
[#163 'mat4x4']: s#109
[#163 'ptr']: s#94
[#163 'sampler']: s#126
[#163 'sampler_comparison']: s#127
[#163 'texture_1d']: s#133
[#163 'texture_2d']: s#134
[#163 'texture_2d_array']: s#135
[#163 'texture_3d']: s#136
[#163 'texture_cube']: s#137
[#163 'texture_cube_array']: s#138
[#163 'texture_depth_2d']: s#128
[#163 'texture_depth_2d_array']: s#129
[#163 'texture_depth_cube']: s#130
[#163 'texture_depth_cube_array']: s#131
[#163 'texture_depth_multisampled_2d']: s#132
[#163 'texture_multisampled_2d']: s#139
[#163 'texture_storage_1d']: s#140
[#163 'texture_storage_2d']: s#141
[#163 'texture_storage_2d_array']: s#142
[#163 'texture_storage_3d']: s#143
[#163 'true']: s#87
[#163 'u32']: s#93
[#163 'vec2']: s#98
[#163 'vec3']: s#99
[#163 'vec4']: s#100
[#163 '~']: s#64
[#163 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#163 /0[fh]/]: s#113
[#163 /0[iu]?/]: s#110
[#163 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#163 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#163 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#163 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#163 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#163 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#163 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#163 /[1-9][0-9]*[fh]/]: s#114
[#163 /[1-9][0-9]*[iu]?/]: s#111
[#164 ';']: r#110
[#164 '=']: r#110
[#165 'array']: s#282
[#165 'atomic']: s#96
[#165 'bool']: s#89
[#165 'f16']: s#91
[#165 'f32']: s#90
[#165 'i32']: s#92
[#165 'mat2x2']: s#101
[#165 'mat2x3']: s#102
[#165 'mat2x4']: s#103
[#165 'mat3x2']: s#104
[#165 'mat3x3']: s#105
[#165 'mat3x4']: s#106
[#165 'mat4x2']: s#107
[#165 'mat4x3']: s#108
[#165 'mat4x4']: s#109
[#165 'ptr']: s#94
[#165 'sampler']: s#126
[#165 'sampler_comparison']: s#127
[#165 'texture_1d']: s#133
[#165 'texture_2d']: s#134
[#165 'texture_2d_array']: s#135
[#165 'texture_3d']: s#136
[#165 'texture_cube']: s#137
[#165 'texture_cube_array']: s#138
[#165 'texture_depth_2d']: s#128
[#165 'texture_depth_2d_array']: s#129
[#165 'texture_depth_cube']: s#130
[#165 'texture_depth_cube_array']: s#131
[#165 'texture_depth_multisampled_2d']: s#132
[#165 'texture_multisampled_2d']: s#139
[#165 'texture_storage_1d']: s#140
[#165 'texture_storage_2d']: s#141
[#165 'texture_storage_2d_array']: s#142
[#165 'texture_storage_3d']: s#143
[#165 'u32']: s#93
[#165 'vec2']: s#98
[#165 'vec3']: s#99
[#165 'vec4']: s#100
[#165 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#166 '!']: s#63
[#166 '&']: s#66
[#166 '(']: s#78
[#166 '*']: s#65
[#166 '-']: s#62
[#166 'array']: s#82
[#166 'atomic']: s#96
[#166 'bitcast']: s#72
[#166 'bool']: s#89
[#166 'f16']: s#91
[#166 'f32']: s#90
[#166 'false']: s#88
[#166 'i32']: s#92
[#166 'mat2x2']: s#101
[#166 'mat2x3']: s#102
[#166 'mat2x4']: s#103
[#166 'mat3x2']: s#104
[#166 'mat3x3']: s#105
[#166 'mat3x4']: s#106
[#166 'mat4x2']: s#107
[#166 'mat4x3']: s#108
[#166 'mat4x4']: s#109
[#166 'ptr']: s#94
[#166 'sampler']: s#126
[#166 'sampler_comparison']: s#127
[#166 'texture_1d']: s#133
[#166 'texture_2d']: s#134
[#166 'texture_2d_array']: s#135
[#166 'texture_3d']: s#136
[#166 'texture_cube']: s#137
[#166 'texture_cube_array']: s#138
[#166 'texture_depth_2d']: s#128
[#166 'texture_depth_2d_array']: s#129
[#166 'texture_depth_cube']: s#130
[#166 'texture_depth_cube_array']: s#131
[#166 'texture_depth_multisampled_2d']: s#132
[#166 'texture_multisampled_2d']: s#139
[#166 'texture_storage_1d']: s#140
[#166 'texture_storage_2d']: s#141
[#166 'texture_storage_2d_array']: s#142
[#166 'texture_storage_3d']: s#143
[#166 'true']: s#87
[#166 'u32']: s#93
[#166 'vec2']: s#98
[#166 'vec3']: s#99
[#166 'vec4']: s#100
[#166 '~']: s#64
[#166 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#166 /0[fh]/]: s#113
[#166 /0[iu]?/]: s#110
[#166 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#166 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#166 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#166 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#166 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#166 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#166 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#166 /[1-9][0-9]*[fh]/]: s#114
[#166 /[1-9][0-9]*[iu]?/]: s#111
[#167 '=']: s#365
[#168 'array']: s#282
[#168 'atomic']: s#96
[#168 'bool']: s#89
[#168 'f16']: s#91
[#168 'f32']: s#90
[#168 'i32']: s#92
[#168 'mat2x2']: s#101
[#168 'mat2x3']: s#102
[#168 'mat2x4']: s#103
[#168 'mat3x2']: s#104
[#168 'mat3x3']: s#105
[#168 'mat3x4']: s#106
[#168 'mat4x2']: s#107
[#168 'mat4x3']: s#108
[#168 'mat4x4']: s#109
[#168 'ptr']: s#94
[#168 'sampler']: s#126
[#168 'sampler_comparison']: s#127
[#168 'texture_1d']: s#133
[#168 'texture_2d']: s#134
[#168 'texture_2d_array']: s#135
[#168 'texture_3d']: s#136
[#168 'texture_cube']: s#137
[#168 'texture_cube_array']: s#138
[#168 'texture_depth_2d']: s#128
[#168 'texture_depth_2d_array']: s#129
[#168 'texture_depth_cube']: s#130
[#168 'texture_depth_cube_array']: s#131
[#168 'texture_depth_multisampled_2d']: s#132
[#168 'texture_multisampled_2d']: s#139
[#168 'texture_storage_1d']: s#140
[#168 'texture_storage_2d']: s#141
[#168 'texture_storage_2d_array']: s#142
[#168 'texture_storage_3d']: s#143
[#168 'u32']: s#93
[#168 'vec2']: s#98
[#168 'vec3']: s#99
[#168 'vec4']: s#100
[#168 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#169 ';']: r#111
[#169 '@']: r#111
[#169 'alias']: r#111
[#169 'const']: r#111
[#169 'const_assert']: r#111
[#169 'fn']: r#111
[#169 'override']: r#111
[#169 'struct']: r#111
[#169 'var']: r#111
[#169 EndOfText]: r#111
[#170 '@']: s#31
[#171 '(']: s#358
[#172 ';']: r#112
[#172 '@']: r#112
[#172 'alias']: r#112
[#172 'const']: r#112
[#172 'const_assert']: r#112
[#172 'fn']: r#112
[#172 'override']: r#112
[#172 'struct']: r#112
[#172 'var']: r#112
[#172 EndOfText]: r#112
[#173 '&']: s#356
[#173 '(']: s#357
[#173 '*']: s#355
[#173 ';']: s#320
[#173 '_']: s#353
[#173 'array']: s#82
[#173 'atomic']: s#96
[#173 'bool']: s#89
[#173 'break']: s#345
[#173 'const']: s#344
[#173 'const_assert']: s#26
[#173 'continue']: s#346
[#173 'discard']: s#331
[#173 'f16']: s#91
[#173 'f32']: s#90
[#173 'for']: s#339
[#173 'i32']: s#92
[#173 'if']: s#350
[#173 'let']: s#343
[#173 'loop']: s#338
[#173 'mat2x2']: s#101
[#173 'mat2x3']: s#102
[#173 'mat2x4']: s#103
[#173 'mat3x2']: s#104
[#173 'mat3x3']: s#105
[#173 'mat3x4']: s#106
[#173 'mat4x2']: s#107
[#173 'mat4x3']: s#108
[#173 'mat4x4']: s#109
[#173 'ptr']: s#94
[#173 'return']: s#335
[#173 'sampler']: s#126
[#173 'sampler_comparison']: s#127
[#173 'switch']: s#337
[#173 'texture_1d']: s#133
[#173 'texture_2d']: s#134
[#173 'texture_2d_array']: s#135
[#173 'texture_3d']: s#136
[#173 'texture_cube']: s#137
[#173 'texture_cube_array']: s#138
[#173 'texture_depth_2d']: s#128
[#173 'texture_depth_2d_array']: s#129
[#173 'texture_depth_cube']: s#130
[#173 'texture_depth_cube_array']: s#131
[#173 'texture_depth_multisampled_2d']: s#132
[#173 'texture_multisampled_2d']: s#139
[#173 'texture_storage_1d']: s#140
[#173 'texture_storage_2d']: s#141
[#173 'texture_storage_2d_array']: s#142
[#173 'texture_storage_3d']: s#143
[#173 'u32']: s#93
[#173 'var']: s#152
[#173 'vec2']: s#98
[#173 'vec3']: s#99
[#173 'vec4']: s#100
[#173 'while']: s#340
[#173 '{']: s#173
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#174 'bgra8unorm']: s#316
[#174 'r32float']: s#309
[#174 'r32sint']: s#308
[#174 'r32uint']: s#307
[#174 'rg32float']: s#312
[#174 'rg32sint']: s#311
[#174 'rg32uint']: s#310
[#174 'rgba16float']: s#306
[#174 'rgba16sint']: s#305
[#174 'rgba16uint']: s#304
[#174 'rgba32float']: s#315
[#174 'rgba32sint']: s#314
[#174 'rgba32uint']: s#313
[#174 'rgba8sint']: s#303
[#174 'rgba8snorm']: s#301
[#174 'rgba8uint']: s#302
[#174 'rgba8unorm']: s#300
[#175 'array']: s#282
[#175 'atomic']: s#96
[#175 'bool']: s#89
[#175 'f16']: s#91
[#175 'f32']: s#90
[#175 'i32']: s#92
[#175 'mat2x2']: s#101
[#175 'mat2x3']: s#102
[#175 'mat2x4']: s#103
[#175 'mat3x2']: s#104
[#175 'mat3x3']: s#105
[#175 'mat3x4']: s#106
[#175 'mat4x2']: s#107
[#175 'mat4x3']: s#108
[#175 'mat4x4']: s#109
[#175 'ptr']: s#94
[#175 'sampler']: s#126
[#175 'sampler_comparison']: s#127
[#175 'texture_1d']: s#133
[#175 'texture_2d']: s#134
[#175 'texture_2d_array']: s#135
[#175 'texture_3d']: s#136
[#175 'texture_cube']: s#137
[#175 'texture_cube_array']: s#138
[#175 'texture_depth_2d']: s#128
[#175 'texture_depth_2d_array']: s#129
[#175 'texture_depth_cube']: s#130
[#175 'texture_depth_cube_array']: s#131
[#175 'texture_depth_multisampled_2d']: s#132
[#175 'texture_multisampled_2d']: s#139
[#175 'texture_storage_1d']: s#140
[#175 'texture_storage_2d']: s#141
[#175 'texture_storage_2d_array']: s#142
[#175 'texture_storage_3d']: s#143
[#175 'u32']: s#93
[#175 'vec2']: s#98
[#175 'vec3']: s#99
[#175 'vec4']: s#100
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#176 'array']: s#282
[#176 'atomic']: s#96
[#176 'bool']: s#89
[#176 'f16']: s#91
[#176 'f32']: s#90
[#176 'i32']: s#92
[#176 'mat2x2']: s#101
[#176 'mat2x3']: s#102
[#176 'mat2x4']: s#103
[#176 'mat3x2']: s#104
[#176 'mat3x3']: s#105
[#176 'mat3x4']: s#106
[#176 'mat4x2']: s#107
[#176 'mat4x3']: s#108
[#176 'mat4x4']: s#109
[#176 'ptr']: s#94
[#176 'sampler']: s#126
[#176 'sampler_comparison']: s#127
[#176 'texture_1d']: s#133
[#176 'texture_2d']: s#134
[#176 'texture_2d_array']: s#135
[#176 'texture_3d']: s#136
[#176 'texture_cube']: s#137
[#176 'texture_cube_array']: s#138
[#176 'texture_depth_2d']: s#128
[#176 'texture_depth_2d_array']: s#129
[#176 'texture_depth_cube']: s#130
[#176 'texture_depth_cube_array']: s#131
[#176 'texture_depth_multisampled_2d']: s#132
[#176 'texture_multisampled_2d']: s#139
[#176 'texture_storage_1d']: s#140
[#176 'texture_storage_2d']: s#141
[#176 'texture_storage_2d_array']: s#142
[#176 'texture_storage_3d']: s#143
[#176 'u32']: s#93
[#176 'vec2']: s#98
[#176 'vec3']: s#99
[#176 'vec4']: s#100
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#177 'array']: s#282
[#177 'atomic']: s#96
[#177 'bool']: s#89
[#177 'f16']: s#91
[#177 'f32']: s#90
[#177 'i32']: s#92
[#177 'mat2x2']: s#101
[#177 'mat2x3']: s#102
[#177 'mat2x4']: s#103
[#177 'mat3x2']: s#104
[#177 'mat3x3']: s#105
[#177 'mat3x4']: s#106
[#177 'mat4x2']: s#107
[#177 'mat4x3']: s#108
[#177 'mat4x4']: s#109
[#177 'ptr']: s#94
[#177 'sampler']: s#126
[#177 'sampler_comparison']: s#127
[#177 'texture_1d']: s#133
[#177 'texture_2d']: s#134
[#177 'texture_2d_array']: s#135
[#177 'texture_3d']: s#136
[#177 'texture_cube']: s#137
[#177 'texture_cube_array']: s#138
[#177 'texture_depth_2d']: s#128
[#177 'texture_depth_2d_array']: s#129
[#177 'texture_depth_cube']: s#130
[#177 'texture_depth_cube_array']: s#131
[#177 'texture_depth_multisampled_2d']: s#132
[#177 'texture_multisampled_2d']: s#139
[#177 'texture_storage_1d']: s#140
[#177 'texture_storage_2d']: s#141
[#177 'texture_storage_2d_array']: s#142
[#177 'texture_storage_3d']: s#143
[#177 'u32']: s#93
[#177 'vec2']: s#98
[#177 'vec3']: s#99
[#177 'vec4']: s#100
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#178 'function']: s#291
[#178 'private']: s#292
[#178 'storage']: s#295
[#178 'uniform']: s#294
[#178 'workgroup']: s#293
[#179 'array']: s#282
[#179 'atomic']: s#96
[#179 'bool']: s#89
[#179 'f16']: s#91
[#179 'f32']: s#90
[#179 'i32']: s#92
[#179 'mat2x2']: s#101
[#179 'mat2x3']: s#102
[#179 'mat2x4']: s#103
[#179 'mat3x2']: s#104
[#179 'mat3x3']: s#105
[#179 'mat3x4']: s#106
[#179 'mat4x2']: s#107
[#179 'mat4x3']: s#108
[#179 'mat4x4']: s#109
[#179 'ptr']: s#94
[#179 'sampler']: s#126
[#179 'sampler_comparison']: s#127
[#179 'texture_1d']: s#133
[#179 'texture_2d']: s#134
[#179 'texture_2d_array']: s#135
[#179 'texture_3d']: s#136
[#179 'texture_cube']: s#137
[#179 'texture_cube_array']: s#138
[#179 'texture_depth_2d']: s#128
[#179 'texture_depth_2d_array']: s#129
[#179 'texture_depth_cube']: s#130
[#179 'texture_depth_cube_array']: s#131
[#179 'texture_depth_multisampled_2d']: s#132
[#179 'texture_multisampled_2d']: s#139
[#179 'texture_storage_1d']: s#140
[#179 'texture_storage_2d']: s#141
[#179 'texture_storage_2d_array']: s#142
[#179 'texture_storage_3d']: s#143
[#179 'u32']: s#93
[#179 'vec2']: s#98
[#179 'vec3']: s#99
[#179 'vec4']: s#100
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#180 'array']: s#282
[#180 'atomic']: s#96
[#180 'bool']: s#89
[#180 'f16']: s#91
[#180 'f32']: s#90
[#180 'i32']: s#92
[#180 'mat2x2']: s#101
[#180 'mat2x3']: s#102
[#180 'mat2x4']: s#103
[#180 'mat3x2']: s#104
[#180 'mat3x3']: s#105
[#180 'mat3x4']: s#106
[#180 'mat4x2']: s#107
[#180 'mat4x3']: s#108
[#180 'mat4x4']: s#109
[#180 'ptr']: s#94
[#180 'sampler']: s#126
[#180 'sampler_comparison']: s#127
[#180 'texture_1d']: s#133
[#180 'texture_2d']: s#134
[#180 'texture_2d_array']: s#135
[#180 'texture_3d']: s#136
[#180 'texture_cube']: s#137
[#180 'texture_cube_array']: s#138
[#180 'texture_depth_2d']: s#128
[#180 'texture_depth_2d_array']: s#129
[#180 'texture_depth_cube']: s#130
[#180 'texture_depth_cube_array']: s#131
[#180 'texture_depth_multisampled_2d']: s#132
[#180 'texture_multisampled_2d']: s#139
[#180 'texture_storage_1d']: s#140
[#180 'texture_storage_2d']: s#141
[#180 'texture_storage_2d_array']: s#142
[#180 'texture_storage_3d']: s#143
[#180 'u32']: s#93
[#180 'vec2']: s#98
[#180 'vec3']: s#99
[#180 'vec4']: s#100
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#181 'array']: s#282
[#181 'atomic']: s#96
[#181 'bool']: s#89
[#181 'f16']: s#91
[#181 'f32']: s#90
[#181 'i32']: s#92
[#181 'mat2x2']: s#101
[#181 'mat2x3']: s#102
[#181 'mat2x4']: s#103
[#181 'mat3x2']: s#104
[#181 'mat3x3']: s#105
[#181 'mat3x4']: s#106
[#181 'mat4x2']: s#107
[#181 'mat4x3']: s#108
[#181 'mat4x4']: s#109
[#181 'ptr']: s#94
[#181 'sampler']: s#126
[#181 'sampler_comparison']: s#127
[#181 'texture_1d']: s#133
[#181 'texture_2d']: s#134
[#181 'texture_2d_array']: s#135
[#181 'texture_3d']: s#136
[#181 'texture_cube']: s#137
[#181 'texture_cube_array']: s#138
[#181 'texture_depth_2d']: s#128
[#181 'texture_depth_2d_array']: s#129
[#181 'texture_depth_cube']: s#130
[#181 'texture_depth_cube_array']: s#131
[#181 'texture_depth_multisampled_2d']: s#132
[#181 'texture_multisampled_2d']: s#139
[#181 'texture_storage_1d']: s#140
[#181 'texture_storage_2d']: s#141
[#181 'texture_storage_2d_array']: s#142
[#181 'texture_storage_3d']: s#143
[#181 'u32']: s#93
[#181 'vec2']: s#98
[#181 'vec3']: s#99
[#181 'vec4']: s#100
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#182 ')']: s#286
[#183 '!=']: r#113
[#183 '%']: r#113
[#183 '&&']: r#113
[#183 '&']: r#113
[#183 ')']: r#113
[#183 '*']: r#113
[#183 '+']: r#113
[#183 ',']: r#113
[#183 '-']: r#113
[#183 '.']: r#113
[#183 '/']: r#113
[#183 ':']: r#113
[#183 ';']: r#113
[#183 '<']: r#113
[#183 '<<']: r#113
[#183 '<=']: r#113
[#183 '==']: r#113
[#183 '>']: r#113
[#183 '>=']: r#113
[#183 '>>']: r#113
[#183 '[']: r#113
[#183 ']']: r#113
[#183 '^']: r#113
[#183 '{']: r#113
[#183 '|']: r#113
[#183 '||']: r#113
[#184 '!']: s#63
[#184 '&']: s#66
[#184 '(']: s#78
[#184 '*']: s#65
[#184 '-']: s#62
[#184 'array']: s#82
[#184 'atomic']: s#96
[#184 'bitcast']: s#72
[#184 'bool']: s#89
[#184 'f16']: s#91
[#184 'f32']: s#90
[#184 'false']: s#88
[#184 'i32']: s#92
[#184 'mat2x2']: s#101
[#184 'mat2x3']: s#102
[#184 'mat2x4']: s#103
[#184 'mat3x2']: s#104
[#184 'mat3x3']: s#105
[#184 'mat3x4']: s#106
[#184 'mat4x2']: s#107
[#184 'mat4x3']: s#108
[#184 'mat4x4']: s#109
[#184 'ptr']: s#94
[#184 'sampler']: s#126
[#184 'sampler_comparison']: s#127
[#184 'texture_1d']: s#133
[#184 'texture_2d']: s#134
[#184 'texture_2d_array']: s#135
[#184 'texture_3d']: s#136
[#184 'texture_cube']: s#137
[#184 'texture_cube_array']: s#138
[#184 'texture_depth_2d']: s#128
[#184 'texture_depth_2d_array']: s#129
[#184 'texture_depth_cube']: s#130
[#184 'texture_depth_cube_array']: s#131
[#184 'texture_depth_multisampled_2d']: s#132
[#184 'texture_multisampled_2d']: s#139
[#184 'texture_storage_1d']: s#140
[#184 'texture_storage_2d']: s#141
[#184 'texture_storage_2d_array']: s#142
[#184 'texture_storage_3d']: s#143
[#184 'true']: s#87
[#184 'u32']: s#93
[#184 'vec2']: s#98
[#184 'vec3']: s#99
[#184 'vec4']: s#100
[#184 '~']: s#64
[#184 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#184 /0[fh]/]: s#113
[#184 /0[iu]?/]: s#110
[#184 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#184 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#184 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#184 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#184 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#184 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#184 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#184 /[1-9][0-9]*[fh]/]: s#114
[#184 /[1-9][0-9]*[iu]?/]: s#111
[#185 'array']: s#282
[#185 'atomic']: s#96
[#185 'bool']: s#89
[#185 'f16']: s#91
[#185 'f32']: s#90
[#185 'i32']: s#92
[#185 'mat2x2']: s#101
[#185 'mat2x3']: s#102
[#185 'mat2x4']: s#103
[#185 'mat3x2']: s#104
[#185 'mat3x3']: s#105
[#185 'mat3x4']: s#106
[#185 'mat4x2']: s#107
[#185 'mat4x3']: s#108
[#185 'mat4x4']: s#109
[#185 'ptr']: s#94
[#185 'sampler']: s#126
[#185 'sampler_comparison']: s#127
[#185 'texture_1d']: s#133
[#185 'texture_2d']: s#134
[#185 'texture_2d_array']: s#135
[#185 'texture_3d']: s#136
[#185 'texture_cube']: s#137
[#185 'texture_cube_array']: s#138
[#185 'texture_depth_2d']: s#128
[#185 'texture_depth_2d_array']: s#129
[#185 'texture_depth_cube']: s#130
[#185 'texture_depth_cube_array']: s#131
[#185 'texture_depth_multisampled_2d']: s#132
[#185 'texture_multisampled_2d']: s#139
[#185 'texture_storage_1d']: s#140
[#185 'texture_storage_2d']: s#141
[#185 'texture_storage_2d_array']: s#142
[#185 'texture_storage_3d']: s#143
[#185 'u32']: s#93
[#185 'vec2']: s#98
[#185 'vec3']: s#99
[#185 'vec4']: s#100
[#185 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#186 '!=']: r#114
[#186 '%']: r#114
[#186 '&&']: r#114
[#186 '&']: r#114
[#186 ')']: r#114
[#186 '*']: r#114
[#186 '+']: r#114
[#186 ',']: r#114
[#186 '-']: r#114
[#186 '/']: r#114
[#186 ':']: r#114
[#186 ';']: r#114
[#186 '<']: r#114
[#186 '<<']: r#114
[#186 '<=']: r#114
[#186 '==']: r#114
[#186 '>']: r#114
[#186 '>=']: r#114
[#186 '>>']: r#114
[#186 ']']: r#114
[#186 '^']: r#114
[#186 '{']: r#114
[#186 '|']: r#114
[#186 '||']: r#114
[#187 '!=']: r#115
[#187 '%']: r#115
[#187 '&&']: r#115
[#187 '&']: r#115
[#187 ')']: r#115
[#187 '*']: r#115
[#187 '+']: r#115
[#187 ',']: r#115
[#187 '-']: r#115
[#187 '/']: r#115
[#187 ':']: r#115
[#187 ';']: r#115
[#187 '<']: r#115
[#187 '<<']: r#115
[#187 '<=']: r#115
[#187 '==']: r#115
[#187 '>']: r#115
[#187 '>=']: r#115
[#187 '>>']: r#115
[#187 ']']: r#115
[#187 '^']: r#115
[#187 '{']: r#115
[#187 '|']: r#115
[#187 '||']: r#115
[#188 '!']: s#63
[#188 '&']: s#66
[#188 '(']: s#78
[#188 '*']: s#65
[#188 '-']: s#62
[#188 'array']: s#82
[#188 'atomic']: s#96
[#188 'bitcast']: s#72
[#188 'bool']: s#89
[#188 'f16']: s#91
[#188 'f32']: s#90
[#188 'false']: s#88
[#188 'i32']: s#92
[#188 'mat2x2']: s#101
[#188 'mat2x3']: s#102
[#188 'mat2x4']: s#103
[#188 'mat3x2']: s#104
[#188 'mat3x3']: s#105
[#188 'mat3x4']: s#106
[#188 'mat4x2']: s#107
[#188 'mat4x3']: s#108
[#188 'mat4x4']: s#109
[#188 'ptr']: s#94
[#188 'sampler']: s#126
[#188 'sampler_comparison']: s#127
[#188 'texture_1d']: s#133
[#188 'texture_2d']: s#134
[#188 'texture_2d_array']: s#135
[#188 'texture_3d']: s#136
[#188 'texture_cube']: s#137
[#188 'texture_cube_array']: s#138
[#188 'texture_depth_2d']: s#128
[#188 'texture_depth_2d_array']: s#129
[#188 'texture_depth_cube']: s#130
[#188 'texture_depth_cube_array']: s#131
[#188 'texture_depth_multisampled_2d']: s#132
[#188 'texture_multisampled_2d']: s#139
[#188 'texture_storage_1d']: s#140
[#188 'texture_storage_2d']: s#141
[#188 'texture_storage_2d_array']: s#142
[#188 'texture_storage_3d']: s#143
[#188 'true']: s#87
[#188 'u32']: s#93
[#188 'vec2']: s#98
[#188 'vec3']: s#99
[#188 'vec4']: s#100
[#188 '~']: s#64
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#188 /0[fh]/]: s#113
[#188 /0[iu]?/]: s#110
[#188 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#188 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#188 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#188 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#188 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#188 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#188 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#188 /[1-9][0-9]*[fh]/]: s#114
[#188 /[1-9][0-9]*[iu]?/]: s#111
[#189 '/[rgba]/']: s#268
[#189 '/[rgba][rgba]/']: s#269
[#189 '/[rgba][rgba][rgba]/']: s#270
[#189 '/[rgba][rgba][rgba][rgba]/']: s#271
[#189 '/[xyzw]/']: s#272
[#189 '/[xyzw][xyzw]/']: s#273
[#189 '/[xyzw][xyzw][xyzw]/']: s#274
[#189 '/[xyzw][xyzw][xyzw][xyzw]/']: s#275
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#267
[#190 '!=']: r#116
[#190 '%']: r#116
[#190 '&&']: r#116
[#190 '&']: r#116
[#190 ')']: r#116
[#190 '*']: r#116
[#190 '+']: r#116
[#190 ',']: r#116
[#190 '-']: r#116
[#190 '/']: r#116
[#190 ':']: r#116
[#190 ';']: r#116
[#190 '<']: r#116
[#190 '<<']: r#116
[#190 '<=']: r#116
[#190 '==']: r#116
[#190 '>']: r#116
[#190 '>=']: r#116
[#190 '>>']: r#116
[#190 ']']: r#116
[#190 '^']: r#116
[#190 '{']: r#116
[#190 '|']: r#116
[#190 '||']: r#116
[#191 '!=']: r#117
[#191 '%']: r#117
[#191 '&&']: r#117
[#191 '&']: r#117
[#191 ')']: r#117
[#191 '*']: r#117
[#191 '+']: r#117
[#191 ',']: r#117
[#191 '-']: r#117
[#191 '/']: r#117
[#191 ':']: r#117
[#191 ';']: r#117
[#191 '<']: r#117
[#191 '<<']: r#117
[#191 '<=']: r#117
[#191 '==']: r#117
[#191 '>']: r#117
[#191 '>=']: r#117
[#191 '>>']: r#117
[#191 ']']: r#117
[#191 '^']: r#117
[#191 '{']: r#117
[#191 '|']: r#117
[#191 '||']: r#117
[#192 '!=']: r#118
[#192 '%']: r#118
[#192 '&&']: r#118
[#192 '&']: r#118
[#192 ')']: r#118
[#192 '*']: r#118
[#192 '+']: r#118
[#192 ',']: r#118
[#192 '-']: r#118
[#192 '/']: r#118
[#192 ':']: r#118
[#192 ';']: r#118
[#192 '<']: r#118
[#192 '<<']: r#118
[#192 '<=']: r#118
[#192 '==']: r#118
[#192 '>']: r#118
[#192 '>=']: r#118
[#192 '>>']: r#118
[#192 ']']: r#118
[#192 '^']: r#118
[#192 '{']: r#118
[#192 '|']: r#118
[#192 '||']: r#118
[#193 '!=']: r#119
[#193 '%']: r#119
[#193 '&&']: r#119
[#193 '&']: r#119
[#193 ')']: r#119
[#193 '*']: r#119
[#193 '+']: r#119
[#193 ',']: r#119
[#193 '-']: r#119
[#193 '/']: r#119
[#193 ':']: r#119
[#193 ';']: r#119
[#193 '<']: r#119
[#193 '<<']: r#119
[#193 '<=']: r#119
[#193 '==']: r#119
[#193 '>']: r#119
[#193 '>=']: r#119
[#193 '>>']: r#119
[#193 ']']: r#119
[#193 '^']: r#119
[#193 '{']: r#119
[#193 '|']: r#119
[#193 '||']: r#119
[#194 '!=']: r#120
[#194 '%']: r#120
[#194 '&&']: r#120
[#194 '&']: r#120
[#194 ')']: r#120
[#194 '*']: r#120
[#194 '+']: r#120
[#194 ',']: r#120
[#194 '-']: r#120
[#194 '/']: r#120
[#194 ':']: r#120
[#194 ';']: r#120
[#194 '<']: r#120
[#194 '<<']: r#120
[#194 '<=']: r#120
[#194 '==']: r#120
[#194 '>']: r#120
[#194 '>=']: r#120
[#194 '>>']: r#120
[#194 ']']: r#120
[#194 '^']: r#120
[#194 '{']: r#120
[#194 '|']: r#120
[#194 '||']: r#120
[#195 '!']: s#63
[#195 '&']: s#66
[#195 '(']: s#78
[#195 '*']: s#65
[#195 '-']: s#62
[#195 'array']: s#82
[#195 'atomic']: s#96
[#195 'bitcast']: s#72
[#195 'bool']: s#89
[#195 'f16']: s#91
[#195 'f32']: s#90
[#195 'false']: s#88
[#195 'i32']: s#92
[#195 'mat2x2']: s#101
[#195 'mat2x3']: s#102
[#195 'mat2x4']: s#103
[#195 'mat3x2']: s#104
[#195 'mat3x3']: s#105
[#195 'mat3x4']: s#106
[#195 'mat4x2']: s#107
[#195 'mat4x3']: s#108
[#195 'mat4x4']: s#109
[#195 'ptr']: s#94
[#195 'sampler']: s#126
[#195 'sampler_comparison']: s#127
[#195 'texture_1d']: s#133
[#195 'texture_2d']: s#134
[#195 'texture_2d_array']: s#135
[#195 'texture_3d']: s#136
[#195 'texture_cube']: s#137
[#195 'texture_cube_array']: s#138
[#195 'texture_depth_2d']: s#128
[#195 'texture_depth_2d_array']: s#129
[#195 'texture_depth_cube']: s#130
[#195 'texture_depth_cube_array']: s#131
[#195 'texture_depth_multisampled_2d']: s#132
[#195 'texture_multisampled_2d']: s#139
[#195 'texture_storage_1d']: s#140
[#195 'texture_storage_2d']: s#141
[#195 'texture_storage_2d_array']: s#142
[#195 'texture_storage_3d']: s#143
[#195 'true']: s#87
[#195 'u32']: s#93
[#195 'vec2']: s#98
[#195 'vec3']: s#99
[#195 'vec4']: s#100
[#195 '~']: s#64
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#195 /0[fh]/]: s#113
[#195 /0[iu]?/]: s#110
[#195 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#195 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#195 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#195 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#195 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#195 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#195 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#195 /[1-9][0-9]*[fh]/]: s#114
[#195 /[1-9][0-9]*[iu]?/]: s#111
[#196 '!']: r#121
[#196 '&']: r#121
[#196 '(']: r#121
[#196 '*']: r#121
[#196 '-']: r#121
[#196 'bitcast']: r#121
[#196 'false']: r#121
[#196 'true']: r#121
[#196 '~']: r#121
[#196 /0[fh]/]: r#121
[#196 /0[iu]?/]: r#121
[#196 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#121
[#196 /0[xX][0-9a-fA-F]+[iu]?/]: r#121
[#196 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#121
[#196 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#121
[#196 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#121
[#196 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#121
[#196 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#121
[#196 /[1-9][0-9]*[fh]/]: r#121
[#196 /[1-9][0-9]*[iu]?/]: r#121
[#197 '!']: r#122
[#197 '&']: r#122
[#197 '(']: r#122
[#197 '*']: r#122
[#197 '-']: r#122
[#197 'bitcast']: r#122
[#197 'false']: r#122
[#197 'true']: r#122
[#197 '~']: r#122
[#197 /0[fh]/]: r#122
[#197 /0[iu]?/]: r#122
[#197 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#122
[#197 /0[xX][0-9a-fA-F]+[iu]?/]: r#122
[#197 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#122
[#197 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#122
[#197 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#122
[#197 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#122
[#197 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#122
[#197 /[1-9][0-9]*[fh]/]: r#122
[#197 /[1-9][0-9]*[iu]?/]: r#122
[#198 '!']: r#123
[#198 '&']: r#123
[#198 '(']: r#123
[#198 '*']: r#123
[#198 '-']: r#123
[#198 'bitcast']: r#123
[#198 'false']: r#123
[#198 'true']: r#123
[#198 '~']: r#123
[#198 /0[fh]/]: r#123
[#198 /0[iu]?/]: r#123
[#198 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#123
[#198 /0[xX][0-9a-fA-F]+[iu]?/]: r#123
[#198 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#123
[#198 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#123
[#198 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#123
[#198 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#123
[#198 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#123
[#198 /[1-9][0-9]*[fh]/]: r#123
[#198 /[1-9][0-9]*[iu]?/]: r#123
[#199 '!']: s#63
[#199 '&']: s#66
[#199 '(']: s#78
[#199 '*']: s#65
[#199 '-']: s#62
[#199 'array']: s#82
[#199 'atomic']: s#96
[#199 'bitcast']: s#72
[#199 'bool']: s#89
[#199 'f16']: s#91
[#199 'f32']: s#90
[#199 'false']: s#88
[#199 'i32']: s#92
[#199 'mat2x2']: s#101
[#199 'mat2x3']: s#102
[#199 'mat2x4']: s#103
[#199 'mat3x2']: s#104
[#199 'mat3x3']: s#105
[#199 'mat3x4']: s#106
[#199 'mat4x2']: s#107
[#199 'mat4x3']: s#108
[#199 'mat4x4']: s#109
[#199 'ptr']: s#94
[#199 'sampler']: s#126
[#199 'sampler_comparison']: s#127
[#199 'texture_1d']: s#133
[#199 'texture_2d']: s#134
[#199 'texture_2d_array']: s#135
[#199 'texture_3d']: s#136
[#199 'texture_cube']: s#137
[#199 'texture_cube_array']: s#138
[#199 'texture_depth_2d']: s#128
[#199 'texture_depth_2d_array']: s#129
[#199 'texture_depth_cube']: s#130
[#199 'texture_depth_cube_array']: s#131
[#199 'texture_depth_multisampled_2d']: s#132
[#199 'texture_multisampled_2d']: s#139
[#199 'texture_storage_1d']: s#140
[#199 'texture_storage_2d']: s#141
[#199 'texture_storage_2d_array']: s#142
[#199 'texture_storage_3d']: s#143
[#199 'true']: s#87
[#199 'u32']: s#93
[#199 'vec2']: s#98
[#199 'vec3']: s#99
[#199 'vec4']: s#100
[#199 '~']: s#64
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#199 /0[fh]/]: s#113
[#199 /0[iu]?/]: s#110
[#199 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#199 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#199 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#199 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#199 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#199 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#199 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#199 /[1-9][0-9]*[fh]/]: s#114
[#199 /[1-9][0-9]*[iu]?/]: s#111
[#200 '!']: s#63
[#200 '&']: s#66
[#200 '(']: s#78
[#200 '*']: s#65
[#200 '-']: s#62
[#200 'array']: s#82
[#200 'atomic']: s#96
[#200 'bitcast']: s#72
[#200 'bool']: s#89
[#200 'f16']: s#91
[#200 'f32']: s#90
[#200 'false']: s#88
[#200 'i32']: s#92
[#200 'mat2x2']: s#101
[#200 'mat2x3']: s#102
[#200 'mat2x4']: s#103
[#200 'mat3x2']: s#104
[#200 'mat3x3']: s#105
[#200 'mat3x4']: s#106
[#200 'mat4x2']: s#107
[#200 'mat4x3']: s#108
[#200 'mat4x4']: s#109
[#200 'ptr']: s#94
[#200 'sampler']: s#126
[#200 'sampler_comparison']: s#127
[#200 'texture_1d']: s#133
[#200 'texture_2d']: s#134
[#200 'texture_2d_array']: s#135
[#200 'texture_3d']: s#136
[#200 'texture_cube']: s#137
[#200 'texture_cube_array']: s#138
[#200 'texture_depth_2d']: s#128
[#200 'texture_depth_2d_array']: s#129
[#200 'texture_depth_cube']: s#130
[#200 'texture_depth_cube_array']: s#131
[#200 'texture_depth_multisampled_2d']: s#132
[#200 'texture_multisampled_2d']: s#139
[#200 'texture_storage_1d']: s#140
[#200 'texture_storage_2d']: s#141
[#200 'texture_storage_2d_array']: s#142
[#200 'texture_storage_3d']: s#143
[#200 'true']: s#87
[#200 'u32']: s#93
[#200 'vec2']: s#98
[#200 'vec3']: s#99
[#200 'vec4']: s#100
[#200 '~']: s#64
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#200 /0[fh]/]: s#113
[#200 /0[iu]?/]: s#110
[#200 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#200 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#200 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#200 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#200 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#200 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#200 /[1-9][0-9]*[fh]/]: s#114
[#200 /[1-9][0-9]*[iu]?/]: s#111
[#201 '!']: s#63
[#201 '&']: s#66
[#201 '(']: s#78
[#201 '*']: s#65
[#201 '-']: s#62
[#201 'array']: s#82
[#201 'atomic']: s#96
[#201 'bitcast']: s#72
[#201 'bool']: s#89
[#201 'f16']: s#91
[#201 'f32']: s#90
[#201 'false']: s#88
[#201 'i32']: s#92
[#201 'mat2x2']: s#101
[#201 'mat2x3']: s#102
[#201 'mat2x4']: s#103
[#201 'mat3x2']: s#104
[#201 'mat3x3']: s#105
[#201 'mat3x4']: s#106
[#201 'mat4x2']: s#107
[#201 'mat4x3']: s#108
[#201 'mat4x4']: s#109
[#201 'ptr']: s#94
[#201 'sampler']: s#126
[#201 'sampler_comparison']: s#127
[#201 'texture_1d']: s#133
[#201 'texture_2d']: s#134
[#201 'texture_2d_array']: s#135
[#201 'texture_3d']: s#136
[#201 'texture_cube']: s#137
[#201 'texture_cube_array']: s#138
[#201 'texture_depth_2d']: s#128
[#201 'texture_depth_2d_array']: s#129
[#201 'texture_depth_cube']: s#130
[#201 'texture_depth_cube_array']: s#131
[#201 'texture_depth_multisampled_2d']: s#132
[#201 'texture_multisampled_2d']: s#139
[#201 'texture_storage_1d']: s#140
[#201 'texture_storage_2d']: s#141
[#201 'texture_storage_2d_array']: s#142
[#201 'texture_storage_3d']: s#143
[#201 'true']: s#87
[#201 'u32']: s#93
[#201 'vec2']: s#98
[#201 'vec3']: s#99
[#201 'vec4']: s#100
[#201 '~']: s#64
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#201 /0[fh]/]: s#113
[#201 /0[iu]?/]: s#110
[#201 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#201 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#201 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#201 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#201 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#201 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#201 /[1-9][0-9]*[fh]/]: s#114
[#201 /[1-9][0-9]*[iu]?/]: s#111
[#202 '!']: r#124
[#202 '&']: r#124
[#202 '(']: r#124
[#202 '*']: r#124
[#202 '-']: r#124
[#202 'bitcast']: r#124
[#202 'false']: r#124
[#202 'true']: r#124
[#202 '~']: r#124
[#202 /0[fh]/]: r#124
[#202 /0[iu]?/]: r#124
[#202 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#124
[#202 /0[xX][0-9a-fA-F]+[iu]?/]: r#124
[#202 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#124
[#202 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#124
[#202 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#124
[#202 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#124
[#202 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#124
[#202 /[1-9][0-9]*[fh]/]: r#124
[#202 /[1-9][0-9]*[iu]?/]: r#124
[#203 '!']: r#125
[#203 '&']: r#125
[#203 '(']: r#125
[#203 '*']: r#125
[#203 '-']: r#125
[#203 'bitcast']: r#125
[#203 'false']: r#125
[#203 'true']: r#125
[#203 '~']: r#125
[#203 /0[fh]/]: r#125
[#203 /0[iu]?/]: r#125
[#203 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#125
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: r#125
[#203 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#125
[#203 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#125
[#203 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#125
[#203 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#125
[#203 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#125
[#203 /[1-9][0-9]*[fh]/]: r#125
[#203 /[1-9][0-9]*[iu]?/]: r#125
[#204 '!']: s#63
[#204 '&']: s#66
[#204 '(']: s#78
[#204 '*']: s#65
[#204 '-']: s#62
[#204 'array']: s#82
[#204 'atomic']: s#96
[#204 'bitcast']: s#72
[#204 'bool']: s#89
[#204 'f16']: s#91
[#204 'f32']: s#90
[#204 'false']: s#88
[#204 'i32']: s#92
[#204 'mat2x2']: s#101
[#204 'mat2x3']: s#102
[#204 'mat2x4']: s#103
[#204 'mat3x2']: s#104
[#204 'mat3x3']: s#105
[#204 'mat3x4']: s#106
[#204 'mat4x2']: s#107
[#204 'mat4x3']: s#108
[#204 'mat4x4']: s#109
[#204 'ptr']: s#94
[#204 'sampler']: s#126
[#204 'sampler_comparison']: s#127
[#204 'texture_1d']: s#133
[#204 'texture_2d']: s#134
[#204 'texture_2d_array']: s#135
[#204 'texture_3d']: s#136
[#204 'texture_cube']: s#137
[#204 'texture_cube_array']: s#138
[#204 'texture_depth_2d']: s#128
[#204 'texture_depth_2d_array']: s#129
[#204 'texture_depth_cube']: s#130
[#204 'texture_depth_cube_array']: s#131
[#204 'texture_depth_multisampled_2d']: s#132
[#204 'texture_multisampled_2d']: s#139
[#204 'texture_storage_1d']: s#140
[#204 'texture_storage_2d']: s#141
[#204 'texture_storage_2d_array']: s#142
[#204 'texture_storage_3d']: s#143
[#204 'true']: s#87
[#204 'u32']: s#93
[#204 'vec2']: s#98
[#204 'vec3']: s#99
[#204 'vec4']: s#100
[#204 '~']: s#64
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#204 /0[fh]/]: s#113
[#204 /0[iu]?/]: s#110
[#204 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#204 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#204 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#204 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#204 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#204 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#204 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#204 /[1-9][0-9]*[fh]/]: s#114
[#204 /[1-9][0-9]*[iu]?/]: s#111
[#205 '!']: s#63
[#205 '&']: s#66
[#205 '(']: s#78
[#205 '*']: s#65
[#205 '-']: s#62
[#205 'array']: s#82
[#205 'atomic']: s#96
[#205 'bitcast']: s#72
[#205 'bool']: s#89
[#205 'f16']: s#91
[#205 'f32']: s#90
[#205 'false']: s#88
[#205 'i32']: s#92
[#205 'mat2x2']: s#101
[#205 'mat2x3']: s#102
[#205 'mat2x4']: s#103
[#205 'mat3x2']: s#104
[#205 'mat3x3']: s#105
[#205 'mat3x4']: s#106
[#205 'mat4x2']: s#107
[#205 'mat4x3']: s#108
[#205 'mat4x4']: s#109
[#205 'ptr']: s#94
[#205 'sampler']: s#126
[#205 'sampler_comparison']: s#127
[#205 'texture_1d']: s#133
[#205 'texture_2d']: s#134
[#205 'texture_2d_array']: s#135
[#205 'texture_3d']: s#136
[#205 'texture_cube']: s#137
[#205 'texture_cube_array']: s#138
[#205 'texture_depth_2d']: s#128
[#205 'texture_depth_2d_array']: s#129
[#205 'texture_depth_cube']: s#130
[#205 'texture_depth_cube_array']: s#131
[#205 'texture_depth_multisampled_2d']: s#132
[#205 'texture_multisampled_2d']: s#139
[#205 'texture_storage_1d']: s#140
[#205 'texture_storage_2d']: s#141
[#205 'texture_storage_2d_array']: s#142
[#205 'texture_storage_3d']: s#143
[#205 'true']: s#87
[#205 'u32']: s#93
[#205 'vec2']: s#98
[#205 'vec3']: s#99
[#205 'vec4']: s#100
[#205 '~']: s#64
[#205 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#205 /0[fh]/]: s#113
[#205 /0[iu]?/]: s#110
[#205 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#205 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#205 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#205 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#205 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#205 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#205 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#205 /[1-9][0-9]*[fh]/]: s#114
[#205 /[1-9][0-9]*[iu]?/]: s#111
[#206 '!']: s#63
[#206 '&']: s#66
[#206 '(']: s#78
[#206 '*']: s#65
[#206 '-']: s#62
[#206 'array']: s#82
[#206 'atomic']: s#96
[#206 'bitcast']: s#72
[#206 'bool']: s#89
[#206 'f16']: s#91
[#206 'f32']: s#90
[#206 'false']: s#88
[#206 'i32']: s#92
[#206 'mat2x2']: s#101
[#206 'mat2x3']: s#102
[#206 'mat2x4']: s#103
[#206 'mat3x2']: s#104
[#206 'mat3x3']: s#105
[#206 'mat3x4']: s#106
[#206 'mat4x2']: s#107
[#206 'mat4x3']: s#108
[#206 'mat4x4']: s#109
[#206 'ptr']: s#94
[#206 'sampler']: s#126
[#206 'sampler_comparison']: s#127
[#206 'texture_1d']: s#133
[#206 'texture_2d']: s#134
[#206 'texture_2d_array']: s#135
[#206 'texture_3d']: s#136
[#206 'texture_cube']: s#137
[#206 'texture_cube_array']: s#138
[#206 'texture_depth_2d']: s#128
[#206 'texture_depth_2d_array']: s#129
[#206 'texture_depth_cube']: s#130
[#206 'texture_depth_cube_array']: s#131
[#206 'texture_depth_multisampled_2d']: s#132
[#206 'texture_multisampled_2d']: s#139
[#206 'texture_storage_1d']: s#140
[#206 'texture_storage_2d']: s#141
[#206 'texture_storage_2d_array']: s#142
[#206 'texture_storage_3d']: s#143
[#206 'true']: s#87
[#206 'u32']: s#93
[#206 'vec2']: s#98
[#206 'vec3']: s#99
[#206 'vec4']: s#100
[#206 '~']: s#64
[#206 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#206 /0[fh]/]: s#113
[#206 /0[iu]?/]: s#110
[#206 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#206 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#206 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#206 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#206 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#206 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#206 /[1-9][0-9]*[fh]/]: s#114
[#206 /[1-9][0-9]*[iu]?/]: s#111
[#207 '!']: s#63
[#207 '&']: s#66
[#207 '(']: s#78
[#207 '*']: s#65
[#207 '-']: s#62
[#207 'array']: s#82
[#207 'atomic']: s#96
[#207 'bitcast']: s#72
[#207 'bool']: s#89
[#207 'f16']: s#91
[#207 'f32']: s#90
[#207 'false']: s#88
[#207 'i32']: s#92
[#207 'mat2x2']: s#101
[#207 'mat2x3']: s#102
[#207 'mat2x4']: s#103
[#207 'mat3x2']: s#104
[#207 'mat3x3']: s#105
[#207 'mat3x4']: s#106
[#207 'mat4x2']: s#107
[#207 'mat4x3']: s#108
[#207 'mat4x4']: s#109
[#207 'ptr']: s#94
[#207 'sampler']: s#126
[#207 'sampler_comparison']: s#127
[#207 'texture_1d']: s#133
[#207 'texture_2d']: s#134
[#207 'texture_2d_array']: s#135
[#207 'texture_3d']: s#136
[#207 'texture_cube']: s#137
[#207 'texture_cube_array']: s#138
[#207 'texture_depth_2d']: s#128
[#207 'texture_depth_2d_array']: s#129
[#207 'texture_depth_cube']: s#130
[#207 'texture_depth_cube_array']: s#131
[#207 'texture_depth_multisampled_2d']: s#132
[#207 'texture_multisampled_2d']: s#139
[#207 'texture_storage_1d']: s#140
[#207 'texture_storage_2d']: s#141
[#207 'texture_storage_2d_array']: s#142
[#207 'texture_storage_3d']: s#143
[#207 'true']: s#87
[#207 'u32']: s#93
[#207 'vec2']: s#98
[#207 'vec3']: s#99
[#207 'vec4']: s#100
[#207 '~']: s#64
[#207 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#207 /0[fh]/]: s#113
[#207 /0[iu]?/]: s#110
[#207 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#207 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#207 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#207 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#207 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#207 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#207 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#207 /[1-9][0-9]*[fh]/]: s#114
[#207 /[1-9][0-9]*[iu]?/]: s#111
[#208 '!']: s#63
[#208 '&']: s#66
[#208 '(']: s#78
[#208 '*']: s#65
[#208 '-']: s#62
[#208 'array']: s#82
[#208 'atomic']: s#96
[#208 'bitcast']: s#72
[#208 'bool']: s#89
[#208 'f16']: s#91
[#208 'f32']: s#90
[#208 'false']: s#88
[#208 'i32']: s#92
[#208 'mat2x2']: s#101
[#208 'mat2x3']: s#102
[#208 'mat2x4']: s#103
[#208 'mat3x2']: s#104
[#208 'mat3x3']: s#105
[#208 'mat3x4']: s#106
[#208 'mat4x2']: s#107
[#208 'mat4x3']: s#108
[#208 'mat4x4']: s#109
[#208 'ptr']: s#94
[#208 'sampler']: s#126
[#208 'sampler_comparison']: s#127
[#208 'texture_1d']: s#133
[#208 'texture_2d']: s#134
[#208 'texture_2d_array']: s#135
[#208 'texture_3d']: s#136
[#208 'texture_cube']: s#137
[#208 'texture_cube_array']: s#138
[#208 'texture_depth_2d']: s#128
[#208 'texture_depth_2d_array']: s#129
[#208 'texture_depth_cube']: s#130
[#208 'texture_depth_cube_array']: s#131
[#208 'texture_depth_multisampled_2d']: s#132
[#208 'texture_multisampled_2d']: s#139
[#208 'texture_storage_1d']: s#140
[#208 'texture_storage_2d']: s#141
[#208 'texture_storage_2d_array']: s#142
[#208 'texture_storage_3d']: s#143
[#208 'true']: s#87
[#208 'u32']: s#93
[#208 'vec2']: s#98
[#208 'vec3']: s#99
[#208 'vec4']: s#100
[#208 '~']: s#64
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#208 /0[fh]/]: s#113
[#208 /0[iu]?/]: s#110
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#208 /[1-9][0-9]*[fh]/]: s#114
[#208 /[1-9][0-9]*[iu]?/]: s#111
[#209 '!']: s#63
[#209 '&']: s#66
[#209 '(']: s#78
[#209 '*']: s#65
[#209 '-']: s#62
[#209 'array']: s#82
[#209 'atomic']: s#96
[#209 'bitcast']: s#72
[#209 'bool']: s#89
[#209 'f16']: s#91
[#209 'f32']: s#90
[#209 'false']: s#88
[#209 'i32']: s#92
[#209 'mat2x2']: s#101
[#209 'mat2x3']: s#102
[#209 'mat2x4']: s#103
[#209 'mat3x2']: s#104
[#209 'mat3x3']: s#105
[#209 'mat3x4']: s#106
[#209 'mat4x2']: s#107
[#209 'mat4x3']: s#108
[#209 'mat4x4']: s#109
[#209 'ptr']: s#94
[#209 'sampler']: s#126
[#209 'sampler_comparison']: s#127
[#209 'texture_1d']: s#133
[#209 'texture_2d']: s#134
[#209 'texture_2d_array']: s#135
[#209 'texture_3d']: s#136
[#209 'texture_cube']: s#137
[#209 'texture_cube_array']: s#138
[#209 'texture_depth_2d']: s#128
[#209 'texture_depth_2d_array']: s#129
[#209 'texture_depth_cube']: s#130
[#209 'texture_depth_cube_array']: s#131
[#209 'texture_depth_multisampled_2d']: s#132
[#209 'texture_multisampled_2d']: s#139
[#209 'texture_storage_1d']: s#140
[#209 'texture_storage_2d']: s#141
[#209 'texture_storage_2d_array']: s#142
[#209 'texture_storage_3d']: s#143
[#209 'true']: s#87
[#209 'u32']: s#93
[#209 'vec2']: s#98
[#209 'vec3']: s#99
[#209 'vec4']: s#100
[#209 '~']: s#64
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#209 /0[fh]/]: s#113
[#209 /0[iu]?/]: s#110
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#209 /[1-9][0-9]*[fh]/]: s#114
[#209 /[1-9][0-9]*[iu]?/]: s#111
[#210 '!']: s#63
[#210 '&']: s#66
[#210 '(']: s#78
[#210 '*']: s#65
[#210 '-']: s#62
[#210 'array']: s#82
[#210 'atomic']: s#96
[#210 'bitcast']: s#72
[#210 'bool']: s#89
[#210 'f16']: s#91
[#210 'f32']: s#90
[#210 'false']: s#88
[#210 'i32']: s#92
[#210 'mat2x2']: s#101
[#210 'mat2x3']: s#102
[#210 'mat2x4']: s#103
[#210 'mat3x2']: s#104
[#210 'mat3x3']: s#105
[#210 'mat3x4']: s#106
[#210 'mat4x2']: s#107
[#210 'mat4x3']: s#108
[#210 'mat4x4']: s#109
[#210 'ptr']: s#94
[#210 'sampler']: s#126
[#210 'sampler_comparison']: s#127
[#210 'texture_1d']: s#133
[#210 'texture_2d']: s#134
[#210 'texture_2d_array']: s#135
[#210 'texture_3d']: s#136
[#210 'texture_cube']: s#137
[#210 'texture_cube_array']: s#138
[#210 'texture_depth_2d']: s#128
[#210 'texture_depth_2d_array']: s#129
[#210 'texture_depth_cube']: s#130
[#210 'texture_depth_cube_array']: s#131
[#210 'texture_depth_multisampled_2d']: s#132
[#210 'texture_multisampled_2d']: s#139
[#210 'texture_storage_1d']: s#140
[#210 'texture_storage_2d']: s#141
[#210 'texture_storage_2d_array']: s#142
[#210 'texture_storage_3d']: s#143
[#210 'true']: s#87
[#210 'u32']: s#93
[#210 'vec2']: s#98
[#210 'vec3']: s#99
[#210 'vec4']: s#100
[#210 '~']: s#64
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#210 /0[fh]/]: s#113
[#210 /0[iu]?/]: s#110
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#210 /[1-9][0-9]*[fh]/]: s#114
[#210 /[1-9][0-9]*[iu]?/]: s#111
[#211 '!']: s#63
[#211 '&']: s#66
[#211 '(']: s#78
[#211 '*']: s#65
[#211 '-']: s#62
[#211 'array']: s#82
[#211 'atomic']: s#96
[#211 'bitcast']: s#72
[#211 'bool']: s#89
[#211 'f16']: s#91
[#211 'f32']: s#90
[#211 'false']: s#88
[#211 'i32']: s#92
[#211 'mat2x2']: s#101
[#211 'mat2x3']: s#102
[#211 'mat2x4']: s#103
[#211 'mat3x2']: s#104
[#211 'mat3x3']: s#105
[#211 'mat3x4']: s#106
[#211 'mat4x2']: s#107
[#211 'mat4x3']: s#108
[#211 'mat4x4']: s#109
[#211 'ptr']: s#94
[#211 'sampler']: s#126
[#211 'sampler_comparison']: s#127
[#211 'texture_1d']: s#133
[#211 'texture_2d']: s#134
[#211 'texture_2d_array']: s#135
[#211 'texture_3d']: s#136
[#211 'texture_cube']: s#137
[#211 'texture_cube_array']: s#138
[#211 'texture_depth_2d']: s#128
[#211 'texture_depth_2d_array']: s#129
[#211 'texture_depth_cube']: s#130
[#211 'texture_depth_cube_array']: s#131
[#211 'texture_depth_multisampled_2d']: s#132
[#211 'texture_multisampled_2d']: s#139
[#211 'texture_storage_1d']: s#140
[#211 'texture_storage_2d']: s#141
[#211 'texture_storage_2d_array']: s#142
[#211 'texture_storage_3d']: s#143
[#211 'true']: s#87
[#211 'u32']: s#93
[#211 'vec2']: s#98
[#211 'vec3']: s#99
[#211 'vec4']: s#100
[#211 '~']: s#64
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#211 /0[fh]/]: s#113
[#211 /0[iu]?/]: s#110
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#211 /[1-9][0-9]*[fh]/]: s#114
[#211 /[1-9][0-9]*[iu]?/]: s#111
[#212 '!']: s#63
[#212 '&']: s#66
[#212 '(']: s#78
[#212 '*']: s#65
[#212 '-']: s#62
[#212 'array']: s#82
[#212 'atomic']: s#96
[#212 'bitcast']: s#72
[#212 'bool']: s#89
[#212 'f16']: s#91
[#212 'f32']: s#90
[#212 'false']: s#88
[#212 'i32']: s#92
[#212 'mat2x2']: s#101
[#212 'mat2x3']: s#102
[#212 'mat2x4']: s#103
[#212 'mat3x2']: s#104
[#212 'mat3x3']: s#105
[#212 'mat3x4']: s#106
[#212 'mat4x2']: s#107
[#212 'mat4x3']: s#108
[#212 'mat4x4']: s#109
[#212 'ptr']: s#94
[#212 'sampler']: s#126
[#212 'sampler_comparison']: s#127
[#212 'texture_1d']: s#133
[#212 'texture_2d']: s#134
[#212 'texture_2d_array']: s#135
[#212 'texture_3d']: s#136
[#212 'texture_cube']: s#137
[#212 'texture_cube_array']: s#138
[#212 'texture_depth_2d']: s#128
[#212 'texture_depth_2d_array']: s#129
[#212 'texture_depth_cube']: s#130
[#212 'texture_depth_cube_array']: s#131
[#212 'texture_depth_multisampled_2d']: s#132
[#212 'texture_multisampled_2d']: s#139
[#212 'texture_storage_1d']: s#140
[#212 'texture_storage_2d']: s#141
[#212 'texture_storage_2d_array']: s#142
[#212 'texture_storage_3d']: s#143
[#212 'true']: s#87
[#212 'u32']: s#93
[#212 'vec2']: s#98
[#212 'vec3']: s#99
[#212 'vec4']: s#100
[#212 '~']: s#64
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#212 /0[fh]/]: s#113
[#212 /0[iu]?/]: s#110
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#212 /[1-9][0-9]*[fh]/]: s#114
[#212 /[1-9][0-9]*[iu]?/]: s#111
[#213 '!']: s#63
[#213 '&']: s#66
[#213 '(']: s#78
[#213 '*']: s#65
[#213 '-']: s#62
[#213 'array']: s#82
[#213 'atomic']: s#96
[#213 'bitcast']: s#72
[#213 'bool']: s#89
[#213 'f16']: s#91
[#213 'f32']: s#90
[#213 'false']: s#88
[#213 'i32']: s#92
[#213 'mat2x2']: s#101
[#213 'mat2x3']: s#102
[#213 'mat2x4']: s#103
[#213 'mat3x2']: s#104
[#213 'mat3x3']: s#105
[#213 'mat3x4']: s#106
[#213 'mat4x2']: s#107
[#213 'mat4x3']: s#108
[#213 'mat4x4']: s#109
[#213 'ptr']: s#94
[#213 'sampler']: s#126
[#213 'sampler_comparison']: s#127
[#213 'texture_1d']: s#133
[#213 'texture_2d']: s#134
[#213 'texture_2d_array']: s#135
[#213 'texture_3d']: s#136
[#213 'texture_cube']: s#137
[#213 'texture_cube_array']: s#138
[#213 'texture_depth_2d']: s#128
[#213 'texture_depth_2d_array']: s#129
[#213 'texture_depth_cube']: s#130
[#213 'texture_depth_cube_array']: s#131
[#213 'texture_depth_multisampled_2d']: s#132
[#213 'texture_multisampled_2d']: s#139
[#213 'texture_storage_1d']: s#140
[#213 'texture_storage_2d']: s#141
[#213 'texture_storage_2d_array']: s#142
[#213 'texture_storage_3d']: s#143
[#213 'true']: s#87
[#213 'u32']: s#93
[#213 'vec2']: s#98
[#213 'vec3']: s#99
[#213 'vec4']: s#100
[#213 '~']: s#64
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#213 /0[fh]/]: s#113
[#213 /0[iu]?/]: s#110
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#213 /[1-9][0-9]*[fh]/]: s#114
[#213 /[1-9][0-9]*[iu]?/]: s#111
[#214 '!']: s#63
[#214 '&']: s#66
[#214 '(']: s#78
[#214 '*']: s#65
[#214 '-']: s#62
[#214 'array']: s#82
[#214 'atomic']: s#96
[#214 'bitcast']: s#72
[#214 'bool']: s#89
[#214 'f16']: s#91
[#214 'f32']: s#90
[#214 'false']: s#88
[#214 'i32']: s#92
[#214 'mat2x2']: s#101
[#214 'mat2x3']: s#102
[#214 'mat2x4']: s#103
[#214 'mat3x2']: s#104
[#214 'mat3x3']: s#105
[#214 'mat3x4']: s#106
[#214 'mat4x2']: s#107
[#214 'mat4x3']: s#108
[#214 'mat4x4']: s#109
[#214 'ptr']: s#94
[#214 'sampler']: s#126
[#214 'sampler_comparison']: s#127
[#214 'texture_1d']: s#133
[#214 'texture_2d']: s#134
[#214 'texture_2d_array']: s#135
[#214 'texture_3d']: s#136
[#214 'texture_cube']: s#137
[#214 'texture_cube_array']: s#138
[#214 'texture_depth_2d']: s#128
[#214 'texture_depth_2d_array']: s#129
[#214 'texture_depth_cube']: s#130
[#214 'texture_depth_cube_array']: s#131
[#214 'texture_depth_multisampled_2d']: s#132
[#214 'texture_multisampled_2d']: s#139
[#214 'texture_storage_1d']: s#140
[#214 'texture_storage_2d']: s#141
[#214 'texture_storage_2d_array']: s#142
[#214 'texture_storage_3d']: s#143
[#214 'true']: s#87
[#214 'u32']: s#93
[#214 'vec2']: s#98
[#214 'vec3']: s#99
[#214 'vec4']: s#100
[#214 '~']: s#64
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#214 /0[fh]/]: s#113
[#214 /0[iu]?/]: s#110
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#214 /[1-9][0-9]*[fh]/]: s#114
[#214 /[1-9][0-9]*[iu]?/]: s#111
[#215 '!']: s#63
[#215 '&']: s#66
[#215 '(']: s#78
[#215 '*']: s#65
[#215 '-']: s#62
[#215 'array']: s#82
[#215 'atomic']: s#96
[#215 'bitcast']: s#72
[#215 'bool']: s#89
[#215 'f16']: s#91
[#215 'f32']: s#90
[#215 'false']: s#88
[#215 'i32']: s#92
[#215 'mat2x2']: s#101
[#215 'mat2x3']: s#102
[#215 'mat2x4']: s#103
[#215 'mat3x2']: s#104
[#215 'mat3x3']: s#105
[#215 'mat3x4']: s#106
[#215 'mat4x2']: s#107
[#215 'mat4x3']: s#108
[#215 'mat4x4']: s#109
[#215 'ptr']: s#94
[#215 'sampler']: s#126
[#215 'sampler_comparison']: s#127
[#215 'texture_1d']: s#133
[#215 'texture_2d']: s#134
[#215 'texture_2d_array']: s#135
[#215 'texture_3d']: s#136
[#215 'texture_cube']: s#137
[#215 'texture_cube_array']: s#138
[#215 'texture_depth_2d']: s#128
[#215 'texture_depth_2d_array']: s#129
[#215 'texture_depth_cube']: s#130
[#215 'texture_depth_cube_array']: s#131
[#215 'texture_depth_multisampled_2d']: s#132
[#215 'texture_multisampled_2d']: s#139
[#215 'texture_storage_1d']: s#140
[#215 'texture_storage_2d']: s#141
[#215 'texture_storage_2d_array']: s#142
[#215 'texture_storage_3d']: s#143
[#215 'true']: s#87
[#215 'u32']: s#93
[#215 'vec2']: s#98
[#215 'vec3']: s#99
[#215 'vec4']: s#100
[#215 '~']: s#64
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#215 /0[fh]/]: s#113
[#215 /0[iu]?/]: s#110
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#215 /[1-9][0-9]*[fh]/]: s#114
[#215 /[1-9][0-9]*[iu]?/]: s#111
[#216 '!']: s#63
[#216 '&']: s#66
[#216 '(']: s#78
[#216 '*']: s#65
[#216 '-']: s#62
[#216 'array']: s#82
[#216 'atomic']: s#96
[#216 'bitcast']: s#72
[#216 'bool']: s#89
[#216 'f16']: s#91
[#216 'f32']: s#90
[#216 'false']: s#88
[#216 'i32']: s#92
[#216 'mat2x2']: s#101
[#216 'mat2x3']: s#102
[#216 'mat2x4']: s#103
[#216 'mat3x2']: s#104
[#216 'mat3x3']: s#105
[#216 'mat3x4']: s#106
[#216 'mat4x2']: s#107
[#216 'mat4x3']: s#108
[#216 'mat4x4']: s#109
[#216 'ptr']: s#94
[#216 'sampler']: s#126
[#216 'sampler_comparison']: s#127
[#216 'texture_1d']: s#133
[#216 'texture_2d']: s#134
[#216 'texture_2d_array']: s#135
[#216 'texture_3d']: s#136
[#216 'texture_cube']: s#137
[#216 'texture_cube_array']: s#138
[#216 'texture_depth_2d']: s#128
[#216 'texture_depth_2d_array']: s#129
[#216 'texture_depth_cube']: s#130
[#216 'texture_depth_cube_array']: s#131
[#216 'texture_depth_multisampled_2d']: s#132
[#216 'texture_multisampled_2d']: s#139
[#216 'texture_storage_1d']: s#140
[#216 'texture_storage_2d']: s#141
[#216 'texture_storage_2d_array']: s#142
[#216 'texture_storage_3d']: s#143
[#216 'true']: s#87
[#216 'u32']: s#93
[#216 'vec2']: s#98
[#216 'vec3']: s#99
[#216 'vec4']: s#100
[#216 '~']: s#64
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#216 /0[fh]/]: s#113
[#216 /0[iu]?/]: s#110
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#216 /[1-9][0-9]*[fh]/]: s#114
[#216 /[1-9][0-9]*[iu]?/]: s#111
[#217 '!']: s#63
[#217 '&']: s#66
[#217 '(']: s#78
[#217 '*']: s#65
[#217 '-']: s#62
[#217 'array']: s#82
[#217 'atomic']: s#96
[#217 'bitcast']: s#72
[#217 'bool']: s#89
[#217 'f16']: s#91
[#217 'f32']: s#90
[#217 'false']: s#88
[#217 'i32']: s#92
[#217 'mat2x2']: s#101
[#217 'mat2x3']: s#102
[#217 'mat2x4']: s#103
[#217 'mat3x2']: s#104
[#217 'mat3x3']: s#105
[#217 'mat3x4']: s#106
[#217 'mat4x2']: s#107
[#217 'mat4x3']: s#108
[#217 'mat4x4']: s#109
[#217 'ptr']: s#94
[#217 'sampler']: s#126
[#217 'sampler_comparison']: s#127
[#217 'texture_1d']: s#133
[#217 'texture_2d']: s#134
[#217 'texture_2d_array']: s#135
[#217 'texture_3d']: s#136
[#217 'texture_cube']: s#137
[#217 'texture_cube_array']: s#138
[#217 'texture_depth_2d']: s#128
[#217 'texture_depth_2d_array']: s#129
[#217 'texture_depth_cube']: s#130
[#217 'texture_depth_cube_array']: s#131
[#217 'texture_depth_multisampled_2d']: s#132
[#217 'texture_multisampled_2d']: s#139
[#217 'texture_storage_1d']: s#140
[#217 'texture_storage_2d']: s#141
[#217 'texture_storage_2d_array']: s#142
[#217 'texture_storage_3d']: s#143
[#217 'true']: s#87
[#217 'u32']: s#93
[#217 'vec2']: s#98
[#217 'vec3']: s#99
[#217 'vec4']: s#100
[#217 '~']: s#64
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#217 /0[fh]/]: s#113
[#217 /0[iu]?/]: s#110
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#217 /[1-9][0-9]*[fh]/]: s#114
[#217 /[1-9][0-9]*[iu]?/]: s#111
[#218 'flat']: s#244
[#218 'linear']: s#243
[#218 'perspective']: s#242
[#219 '!']: s#63
[#219 '&']: s#66
[#219 '(']: s#78
[#219 '*']: s#65
[#219 '-']: s#62
[#219 'array']: s#82
[#219 'atomic']: s#96
[#219 'bitcast']: s#72
[#219 'bool']: s#89
[#219 'f16']: s#91
[#219 'f32']: s#90
[#219 'false']: s#88
[#219 'i32']: s#92
[#219 'mat2x2']: s#101
[#219 'mat2x3']: s#102
[#219 'mat2x4']: s#103
[#219 'mat3x2']: s#104
[#219 'mat3x3']: s#105
[#219 'mat3x4']: s#106
[#219 'mat4x2']: s#107
[#219 'mat4x3']: s#108
[#219 'mat4x4']: s#109
[#219 'ptr']: s#94
[#219 'sampler']: s#126
[#219 'sampler_comparison']: s#127
[#219 'texture_1d']: s#133
[#219 'texture_2d']: s#134
[#219 'texture_2d_array']: s#135
[#219 'texture_3d']: s#136
[#219 'texture_cube']: s#137
[#219 'texture_cube_array']: s#138
[#219 'texture_depth_2d']: s#128
[#219 'texture_depth_2d_array']: s#129
[#219 'texture_depth_cube']: s#130
[#219 'texture_depth_cube_array']: s#131
[#219 'texture_depth_multisampled_2d']: s#132
[#219 'texture_multisampled_2d']: s#139
[#219 'texture_storage_1d']: s#140
[#219 'texture_storage_2d']: s#141
[#219 'texture_storage_2d_array']: s#142
[#219 'texture_storage_3d']: s#143
[#219 'true']: s#87
[#219 'u32']: s#93
[#219 'vec2']: s#98
[#219 'vec3']: s#99
[#219 'vec4']: s#100
[#219 '~']: s#64
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#219 /0[fh]/]: s#113
[#219 /0[iu]?/]: s#110
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#219 /[1-9][0-9]*[fh]/]: s#114
[#219 /[1-9][0-9]*[iu]?/]: s#111
[#220 '!']: s#63
[#220 '&']: s#66
[#220 '(']: s#78
[#220 '*']: s#65
[#220 '-']: s#62
[#220 'array']: s#82
[#220 'atomic']: s#96
[#220 'bitcast']: s#72
[#220 'bool']: s#89
[#220 'f16']: s#91
[#220 'f32']: s#90
[#220 'false']: s#88
[#220 'i32']: s#92
[#220 'mat2x2']: s#101
[#220 'mat2x3']: s#102
[#220 'mat2x4']: s#103
[#220 'mat3x2']: s#104
[#220 'mat3x3']: s#105
[#220 'mat3x4']: s#106
[#220 'mat4x2']: s#107
[#220 'mat4x3']: s#108
[#220 'mat4x4']: s#109
[#220 'ptr']: s#94
[#220 'sampler']: s#126
[#220 'sampler_comparison']: s#127
[#220 'texture_1d']: s#133
[#220 'texture_2d']: s#134
[#220 'texture_2d_array']: s#135
[#220 'texture_3d']: s#136
[#220 'texture_cube']: s#137
[#220 'texture_cube_array']: s#138
[#220 'texture_depth_2d']: s#128
[#220 'texture_depth_2d_array']: s#129
[#220 'texture_depth_cube']: s#130
[#220 'texture_depth_cube_array']: s#131
[#220 'texture_depth_multisampled_2d']: s#132
[#220 'texture_multisampled_2d']: s#139
[#220 'texture_storage_1d']: s#140
[#220 'texture_storage_2d']: s#141
[#220 'texture_storage_2d_array']: s#142
[#220 'texture_storage_3d']: s#143
[#220 'true']: s#87
[#220 'u32']: s#93
[#220 'vec2']: s#98
[#220 'vec3']: s#99
[#220 'vec4']: s#100
[#220 '~']: s#64
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#220 /0[fh]/]: s#113
[#220 /0[iu]?/]: s#110
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#220 /[1-9][0-9]*[fh]/]: s#114
[#220 /[1-9][0-9]*[iu]?/]: s#111
[#221 'frag_depth']: s#231
[#221 'front_facing']: s#230
[#221 'global_invocation_id']: s#234
[#221 'instance_index']: s#228
[#221 'local_invocation_id']: s#232
[#221 'local_invocation_index']: s#233
[#221 'num_workgroups']: s#236
[#221 'position']: s#229
[#221 'sample_index']: s#237
[#221 'sample_mask']: s#238
[#221 'vertex_index']: s#227
[#221 'workgroup_id']: s#235
[#222 '!']: s#63
[#222 '&']: s#66
[#222 '(']: s#78
[#222 '*']: s#65
[#222 '-']: s#62
[#222 'array']: s#82
[#222 'atomic']: s#96
[#222 'bitcast']: s#72
[#222 'bool']: s#89
[#222 'f16']: s#91
[#222 'f32']: s#90
[#222 'false']: s#88
[#222 'i32']: s#92
[#222 'mat2x2']: s#101
[#222 'mat2x3']: s#102
[#222 'mat2x4']: s#103
[#222 'mat3x2']: s#104
[#222 'mat3x3']: s#105
[#222 'mat3x4']: s#106
[#222 'mat4x2']: s#107
[#222 'mat4x3']: s#108
[#222 'mat4x4']: s#109
[#222 'ptr']: s#94
[#222 'sampler']: s#126
[#222 'sampler_comparison']: s#127
[#222 'texture_1d']: s#133
[#222 'texture_2d']: s#134
[#222 'texture_2d_array']: s#135
[#222 'texture_3d']: s#136
[#222 'texture_cube']: s#137
[#222 'texture_cube_array']: s#138
[#222 'texture_depth_2d']: s#128
[#222 'texture_depth_2d_array']: s#129
[#222 'texture_depth_cube']: s#130
[#222 'texture_depth_cube_array']: s#131
[#222 'texture_depth_multisampled_2d']: s#132
[#222 'texture_multisampled_2d']: s#139
[#222 'texture_storage_1d']: s#140
[#222 'texture_storage_2d']: s#141
[#222 'texture_storage_2d_array']: s#142
[#222 'texture_storage_3d']: s#143
[#222 'true']: s#87
[#222 'u32']: s#93
[#222 'vec2']: s#98
[#222 'vec3']: s#99
[#222 'vec4']: s#100
[#222 '~']: s#64
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#222 /0[fh]/]: s#113
[#222 /0[iu]?/]: s#110
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#222 /[1-9][0-9]*[fh]/]: s#114
[#222 /[1-9][0-9]*[iu]?/]: s#111
[#223 '!']: s#63
[#223 '&']: s#66
[#223 '(']: s#78
[#223 '*']: s#65
[#223 '-']: s#62
[#223 'array']: s#82
[#223 'atomic']: s#96
[#223 'bitcast']: s#72
[#223 'bool']: s#89
[#223 'f16']: s#91
[#223 'f32']: s#90
[#223 'false']: s#88
[#223 'i32']: s#92
[#223 'mat2x2']: s#101
[#223 'mat2x3']: s#102
[#223 'mat2x4']: s#103
[#223 'mat3x2']: s#104
[#223 'mat3x3']: s#105
[#223 'mat3x4']: s#106
[#223 'mat4x2']: s#107
[#223 'mat4x3']: s#108
[#223 'mat4x4']: s#109
[#223 'ptr']: s#94
[#223 'sampler']: s#126
[#223 'sampler_comparison']: s#127
[#223 'texture_1d']: s#133
[#223 'texture_2d']: s#134
[#223 'texture_2d_array']: s#135
[#223 'texture_3d']: s#136
[#223 'texture_cube']: s#137
[#223 'texture_cube_array']: s#138
[#223 'texture_depth_2d']: s#128
[#223 'texture_depth_2d_array']: s#129
[#223 'texture_depth_cube']: s#130
[#223 'texture_depth_cube_array']: s#131
[#223 'texture_depth_multisampled_2d']: s#132
[#223 'texture_multisampled_2d']: s#139
[#223 'texture_storage_1d']: s#140
[#223 'texture_storage_2d']: s#141
[#223 'texture_storage_2d_array']: s#142
[#223 'texture_storage_3d']: s#143
[#223 'true']: s#87
[#223 'u32']: s#93
[#223 'vec2']: s#98
[#223 'vec3']: s#99
[#223 'vec4']: s#100
[#223 '~']: s#64
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#223 /0[fh]/]: s#113
[#223 /0[iu]?/]: s#110
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#223 /[1-9][0-9]*[fh]/]: s#114
[#223 /[1-9][0-9]*[iu]?/]: s#111
[#224 ',']: s#457
[#225 ',']: s#457
[#226 ',']: s#457
[#227 ')']: r#126
[#227 ',']: r#126
[#228 ')']: r#127
[#228 ',']: r#127
[#229 ')']: r#128
[#229 ',']: r#128
[#230 ')']: r#129
[#230 ',']: r#129
[#231 ')']: r#130
[#231 ',']: r#130
[#232 ')']: r#131
[#232 ',']: r#131
[#233 ')']: r#132
[#233 ',']: r#132
[#234 ')']: r#133
[#234 ',']: r#133
[#235 ')']: r#134
[#235 ',']: r#134
[#236 ')']: r#135
[#236 ',']: r#135
[#237 ')']: r#136
[#237 ',']: r#136
[#238 ')']: r#137
[#238 ',']: r#137
[#239 ',']: s#457
[#240 ',']: s#457
[#241 ',']: s#460
[#242 ')']: r#138
[#242 ',']: r#138
[#243 ')']: r#139
[#243 ',']: r#139
[#244 ')']: r#140
[#244 ',']: r#140
[#245 ',']: s#457
[#246 ',']: s#457
[#247 ',']: s#454
[#248 ')']: r#141
[#248 ',']: r#141
[#248 ':']: r#141
[#248 ';']: r#141
[#248 ']']: r#141
[#248 '{']: r#141
[#248 '||']: r#142
[#249 '!=']: r#30
[#249 '%']: r#30
[#249 '&&']: r#30
[#249 ')']: r#30
[#249 '*']: r#30
[#249 '+']: r#30
[#249 ',']: r#30
[#249 '-']: r#30
[#249 '/']: r#30
[#249 ':']: r#30
[#249 ';']: r#30
[#249 '<']: r#30
[#249 '<<']: s#199
[#249 '<=']: r#30
[#249 '==']: r#30
[#249 '>']: r#30
[#249 '>=']: r#30
[#249 '>>']: s#200
[#249 ']']: r#30
[#249 '{']: r#30
[#249 '||']: r#30
[#250 '&&']: r#144
[#250 ')']: r#143
[#250 ',']: r#143
[#250 ':']: r#143
[#250 ';']: r#143
[#250 ']']: r#143
[#250 '{']: r#143
[#251 '&&']: r#145
[#251 ')']: r#145
[#251 ',']: r#145
[#251 ':']: r#145
[#251 ';']: r#145
[#251 ']']: r#145
[#251 '{']: r#145
[#251 '||']: r#145
[#252 '&&']: r#146
[#252 ')']: r#146
[#252 ',']: r#146
[#252 ':']: r#146
[#252 ';']: r#146
[#252 ']']: r#146
[#252 '{']: r#146
[#252 '||']: r#146
[#253 '&&']: r#147
[#253 ')']: r#147
[#253 ',']: r#147
[#253 ':']: r#147
[#253 ';']: r#147
[#253 ']']: r#147
[#253 '{']: r#147
[#253 '||']: r#147
[#254 '&&']: r#148
[#254 ')']: r#148
[#254 ',']: r#148
[#254 ':']: r#148
[#254 ';']: r#148
[#254 ']']: r#148
[#254 '{']: r#148
[#254 '||']: r#148
[#255 '&&']: r#149
[#255 ')']: r#149
[#255 ',']: r#149
[#255 ':']: r#149
[#255 ';']: r#149
[#255 ']']: r#149
[#255 '{']: r#149
[#255 '||']: r#149
[#256 '&&']: r#150
[#256 ')']: r#150
[#256 ',']: r#150
[#256 ':']: r#150
[#256 ';']: r#150
[#256 ']']: r#150
[#256 '{']: r#150
[#256 '||']: r#150
[#257 '&']: r#152
[#257 ')']: r#151
[#257 ',']: r#151
[#257 ':']: r#151
[#257 ';']: r#151
[#257 '>']: r#151
[#257 ']']: r#151
[#257 '{']: r#151
[#258 ')']: r#153
[#258 ',']: r#153
[#258 ':']: r#153
[#258 ';']: r#153
[#258 '>']: r#153
[#258 ']']: r#153
[#258 '{']: r#153
[#258 '|']: r#154
[#259 ')']: r#155
[#259 ',']: r#155
[#259 ':']: r#155
[#259 ';']: r#155
[#259 '>']: r#155
[#259 ']']: r#155
[#259 '^']: r#156
[#259 '{']: r#155
[#260 '!=']: r#157
[#260 '%']: s#198
[#260 '&&']: r#157
[#260 ')']: r#157
[#260 '*']: s#196
[#260 '+']: r#157
[#260 ',']: r#157
[#260 '-']: r#157
[#260 '/']: s#197
[#260 ':']: r#157
[#260 ';']: r#157
[#260 '<']: r#157
[#260 '<=']: r#157
[#260 '==']: r#157
[#260 '>']: r#157
[#260 '>=']: r#157
[#260 ']']: r#157
[#260 '{']: r#157
[#260 '||']: r#157
[#261 '!=']: r#30
[#261 '%']: r#30
[#261 '&&']: r#30
[#261 ')']: r#30
[#261 '*']: r#30
[#261 '+']: r#30
[#261 ',']: r#30
[#261 '-']: r#30
[#261 '/']: r#30
[#261 ':']: r#30
[#261 ';']: r#30
[#261 '<']: r#30
[#261 '<=']: r#30
[#261 '==']: r#30
[#261 '>']: r#30
[#261 '>=']: r#30
[#261 ']']: r#30
[#261 '{']: r#30
[#261 '||']: r#30
[#262 '!=']: r#158
[#262 '&&']: r#158
[#262 ')']: r#158
[#262 ',']: r#158
[#262 ':']: r#158
[#262 ';']: r#158
[#262 '<']: r#158
[#262 '<=']: r#158
[#262 '==']: r#158
[#262 '>']: r#158
[#262 '>=']: r#158
[#262 ']']: r#158
[#262 '{']: r#158
[#262 '||']: r#158
[#263 '!=']: r#159
[#263 '&&']: r#159
[#263 ')']: r#159
[#263 ',']: r#159
[#263 ':']: r#159
[#263 ';']: r#159
[#263 '<']: r#159
[#263 '<=']: r#159
[#263 '==']: r#159
[#263 '>']: r#159
[#263 '>=']: r#159
[#263 ']']: r#159
[#263 '{']: r#159
[#263 '||']: r#159
[#264 '!=']: r#160
[#264 '%']: r#160
[#264 '&&']: r#160
[#264 ')']: r#160
[#264 '*']: r#160
[#264 '+']: r#160
[#264 ',']: r#160
[#264 '-']: r#160
[#264 '/']: r#160
[#264 ':']: r#160
[#264 ';']: r#160
[#264 '<']: r#160
[#264 '<=']: r#160
[#264 '==']: r#160
[#264 '>']: r#160
[#264 '>=']: r#160
[#264 ']']: r#160
[#264 '{']: r#160
[#264 '||']: r#160
[#265 '.']: s#189
[#265 '[']: s#188
[#266 '.']: s#189
[#266 '[']: s#188
[#267 '!=']: r#161
[#267 '%']: r#161
[#267 '%=']: r#161
[#267 '&&']: r#161
[#267 '&']: r#161
[#267 '&=']: r#161
[#267 ')']: r#161
[#267 '*']: r#161
[#267 '*=']: r#161
[#267 '+']: r#161
[#267 '++']: r#161
[#267 '+=']: r#161
[#267 ',']: r#161
[#267 '-']: r#161
[#267 '--']: r#161
[#267 '-=']: r#161
[#267 '.']: r#161
[#267 '/']: r#161
[#267 '/=']: r#161
[#267 ':']: r#161
[#267 ';']: r#161
[#267 '<']: r#161
[#267 '<<']: r#161
[#267 '<<=']: r#161
[#267 '<=']: r#161
[#267 '=']: r#161
[#267 '==']: r#161
[#267 '>']: r#161
[#267 '>=']: r#161
[#267 '>>']: r#161
[#267 '>>=']: r#161
[#267 '[']: r#161
[#267 ']']: r#161
[#267 '^']: r#161
[#267 '^=']: r#161
[#267 '{']: r#161
[#267 '|']: r#161
[#267 '|=']: r#161
[#267 '||']: r#161
[#268 '!=']: r#162
[#268 '%']: r#162
[#268 '%=']: r#162
[#268 '&&']: r#162
[#268 '&']: r#162
[#268 '&=']: r#162
[#268 ')']: r#162
[#268 '*']: r#162
[#268 '*=']: r#162
[#268 '+']: r#162
[#268 '++']: r#162
[#268 '+=']: r#162
[#268 ',']: r#162
[#268 '-']: r#162
[#268 '--']: r#162
[#268 '-=']: r#162
[#268 '.']: r#162
[#268 '/']: r#162
[#268 '/=']: r#162
[#268 ':']: r#162
[#268 ';']: r#162
[#268 '<']: r#162
[#268 '<<']: r#162
[#268 '<<=']: r#162
[#268 '<=']: r#162
[#268 '=']: r#162
[#268 '==']: r#162
[#268 '>']: r#162
[#268 '>=']: r#162
[#268 '>>']: r#162
[#268 '>>=']: r#162
[#268 '[']: r#162
[#268 ']']: r#162
[#268 '^']: r#162
[#268 '^=']: r#162
[#268 '{']: r#162
[#268 '|']: r#162
[#268 '|=']: r#162
[#268 '||']: r#162
[#269 '!=']: r#163
[#269 '%']: r#163
[#269 '%=']: r#163
[#269 '&&']: r#163
[#269 '&']: r#163
[#269 '&=']: r#163
[#269 ')']: r#163
[#269 '*']: r#163
[#269 '*=']: r#163
[#269 '+']: r#163
[#269 '++']: r#163
[#269 '+=']: r#163
[#269 ',']: r#163
[#269 '-']: r#163
[#269 '--']: r#163
[#269 '-=']: r#163
[#269 '.']: r#163
[#269 '/']: r#163
[#269 '/=']: r#163
[#269 ':']: r#163
[#269 ';']: r#163
[#269 '<']: r#163
[#269 '<<']: r#163
[#269 '<<=']: r#163
[#269 '<=']: r#163
[#269 '=']: r#163
[#269 '==']: r#163
[#269 '>']: r#163
[#269 '>=']: r#163
[#269 '>>']: r#163
[#269 '>>=']: r#163
[#269 '[']: r#163
[#269 ']']: r#163
[#269 '^']: r#163
[#269 '^=']: r#163
[#269 '{']: r#163
[#269 '|']: r#163
[#269 '|=']: r#163
[#269 '||']: r#163
[#270 '!=']: r#164
[#270 '%']: r#164
[#270 '%=']: r#164
[#270 '&&']: r#164
[#270 '&']: r#164
[#270 '&=']: r#164
[#270 ')']: r#164
[#270 '*']: r#164
[#270 '*=']: r#164
[#270 '+']: r#164
[#270 '++']: r#164
[#270 '+=']: r#164
[#270 ',']: r#164
[#270 '-']: r#164
[#270 '--']: r#164
[#270 '-=']: r#164
[#270 '.']: r#164
[#270 '/']: r#164
[#270 '/=']: r#164
[#270 ':']: r#164
[#270 ';']: r#164
[#270 '<']: r#164
[#270 '<<']: r#164
[#270 '<<=']: r#164
[#270 '<=']: r#164
[#270 '=']: r#164
[#270 '==']: r#164
[#270 '>']: r#164
[#270 '>=']: r#164
[#270 '>>']: r#164
[#270 '>>=']: r#164
[#270 '[']: r#164
[#270 ']']: r#164
[#270 '^']: r#164
[#270 '^=']: r#164
[#270 '{']: r#164
[#270 '|']: r#164
[#270 '|=']: r#164
[#270 '||']: r#164
[#271 '!=']: r#165
[#271 '%']: r#165
[#271 '%=']: r#165
[#271 '&&']: r#165
[#271 '&']: r#165
[#271 '&=']: r#165
[#271 ')']: r#165
[#271 '*']: r#165
[#271 '*=']: r#165
[#271 '+']: r#165
[#271 '++']: r#165
[#271 '+=']: r#165
[#271 ',']: r#165
[#271 '-']: r#165
[#271 '--']: r#165
[#271 '-=']: r#165
[#271 '.']: r#165
[#271 '/']: r#165
[#271 '/=']: r#165
[#271 ':']: r#165
[#271 ';']: r#165
[#271 '<']: r#165
[#271 '<<']: r#165
[#271 '<<=']: r#165
[#271 '<=']: r#165
[#271 '=']: r#165
[#271 '==']: r#165
[#271 '>']: r#165
[#271 '>=']: r#165
[#271 '>>']: r#165
[#271 '>>=']: r#165
[#271 '[']: r#165
[#271 ']']: r#165
[#271 '^']: r#165
[#271 '^=']: r#165
[#271 '{']: r#165
[#271 '|']: r#165
[#271 '|=']: r#165
[#271 '||']: r#165
[#272 '!=']: r#166
[#272 '%']: r#166
[#272 '%=']: r#166
[#272 '&&']: r#166
[#272 '&']: r#166
[#272 '&=']: r#166
[#272 ')']: r#166
[#272 '*']: r#166
[#272 '*=']: r#166
[#272 '+']: r#166
[#272 '++']: r#166
[#272 '+=']: r#166
[#272 ',']: r#166
[#272 '-']: r#166
[#272 '--']: r#166
[#272 '-=']: r#166
[#272 '.']: r#166
[#272 '/']: r#166
[#272 '/=']: r#166
[#272 ':']: r#166
[#272 ';']: r#166
[#272 '<']: r#166
[#272 '<<']: r#166
[#272 '<<=']: r#166
[#272 '<=']: r#166
[#272 '=']: r#166
[#272 '==']: r#166
[#272 '>']: r#166
[#272 '>=']: r#166
[#272 '>>']: r#166
[#272 '>>=']: r#166
[#272 '[']: r#166
[#272 ']']: r#166
[#272 '^']: r#166
[#272 '^=']: r#166
[#272 '{']: r#166
[#272 '|']: r#166
[#272 '|=']: r#166
[#272 '||']: r#166
[#273 '!=']: r#167
[#273 '%']: r#167
[#273 '%=']: r#167
[#273 '&&']: r#167
[#273 '&']: r#167
[#273 '&=']: r#167
[#273 ')']: r#167
[#273 '*']: r#167
[#273 '*=']: r#167
[#273 '+']: r#167
[#273 '++']: r#167
[#273 '+=']: r#167
[#273 ',']: r#167
[#273 '-']: r#167
[#273 '--']: r#167
[#273 '-=']: r#167
[#273 '.']: r#167
[#273 '/']: r#167
[#273 '/=']: r#167
[#273 ':']: r#167
[#273 ';']: r#167
[#273 '<']: r#167
[#273 '<<']: r#167
[#273 '<<=']: r#167
[#273 '<=']: r#167
[#273 '=']: r#167
[#273 '==']: r#167
[#273 '>']: r#167
[#273 '>=']: r#167
[#273 '>>']: r#167
[#273 '>>=']: r#167
[#273 '[']: r#167
[#273 ']']: r#167
[#273 '^']: r#167
[#273 '^=']: r#167
[#273 '{']: r#167
[#273 '|']: r#167
[#273 '|=']: r#167
[#273 '||']: r#167
[#274 '!=']: r#168
[#274 '%']: r#168
[#274 '%=']: r#168
[#274 '&&']: r#168
[#274 '&']: r#168
[#274 '&=']: r#168
[#274 ')']: r#168
[#274 '*']: r#168
[#274 '*=']: r#168
[#274 '+']: r#168
[#274 '++']: r#168
[#274 '+=']: r#168
[#274 ',']: r#168
[#274 '-']: r#168
[#274 '--']: r#168
[#274 '-=']: r#168
[#274 '.']: r#168
[#274 '/']: r#168
[#274 '/=']: r#168
[#274 ':']: r#168
[#274 ';']: r#168
[#274 '<']: r#168
[#274 '<<']: r#168
[#274 '<<=']: r#168
[#274 '<=']: r#168
[#274 '=']: r#168
[#274 '==']: r#168
[#274 '>']: r#168
[#274 '>=']: r#168
[#274 '>>']: r#168
[#274 '>>=']: r#168
[#274 '[']: r#168
[#274 ']']: r#168
[#274 '^']: r#168
[#274 '^=']: r#168
[#274 '{']: r#168
[#274 '|']: r#168
[#274 '|=']: r#168
[#274 '||']: r#168
[#275 '!=']: r#169
[#275 '%']: r#169
[#275 '%=']: r#169
[#275 '&&']: r#169
[#275 '&']: r#169
[#275 '&=']: r#169
[#275 ')']: r#169
[#275 '*']: r#169
[#275 '*=']: r#169
[#275 '+']: r#169
[#275 '++']: r#169
[#275 '+=']: r#169
[#275 ',']: r#169
[#275 '-']: r#169
[#275 '--']: r#169
[#275 '-=']: r#169
[#275 '.']: r#169
[#275 '/']: r#169
[#275 '/=']: r#169
[#275 ':']: r#169
[#275 ';']: r#169
[#275 '<']: r#169
[#275 '<<']: r#169
[#275 '<<=']: r#169
[#275 '<=']: r#169
[#275 '=']: r#169
[#275 '==']: r#169
[#275 '>']: r#169
[#275 '>=']: r#169
[#275 '>>']: r#169
[#275 '>>=']: r#169
[#275 '[']: r#169
[#275 ']']: r#169
[#275 '^']: r#169
[#275 '^=']: r#169
[#275 '{']: r#169
[#275 '|']: r#169
[#275 '|=']: r#169
[#275 '||']: r#169
[#276 ']']: s#448
[#277 '>']: s#447
[#278 ')']: r#170
[#278 ',']: r#170
[#278 ';']: r#170
[#278 '=']: r#170
[#278 '>']: r#170
[#278 '{']: r#170
[#278 '}']: r#170
[#279 ')']: r#171
[#279 ',']: r#171
[#279 ';']: r#171
[#279 '=']: r#171
[#279 '>']: r#171
[#279 '{']: r#171
[#279 '}']: r#171
[#280 '<']: s#181
[#281 '<']: s#180
[#282 '<']: s#179
[#283 ')']: s#446
[#284 ')']: r#172
[#285 ',']: s#445
[#286 '!=']: r#173
[#286 '%']: r#173
[#286 '&&']: r#173
[#286 '&']: r#173
[#286 ')']: r#173
[#286 '*']: r#173
[#286 '+']: r#173
[#286 ',']: r#173
[#286 '-']: r#173
[#286 '.']: r#173
[#286 '/']: r#173
[#286 ':']: r#173
[#286 ';']: r#173
[#286 '<']: r#173
[#286 '<<']: r#173
[#286 '<=']: r#173
[#286 '==']: r#173
[#286 '>']: r#173
[#286 '>=']: r#173
[#286 '>>']: r#173
[#286 '[']: r#173
[#286 ']']: r#173
[#286 '^']: r#173
[#286 '{']: r#173
[#286 '|']: r#173
[#286 '||']: r#173
[#287 '>']: s#441
[#288 '>']: s#440
[#289 ',']: s#439
[#290 ',']: s#437
[#291 ',']: r#174
[#291 '>']: r#174
[#292 ',']: r#175
[#292 '>']: r#175
[#293 ',']: r#176
[#293 '>']: r#176
[#294 ',']: r#177
[#294 '>']: r#177
[#295 ',']: r#178
[#295 '>']: r#178
[#296 '>']: s#436
[#297 '>']: s#435
[#298 '>']: s#434
[#299 ',']: s#433
[#300 ',']: r#179
[#301 ',']: r#180
[#302 ',']: r#181
[#303 ',']: r#182
[#304 ',']: r#183
[#305 ',']: r#184
[#306 ',']: r#185
[#307 ',']: r#186
[#308 ',']: r#187
[#309 ',']: r#188
[#310 ',']: r#189
[#311 ',']: r#190
[#312 ',']: r#191
[#313 ',']: r#192
[#314 ',']: r#193
[#315 ',']: r#194
[#316 ',']: r#195
[#317 '}']: s#432
[#318 '}']: r#196
[#319 '&']: s#356
[#319 '(']: s#357
[#319 '*']: s#355
[#319 ';']: s#320
[#319 '_']: s#353
[#319 'array']: s#82
[#319 'atomic']: s#96
[#319 'bool']: s#89
[#319 'break']: s#345
[#319 'const']: s#344
[#319 'const_assert']: s#26
[#319 'continue']: s#346
[#319 'discard']: s#331
[#319 'f16']: s#91
[#319 'f32']: s#90
[#319 'for']: s#339
[#319 'i32']: s#92
[#319 'if']: s#350
[#319 'let']: s#343
[#319 'loop']: s#338
[#319 'mat2x2']: s#101
[#319 'mat2x3']: s#102
[#319 'mat2x4']: s#103
[#319 'mat3x2']: s#104
[#319 'mat3x3']: s#105
[#319 'mat3x4']: s#106
[#319 'mat4x2']: s#107
[#319 'mat4x3']: s#108
[#319 'mat4x4']: s#109
[#319 'ptr']: s#94
[#319 'return']: s#335
[#319 'sampler']: s#126
[#319 'sampler_comparison']: s#127
[#319 'switch']: s#337
[#319 'texture_1d']: s#133
[#319 'texture_2d']: s#134
[#319 'texture_2d_array']: s#135
[#319 'texture_3d']: s#136
[#319 'texture_cube']: s#137
[#319 'texture_cube_array']: s#138
[#319 'texture_depth_2d']: s#128
[#319 'texture_depth_2d_array']: s#129
[#319 'texture_depth_cube']: s#130
[#319 'texture_depth_cube_array']: s#131
[#319 'texture_depth_multisampled_2d']: s#132
[#319 'texture_multisampled_2d']: s#139
[#319 'texture_storage_1d']: s#140
[#319 'texture_storage_2d']: s#141
[#319 'texture_storage_2d_array']: s#142
[#319 'texture_storage_3d']: s#143
[#319 'u32']: s#93
[#319 'var']: s#152
[#319 'vec2']: s#98
[#319 'vec3']: s#99
[#319 'vec4']: s#100
[#319 'while']: s#340
[#319 '{']: s#173
[#319 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#320 '&']: r#197
[#320 '(']: r#197
[#320 '*']: r#197
[#320 ';']: r#197
[#320 '_']: r#197
[#320 'array']: r#197
[#320 'atomic']: r#197
[#320 'bool']: r#197
[#320 'break']: r#197
[#320 'const']: r#197
[#320 'const_assert']: r#197
[#320 'continue']: r#197
[#320 'continuing']: r#197
[#320 'discard']: r#197
[#320 'f16']: r#197
[#320 'f32']: r#197
[#320 'for']: r#197
[#320 'i32']: r#197
[#320 'if']: r#197
[#320 'let']: r#197
[#320 'loop']: r#197
[#320 'mat2x2']: r#197
[#320 'mat2x3']: r#197
[#320 'mat2x4']: r#197
[#320 'mat3x2']: r#197
[#320 'mat3x3']: r#197
[#320 'mat3x4']: r#197
[#320 'mat4x2']: r#197
[#320 'mat4x3']: r#197
[#320 'mat4x4']: r#197
[#320 'ptr']: r#197
[#320 'return']: r#197
[#320 'sampler']: r#197
[#320 'sampler_comparison']: r#197
[#320 'switch']: r#197
[#320 'texture_1d']: r#197
[#320 'texture_2d']: r#197
[#320 'texture_2d_array']: r#197
[#320 'texture_3d']: r#197
[#320 'texture_cube']: r#197
[#320 'texture_cube_array']: r#197
[#320 'texture_depth_2d']: r#197
[#320 'texture_depth_2d_array']: r#197
[#320 'texture_depth_cube']: r#197
[#320 'texture_depth_cube_array']: r#197
[#320 'texture_depth_multisampled_2d']: r#197
[#320 'texture_multisampled_2d']: r#197
[#320 'texture_storage_1d']: r#197
[#320 'texture_storage_2d']: r#197
[#320 'texture_storage_2d_array']: r#197
[#320 'texture_storage_3d']: r#197
[#320 'u32']: r#197
[#320 'var']: r#197
[#320 'vec2']: r#197
[#320 'vec3']: r#197
[#320 'vec4']: r#197
[#320 'while']: r#197
[#320 '{']: r#197
[#320 '}']: r#197
[#321 ';']: s#430
[#322 '&']: r#198
[#322 '(']: r#198
[#322 '*']: r#198
[#322 ';']: r#198
[#322 '_']: r#198
[#322 'array']: r#198
[#322 'atomic']: r#198
[#322 'bool']: r#198
[#322 'break']: r#198
[#322 'const']: r#198
[#322 'const_assert']: r#198
[#322 'continue']: r#198
[#322 'continuing']: r#198
[#322 'discard']: r#198
[#322 'f16']: r#198
[#322 'f32']: r#198
[#322 'for']: r#198
[#322 'i32']: r#198
[#322 'if']: r#198
[#322 'let']: r#198
[#322 'loop']: r#198
[#322 'mat2x2']: r#198
[#322 'mat2x3']: r#198
[#322 'mat2x4']: r#198
[#322 'mat3x2']: r#198
[#322 'mat3x3']: r#198
[#322 'mat3x4']: r#198
[#322 'mat4x2']: r#198
[#322 'mat4x3']: r#198
[#322 'mat4x4']: r#198
[#322 'ptr']: r#198
[#322 'return']: r#198
[#322 'sampler']: r#198
[#322 'sampler_comparison']: r#198
[#322 'switch']: r#198
[#322 'texture_1d']: r#198
[#322 'texture_2d']: r#198
[#322 'texture_2d_array']: r#198
[#322 'texture_3d']: r#198
[#322 'texture_cube']: r#198
[#322 'texture_cube_array']: r#198
[#322 'texture_depth_2d']: r#198
[#322 'texture_depth_2d_array']: r#198
[#322 'texture_depth_cube']: r#198
[#322 'texture_depth_cube_array']: r#198
[#322 'texture_depth_multisampled_2d']: r#198
[#322 'texture_multisampled_2d']: r#198
[#322 'texture_storage_1d']: r#198
[#322 'texture_storage_2d']: r#198
[#322 'texture_storage_2d_array']: r#198
[#322 'texture_storage_3d']: r#198
[#322 'u32']: r#198
[#322 'var']: r#198
[#322 'vec2']: r#198
[#322 'vec3']: r#198
[#322 'vec4']: r#198
[#322 'while']: r#198
[#322 '{']: r#198
[#322 '}']: r#198
[#323 '&']: r#199
[#323 '(']: r#199
[#323 '*']: r#199
[#323 ';']: r#199
[#323 '_']: r#199
[#323 'array']: r#199
[#323 'atomic']: r#199
[#323 'bool']: r#199
[#323 'break']: r#199
[#323 'const']: r#199
[#323 'const_assert']: r#199
[#323 'continue']: r#199
[#323 'continuing']: r#199
[#323 'discard']: r#199
[#323 'f16']: r#199
[#323 'f32']: r#199
[#323 'for']: r#199
[#323 'i32']: r#199
[#323 'if']: r#199
[#323 'let']: r#199
[#323 'loop']: r#199
[#323 'mat2x2']: r#199
[#323 'mat2x3']: r#199
[#323 'mat2x4']: r#199
[#323 'mat3x2']: r#199
[#323 'mat3x3']: r#199
[#323 'mat3x4']: r#199
[#323 'mat4x2']: r#199
[#323 'mat4x3']: r#199
[#323 'mat4x4']: r#199
[#323 'ptr']: r#199
[#323 'return']: r#199
[#323 'sampler']: r#199
[#323 'sampler_comparison']: r#199
[#323 'switch']: r#199
[#323 'texture_1d']: r#199
[#323 'texture_2d']: r#199
[#323 'texture_2d_array']: r#199
[#323 'texture_3d']: r#199
[#323 'texture_cube']: r#199
[#323 'texture_cube_array']: r#199
[#323 'texture_depth_2d']: r#199
[#323 'texture_depth_2d_array']: r#199
[#323 'texture_depth_cube']: r#199
[#323 'texture_depth_cube_array']: r#199
[#323 'texture_depth_multisampled_2d']: r#199
[#323 'texture_multisampled_2d']: r#199
[#323 'texture_storage_1d']: r#199
[#323 'texture_storage_2d']: r#199
[#323 'texture_storage_2d_array']: r#199
[#323 'texture_storage_3d']: r#199
[#323 'u32']: r#199
[#323 'var']: r#199
[#323 'vec2']: r#199
[#323 'vec3']: r#199
[#323 'vec4']: r#199
[#323 'while']: r#199
[#323 '{']: r#199
[#323 '}']: r#199
[#324 '&']: r#200
[#324 '(']: r#200
[#324 '*']: r#200
[#324 ';']: r#200
[#324 '_']: r#200
[#324 'array']: r#200
[#324 'atomic']: r#200
[#324 'bool']: r#200
[#324 'break']: r#200
[#324 'const']: r#200
[#324 'const_assert']: r#200
[#324 'continue']: r#200
[#324 'continuing']: r#200
[#324 'discard']: r#200
[#324 'f16']: r#200
[#324 'f32']: r#200
[#324 'for']: r#200
[#324 'i32']: r#200
[#324 'if']: r#200
[#324 'let']: r#200
[#324 'loop']: r#200
[#324 'mat2x2']: r#200
[#324 'mat2x3']: r#200
[#324 'mat2x4']: r#200
[#324 'mat3x2']: r#200
[#324 'mat3x3']: r#200
[#324 'mat3x4']: r#200
[#324 'mat4x2']: r#200
[#324 'mat4x3']: r#200
[#324 'mat4x4']: r#200
[#324 'ptr']: r#200
[#324 'return']: r#200
[#324 'sampler']: r#200
[#324 'sampler_comparison']: r#200
[#324 'switch']: r#200
[#324 'texture_1d']: r#200
[#324 'texture_2d']: r#200
[#324 'texture_2d_array']: r#200
[#324 'texture_3d']: r#200
[#324 'texture_cube']: r#200
[#324 'texture_cube_array']: r#200
[#324 'texture_depth_2d']: r#200
[#324 'texture_depth_2d_array']: r#200
[#324 'texture_depth_cube']: r#200
[#324 'texture_depth_cube_array']: r#200
[#324 'texture_depth_multisampled_2d']: r#200
[#324 'texture_multisampled_2d']: r#200
[#324 'texture_storage_1d']: r#200
[#324 'texture_storage_2d']: r#200
[#324 'texture_storage_2d_array']: r#200
[#324 'texture_storage_3d']: r#200
[#324 'u32']: r#200
[#324 'var']: r#200
[#324 'vec2']: r#200
[#324 'vec3']: r#200
[#324 'vec4']: r#200
[#324 'while']: r#200
[#324 '{']: r#200
[#324 '}']: r#200
[#325 '&']: r#201
[#325 '(']: r#201
[#325 '*']: r#201
[#325 ';']: r#201
[#325 '_']: r#201
[#325 'array']: r#201
[#325 'atomic']: r#201
[#325 'bool']: r#201
[#325 'break']: r#201
[#325 'const']: r#201
[#325 'const_assert']: r#201
[#325 'continue']: r#201
[#325 'continuing']: r#201
[#325 'discard']: r#201
[#325 'f16']: r#201
[#325 'f32']: r#201
[#325 'for']: r#201
[#325 'i32']: r#201
[#325 'if']: r#201
[#325 'let']: r#201
[#325 'loop']: r#201
[#325 'mat2x2']: r#201
[#325 'mat2x3']: r#201
[#325 'mat2x4']: r#201
[#325 'mat3x2']: r#201
[#325 'mat3x3']: r#201
[#325 'mat3x4']: r#201
[#325 'mat4x2']: r#201
[#325 'mat4x3']: r#201
[#325 'mat4x4']: r#201
[#325 'ptr']: r#201
[#325 'return']: r#201
[#325 'sampler']: r#201
[#325 'sampler_comparison']: r#201
[#325 'switch']: r#201
[#325 'texture_1d']: r#201
[#325 'texture_2d']: r#201
[#325 'texture_2d_array']: r#201
[#325 'texture_3d']: r#201
[#325 'texture_cube']: r#201
[#325 'texture_cube_array']: r#201
[#325 'texture_depth_2d']: r#201
[#325 'texture_depth_2d_array']: r#201
[#325 'texture_depth_cube']: r#201
[#325 'texture_depth_cube_array']: r#201
[#325 'texture_depth_multisampled_2d']: r#201
[#325 'texture_multisampled_2d']: r#201
[#325 'texture_storage_1d']: r#201
[#325 'texture_storage_2d']: r#201
[#325 'texture_storage_2d_array']: r#201
[#325 'texture_storage_3d']: r#201
[#325 'u32']: r#201
[#325 'var']: r#201
[#325 'vec2']: r#201
[#325 'vec3']: r#201
[#325 'vec4']: r#201
[#325 'while']: r#201
[#325 '{']: r#201
[#325 '}']: r#201
[#326 '&']: r#202
[#326 '(']: r#202
[#326 '*']: r#202
[#326 ';']: r#202
[#326 '_']: r#202
[#326 'array']: r#202
[#326 'atomic']: r#202
[#326 'bool']: r#202
[#326 'break']: r#202
[#326 'const']: r#202
[#326 'const_assert']: r#202
[#326 'continue']: r#202
[#326 'continuing']: r#202
[#326 'discard']: r#202
[#326 'f16']: r#202
[#326 'f32']: r#202
[#326 'for']: r#202
[#326 'i32']: r#202
[#326 'if']: r#202
[#326 'let']: r#202
[#326 'loop']: r#202
[#326 'mat2x2']: r#202
[#326 'mat2x3']: r#202
[#326 'mat2x4']: r#202
[#326 'mat3x2']: r#202
[#326 'mat3x3']: r#202
[#326 'mat3x4']: r#202
[#326 'mat4x2']: r#202
[#326 'mat4x3']: r#202
[#326 'mat4x4']: r#202
[#326 'ptr']: r#202
[#326 'return']: r#202
[#326 'sampler']: r#202
[#326 'sampler_comparison']: r#202
[#326 'switch']: r#202
[#326 'texture_1d']: r#202
[#326 'texture_2d']: r#202
[#326 'texture_2d_array']: r#202
[#326 'texture_3d']: r#202
[#326 'texture_cube']: r#202
[#326 'texture_cube_array']: r#202
[#326 'texture_depth_2d']: r#202
[#326 'texture_depth_2d_array']: r#202
[#326 'texture_depth_cube']: r#202
[#326 'texture_depth_cube_array']: r#202
[#326 'texture_depth_multisampled_2d']: r#202
[#326 'texture_multisampled_2d']: r#202
[#326 'texture_storage_1d']: r#202
[#326 'texture_storage_2d']: r#202
[#326 'texture_storage_2d_array']: r#202
[#326 'texture_storage_3d']: r#202
[#326 'u32']: r#202
[#326 'var']: r#202
[#326 'vec2']: r#202
[#326 'vec3']: r#202
[#326 'vec4']: r#202
[#326 'while']: r#202
[#326 '{']: r#202
[#326 '}']: r#202
[#327 ';']: s#429
[#328 ';']: s#428
[#329 ';']: s#427
[#330 ';']: s#426
[#331 ';']: s#425
[#332 ';']: s#424
[#333 '&']: r#203
[#333 '(']: r#203
[#333 '*']: r#203
[#333 ';']: r#203
[#333 '_']: r#203
[#333 'array']: r#203
[#333 'atomic']: r#203
[#333 'bool']: r#203
[#333 'break']: r#203
[#333 'const']: r#203
[#333 'const_assert']: r#203
[#333 'continue']: r#203
[#333 'continuing']: r#203
[#333 'discard']: r#203
[#333 'f16']: r#203
[#333 'f32']: r#203
[#333 'for']: r#203
[#333 'i32']: r#203
[#333 'if']: r#203
[#333 'let']: r#203
[#333 'loop']: r#203
[#333 'mat2x2']: r#203
[#333 'mat2x3']: r#203
[#333 'mat2x4']: r#203
[#333 'mat3x2']: r#203
[#333 'mat3x3']: r#203
[#333 'mat3x4']: r#203
[#333 'mat4x2']: r#203
[#333 'mat4x3']: r#203
[#333 'mat4x4']: r#203
[#333 'ptr']: r#203
[#333 'return']: r#203
[#333 'sampler']: r#203
[#333 'sampler_comparison']: r#203
[#333 'switch']: r#203
[#333 'texture_1d']: r#203
[#333 'texture_2d']: r#203
[#333 'texture_2d_array']: r#203
[#333 'texture_3d']: r#203
[#333 'texture_cube']: r#203
[#333 'texture_cube_array']: r#203
[#333 'texture_depth_2d']: r#203
[#333 'texture_depth_2d_array']: r#203
[#333 'texture_depth_cube']: r#203
[#333 'texture_depth_cube_array']: r#203
[#333 'texture_depth_multisampled_2d']: r#203
[#333 'texture_multisampled_2d']: r#203
[#333 'texture_storage_1d']: r#203
[#333 'texture_storage_2d']: r#203
[#333 'texture_storage_2d_array']: r#203
[#333 'texture_storage_3d']: r#203
[#333 'u32']: r#203
[#333 'var']: r#203
[#333 'vec2']: r#203
[#333 'vec3']: r#203
[#333 'vec4']: r#203
[#333 'while']: r#203
[#333 '{']: r#203
[#333 '}']: r#203
[#334 ';']: s#423
[#335 '!']: s#63
[#335 '&']: s#66
[#335 '(']: s#78
[#335 '*']: s#65
[#335 '-']: s#62
[#335 'array']: s#82
[#335 'atomic']: s#96
[#335 'bitcast']: s#72
[#335 'bool']: s#89
[#335 'f16']: s#91
[#335 'f32']: s#90
[#335 'false']: s#88
[#335 'i32']: s#92
[#335 'mat2x2']: s#101
[#335 'mat2x3']: s#102
[#335 'mat2x4']: s#103
[#335 'mat3x2']: s#104
[#335 'mat3x3']: s#105
[#335 'mat3x4']: s#106
[#335 'mat4x2']: s#107
[#335 'mat4x3']: s#108
[#335 'mat4x4']: s#109
[#335 'ptr']: s#94
[#335 'sampler']: s#126
[#335 'sampler_comparison']: s#127
[#335 'texture_1d']: s#133
[#335 'texture_2d']: s#134
[#335 'texture_2d_array']: s#135
[#335 'texture_3d']: s#136
[#335 'texture_cube']: s#137
[#335 'texture_cube_array']: s#138
[#335 'texture_depth_2d']: s#128
[#335 'texture_depth_2d_array']: s#129
[#335 'texture_depth_cube']: s#130
[#335 'texture_depth_cube_array']: s#131
[#335 'texture_depth_multisampled_2d']: s#132
[#335 'texture_multisampled_2d']: s#139
[#335 'texture_storage_1d']: s#140
[#335 'texture_storage_2d']: s#141
[#335 'texture_storage_2d_array']: s#142
[#335 'texture_storage_3d']: s#143
[#335 'true']: s#87
[#335 'u32']: s#93
[#335 'vec2']: s#98
[#335 'vec3']: s#99
[#335 'vec4']: s#100
[#335 '~']: s#64
[#335 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#335 /0[fh]/]: s#113
[#335 /0[iu]?/]: s#110
[#335 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#335 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#335 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#335 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#335 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#335 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#335 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#335 /[1-9][0-9]*[fh]/]: s#114
[#335 /[1-9][0-9]*[iu]?/]: s#111
[#336 'else']: s#420
[#337 '!']: s#63
[#337 '&']: s#66
[#337 '(']: s#78
[#337 '*']: s#65
[#337 '-']: s#62
[#337 'array']: s#82
[#337 'atomic']: s#96
[#337 'bitcast']: s#72
[#337 'bool']: s#89
[#337 'f16']: s#91
[#337 'f32']: s#90
[#337 'false']: s#88
[#337 'i32']: s#92
[#337 'mat2x2']: s#101
[#337 'mat2x3']: s#102
[#337 'mat2x4']: s#103
[#337 'mat3x2']: s#104
[#337 'mat3x3']: s#105
[#337 'mat3x4']: s#106
[#337 'mat4x2']: s#107
[#337 'mat4x3']: s#108
[#337 'mat4x4']: s#109
[#337 'ptr']: s#94
[#337 'sampler']: s#126
[#337 'sampler_comparison']: s#127
[#337 'texture_1d']: s#133
[#337 'texture_2d']: s#134
[#337 'texture_2d_array']: s#135
[#337 'texture_3d']: s#136
[#337 'texture_cube']: s#137
[#337 'texture_cube_array']: s#138
[#337 'texture_depth_2d']: s#128
[#337 'texture_depth_2d_array']: s#129
[#337 'texture_depth_cube']: s#130
[#337 'texture_depth_cube_array']: s#131
[#337 'texture_depth_multisampled_2d']: s#132
[#337 'texture_multisampled_2d']: s#139
[#337 'texture_storage_1d']: s#140
[#337 'texture_storage_2d']: s#141
[#337 'texture_storage_2d_array']: s#142
[#337 'texture_storage_3d']: s#143
[#337 'true']: s#87
[#337 'u32']: s#93
[#337 'vec2']: s#98
[#337 'vec3']: s#99
[#337 'vec4']: s#100
[#337 '~']: s#64
[#337 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#337 /0[fh]/]: s#113
[#337 /0[iu]?/]: s#110
[#337 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#337 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#337 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#337 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#337 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#337 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#337 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#337 /[1-9][0-9]*[fh]/]: s#114
[#337 /[1-9][0-9]*[iu]?/]: s#111
[#338 '{']: s#415
[#339 '(']: s#414
[#340 '!']: s#63
[#340 '&']: s#66
[#340 '(']: s#78
[#340 '*']: s#65
[#340 '-']: s#62
[#340 'array']: s#82
[#340 'atomic']: s#96
[#340 'bitcast']: s#72
[#340 'bool']: s#89
[#340 'f16']: s#91
[#340 'f32']: s#90
[#340 'false']: s#88
[#340 'i32']: s#92
[#340 'mat2x2']: s#101
[#340 'mat2x3']: s#102
[#340 'mat2x4']: s#103
[#340 'mat3x2']: s#104
[#340 'mat3x3']: s#105
[#340 'mat3x4']: s#106
[#340 'mat4x2']: s#107
[#340 'mat4x3']: s#108
[#340 'mat4x4']: s#109
[#340 'ptr']: s#94
[#340 'sampler']: s#126
[#340 'sampler_comparison']: s#127
[#340 'texture_1d']: s#133
[#340 'texture_2d']: s#134
[#340 'texture_2d_array']: s#135
[#340 'texture_3d']: s#136
[#340 'texture_cube']: s#137
[#340 'texture_cube_array']: s#138
[#340 'texture_depth_2d']: s#128
[#340 'texture_depth_2d_array']: s#129
[#340 'texture_depth_cube']: s#130
[#340 'texture_depth_cube_array']: s#131
[#340 'texture_depth_multisampled_2d']: s#132
[#340 'texture_multisampled_2d']: s#139
[#340 'texture_storage_1d']: s#140
[#340 'texture_storage_2d']: s#141
[#340 'texture_storage_2d_array']: s#142
[#340 'texture_storage_3d']: s#143
[#340 'true']: s#87
[#340 'u32']: s#93
[#340 'vec2']: s#98
[#340 'vec3']: s#99
[#340 'vec4']: s#100
[#340 '~']: s#64
[#340 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#340 /0[fh]/]: s#113
[#340 /0[iu]?/]: s#110
[#340 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#340 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#340 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#340 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#340 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#340 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#340 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#340 /[1-9][0-9]*[fh]/]: s#114
[#340 /[1-9][0-9]*[iu]?/]: s#111
[#341 '(']: s#184
[#342 ';']: r#204
[#342 '=']: s#411
[#343 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#344 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#345 ';']: r#205
[#346 ';']: r#206
[#347 ')']: r#207
[#347 ';']: r#207
[#348 ')']: r#208
[#348 ';']: r#208
[#349 ')']: r#209
[#349 ';']: r#209
[#350 '!']: s#63
[#350 '&']: s#66
[#350 '(']: s#78
[#350 '*']: s#65
[#350 '-']: s#62
[#350 'array']: s#82
[#350 'atomic']: s#96
[#350 'bitcast']: s#72
[#350 'bool']: s#89
[#350 'f16']: s#91
[#350 'f32']: s#90
[#350 'false']: s#88
[#350 'i32']: s#92
[#350 'mat2x2']: s#101
[#350 'mat2x3']: s#102
[#350 'mat2x4']: s#103
[#350 'mat3x2']: s#104
[#350 'mat3x3']: s#105
[#350 'mat3x4']: s#106
[#350 'mat4x2']: s#107
[#350 'mat4x3']: s#108
[#350 'mat4x4']: s#109
[#350 'ptr']: s#94
[#350 'sampler']: s#126
[#350 'sampler_comparison']: s#127
[#350 'texture_1d']: s#133
[#350 'texture_2d']: s#134
[#350 'texture_2d_array']: s#135
[#350 'texture_3d']: s#136
[#350 'texture_cube']: s#137
[#350 'texture_cube_array']: s#138
[#350 'texture_depth_2d']: s#128
[#350 'texture_depth_2d_array']: s#129
[#350 'texture_depth_cube']: s#130
[#350 'texture_depth_cube_array']: s#131
[#350 'texture_depth_multisampled_2d']: s#132
[#350 'texture_multisampled_2d']: s#139
[#350 'texture_storage_1d']: s#140
[#350 'texture_storage_2d']: s#141
[#350 'texture_storage_2d_array']: s#142
[#350 'texture_storage_3d']: s#143
[#350 'true']: s#87
[#350 'u32']: s#93
[#350 'vec2']: s#98
[#350 'vec3']: s#99
[#350 'vec4']: s#100
[#350 '~']: s#64
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#350 /0[fh]/]: s#113
[#350 /0[iu]?/]: s#110
[#350 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#350 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#350 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#350 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#350 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#350 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#350 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#350 /[1-9][0-9]*[fh]/]: s#114
[#350 /[1-9][0-9]*[iu]?/]: s#111
[#351 '%=']: r#210
[#351 '&=']: r#210
[#351 '(']: r#34
[#351 '*=']: r#210
[#351 '++']: r#210
[#351 '+=']: r#210
[#351 '--']: r#210
[#351 '-=']: r#210
[#351 '.']: r#210
[#351 '/=']: r#210
[#351 '<<=']: r#210
[#351 '=']: r#210
[#351 '>>=']: r#210
[#351 '[']: r#210
[#351 '^=']: r#210
[#351 '|=']: r#210
[#352 '%=']: s#402
[#352 '&=']: s#403
[#352 '*=']: s#400
[#352 '++']: s#394
[#352 '+=']: s#398
[#352 '--']: s#395
[#352 '-=']: s#399
[#352 '/=']: s#401
[#352 '<<=']: s#407
[#352 '=']: s#396
[#352 '>>=']: s#406
[#352 '^=']: s#405
[#352 '|=']: s#404
[#353 '=']: s#392
[#354 '.']: s#189
[#354 '[']: s#188
[#355 '&']: s#356
[#355 '(']: s#357
[#355 '*']: s#355
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#356 '&']: s#356
[#356 '(']: s#357
[#356 '*']: s#355
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#357 '&']: s#356
[#357 '(']: s#357
[#357 '*']: s#355
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#358 '@']: s#31
[#359 ',']: s#379
[#360 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#267
[#362 '@']: s#31
[#363 ';']: r#211
[#364 ';']: r#212
[#365 '!']: s#63
[#365 '&']: s#66
[#365 '(']: s#78
[#365 '*']: s#65
[#365 '-']: s#62
[#365 'array']: s#82
[#365 'atomic']: s#96
[#365 'bitcast']: s#72
[#365 'bool']: s#89
[#365 'f16']: s#91
[#365 'f32']: s#90
[#365 'false']: s#88
[#365 'i32']: s#92
[#365 'mat2x2']: s#101
[#365 'mat2x3']: s#102
[#365 'mat2x4']: s#103
[#365 'mat3x2']: s#104
[#365 'mat3x3']: s#105
[#365 'mat3x4']: s#106
[#365 'mat4x2']: s#107
[#365 'mat4x3']: s#108
[#365 'mat4x4']: s#109
[#365 'ptr']: s#94
[#365 'sampler']: s#126
[#365 'sampler_comparison']: s#127
[#365 'texture_1d']: s#133
[#365 'texture_2d']: s#134
[#365 'texture_2d_array']: s#135
[#365 'texture_3d']: s#136
[#365 'texture_cube']: s#137
[#365 'texture_cube_array']: s#138
[#365 'texture_depth_2d']: s#128
[#365 'texture_depth_2d_array']: s#129
[#365 'texture_depth_cube']: s#130
[#365 'texture_depth_cube_array']: s#131
[#365 'texture_depth_multisampled_2d']: s#132
[#365 'texture_multisampled_2d']: s#139
[#365 'texture_storage_1d']: s#140
[#365 'texture_storage_2d']: s#141
[#365 'texture_storage_2d_array']: s#142
[#365 'texture_storage_3d']: s#143
[#365 'true']: s#87
[#365 'u32']: s#93
[#365 'vec2']: s#98
[#365 'vec3']: s#99
[#365 'vec4']: s#100
[#365 '~']: s#64
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#365 /0[fh]/]: s#113
[#365 /0[iu]?/]: s#110
[#365 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#365 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#365 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#365 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#365 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#365 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#365 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#365 /[1-9][0-9]*[fh]/]: s#114
[#365 /[1-9][0-9]*[iu]?/]: s#111
[#366 ';']: r#213
[#367 ';']: r#214
[#367 '=']: r#214
[#368 ';']: r#215
[#369 ',']: s#372
[#370 ';']: r#216
[#370 '=']: r#216
[#371 '>']: s#525
[#372 'read']: s#486
[#372 'read_write']: s#488
[#372 'write']: s#487
[#373 ';']: r#217
[#375 ':']: s#523
[#376 ',']: s#522
[#377 ',']: r#218
[#377 '}']: r#218
[#378 ',']: s#379
[#379 '@']: s#31
[#380 ')']: s#518
[#381 ')']: r#219
[#382 ',']: s#517
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#385 '@']: s#31
[#386 ')']: s#511
[#387 '%=']: r#210
[#387 '&=']: r#210
[#387 ')']: r#210
[#387 '*=']: r#210
[#387 '++']: r#210
[#387 '+=']: r#210
[#387 '--']: r#210
[#387 '-=']: r#210
[#387 '.']: r#210
[#387 '/=']: r#210
[#387 '<<=']: r#210
[#387 '=']: r#210
[#387 '>>=']: r#210
[#387 '[']: r#210
[#387 '^=']: r#210
[#387 '|=']: r#210
[#388 '%=']: r#220
[#388 '&=']: r#220
[#388 ')']: r#220
[#388 '*=']: r#220
[#388 '++']: r#220
[#388 '+=']: r#220
[#388 '--']: r#220
[#388 '-=']: r#220
[#388 '/=']: r#220
[#388 '<<=']: r#220
[#388 '=']: r#220
[#388 '>>=']: r#220
[#388 '^=']: r#220
[#388 '|=']: r#220
[#389 '%=']: r#221
[#389 '&=']: r#221
[#389 ')']: r#221
[#389 '*=']: r#221
[#389 '++']: r#221
[#389 '+=']: r#221
[#389 '--']: r#221
[#389 '-=']: r#221
[#389 '/=']: r#221
[#389 '<<=']: r#221
[#389 '=']: r#221
[#389 '>>=']: r#221
[#389 '^=']: r#221
[#389 '|=']: r#221
[#390 '%=']: r#222
[#390 '&=']: r#222
[#390 ')']: r#222
[#390 '*=']: r#222
[#390 '++']: r#222
[#390 '+=']: r#222
[#390 '--']: r#222
[#390 '-=']: r#222
[#390 '/=']: r#222
[#390 '<<=']: r#222
[#390 '=']: r#222
[#390 '>>=']: r#222
[#390 '^=']: r#222
[#390 '|=']: r#222
[#391 '%=']: r#223
[#391 '&=']: r#223
[#391 ')']: r#223
[#391 '*=']: r#223
[#391 '++']: r#223
[#391 '+=']: r#223
[#391 '--']: r#223
[#391 '-=']: r#223
[#391 '/=']: r#223
[#391 '<<=']: r#223
[#391 '=']: r#223
[#391 '>>=']: r#223
[#391 '^=']: r#223
[#391 '|=']: r#223
[#392 '!']: s#63
[#392 '&']: s#66
[#392 '(']: s#78
[#392 '*']: s#65
[#392 '-']: s#62
[#392 'array']: s#82
[#392 'atomic']: s#96
[#392 'bitcast']: s#72
[#392 'bool']: s#89
[#392 'f16']: s#91
[#392 'f32']: s#90
[#392 'false']: s#88
[#392 'i32']: s#92
[#392 'mat2x2']: s#101
[#392 'mat2x3']: s#102
[#392 'mat2x4']: s#103
[#392 'mat3x2']: s#104
[#392 'mat3x3']: s#105
[#392 'mat3x4']: s#106
[#392 'mat4x2']: s#107
[#392 'mat4x3']: s#108
[#392 'mat4x4']: s#109
[#392 'ptr']: s#94
[#392 'sampler']: s#126
[#392 'sampler_comparison']: s#127
[#392 'texture_1d']: s#133
[#392 'texture_2d']: s#134
[#392 'texture_2d_array']: s#135
[#392 'texture_3d']: s#136
[#392 'texture_cube']: s#137
[#392 'texture_cube_array']: s#138
[#392 'texture_depth_2d']: s#128
[#392 'texture_depth_2d_array']: s#129
[#392 'texture_depth_cube']: s#130
[#392 'texture_depth_cube_array']: s#131
[#392 'texture_depth_multisampled_2d']: s#132
[#392 'texture_multisampled_2d']: s#139
[#392 'texture_storage_1d']: s#140
[#392 'texture_storage_2d']: s#141
[#392 'texture_storage_2d_array']: s#142
[#392 'texture_storage_3d']: s#143
[#392 'true']: s#87
[#392 'u32']: s#93
[#392 'vec2']: s#98
[#392 'vec3']: s#99
[#392 'vec4']: s#100
[#392 '~']: s#64
[#392 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#392 /0[fh]/]: s#113
[#392 /0[iu]?/]: s#110
[#392 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#392 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#392 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#392 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#392 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#392 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#392 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#392 /[1-9][0-9]*[fh]/]: s#114
[#392 /[1-9][0-9]*[iu]?/]: s#111
[#393 '!']: s#63
[#393 '&']: s#66
[#393 '(']: s#78
[#393 '*']: s#65
[#393 '-']: s#62
[#393 'array']: s#82
[#393 'atomic']: s#96
[#393 'bitcast']: s#72
[#393 'bool']: s#89
[#393 'f16']: s#91
[#393 'f32']: s#90
[#393 'false']: s#88
[#393 'i32']: s#92
[#393 'mat2x2']: s#101
[#393 'mat2x3']: s#102
[#393 'mat2x4']: s#103
[#393 'mat3x2']: s#104
[#393 'mat3x3']: s#105
[#393 'mat3x4']: s#106
[#393 'mat4x2']: s#107
[#393 'mat4x3']: s#108
[#393 'mat4x4']: s#109
[#393 'ptr']: s#94
[#393 'sampler']: s#126
[#393 'sampler_comparison']: s#127
[#393 'texture_1d']: s#133
[#393 'texture_2d']: s#134
[#393 'texture_2d_array']: s#135
[#393 'texture_3d']: s#136
[#393 'texture_cube']: s#137
[#393 'texture_cube_array']: s#138
[#393 'texture_depth_2d']: s#128
[#393 'texture_depth_2d_array']: s#129
[#393 'texture_depth_cube']: s#130
[#393 'texture_depth_cube_array']: s#131
[#393 'texture_depth_multisampled_2d']: s#132
[#393 'texture_multisampled_2d']: s#139
[#393 'texture_storage_1d']: s#140
[#393 'texture_storage_2d']: s#141
[#393 'texture_storage_2d_array']: s#142
[#393 'texture_storage_3d']: s#143
[#393 'true']: s#87
[#393 'u32']: s#93
[#393 'vec2']: s#98
[#393 'vec3']: s#99
[#393 'vec4']: s#100
[#393 '~']: s#64
[#393 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#393 /0[fh]/]: s#113
[#393 /0[iu]?/]: s#110
[#393 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#393 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#393 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#393 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#393 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#393 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#393 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#393 /[1-9][0-9]*[fh]/]: s#114
[#393 /[1-9][0-9]*[iu]?/]: s#111
[#394 ')']: r#224
[#394 ';']: r#224
[#395 ')']: r#225
[#395 ';']: r#225
[#396 '!']: r#226
[#396 '&']: r#226
[#396 '(']: r#226
[#396 '*']: r#226
[#396 '-']: r#226
[#396 'bitcast']: r#226
[#396 'false']: r#226
[#396 'true']: r#226
[#396 '~']: r#226
[#396 /0[fh]/]: r#226
[#396 /0[iu]?/]: r#226
[#396 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#226
[#396 /0[xX][0-9a-fA-F]+[iu]?/]: r#226
[#396 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#226
[#396 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#226
[#396 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#226
[#396 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#226
[#396 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#226
[#396 /[1-9][0-9]*[fh]/]: r#226
[#396 /[1-9][0-9]*[iu]?/]: r#226
[#397 '!']: r#227
[#397 '&']: r#227
[#397 '(']: r#227
[#397 '*']: r#227
[#397 '-']: r#227
[#397 'bitcast']: r#227
[#397 'false']: r#227
[#397 'true']: r#227
[#397 '~']: r#227
[#397 /0[fh]/]: r#227
[#397 /0[iu]?/]: r#227
[#397 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#227
[#397 /0[xX][0-9a-fA-F]+[iu]?/]: r#227
[#397 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#227
[#397 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#227
[#397 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#227
[#397 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#227
[#397 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#227
[#397 /[1-9][0-9]*[fh]/]: r#227
[#397 /[1-9][0-9]*[iu]?/]: r#227
[#398 '!']: r#228
[#398 '&']: r#228
[#398 '(']: r#228
[#398 '*']: r#228
[#398 '-']: r#228
[#398 'bitcast']: r#228
[#398 'false']: r#228
[#398 'true']: r#228
[#398 '~']: r#228
[#398 /0[fh]/]: r#228
[#398 /0[iu]?/]: r#228
[#398 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#228
[#398 /0[xX][0-9a-fA-F]+[iu]?/]: r#228
[#398 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#228
[#398 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#228
[#398 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#228
[#398 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#228
[#398 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#228
[#398 /[1-9][0-9]*[fh]/]: r#228
[#398 /[1-9][0-9]*[iu]?/]: r#228
[#399 '!']: r#229
[#399 '&']: r#229
[#399 '(']: r#229
[#399 '*']: r#229
[#399 '-']: r#229
[#399 'bitcast']: r#229
[#399 'false']: r#229
[#399 'true']: r#229
[#399 '~']: r#229
[#399 /0[fh]/]: r#229
[#399 /0[iu]?/]: r#229
[#399 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#229
[#399 /0[xX][0-9a-fA-F]+[iu]?/]: r#229
[#399 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#229
[#399 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#229
[#399 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#229
[#399 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#229
[#399 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#229
[#399 /[1-9][0-9]*[fh]/]: r#229
[#399 /[1-9][0-9]*[iu]?/]: r#229
[#400 '!']: r#230
[#400 '&']: r#230
[#400 '(']: r#230
[#400 '*']: r#230
[#400 '-']: r#230
[#400 'bitcast']: r#230
[#400 'false']: r#230
[#400 'true']: r#230
[#400 '~']: r#230
[#400 /0[fh]/]: r#230
[#400 /0[iu]?/]: r#230
[#400 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#230
[#400 /0[xX][0-9a-fA-F]+[iu]?/]: r#230
[#400 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#230
[#400 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#230
[#400 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#230
[#400 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#230
[#400 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#230
[#400 /[1-9][0-9]*[fh]/]: r#230
[#400 /[1-9][0-9]*[iu]?/]: r#230
[#401 '!']: r#231
[#401 '&']: r#231
[#401 '(']: r#231
[#401 '*']: r#231
[#401 '-']: r#231
[#401 'bitcast']: r#231
[#401 'false']: r#231
[#401 'true']: r#231
[#401 '~']: r#231
[#401 /0[fh]/]: r#231
[#401 /0[iu]?/]: r#231
[#401 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#231
[#401 /0[xX][0-9a-fA-F]+[iu]?/]: r#231
[#401 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#231
[#401 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#231
[#401 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#231
[#401 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#231
[#401 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#231
[#401 /[1-9][0-9]*[fh]/]: r#231
[#401 /[1-9][0-9]*[iu]?/]: r#231
[#402 '!']: r#232
[#402 '&']: r#232
[#402 '(']: r#232
[#402 '*']: r#232
[#402 '-']: r#232
[#402 'bitcast']: r#232
[#402 'false']: r#232
[#402 'true']: r#232
[#402 '~']: r#232
[#402 /0[fh]/]: r#232
[#402 /0[iu]?/]: r#232
[#402 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#232
[#402 /0[xX][0-9a-fA-F]+[iu]?/]: r#232
[#402 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#232
[#402 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#232
[#402 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#232
[#402 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#232
[#402 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#232
[#402 /[1-9][0-9]*[fh]/]: r#232
[#402 /[1-9][0-9]*[iu]?/]: r#232
[#403 '!']: r#233
[#403 '&']: r#233
[#403 '(']: r#233
[#403 '*']: r#233
[#403 '-']: r#233
[#403 'bitcast']: r#233
[#403 'false']: r#233
[#403 'true']: r#233
[#403 '~']: r#233
[#403 /0[fh]/]: r#233
[#403 /0[iu]?/]: r#233
[#403 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#233
[#403 /0[xX][0-9a-fA-F]+[iu]?/]: r#233
[#403 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#233
[#403 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#233
[#403 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#233
[#403 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#233
[#403 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#233
[#403 /[1-9][0-9]*[fh]/]: r#233
[#403 /[1-9][0-9]*[iu]?/]: r#233
[#404 '!']: r#234
[#404 '&']: r#234
[#404 '(']: r#234
[#404 '*']: r#234
[#404 '-']: r#234
[#404 'bitcast']: r#234
[#404 'false']: r#234
[#404 'true']: r#234
[#404 '~']: r#234
[#404 /0[fh]/]: r#234
[#404 /0[iu]?/]: r#234
[#404 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#234
[#404 /0[xX][0-9a-fA-F]+[iu]?/]: r#234
[#404 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#234
[#404 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#234
[#404 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#234
[#404 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#234
[#404 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#234
[#404 /[1-9][0-9]*[fh]/]: r#234
[#404 /[1-9][0-9]*[iu]?/]: r#234
[#405 '!']: r#235
[#405 '&']: r#235
[#405 '(']: r#235
[#405 '*']: r#235
[#405 '-']: r#235
[#405 'bitcast']: r#235
[#405 'false']: r#235
[#405 'true']: r#235
[#405 '~']: r#235
[#405 /0[fh]/]: r#235
[#405 /0[iu]?/]: r#235
[#405 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#235
[#405 /0[xX][0-9a-fA-F]+[iu]?/]: r#235
[#405 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#235
[#405 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#235
[#405 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#235
[#405 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#235
[#405 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#235
[#405 /[1-9][0-9]*[fh]/]: r#235
[#405 /[1-9][0-9]*[iu]?/]: r#235
[#406 '!']: r#236
[#406 '&']: r#236
[#406 '(']: r#236
[#406 '*']: r#236
[#406 '-']: r#236
[#406 'bitcast']: r#236
[#406 'false']: r#236
[#406 'true']: r#236
[#406 '~']: r#236
[#406 /0[fh]/]: r#236
[#406 /0[iu]?/]: r#236
[#406 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#236
[#406 /0[xX][0-9a-fA-F]+[iu]?/]: r#236
[#406 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#236
[#406 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#236
[#406 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#236
[#406 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#236
[#406 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#236
[#406 /[1-9][0-9]*[fh]/]: r#236
[#406 /[1-9][0-9]*[iu]?/]: r#236
[#407 '!']: r#237
[#407 '&']: r#237
[#407 '(']: r#237
[#407 '*']: r#237
[#407 '-']: r#237
[#407 'bitcast']: r#237
[#407 'false']: r#237
[#407 'true']: r#237
[#407 '~']: r#237
[#407 /0[fh]/]: r#237
[#407 /0[iu]?/]: r#237
[#407 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#237
[#407 /0[xX][0-9a-fA-F]+[iu]?/]: r#237
[#407 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#237
[#407 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#237
[#407 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#237
[#407 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#237
[#407 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#237
[#407 /[1-9][0-9]*[fh]/]: r#237
[#407 /[1-9][0-9]*[iu]?/]: r#237
[#408 '{']: s#173
[#409 '=']: s#507
[#410 '=']: s#506
[#411 '!']: s#63
[#411 '&']: s#66
[#411 '(']: s#78
[#411 '*']: s#65
[#411 '-']: s#62
[#411 'array']: s#82
[#411 'atomic']: s#96
[#411 'bitcast']: s#72
[#411 'bool']: s#89
[#411 'f16']: s#91
[#411 'f32']: s#90
[#411 'false']: s#88
[#411 'i32']: s#92
[#411 'mat2x2']: s#101
[#411 'mat2x3']: s#102
[#411 'mat2x4']: s#103
[#411 'mat3x2']: s#104
[#411 'mat3x3']: s#105
[#411 'mat3x4']: s#106
[#411 'mat4x2']: s#107
[#411 'mat4x3']: s#108
[#411 'mat4x4']: s#109
[#411 'ptr']: s#94
[#411 'sampler']: s#126
[#411 'sampler_comparison']: s#127
[#411 'texture_1d']: s#133
[#411 'texture_2d']: s#134
[#411 'texture_2d_array']: s#135
[#411 'texture_3d']: s#136
[#411 'texture_cube']: s#137
[#411 'texture_cube_array']: s#138
[#411 'texture_depth_2d']: s#128
[#411 'texture_depth_2d_array']: s#129
[#411 'texture_depth_cube']: s#130
[#411 'texture_depth_cube_array']: s#131
[#411 'texture_depth_multisampled_2d']: s#132
[#411 'texture_multisampled_2d']: s#139
[#411 'texture_storage_1d']: s#140
[#411 'texture_storage_2d']: s#141
[#411 'texture_storage_2d_array']: s#142
[#411 'texture_storage_3d']: s#143
[#411 'true']: s#87
[#411 'u32']: s#93
[#411 'vec2']: s#98
[#411 'vec3']: s#99
[#411 'vec4']: s#100
[#411 '~']: s#64
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#411 /0[fh]/]: s#113
[#411 /0[iu]?/]: s#110
[#411 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#411 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#411 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#411 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#411 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#411 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#411 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#411 /[1-9][0-9]*[fh]/]: s#114
[#411 /[1-9][0-9]*[iu]?/]: s#111
[#412 ')']: r#238
[#412 ';']: r#238
[#413 '{']: s#173
[#414 '&']: s#356
[#414 '(']: s#357
[#414 '*']: s#355
[#414 '_']: s#353
[#414 'array']: s#82
[#414 'atomic']: s#96
[#414 'bool']: s#89
[#414 'const']: s#344
[#414 'f16']: s#91
[#414 'f32']: s#90
[#414 'i32']: s#92
[#414 'let']: s#343
[#414 'mat2x2']: s#101
[#414 'mat2x3']: s#102
[#414 'mat2x4']: s#103
[#414 'mat3x2']: s#104
[#414 'mat3x3']: s#105
[#414 'mat3x4']: s#106
[#414 'mat4x2']: s#107
[#414 'mat4x3']: s#108
[#414 'mat4x4']: s#109
[#414 'ptr']: s#94
[#414 'sampler']: s#126
[#414 'sampler_comparison']: s#127
[#414 'texture_1d']: s#133
[#414 'texture_2d']: s#134
[#414 'texture_2d_array']: s#135
[#414 'texture_3d']: s#136
[#414 'texture_cube']: s#137
[#414 'texture_cube_array']: s#138
[#414 'texture_depth_2d']: s#128
[#414 'texture_depth_2d_array']: s#129
[#414 'texture_depth_cube']: s#130
[#414 'texture_depth_cube_array']: s#131
[#414 'texture_depth_multisampled_2d']: s#132
[#414 'texture_multisampled_2d']: s#139
[#414 'texture_storage_1d']: s#140
[#414 'texture_storage_2d']: s#141
[#414 'texture_storage_2d_array']: s#142
[#414 'texture_storage_3d']: s#143
[#414 'u32']: s#93
[#414 'var']: s#152
[#414 'vec2']: s#98
[#414 'vec3']: s#99
[#414 'vec4']: s#100
[#414 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#415 '&']: s#356
[#415 '(']: s#357
[#415 '*']: s#355
[#415 ';']: s#320
[#415 '_']: s#353
[#415 'array']: s#82
[#415 'atomic']: s#96
[#415 'bool']: s#89
[#415 'break']: s#345
[#415 'const']: s#344
[#415 'const_assert']: s#26
[#415 'continue']: s#346
[#415 'discard']: s#331
[#415 'f16']: s#91
[#415 'f32']: s#90
[#415 'for']: s#339
[#415 'i32']: s#92
[#415 'if']: s#350
[#415 'let']: s#343
[#415 'loop']: s#338
[#415 'mat2x2']: s#101
[#415 'mat2x3']: s#102
[#415 'mat2x4']: s#103
[#415 'mat3x2']: s#104
[#415 'mat3x3']: s#105
[#415 'mat3x4']: s#106
[#415 'mat4x2']: s#107
[#415 'mat4x3']: s#108
[#415 'mat4x4']: s#109
[#415 'ptr']: s#94
[#415 'return']: s#335
[#415 'sampler']: s#126
[#415 'sampler_comparison']: s#127
[#415 'switch']: s#337
[#415 'texture_1d']: s#133
[#415 'texture_2d']: s#134
[#415 'texture_2d_array']: s#135
[#415 'texture_3d']: s#136
[#415 'texture_cube']: s#137
[#415 'texture_cube_array']: s#138
[#415 'texture_depth_2d']: s#128
[#415 'texture_depth_2d_array']: s#129
[#415 'texture_depth_cube']: s#130
[#415 'texture_depth_cube_array']: s#131
[#415 'texture_depth_multisampled_2d']: s#132
[#415 'texture_multisampled_2d']: s#139
[#415 'texture_storage_1d']: s#140
[#415 'texture_storage_2d']: s#141
[#415 'texture_storage_2d_array']: s#142
[#415 'texture_storage_3d']: s#143
[#415 'u32']: s#93
[#415 'var']: s#152
[#415 'vec2']: s#98
[#415 'vec3']: s#99
[#415 'vec4']: s#100
[#415 'while']: s#340
[#415 '{']: s#173
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#416 '{']: s#494
[#417 'else']: s#493
[#418 '&']: r#239
[#418 '(']: r#239
[#418 '*']: r#239
[#418 ';']: r#239
[#418 '_']: r#239
[#418 'array']: r#239
[#418 'atomic']: r#239
[#418 'bool']: r#239
[#418 'break']: r#239
[#418 'const']: r#239
[#418 'const_assert']: r#239
[#418 'continue']: r#239
[#418 'continuing']: r#239
[#418 'discard']: r#239
[#418 'else']: r#239
[#418 'f16']: r#239
[#418 'f32']: r#239
[#418 'for']: r#239
[#418 'i32']: r#239
[#418 'if']: r#239
[#418 'let']: r#239
[#418 'loop']: r#239
[#418 'mat2x2']: r#239
[#418 'mat2x3']: r#239
[#418 'mat2x4']: r#239
[#418 'mat3x2']: r#239
[#418 'mat3x3']: r#239
[#418 'mat3x4']: r#239
[#418 'mat4x2']: r#239
[#418 'mat4x3']: r#239
[#418 'mat4x4']: r#239
[#418 'ptr']: r#239
[#418 'return']: r#239
[#418 'sampler']: r#239
[#418 'sampler_comparison']: r#239
[#418 'switch']: r#239
[#418 'texture_1d']: r#239
[#418 'texture_2d']: r#239
[#418 'texture_2d_array']: r#239
[#418 'texture_3d']: r#239
[#418 'texture_cube']: r#239
[#418 'texture_cube_array']: r#239
[#418 'texture_depth_2d']: r#239
[#418 'texture_depth_2d_array']: r#239
[#418 'texture_depth_cube']: r#239
[#418 'texture_depth_cube_array']: r#239
[#418 'texture_depth_multisampled_2d']: r#239
[#418 'texture_multisampled_2d']: r#239
[#418 'texture_storage_1d']: r#239
[#418 'texture_storage_2d']: r#239
[#418 'texture_storage_2d_array']: r#239
[#418 'texture_storage_3d']: r#239
[#418 'u32']: r#239
[#418 'var']: r#239
[#418 'vec2']: r#239
[#418 'vec3']: r#239
[#418 'vec4']: r#239
[#418 'while']: r#239
[#418 '{']: r#239
[#418 '}']: r#239
[#419 'else']: s#420
[#420 'if']: s#489
[#421 ';']: r#240
[#422 ';']: r#241
[#423 '&']: r#242
[#423 '(']: r#242
[#423 '*']: r#242
[#423 ';']: r#242
[#423 '_']: r#242
[#423 'array']: r#242
[#423 'atomic']: r#242
[#423 'bool']: r#242
[#423 'break']: r#242
[#423 'const']: r#242
[#423 'const_assert']: r#242
[#423 'continue']: r#242
[#423 'continuing']: r#242
[#423 'discard']: r#242
[#423 'f16']: r#242
[#423 'f32']: r#242
[#423 'for']: r#242
[#423 'i32']: r#242
[#423 'if']: r#242
[#423 'let']: r#242
[#423 'loop']: r#242
[#423 'mat2x2']: r#242
[#423 'mat2x3']: r#242
[#423 'mat2x4']: r#242
[#423 'mat3x2']: r#242
[#423 'mat3x3']: r#242
[#423 'mat3x4']: r#242
[#423 'mat4x2']: r#242
[#423 'mat4x3']: r#242
[#423 'mat4x4']: r#242
[#423 'ptr']: r#242
[#423 'return']: r#242
[#423 'sampler']: r#242
[#423 'sampler_comparison']: r#242
[#423 'switch']: r#242
[#423 'texture_1d']: r#242
[#423 'texture_2d']: r#242
[#423 'texture_2d_array']: r#242
[#423 'texture_3d']: r#242
[#423 'texture_cube']: r#242
[#423 'texture_cube_array']: r#242
[#423 'texture_depth_2d']: r#242
[#423 'texture_depth_2d_array']: r#242
[#423 'texture_depth_cube']: r#242
[#423 'texture_depth_cube_array']: r#242
[#423 'texture_depth_multisampled_2d']: r#242
[#423 'texture_multisampled_2d']: r#242
[#423 'texture_storage_1d']: r#242
[#423 'texture_storage_2d']: r#242
[#423 'texture_storage_2d_array']: r#242
[#423 'texture_storage_3d']: r#242
[#423 'u32']: r#242
[#423 'var']: r#242
[#423 'vec2']: r#242
[#423 'vec3']: r#242
[#423 'vec4']: r#242
[#423 'while']: r#242
[#423 '{']: r#242
[#423 '}']: r#242
[#424 '&']: r#243
[#424 '(']: r#243
[#424 '*']: r#243
[#424 ';']: r#243
[#424 '_']: r#243
[#424 'array']: r#243
[#424 'atomic']: r#243
[#424 'bool']: r#243
[#424 'break']: r#243
[#424 'const']: r#243
[#424 'const_assert']: r#243
[#424 'continue']: r#243
[#424 'continuing']: r#243
[#424 'discard']: r#243
[#424 'f16']: r#243
[#424 'f32']: r#243
[#424 'for']: r#243
[#424 'i32']: r#243
[#424 'if']: r#243
[#424 'let']: r#243
[#424 'loop']: r#243
[#424 'mat2x2']: r#243
[#424 'mat2x3']: r#243
[#424 'mat2x4']: r#243
[#424 'mat3x2']: r#243
[#424 'mat3x3']: r#243
[#424 'mat3x4']: r#243
[#424 'mat4x2']: r#243
[#424 'mat4x3']: r#243
[#424 'mat4x4']: r#243
[#424 'ptr']: r#243
[#424 'return']: r#243
[#424 'sampler']: r#243
[#424 'sampler_comparison']: r#243
[#424 'switch']: r#243
[#424 'texture_1d']: r#243
[#424 'texture_2d']: r#243
[#424 'texture_2d_array']: r#243
[#424 'texture_3d']: r#243
[#424 'texture_cube']: r#243
[#424 'texture_cube_array']: r#243
[#424 'texture_depth_2d']: r#243
[#424 'texture_depth_2d_array']: r#243
[#424 'texture_depth_cube']: r#243
[#424 'texture_depth_cube_array']: r#243
[#424 'texture_depth_multisampled_2d']: r#243
[#424 'texture_multisampled_2d']: r#243
[#424 'texture_storage_1d']: r#243
[#424 'texture_storage_2d']: r#243
[#424 'texture_storage_2d_array']: r#243
[#424 'texture_storage_3d']: r#243
[#424 'u32']: r#243
[#424 'var']: r#243
[#424 'vec2']: r#243
[#424 'vec3']: r#243
[#424 'vec4']: r#243
[#424 'while']: r#243
[#424 '{']: r#243
[#424 '}']: r#243
[#425 '&']: r#244
[#425 '(']: r#244
[#425 '*']: r#244
[#425 ';']: r#244
[#425 '_']: r#244
[#425 'array']: r#244
[#425 'atomic']: r#244
[#425 'bool']: r#244
[#425 'break']: r#244
[#425 'const']: r#244
[#425 'const_assert']: r#244
[#425 'continue']: r#244
[#425 'continuing']: r#244
[#425 'discard']: r#244
[#425 'f16']: r#244
[#425 'f32']: r#244
[#425 'for']: r#244
[#425 'i32']: r#244
[#425 'if']: r#244
[#425 'let']: r#244
[#425 'loop']: r#244
[#425 'mat2x2']: r#244
[#425 'mat2x3']: r#244
[#425 'mat2x4']: r#244
[#425 'mat3x2']: r#244
[#425 'mat3x3']: r#244
[#425 'mat3x4']: r#244
[#425 'mat4x2']: r#244
[#425 'mat4x3']: r#244
[#425 'mat4x4']: r#244
[#425 'ptr']: r#244
[#425 'return']: r#244
[#425 'sampler']: r#244
[#425 'sampler_comparison']: r#244
[#425 'switch']: r#244
[#425 'texture_1d']: r#244
[#425 'texture_2d']: r#244
[#425 'texture_2d_array']: r#244
[#425 'texture_3d']: r#244
[#425 'texture_cube']: r#244
[#425 'texture_cube_array']: r#244
[#425 'texture_depth_2d']: r#244
[#425 'texture_depth_2d_array']: r#244
[#425 'texture_depth_cube']: r#244
[#425 'texture_depth_cube_array']: r#244
[#425 'texture_depth_multisampled_2d']: r#244
[#425 'texture_multisampled_2d']: r#244
[#425 'texture_storage_1d']: r#244
[#425 'texture_storage_2d']: r#244
[#425 'texture_storage_2d_array']: r#244
[#425 'texture_storage_3d']: r#244
[#425 'u32']: r#244
[#425 'var']: r#244
[#425 'vec2']: r#244
[#425 'vec3']: r#244
[#425 'vec4']: r#244
[#425 'while']: r#244
[#425 '{']: r#244
[#425 '}']: r#244
[#426 '&']: r#245
[#426 '(']: r#245
[#426 '*']: r#245
[#426 ';']: r#245
[#426 '_']: r#245
[#426 'array']: r#245
[#426 'atomic']: r#245
[#426 'bool']: r#245
[#426 'break']: r#245
[#426 'const']: r#245
[#426 'const_assert']: r#245
[#426 'continue']: r#245
[#426 'continuing']: r#245
[#426 'discard']: r#245
[#426 'f16']: r#245
[#426 'f32']: r#245
[#426 'for']: r#245
[#426 'i32']: r#245
[#426 'if']: r#245
[#426 'let']: r#245
[#426 'loop']: r#245
[#426 'mat2x2']: r#245
[#426 'mat2x3']: r#245
[#426 'mat2x4']: r#245
[#426 'mat3x2']: r#245
[#426 'mat3x3']: r#245
[#426 'mat3x4']: r#245
[#426 'mat4x2']: r#245
[#426 'mat4x3']: r#245
[#426 'mat4x4']: r#245
[#426 'ptr']: r#245
[#426 'return']: r#245
[#426 'sampler']: r#245
[#426 'sampler_comparison']: r#245
[#426 'switch']: r#245
[#426 'texture_1d']: r#245
[#426 'texture_2d']: r#245
[#426 'texture_2d_array']: r#245
[#426 'texture_3d']: r#245
[#426 'texture_cube']: r#245
[#426 'texture_cube_array']: r#245
[#426 'texture_depth_2d']: r#245
[#426 'texture_depth_2d_array']: r#245
[#426 'texture_depth_cube']: r#245
[#426 'texture_depth_cube_array']: r#245
[#426 'texture_depth_multisampled_2d']: r#245
[#426 'texture_multisampled_2d']: r#245
[#426 'texture_storage_1d']: r#245
[#426 'texture_storage_2d']: r#245
[#426 'texture_storage_2d_array']: r#245
[#426 'texture_storage_3d']: r#245
[#426 'u32']: r#245
[#426 'var']: r#245
[#426 'vec2']: r#245
[#426 'vec3']: r#245
[#426 'vec4']: r#245
[#426 'while']: r#245
[#426 '{']: r#245
[#426 '}']: r#245
[#427 '&']: r#246
[#427 '(']: r#246
[#427 '*']: r#246
[#427 ';']: r#246
[#427 '_']: r#246
[#427 'array']: r#246
[#427 'atomic']: r#246
[#427 'bool']: r#246
[#427 'break']: r#246
[#427 'const']: r#246
[#427 'const_assert']: r#246
[#427 'continue']: r#246
[#427 'continuing']: r#246
[#427 'discard']: r#246
[#427 'f16']: r#246
[#427 'f32']: r#246
[#427 'for']: r#246
[#427 'i32']: r#246
[#427 'if']: r#246
[#427 'let']: r#246
[#427 'loop']: r#246
[#427 'mat2x2']: r#246
[#427 'mat2x3']: r#246
[#427 'mat2x4']: r#246
[#427 'mat3x2']: r#246
[#427 'mat3x3']: r#246
[#427 'mat3x4']: r#246
[#427 'mat4x2']: r#246
[#427 'mat4x3']: r#246
[#427 'mat4x4']: r#246
[#427 'ptr']: r#246
[#427 'return']: r#246
[#427 'sampler']: r#246
[#427 'sampler_comparison']: r#246
[#427 'switch']: r#246
[#427 'texture_1d']: r#246
[#427 'texture_2d']: r#246
[#427 'texture_2d_array']: r#246
[#427 'texture_3d']: r#246
[#427 'texture_cube']: r#246
[#427 'texture_cube_array']: r#246
[#427 'texture_depth_2d']: r#246
[#427 'texture_depth_2d_array']: r#246
[#427 'texture_depth_cube']: r#246
[#427 'texture_depth_cube_array']: r#246
[#427 'texture_depth_multisampled_2d']: r#246
[#427 'texture_multisampled_2d']: r#246
[#427 'texture_storage_1d']: r#246
[#427 'texture_storage_2d']: r#246
[#427 'texture_storage_2d_array']: r#246
[#427 'texture_storage_3d']: r#246
[#427 'u32']: r#246
[#427 'var']: r#246
[#427 'vec2']: r#246
[#427 'vec3']: r#246
[#427 'vec4']: r#246
[#427 'while']: r#246
[#427 '{']: r#246
[#427 '}']: r#246
[#428 '&']: r#247
[#428 '(']: r#247
[#428 '*']: r#247
[#428 ';']: r#247
[#428 '_']: r#247
[#428 'array']: r#247
[#428 'atomic']: r#247
[#428 'bool']: r#247
[#428 'break']: r#247
[#428 'const']: r#247
[#428 'const_assert']: r#247
[#428 'continue']: r#247
[#428 'continuing']: r#247
[#428 'discard']: r#247
[#428 'f16']: r#247
[#428 'f32']: r#247
[#428 'for']: r#247
[#428 'i32']: r#247
[#428 'if']: r#247
[#428 'let']: r#247
[#428 'loop']: r#247
[#428 'mat2x2']: r#247
[#428 'mat2x3']: r#247
[#428 'mat2x4']: r#247
[#428 'mat3x2']: r#247
[#428 'mat3x3']: r#247
[#428 'mat3x4']: r#247
[#428 'mat4x2']: r#247
[#428 'mat4x3']: r#247
[#428 'mat4x4']: r#247
[#428 'ptr']: r#247
[#428 'return']: r#247
[#428 'sampler']: r#247
[#428 'sampler_comparison']: r#247
[#428 'switch']: r#247
[#428 'texture_1d']: r#247
[#428 'texture_2d']: r#247
[#428 'texture_2d_array']: r#247
[#428 'texture_3d']: r#247
[#428 'texture_cube']: r#247
[#428 'texture_cube_array']: r#247
[#428 'texture_depth_2d']: r#247
[#428 'texture_depth_2d_array']: r#247
[#428 'texture_depth_cube']: r#247
[#428 'texture_depth_cube_array']: r#247
[#428 'texture_depth_multisampled_2d']: r#247
[#428 'texture_multisampled_2d']: r#247
[#428 'texture_storage_1d']: r#247
[#428 'texture_storage_2d']: r#247
[#428 'texture_storage_2d_array']: r#247
[#428 'texture_storage_3d']: r#247
[#428 'u32']: r#247
[#428 'var']: r#247
[#428 'vec2']: r#247
[#428 'vec3']: r#247
[#428 'vec4']: r#247
[#428 'while']: r#247
[#428 '{']: r#247
[#428 '}']: r#247
[#429 '&']: r#248
[#429 '(']: r#248
[#429 '*']: r#248
[#429 ';']: r#248
[#429 '_']: r#248
[#429 'array']: r#248
[#429 'atomic']: r#248
[#429 'bool']: r#248
[#429 'break']: r#248
[#429 'const']: r#248
[#429 'const_assert']: r#248
[#429 'continue']: r#248
[#429 'continuing']: r#248
[#429 'discard']: r#248
[#429 'f16']: r#248
[#429 'f32']: r#248
[#429 'for']: r#248
[#429 'i32']: r#248
[#429 'if']: r#248
[#429 'let']: r#248
[#429 'loop']: r#248
[#429 'mat2x2']: r#248
[#429 'mat2x3']: r#248
[#429 'mat2x4']: r#248
[#429 'mat3x2']: r#248
[#429 'mat3x3']: r#248
[#429 'mat3x4']: r#248
[#429 'mat4x2']: r#248
[#429 'mat4x3']: r#248
[#429 'mat4x4']: r#248
[#429 'ptr']: r#248
[#429 'return']: r#248
[#429 'sampler']: r#248
[#429 'sampler_comparison']: r#248
[#429 'switch']: r#248
[#429 'texture_1d']: r#248
[#429 'texture_2d']: r#248
[#429 'texture_2d_array']: r#248
[#429 'texture_3d']: r#248
[#429 'texture_cube']: r#248
[#429 'texture_cube_array']: r#248
[#429 'texture_depth_2d']: r#248
[#429 'texture_depth_2d_array']: r#248
[#429 'texture_depth_cube']: r#248
[#429 'texture_depth_cube_array']: r#248
[#429 'texture_depth_multisampled_2d']: r#248
[#429 'texture_multisampled_2d']: r#248
[#429 'texture_storage_1d']: r#248
[#429 'texture_storage_2d']: r#248
[#429 'texture_storage_2d_array']: r#248
[#429 'texture_storage_3d']: r#248
[#429 'u32']: r#248
[#429 'var']: r#248
[#429 'vec2']: r#248
[#429 'vec3']: r#248
[#429 'vec4']: r#248
[#429 'while']: r#248
[#429 '{']: r#248
[#429 '}']: r#248
[#430 '&']: r#249
[#430 '(']: r#249
[#430 '*']: r#249
[#430 ';']: r#249
[#430 '_']: r#249
[#430 'array']: r#249
[#430 'atomic']: r#249
[#430 'bool']: r#249
[#430 'break']: r#249
[#430 'const']: r#249
[#430 'const_assert']: r#249
[#430 'continue']: r#249
[#430 'continuing']: r#249
[#430 'discard']: r#249
[#430 'f16']: r#249
[#430 'f32']: r#249
[#430 'for']: r#249
[#430 'i32']: r#249
[#430 'if']: r#249
[#430 'let']: r#249
[#430 'loop']: r#249
[#430 'mat2x2']: r#249
[#430 'mat2x3']: r#249
[#430 'mat2x4']: r#249
[#430 'mat3x2']: r#249
[#430 'mat3x3']: r#249
[#430 'mat3x4']: r#249
[#430 'mat4x2']: r#249
[#430 'mat4x3']: r#249
[#430 'mat4x4']: r#249
[#430 'ptr']: r#249
[#430 'return']: r#249
[#430 'sampler']: r#249
[#430 'sampler_comparison']: r#249
[#430 'switch']: r#249
[#430 'texture_1d']: r#249
[#430 'texture_2d']: r#249
[#430 'texture_2d_array']: r#249
[#430 'texture_3d']: r#249
[#430 'texture_cube']: r#249
[#430 'texture_cube_array']: r#249
[#430 'texture_depth_2d']: r#249
[#430 'texture_depth_2d_array']: r#249
[#430 'texture_depth_cube']: r#249
[#430 'texture_depth_cube_array']: r#249
[#430 'texture_depth_multisampled_2d']: r#249
[#430 'texture_multisampled_2d']: r#249
[#430 'texture_storage_1d']: r#249
[#430 'texture_storage_2d']: r#249
[#430 'texture_storage_2d_array']: r#249
[#430 'texture_storage_3d']: r#249
[#430 'u32']: r#249
[#430 'var']: r#249
[#430 'vec2']: r#249
[#430 'vec3']: r#249
[#430 'vec4']: r#249
[#430 'while']: r#249
[#430 '{']: r#249
[#430 '}']: r#249
[#431 '}']: r#250
[#432 '&']: r#251
[#432 '(']: r#251
[#432 '*']: r#251
[#432 ';']: r#251
[#432 '@']: r#251
[#432 '_']: r#251
[#432 'alias']: r#251
[#432 'array']: r#251
[#432 'atomic']: r#251
[#432 'bool']: r#251
[#432 'break']: r#251
[#432 'case']: r#251
[#432 'const']: r#251
[#432 'const_assert']: r#251
[#432 'continue']: r#251
[#432 'continuing']: r#251
[#432 'default']: r#251
[#432 'discard']: r#251
[#432 'else']: r#251
[#432 'f16']: r#251
[#432 'f32']: r#251
[#432 'fn']: r#251
[#432 'for']: r#251
[#432 'i32']: r#251
[#432 'if']: r#251
[#432 'let']: r#251
[#432 'loop']: r#251
[#432 'mat2x2']: r#251
[#432 'mat2x3']: r#251
[#432 'mat2x4']: r#251
[#432 'mat3x2']: r#251
[#432 'mat3x3']: r#251
[#432 'mat3x4']: r#251
[#432 'mat4x2']: r#251
[#432 'mat4x3']: r#251
[#432 'mat4x4']: r#251
[#432 'override']: r#251
[#432 'ptr']: r#251
[#432 'return']: r#251
[#432 'sampler']: r#251
[#432 'sampler_comparison']: r#251
[#432 'struct']: r#251
[#432 'switch']: r#251
[#432 'texture_1d']: r#251
[#432 'texture_2d']: r#251
[#432 'texture_2d_array']: r#251
[#432 'texture_3d']: r#251
[#432 'texture_cube']: r#251
[#432 'texture_cube_array']: r#251
[#432 'texture_depth_2d']: r#251
[#432 'texture_depth_2d_array']: r#251
[#432 'texture_depth_cube']: r#251
[#432 'texture_depth_cube_array']: r#251
[#432 'texture_depth_multisampled_2d']: r#251
[#432 'texture_multisampled_2d']: r#251
[#432 'texture_storage_1d']: r#251
[#432 'texture_storage_2d']: r#251
[#432 'texture_storage_2d_array']: r#251
[#432 'texture_storage_3d']: r#251
[#432 'u32']: r#251
[#432 'var']: r#251
[#432 'vec2']: r#251
[#432 'vec3']: r#251
[#432 'vec4']: r#251
[#432 'while']: r#251
[#432 '{']: r#251
[#432 '}']: r#251
[#432 EndOfText]: r#251
[#433 'read']: s#486
[#433 'read_write']: s#488
[#433 'write']: s#487
[#434 '(']: r#252
[#434 ')']: r#252
[#434 ',']: r#252
[#434 ';']: r#252
[#434 '=']: r#252
[#434 '>']: r#252
[#434 '{']: r#252
[#434 '}']: r#252
[#435 '(']: r#253
[#435 ')']: r#253
[#435 ',']: r#253
[#435 ';']: r#253
[#435 '=']: r#253
[#435 '>']: r#253
[#435 '{']: r#253
[#435 '}']: r#253
[#436 '(']: r#254
[#436 ')']: r#254
[#436 ',']: r#254
[#436 ';']: r#254
[#436 '=']: r#254
[#436 '>']: r#254
[#436 '{']: r#254
[#436 '}']: r#254
[#437 'array']: s#282
[#437 'atomic']: s#96
[#437 'bool']: s#89
[#437 'f16']: s#91
[#437 'f32']: s#90
[#437 'i32']: s#92
[#437 'mat2x2']: s#101
[#437 'mat2x3']: s#102
[#437 'mat2x4']: s#103
[#437 'mat3x2']: s#104
[#437 'mat3x3']: s#105
[#437 'mat3x4']: s#106
[#437 'mat4x2']: s#107
[#437 'mat4x3']: s#108
[#437 'mat4x4']: s#109
[#437 'ptr']: s#94
[#437 'sampler']: s#126
[#437 'sampler_comparison']: s#127
[#437 'texture_1d']: s#133
[#437 'texture_2d']: s#134
[#437 'texture_2d_array']: s#135
[#437 'texture_3d']: s#136
[#437 'texture_cube']: s#137
[#437 'texture_cube_array']: s#138
[#437 'texture_depth_2d']: s#128
[#437 'texture_depth_2d_array']: s#129
[#437 'texture_depth_cube']: s#130
[#437 'texture_depth_cube_array']: s#131
[#437 'texture_depth_multisampled_2d']: s#132
[#437 'texture_multisampled_2d']: s#139
[#437 'texture_storage_1d']: s#140
[#437 'texture_storage_2d']: s#141
[#437 'texture_storage_2d_array']: s#142
[#437 'texture_storage_3d']: s#143
[#437 'u32']: s#93
[#437 'vec2']: s#98
[#437 'vec3']: s#99
[#437 'vec4']: s#100
[#437 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#438 '>']: s#483
[#439 '!']: s#63
[#439 '&']: s#66
[#439 '(']: s#78
[#439 '*']: s#65
[#439 '-']: s#62
[#439 'array']: s#82
[#439 'atomic']: s#96
[#439 'bitcast']: s#72
[#439 'bool']: s#89
[#439 'f16']: s#91
[#439 'f32']: s#90
[#439 'false']: s#88
[#439 'i32']: s#92
[#439 'mat2x2']: s#101
[#439 'mat2x3']: s#102
[#439 'mat2x4']: s#103
[#439 'mat3x2']: s#104
[#439 'mat3x3']: s#105
[#439 'mat3x4']: s#106
[#439 'mat4x2']: s#107
[#439 'mat4x3']: s#108
[#439 'mat4x4']: s#109
[#439 'ptr']: s#94
[#439 'sampler']: s#126
[#439 'sampler_comparison']: s#127
[#439 'texture_1d']: s#133
[#439 'texture_2d']: s#134
[#439 'texture_2d_array']: s#135
[#439 'texture_3d']: s#136
[#439 'texture_cube']: s#137
[#439 'texture_cube_array']: s#138
[#439 'texture_depth_2d']: s#128
[#439 'texture_depth_2d_array']: s#129
[#439 'texture_depth_cube']: s#130
[#439 'texture_depth_cube_array']: s#131
[#439 'texture_depth_multisampled_2d']: s#132
[#439 'texture_multisampled_2d']: s#139
[#439 'texture_storage_1d']: s#140
[#439 'texture_storage_2d']: s#141
[#439 'texture_storage_2d_array']: s#142
[#439 'texture_storage_3d']: s#143
[#439 'true']: s#87
[#439 'u32']: s#93
[#439 'vec2']: s#98
[#439 'vec3']: s#99
[#439 'vec4']: s#100
[#439 '~']: s#64
[#439 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#439 /0[fh]/]: s#113
[#439 /0[iu]?/]: s#110
[#439 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#439 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#439 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#439 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#439 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#439 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#439 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#439 /[1-9][0-9]*[fh]/]: s#114
[#439 /[1-9][0-9]*[iu]?/]: s#111
[#440 '(']: r#255
[#440 ')']: r#255
[#440 ',']: r#255
[#440 ';']: r#255
[#440 '=']: r#255
[#440 '>']: r#255
[#440 '{']: r#255
[#440 '}']: r#255
[#441 '(']: r#256
[#441 ')']: r#256
[#441 ',']: r#256
[#441 ';']: r#256
[#441 '=']: r#256
[#441 '>']: r#256
[#441 '{']: r#256
[#441 '}']: r#256
[#442 ',']: s#478
[#443 ')']: r#257
[#443 ',']: r#257
[#444 ',']: s#445
[#445 '!']: s#63
[#445 '&']: s#66
[#445 '(']: s#78
[#445 '*']: s#65
[#445 '-']: s#62
[#445 'array']: s#82
[#445 'atomic']: s#96
[#445 'bitcast']: s#72
[#445 'bool']: s#89
[#445 'f16']: s#91
[#445 'f32']: s#90
[#445 'false']: s#88
[#445 'i32']: s#92
[#445 'mat2x2']: s#101
[#445 'mat2x3']: s#102
[#445 'mat2x4']: s#103
[#445 'mat3x2']: s#104
[#445 'mat3x3']: s#105
[#445 'mat3x4']: s#106
[#445 'mat4x2']: s#107
[#445 'mat4x3']: s#108
[#445 'mat4x4']: s#109
[#445 'ptr']: s#94
[#445 'sampler']: s#126
[#445 'sampler_comparison']: s#127
[#445 'texture_1d']: s#133
[#445 'texture_2d']: s#134
[#445 'texture_2d_array']: s#135
[#445 'texture_3d']: s#136
[#445 'texture_cube']: s#137
[#445 'texture_cube_array']: s#138
[#445 'texture_depth_2d']: s#128
[#445 'texture_depth_2d_array']: s#129
[#445 'texture_depth_cube']: s#130
[#445 'texture_depth_cube_array']: s#131
[#445 'texture_depth_multisampled_2d']: s#132
[#445 'texture_multisampled_2d']: s#139
[#445 'texture_storage_1d']: s#140
[#445 'texture_storage_2d']: s#141
[#445 'texture_storage_2d_array']: s#142
[#445 'texture_storage_3d']: s#143
[#445 'true']: s#87
[#445 'u32']: s#93
[#445 'vec2']: s#98
[#445 'vec3']: s#99
[#445 'vec4']: s#100
[#445 '~']: s#64
[#445 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#445 /0[fh]/]: s#113
[#445 /0[iu]?/]: s#110
[#445 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#445 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#445 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#445 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#445 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#445 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#445 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#445 /[1-9][0-9]*[fh]/]: s#114
[#445 /[1-9][0-9]*[iu]?/]: s#111
[#446 '!=']: r#258
[#446 '%']: r#258
[#446 '&&']: r#258
[#446 '&']: r#258
[#446 ')']: r#258
[#446 '*']: r#258
[#446 '+']: r#258
[#446 ',']: r#258
[#446 '-']: r#258
[#446 '.']: r#258
[#446 '/']: r#258
[#446 ':']: r#258
[#446 ';']: r#258
[#446 '<']: r#258
[#446 '<<']: r#258
[#446 '<=']: r#258
[#446 '==']: r#258
[#446 '>']: r#258
[#446 '>=']: r#258
[#446 '>>']: r#258
[#446 '[']: r#258
[#446 ']']: r#258
[#446 '^']: r#258
[#446 '{']: r#258
[#446 '|']: r#258
[#446 '||']: r#258
[#447 '(']: s#78
[#448 '.']: s#189
[#448 '[']: s#188
[#449 '!=']: r#259
[#449 '%']: r#259
[#449 '%=']: r#259
[#449 '&&']: r#259
[#449 '&']: r#259
[#449 '&=']: r#259
[#449 ')']: r#259
[#449 '*']: r#259
[#449 '*=']: r#259
[#449 '+']: r#259
[#449 '++']: r#259
[#449 '+=']: r#259
[#449 ',']: r#259
[#449 '-']: r#259
[#449 '--']: r#259
[#449 '-=']: r#259
[#449 '/']: r#259
[#449 '/=']: r#259
[#449 ':']: r#259
[#449 ';']: r#259
[#449 '<']: r#259
[#449 '<<']: r#259
[#449 '<<=']: r#259
[#449 '<=']: r#259
[#449 '=']: r#259
[#449 '==']: r#259
[#449 '>']: r#259
[#449 '>=']: r#259
[#449 '>>']: r#259
[#449 '>>=']: r#259
[#449 ']']: r#259
[#449 '^']: r#259
[#449 '^=']: r#259
[#449 '{']: r#259
[#449 '|']: r#259
[#449 '|=']: r#259
[#449 '||']: r#259
[#450 '!=']: r#260
[#450 '%']: r#260
[#450 '%=']: r#260
[#450 '&&']: r#260
[#450 '&']: r#260
[#450 '&=']: r#260
[#450 ')']: r#260
[#450 '*']: r#260
[#450 '*=']: r#260
[#450 '+']: r#260
[#450 '++']: r#260
[#450 '+=']: r#260
[#450 ',']: r#260
[#450 '-']: r#260
[#450 '--']: r#260
[#450 '-=']: r#260
[#450 '/']: r#260
[#450 '/=']: r#260
[#450 ':']: r#260
[#450 ';']: r#260
[#450 '<']: r#260
[#450 '<<']: r#260
[#450 '<<=']: r#260
[#450 '<=']: r#260
[#450 '=']: r#260
[#450 '==']: r#260
[#450 '>']: r#260
[#450 '>=']: r#260
[#450 '>>']: r#260
[#450 '>>=']: r#260
[#450 ']']: r#260
[#450 '^']: r#260
[#450 '^=']: r#260
[#450 '{']: r#260
[#450 '|']: r#260
[#450 '|=']: r#260
[#450 '||']: r#260
[#451 '!=']: r#261
[#451 '%']: r#261
[#451 '%=']: r#261
[#451 '&&']: r#261
[#451 '&']: r#261
[#451 '&=']: r#261
[#451 ')']: r#261
[#451 '*']: r#261
[#451 '*=']: r#261
[#451 '+']: r#261
[#451 '++']: r#261
[#451 '+=']: r#261
[#451 ',']: r#261
[#451 '-']: r#261
[#451 '--']: r#261
[#451 '-=']: r#261
[#451 '/']: r#261
[#451 '/=']: r#261
[#451 ':']: r#261
[#451 ';']: r#261
[#451 '<']: r#261
[#451 '<<']: r#261
[#451 '<<=']: r#261
[#451 '<=']: r#261
[#451 '=']: r#261
[#451 '==']: r#261
[#451 '>']: r#261
[#451 '>=']: r#261
[#451 '>>']: r#261
[#451 '>>=']: r#261
[#451 ']']: r#261
[#451 '^']: r#261
[#451 '^=']: r#261
[#451 '{']: r#261
[#451 '|']: r#261
[#451 '|=']: r#261
[#451 '||']: r#261
[#452 '!=']: r#262
[#452 '%']: r#262
[#452 '%=']: r#262
[#452 '&&']: r#262
[#452 '&']: r#262
[#452 '&=']: r#262
[#452 ')']: r#262
[#452 '*']: r#262
[#452 '*=']: r#262
[#452 '+']: r#262
[#452 '++']: r#262
[#452 '+=']: r#262
[#452 ',']: r#262
[#452 '-']: r#262
[#452 '--']: r#262
[#452 '-=']: r#262
[#452 '/']: r#262
[#452 '/=']: r#262
[#452 ':']: r#262
[#452 ';']: r#262
[#452 '<']: r#262
[#452 '<<']: r#262
[#452 '<<=']: r#262
[#452 '<=']: r#262
[#452 '=']: r#262
[#452 '==']: r#262
[#452 '>']: r#262
[#452 '>=']: r#262
[#452 '>>']: r#262
[#452 '>>=']: r#262
[#452 ']']: r#262
[#452 '^']: r#262
[#452 '^=']: r#262
[#452 '{']: r#262
[#452 '|']: r#262
[#452 '|=']: r#262
[#452 '||']: r#262
[#453 '@']: r#263
[#453 'array']: r#263
[#453 'atomic']: r#263
[#453 'bool']: r#263
[#453 'f16']: r#263
[#453 'f32']: r#263
[#453 'fn']: r#263
[#453 'i32']: r#263
[#453 'mat2x2']: r#263
[#453 'mat2x3']: r#263
[#453 'mat2x4']: r#263
[#453 'mat3x2']: r#263
[#453 'mat3x3']: r#263
[#453 'mat3x4']: r#263
[#453 'mat4x2']: r#263
[#453 'mat4x3']: r#263
[#453 'mat4x4']: r#263
[#453 'override']: r#263
[#453 'ptr']: r#263
[#453 'sampler']: r#263
[#453 'sampler_comparison']: r#263
[#453 'texture_1d']: r#263
[#453 'texture_2d']: r#263
[#453 'texture_2d_array']: r#263
[#453 'texture_3d']: r#263
[#453 'texture_cube']: r#263
[#453 'texture_cube_array']: r#263
[#453 'texture_depth_2d']: r#263
[#453 'texture_depth_2d_array']: r#263
[#453 'texture_depth_cube']: r#263
[#453 'texture_depth_cube_array']: r#263
[#453 'texture_depth_multisampled_2d']: r#263
[#453 'texture_multisampled_2d']: r#263
[#453 'texture_storage_1d']: r#263
[#453 'texture_storage_2d']: r#263
[#453 'texture_storage_2d_array']: r#263
[#453 'texture_storage_3d']: r#263
[#453 'u32']: r#263
[#453 'var']: r#263
[#453 'vec2']: r#263
[#453 'vec3']: r#263
[#453 'vec4']: r#263
[#454 '!']: s#63
[#454 '&']: s#66
[#454 '(']: s#78
[#454 ')']: r#264
[#454 '*']: s#65
[#454 '-']: s#62
[#454 'array']: s#82
[#454 'atomic']: s#96
[#454 'bitcast']: s#72
[#454 'bool']: s#89
[#454 'f16']: s#91
[#454 'f32']: s#90
[#454 'false']: s#88
[#454 'i32']: s#92
[#454 'mat2x2']: s#101
[#454 'mat2x3']: s#102
[#454 'mat2x4']: s#103
[#454 'mat3x2']: s#104
[#454 'mat3x3']: s#105
[#454 'mat3x4']: s#106
[#454 'mat4x2']: s#107
[#454 'mat4x3']: s#108
[#454 'mat4x4']: s#109
[#454 'ptr']: s#94
[#454 'sampler']: s#126
[#454 'sampler_comparison']: s#127
[#454 'texture_1d']: s#133
[#454 'texture_2d']: s#134
[#454 'texture_2d_array']: s#135
[#454 'texture_3d']: s#136
[#454 'texture_cube']: s#137
[#454 'texture_cube_array']: s#138
[#454 'texture_depth_2d']: s#128
[#454 'texture_depth_2d_array']: s#129
[#454 'texture_depth_cube']: s#130
[#454 'texture_depth_cube_array']: s#131
[#454 'texture_depth_multisampled_2d']: s#132
[#454 'texture_multisampled_2d']: s#139
[#454 'texture_storage_1d']: s#140
[#454 'texture_storage_2d']: s#141
[#454 'texture_storage_2d_array']: s#142
[#454 'texture_storage_3d']: s#143
[#454 'true']: s#87
[#454 'u32']: s#93
[#454 'vec2']: s#98
[#454 'vec3']: s#99
[#454 'vec4']: s#100
[#454 '~']: s#64
[#454 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#454 /0[fh]/]: s#113
[#454 /0[iu]?/]: s#110
[#454 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#454 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#454 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#454 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#454 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#454 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#454 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#454 /[1-9][0-9]*[fh]/]: s#114
[#454 /[1-9][0-9]*[iu]?/]: s#111
[#455 ')']: s#470
[#456 '@']: r#265
[#456 'array']: r#265
[#456 'atomic']: r#265
[#456 'bool']: r#265
[#456 'f16']: r#265
[#456 'f32']: r#265
[#456 'fn']: r#265
[#456 'i32']: r#265
[#456 'mat2x2']: r#265
[#456 'mat2x3']: r#265
[#456 'mat2x4']: r#265
[#456 'mat3x2']: r#265
[#456 'mat3x3']: r#265
[#456 'mat3x4']: r#265
[#456 'mat4x2']: r#265
[#456 'mat4x3']: r#265
[#456 'mat4x4']: r#265
[#456 'override']: r#265
[#456 'ptr']: r#265
[#456 'sampler']: r#265
[#456 'sampler_comparison']: r#265
[#456 'texture_1d']: r#265
[#456 'texture_2d']: r#265
[#456 'texture_2d_array']: r#265
[#456 'texture_3d']: r#265
[#456 'texture_cube']: r#265
[#456 'texture_cube_array']: r#265
[#456 'texture_depth_2d']: r#265
[#456 'texture_depth_2d_array']: r#265
[#456 'texture_depth_cube']: r#265
[#456 'texture_depth_cube_array']: r#265
[#456 'texture_depth_multisampled_2d']: r#265
[#456 'texture_multisampled_2d']: r#265
[#456 'texture_storage_1d']: r#265
[#456 'texture_storage_2d']: r#265
[#456 'texture_storage_2d_array']: r#265
[#456 'texture_storage_3d']: r#265
[#456 'u32']: r#265
[#456 'var']: r#265
[#456 'vec2']: r#265
[#456 'vec3']: r#265
[#456 'vec4']: r#265
[#457 ')']: r#264
[#458 '@']: r#266
[#458 'array']: r#266
[#458 'atomic']: r#266
[#458 'bool']: r#266
[#458 'f16']: r#266
[#458 'f32']: r#266
[#458 'fn']: r#266
[#458 'i32']: r#266
[#458 'mat2x2']: r#266
[#458 'mat2x3']: r#266
[#458 'mat2x4']: r#266
[#458 'mat3x2']: r#266
[#458 'mat3x3']: r#266
[#458 'mat3x4']: r#266
[#458 'mat4x2']: r#266
[#458 'mat4x3']: r#266
[#458 'mat4x4']: r#266
[#458 'override']: r#266
[#458 'ptr']: r#266
[#458 'sampler']: r#266
[#458 'sampler_comparison']: r#266
[#458 'texture_1d']: r#266
[#458 'texture_2d']: r#266
[#458 'texture_2d_array']: r#266
[#458 'texture_3d']: r#266
[#458 'texture_cube']: r#266
[#458 'texture_cube_array']: r#266
[#458 'texture_depth_2d']: r#266
[#458 'texture_depth_2d_array']: r#266
[#458 'texture_depth_cube']: r#266
[#458 'texture_depth_cube_array']: r#266
[#458 'texture_depth_multisampled_2d']: r#266
[#458 'texture_multisampled_2d']: r#266
[#458 'texture_storage_1d']: r#266
[#458 'texture_storage_2d']: r#266
[#458 'texture_storage_2d_array']: r#266
[#458 'texture_storage_3d']: r#266
[#458 'u32']: r#266
[#458 'var']: r#266
[#458 'vec2']: r#266
[#458 'vec3']: r#266
[#458 'vec4']: r#266
[#459 '@']: r#267
[#459 'array']: r#267
[#459 'atomic']: r#267
[#459 'bool']: r#267
[#459 'f16']: r#267
[#459 'f32']: r#267
[#459 'fn']: r#267
[#459 'i32']: r#267
[#459 'mat2x2']: r#267
[#459 'mat2x3']: r#267
[#459 'mat2x4']: r#267
[#459 'mat3x2']: r#267
[#459 'mat3x3']: r#267
[#459 'mat3x4']: r#267
[#459 'mat4x2']: r#267
[#459 'mat4x3']: r#267
[#459 'mat4x4']: r#267
[#459 'override']: r#267
[#459 'ptr']: r#267
[#459 'sampler']: r#267
[#459 'sampler_comparison']: r#267
[#459 'texture_1d']: r#267
[#459 'texture_2d']: r#267
[#459 'texture_2d_array']: r#267
[#459 'texture_3d']: r#267
[#459 'texture_cube']: r#267
[#459 'texture_cube_array']: r#267
[#459 'texture_depth_2d']: r#267
[#459 'texture_depth_2d_array']: r#267
[#459 'texture_depth_cube']: r#267
[#459 'texture_depth_cube_array']: r#267
[#459 'texture_depth_multisampled_2d']: r#267
[#459 'texture_multisampled_2d']: r#267
[#459 'texture_storage_1d']: r#267
[#459 'texture_storage_2d']: r#267
[#459 'texture_storage_2d_array']: r#267
[#459 'texture_storage_3d']: r#267
[#459 'u32']: r#267
[#459 'var']: r#267
[#459 'vec2']: r#267
[#459 'vec3']: r#267
[#459 'vec4']: r#267
[#460 ')']: r#264
[#460 'center']: s#467
[#460 'centroid']: s#468
[#460 'sample']: s#469
[#461 '@']: r#268
[#461 'array']: r#268
[#461 'atomic']: r#268
[#461 'bool']: r#268
[#461 'f16']: r#268
[#461 'f32']: r#268
[#461 'fn']: r#268
[#461 'i32']: r#268
[#461 'mat2x2']: r#268
[#461 'mat2x3']: r#268
[#461 'mat2x4']: r#268
[#461 'mat3x2']: r#268
[#461 'mat3x3']: r#268
[#461 'mat3x4']: r#268
[#461 'mat4x2']: r#268
[#461 'mat4x3']: r#268
[#461 'mat4x4']: r#268
[#461 'override']: r#268
[#461 'ptr']: r#268
[#461 'sampler']: r#268
[#461 'sampler_comparison']: r#268
[#461 'texture_1d']: r#268
[#461 'texture_2d']: r#268
[#461 'texture_2d_array']: r#268
[#461 'texture_3d']: r#268
[#461 'texture_cube']: r#268
[#461 'texture_cube_array']: r#268
[#461 'texture_depth_2d']: r#268
[#461 'texture_depth_2d_array']: r#268
[#461 'texture_depth_cube']: r#268
[#461 'texture_depth_cube_array']: r#268
[#461 'texture_depth_multisampled_2d']: r#268
[#461 'texture_multisampled_2d']: r#268
[#461 'texture_storage_1d']: r#268
[#461 'texture_storage_2d']: r#268
[#461 'texture_storage_2d_array']: r#268
[#461 'texture_storage_3d']: r#268
[#461 'u32']: r#268
[#461 'var']: r#268
[#461 'vec2']: r#268
[#461 'vec3']: r#268
[#461 'vec4']: r#268
[#462 '@']: r#269
[#462 'array']: r#269
[#462 'atomic']: r#269
[#462 'bool']: r#269
[#462 'f16']: r#269
[#462 'f32']: r#269
[#462 'fn']: r#269
[#462 'i32']: r#269
[#462 'mat2x2']: r#269
[#462 'mat2x3']: r#269
[#462 'mat2x4']: r#269
[#462 'mat3x2']: r#269
[#462 'mat3x3']: r#269
[#462 'mat3x4']: r#269
[#462 'mat4x2']: r#269
[#462 'mat4x3']: r#269
[#462 'mat4x4']: r#269
[#462 'override']: r#269
[#462 'ptr']: r#269
[#462 'sampler']: r#269
[#462 'sampler_comparison']: r#269
[#462 'texture_1d']: r#269
[#462 'texture_2d']: r#269
[#462 'texture_2d_array']: r#269
[#462 'texture_3d']: r#269
[#462 'texture_cube']: r#269
[#462 'texture_cube_array']: r#269
[#462 'texture_depth_2d']: r#269
[#462 'texture_depth_2d_array']: r#269
[#462 'texture_depth_cube']: r#269
[#462 'texture_depth_cube_array']: r#269
[#462 'texture_depth_multisampled_2d']: r#269
[#462 'texture_multisampled_2d']: r#269
[#462 'texture_storage_1d']: r#269
[#462 'texture_storage_2d']: r#269
[#462 'texture_storage_2d_array']: r#269
[#462 'texture_storage_3d']: r#269
[#462 'u32']: r#269
[#462 'var']: r#269
[#462 'vec2']: r#269
[#462 'vec3']: r#269
[#462 'vec4']: r#269
[#463 '@']: r#270
[#463 'array']: r#270
[#463 'atomic']: r#270
[#463 'bool']: r#270
[#463 'f16']: r#270
[#463 'f32']: r#270
[#463 'fn']: r#270
[#463 'i32']: r#270
[#463 'mat2x2']: r#270
[#463 'mat2x3']: r#270
[#463 'mat2x4']: r#270
[#463 'mat3x2']: r#270
[#463 'mat3x3']: r#270
[#463 'mat3x4']: r#270
[#463 'mat4x2']: r#270
[#463 'mat4x3']: r#270
[#463 'mat4x4']: r#270
[#463 'override']: r#270
[#463 'ptr']: r#270
[#463 'sampler']: r#270
[#463 'sampler_comparison']: r#270
[#463 'texture_1d']: r#270
[#463 'texture_2d']: r#270
[#463 'texture_2d_array']: r#270
[#463 'texture_3d']: r#270
[#463 'texture_cube']: r#270
[#463 'texture_cube_array']: r#270
[#463 'texture_depth_2d']: r#270
[#463 'texture_depth_2d_array']: r#270
[#463 'texture_depth_cube']: r#270
[#463 'texture_depth_cube_array']: r#270
[#463 'texture_depth_multisampled_2d']: r#270
[#463 'texture_multisampled_2d']: r#270
[#463 'texture_storage_1d']: r#270
[#463 'texture_storage_2d']: r#270
[#463 'texture_storage_2d_array']: r#270
[#463 'texture_storage_3d']: r#270
[#463 'u32']: r#270
[#463 'var']: r#270
[#463 'vec2']: r#270
[#463 'vec3']: r#270
[#463 'vec4']: r#270
[#464 '@']: r#271
[#464 'array']: r#271
[#464 'atomic']: r#271
[#464 'bool']: r#271
[#464 'f16']: r#271
[#464 'f32']: r#271
[#464 'fn']: r#271
[#464 'i32']: r#271
[#464 'mat2x2']: r#271
[#464 'mat2x3']: r#271
[#464 'mat2x4']: r#271
[#464 'mat3x2']: r#271
[#464 'mat3x3']: r#271
[#464 'mat3x4']: r#271
[#464 'mat4x2']: r#271
[#464 'mat4x3']: r#271
[#464 'mat4x4']: r#271
[#464 'override']: r#271
[#464 'ptr']: r#271
[#464 'sampler']: r#271
[#464 'sampler_comparison']: r#271
[#464 'texture_1d']: r#271
[#464 'texture_2d']: r#271
[#464 'texture_2d_array']: r#271
[#464 'texture_3d']: r#271
[#464 'texture_cube']: r#271
[#464 'texture_cube_array']: r#271
[#464 'texture_depth_2d']: r#271
[#464 'texture_depth_2d_array']: r#271
[#464 'texture_depth_cube']: r#271
[#464 'texture_depth_cube_array']: r#271
[#464 'texture_depth_multisampled_2d']: r#271
[#464 'texture_multisampled_2d']: r#271
[#464 'texture_storage_1d']: r#271
[#464 'texture_storage_2d']: r#271
[#464 'texture_storage_2d_array']: r#271
[#464 'texture_storage_3d']: r#271
[#464 'u32']: r#271
[#464 'var']: r#271
[#464 'vec2']: r#271
[#464 'vec3']: r#271
[#464 'vec4']: r#271
[#465 '@']: r#272
[#465 'array']: r#272
[#465 'atomic']: r#272
[#465 'bool']: r#272
[#465 'f16']: r#272
[#465 'f32']: r#272
[#465 'fn']: r#272
[#465 'i32']: r#272
[#465 'mat2x2']: r#272
[#465 'mat2x3']: r#272
[#465 'mat2x4']: r#272
[#465 'mat3x2']: r#272
[#465 'mat3x3']: r#272
[#465 'mat3x4']: r#272
[#465 'mat4x2']: r#272
[#465 'mat4x3']: r#272
[#465 'mat4x4']: r#272
[#465 'override']: r#272
[#465 'ptr']: r#272
[#465 'sampler']: r#272
[#465 'sampler_comparison']: r#272
[#465 'texture_1d']: r#272
[#465 'texture_2d']: r#272
[#465 'texture_2d_array']: r#272
[#465 'texture_3d']: r#272
[#465 'texture_cube']: r#272
[#465 'texture_cube_array']: r#272
[#465 'texture_depth_2d']: r#272
[#465 'texture_depth_2d_array']: r#272
[#465 'texture_depth_cube']: r#272
[#465 'texture_depth_cube_array']: r#272
[#465 'texture_depth_multisampled_2d']: r#272
[#465 'texture_multisampled_2d']: r#272
[#465 'texture_storage_1d']: r#272
[#465 'texture_storage_2d']: r#272
[#465 'texture_storage_2d_array']: r#272
[#465 'texture_storage_3d']: r#272
[#465 'u32']: r#272
[#465 'var']: r#272
[#465 'vec2']: r#272
[#465 'vec3']: r#272
[#465 'vec4']: r#272
[#466 ',']: s#457
[#467 ')']: r#273
[#467 ',']: r#273
[#468 ')']: r#274
[#468 ',']: r#274
[#469 ')']: r#275
[#469 ',']: r#275
[#470 '@']: r#276
[#470 'array']: r#276
[#470 'atomic']: r#276
[#470 'bool']: r#276
[#470 'f16']: r#276
[#470 'f32']: r#276
[#470 'fn']: r#276
[#470 'i32']: r#276
[#470 'mat2x2']: r#276
[#470 'mat2x3']: r#276
[#470 'mat2x4']: r#276
[#470 'mat3x2']: r#276
[#470 'mat3x3']: r#276
[#470 'mat3x4']: r#276
[#470 'mat4x2']: r#276
[#470 'mat4x3']: r#276
[#470 'mat4x4']: r#276
[#470 'override']: r#276
[#470 'ptr']: r#276
[#470 'sampler']: r#276
[#470 'sampler_comparison']: r#276
[#470 'texture_1d']: r#276
[#470 'texture_2d']: r#276
[#470 'texture_2d_array']: r#276
[#470 'texture_3d']: r#276
[#470 'texture_cube']: r#276
[#470 'texture_cube_array']: r#276
[#470 'texture_depth_2d']: r#276
[#470 'texture_depth_2d_array']: r#276
[#470 'texture_depth_cube']: r#276
[#470 'texture_depth_cube_array']: r#276
[#470 'texture_depth_multisampled_2d']: r#276
[#470 'texture_multisampled_2d']: r#276
[#470 'texture_storage_1d']: r#276
[#470 'texture_storage_2d']: r#276
[#470 'texture_storage_2d_array']: r#276
[#470 'texture_storage_3d']: r#276
[#470 'u32']: r#276
[#470 'var']: r#276
[#470 'vec2']: r#276
[#470 'vec3']: r#276
[#470 'vec4']: r#276
[#471 ',']: s#556
[#472 '!=']: r#277
[#472 '%']: r#277
[#472 '%=']: r#277
[#472 '&&']: r#277
[#472 '&']: r#277
[#472 '&=']: r#277
[#472 ')']: r#277
[#472 '*']: r#277
[#472 '*=']: r#277
[#472 '+']: r#277
[#472 '++']: r#277
[#472 '+=']: r#277
[#472 ',']: r#277
[#472 '-']: r#277
[#472 '--']: r#277
[#472 '-=']: r#277
[#472 '/']: r#277
[#472 '/=']: r#277
[#472 ':']: r#277
[#472 ';']: r#277
[#472 '<']: r#277
[#472 '<<']: r#277
[#472 '<<=']: r#277
[#472 '<=']: r#277
[#472 '=']: r#277
[#472 '==']: r#277
[#472 '>']: r#277
[#472 '>=']: r#277
[#472 '>>']: r#277
[#472 '>>=']: r#277
[#472 ']']: r#277
[#472 '^']: r#277
[#472 '^=']: r#277
[#472 '{']: r#277
[#472 '|']: r#277
[#472 '|=']: r#277
[#472 '||']: r#277
[#473 '!=']: r#278
[#473 '%']: r#278
[#473 '%=']: r#278
[#473 '&&']: r#278
[#473 '&']: r#278
[#473 '&=']: r#278
[#473 ')']: r#278
[#473 '*']: r#278
[#473 '*=']: r#278
[#473 '+']: r#278
[#473 '++']: r#278
[#473 '+=']: r#278
[#473 ',']: r#278
[#473 '-']: r#278
[#473 '--']: r#278
[#473 '-=']: r#278
[#473 '/']: r#278
[#473 '/=']: r#278
[#473 ':']: r#278
[#473 ';']: r#278
[#473 '<']: r#278
[#473 '<<']: r#278
[#473 '<<=']: r#278
[#473 '<=']: r#278
[#473 '=']: r#278
[#473 '==']: r#278
[#473 '>']: r#278
[#473 '>=']: r#278
[#473 '>>']: r#278
[#473 '>>=']: r#278
[#473 ']']: r#278
[#473 '^']: r#278
[#473 '^=']: r#278
[#473 '{']: r#278
[#473 '|']: r#278
[#473 '|=']: r#278
[#473 '||']: r#278
[#474 '!=']: r#279
[#474 '%']: r#279
[#474 '&&']: r#279
[#474 '&']: r#279
[#474 ')']: r#279
[#474 '*']: r#279
[#474 '+']: r#279
[#474 ',']: r#279
[#474 '-']: r#279
[#474 '.']: r#279
[#474 '/']: r#279
[#474 ':']: r#279
[#474 ';']: r#279
[#474 '<']: r#279
[#474 '<<']: r#279
[#474 '<=']: r#279
[#474 '==']: r#279
[#474 '>']: r#279
[#474 '>=']: r#279
[#474 '>>']: r#279
[#474 '[']: r#279
[#474 ']']: r#279
[#474 '^']: r#279
[#474 '{']: r#279
[#474 '|']: r#279
[#474 '||']: r#279
[#475 ')']: r#280
[#475 ',']: r#280
[#476 ')']: r#281
[#476 ',']: r#281
[#477 ')']: r#282
[#478 ')']: r#283
[#479 '>']: r#284
[#480 '+']: s#202
[#480 '-']: s#203
[#480 '>']: r#285
[#481 '>']: r#286
[#482 '%']: r#30
[#482 '&']: r#27
[#482 '*']: r#30
[#482 '+']: r#30
[#482 '-']: r#30
[#482 '/']: r#30
[#482 '>']: r#30
[#482 '^']: r#29
[#482 '|']: r#28
[#483 '(']: r#287
[#483 ')']: r#287
[#483 ',']: r#287
[#483 ';']: r#287
[#483 '=']: r#287
[#483 '>']: r#287
[#483 '{']: r#287
[#483 '}']: r#287
[#484 ',']: s#554
[#485 '>']: s#552
[#486 '>']: r#288
[#487 '>']: r#289
[#488 '>']: r#290
[#489 '!']: s#63
[#489 '&']: s#66
[#489 '(']: s#78
[#489 '*']: s#65
[#489 '-']: s#62
[#489 'array']: s#82
[#489 'atomic']: s#96
[#489 'bitcast']: s#72
[#489 'bool']: s#89
[#489 'f16']: s#91
[#489 'f32']: s#90
[#489 'false']: s#88
[#489 'i32']: s#92
[#489 'mat2x2']: s#101
[#489 'mat2x3']: s#102
[#489 'mat2x4']: s#103
[#489 'mat3x2']: s#104
[#489 'mat3x3']: s#105
[#489 'mat3x4']: s#106
[#489 'mat4x2']: s#107
[#489 'mat4x3']: s#108
[#489 'mat4x4']: s#109
[#489 'ptr']: s#94
[#489 'sampler']: s#126
[#489 'sampler_comparison']: s#127
[#489 'texture_1d']: s#133
[#489 'texture_2d']: s#134
[#489 'texture_2d_array']: s#135
[#489 'texture_3d']: s#136
[#489 'texture_cube']: s#137
[#489 'texture_cube_array']: s#138
[#489 'texture_depth_2d']: s#128
[#489 'texture_depth_2d_array']: s#129
[#489 'texture_depth_cube']: s#130
[#489 'texture_depth_cube_array']: s#131
[#489 'texture_depth_multisampled_2d']: s#132
[#489 'texture_multisampled_2d']: s#139
[#489 'texture_storage_1d']: s#140
[#489 'texture_storage_2d']: s#141
[#489 'texture_storage_2d_array']: s#142
[#489 'texture_storage_3d']: s#143
[#489 'true']: s#87
[#489 'u32']: s#93
[#489 'vec2']: s#98
[#489 'vec3']: s#99
[#489 'vec4']: s#100
[#489 '~']: s#64
[#489 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#489 /0[fh]/]: s#113
[#489 /0[iu]?/]: s#110
[#489 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#489 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#489 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#489 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#489 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#489 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#489 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#489 /[1-9][0-9]*[fh]/]: s#114
[#489 /[1-9][0-9]*[iu]?/]: s#111
[#490 '&']: r#291
[#490 '(']: r#291
[#490 '*']: r#291
[#490 ';']: r#291
[#490 '_']: r#291
[#490 'array']: r#291
[#490 'atomic']: r#291
[#490 'bool']: r#291
[#490 'break']: r#291
[#490 'const']: r#291
[#490 'const_assert']: r#291
[#490 'continue']: r#291
[#490 'continuing']: r#291
[#490 'discard']: r#291
[#490 'else']: r#291
[#490 'f16']: r#291
[#490 'f32']: r#291
[#490 'for']: r#291
[#490 'i32']: r#291
[#490 'if']: r#291
[#490 'let']: r#291
[#490 'loop']: r#291
[#490 'mat2x2']: r#291
[#490 'mat2x3']: r#291
[#490 'mat2x4']: r#291
[#490 'mat3x2']: r#291
[#490 'mat3x3']: r#291
[#490 'mat3x4']: r#291
[#490 'mat4x2']: r#291
[#490 'mat4x3']: r#291
[#490 'mat4x4']: r#291
[#490 'ptr']: r#291
[#490 'return']: r#291
[#490 'sampler']: r#291
[#490 'sampler_comparison']: r#291
[#490 'switch']: r#291
[#490 'texture_1d']: r#291
[#490 'texture_2d']: r#291
[#490 'texture_2d_array']: r#291
[#490 'texture_3d']: r#291
[#490 'texture_cube']: r#291
[#490 'texture_cube_array']: r#291
[#490 'texture_depth_2d']: r#291
[#490 'texture_depth_2d_array']: r#291
[#490 'texture_depth_cube']: r#291
[#490 'texture_depth_cube_array']: r#291
[#490 'texture_depth_multisampled_2d']: r#291
[#490 'texture_multisampled_2d']: r#291
[#490 'texture_storage_1d']: r#291
[#490 'texture_storage_2d']: r#291
[#490 'texture_storage_2d_array']: r#291
[#490 'texture_storage_3d']: r#291
[#490 'u32']: r#291
[#490 'var']: r#291
[#490 'vec2']: r#291
[#490 'vec3']: r#291
[#490 'vec4']: r#291
[#490 'while']: r#291
[#490 '{']: r#291
[#490 '}']: r#291
[#491 '&']: r#292
[#491 '(']: r#292
[#491 '*']: r#292
[#491 ';']: r#292
[#491 '_']: r#292
[#491 'array']: r#292
[#491 'atomic']: r#292
[#491 'bool']: r#292
[#491 'break']: r#292
[#491 'const']: r#292
[#491 'const_assert']: r#292
[#491 'continue']: r#292
[#491 'continuing']: r#292
[#491 'discard']: r#292
[#491 'f16']: r#292
[#491 'f32']: r#292
[#491 'for']: r#292
[#491 'i32']: r#292
[#491 'if']: r#292
[#491 'let']: r#292
[#491 'loop']: r#292
[#491 'mat2x2']: r#292
[#491 'mat2x3']: r#292
[#491 'mat2x4']: r#292
[#491 'mat3x2']: r#292
[#491 'mat3x3']: r#292
[#491 'mat3x4']: r#292
[#491 'mat4x2']: r#292
[#491 'mat4x3']: r#292
[#491 'mat4x4']: r#292
[#491 'ptr']: r#292
[#491 'return']: r#292
[#491 'sampler']: r#292
[#491 'sampler_comparison']: r#292
[#491 'switch']: r#292
[#491 'texture_1d']: r#292
[#491 'texture_2d']: r#292
[#491 'texture_2d_array']: r#292
[#491 'texture_3d']: r#292
[#491 'texture_cube']: r#292
[#491 'texture_cube_array']: r#292
[#491 'texture_depth_2d']: r#292
[#491 'texture_depth_2d_array']: r#292
[#491 'texture_depth_cube']: r#292
[#491 'texture_depth_cube_array']: r#292
[#491 'texture_depth_multisampled_2d']: r#292
[#491 'texture_multisampled_2d']: r#292
[#491 'texture_storage_1d']: r#292
[#491 'texture_storage_2d']: r#292
[#491 'texture_storage_2d_array']: r#292
[#491 'texture_storage_3d']: r#292
[#491 'u32']: r#292
[#491 'var']: r#292
[#491 'vec2']: r#292
[#491 'vec3']: r#292
[#491 'vec4']: r#292
[#491 'while']: r#292
[#491 '{']: r#292
[#491 '}']: r#292
[#492 '&']: r#293
[#492 '(']: r#293
[#492 '*']: r#293
[#492 ';']: r#293
[#492 '_']: r#293
[#492 'array']: r#293
[#492 'atomic']: r#293
[#492 'bool']: r#293
[#492 'break']: r#293
[#492 'const']: r#293
[#492 'const_assert']: r#293
[#492 'continue']: r#293
[#492 'continuing']: r#293
[#492 'discard']: r#293
[#492 'f16']: r#293
[#492 'f32']: r#293
[#492 'for']: r#293
[#492 'i32']: r#293
[#492 'if']: r#293
[#492 'let']: r#293
[#492 'loop']: r#293
[#492 'mat2x2']: r#293
[#492 'mat2x3']: r#293
[#492 'mat2x4']: r#293
[#492 'mat3x2']: r#293
[#492 'mat3x3']: r#293
[#492 'mat3x4']: r#293
[#492 'mat4x2']: r#293
[#492 'mat4x3']: r#293
[#492 'mat4x4']: r#293
[#492 'ptr']: r#293
[#492 'return']: r#293
[#492 'sampler']: r#293
[#492 'sampler_comparison']: r#293
[#492 'switch']: r#293
[#492 'texture_1d']: r#293
[#492 'texture_2d']: r#293
[#492 'texture_2d_array']: r#293
[#492 'texture_3d']: r#293
[#492 'texture_cube']: r#293
[#492 'texture_cube_array']: r#293
[#492 'texture_depth_2d']: r#293
[#492 'texture_depth_2d_array']: r#293
[#492 'texture_depth_cube']: r#293
[#492 'texture_depth_cube_array']: r#293
[#492 'texture_depth_multisampled_2d']: r#293
[#492 'texture_multisampled_2d']: r#293
[#492 'texture_storage_1d']: r#293
[#492 'texture_storage_2d']: r#293
[#492 'texture_storage_2d_array']: r#293
[#492 'texture_storage_3d']: r#293
[#492 'u32']: r#293
[#492 'var']: r#293
[#492 'vec2']: r#293
[#492 'vec3']: r#293
[#492 'vec4']: r#293
[#492 'while']: r#293
[#492 '{']: r#293
[#492 '}']: r#293
[#493 '{']: s#173
[#494 'case']: s#548
[#494 'default']: s#549
[#495 'continuing']: s#542
[#496 'continuing']: r#294
[#496 '}']: r#294
[#497 '&']: s#356
[#497 '(']: s#357
[#497 '*']: s#355
[#497 ';']: s#320
[#497 '_']: s#353
[#497 'array']: s#82
[#497 'atomic']: s#96
[#497 'bool']: s#89
[#497 'break']: s#345
[#497 'const']: s#344
[#497 'const_assert']: s#26
[#497 'continue']: s#346
[#497 'discard']: s#331
[#497 'f16']: s#91
[#497 'f32']: s#90
[#497 'for']: s#339
[#497 'i32']: s#92
[#497 'if']: s#350
[#497 'let']: s#343
[#497 'loop']: s#338
[#497 'mat2x2']: s#101
[#497 'mat2x3']: s#102
[#497 'mat2x4']: s#103
[#497 'mat3x2']: s#104
[#497 'mat3x3']: s#105
[#497 'mat3x4']: s#106
[#497 'mat4x2']: s#107
[#497 'mat4x3']: s#108
[#497 'mat4x4']: s#109
[#497 'ptr']: s#94
[#497 'return']: s#335
[#497 'sampler']: s#126
[#497 'sampler_comparison']: s#127
[#497 'switch']: s#337
[#497 'texture_1d']: s#133
[#497 'texture_2d']: s#134
[#497 'texture_2d_array']: s#135
[#497 'texture_3d']: s#136
[#497 'texture_cube']: s#137
[#497 'texture_cube_array']: s#138
[#497 'texture_depth_2d']: s#128
[#497 'texture_depth_2d_array']: s#129
[#497 'texture_depth_cube']: s#130
[#497 'texture_depth_cube_array']: s#131
[#497 'texture_depth_multisampled_2d']: s#132
[#497 'texture_multisampled_2d']: s#139
[#497 'texture_storage_1d']: s#140
[#497 'texture_storage_2d']: s#141
[#497 'texture_storage_2d_array']: s#142
[#497 'texture_storage_3d']: s#143
[#497 'u32']: s#93
[#497 'var']: s#152
[#497 'vec2']: s#98
[#497 'vec3']: s#99
[#497 'vec4']: s#100
[#497 'while']: s#340
[#497 '{']: s#173
[#497 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#498 ')']: s#538
[#499 ';']: s#537
[#500 ';']: r#295
[#501 ';']: r#296
[#502 ';']: r#297
[#503 ';']: r#298
[#504 '&']: r#299
[#504 '(']: r#299
[#504 '*']: r#299
[#504 ';']: r#299
[#504 '_']: r#299
[#504 'array']: r#299
[#504 'atomic']: r#299
[#504 'bool']: r#299
[#504 'break']: r#299
[#504 'const']: r#299
[#504 'const_assert']: r#299
[#504 'continue']: r#299
[#504 'continuing']: r#299
[#504 'discard']: r#299
[#504 'f16']: r#299
[#504 'f32']: r#299
[#504 'for']: r#299
[#504 'i32']: r#299
[#504 'if']: r#299
[#504 'let']: r#299
[#504 'loop']: r#299
[#504 'mat2x2']: r#299
[#504 'mat2x3']: r#299
[#504 'mat2x4']: r#299
[#504 'mat3x2']: r#299
[#504 'mat3x3']: r#299
[#504 'mat3x4']: r#299
[#504 'mat4x2']: r#299
[#504 'mat4x3']: r#299
[#504 'mat4x4']: r#299
[#504 'ptr']: r#299
[#504 'return']: r#299
[#504 'sampler']: r#299
[#504 'sampler_comparison']: r#299
[#504 'switch']: r#299
[#504 'texture_1d']: r#299
[#504 'texture_2d']: r#299
[#504 'texture_2d_array']: r#299
[#504 'texture_3d']: r#299
[#504 'texture_cube']: r#299
[#504 'texture_cube_array']: r#299
[#504 'texture_depth_2d']: r#299
[#504 'texture_depth_2d_array']: r#299
[#504 'texture_depth_cube']: r#299
[#504 'texture_depth_cube_array']: r#299
[#504 'texture_depth_multisampled_2d']: r#299
[#504 'texture_multisampled_2d']: r#299
[#504 'texture_storage_1d']: r#299
[#504 'texture_storage_2d']: r#299
[#504 'texture_storage_2d_array']: r#299
[#504 'texture_storage_3d']: r#299
[#504 'u32']: r#299
[#504 'var']: r#299
[#504 'vec2']: r#299
[#504 'vec3']: r#299
[#504 'vec4']: r#299
[#504 'while']: r#299
[#504 '{']: r#299
[#504 '}']: r#299
[#505 ';']: r#300
[#506 '!']: s#63
[#506 '&']: s#66
[#506 '(']: s#78
[#506 '*']: s#65
[#506 '-']: s#62
[#506 'array']: s#82
[#506 'atomic']: s#96
[#506 'bitcast']: s#72
[#506 'bool']: s#89
[#506 'f16']: s#91
[#506 'f32']: s#90
[#506 'false']: s#88
[#506 'i32']: s#92
[#506 'mat2x2']: s#101
[#506 'mat2x3']: s#102
[#506 'mat2x4']: s#103
[#506 'mat3x2']: s#104
[#506 'mat3x3']: s#105
[#506 'mat3x4']: s#106
[#506 'mat4x2']: s#107
[#506 'mat4x3']: s#108
[#506 'mat4x4']: s#109
[#506 'ptr']: s#94
[#506 'sampler']: s#126
[#506 'sampler_comparison']: s#127
[#506 'texture_1d']: s#133
[#506 'texture_2d']: s#134
[#506 'texture_2d_array']: s#135
[#506 'texture_3d']: s#136
[#506 'texture_cube']: s#137
[#506 'texture_cube_array']: s#138
[#506 'texture_depth_2d']: s#128
[#506 'texture_depth_2d_array']: s#129
[#506 'texture_depth_cube']: s#130
[#506 'texture_depth_cube_array']: s#131
[#506 'texture_depth_multisampled_2d']: s#132
[#506 'texture_multisampled_2d']: s#139
[#506 'texture_storage_1d']: s#140
[#506 'texture_storage_2d']: s#141
[#506 'texture_storage_2d_array']: s#142
[#506 'texture_storage_3d']: s#143
[#506 'true']: s#87
[#506 'u32']: s#93
[#506 'vec2']: s#98
[#506 'vec3']: s#99
[#506 'vec4']: s#100
[#506 '~']: s#64
[#506 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#506 /0[fh]/]: s#113
[#506 /0[iu]?/]: s#110
[#506 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#506 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#506 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#506 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#506 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#506 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#506 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#506 /[1-9][0-9]*[fh]/]: s#114
[#506 /[1-9][0-9]*[iu]?/]: s#111
[#507 '!']: s#63
[#507 '&']: s#66
[#507 '(']: s#78
[#507 '*']: s#65
[#507 '-']: s#62
[#507 'array']: s#82
[#507 'atomic']: s#96
[#507 'bitcast']: s#72
[#507 'bool']: s#89
[#507 'f16']: s#91
[#507 'f32']: s#90
[#507 'false']: s#88
[#507 'i32']: s#92
[#507 'mat2x2']: s#101
[#507 'mat2x3']: s#102
[#507 'mat2x4']: s#103
[#507 'mat3x2']: s#104
[#507 'mat3x3']: s#105
[#507 'mat3x4']: s#106
[#507 'mat4x2']: s#107
[#507 'mat4x3']: s#108
[#507 'mat4x4']: s#109
[#507 'ptr']: s#94
[#507 'sampler']: s#126
[#507 'sampler_comparison']: s#127
[#507 'texture_1d']: s#133
[#507 'texture_2d']: s#134
[#507 'texture_2d_array']: s#135
[#507 'texture_3d']: s#136
[#507 'texture_cube']: s#137
[#507 'texture_cube_array']: s#138
[#507 'texture_depth_2d']: s#128
[#507 'texture_depth_2d_array']: s#129
[#507 'texture_depth_cube']: s#130
[#507 'texture_depth_cube_array']: s#131
[#507 'texture_depth_multisampled_2d']: s#132
[#507 'texture_multisampled_2d']: s#139
[#507 'texture_storage_1d']: s#140
[#507 'texture_storage_2d']: s#141
[#507 'texture_storage_2d_array']: s#142
[#507 'texture_storage_3d']: s#143
[#507 'true']: s#87
[#507 'u32']: s#93
[#507 'vec2']: s#98
[#507 'vec3']: s#99
[#507 'vec4']: s#100
[#507 '~']: s#64
[#507 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#507 /0[fh]/]: s#113
[#507 /0[iu]?/]: s#110
[#507 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#507 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#507 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#507 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#507 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#507 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#507 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#507 /[1-9][0-9]*[fh]/]: s#114
[#507 /[1-9][0-9]*[iu]?/]: s#111
[#508 '&']: r#301
[#508 '(']: r#301
[#508 '*']: r#301
[#508 ';']: r#301
[#508 '_']: r#301
[#508 'array']: r#301
[#508 'atomic']: r#301
[#508 'bool']: r#301
[#508 'break']: r#301
[#508 'const']: r#301
[#508 'const_assert']: r#301
[#508 'continue']: r#301
[#508 'continuing']: r#301
[#508 'discard']: r#301
[#508 'else']: r#301
[#508 'f16']: r#301
[#508 'f32']: r#301
[#508 'for']: r#301
[#508 'i32']: r#301
[#508 'if']: r#301
[#508 'let']: r#301
[#508 'loop']: r#301
[#508 'mat2x2']: r#301
[#508 'mat2x3']: r#301
[#508 'mat2x4']: r#301
[#508 'mat3x2']: r#301
[#508 'mat3x3']: r#301
[#508 'mat3x4']: r#301
[#508 'mat4x2']: r#301
[#508 'mat4x3']: r#301
[#508 'mat4x4']: r#301
[#508 'ptr']: r#301
[#508 'return']: r#301
[#508 'sampler']: r#301
[#508 'sampler_comparison']: r#301
[#508 'switch']: r#301
[#508 'texture_1d']: r#301
[#508 'texture_2d']: r#301
[#508 'texture_2d_array']: r#301
[#508 'texture_3d']: r#301
[#508 'texture_cube']: r#301
[#508 'texture_cube_array']: r#301
[#508 'texture_depth_2d']: r#301
[#508 'texture_depth_2d_array']: r#301
[#508 'texture_depth_cube']: r#301
[#508 'texture_depth_cube_array']: r#301
[#508 'texture_depth_multisampled_2d']: r#301
[#508 'texture_multisampled_2d']: r#301
[#508 'texture_storage_1d']: r#301
[#508 'texture_storage_2d']: r#301
[#508 'texture_storage_2d_array']: r#301
[#508 'texture_storage_3d']: r#301
[#508 'u32']: r#301
[#508 'var']: r#301
[#508 'vec2']: r#301
[#508 'vec3']: r#301
[#508 'vec4']: r#301
[#508 'while']: r#301
[#508 '{']: r#301
[#508 '}']: r#301
[#509 ')']: r#302
[#509 ';']: r#302
[#510 ')']: r#303
[#510 ';']: r#303
[#511 '%=']: r#304
[#511 '&=']: r#304
[#511 ')']: r#304
[#511 '*=']: r#304
[#511 '++']: r#304
[#511 '+=']: r#304
[#511 '--']: r#304
[#511 '-=']: r#304
[#511 '.']: r#304
[#511 '/=']: r#304
[#511 '<<=']: r#304
[#511 '=']: r#304
[#511 '>>=']: r#304
[#511 '[']: r#304
[#511 '^=']: r#304
[#511 '|=']: r#304
[#513 ':']: s#534
[#514 ',']: s#533
[#515 ')']: r#305
[#515 ',']: r#305
[#516 ',']: s#517
[#517 '@']: s#31
[#518 '->']: s#529
[#519 ',']: r#306
[#519 '}']: r#306
[#520 ',']: r#307
[#520 '}']: r#307
[#521 '}']: s#527
[#522 '}']: r#308
[#523 'array']: s#282
[#523 'atomic']: s#96
[#523 'bool']: s#89
[#523 'f16']: s#91
[#523 'f32']: s#90
[#523 'i32']: s#92
[#523 'mat2x2']: s#101
[#523 'mat2x3']: s#102
[#523 'mat2x4']: s#103
[#523 'mat3x2']: s#104
[#523 'mat3x3']: s#105
[#523 'mat3x4']: s#106
[#523 'mat4x2']: s#107
[#523 'mat4x3']: s#108
[#523 'mat4x4']: s#109
[#523 'ptr']: s#94
[#523 'sampler']: s#126
[#523 'sampler_comparison']: s#127
[#523 'texture_1d']: s#133
[#523 'texture_2d']: s#134
[#523 'texture_2d_array']: s#135
[#523 'texture_3d']: s#136
[#523 'texture_cube']: s#137
[#523 'texture_cube_array']: s#138
[#523 'texture_depth_2d']: s#128
[#523 'texture_depth_2d_array']: s#129
[#523 'texture_depth_cube']: s#130
[#523 'texture_depth_cube_array']: s#131
[#523 'texture_depth_multisampled_2d']: s#132
[#523 'texture_multisampled_2d']: s#139
[#523 'texture_storage_1d']: s#140
[#523 'texture_storage_2d']: s#141
[#523 'texture_storage_2d_array']: s#142
[#523 'texture_storage_3d']: s#143
[#523 'u32']: s#93
[#523 'vec2']: s#98
[#523 'vec3']: s#99
[#523 'vec4']: s#100
[#523 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#524 '>']: r#309
[#525 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#310
[#526 ',']: r#311
[#526 '}']: r#311
[#527 ';']: r#312
[#527 '@']: r#312
[#527 'alias']: r#312
[#527 'const']: r#312
[#527 'const_assert']: r#312
[#527 'fn']: r#312
[#527 'override']: r#312
[#527 'struct']: r#312
[#527 'var']: r#312
[#527 EndOfText]: r#312
[#528 '{']: r#313
[#529 '@']: s#31
[#530 ')']: r#314
[#530 ',']: r#314
[#531 ')']: r#315
[#531 ',']: r#315
[#532 ')']: r#316
[#533 ')']: r#317
[#534 'array']: s#282
[#534 'atomic']: s#96
[#534 'bool']: s#89
[#534 'f16']: s#91
[#534 'f32']: s#90
[#534 'i32']: s#92
[#534 'mat2x2']: s#101
[#534 'mat2x3']: s#102
[#534 'mat2x4']: s#103
[#534 'mat3x2']: s#104
[#534 'mat3x3']: s#105
[#534 'mat3x4']: s#106
[#534 'mat4x2']: s#107
[#534 'mat4x3']: s#108
[#534 'mat4x4']: s#109
[#534 'ptr']: s#94
[#534 'sampler']: s#126
[#534 'sampler_comparison']: s#127
[#534 'texture_1d']: s#133
[#534 'texture_2d']: s#134
[#534 'texture_2d_array']: s#135
[#534 'texture_3d']: s#136
[#534 'texture_cube']: s#137
[#534 'texture_cube_array']: s#138
[#534 'texture_depth_2d']: s#128
[#534 'texture_depth_2d_array']: s#129
[#534 'texture_depth_cube']: s#130
[#534 'texture_depth_cube_array']: s#131
[#534 'texture_depth_multisampled_2d']: s#132
[#534 'texture_multisampled_2d']: s#139
[#534 'texture_storage_1d']: s#140
[#534 'texture_storage_2d']: s#141
[#534 'texture_storage_2d_array']: s#142
[#534 'texture_storage_3d']: s#143
[#534 'u32']: s#93
[#534 'vec2']: s#98
[#534 'vec3']: s#99
[#534 'vec4']: s#100
[#534 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#535 ';']: r#318
[#536 ';']: r#319
[#537 '!']: s#63
[#537 '&']: s#66
[#537 '(']: s#78
[#537 '*']: s#65
[#537 '-']: s#62
[#537 'array']: s#82
[#537 'atomic']: s#96
[#537 'bitcast']: s#72
[#537 'bool']: s#89
[#537 'f16']: s#91
[#537 'f32']: s#90
[#537 'false']: s#88
[#537 'i32']: s#92
[#537 'mat2x2']: s#101
[#537 'mat2x3']: s#102
[#537 'mat2x4']: s#103
[#537 'mat3x2']: s#104
[#537 'mat3x3']: s#105
[#537 'mat3x4']: s#106
[#537 'mat4x2']: s#107
[#537 'mat4x3']: s#108
[#537 'mat4x4']: s#109
[#537 'ptr']: s#94
[#537 'sampler']: s#126
[#537 'sampler_comparison']: s#127
[#537 'texture_1d']: s#133
[#537 'texture_2d']: s#134
[#537 'texture_2d_array']: s#135
[#537 'texture_3d']: s#136
[#537 'texture_cube']: s#137
[#537 'texture_cube_array']: s#138
[#537 'texture_depth_2d']: s#128
[#537 'texture_depth_2d_array']: s#129
[#537 'texture_depth_cube']: s#130
[#537 'texture_depth_cube_array']: s#131
[#537 'texture_depth_multisampled_2d']: s#132
[#537 'texture_multisampled_2d']: s#139
[#537 'texture_storage_1d']: s#140
[#537 'texture_storage_2d']: s#141
[#537 'texture_storage_2d_array']: s#142
[#537 'texture_storage_3d']: s#143
[#537 'true']: s#87
[#537 'u32']: s#93
[#537 'vec2']: s#98
[#537 'vec3']: s#99
[#537 'vec4']: s#100
[#537 '~']: s#64
[#537 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#537 /0[fh]/]: s#113
[#537 /0[iu]?/]: s#110
[#537 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#537 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#537 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#537 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#537 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#537 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#537 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#537 /[1-9][0-9]*[fh]/]: s#114
[#537 /[1-9][0-9]*[iu]?/]: s#111
[#538 '{']: s#173
[#539 'continuing']: r#320
[#539 '}']: r#320
[#540 '}']: s#572
[#541 '}']: r#321
[#542 '{']: s#571
[#543 '}']: s#569
[#544 '}']: r#322
[#545 'case']: s#548
[#545 'default']: s#549
[#546 'case']: r#323
[#546 'default']: r#323
[#546 '}']: r#323
[#547 'case']: r#324
[#547 'default']: r#324
[#547 '}']: r#324
[#548 '!']: s#63
[#548 '&']: s#66
[#548 '(']: s#78
[#548 '*']: s#65
[#548 '-']: s#62
[#548 'array']: s#82
[#548 'atomic']: s#96
[#548 'bitcast']: s#72
[#548 'bool']: s#89
[#548 'default']: s#566
[#548 'f16']: s#91
[#548 'f32']: s#90
[#548 'false']: s#88
[#548 'i32']: s#92
[#548 'mat2x2']: s#101
[#548 'mat2x3']: s#102
[#548 'mat2x4']: s#103
[#548 'mat3x2']: s#104
[#548 'mat3x3']: s#105
[#548 'mat3x4']: s#106
[#548 'mat4x2']: s#107
[#548 'mat4x3']: s#108
[#548 'mat4x4']: s#109
[#548 'ptr']: s#94
[#548 'sampler']: s#126
[#548 'sampler_comparison']: s#127
[#548 'texture_1d']: s#133
[#548 'texture_2d']: s#134
[#548 'texture_2d_array']: s#135
[#548 'texture_3d']: s#136
[#548 'texture_cube']: s#137
[#548 'texture_cube_array']: s#138
[#548 'texture_depth_2d']: s#128
[#548 'texture_depth_2d_array']: s#129
[#548 'texture_depth_cube']: s#130
[#548 'texture_depth_cube_array']: s#131
[#548 'texture_depth_multisampled_2d']: s#132
[#548 'texture_multisampled_2d']: s#139
[#548 'texture_storage_1d']: s#140
[#548 'texture_storage_2d']: s#141
[#548 'texture_storage_2d_array']: s#142
[#548 'texture_storage_3d']: s#143
[#548 'true']: s#87
[#548 'u32']: s#93
[#548 'vec2']: s#98
[#548 'vec3']: s#99
[#548 'vec4']: s#100
[#548 '~']: s#64
[#548 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#548 /0[fh]/]: s#113
[#548 /0[iu]?/]: s#110
[#548 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#548 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#548 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#548 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#548 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#548 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#548 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#548 /[1-9][0-9]*[fh]/]: s#114
[#548 /[1-9][0-9]*[iu]?/]: s#111
[#549 ':']: s#563
[#550 '&']: r#325
[#550 '(']: r#325
[#550 '*']: r#325
[#550 ';']: r#325
[#550 '_']: r#325
[#550 'array']: r#325
[#550 'atomic']: r#325
[#550 'bool']: r#325
[#550 'break']: r#325
[#550 'const']: r#325
[#550 'const_assert']: r#325
[#550 'continue']: r#325
[#550 'continuing']: r#325
[#550 'discard']: r#325
[#550 'f16']: r#325
[#550 'f32']: r#325
[#550 'for']: r#325
[#550 'i32']: r#325
[#550 'if']: r#325
[#550 'let']: r#325
[#550 'loop']: r#325
[#550 'mat2x2']: r#325
[#550 'mat2x3']: r#325
[#550 'mat2x4']: r#325
[#550 'mat3x2']: r#325
[#550 'mat3x3']: r#325
[#550 'mat3x4']: r#325
[#550 'mat4x2']: r#325
[#550 'mat4x3']: r#325
[#550 'mat4x4']: r#325
[#550 'ptr']: r#325
[#550 'return']: r#325
[#550 'sampler']: r#325
[#550 'sampler_comparison']: r#325
[#550 'switch']: r#325
[#550 'texture_1d']: r#325
[#550 'texture_2d']: r#325
[#550 'texture_2d_array']: r#325
[#550 'texture_3d']: r#325
[#550 'texture_cube']: r#325
[#550 'texture_cube_array']: r#325
[#550 'texture_depth_2d']: r#325
[#550 'texture_depth_2d_array']: r#325
[#550 'texture_depth_cube']: r#325
[#550 'texture_depth_cube_array']: r#325
[#550 'texture_depth_multisampled_2d']: r#325
[#550 'texture_multisampled_2d']: r#325
[#550 'texture_storage_1d']: r#325
[#550 'texture_storage_2d']: r#325
[#550 'texture_storage_2d_array']: r#325
[#550 'texture_storage_3d']: r#325
[#550 'u32']: r#325
[#550 'var']: r#325
[#550 'vec2']: r#325
[#550 'vec3']: r#325
[#550 'vec4']: r#325
[#550 'while']: r#325
[#550 '{']: r#325
[#550 '}']: r#325
[#551 '{']: s#173
[#552 '(']: r#326
[#552 ')']: r#326
[#552 ',']: r#326
[#552 ';']: r#326
[#552 '=']: r#326
[#552 '>']: r#326
[#552 '{']: r#326
[#552 '}']: r#326
[#553 '>']: s#560
[#554 'read']: s#486
[#554 'read_write']: s#488
[#554 'write']: s#487
[#555 '@']: r#327
[#555 'array']: r#327
[#555 'atomic']: r#327
[#555 'bool']: r#327
[#555 'f16']: r#327
[#555 'f32']: r#327
[#555 'fn']: r#327
[#555 'i32']: r#327
[#555 'mat2x2']: r#327
[#555 'mat2x3']: r#327
[#555 'mat2x4']: r#327
[#555 'mat3x2']: r#327
[#555 'mat3x3']: r#327
[#555 'mat3x4']: r#327
[#555 'mat4x2']: r#327
[#555 'mat4x3']: r#327
[#555 'mat4x4']: r#327
[#555 'override']: r#327
[#555 'ptr']: r#327
[#555 'sampler']: r#327
[#555 'sampler_comparison']: r#327
[#555 'texture_1d']: r#327
[#555 'texture_2d']: r#327
[#555 'texture_2d_array']: r#327
[#555 'texture_3d']: r#327
[#555 'texture_cube']: r#327
[#555 'texture_cube_array']: r#327
[#555 'texture_depth_2d']: r#327
[#555 'texture_depth_2d_array']: r#327
[#555 'texture_depth_cube']: r#327
[#555 'texture_depth_cube_array']: r#327
[#555 'texture_depth_multisampled_2d']: r#327
[#555 'texture_multisampled_2d']: r#327
[#555 'texture_storage_1d']: r#327
[#555 'texture_storage_2d']: r#327
[#555 'texture_storage_2d_array']: r#327
[#555 'texture_storage_3d']: r#327
[#555 'u32']: r#327
[#555 'var']: r#327
[#555 'vec2']: r#327
[#555 'vec3']: r#327
[#555 'vec4']: r#327
[#556 '!']: s#63
[#556 '&']: s#66
[#556 '(']: s#78
[#556 ')']: r#264
[#556 '*']: s#65
[#556 '-']: s#62
[#556 'array']: s#82
[#556 'atomic']: s#96
[#556 'bitcast']: s#72
[#556 'bool']: s#89
[#556 'f16']: s#91
[#556 'f32']: s#90
[#556 'false']: s#88
[#556 'i32']: s#92
[#556 'mat2x2']: s#101
[#556 'mat2x3']: s#102
[#556 'mat2x4']: s#103
[#556 'mat3x2']: s#104
[#556 'mat3x3']: s#105
[#556 'mat3x4']: s#106
[#556 'mat4x2']: s#107
[#556 'mat4x3']: s#108
[#556 'mat4x4']: s#109
[#556 'ptr']: s#94
[#556 'sampler']: s#126
[#556 'sampler_comparison']: s#127
[#556 'texture_1d']: s#133
[#556 'texture_2d']: s#134
[#556 'texture_2d_array']: s#135
[#556 'texture_3d']: s#136
[#556 'texture_cube']: s#137
[#556 'texture_cube_array']: s#138
[#556 'texture_depth_2d']: s#128
[#556 'texture_depth_2d_array']: s#129
[#556 'texture_depth_cube']: s#130
[#556 'texture_depth_cube_array']: s#131
[#556 'texture_depth_multisampled_2d']: s#132
[#556 'texture_multisampled_2d']: s#139
[#556 'texture_storage_1d']: s#140
[#556 'texture_storage_2d']: s#141
[#556 'texture_storage_2d_array']: s#142
[#556 'texture_storage_3d']: s#143
[#556 'true']: s#87
[#556 'u32']: s#93
[#556 'vec2']: s#98
[#556 'vec3']: s#99
[#556 'vec4']: s#100
[#556 '~']: s#64
[#556 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#556 /0[fh]/]: s#113
[#556 /0[iu]?/]: s#110
[#556 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#556 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#556 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#556 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#556 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#556 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#556 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#556 /[1-9][0-9]*[fh]/]: s#114
[#556 /[1-9][0-9]*[iu]?/]: s#111
[#557 '@']: r#328
[#557 'array']: r#328
[#557 'atomic']: r#328
[#557 'bool']: r#328
[#557 'f16']: r#328
[#557 'f32']: r#328
[#557 'fn']: r#328
[#557 'i32']: r#328
[#557 'mat2x2']: r#328
[#557 'mat2x3']: r#328
[#557 'mat2x4']: r#328
[#557 'mat3x2']: r#328
[#557 'mat3x3']: r#328
[#557 'mat3x4']: r#328
[#557 'mat4x2']: r#328
[#557 'mat4x3']: r#328
[#557 'mat4x4']: r#328
[#557 'override']: r#328
[#557 'ptr']: r#328
[#557 'sampler']: r#328
[#557 'sampler_comparison']: r#328
[#557 'texture_1d']: r#328
[#557 'texture_2d']: r#328
[#557 'texture_2d_array']: r#328
[#557 'texture_3d']: r#328
[#557 'texture_cube']: r#328
[#557 'texture_cube_array']: r#328
[#557 'texture_depth_2d']: r#328
[#557 'texture_depth_2d_array']: r#328
[#557 'texture_depth_cube']: r#328
[#557 'texture_depth_cube_array']: r#328
[#557 'texture_depth_multisampled_2d']: r#328
[#557 'texture_multisampled_2d']: r#328
[#557 'texture_storage_1d']: r#328
[#557 'texture_storage_2d']: r#328
[#557 'texture_storage_2d_array']: r#328
[#557 'texture_storage_3d']: r#328
[#557 'u32']: r#328
[#557 'var']: r#328
[#557 'vec2']: r#328
[#557 'vec3']: r#328
[#557 'vec4']: r#328
[#558 ',']: s#457
[#559 '>']: r#329
[#560 '(']: r#330
[#560 ')']: r#330
[#560 ',']: r#330
[#560 ';']: r#330
[#560 '=']: r#330
[#560 '>']: r#330
[#560 '{']: r#330
[#560 '}']: r#330
[#561 '&']: r#331
[#561 '(']: r#331
[#561 '*']: r#331
[#561 ';']: r#331
[#561 '_']: r#331
[#561 'array']: r#331
[#561 'atomic']: r#331
[#561 'bool']: r#331
[#561 'break']: r#331
[#561 'const']: r#331
[#561 'const_assert']: r#331
[#561 'continue']: r#331
[#561 'continuing']: r#331
[#561 'discard']: r#331
[#561 'else']: r#331
[#561 'f16']: r#331
[#561 'f32']: r#331
[#561 'for']: r#331
[#561 'i32']: r#331
[#561 'if']: r#331
[#561 'let']: r#331
[#561 'loop']: r#331
[#561 'mat2x2']: r#331
[#561 'mat2x3']: r#331
[#561 'mat2x4']: r#331
[#561 'mat3x2']: r#331
[#561 'mat3x3']: r#331
[#561 'mat3x4']: r#331
[#561 'mat4x2']: r#331
[#561 'mat4x3']: r#331
[#561 'mat4x4']: r#331
[#561 'ptr']: r#331
[#561 'return']: r#331
[#561 'sampler']: r#331
[#561 'sampler_comparison']: r#331
[#561 'switch']: r#331
[#561 'texture_1d']: r#331
[#561 'texture_2d']: r#331
[#561 'texture_2d_array']: r#331
[#561 'texture_3d']: r#331
[#561 'texture_cube']: r#331
[#561 'texture_cube_array']: r#331
[#561 'texture_depth_2d']: r#331
[#561 'texture_depth_2d_array']: r#331
[#561 'texture_depth_cube']: r#331
[#561 'texture_depth_cube_array']: r#331
[#561 'texture_depth_multisampled_2d']: r#331
[#561 'texture_multisampled_2d']: r#331
[#561 'texture_storage_1d']: r#331
[#561 'texture_storage_2d']: r#331
[#561 'texture_storage_2d_array']: r#331
[#561 'texture_storage_3d']: r#331
[#561 'u32']: r#331
[#561 'var']: r#331
[#561 'vec2']: r#331
[#561 'vec3']: r#331
[#561 'vec4']: r#331
[#561 'while']: r#331
[#561 '{']: r#331
[#561 '}']: r#331
[#562 '{']: s#173
[#563 '{']: r#332
[#564 ':']: s#591
[#565 ',']: s#589
[#566 ',']: r#333
[#566 ':']: r#333
[#566 '{']: r#333
[#567 ',']: r#334
[#567 ':']: r#334
[#567 '{']: r#334
[#568 '}']: r#335
[#569 '&']: r#336
[#569 '(']: r#336
[#569 '*']: r#336
[#569 ';']: r#336
[#569 '_']: r#336
[#569 'array']: r#336
[#569 'atomic']: r#336
[#569 'bool']: r#336
[#569 'break']: r#336
[#569 'const']: r#336
[#569 'const_assert']: r#336
[#569 'continue']: r#336
[#569 'continuing']: r#336
[#569 'discard']: r#336
[#569 'f16']: r#336
[#569 'f32']: r#336
[#569 'for']: r#336
[#569 'i32']: r#336
[#569 'if']: r#336
[#569 'let']: r#336
[#569 'loop']: r#336
[#569 'mat2x2']: r#336
[#569 'mat2x3']: r#336
[#569 'mat2x4']: r#336
[#569 'mat3x2']: r#336
[#569 'mat3x3']: r#336
[#569 'mat3x4']: r#336
[#569 'mat4x2']: r#336
[#569 'mat4x3']: r#336
[#569 'mat4x4']: r#336
[#569 'ptr']: r#336
[#569 'return']: r#336
[#569 'sampler']: r#336
[#569 'sampler_comparison']: r#336
[#569 'switch']: r#336
[#569 'texture_1d']: r#336
[#569 'texture_2d']: r#336
[#569 'texture_2d_array']: r#336
[#569 'texture_3d']: r#336
[#569 'texture_cube']: r#336
[#569 'texture_cube_array']: r#336
[#569 'texture_depth_2d']: r#336
[#569 'texture_depth_2d_array']: r#336
[#569 'texture_depth_cube']: r#336
[#569 'texture_depth_cube_array']: r#336
[#569 'texture_depth_multisampled_2d']: r#336
[#569 'texture_multisampled_2d']: r#336
[#569 'texture_storage_1d']: r#336
[#569 'texture_storage_2d']: r#336
[#569 'texture_storage_2d_array']: r#336
[#569 'texture_storage_3d']: r#336
[#569 'u32']: r#336
[#569 'var']: r#336
[#569 'vec2']: r#336
[#569 'vec3']: r#336
[#569 'vec4']: r#336
[#569 'while']: r#336
[#569 '{']: r#336
[#569 '}']: r#336
[#570 '}']: r#337
[#571 '&']: s#356
[#571 '(']: s#357
[#571 '*']: s#355
[#571 ';']: s#320
[#571 '_']: s#353
[#571 'array']: s#82
[#571 'atomic']: s#96
[#571 'bool']: s#89
[#571 'break']: s#345
[#571 'const']: s#344
[#571 'const_assert']: s#26
[#571 'continue']: s#346
[#571 'discard']: s#331
[#571 'f16']: s#91
[#571 'f32']: s#90
[#571 'for']: s#339
[#571 'i32']: s#92
[#571 'if']: s#350
[#571 'let']: s#343
[#571 'loop']: s#338
[#571 'mat2x2']: s#101
[#571 'mat2x3']: s#102
[#571 'mat2x4']: s#103
[#571 'mat3x2']: s#104
[#571 'mat3x3']: s#105
[#571 'mat3x4']: s#106
[#571 'mat4x2']: s#107
[#571 'mat4x3']: s#108
[#571 'mat4x4']: s#109
[#571 'ptr']: s#94
[#571 'return']: s#335
[#571 'sampler']: s#126
[#571 'sampler_comparison']: s#127
[#571 'switch']: s#337
[#571 'texture_1d']: s#133
[#571 'texture_2d']: s#134
[#571 'texture_2d_array']: s#135
[#571 'texture_3d']: s#136
[#571 'texture_cube']: s#137
[#571 'texture_cube_array']: s#138
[#571 'texture_depth_2d']: s#128
[#571 'texture_depth_2d_array']: s#129
[#571 'texture_depth_cube']: s#130
[#571 'texture_depth_cube_array']: s#131
[#571 'texture_depth_multisampled_2d']: s#132
[#571 'texture_multisampled_2d']: s#139
[#571 'texture_storage_1d']: s#140
[#571 'texture_storage_2d']: s#141
[#571 'texture_storage_2d_array']: s#142
[#571 'texture_storage_3d']: s#143
[#571 'u32']: s#93
[#571 'var']: s#152
[#571 'vec2']: s#98
[#571 'vec3']: s#99
[#571 'vec4']: s#100
[#571 'while']: s#340
[#571 '{']: s#173
[#571 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#572 '&']: r#338
[#572 '(']: r#338
[#572 '*']: r#338
[#572 ';']: r#338
[#572 '_']: r#338
[#572 'array']: r#338
[#572 'atomic']: r#338
[#572 'bool']: r#338
[#572 'break']: r#338
[#572 'const']: r#338
[#572 'const_assert']: r#338
[#572 'continue']: r#338
[#572 'continuing']: r#338
[#572 'discard']: r#338
[#572 'f16']: r#338
[#572 'f32']: r#338
[#572 'for']: r#338
[#572 'i32']: r#338
[#572 'if']: r#338
[#572 'let']: r#338
[#572 'loop']: r#338
[#572 'mat2x2']: r#338
[#572 'mat2x3']: r#338
[#572 'mat2x4']: r#338
[#572 'mat3x2']: r#338
[#572 'mat3x3']: r#338
[#572 'mat3x4']: r#338
[#572 'mat4x2']: r#338
[#572 'mat4x3']: r#338
[#572 'mat4x4']: r#338
[#572 'ptr']: r#338
[#572 'return']: r#338
[#572 'sampler']: r#338
[#572 'sampler_comparison']: r#338
[#572 'switch']: r#338
[#572 'texture_1d']: r#338
[#572 'texture_2d']: r#338
[#572 'texture_2d_array']: r#338
[#572 'texture_3d']: r#338
[#572 'texture_cube']: r#338
[#572 'texture_cube_array']: r#338
[#572 'texture_depth_2d']: r#338
[#572 'texture_depth_2d_array']: r#338
[#572 'texture_depth_cube']: r#338
[#572 'texture_depth_cube_array']: r#338
[#572 'texture_depth_multisampled_2d']: r#338
[#572 'texture_multisampled_2d']: r#338
[#572 'texture_storage_1d']: r#338
[#572 'texture_storage_2d']: r#338
[#572 'texture_storage_2d_array']: r#338
[#572 'texture_storage_3d']: r#338
[#572 'u32']: r#338
[#572 'var']: r#338
[#572 'vec2']: r#338
[#572 'vec3']: r#338
[#572 'vec4']: r#338
[#572 'while']: r#338
[#572 '{']: r#338
[#572 '}']: r#338
[#573 '&']: r#339
[#573 '(']: r#339
[#573 '*']: r#339
[#573 ';']: r#339
[#573 '_']: r#339
[#573 'array']: r#339
[#573 'atomic']: r#339
[#573 'bool']: r#339
[#573 'break']: r#339
[#573 'const']: r#339
[#573 'const_assert']: r#339
[#573 'continue']: r#339
[#573 'continuing']: r#339
[#573 'discard']: r#339
[#573 'f16']: r#339
[#573 'f32']: r#339
[#573 'for']: r#339
[#573 'i32']: r#339
[#573 'if']: r#339
[#573 'let']: r#339
[#573 'loop']: r#339
[#573 'mat2x2']: r#339
[#573 'mat2x3']: r#339
[#573 'mat2x4']: r#339
[#573 'mat3x2']: r#339
[#573 'mat3x3']: r#339
[#573 'mat3x4']: r#339
[#573 'mat4x2']: r#339
[#573 'mat4x3']: r#339
[#573 'mat4x4']: r#339
[#573 'ptr']: r#339
[#573 'return']: r#339
[#573 'sampler']: r#339
[#573 'sampler_comparison']: r#339
[#573 'switch']: r#339
[#573 'texture_1d']: r#339
[#573 'texture_2d']: r#339
[#573 'texture_2d_array']: r#339
[#573 'texture_3d']: r#339
[#573 'texture_cube']: r#339
[#573 'texture_cube_array']: r#339
[#573 'texture_depth_2d']: r#339
[#573 'texture_depth_2d_array']: r#339
[#573 'texture_depth_cube']: r#339
[#573 'texture_depth_cube_array']: r#339
[#573 'texture_depth_multisampled_2d']: r#339
[#573 'texture_multisampled_2d']: r#339
[#573 'texture_storage_1d']: r#339
[#573 'texture_storage_2d']: r#339
[#573 'texture_storage_2d_array']: r#339
[#573 'texture_storage_3d']: r#339
[#573 'u32']: r#339
[#573 'var']: r#339
[#573 'vec2']: r#339
[#573 'vec3']: r#339
[#573 'vec4']: r#339
[#573 'while']: r#339
[#573 '{']: r#339
[#573 '}']: r#339
[#574 ';']: s#582
[#575 ';']: r#340
[#576 ')']: r#341
[#576 ',']: r#341
[#577 'array']: s#282
[#577 'atomic']: s#96
[#577 'bool']: s#89
[#577 'f16']: s#91
[#577 'f32']: s#90
[#577 'i32']: s#92
[#577 'mat2x2']: s#101
[#577 'mat2x3']: s#102
[#577 'mat2x4']: s#103
[#577 'mat3x2']: s#104
[#577 'mat3x3']: s#105
[#577 'mat3x4']: s#106
[#577 'mat4x2']: s#107
[#577 'mat4x3']: s#108
[#577 'mat4x4']: s#109
[#577 'ptr']: s#94
[#577 'sampler']: s#126
[#577 'sampler_comparison']: s#127
[#577 'texture_1d']: s#133
[#577 'texture_2d']: s#134
[#577 'texture_2d_array']: s#135
[#577 'texture_3d']: s#136
[#577 'texture_cube']: s#137
[#577 'texture_cube_array']: s#138
[#577 'texture_depth_2d']: s#128
[#577 'texture_depth_2d_array']: s#129
[#577 'texture_depth_cube']: s#130
[#577 'texture_depth_cube_array']: s#131
[#577 'texture_depth_multisampled_2d']: s#132
[#577 'texture_multisampled_2d']: s#139
[#577 'texture_storage_1d']: s#140
[#577 'texture_storage_2d']: s#141
[#577 'texture_storage_2d_array']: s#142
[#577 'texture_storage_3d']: s#143
[#577 'u32']: s#93
[#577 'vec2']: s#98
[#577 'vec3']: s#99
[#577 'vec4']: s#100
[#577 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#578 'array']: r#342
[#578 'atomic']: r#342
[#578 'bool']: r#342
[#578 'f16']: r#342
[#578 'f32']: r#342
[#578 'i32']: r#342
[#578 'mat2x2']: r#342
[#578 'mat2x3']: r#342
[#578 'mat2x4']: r#342
[#578 'mat3x2']: r#342
[#578 'mat3x3']: r#342
[#578 'mat3x4']: r#342
[#578 'mat4x2']: r#342
[#578 'mat4x3']: r#342
[#578 'mat4x4']: r#342
[#578 'ptr']: r#342
[#578 'sampler']: r#342
[#578 'sampler_comparison']: r#342
[#578 'texture_1d']: r#342
[#578 'texture_2d']: r#342
[#578 'texture_2d_array']: r#342
[#578 'texture_3d']: r#342
[#578 'texture_cube']: r#342
[#578 'texture_cube_array']: r#342
[#578 'texture_depth_2d']: r#342
[#578 'texture_depth_2d_array']: r#342
[#578 'texture_depth_cube']: r#342
[#578 'texture_depth_cube_array']: r#342
[#578 'texture_depth_multisampled_2d']: r#342
[#578 'texture_multisampled_2d']: r#342
[#578 'texture_storage_1d']: r#342
[#578 'texture_storage_2d']: r#342
[#578 'texture_storage_2d_array']: r#342
[#578 'texture_storage_3d']: r#342
[#578 'u32']: r#342
[#578 'vec2']: r#342
[#578 'vec3']: r#342
[#578 'vec4']: r#342
[#579 '@']: s#31
[#580 'array']: r#343
[#580 'atomic']: r#343
[#580 'bool']: r#343
[#580 'f16']: r#343
[#580 'f32']: r#343
[#580 'i32']: r#343
[#580 'mat2x2']: r#343
[#580 'mat2x3']: r#343
[#580 'mat2x4']: r#343
[#580 'mat3x2']: r#343
[#580 'mat3x3']: r#343
[#580 'mat3x4']: r#343
[#580 'mat4x2']: r#343
[#580 'mat4x3']: r#343
[#580 'mat4x4']: r#343
[#580 'ptr']: r#343
[#580 'sampler']: r#343
[#580 'sampler_comparison']: r#343
[#580 'texture_1d']: r#343
[#580 'texture_2d']: r#343
[#580 'texture_2d_array']: r#343
[#580 'texture_3d']: r#343
[#580 'texture_cube']: r#343
[#580 'texture_cube_array']: r#343
[#580 'texture_depth_2d']: r#343
[#580 'texture_depth_2d_array']: r#343
[#580 'texture_depth_cube']: r#343
[#580 'texture_depth_cube_array']: r#343
[#580 'texture_depth_multisampled_2d']: r#343
[#580 'texture_multisampled_2d']: r#343
[#580 'texture_storage_1d']: r#343
[#580 'texture_storage_2d']: r#343
[#580 'texture_storage_2d_array']: r#343
[#580 'texture_storage_3d']: r#343
[#580 'u32']: r#343
[#580 'vec2']: r#343
[#580 'vec3']: r#343
[#580 'vec4']: r#343
[#581 '{']: r#344
[#582 '&']: s#356
[#582 '(']: s#357
[#582 '*']: s#355
[#582 '_']: s#353
[#582 'array']: s#82
[#582 'atomic']: s#96
[#582 'bool']: s#89
[#582 'f16']: s#91
[#582 'f32']: s#90
[#582 'i32']: s#92
[#582 'mat2x2']: s#101
[#582 'mat2x3']: s#102
[#582 'mat2x4']: s#103
[#582 'mat3x2']: s#104
[#582 'mat3x3']: s#105
[#582 'mat3x4']: s#106
[#582 'mat4x2']: s#107
[#582 'mat4x3']: s#108
[#582 'mat4x4']: s#109
[#582 'ptr']: s#94
[#582 'sampler']: s#126
[#582 'sampler_comparison']: s#127
[#582 'texture_1d']: s#133
[#582 'texture_2d']: s#134
[#582 'texture_2d_array']: s#135
[#582 'texture_3d']: s#136
[#582 'texture_cube']: s#137
[#582 'texture_cube_array']: s#138
[#582 'texture_depth_2d']: s#128
[#582 'texture_depth_2d_array']: s#129
[#582 'texture_depth_cube']: s#130
[#582 'texture_depth_cube_array']: s#131
[#582 'texture_depth_multisampled_2d']: s#132
[#582 'texture_multisampled_2d']: s#139
[#582 'texture_storage_1d']: s#140
[#582 'texture_storage_2d']: s#141
[#582 'texture_storage_2d_array']: s#142
[#582 'texture_storage_3d']: s#143
[#582 'u32']: s#93
[#582 'vec2']: s#98
[#582 'vec3']: s#99
[#582 'vec4']: s#100
[#582 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#583 'break']: s#602
[#584 'break']: r#345
[#584 '}']: r#345
[#585 '&']: s#356
[#585 '(']: s#357
[#585 '*']: s#355
[#585 ';']: s#320
[#585 '_']: s#353
[#585 'array']: s#82
[#585 'atomic']: s#96
[#585 'bool']: s#89
[#585 'break']: s#345
[#585 'const']: s#344
[#585 'const_assert']: s#26
[#585 'continue']: s#346
[#585 'discard']: s#331
[#585 'f16']: s#91
[#585 'f32']: s#90
[#585 'for']: s#339
[#585 'i32']: s#92
[#585 'if']: s#350
[#585 'let']: s#343
[#585 'loop']: s#338
[#585 'mat2x2']: s#101
[#585 'mat2x3']: s#102
[#585 'mat2x4']: s#103
[#585 'mat3x2']: s#104
[#585 'mat3x3']: s#105
[#585 'mat3x4']: s#106
[#585 'mat4x2']: s#107
[#585 'mat4x3']: s#108
[#585 'mat4x4']: s#109
[#585 'ptr']: s#94
[#585 'return']: s#335
[#585 'sampler']: s#126
[#585 'sampler_comparison']: s#127
[#585 'switch']: s#337
[#585 'texture_1d']: s#133
[#585 'texture_2d']: s#134
[#585 'texture_2d_array']: s#135
[#585 'texture_3d']: s#136
[#585 'texture_cube']: s#137
[#585 'texture_cube_array']: s#138
[#585 'texture_depth_2d']: s#128
[#585 'texture_depth_2d_array']: s#129
[#585 'texture_depth_cube']: s#130
[#585 'texture_depth_cube_array']: s#131
[#585 'texture_depth_multisampled_2d']: s#132
[#585 'texture_multisampled_2d']: s#139
[#585 'texture_storage_1d']: s#140
[#585 'texture_storage_2d']: s#141
[#585 'texture_storage_2d_array']: s#142
[#585 'texture_storage_3d']: s#143
[#585 'u32']: s#93
[#585 'var']: s#152
[#585 'vec2']: s#98
[#585 'vec3']: s#99
[#585 'vec4']: s#100
[#585 'while']: s#340
[#585 '{']: s#173
[#585 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#586 ',']: s#598
[#587 ',']: r#346
[#587 ':']: r#346
[#587 '{']: r#346
[#588 ',']: s#589
[#589 '!']: s#63
[#589 '&']: s#66
[#589 '(']: s#78
[#589 '*']: s#65
[#589 '-']: s#62
[#589 'array']: s#82
[#589 'atomic']: s#96
[#589 'bitcast']: s#72
[#589 'bool']: s#89
[#589 'default']: s#566
[#589 'f16']: s#91
[#589 'f32']: s#90
[#589 'false']: s#88
[#589 'i32']: s#92
[#589 'mat2x2']: s#101
[#589 'mat2x3']: s#102
[#589 'mat2x4']: s#103
[#589 'mat3x2']: s#104
[#589 'mat3x3']: s#105
[#589 'mat3x4']: s#106
[#589 'mat4x2']: s#107
[#589 'mat4x3']: s#108
[#589 'mat4x4']: s#109
[#589 'ptr']: s#94
[#589 'sampler']: s#126
[#589 'sampler_comparison']: s#127
[#589 'texture_1d']: s#133
[#589 'texture_2d']: s#134
[#589 'texture_2d_array']: s#135
[#589 'texture_3d']: s#136
[#589 'texture_cube']: s#137
[#589 'texture_cube_array']: s#138
[#589 'texture_depth_2d']: s#128
[#589 'texture_depth_2d_array']: s#129
[#589 'texture_depth_cube']: s#130
[#589 'texture_depth_cube_array']: s#131
[#589 'texture_depth_multisampled_2d']: s#132
[#589 'texture_multisampled_2d']: s#139
[#589 'texture_storage_1d']: s#140
[#589 'texture_storage_2d']: s#141
[#589 'texture_storage_2d_array']: s#142
[#589 'texture_storage_3d']: s#143
[#589 'true']: s#87
[#589 'u32']: s#93
[#589 'vec2']: s#98
[#589 'vec3']: s#99
[#589 'vec4']: s#100
[#589 '~']: s#64
[#589 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#589 /0[fh]/]: s#113
[#589 /0[iu]?/]: s#110
[#589 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#589 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#589 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#589 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#589 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#589 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#589 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#589 /[1-9][0-9]*[fh]/]: s#114
[#589 /[1-9][0-9]*[iu]?/]: s#111
[#590 '{']: s#173
[#591 '{']: r#347
[#592 'case']: r#348
[#592 'default']: r#348
[#592 '}']: r#348
[#593 '@']: r#349
[#593 'array']: r#349
[#593 'atomic']: r#349
[#593 'bool']: r#349
[#593 'f16']: r#349
[#593 'f32']: r#349
[#593 'fn']: r#349
[#593 'i32']: r#349
[#593 'mat2x2']: r#349
[#593 'mat2x3']: r#349
[#593 'mat2x4']: r#349
[#593 'mat3x2']: r#349
[#593 'mat3x3']: r#349
[#593 'mat3x4']: r#349
[#593 'mat4x2']: r#349
[#593 'mat4x3']: r#349
[#593 'mat4x4']: r#349
[#593 'override']: r#349
[#593 'ptr']: r#349
[#593 'sampler']: r#349
[#593 'sampler_comparison']: r#349
[#593 'texture_1d']: r#349
[#593 'texture_2d']: r#349
[#593 'texture_2d_array']: r#349
[#593 'texture_3d']: r#349
[#593 'texture_cube']: r#349
[#593 'texture_cube_array']: r#349
[#593 'texture_depth_2d']: r#349
[#593 'texture_depth_2d_array']: r#349
[#593 'texture_depth_cube']: r#349
[#593 'texture_depth_cube_array']: r#349
[#593 'texture_depth_multisampled_2d']: r#349
[#593 'texture_multisampled_2d']: r#349
[#593 'texture_storage_1d']: r#349
[#593 'texture_storage_2d']: r#349
[#593 'texture_storage_2d_array']: r#349
[#593 'texture_storage_3d']: r#349
[#593 'u32']: r#349
[#593 'var']: r#349
[#593 'vec2']: r#349
[#593 'vec3']: r#349
[#593 'vec4']: r#349
[#594 'case']: r#350
[#594 'default']: r#350
[#594 '}']: r#350
[#595 ',']: r#351
[#595 ':']: r#351
[#595 '{']: r#351
[#596 ',']: r#352
[#596 ':']: r#352
[#596 '{']: r#352
[#597 ':']: r#353
[#597 '{']: r#353
[#598 ':']: r#354
[#598 '{']: r#354
[#599 'break']: r#355
[#599 '}']: r#355
[#600 '}']: s#608
[#601 '}']: r#356
[#602 'if']: s#607
[#603 ')']: r#357
[#604 ')']: r#358
[#605 ')']: r#359
[#606 ')']: r#360
[#607 '!']: s#63
[#607 '&']: s#66
[#607 '(']: s#78
[#607 '*']: s#65
[#607 '-']: s#62
[#607 'array']: s#82
[#607 'atomic']: s#96
[#607 'bitcast']: s#72
[#607 'bool']: s#89
[#607 'f16']: s#91
[#607 'f32']: s#90
[#607 'false']: s#88
[#607 'i32']: s#92
[#607 'mat2x2']: s#101
[#607 'mat2x3']: s#102
[#607 'mat2x4']: s#103
[#607 'mat3x2']: s#104
[#607 'mat3x3']: s#105
[#607 'mat3x4']: s#106
[#607 'mat4x2']: s#107
[#607 'mat4x3']: s#108
[#607 'mat4x4']: s#109
[#607 'ptr']: s#94
[#607 'sampler']: s#126
[#607 'sampler_comparison']: s#127
[#607 'texture_1d']: s#133
[#607 'texture_2d']: s#134
[#607 'texture_2d_array']: s#135
[#607 'texture_3d']: s#136
[#607 'texture_cube']: s#137
[#607 'texture_cube_array']: s#138
[#607 'texture_depth_2d']: s#128
[#607 'texture_depth_2d_array']: s#129
[#607 'texture_depth_cube']: s#130
[#607 'texture_depth_cube_array']: s#131
[#607 'texture_depth_multisampled_2d']: s#132
[#607 'texture_multisampled_2d']: s#139
[#607 'texture_storage_1d']: s#140
[#607 'texture_storage_2d']: s#141
[#607 'texture_storage_2d_array']: s#142
[#607 'texture_storage_3d']: s#143
[#607 'true']: s#87
[#607 'u32']: s#93
[#607 'vec2']: s#98
[#607 'vec3']: s#99
[#607 'vec4']: s#100
[#607 '~']: s#64
[#607 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#73
[#607 /0[fh]/]: s#113
[#607 /0[iu]?/]: s#110
[#607 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#607 /0[xX][0-9a-fA-F]+[iu]?/]: s#112
[#607 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#120
[#607 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#119
[#607 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#607 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#117
[#607 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#116
[#607 /[1-9][0-9]*[fh]/]: s#114
[#607 /[1-9][0-9]*[iu]?/]: s#111
[#608 '}']: r#361
[#609 ';']: s#610
[#610 '}']: r#362

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #30
[#2 const_assert_statement]: #19
[#2 function_decl]: #18
[#2 function_decl/0.0]: #25
[#2 function_decl/0.0/0]: #29
[#2 global_constant_decl]: #15
[#2 global_constant_decl/1.0]: #22
[#2 global_constant_decl/1.0/0]: #28
[#2 global_decl]: #12
[#2 global_variable_decl]: #14
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #27
[#2 struct_decl]: #17
[#2 translation_unit/0.1]: #10
[#2 translation_unit/0.1/0]: #11
[#2 type_alias_decl]: #16
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #9
[#5 extension_name]: #6
[#12 attribute]: #30
[#12 const_assert_statement]: #19
[#12 function_decl]: #18
[#12 function_decl/0.0]: #25
[#12 function_decl/0.0/0]: #29
[#12 global_constant_decl]: #15
[#12 global_constant_decl/1.0]: #22
[#12 global_constant_decl/1.0/0]: #28
[#12 global_decl]: #12
[#12 global_variable_decl]: #14
[#12 global_variable_decl/0.0]: #20
[#12 global_variable_decl/0.0/0]: #27
[#12 struct_decl]: #17
[#12 translation_unit/0.1/0]: #157
[#12 type_alias_decl]: #16
[#20 variable_decl]: #151
[#21 ident]: #150
[#21 optionally_typed_ident]: #149
[#23 ident]: #147
[#24 ident]: #146
[#25 function_header]: #144
[#26 additive_expression]: #58
[#26 array_type_specifier]: #95
[#26 binary_and_expression]: #55
[#26 binary_or_expression]: #56
[#26 binary_xor_expression]: #57
[#26 bitwise_expression]: #53
[#26 bool_literal]: #77
[#26 call_expression]: #69
[#26 callable]: #74
[#26 decimal_float_literal]: #85
[#26 decimal_int_literal]: #83
[#26 depth_texture_type]: #122
[#26 expression]: #49
[#26 float_literal]: #76
[#26 hex_float_literal]: #86
[#26 hex_int_literal]: #84
[#26 ident]: #68
[#26 int_literal]: #75
[#26 literal]: #70
[#26 mat_prefix]: #81
[#26 multiplicative_expression]: #60
[#26 multisampled_texture_type]: #124
[#26 paren_expression]: #71
[#26 primary_expression]: #67
[#26 relational_expression]: #50
[#26 sampled_texture_type]: #123
[#26 sampler_type]: #121
[#26 shift_expression]: #54
[#26 short_circuit_and_expression]: #52
[#26 short_circuit_or_expression]: #51
[#26 singular_expression]: #61
[#26 storage_texture_type]: #125
[#26 texture_and_sampler_types]: #97
[#26 type_specifier_without_ident]: #79
[#26 unary_expression]: #59
[#26 vec_prefix]: #80
[#30 attribute]: #30
[#30 function_decl/0.0/0]: #48
[#30 global_constant_decl/1.0/0]: #47
[#30 global_variable_decl/0.0/0]: #46
[#58 additive_operator]: #201
[#60 multiplicative_operator]: #195
[#62 array_type_specifier]: #95
[#62 bool_literal]: #77
[#62 call_expression]: #69
[#62 callable]: #74
[#62 decimal_float_literal]: #85
[#62 decimal_int_literal]: #83
[#62 depth_texture_type]: #122
[#62 float_literal]: #76
[#62 hex_float_literal]: #86
[#62 hex_int_literal]: #84
[#62 ident]: #68
[#62 int_literal]: #75
[#62 literal]: #70
[#62 mat_prefix]: #81
[#62 multisampled_texture_type]: #124
[#62 paren_expression]: #71
[#62 primary_expression]: #67
[#62 sampled_texture_type]: #123
[#62 sampler_type]: #121
[#62 singular_expression]: #61
[#62 storage_texture_type]: #125
[#62 texture_and_sampler_types]: #97
[#62 type_specifier_without_ident]: #79
[#62 unary_expression]: #194
[#62 vec_prefix]: #80
[#63 array_type_specifier]: #95
[#63 bool_literal]: #77
[#63 call_expression]: #69
[#63 callable]: #74
[#63 decimal_float_literal]: #85
[#63 decimal_int_literal]: #83
[#63 depth_texture_type]: #122
[#63 float_literal]: #76
[#63 hex_float_literal]: #86
[#63 hex_int_literal]: #84
[#63 ident]: #68
[#63 int_literal]: #75
[#63 literal]: #70
[#63 mat_prefix]: #81
[#63 multisampled_texture_type]: #124
[#63 paren_expression]: #71
[#63 primary_expression]: #67
[#63 sampled_texture_type]: #123
[#63 sampler_type]: #121
[#63 singular_expression]: #61
[#63 storage_texture_type]: #125
[#63 texture_and_sampler_types]: #97
[#63 type_specifier_without_ident]: #79
[#63 unary_expression]: #193
[#63 vec_prefix]: #80
[#64 array_type_specifier]: #95
[#64 bool_literal]: #77
[#64 call_expression]: #69
[#64 callable]: #74
[#64 decimal_float_literal]: #85
[#64 decimal_int_literal]: #83
[#64 depth_texture_type]: #122
[#64 float_literal]: #76
[#64 hex_float_literal]: #86
[#64 hex_int_literal]: #84
[#64 ident]: #68
[#64 int_literal]: #75
[#64 literal]: #70
[#64 mat_prefix]: #81
[#64 multisampled_texture_type]: #124
[#64 paren_expression]: #71
[#64 primary_expression]: #67
[#64 sampled_texture_type]: #123
[#64 sampler_type]: #121
[#64 singular_expression]: #61
[#64 storage_texture_type]: #125
[#64 texture_and_sampler_types]: #97
[#64 type_specifier_without_ident]: #79
[#64 unary_expression]: #192
[#64 vec_prefix]: #80
[#65 array_type_specifier]: #95
[#65 bool_literal]: #77
[#65 call_expression]: #69
[#65 callable]: #74
[#65 decimal_float_literal]: #85
[#65 decimal_int_literal]: #83
[#65 depth_texture_type]: #122
[#65 float_literal]: #76
[#65 hex_float_literal]: #86
[#65 hex_int_literal]: #84
[#65 ident]: #68
[#65 int_literal]: #75
[#65 literal]: #70
[#65 mat_prefix]: #81
[#65 multisampled_texture_type]: #124
[#65 paren_expression]: #71
[#65 primary_expression]: #67
[#65 sampled_texture_type]: #123
[#65 sampler_type]: #121
[#65 singular_expression]: #61
[#65 storage_texture_type]: #125
[#65 texture_and_sampler_types]: #97
[#65 type_specifier_without_ident]: #79
[#65 unary_expression]: #191
[#65 vec_prefix]: #80
[#66 array_type_specifier]: #95
[#66 bool_literal]: #77
[#66 call_expression]: #69
[#66 callable]: #74
[#66 decimal_float_literal]: #85
[#66 decimal_int_literal]: #83
[#66 depth_texture_type]: #122
[#66 float_literal]: #76
[#66 hex_float_literal]: #86
[#66 hex_int_literal]: #84
[#66 ident]: #68
[#66 int_literal]: #75
[#66 literal]: #70
[#66 mat_prefix]: #81
[#66 multisampled_texture_type]: #124
[#66 paren_expression]: #71
[#66 primary_expression]: #67
[#66 sampled_texture_type]: #123
[#66 sampler_type]: #121
[#66 singular_expression]: #61
[#66 storage_texture_type]: #125
[#66 texture_and_sampler_types]: #97
[#66 type_specifier_without_ident]: #79
[#66 unary_expression]: #190
[#66 vec_prefix]: #80
[#67 component_or_swizzle_specifier]: #187
[#67 singular_expression/0.1]: #186
[#74 argument_expression_list]: #183
[#78 additive_expression]: #58
[#78 array_type_specifier]: #95
[#78 binary_and_expression]: #55
[#78 binary_or_expression]: #56
[#78 binary_xor_expression]: #57
[#78 bitwise_expression]: #53
[#78 bool_literal]: #77
[#78 call_expression]: #69
[#78 callable]: #74
[#78 decimal_float_literal]: #85
[#78 decimal_int_literal]: #83
[#78 depth_texture_type]: #122
[#78 expression]: #182
[#78 float_literal]: #76
[#78 hex_float_literal]: #86
[#78 hex_int_literal]: #84
[#78 ident]: #68
[#78 int_literal]: #75
[#78 literal]: #70
[#78 mat_prefix]: #81
[#78 multiplicative_expression]: #60
[#78 multisampled_texture_type]: #124
[#78 paren_expression]: #71
[#78 primary_expression]: #67
[#78 relational_expression]: #50
[#78 sampled_texture_type]: #123
[#78 sampler_type]: #121
[#78 shift_expression]: #54
[#78 short_circuit_and_expression]: #52
[#78 short_circuit_or_expression]: #51
[#78 singular_expression]: #61
[#78 storage_texture_type]: #125
[#78 texture_and_sampler_types]: #97
[#78 type_specifier_without_ident]: #79
[#78 unary_expression]: #59
[#78 vec_prefix]: #80
[#144 compound_statement]: #172
[#145 ident]: #171
[#146 struct_body_decl]: #169
[#148 ident]: #150
[#148 optionally_typed_ident]: #167
[#150 optionally_typed_ident/0.1]: #164
[#151 global_variable_decl/0.2]: #162
[#152 variable_decl/0.1]: #159
[#152 variable_qualifier]: #160
[#159 ident]: #150
[#159 optionally_typed_ident]: #370
[#161 address_space]: #369
[#163 additive_expression]: #58
[#163 array_type_specifier]: #95
[#163 binary_and_expression]: #55
[#163 binary_or_expression]: #56
[#163 binary_xor_expression]: #57
[#163 bitwise_expression]: #53
[#163 bool_literal]: #77
[#163 call_expression]: #69
[#163 callable]: #74
[#163 decimal_float_literal]: #85
[#163 decimal_int_literal]: #83
[#163 depth_texture_type]: #122
[#163 expression]: #368
[#163 float_literal]: #76
[#163 hex_float_literal]: #86
[#163 hex_int_literal]: #84
[#163 ident]: #68
[#163 int_literal]: #75
[#163 literal]: #70
[#163 mat_prefix]: #81
[#163 multiplicative_expression]: #60
[#163 multisampled_texture_type]: #124
[#163 paren_expression]: #71
[#163 primary_expression]: #67
[#163 relational_expression]: #50
[#163 sampled_texture_type]: #123
[#163 sampler_type]: #121
[#163 shift_expression]: #54
[#163 short_circuit_and_expression]: #52
[#163 short_circuit_or_expression]: #51
[#163 singular_expression]: #61
[#163 storage_texture_type]: #125
[#163 texture_and_sampler_types]: #97
[#163 type_specifier_without_ident]: #79
[#163 unary_expression]: #59
[#163 vec_prefix]: #80
[#165 array_type_specifier]: #95
[#165 depth_texture_type]: #122
[#165 ident]: #278
[#165 mat_prefix]: #281
[#165 multisampled_texture_type]: #124
[#165 sampled_texture_type]: #123
[#165 sampler_type]: #121
[#165 storage_texture_type]: #125
[#165 texture_and_sampler_types]: #97
[#165 type_specifier]: #367
[#165 type_specifier_without_ident]: #279
[#165 vec_prefix]: #280
[#166 additive_expression]: #58
[#166 array_type_specifier]: #95
[#166 binary_and_expression]: #55
[#166 binary_or_expression]: #56
[#166 binary_xor_expression]: #57
[#166 bitwise_expression]: #53
[#166 bool_literal]: #77
[#166 call_expression]: #69
[#166 callable]: #74
[#166 decimal_float_literal]: #85
[#166 decimal_int_literal]: #83
[#166 depth_texture_type]: #122
[#166 expression]: #366
[#166 float_literal]: #76
[#166 hex_float_literal]: #86
[#166 hex_int_literal]: #84
[#166 ident]: #68
[#166 int_literal]: #75
[#166 literal]: #70
[#166 mat_prefix]: #81
[#166 multiplicative_expression]: #60
[#166 multisampled_texture_type]: #124
[#166 paren_expression]: #71
[#166 primary_expression]: #67
[#166 relational_expression]: #50
[#166 sampled_texture_type]: #123
[#166 sampler_type]: #121
[#166 shift_expression]: #54
[#166 short_circuit_and_expression]: #52
[#166 short_circuit_or_expression]: #51
[#166 singular_expression]: #61
[#166 storage_texture_type]: #125
[#166 texture_and_sampler_types]: #97
[#166 type_specifier_without_ident]: #79
[#166 unary_expression]: #59
[#166 vec_prefix]: #80
[#167 global_constant_decl/1.3]: #364
[#168 array_type_specifier]: #95
[#168 depth_texture_type]: #122
[#168 ident]: #278
[#168 mat_prefix]: #281
[#168 multisampled_texture_type]: #124
[#168 sampled_texture_type]: #123
[#168 sampler_type]: #121
[#168 storage_texture_type]: #125
[#168 texture_and_sampler_types]: #97
[#168 type_specifier]: #363
[#168 type_specifier_without_ident]: #279
[#168 vec_prefix]: #280
[#170 attribute]: #362
[#170 struct_member]: #359
[#170 struct_member/0.0]: #360
[#170 struct_member/0.0/0]: #361
[#173 array_type_specifier]: #95
[#173 assignment_statement]: #347
[#173 break_statement]: #329
[#173 callable]: #341
[#173 compound_statement]: #333
[#173 compound_statement/0.1]: #317
[#173 compound_statement/0.1/0]: #318
[#173 const_assert_statement]: #334
[#173 continue_statement]: #330
[#173 core_lhs_expression]: #354
[#173 decrement_statement]: #349
[#173 depth_texture_type]: #122
[#173 for_statement]: #325
[#173 func_call_statement]: #327
[#173 ident]: #351
[#173 if_clause]: #336
[#173 if_statement]: #322
[#173 increment_statement]: #348
[#173 lhs_expression]: #352
[#173 loop_statement]: #324
[#173 mat_prefix]: #81
[#173 multisampled_texture_type]: #124
[#173 return_statement]: #321
[#173 sampled_texture_type]: #123
[#173 sampler_type]: #121
[#173 statement]: #319
[#173 storage_texture_type]: #125
[#173 switch_statement]: #323
[#173 texture_and_sampler_types]: #97
[#173 type_specifier_without_ident]: #79
[#173 variable_decl]: #342
[#173 variable_statement]: #328
[#173 variable_updating_statement]: #332
[#173 vec_prefix]: #80
[#173 while_statement]: #326
[#174 texel_format]: #299
[#175 array_type_specifier]: #95
[#175 depth_texture_type]: #122
[#175 ident]: #278
[#175 mat_prefix]: #281
[#175 multisampled_texture_type]: #124
[#175 sampled_texture_type]: #123
[#175 sampler_type]: #121
[#175 storage_texture_type]: #125
[#175 texture_and_sampler_types]: #97
[#175 type_specifier]: #298
[#175 type_specifier_without_ident]: #279
[#175 vec_prefix]: #280
[#176 array_type_specifier]: #95
[#176 depth_texture_type]: #122
[#176 ident]: #278
[#176 mat_prefix]: #281
[#176 multisampled_texture_type]: #124
[#176 sampled_texture_type]: #123
[#176 sampler_type]: #121
[#176 storage_texture_type]: #125
[#176 texture_and_sampler_types]: #97
[#176 type_specifier]: #297
[#176 type_specifier_without_ident]: #279
[#176 vec_prefix]: #280
[#177 array_type_specifier]: #95
[#177 depth_texture_type]: #122
[#177 ident]: #278
[#177 mat_prefix]: #281
[#177 multisampled_texture_type]: #124
[#177 sampled_texture_type]: #123
[#177 sampler_type]: #121
[#177 storage_texture_type]: #125
[#177 texture_and_sampler_types]: #97
[#177 type_specifier]: #296
[#177 type_specifier_without_ident]: #279
[#177 vec_prefix]: #280
[#178 address_space]: #290
[#179 array_type_specifier]: #95
[#179 depth_texture_type]: #122
[#179 ident]: #278
[#179 mat_prefix]: #281
[#179 multisampled_texture_type]: #124
[#179 sampled_texture_type]: #123
[#179 sampler_type]: #121
[#179 storage_texture_type]: #125
[#179 texture_and_sampler_types]: #97
[#179 type_specifier]: #289
[#179 type_specifier_without_ident]: #279
[#179 vec_prefix]: #280
[#180 array_type_specifier]: #95
[#180 depth_texture_type]: #122
[#180 ident]: #278
[#180 mat_prefix]: #281
[#180 multisampled_texture_type]: #124
[#180 sampled_texture_type]: #123
[#180 sampler_type]: #121
[#180 storage_texture_type]: #125
[#180 texture_and_sampler_types]: #97
[#180 type_specifier]: #288
[#180 type_specifier_without_ident]: #279
[#180 vec_prefix]: #280
[#181 array_type_specifier]: #95
[#181 depth_texture_type]: #122
[#181 ident]: #278
[#181 mat_prefix]: #281
[#181 multisampled_texture_type]: #124
[#181 sampled_texture_type]: #123
[#181 sampler_type]: #121
[#181 storage_texture_type]: #125
[#181 texture_and_sampler_types]: #97
[#181 type_specifier]: #287
[#181 type_specifier_without_ident]: #279
[#181 vec_prefix]: #280
[#184 additive_expression]: #58
[#184 argument_expression_list/0.1]: #283
[#184 array_type_specifier]: #95
[#184 binary_and_expression]: #55
[#184 binary_or_expression]: #56
[#184 binary_xor_expression]: #57
[#184 bitwise_expression]: #53
[#184 bool_literal]: #77
[#184 call_expression]: #69
[#184 callable]: #74
[#184 decimal_float_literal]: #85
[#184 decimal_int_literal]: #83
[#184 depth_texture_type]: #122
[#184 expression]: #285
[#184 expression_comma_list]: #284
[#184 float_literal]: #76
[#184 hex_float_literal]: #86
[#184 hex_int_literal]: #84
[#184 ident]: #68
[#184 int_literal]: #75
[#184 literal]: #70
[#184 mat_prefix]: #81
[#184 multiplicative_expression]: #60
[#184 multisampled_texture_type]: #124
[#184 paren_expression]: #71
[#184 primary_expression]: #67
[#184 relational_expression]: #50
[#184 sampled_texture_type]: #123
[#184 sampler_type]: #121
[#184 shift_expression]: #54
[#184 short_circuit_and_expression]: #52
[#184 short_circuit_or_expression]: #51
[#184 singular_expression]: #61
[#184 storage_texture_type]: #125
[#184 texture_and_sampler_types]: #97
[#184 type_specifier_without_ident]: #79
[#184 unary_expression]: #59
[#184 vec_prefix]: #80
[#185 array_type_specifier]: #95
[#185 depth_texture_type]: #122
[#185 ident]: #278
[#185 mat_prefix]: #281
[#185 multisampled_texture_type]: #124
[#185 sampled_texture_type]: #123
[#185 sampler_type]: #121
[#185 storage_texture_type]: #125
[#185 texture_and_sampler_types]: #97
[#185 type_specifier]: #277
[#185 type_specifier_without_ident]: #279
[#185 vec_prefix]: #280
[#188 additive_expression]: #58
[#188 array_type_specifier]: #95
[#188 binary_and_expression]: #55
[#188 binary_or_expression]: #56
[#188 binary_xor_expression]: #57
[#188 bitwise_expression]: #53
[#188 bool_literal]: #77
[#188 call_expression]: #69
[#188 callable]: #74
[#188 decimal_float_literal]: #85
[#188 decimal_int_literal]: #83
[#188 depth_texture_type]: #122
[#188 expression]: #276
[#188 float_literal]: #76
[#188 hex_float_literal]: #86
[#188 hex_int_literal]: #84
[#188 ident]: #68
[#188 int_literal]: #75
[#188 literal]: #70
[#188 mat_prefix]: #81
[#188 multiplicative_expression]: #60
[#188 multisampled_texture_type]: #124
[#188 paren_expression]: #71
[#188 primary_expression]: #67
[#188 relational_expression]: #50
[#188 sampled_texture_type]: #123
[#188 sampler_type]: #121
[#188 shift_expression]: #54
[#188 short_circuit_and_expression]: #52
[#188 short_circuit_or_expression]: #51
[#188 singular_expression]: #61
[#188 storage_texture_type]: #125
[#188 texture_and_sampler_types]: #97
[#188 type_specifier_without_ident]: #79
[#188 unary_expression]: #59
[#188 vec_prefix]: #80
[#189 member_ident]: #265
[#189 swizzle_name]: #266
[#195 array_type_specifier]: #95
[#195 bool_literal]: #77
[#195 call_expression]: #69
[#195 callable]: #74
[#195 decimal_float_literal]: #85
[#195 decimal_int_literal]: #83
[#195 depth_texture_type]: #122
[#195 float_literal]: #76
[#195 hex_float_literal]: #86
[#195 hex_int_literal]: #84
[#195 ident]: #68
[#195 int_literal]: #75
[#195 literal]: #70
[#195 mat_prefix]: #81
[#195 multisampled_texture_type]: #124
[#195 paren_expression]: #71
[#195 primary_expression]: #67
[#195 sampled_texture_type]: #123
[#195 sampler_type]: #121
[#195 singular_expression]: #61
[#195 storage_texture_type]: #125
[#195 texture_and_sampler_types]: #97
[#195 type_specifier_without_ident]: #79
[#195 unary_expression]: #264
[#195 vec_prefix]: #80
[#199 array_type_specifier]: #95
[#199 bool_literal]: #77
[#199 call_expression]: #69
[#199 callable]: #74
[#199 decimal_float_literal]: #85
[#199 decimal_int_literal]: #83
[#199 depth_texture_type]: #122
[#199 float_literal]: #76
[#199 hex_float_literal]: #86
[#199 hex_int_literal]: #84
[#199 ident]: #68
[#199 int_literal]: #75
[#199 literal]: #70
[#199 mat_prefix]: #81
[#199 multisampled_texture_type]: #124
[#199 paren_expression]: #71
[#199 primary_expression]: #67
[#199 sampled_texture_type]: #123
[#199 sampler_type]: #121
[#199 singular_expression]: #61
[#199 storage_texture_type]: #125
[#199 texture_and_sampler_types]: #97
[#199 type_specifier_without_ident]: #79
[#199 unary_expression]: #263
[#199 vec_prefix]: #80
[#200 array_type_specifier]: #95
[#200 bool_literal]: #77
[#200 call_expression]: #69
[#200 callable]: #74
[#200 decimal_float_literal]: #85
[#200 decimal_int_literal]: #83
[#200 depth_texture_type]: #122
[#200 float_literal]: #76
[#200 hex_float_literal]: #86
[#200 hex_int_literal]: #84
[#200 ident]: #68
[#200 int_literal]: #75
[#200 literal]: #70
[#200 mat_prefix]: #81
[#200 multisampled_texture_type]: #124
[#200 paren_expression]: #71
[#200 primary_expression]: #67
[#200 sampled_texture_type]: #123
[#200 sampler_type]: #121
[#200 singular_expression]: #61
[#200 storage_texture_type]: #125
[#200 texture_and_sampler_types]: #97
[#200 type_specifier_without_ident]: #79
[#200 unary_expression]: #262
[#200 vec_prefix]: #80
[#201 array_type_specifier]: #95
[#201 bool_literal]: #77
[#201 call_expression]: #69
[#201 callable]: #74
[#201 decimal_float_literal]: #85
[#201 decimal_int_literal]: #83
[#201 depth_texture_type]: #122
[#201 float_literal]: #76
[#201 hex_float_literal]: #86
[#201 hex_int_literal]: #84
[#201 ident]: #68
[#201 int_literal]: #75
[#201 literal]: #70
[#201 mat_prefix]: #81
[#201 multiplicative_expression]: #260
[#201 multisampled_texture_type]: #124
[#201 paren_expression]: #71
[#201 primary_expression]: #67
[#201 sampled_texture_type]: #123
[#201 sampler_type]: #121
[#201 singular_expression]: #61
[#201 storage_texture_type]: #125
[#201 texture_and_sampler_types]: #97
[#201 type_specifier_without_ident]: #79
[#201 unary_expression]: #261
[#201 vec_prefix]: #80
[#204 array_type_specifier]: #95
[#204 bool_literal]: #77
[#204 call_expression]: #69
[#204 callable]: #74
[#204 decimal_float_literal]: #85
[#204 decimal_int_literal]: #83
[#204 depth_texture_type]: #122
[#204 float_literal]: #76
[#204 hex_float_literal]: #86
[#204 hex_int_literal]: #84
[#204 ident]: #68
[#204 int_literal]: #75
[#204 literal]: #70
[#204 mat_prefix]: #81
[#204 multisampled_texture_type]: #124
[#204 paren_expression]: #71
[#204 primary_expression]: #67
[#204 sampled_texture_type]: #123
[#204 sampler_type]: #121
[#204 singular_expression]: #61
[#204 storage_texture_type]: #125
[#204 texture_and_sampler_types]: #97
[#204 type_specifier_without_ident]: #79
[#204 unary_expression]: #259
[#204 vec_prefix]: #80
[#205 array_type_specifier]: #95
[#205 bool_literal]: #77
[#205 call_expression]: #69
[#205 callable]: #74
[#205 decimal_float_literal]: #85
[#205 decimal_int_literal]: #83
[#205 depth_texture_type]: #122
[#205 float_literal]: #76
[#205 hex_float_literal]: #86
[#205 hex_int_literal]: #84
[#205 ident]: #68
[#205 int_literal]: #75
[#205 literal]: #70
[#205 mat_prefix]: #81
[#205 multisampled_texture_type]: #124
[#205 paren_expression]: #71
[#205 primary_expression]: #67
[#205 sampled_texture_type]: #123
[#205 sampler_type]: #121
[#205 singular_expression]: #61
[#205 storage_texture_type]: #125
[#205 texture_and_sampler_types]: #97
[#205 type_specifier_without_ident]: #79
[#205 unary_expression]: #258
[#205 vec_prefix]: #80
[#206 array_type_specifier]: #95
[#206 bool_literal]: #77
[#206 call_expression]: #69
[#206 callable]: #74
[#206 decimal_float_literal]: #85
[#206 decimal_int_literal]: #83
[#206 depth_texture_type]: #122
[#206 float_literal]: #76
[#206 hex_float_literal]: #86
[#206 hex_int_literal]: #84
[#206 ident]: #68
[#206 int_literal]: #75
[#206 literal]: #70
[#206 mat_prefix]: #81
[#206 multisampled_texture_type]: #124
[#206 paren_expression]: #71
[#206 primary_expression]: #67
[#206 sampled_texture_type]: #123
[#206 sampler_type]: #121
[#206 singular_expression]: #61
[#206 storage_texture_type]: #125
[#206 texture_and_sampler_types]: #97
[#206 type_specifier_without_ident]: #79
[#206 unary_expression]: #257
[#206 vec_prefix]: #80
[#207 additive_expression]: #58
[#207 array_type_specifier]: #95
[#207 bool_literal]: #77
[#207 call_expression]: #69
[#207 callable]: #74
[#207 decimal_float_literal]: #85
[#207 decimal_int_literal]: #83
[#207 depth_texture_type]: #122
[#207 float_literal]: #76
[#207 hex_float_literal]: #86
[#207 hex_int_literal]: #84
[#207 ident]: #68
[#207 int_literal]: #75
[#207 literal]: #70
[#207 mat_prefix]: #81
[#207 multiplicative_expression]: #60
[#207 multisampled_texture_type]: #124
[#207 paren_expression]: #71
[#207 primary_expression]: #67
[#207 sampled_texture_type]: #123
[#207 sampler_type]: #121
[#207 shift_expression]: #256
[#207 singular_expression]: #61
[#207 storage_texture_type]: #125
[#207 texture_and_sampler_types]: #97
[#207 type_specifier_without_ident]: #79
[#207 unary_expression]: #249
[#207 vec_prefix]: #80
[#208 additive_expression]: #58
[#208 array_type_specifier]: #95
[#208 bool_literal]: #77
[#208 call_expression]: #69
[#208 callable]: #74
[#208 decimal_float_literal]: #85
[#208 decimal_int_literal]: #83
[#208 depth_texture_type]: #122
[#208 float_literal]: #76
[#208 hex_float_literal]: #86
[#208 hex_int_literal]: #84
[#208 ident]: #68
[#208 int_literal]: #75
[#208 literal]: #70
[#208 mat_prefix]: #81
[#208 multiplicative_expression]: #60
[#208 multisampled_texture_type]: #124
[#208 paren_expression]: #71
[#208 primary_expression]: #67
[#208 sampled_texture_type]: #123
[#208 sampler_type]: #121
[#208 shift_expression]: #255
[#208 singular_expression]: #61
[#208 storage_texture_type]: #125
[#208 texture_and_sampler_types]: #97
[#208 type_specifier_without_ident]: #79
[#208 unary_expression]: #249
[#208 vec_prefix]: #80
[#209 additive_expression]: #58
[#209 array_type_specifier]: #95
[#209 bool_literal]: #77
[#209 call_expression]: #69
[#209 callable]: #74
[#209 decimal_float_literal]: #85
[#209 decimal_int_literal]: #83
[#209 depth_texture_type]: #122
[#209 float_literal]: #76
[#209 hex_float_literal]: #86
[#209 hex_int_literal]: #84
[#209 ident]: #68
[#209 int_literal]: #75
[#209 literal]: #70
[#209 mat_prefix]: #81
[#209 multiplicative_expression]: #60
[#209 multisampled_texture_type]: #124
[#209 paren_expression]: #71
[#209 primary_expression]: #67
[#209 sampled_texture_type]: #123
[#209 sampler_type]: #121
[#209 shift_expression]: #254
[#209 singular_expression]: #61
[#209 storage_texture_type]: #125
[#209 texture_and_sampler_types]: #97
[#209 type_specifier_without_ident]: #79
[#209 unary_expression]: #249
[#209 vec_prefix]: #80
[#210 additive_expression]: #58
[#210 array_type_specifier]: #95
[#210 bool_literal]: #77
[#210 call_expression]: #69
[#210 callable]: #74
[#210 decimal_float_literal]: #85
[#210 decimal_int_literal]: #83
[#210 depth_texture_type]: #122
[#210 float_literal]: #76
[#210 hex_float_literal]: #86
[#210 hex_int_literal]: #84
[#210 ident]: #68
[#210 int_literal]: #75
[#210 literal]: #70
[#210 mat_prefix]: #81
[#210 multiplicative_expression]: #60
[#210 multisampled_texture_type]: #124
[#210 paren_expression]: #71
[#210 primary_expression]: #67
[#210 sampled_texture_type]: #123
[#210 sampler_type]: #121
[#210 shift_expression]: #253
[#210 singular_expression]: #61
[#210 storage_texture_type]: #125
[#210 texture_and_sampler_types]: #97
[#210 type_specifier_without_ident]: #79
[#210 unary_expression]: #249
[#210 vec_prefix]: #80
[#211 additive_expression]: #58
[#211 array_type_specifier]: #95
[#211 bool_literal]: #77
[#211 call_expression]: #69
[#211 callable]: #74
[#211 decimal_float_literal]: #85
[#211 decimal_int_literal]: #83
[#211 depth_texture_type]: #122
[#211 float_literal]: #76
[#211 hex_float_literal]: #86
[#211 hex_int_literal]: #84
[#211 ident]: #68
[#211 int_literal]: #75
[#211 literal]: #70
[#211 mat_prefix]: #81
[#211 multiplicative_expression]: #60
[#211 multisampled_texture_type]: #124
[#211 paren_expression]: #71
[#211 primary_expression]: #67
[#211 sampled_texture_type]: #123
[#211 sampler_type]: #121
[#211 shift_expression]: #252
[#211 singular_expression]: #61
[#211 storage_texture_type]: #125
[#211 texture_and_sampler_types]: #97
[#211 type_specifier_without_ident]: #79
[#211 unary_expression]: #249
[#211 vec_prefix]: #80
[#212 additive_expression]: #58
[#212 array_type_specifier]: #95
[#212 bool_literal]: #77
[#212 call_expression]: #69
[#212 callable]: #74
[#212 decimal_float_literal]: #85
[#212 decimal_int_literal]: #83
[#212 depth_texture_type]: #122
[#212 float_literal]: #76
[#212 hex_float_literal]: #86
[#212 hex_int_literal]: #84
[#212 ident]: #68
[#212 int_literal]: #75
[#212 literal]: #70
[#212 mat_prefix]: #81
[#212 multiplicative_expression]: #60
[#212 multisampled_texture_type]: #124
[#212 paren_expression]: #71
[#212 primary_expression]: #67
[#212 sampled_texture_type]: #123
[#212 sampler_type]: #121
[#212 shift_expression]: #251
[#212 singular_expression]: #61
[#212 storage_texture_type]: #125
[#212 texture_and_sampler_types]: #97
[#212 type_specifier_without_ident]: #79
[#212 unary_expression]: #249
[#212 vec_prefix]: #80
[#213 additive_expression]: #58
[#213 array_type_specifier]: #95
[#213 bool_literal]: #77
[#213 call_expression]: #69
[#213 callable]: #74
[#213 decimal_float_literal]: #85
[#213 decimal_int_literal]: #83
[#213 depth_texture_type]: #122
[#213 float_literal]: #76
[#213 hex_float_literal]: #86
[#213 hex_int_literal]: #84
[#213 ident]: #68
[#213 int_literal]: #75
[#213 literal]: #70
[#213 mat_prefix]: #81
[#213 multiplicative_expression]: #60
[#213 multisampled_texture_type]: #124
[#213 paren_expression]: #71
[#213 primary_expression]: #67
[#213 relational_expression]: #250
[#213 sampled_texture_type]: #123
[#213 sampler_type]: #121
[#213 shift_expression]: #54
[#213 singular_expression]: #61
[#213 storage_texture_type]: #125
[#213 texture_and_sampler_types]: #97
[#213 type_specifier_without_ident]: #79
[#213 unary_expression]: #249
[#213 vec_prefix]: #80
[#214 additive_expression]: #58
[#214 array_type_specifier]: #95
[#214 bool_literal]: #77
[#214 call_expression]: #69
[#214 callable]: #74
[#214 decimal_float_literal]: #85
[#214 decimal_int_literal]: #83
[#214 depth_texture_type]: #122
[#214 float_literal]: #76
[#214 hex_float_literal]: #86
[#214 hex_int_literal]: #84
[#214 ident]: #68
[#214 int_literal]: #75
[#214 literal]: #70
[#214 mat_prefix]: #81
[#214 multiplicative_expression]: #60
[#214 multisampled_texture_type]: #124
[#214 paren_expression]: #71
[#214 primary_expression]: #67
[#214 relational_expression]: #248
[#214 sampled_texture_type]: #123
[#214 sampler_type]: #121
[#214 shift_expression]: #54
[#214 singular_expression]: #61
[#214 storage_texture_type]: #125
[#214 texture_and_sampler_types]: #97
[#214 type_specifier_without_ident]: #79
[#214 unary_expression]: #249
[#214 vec_prefix]: #80
[#215 additive_expression]: #58
[#215 array_type_specifier]: #95
[#215 binary_and_expression]: #55
[#215 binary_or_expression]: #56
[#215 binary_xor_expression]: #57
[#215 bitwise_expression]: #53
[#215 bool_literal]: #77
[#215 call_expression]: #69
[#215 callable]: #74
[#215 decimal_float_literal]: #85
[#215 decimal_int_literal]: #83
[#215 depth_texture_type]: #122
[#215 expression]: #247
[#215 float_literal]: #76
[#215 hex_float_literal]: #86
[#215 hex_int_literal]: #84
[#215 ident]: #68
[#215 int_literal]: #75
[#215 literal]: #70
[#215 mat_prefix]: #81
[#215 multiplicative_expression]: #60
[#215 multisampled_texture_type]: #124
[#215 paren_expression]: #71
[#215 primary_expression]: #67
[#215 relational_expression]: #50
[#215 sampled_texture_type]: #123
[#215 sampler_type]: #121
[#215 shift_expression]: #54
[#215 short_circuit_and_expression]: #52
[#215 short_circuit_or_expression]: #51
[#215 singular_expression]: #61
[#215 storage_texture_type]: #125
[#215 texture_and_sampler_types]: #97
[#215 type_specifier_without_ident]: #79
[#215 unary_expression]: #59
[#215 vec_prefix]: #80
[#216 additive_expression]: #58
[#216 array_type_specifier]: #95
[#216 binary_and_expression]: #55
[#216 binary_or_expression]: #56
[#216 binary_xor_expression]: #57
[#216 bitwise_expression]: #53
[#216 bool_literal]: #77
[#216 call_expression]: #69
[#216 callable]: #74
[#216 decimal_float_literal]: #85
[#216 decimal_int_literal]: #83
[#216 depth_texture_type]: #122
[#216 expression]: #246
[#216 float_literal]: #76
[#216 hex_float_literal]: #86
[#216 hex_int_literal]: #84
[#216 ident]: #68
[#216 int_literal]: #75
[#216 literal]: #70
[#216 mat_prefix]: #81
[#216 multiplicative_expression]: #60
[#216 multisampled_texture_type]: #124
[#216 paren_expression]: #71
[#216 primary_expression]: #67
[#216 relational_expression]: #50
[#216 sampled_texture_type]: #123
[#216 sampler_type]: #121
[#216 shift_expression]: #54
[#216 short_circuit_and_expression]: #52
[#216 short_circuit_or_expression]: #51
[#216 singular_expression]: #61
[#216 storage_texture_type]: #125
[#216 texture_and_sampler_types]: #97
[#216 type_specifier_without_ident]: #79
[#216 unary_expression]: #59
[#216 vec_prefix]: #80
[#217 additive_expression]: #58
[#217 array_type_specifier]: #95
[#217 binary_and_expression]: #55
[#217 binary_or_expression]: #56
[#217 binary_xor_expression]: #57
[#217 bitwise_expression]: #53
[#217 bool_literal]: #77
[#217 call_expression]: #69
[#217 callable]: #74
[#217 decimal_float_literal]: #85
[#217 decimal_int_literal]: #83
[#217 depth_texture_type]: #122
[#217 expression]: #245
[#217 float_literal]: #76
[#217 hex_float_literal]: #86
[#217 hex_int_literal]: #84
[#217 ident]: #68
[#217 int_literal]: #75
[#217 literal]: #70
[#217 mat_prefix]: #81
[#217 multiplicative_expression]: #60
[#217 multisampled_texture_type]: #124
[#217 paren_expression]: #71
[#217 primary_expression]: #67
[#217 relational_expression]: #50
[#217 sampled_texture_type]: #123
[#217 sampler_type]: #121
[#217 shift_expression]: #54
[#217 short_circuit_and_expression]: #52
[#217 short_circuit_or_expression]: #51
[#217 singular_expression]: #61
[#217 storage_texture_type]: #125
[#217 texture_and_sampler_types]: #97
[#217 type_specifier_without_ident]: #79
[#217 unary_expression]: #59
[#217 vec_prefix]: #80
[#218 interpolation_type_name]: #241
[#219 additive_expression]: #58
[#219 array_type_specifier]: #95
[#219 binary_and_expression]: #55
[#219 binary_or_expression]: #56
[#219 binary_xor_expression]: #57
[#219 bitwise_expression]: #53
[#219 bool_literal]: #77
[#219 call_expression]: #69
[#219 callable]: #74
[#219 decimal_float_literal]: #85
[#219 decimal_int_literal]: #83
[#219 depth_texture_type]: #122
[#219 expression]: #240
[#219 float_literal]: #76
[#219 hex_float_literal]: #86
[#219 hex_int_literal]: #84
[#219 ident]: #68
[#219 int_literal]: #75
[#219 literal]: #70
[#219 mat_prefix]: #81
[#219 multiplicative_expression]: #60
[#219 multisampled_texture_type]: #124
[#219 paren_expression]: #71
[#219 primary_expression]: #67
[#219 relational_expression]: #50
[#219 sampled_texture_type]: #123
[#219 sampler_type]: #121
[#219 shift_expression]: #54
[#219 short_circuit_and_expression]: #52
[#219 short_circuit_or_expression]: #51
[#219 singular_expression]: #61
[#219 storage_texture_type]: #125
[#219 texture_and_sampler_types]: #97
[#219 type_specifier_without_ident]: #79
[#219 unary_expression]: #59
[#219 vec_prefix]: #80
[#220 additive_expression]: #58
[#220 array_type_specifier]: #95
[#220 binary_and_expression]: #55
[#220 binary_or_expression]: #56
[#220 binary_xor_expression]: #57
[#220 bitwise_expression]: #53
[#220 bool_literal]: #77
[#220 call_expression]: #69
[#220 callable]: #74
[#220 decimal_float_literal]: #85
[#220 decimal_int_literal]: #83
[#220 depth_texture_type]: #122
[#220 expression]: #239
[#220 float_literal]: #76
[#220 hex_float_literal]: #86
[#220 hex_int_literal]: #84
[#220 ident]: #68
[#220 int_literal]: #75
[#220 literal]: #70
[#220 mat_prefix]: #81
[#220 multiplicative_expression]: #60
[#220 multisampled_texture_type]: #124
[#220 paren_expression]: #71
[#220 primary_expression]: #67
[#220 relational_expression]: #50
[#220 sampled_texture_type]: #123
[#220 sampler_type]: #121
[#220 shift_expression]: #54
[#220 short_circuit_and_expression]: #52
[#220 short_circuit_or_expression]: #51
[#220 singular_expression]: #61
[#220 storage_texture_type]: #125
[#220 texture_and_sampler_types]: #97
[#220 type_specifier_without_ident]: #79
[#220 unary_expression]: #59
[#220 vec_prefix]: #80
[#221 builtin_value_name]: #226
[#222 additive_expression]: #58
[#222 array_type_specifier]: #95
[#222 binary_and_expression]: #55
[#222 binary_or_expression]: #56
[#222 binary_xor_expression]: #57
[#222 bitwise_expression]: #53
[#222 bool_literal]: #77
[#222 call_expression]: #69
[#222 callable]: #74
[#222 decimal_float_literal]: #85
[#222 decimal_int_literal]: #83
[#222 depth_texture_type]: #122
[#222 expression]: #225
[#222 float_literal]: #76
[#222 hex_float_literal]: #86
[#222 hex_int_literal]: #84
[#222 ident]: #68
[#222 int_literal]: #75
[#222 literal]: #70
[#222 mat_prefix]: #81
[#222 multiplicative_expression]: #60
[#222 multisampled_texture_type]: #124
[#222 paren_expression]: #71
[#222 primary_expression]: #67
[#222 relational_expression]: #50
[#222 sampled_texture_type]: #123
[#222 sampler_type]: #121
[#222 shift_expression]: #54
[#222 short_circuit_and_expression]: #52
[#222 short_circuit_or_expression]: #51
[#222 singular_expression]: #61
[#222 storage_texture_type]: #125
[#222 texture_and_sampler_types]: #97
[#222 type_specifier_without_ident]: #79
[#222 unary_expression]: #59
[#222 vec_prefix]: #80
[#223 additive_expression]: #58
[#223 array_type_specifier]: #95
[#223 binary_and_expression]: #55
[#223 binary_or_expression]: #56
[#223 binary_xor_expression]: #57
[#223 bitwise_expression]: #53
[#223 bool_literal]: #77
[#223 call_expression]: #69
[#223 callable]: #74
[#223 decimal_float_literal]: #85
[#223 decimal_int_literal]: #83
[#223 depth_texture_type]: #122
[#223 expression]: #224
[#223 float_literal]: #76
[#223 hex_float_literal]: #86
[#223 hex_int_literal]: #84
[#223 ident]: #68
[#223 int_literal]: #75
[#223 literal]: #70
[#223 mat_prefix]: #81
[#223 multiplicative_expression]: #60
[#223 multisampled_texture_type]: #124
[#223 paren_expression]: #71
[#223 primary_expression]: #67
[#223 relational_expression]: #50
[#223 sampled_texture_type]: #123
[#223 sampler_type]: #121
[#223 shift_expression]: #54
[#223 short_circuit_and_expression]: #52
[#223 short_circuit_or_expression]: #51
[#223 singular_expression]: #61
[#223 storage_texture_type]: #125
[#223 texture_and_sampler_types]: #97
[#223 type_specifier_without_ident]: #79
[#223 unary_expression]: #59
[#223 vec_prefix]: #80
[#224 attrib_end]: #465
[#224 attrib_end/0.0]: #455
[#225 attrib_end]: #464
[#225 attrib_end/0.0]: #455
[#226 attrib_end]: #463
[#226 attrib_end/0.0]: #455
[#239 attrib_end]: #462
[#239 attrib_end/0.0]: #455
[#240 attrib_end]: #461
[#240 attrib_end/0.0]: #455
[#241 attrib_end]: #459
[#241 attrib_end/0.0]: #455
[#245 attrib_end]: #458
[#245 attrib_end/0.0]: #455
[#246 attrib_end]: #456
[#246 attrib_end/0.0]: #455
[#247 attrib_end]: #453
[#247 attrib_end/0.0]: #455
[#260 multiplicative_operator]: #195
[#265 component_or_swizzle_specifier]: #452
[#265 component_or_swizzle_specifier/1.2]: #451
[#266 component_or_swizzle_specifier]: #450
[#266 component_or_swizzle_specifier/2.2]: #449
[#285 expression_comma_list/0.1]: #442
[#285 expression_comma_list/0.1/0]: #443
[#285 expression_comma_list/0.1/0/0.0]: #444
[#289 array_type_specifier/0.3]: #438
[#319 array_type_specifier]: #95
[#319 assignment_statement]: #347
[#319 break_statement]: #329
[#319 callable]: #341
[#319 compound_statement]: #333
[#319 compound_statement/0.1/0]: #431
[#319 const_assert_statement]: #334
[#319 continue_statement]: #330
[#319 core_lhs_expression]: #354
[#319 decrement_statement]: #349
[#319 depth_texture_type]: #122
[#319 for_statement]: #325
[#319 func_call_statement]: #327
[#319 ident]: #351
[#319 if_clause]: #336
[#319 if_statement]: #322
[#319 increment_statement]: #348
[#319 lhs_expression]: #352
[#319 loop_statement]: #324
[#319 mat_prefix]: #81
[#319 multisampled_texture_type]: #124
[#319 return_statement]: #321
[#319 sampled_texture_type]: #123
[#319 sampler_type]: #121
[#319 statement]: #319
[#319 storage_texture_type]: #125
[#319 switch_statement]: #323
[#319 texture_and_sampler_types]: #97
[#319 type_specifier_without_ident]: #79
[#319 variable_decl]: #342
[#319 variable_statement]: #328
[#319 variable_updating_statement]: #332
[#319 vec_prefix]: #80
[#319 while_statement]: #326
[#335 additive_expression]: #58
[#335 array_type_specifier]: #95
[#335 binary_and_expression]: #55
[#335 binary_or_expression]: #56
[#335 binary_xor_expression]: #57
[#335 bitwise_expression]: #53
[#335 bool_literal]: #77
[#335 call_expression]: #69
[#335 callable]: #74
[#335 decimal_float_literal]: #85
[#335 decimal_int_literal]: #83
[#335 depth_texture_type]: #122
[#335 expression]: #422
[#335 float_literal]: #76
[#335 hex_float_literal]: #86
[#335 hex_int_literal]: #84
[#335 ident]: #68
[#335 int_literal]: #75
[#335 literal]: #70
[#335 mat_prefix]: #81
[#335 multiplicative_expression]: #60
[#335 multisampled_texture_type]: #124
[#335 paren_expression]: #71
[#335 primary_expression]: #67
[#335 relational_expression]: #50
[#335 return_statement/0.1]: #421
[#335 sampled_texture_type]: #123
[#335 sampler_type]: #121
[#335 shift_expression]: #54
[#335 short_circuit_and_expression]: #52
[#335 short_circuit_or_expression]: #51
[#335 singular_expression]: #61
[#335 storage_texture_type]: #125
[#335 texture_and_sampler_types]: #97
[#335 type_specifier_without_ident]: #79
[#335 unary_expression]: #59
[#335 vec_prefix]: #80
[#336 else_if_clause]: #419
[#336 if_statement/0.1]: #417
[#336 if_statement/0.1/0]: #418
[#337 additive_expression]: #58
[#337 array_type_specifier]: #95
[#337 binary_and_expression]: #55
[#337 binary_or_expression]: #56
[#337 binary_xor_expression]: #57
[#337 bitwise_expression]: #53
[#337 bool_literal]: #77
[#337 call_expression]: #69
[#337 callable]: #74
[#337 decimal_float_literal]: #85
[#337 decimal_int_literal]: #83
[#337 depth_texture_type]: #122
[#337 expression]: #416
[#337 float_literal]: #76
[#337 hex_float_literal]: #86
[#337 hex_int_literal]: #84
[#337 ident]: #68
[#337 int_literal]: #75
[#337 literal]: #70
[#337 mat_prefix]: #81
[#337 multiplicative_expression]: #60
[#337 multisampled_texture_type]: #124
[#337 paren_expression]: #71
[#337 primary_expression]: #67
[#337 relational_expression]: #50
[#337 sampled_texture_type]: #123
[#337 sampler_type]: #121
[#337 shift_expression]: #54
[#337 short_circuit_and_expression]: #52
[#337 short_circuit_or_expression]: #51
[#337 singular_expression]: #61
[#337 storage_texture_type]: #125
[#337 texture_and_sampler_types]: #97
[#337 type_specifier_without_ident]: #79
[#337 unary_expression]: #59
[#337 vec_prefix]: #80
[#340 additive_expression]: #58
[#340 array_type_specifier]: #95
[#340 binary_and_expression]: #55
[#340 binary_or_expression]: #56
[#340 binary_xor_expression]: #57
[#340 bitwise_expression]: #53
[#340 bool_literal]: #77
[#340 call_expression]: #69
[#340 callable]: #74
[#340 decimal_float_literal]: #85
[#340 decimal_int_literal]: #83
[#340 depth_texture_type]: #122
[#340 expression]: #413
[#340 float_literal]: #76
[#340 hex_float_literal]: #86
[#340 hex_int_literal]: #84
[#340 ident]: #68
[#340 int_literal]: #75
[#340 literal]: #70
[#340 mat_prefix]: #81
[#340 multiplicative_expression]: #60
[#340 multisampled_texture_type]: #124
[#340 paren_expression]: #71
[#340 primary_expression]: #67
[#340 relational_expression]: #50
[#340 sampled_texture_type]: #123
[#340 sampler_type]: #121
[#340 shift_expression]: #54
[#340 short_circuit_and_expression]: #52
[#340 short_circuit_or_expression]: #51
[#340 singular_expression]: #61
[#340 storage_texture_type]: #125
[#340 texture_and_sampler_types]: #97
[#340 type_specifier_without_ident]: #79
[#340 unary_expression]: #59
[#340 vec_prefix]: #80
[#341 argument_expression_list]: #412
[#343 ident]: #150
[#343 optionally_typed_ident]: #410
[#344 ident]: #150
[#344 optionally_typed_ident]: #409
[#350 additive_expression]: #58
[#350 array_type_specifier]: #95
[#350 binary_and_expression]: #55
[#350 binary_or_expression]: #56
[#350 binary_xor_expression]: #57
[#350 bitwise_expression]: #53
[#350 bool_literal]: #77
[#350 call_expression]: #69
[#350 callable]: #74
[#350 decimal_float_literal]: #85
[#350 decimal_int_literal]: #83
[#350 depth_texture_type]: #122
[#350 expression]: #408
[#350 float_literal]: #76
[#350 hex_float_literal]: #86
[#350 hex_int_literal]: #84
[#350 ident]: #68
[#350 int_literal]: #75
[#350 literal]: #70
[#350 mat_prefix]: #81
[#350 multiplicative_expression]: #60
[#350 multisampled_texture_type]: #124
[#350 paren_expression]: #71
[#350 primary_expression]: #67
[#350 relational_expression]: #50
[#350 sampled_texture_type]: #123
[#350 sampler_type]: #121
[#350 shift_expression]: #54
[#350 short_circuit_and_expression]: #52
[#350 short_circuit_or_expression]: #51
[#350 singular_expression]: #61
[#350 storage_texture_type]: #125
[#350 texture_and_sampler_types]: #97
[#350 type_specifier_without_ident]: #79
[#350 unary_expression]: #59
[#350 vec_prefix]: #80
[#352 assignment_statement/0.1]: #393
[#352 compound_assignment_operator]: #397
[#354 component_or_swizzle_specifier]: #391
[#354 lhs_expression/0.1]: #390
[#355 core_lhs_expression]: #354
[#355 ident]: #387
[#355 lhs_expression]: #389
[#356 core_lhs_expression]: #354
[#356 ident]: #387
[#356 lhs_expression]: #388
[#357 core_lhs_expression]: #354
[#357 ident]: #387
[#357 lhs_expression]: #386
[#358 attribute]: #385
[#358 function_header/0.3]: #380
[#358 param]: #382
[#358 param/0.0]: #383
[#358 param/0.0/0]: #384
[#358 param_list]: #381
[#359 struct_body_decl/0.2]: #376
[#359 struct_body_decl/0.2/0]: #377
[#359 struct_body_decl/0.2/0/0.0]: #378
[#360 member_ident]: #375
[#362 attribute]: #362
[#362 struct_member/0.0/0]: #374
[#365 additive_expression]: #58
[#365 array_type_specifier]: #95
[#365 binary_and_expression]: #55
[#365 binary_or_expression]: #56
[#365 binary_xor_expression]: #57
[#365 bitwise_expression]: #53
[#365 bool_literal]: #77
[#365 call_expression]: #69
[#365 callable]: #74
[#365 decimal_float_literal]: #85
[#365 decimal_int_literal]: #83
[#365 depth_texture_type]: #122
[#365 expression]: #373
[#365 float_literal]: #76
[#365 hex_float_literal]: #86
[#365 hex_int_literal]: #84
[#365 ident]: #68
[#365 int_literal]: #75
[#365 literal]: #70
[#365 mat_prefix]: #81
[#365 multiplicative_expression]: #60
[#365 multisampled_texture_type]: #124
[#365 paren_expression]: #71
[#365 primary_expression]: #67
[#365 relational_expression]: #50
[#365 sampled_texture_type]: #123
[#365 sampler_type]: #121
[#365 shift_expression]: #54
[#365 short_circuit_and_expression]: #52
[#365 short_circuit_or_expression]: #51
[#365 singular_expression]: #61
[#365 storage_texture_type]: #125
[#365 texture_and_sampler_types]: #97
[#365 type_specifier_without_ident]: #79
[#365 unary_expression]: #59
[#365 vec_prefix]: #80
[#369 variable_qualifier/0.2]: #371
[#372 access_mode]: #524
[#376 struct_body_decl/0.3]: #521
[#378 struct_body_decl/0.2/0]: #520
[#378 struct_body_decl/0.2/0/0.0]: #378
[#379 attribute]: #362
[#379 struct_member]: #519
[#379 struct_member/0.0]: #360
[#379 struct_member/0.0/0]: #361
[#382 param_list/0.1]: #514
[#382 param_list/0.1/0]: #515
[#382 param_list/0.1/0/0.0]: #516
[#383 ident]: #513
[#385 attribute]: #385
[#385 param/0.0/0]: #512
[#392 additive_expression]: #58
[#392 array_type_specifier]: #95
[#392 binary_and_expression]: #55
[#392 binary_or_expression]: #56
[#392 binary_xor_expression]: #57
[#392 bitwise_expression]: #53
[#392 bool_literal]: #77
[#392 call_expression]: #69
[#392 callable]: #74
[#392 decimal_float_literal]: #85
[#392 decimal_int_literal]: #83
[#392 depth_texture_type]: #122
[#392 expression]: #510
[#392 float_literal]: #76
[#392 hex_float_literal]: #86
[#392 hex_int_literal]: #84
[#392 ident]: #68
[#392 int_literal]: #75
[#392 literal]: #70
[#392 mat_prefix]: #81
[#392 multiplicative_expression]: #60
[#392 multisampled_texture_type]: #124
[#392 paren_expression]: #71
[#392 primary_expression]: #67
[#392 relational_expression]: #50
[#392 sampled_texture_type]: #123
[#392 sampler_type]: #121
[#392 shift_expression]: #54
[#392 short_circuit_and_expression]: #52
[#392 short_circuit_or_expression]: #51
[#392 singular_expression]: #61
[#392 storage_texture_type]: #125
[#392 texture_and_sampler_types]: #97
[#392 type_specifier_without_ident]: #79
[#392 unary_expression]: #59
[#392 vec_prefix]: #80
[#393 additive_expression]: #58
[#393 array_type_specifier]: #95
[#393 binary_and_expression]: #55
[#393 binary_or_expression]: #56
[#393 binary_xor_expression]: #57
[#393 bitwise_expression]: #53
[#393 bool_literal]: #77
[#393 call_expression]: #69
[#393 callable]: #74
[#393 decimal_float_literal]: #85
[#393 decimal_int_literal]: #83
[#393 depth_texture_type]: #122
[#393 expression]: #509
[#393 float_literal]: #76
[#393 hex_float_literal]: #86
[#393 hex_int_literal]: #84
[#393 ident]: #68
[#393 int_literal]: #75
[#393 literal]: #70
[#393 mat_prefix]: #81
[#393 multiplicative_expression]: #60
[#393 multisampled_texture_type]: #124
[#393 paren_expression]: #71
[#393 primary_expression]: #67
[#393 relational_expression]: #50
[#393 sampled_texture_type]: #123
[#393 sampler_type]: #121
[#393 shift_expression]: #54
[#393 short_circuit_and_expression]: #52
[#393 short_circuit_or_expression]: #51
[#393 singular_expression]: #61
[#393 storage_texture_type]: #125
[#393 texture_and_sampler_types]: #97
[#393 type_specifier_without_ident]: #79
[#393 unary_expression]: #59
[#393 vec_prefix]: #80
[#408 compound_statement]: #508
[#411 additive_expression]: #58
[#411 array_type_specifier]: #95
[#411 binary_and_expression]: #55
[#411 binary_or_expression]: #56
[#411 binary_xor_expression]: #57
[#411 bitwise_expression]: #53
[#411 bool_literal]: #77
[#411 call_expression]: #69
[#411 callable]: #74
[#411 decimal_float_literal]: #85
[#411 decimal_int_literal]: #83
[#411 depth_texture_type]: #122
[#411 expression]: #505
[#411 float_literal]: #76
[#411 hex_float_literal]: #86
[#411 hex_int_literal]: #84
[#411 ident]: #68
[#411 int_literal]: #75
[#411 literal]: #70
[#411 mat_prefix]: #81
[#411 multiplicative_expression]: #60
[#411 multisampled_texture_type]: #124
[#411 paren_expression]: #71
[#411 primary_expression]: #67
[#411 relational_expression]: #50
[#411 sampled_texture_type]: #123
[#411 sampler_type]: #121
[#411 shift_expression]: #54
[#411 short_circuit_and_expression]: #52
[#411 short_circuit_or_expression]: #51
[#411 singular_expression]: #61
[#411 storage_texture_type]: #125
[#411 texture_and_sampler_types]: #97
[#411 type_specifier_without_ident]: #79
[#411 unary_expression]: #59
[#411 vec_prefix]: #80
[#413 compound_statement]: #504
[#414 array_type_specifier]: #95
[#414 assignment_statement]: #347
[#414 callable]: #341
[#414 core_lhs_expression]: #354
[#414 decrement_statement]: #349
[#414 depth_texture_type]: #122
[#414 for_header]: #498
[#414 for_header/0.0]: #499
[#414 for_init]: #500
[#414 func_call_statement]: #503
[#414 ident]: #351
[#414 increment_statement]: #348
[#414 lhs_expression]: #352
[#414 mat_prefix]: #81
[#414 multisampled_texture_type]: #124
[#414 sampled_texture_type]: #123
[#414 sampler_type]: #121
[#414 storage_texture_type]: #125
[#414 texture_and_sampler_types]: #97
[#414 type_specifier_without_ident]: #79
[#414 variable_decl]: #342
[#414 variable_statement]: #501
[#414 variable_updating_statement]: #502
[#414 vec_prefix]: #80
[#415 array_type_specifier]: #95
[#415 assignment_statement]: #347
[#415 break_statement]: #329
[#415 callable]: #341
[#415 compound_statement]: #333
[#415 const_assert_statement]: #334
[#415 continue_statement]: #330
[#415 core_lhs_expression]: #354
[#415 decrement_statement]: #349
[#415 depth_texture_type]: #122
[#415 for_statement]: #325
[#415 func_call_statement]: #327
[#415 ident]: #351
[#415 if_clause]: #336
[#415 if_statement]: #322
[#415 increment_statement]: #348
[#415 lhs_expression]: #352
[#415 loop_statement]: #324
[#415 loop_statement/0.2]: #495
[#415 loop_statement/0.2/0]: #496
[#415 mat_prefix]: #81
[#415 multisampled_texture_type]: #124
[#415 return_statement]: #321
[#415 sampled_texture_type]: #123
[#415 sampler_type]: #121
[#415 statement]: #497
[#415 storage_texture_type]: #125
[#415 switch_statement]: #323
[#415 texture_and_sampler_types]: #97
[#415 type_specifier_without_ident]: #79
[#415 variable_decl]: #342
[#415 variable_statement]: #328
[#415 variable_updating_statement]: #332
[#415 vec_prefix]: #80
[#415 while_statement]: #326
[#417 else_clause]: #492
[#417 if_statement/0.2]: #491
[#419 else_if_clause]: #419
[#419 if_statement/0.1/0]: #490
[#433 access_mode]: #485
[#437 array_type_specifier]: #95
[#437 depth_texture_type]: #122
[#437 ident]: #278
[#437 mat_prefix]: #281
[#437 multisampled_texture_type]: #124
[#437 sampled_texture_type]: #123
[#437 sampler_type]: #121
[#437 storage_texture_type]: #125
[#437 texture_and_sampler_types]: #97
[#437 type_specifier]: #484
[#437 type_specifier_without_ident]: #279
[#437 vec_prefix]: #280
[#439 additive_expression]: #480
[#439 array_type_specifier]: #95
[#439 binary_and_expression]: #55
[#439 binary_or_expression]: #56
[#439 binary_xor_expression]: #57
[#439 bitwise_expression]: #481
[#439 bool_literal]: #77
[#439 call_expression]: #69
[#439 callable]: #74
[#439 decimal_float_literal]: #85
[#439 decimal_int_literal]: #83
[#439 depth_texture_type]: #122
[#439 element_count_expression]: #479
[#439 float_literal]: #76
[#439 hex_float_literal]: #86
[#439 hex_int_literal]: #84
[#439 ident]: #68
[#439 int_literal]: #75
[#439 literal]: #70
[#439 mat_prefix]: #81
[#439 multiplicative_expression]: #60
[#439 multisampled_texture_type]: #124
[#439 paren_expression]: #71
[#439 primary_expression]: #67
[#439 sampled_texture_type]: #123
[#439 sampler_type]: #121
[#439 singular_expression]: #61
[#439 storage_texture_type]: #125
[#439 texture_and_sampler_types]: #97
[#439 type_specifier_without_ident]: #79
[#439 unary_expression]: #482
[#439 vec_prefix]: #80
[#442 expression_comma_list/0.2]: #477
[#444 expression_comma_list/0.1/0]: #476
[#444 expression_comma_list/0.1/0/0.0]: #444
[#445 additive_expression]: #58
[#445 array_type_specifier]: #95
[#445 binary_and_expression]: #55
[#445 binary_or_expression]: #56
[#445 binary_xor_expression]: #57
[#445 bitwise_expression]: #53
[#445 bool_literal]: #77
[#445 call_expression]: #69
[#445 callable]: #74
[#445 decimal_float_literal]: #85
[#445 decimal_int_literal]: #83
[#445 depth_texture_type]: #122
[#445 expression]: #475
[#445 float_literal]: #76
[#445 hex_float_literal]: #86
[#445 hex_int_literal]: #84
[#445 ident]: #68
[#445 int_literal]: #75
[#445 literal]: #70
[#445 mat_prefix]: #81
[#445 multiplicative_expression]: #60
[#445 multisampled_texture_type]: #124
[#445 paren_expression]: #71
[#445 primary_expression]: #67
[#445 relational_expression]: #50
[#445 sampled_texture_type]: #123
[#445 sampler_type]: #121
[#445 shift_expression]: #54
[#445 short_circuit_and_expression]: #52
[#445 short_circuit_or_expression]: #51
[#445 singular_expression]: #61
[#445 storage_texture_type]: #125
[#445 texture_and_sampler_types]: #97
[#445 type_specifier_without_ident]: #79
[#445 unary_expression]: #59
[#445 vec_prefix]: #80
[#447 paren_expression]: #474
[#448 component_or_swizzle_specifier]: #473
[#448 component_or_swizzle_specifier/0.3]: #472
[#454 additive_expression]: #58
[#454 array_type_specifier]: #95
[#454 binary_and_expression]: #55
[#454 binary_or_expression]: #56
[#454 binary_xor_expression]: #57
[#454 bitwise_expression]: #53
[#454 bool_literal]: #77
[#454 call_expression]: #69
[#454 callable]: #74
[#454 decimal_float_literal]: #85
[#454 decimal_int_literal]: #83
[#454 depth_texture_type]: #122
[#454 expression]: #471
[#454 float_literal]: #76
[#454 hex_float_literal]: #86
[#454 hex_int_literal]: #84
[#454 ident]: #68
[#454 int_literal]: #75
[#454 literal]: #70
[#454 mat_prefix]: #81
[#454 multiplicative_expression]: #60
[#454 multisampled_texture_type]: #124
[#454 paren_expression]: #71
[#454 primary_expression]: #67
[#454 relational_expression]: #50
[#454 sampled_texture_type]: #123
[#454 sampler_type]: #121
[#454 shift_expression]: #54
[#454 short_circuit_and_expression]: #52
[#454 short_circuit_or_expression]: #51
[#454 singular_expression]: #61
[#454 storage_texture_type]: #125
[#454 texture_and_sampler_types]: #97
[#454 type_specifier_without_ident]: #79
[#454 unary_expression]: #59
[#454 vec_prefix]: #80
[#460 interpolation_sample_name]: #466
[#466 attrib_end]: #557
[#466 attrib_end/0.0]: #455
[#471 attrib_end]: #555
[#471 attrib_end/0.0]: #455
[#480 additive_operator]: #201
[#484 type_specifier_without_ident/7.5]: #553
[#489 additive_expression]: #58
[#489 array_type_specifier]: #95
[#489 binary_and_expression]: #55
[#489 binary_or_expression]: #56
[#489 binary_xor_expression]: #57
[#489 bitwise_expression]: #53
[#489 bool_literal]: #77
[#489 call_expression]: #69
[#489 callable]: #74
[#489 decimal_float_literal]: #85
[#489 decimal_int_literal]: #83
[#489 depth_texture_type]: #122
[#489 expression]: #551
[#489 float_literal]: #76
[#489 hex_float_literal]: #86
[#489 hex_int_literal]: #84
[#489 ident]: #68
[#489 int_literal]: #75
[#489 literal]: #70
[#489 mat_prefix]: #81
[#489 multiplicative_expression]: #60
[#489 multisampled_texture_type]: #124
[#489 paren_expression]: #71
[#489 primary_expression]: #67
[#489 relational_expression]: #50
[#489 sampled_texture_type]: #123
[#489 sampler_type]: #121
[#489 shift_expression]: #54
[#489 short_circuit_and_expression]: #52
[#489 short_circuit_or_expression]: #51
[#489 singular_expression]: #61
[#489 storage_texture_type]: #125
[#489 texture_and_sampler_types]: #97
[#489 type_specifier_without_ident]: #79
[#489 unary_expression]: #59
[#489 vec_prefix]: #80
[#493 compound_statement]: #550
[#494 case_clause]: #546
[#494 default_alone_clause]: #547
[#494 switch_body]: #545
[#494 switch_statement/0.3]: #543
[#494 switch_statement/0.3/0]: #544
[#495 continuing_statement]: #541
[#495 loop_statement/0.3]: #540
[#497 array_type_specifier]: #95
[#497 assignment_statement]: #347
[#497 break_statement]: #329
[#497 callable]: #341
[#497 compound_statement]: #333
[#497 const_assert_statement]: #334
[#497 continue_statement]: #330
[#497 core_lhs_expression]: #354
[#497 decrement_statement]: #349
[#497 depth_texture_type]: #122
[#497 for_statement]: #325
[#497 func_call_statement]: #327
[#497 ident]: #351
[#497 if_clause]: #336
[#497 if_statement]: #322
[#497 increment_statement]: #348
[#497 lhs_expression]: #352
[#497 loop_statement]: #324
[#497 loop_statement/0.2/0]: #539
[#497 mat_prefix]: #81
[#497 multisampled_texture_type]: #124
[#497 return_statement]: #321
[#497 sampled_texture_type]: #123
[#497 sampler_type]: #121
[#497 statement]: #497
[#497 storage_texture_type]: #125
[#497 switch_statement]: #323
[#497 texture_and_sampler_types]: #97
[#497 type_specifier_without_ident]: #79
[#497 variable_decl]: #342
[#497 variable_statement]: #328
[#497 variable_updating_statement]: #332
[#497 vec_prefix]: #80
[#497 while_statement]: #326
[#506 additive_expression]: #58
[#506 array_type_specifier]: #95
[#506 binary_and_expression]: #55
[#506 binary_or_expression]: #56
[#506 binary_xor_expression]: #57
[#506 bitwise_expression]: #53
[#506 bool_literal]: #77
[#506 call_expression]: #69
[#506 callable]: #74
[#506 decimal_float_literal]: #85
[#506 decimal_int_literal]: #83
[#506 depth_texture_type]: #122
[#506 expression]: #536
[#506 float_literal]: #76
[#506 hex_float_literal]: #86
[#506 hex_int_literal]: #84
[#506 ident]: #68
[#506 int_literal]: #75
[#506 literal]: #70
[#506 mat_prefix]: #81
[#506 multiplicative_expression]: #60
[#506 multisampled_texture_type]: #124
[#506 paren_expression]: #71
[#506 primary_expression]: #67
[#506 relational_expression]: #50
[#506 sampled_texture_type]: #123
[#506 sampler_type]: #121
[#506 shift_expression]: #54
[#506 short_circuit_and_expression]: #52
[#506 short_circuit_or_expression]: #51
[#506 singular_expression]: #61
[#506 storage_texture_type]: #125
[#506 texture_and_sampler_types]: #97
[#506 type_specifier_without_ident]: #79
[#506 unary_expression]: #59
[#506 vec_prefix]: #80
[#507 additive_expression]: #58
[#507 array_type_specifier]: #95
[#507 binary_and_expression]: #55
[#507 binary_or_expression]: #56
[#507 binary_xor_expression]: #57
[#507 bitwise_expression]: #53
[#507 bool_literal]: #77
[#507 call_expression]: #69
[#507 callable]: #74
[#507 decimal_float_literal]: #85
[#507 decimal_int_literal]: #83
[#507 depth_texture_type]: #122
[#507 expression]: #535
[#507 float_literal]: #76
[#507 hex_float_literal]: #86
[#507 hex_int_literal]: #84
[#507 ident]: #68
[#507 int_literal]: #75
[#507 literal]: #70
[#507 mat_prefix]: #81
[#507 multiplicative_expression]: #60
[#507 multisampled_texture_type]: #124
[#507 paren_expression]: #71
[#507 primary_expression]: #67
[#507 relational_expression]: #50
[#507 sampled_texture_type]: #123
[#507 sampler_type]: #121
[#507 shift_expression]: #54
[#507 short_circuit_and_expression]: #52
[#507 short_circuit_or_expression]: #51
[#507 singular_expression]: #61
[#507 storage_texture_type]: #125
[#507 texture_and_sampler_types]: #97
[#507 type_specifier_without_ident]: #79
[#507 unary_expression]: #59
[#507 vec_prefix]: #80
[#514 param_list/0.2]: #532
[#516 param_list/0.1/0]: #531
[#516 param_list/0.1/0/0.0]: #516
[#517 attribute]: #385
[#517 param]: #530
[#517 param/0.0]: #383
[#517 param/0.0/0]: #384
[#518 function_header/0.5]: #528
[#523 array_type_specifier]: #95
[#523 depth_texture_type]: #122
[#523 ident]: #278
[#523 mat_prefix]: #281
[#523 multisampled_texture_type]: #124
[#523 sampled_texture_type]: #123
[#523 sampler_type]: #121
[#523 storage_texture_type]: #125
[#523 texture_and_sampler_types]: #97
[#523 type_specifier]: #526
[#523 type_specifier_without_ident]: #279
[#523 vec_prefix]: #280
[#529 attribute]: #579
[#529 function_header/0.5/0.1]: #577
[#529 function_header/0.5/0.1/0]: #578
[#534 array_type_specifier]: #95
[#534 depth_texture_type]: #122
[#534 ident]: #278
[#534 mat_prefix]: #281
[#534 multisampled_texture_type]: #124
[#534 sampled_texture_type]: #123
[#534 sampler_type]: #121
[#534 storage_texture_type]: #125
[#534 texture_and_sampler_types]: #97
[#534 type_specifier]: #576
[#534 type_specifier_without_ident]: #279
[#534 vec_prefix]: #280
[#537 additive_expression]: #58
[#537 array_type_specifier]: #95
[#537 binary_and_expression]: #55
[#537 binary_or_expression]: #56
[#537 binary_xor_expression]: #57
[#537 bitwise_expression]: #53
[#537 bool_literal]: #77
[#537 call_expression]: #69
[#537 callable]: #74
[#537 decimal_float_literal]: #85
[#537 decimal_int_literal]: #83
[#537 depth_texture_type]: #122
[#537 expression]: #575
[#537 float_literal]: #76
[#537 for_header/0.2]: #574
[#537 hex_float_literal]: #86
[#537 hex_int_literal]: #84
[#537 ident]: #68
[#537 int_literal]: #75
[#537 literal]: #70
[#537 mat_prefix]: #81
[#537 multiplicative_expression]: #60
[#537 multisampled_texture_type]: #124
[#537 paren_expression]: #71
[#537 primary_expression]: #67
[#537 relational_expression]: #50
[#537 sampled_texture_type]: #123
[#537 sampler_type]: #121
[#537 shift_expression]: #54
[#537 short_circuit_and_expression]: #52
[#537 short_circuit_or_expression]: #51
[#537 singular_expression]: #61
[#537 storage_texture_type]: #125
[#537 texture_and_sampler_types]: #97
[#537 type_specifier_without_ident]: #79
[#537 unary_expression]: #59
[#537 vec_prefix]: #80
[#538 compound_statement]: #573
[#542 continuing_compound_statement]: #570
[#545 case_clause]: #546
[#545 default_alone_clause]: #547
[#545 switch_body]: #545
[#545 switch_statement/0.3/0]: #568
[#548 additive_expression]: #58
[#548 array_type_specifier]: #95
[#548 binary_and_expression]: #55
[#548 binary_or_expression]: #56
[#548 binary_xor_expression]: #57
[#548 bitwise_expression]: #53
[#548 bool_literal]: #77
[#548 call_expression]: #69
[#548 callable]: #74
[#548 case_selector]: #565
[#548 case_selectors]: #564
[#548 decimal_float_literal]: #85
[#548 decimal_int_literal]: #83
[#548 depth_texture_type]: #122
[#548 expression]: #567
[#548 float_literal]: #76
[#548 hex_float_literal]: #86
[#548 hex_int_literal]: #84
[#548 ident]: #68
[#548 int_literal]: #75
[#548 literal]: #70
[#548 mat_prefix]: #81
[#548 multiplicative_expression]: #60
[#548 multisampled_texture_type]: #124
[#548 paren_expression]: #71
[#548 primary_expression]: #67
[#548 relational_expression]: #50
[#548 sampled_texture_type]: #123
[#548 sampler_type]: #121
[#548 shift_expression]: #54
[#548 short_circuit_and_expression]: #52
[#548 short_circuit_or_expression]: #51
[#548 singular_expression]: #61
[#548 storage_texture_type]: #125
[#548 texture_and_sampler_types]: #97
[#548 type_specifier_without_ident]: #79
[#548 unary_expression]: #59
[#548 vec_prefix]: #80
[#549 default_alone_clause/0.1]: #562
[#551 compound_statement]: #561
[#554 access_mode]: #559
[#556 additive_expression]: #58
[#556 array_type_specifier]: #95
[#556 binary_and_expression]: #55
[#556 binary_or_expression]: #56
[#556 binary_xor_expression]: #57
[#556 bitwise_expression]: #53
[#556 bool_literal]: #77
[#556 call_expression]: #69
[#556 callable]: #74
[#556 decimal_float_literal]: #85
[#556 decimal_int_literal]: #83
[#556 depth_texture_type]: #122
[#556 expression]: #558
[#556 float_literal]: #76
[#556 hex_float_literal]: #86
[#556 hex_int_literal]: #84
[#556 ident]: #68
[#556 int_literal]: #75
[#556 literal]: #70
[#556 mat_prefix]: #81
[#556 multiplicative_expression]: #60
[#556 multisampled_texture_type]: #124
[#556 paren_expression]: #71
[#556 primary_expression]: #67
[#556 relational_expression]: #50
[#556 sampled_texture_type]: #123
[#556 sampler_type]: #121
[#556 shift_expression]: #54
[#556 short_circuit_and_expression]: #52
[#556 short_circuit_or_expression]: #51
[#556 singular_expression]: #61
[#556 storage_texture_type]: #125
[#556 texture_and_sampler_types]: #97
[#556 type_specifier_without_ident]: #79
[#556 unary_expression]: #59
[#556 vec_prefix]: #80
[#558 attrib_end]: #593
[#558 attrib_end/0.0]: #455
[#562 compound_statement]: #592
[#564 case_clause/0.2]: #590
[#565 case_selectors/0.1]: #586
[#565 case_selectors/0.1/0]: #587
[#565 case_selectors/0.1/0/0.0]: #588
[#571 array_type_specifier]: #95
[#571 assignment_statement]: #347
[#571 break_statement]: #329
[#571 callable]: #341
[#571 compound_statement]: #333
[#571 const_assert_statement]: #334
[#571 continue_statement]: #330
[#571 continuing_compound_statement/0.1]: #583
[#571 continuing_compound_statement/0.1/0]: #584
[#571 core_lhs_expression]: #354
[#571 decrement_statement]: #349
[#571 depth_texture_type]: #122
[#571 for_statement]: #325
[#571 func_call_statement]: #327
[#571 ident]: #351
[#571 if_clause]: #336
[#571 if_statement]: #322
[#571 increment_statement]: #348
[#571 lhs_expression]: #352
[#571 loop_statement]: #324
[#571 mat_prefix]: #81
[#571 multisampled_texture_type]: #124
[#571 return_statement]: #321
[#571 sampled_texture_type]: #123
[#571 sampler_type]: #121
[#571 statement]: #585
[#571 storage_texture_type]: #125
[#571 switch_statement]: #323
[#571 texture_and_sampler_types]: #97
[#571 type_specifier_without_ident]: #79
[#571 variable_decl]: #342
[#571 variable_statement]: #328
[#571 variable_updating_statement]: #332
[#571 vec_prefix]: #80
[#571 while_statement]: #326
[#577 array_type_specifier]: #95
[#577 depth_texture_type]: #122
[#577 ident]: #278
[#577 mat_prefix]: #281
[#577 multisampled_texture_type]: #124
[#577 sampled_texture_type]: #123
[#577 sampler_type]: #121
[#577 storage_texture_type]: #125
[#577 texture_and_sampler_types]: #97
[#577 type_specifier]: #581
[#577 type_specifier_without_ident]: #279
[#577 vec_prefix]: #280
[#579 attribute]: #579
[#579 function_header/0.5/0.1/0]: #580
[#582 array_type_specifier]: #95
[#582 assignment_statement]: #347
[#582 callable]: #341
[#582 core_lhs_expression]: #354
[#582 decrement_statement]: #349
[#582 depth_texture_type]: #122
[#582 for_header/0.4]: #603
[#582 for_update]: #604
[#582 func_call_statement]: #606
[#582 ident]: #351
[#582 increment_statement]: #348
[#582 lhs_expression]: #352
[#582 mat_prefix]: #81
[#582 multisampled_texture_type]: #124
[#582 sampled_texture_type]: #123
[#582 sampler_type]: #121
[#582 storage_texture_type]: #125
[#582 texture_and_sampler_types]: #97
[#582 type_specifier_without_ident]: #79
[#582 variable_updating_statement]: #605
[#582 vec_prefix]: #80
[#583 break_if_statement]: #601
[#583 continuing_compound_statement/0.2]: #600
[#585 array_type_specifier]: #95
[#585 assignment_statement]: #347
[#585 break_statement]: #329
[#585 callable]: #341
[#585 compound_statement]: #333
[#585 const_assert_statement]: #334
[#585 continue_statement]: #330
[#585 continuing_compound_statement/0.1/0]: #599
[#585 core_lhs_expression]: #354
[#585 decrement_statement]: #349
[#585 depth_texture_type]: #122
[#585 for_statement]: #325
[#585 func_call_statement]: #327
[#585 ident]: #351
[#585 if_clause]: #336
[#585 if_statement]: #322
[#585 increment_statement]: #348
[#585 lhs_expression]: #352
[#585 loop_statement]: #324
[#585 mat_prefix]: #81
[#585 multisampled_texture_type]: #124
[#585 return_statement]: #321
[#585 sampled_texture_type]: #123
[#585 sampler_type]: #121
[#585 statement]: #585
[#585 storage_texture_type]: #125
[#585 switch_statement]: #323
[#585 texture_and_sampler_types]: #97
[#585 type_specifier_without_ident]: #79
[#585 variable_decl]: #342
[#585 variable_statement]: #328
[#585 variable_updating_statement]: #332
[#585 vec_prefix]: #80
[#585 while_statement]: #326
[#586 case_selectors/0.2]: #597
[#588 case_selectors/0.1/0]: #596
[#588 case_selectors/0.1/0/0.0]: #588
[#589 additive_expression]: #58
[#589 array_type_specifier]: #95
[#589 binary_and_expression]: #55
[#589 binary_or_expression]: #56
[#589 binary_xor_expression]: #57
[#589 bitwise_expression]: #53
[#589 bool_literal]: #77
[#589 call_expression]: #69
[#589 callable]: #74
[#589 case_selector]: #595
[#589 decimal_float_literal]: #85
[#589 decimal_int_literal]: #83
[#589 depth_texture_type]: #122
[#589 expression]: #567
[#589 float_literal]: #76
[#589 hex_float_literal]: #86
[#589 hex_int_literal]: #84
[#589 ident]: #68
[#589 int_literal]: #75
[#589 literal]: #70
[#589 mat_prefix]: #81
[#589 multiplicative_expression]: #60
[#589 multisampled_texture_type]: #124
[#589 paren_expression]: #71
[#589 primary_expression]: #67
[#589 relational_expression]: #50
[#589 sampled_texture_type]: #123
[#589 sampler_type]: #121
[#589 shift_expression]: #54
[#589 short_circuit_and_expression]: #52
[#589 short_circuit_or_expression]: #51
[#589 singular_expression]: #61
[#589 storage_texture_type]: #125
[#589 texture_and_sampler_types]: #97
[#589 type_specifier_without_ident]: #79
[#589 unary_expression]: #59
[#589 vec_prefix]: #80
[#590 compound_statement]: #594
[#607 additive_expression]: #58
[#607 array_type_specifier]: #95
[#607 binary_and_expression]: #55
[#607 binary_or_expression]: #56
[#607 binary_xor_expression]: #57
[#607 bitwise_expression]: #53
[#607 bool_literal]: #77
[#607 call_expression]: #69
[#607 callable]: #74
[#607 decimal_float_literal]: #85
[#607 decimal_int_literal]: #83
[#607 depth_texture_type]: #122
[#607 expression]: #609
[#607 float_literal]: #76
[#607 hex_float_literal]: #86
[#607 hex_int_literal]: #84
[#607 ident]: #68
[#607 int_literal]: #75
[#607 literal]: #70
[#607 mat_prefix]: #81
[#607 multiplicative_expression]: #60
[#607 multisampled_texture_type]: #124
[#607 paren_expression]: #71
[#607 primary_expression]: #67
[#607 relational_expression]: #50
[#607 sampled_texture_type]: #123
[#607 sampler_type]: #121
[#607 shift_expression]: #54
[#607 short_circuit_and_expression]: #52
[#607 short_circuit_or_expression]: #51
[#607 singular_expression]: #61
[#607 storage_texture_type]: #125
[#607 texture_and_sampler_types]: #97
[#607 type_specifier_without_ident]: #79
[#607 unary_expression]: #59
[#607 vec_prefix]: #80
