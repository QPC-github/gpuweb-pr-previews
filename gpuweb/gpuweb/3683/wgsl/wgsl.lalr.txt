=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'diagnostic' diagnostic_control
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   '{' statement * ? '}'
continue_statement:'continue'
continuing_compound_statement:
   '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
diagnostic_control:
   '(' severity_control_name ',' diagnostic_rule_name attrib_end
diagnostic_directive:
   'diagnostic' diagnostic_control ';'
diagnostic_rule_name:ident_pattern_token
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:
   attribute * ? call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | static_assert_statement ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:
   diagnostic_directive
 | enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   'loop' '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | attribute * ? call_expression
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
severity_control_name:
   'error'
 | 'off'
 | 'warning'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | static_assert_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression '{' ( switch_body * ) '}'
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'type' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {EndOfText}
enable_directive -> · 'enable' extension_name ';' : {EndOfText}
global_directive -> · diagnostic_directive : {EndOfText}
global_directive -> · enable_directive : {EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {EndOfText}
enable_directive -> · 'enable' extension_name ';' : {EndOfText}
global_directive -> · diagnostic_directive : {EndOfText}
global_directive -> · enable_directive : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#5
global_directive -> diagnostic_directive · : {EndOfText}

#6
global_directive -> enable_directive · : {EndOfText}

#7
diagnostic_directive -> 'diagnostic' · diagnostic_control ';' : {EndOfText}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {}

#8
enable_directive -> 'enable' · extension_name ';' : {EndOfText}
extension_name -> · 'f16' : {}

#9
enable_directive -> 'enable' extension_name · ';' : {EndOfText}

#10
extension_name -> 'f16' · : {}

#11
diagnostic_directive -> 'diagnostic' diagnostic_control · ';' : {EndOfText}

#12
diagnostic_control -> '(' · severity_control_name ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}
severity_control_name -> · 'error' : {}
severity_control_name -> · 'off' : {}
severity_control_name -> · 'warning' : {}

#13
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {EndOfText}

#14
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#15
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#16
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#17
global_decl -> ';' · : {EndOfText}

#18
global_decl -> global_variable_decl · ';' : {EndOfText}

#19
global_decl -> global_constant_decl · ';' : {EndOfText}

#20
global_decl -> type_alias_decl · ';' : {EndOfText}

#21
global_decl -> struct_decl · : {EndOfText}

#22
global_decl -> function_decl · : {EndOfText}

#23
global_decl -> static_assert_statement · ';' : {EndOfText}

#24
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}

#25
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#26
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#27
type_alias_decl -> 'type' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#28
struct_decl -> 'struct' · ident struct_body_decl : {EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#29
function_decl -> function_decl/0.0 · function_header compound_statement : {EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {}

#30
static_assert_statement -> 'static_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#31
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {}

#32
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#33
function_decl/0.0 -> function_decl/0.0/0 · : {}

#34
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}

#35
attribute -> '@' · 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#36
attribute -> '@' 'align' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#37
attribute -> '@' 'binding' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#38
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}

#39
attribute -> '@' 'const' · : {'f16' 'texture_multisampled_2d'}

#40
attribute -> '@' 'diagnostic' · diagnostic_control : {'f16' 'texture_multisampled_2d'}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}

#41
attribute -> '@' 'group' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#42
attribute -> '@' 'id' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#43
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}

#44
attribute -> '@' 'invariant' · : {'f16' 'texture_multisampled_2d'}

#45
attribute -> '@' 'location' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#46
attribute -> '@' 'size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#47
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#48
attribute -> '@' 'vertex' · : {'f16' 'texture_multisampled_2d'}

#49
attribute -> '@' 'fragment' · : {'f16' 'texture_multisampled_2d'}

#50
attribute -> '@' 'compute' · : {'f16' 'texture_multisampled_2d'}

#51
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {}

#52
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#53
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {}

#54
static_assert_statement -> 'static_assert' expression · : {}

#55
expression -> relational_expression · : {}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#56
expression -> short_circuit_or_expression · '||' relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#57
expression -> short_circuit_and_expression · '&&' relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#58
expression -> bitwise_expression · : {}

#59
relational_expression -> shift_expression · '!=' shift_expression : {}
relational_expression -> shift_expression · '<' shift_expression : {}
relational_expression -> shift_expression · '<=' shift_expression : {}
relational_expression -> shift_expression · '==' shift_expression : {}
relational_expression -> shift_expression · '>' shift_expression : {}
relational_expression -> shift_expression · '>=' shift_expression : {}
relational_expression -> shift_expression · : {}

#60
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {}

#61
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {}

#62
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {}

#63
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
shift_expression -> additive_expression · : {}
additive_operator -> · '+' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#64
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#65
additive_expression -> multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#66
unary_expression -> singular_expression · : {}

#67
unary_expression -> '-' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#68
unary_expression -> '!' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#69
unary_expression -> '~' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#70
unary_expression -> '*' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#71
unary_expression -> '&' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#72
singular_expression -> primary_expression · singular_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {}

#73
primary_expression -> ident · : {}

#74
primary_expression -> primary_expression/1.0 · call_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#75
primary_expression -> literal · : {}

#76
primary_expression -> paren_expression · : {}

#77
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {}

#78
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#79
primary_expression/1.0 -> primary_expression/1.0/0 · : {}

#80
literal -> int_literal · : {}

#81
literal -> float_literal · : {}

#82
literal -> bool_literal · : {}

#83
paren_expression -> '(' · expression ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#84
primary_expression/1.0/0 -> attribute · primary_expression/1.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}

#85
int_literal -> decimal_int_literal · : {}

#86
int_literal -> hex_int_literal · : {}

#87
float_literal -> decimal_float_literal · : {}

#88
float_literal -> hex_float_literal · : {}

#89
bool_literal -> 'true' · : {}

#90
bool_literal -> 'false' · : {}

#91
decimal_int_literal -> /0[iu]?/ · : {}

#92
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {}

#93
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {}

#94
decimal_float_literal -> /0[fh]/ · : {}

#95
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {}

#96
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {}

#97
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {}

#98
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {}

#99
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {}

#100
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {}

#101
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {}

#102
function_decl -> function_decl/0.0 function_header · compound_statement : {EndOfText}
compound_statement -> · '{' compound_statement/0.1 '}' : {EndOfText}

#103
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#104
struct_decl -> 'struct' ident · struct_body_decl : {EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}

#105
type_alias_decl -> 'type' ident · '=' type_specifier : {}

#106
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#107
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#108
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {}
optionally_typed_ident/0.1 -> · ':' type_specifier : {}

#109
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#110
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#111
global_decl -> static_assert_statement ';' · : {EndOfText}

#112
global_decl -> type_alias_decl ';' · : {EndOfText}

#113
global_decl -> global_constant_decl ';' · : {EndOfText}

#114
global_decl -> global_variable_decl ';' · : {EndOfText}

#115
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#116
diagnostic_control -> '(' severity_control_name · ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}

#117
severity_control_name -> 'error' · : {}

#118
severity_control_name -> 'warning' · : {}

#119
severity_control_name -> 'off' · : {}

#120
diagnostic_directive -> 'diagnostic' diagnostic_control ';' · : {EndOfText}

#121
enable_directive -> 'enable' extension_name ';' · : {EndOfText}

#122
diagnostic_control -> '(' severity_control_name ',' · diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}
diagnostic_rule_name -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#123
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#124
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#125
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#126
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#127
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#128
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {}

#129
optionally_typed_ident/0.1 -> ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#130
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#131
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#132
type_alias_decl -> 'type' ident '=' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#133
struct_decl -> 'struct' ident struct_body_decl · : {EndOfText}

#134
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#135
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {}

#136
function_decl -> function_decl/0.0 function_header compound_statement · : {EndOfText}

#137
compound_statement -> '{' · compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.1 -> · compound_statement/0.1/0 : {}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#138
primary_expression/1.0/0 -> attribute primary_expression/1.0/0 · : {}

#139
paren_expression -> '(' expression · ')' : {}

#140
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#141
primary_expression -> primary_expression/1.0 call_expression · : {}

#142
call_expression -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#143
callable -> ident · : {}

#144
callable -> type_specifier_without_ident · : {}

#145
callable -> vec_prefix · : {}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#146
callable -> mat_prefix · : {}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#147
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}
callable -> 'array' · : {}

#148
type_specifier_without_ident -> 'bool' · : {}

#149
type_specifier_without_ident -> 'f32' · : {}

#150
type_specifier_without_ident -> 'f16' · : {}

#151
type_specifier_without_ident -> 'i32' · : {}

#152
type_specifier_without_ident -> 'u32' · : {}

#153
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#154
type_specifier_without_ident -> array_type_specifier · : {}

#155
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {}

#156
type_specifier_without_ident -> texture_and_sampler_types · : {}

#157
vec_prefix -> 'vec2' · : {}

#158
vec_prefix -> 'vec3' · : {}

#159
vec_prefix -> 'vec4' · : {}

#160
mat_prefix -> 'mat2x2' · : {}

#161
mat_prefix -> 'mat2x3' · : {}

#162
mat_prefix -> 'mat2x4' · : {}

#163
mat_prefix -> 'mat3x2' · : {}

#164
mat_prefix -> 'mat3x3' · : {}

#165
mat_prefix -> 'mat3x4' · : {}

#166
mat_prefix -> 'mat4x2' · : {}

#167
mat_prefix -> 'mat4x3' · : {}

#168
mat_prefix -> 'mat4x4' · : {}

#169
texture_and_sampler_types -> sampler_type · : {}

#170
texture_and_sampler_types -> depth_texture_type · : {}

#171
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {}

#172
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {}

#173
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {}

#174
sampler_type -> 'sampler' · : {}

#175
sampler_type -> 'sampler_comparison' · : {}

#176
depth_texture_type -> 'texture_depth_2d' · : {}

#177
depth_texture_type -> 'texture_depth_2d_array' · : {}

#178
depth_texture_type -> 'texture_depth_cube' · : {}

#179
depth_texture_type -> 'texture_depth_cube_array' · : {}

#180
depth_texture_type -> 'texture_depth_multisampled_2d' · : {}

#181
sampled_texture_type -> 'texture_1d' · : {}

#182
sampled_texture_type -> 'texture_2d' · : {}

#183
sampled_texture_type -> 'texture_2d_array' · : {}

#184
sampled_texture_type -> 'texture_3d' · : {}

#185
sampled_texture_type -> 'texture_cube' · : {}

#186
sampled_texture_type -> 'texture_cube_array' · : {}

#187
multisampled_texture_type -> 'texture_multisampled_2d' · : {}

#188
storage_texture_type -> 'texture_storage_1d' · : {}

#189
storage_texture_type -> 'texture_storage_2d' · : {}

#190
storage_texture_type -> 'texture_storage_2d_array' · : {}

#191
storage_texture_type -> 'texture_storage_3d' · : {}

#192
singular_expression -> primary_expression singular_expression/0.1 · : {}

#193
singular_expression/0.1 -> component_or_swizzle_specifier · : {}

#194
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#195
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
swizzle_name -> · '/[rgba]/' : {}
swizzle_name -> · '/[rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {}

#196
unary_expression -> '&' unary_expression · : {}

#197
unary_expression -> '*' unary_expression · : {}

#198
unary_expression -> '~' unary_expression · : {}

#199
unary_expression -> '!' unary_expression · : {}

#200
unary_expression -> '-' unary_expression · : {}

#201
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#202
multiplicative_operator -> '*' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#203
multiplicative_operator -> '/' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#204
multiplicative_operator -> '%' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#205
shift_expression -> unary_expression '<<' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#206
shift_expression -> unary_expression '>>' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#207
additive_expression -> additive_expression additive_operator · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#208
additive_operator -> '+' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#209
additive_operator -> '-' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#210
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#211
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#212
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#213
relational_expression -> shift_expression '<' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#214
relational_expression -> shift_expression '>' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#215
relational_expression -> shift_expression '<=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#216
relational_expression -> shift_expression '>=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#217
relational_expression -> shift_expression '==' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#218
relational_expression -> shift_expression '!=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#219
expression -> short_circuit_and_expression '&&' · relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#220
expression -> short_circuit_or_expression '||' · relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#221
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#222
attribute -> '@' 'size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#223
attribute -> '@' 'location' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#224
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_type_name -> · 'flat' : {}
interpolation_type_name -> · 'linear' : {}
interpolation_type_name -> · 'perspective' : {}

#225
attribute -> '@' 'id' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#226
attribute -> '@' 'group' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#227
attribute -> '@' 'diagnostic' diagnostic_control · : {'f16' 'texture_multisampled_2d'}

#228
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
builtin_value_name -> · 'frag_depth' : {}
builtin_value_name -> · 'front_facing' : {}
builtin_value_name -> · 'global_invocation_id' : {}
builtin_value_name -> · 'instance_index' : {}
builtin_value_name -> · 'local_invocation_id' : {}
builtin_value_name -> · 'local_invocation_index' : {}
builtin_value_name -> · 'num_workgroups' : {}
builtin_value_name -> · 'position' : {}
builtin_value_name -> · 'sample_index' : {}
builtin_value_name -> · 'sample_mask' : {}
builtin_value_name -> · 'vertex_index' : {}
builtin_value_name -> · 'workgroup_id' : {}

#229
attribute -> '@' 'binding' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#230
attribute -> '@' 'align' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#231
attribute -> '@' 'align' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#232
attribute -> '@' 'binding' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#233
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#234
builtin_value_name -> 'vertex_index' · : {}

#235
builtin_value_name -> 'instance_index' · : {}

#236
builtin_value_name -> 'position' · : {}

#237
builtin_value_name -> 'front_facing' · : {}

#238
builtin_value_name -> 'frag_depth' · : {}

#239
builtin_value_name -> 'local_invocation_id' · : {}

#240
builtin_value_name -> 'local_invocation_index' · : {}

#241
builtin_value_name -> 'global_invocation_id' · : {}

#242
builtin_value_name -> 'workgroup_id' · : {}

#243
builtin_value_name -> 'num_workgroups' · : {}

#244
builtin_value_name -> 'sample_index' · : {}

#245
builtin_value_name -> 'sample_mask' · : {}

#246
attribute -> '@' 'group' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#247
attribute -> '@' 'id' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#248
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#249
interpolation_type_name -> 'perspective' · : {}

#250
interpolation_type_name -> 'linear' · : {}

#251
interpolation_type_name -> 'flat' · : {}

#252
attribute -> '@' 'location' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#253
attribute -> '@' 'size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#254
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#255
expression -> short_circuit_or_expression '||' relational_expression · : {}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#256
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#257
expression -> short_circuit_and_expression '&&' relational_expression · : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#258
relational_expression -> shift_expression '!=' shift_expression · : {}

#259
relational_expression -> shift_expression '==' shift_expression · : {}

#260
relational_expression -> shift_expression '>=' shift_expression · : {}

#261
relational_expression -> shift_expression '<=' shift_expression · : {}

#262
relational_expression -> shift_expression '>' shift_expression · : {}

#263
relational_expression -> shift_expression '<' shift_expression · : {}

#264
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {}

#265
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {}

#266
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {}

#267
additive_expression -> additive_expression additive_operator multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#268
multiplicative_expression -> unary_expression · : {}

#269
shift_expression -> unary_expression '>>' unary_expression · : {}

#270
shift_expression -> unary_expression '<<' unary_expression · : {}

#271
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {}

#272
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {}

#273
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {}

#274
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#275
swizzle_name -> '/[rgba]/' · : {}

#276
swizzle_name -> '/[rgba][rgba]/' · : {}

#277
swizzle_name -> '/[rgba][rgba][rgba]/' · : {}

#278
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {}

#279
swizzle_name -> '/[xyzw]/' · : {}

#280
swizzle_name -> '/[xyzw][xyzw]/' · : {}

#281
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {}

#282
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {}

#283
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {}

#284
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {}
texel_format -> · 'r32float' : {}
texel_format -> · 'r32sint' : {}
texel_format -> · 'r32uint' : {}
texel_format -> · 'rg32float' : {}
texel_format -> · 'rg32sint' : {}
texel_format -> · 'rg32uint' : {}
texel_format -> · 'rgba16float' : {}
texel_format -> · 'rgba16sint' : {}
texel_format -> · 'rgba16uint' : {}
texel_format -> · 'rgba32float' : {}
texel_format -> · 'rgba32sint' : {}
texel_format -> · 'rgba32uint' : {}
texel_format -> · 'rgba8sint' : {}
texel_format -> · 'rgba8snorm' : {}
texel_format -> · 'rgba8uint' : {}
texel_format -> · 'rgba8unorm' : {}

#285
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#286
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#287
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#288
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#289
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#290
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#291
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#292
call_expression -> callable argument_expression_list · : {}

#293
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
argument_expression_list/0.1 -> · expression_comma_list : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#294
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {}

#295
type_specifier -> ident · : {}

#296
type_specifier -> type_specifier_without_ident · : {}

#297
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#298
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#299
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}

#300
paren_expression -> '(' expression ')' · : {}

#301
compound_statement -> '{' compound_statement/0.1 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#302
compound_statement/0.1 -> compound_statement/0.1/0 · : {}

#303
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#304
statement -> ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#305
statement -> return_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#306
statement -> if_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#307
statement -> switch_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#308
statement -> loop_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#309
statement -> for_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#310
statement -> while_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#311
statement -> func_call_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#312
statement -> variable_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#313
statement -> break_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#314
statement -> continue_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#315
statement -> 'discard' · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#316
statement -> variable_updating_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#317
statement -> compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#318
statement -> static_assert_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#319
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#320
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.1 -> · if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#321
switch_statement -> 'switch' · expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#322
loop_statement -> 'loop' · '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#323
for_statement -> 'for' · '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#324
while_statement -> 'while' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#325
func_call_statement -> func_call_statement/0.0 · call_phrase : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
call_phrase -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#326
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#327
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#328
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#329
break_statement -> 'break' · : {}

#330
continue_statement -> 'continue' · : {}

#331
variable_updating_statement -> assignment_statement · : {}

#332
variable_updating_statement -> increment_statement · : {}

#333
variable_updating_statement -> decrement_statement · : {}

#334
if_clause -> 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#335
func_call_statement/0.0 -> func_call_statement/0.0/0 · : {'f16' 'texture_multisampled_2d'}

#336
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '%=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '&=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '*=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '+=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '-=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '/=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '<<=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '>>=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '^=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '|=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#337
assignment_statement -> '_' · '=' expression : {}

#338
func_call_statement/0.0/0 -> attribute · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}

#339
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {}

#340
lhs_expression -> '*' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#341
lhs_expression -> '&' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#342
core_lhs_expression -> ident · : {}

#343
core_lhs_expression -> '(' · lhs_expression ')' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#344
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#345
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#346
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#347
struct_member/0.0 -> struct_member/0.0/0 · : {}

#348
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#349
type_alias_decl -> 'type' ident '=' type_specifier · : {}

#350
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#351
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#352
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#353
optionally_typed_ident/0.1 -> ':' type_specifier · : {}

#354
global_variable_decl/0.2 -> '=' expression · : {}

#355
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#356
address_space -> 'function' · : {}

#357
address_space -> 'private' · : {}

#358
address_space -> 'workgroup' · : {}

#359
address_space -> 'uniform' · : {}

#360
address_space -> 'storage' · : {}

#361
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {}

#362
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#363
diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#364
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#365
attrib_end -> attrib_end/0.0 · ')' : {'f16' 'texture_multisampled_2d'}

#366
attrib_end/0.0 -> ',' · : {}

#367
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#368
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#369
global_constant_decl/1.3 -> '=' expression · : {}

#370
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#371
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {}

#372
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#373
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {}

#374
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#375
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#376
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {}

#377
function_header/0.3 -> param_list · : {}

#378
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#379
param -> param/0.0 · ident ':' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#380
param/0.0 -> param/0.0/0 · : {}

#381
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#382
core_lhs_expression -> '(' lhs_expression · ')' : {}

#383
lhs_expression -> '&' lhs_expression · : {}

#384
lhs_expression -> '*' lhs_expression · : {}

#385
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {}

#386
lhs_expression/0.1 -> component_or_swizzle_specifier · : {}

#387
func_call_statement/0.0/0 -> attribute func_call_statement/0.0/0 · : {'f16' 'texture_multisampled_2d'}

#388
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#389
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#390
increment_statement -> lhs_expression '++' · : {}

#391
decrement_statement -> lhs_expression '--' · : {}

#392
assignment_statement/0.1 -> '=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#393
assignment_statement/0.1 -> compound_assignment_operator · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#394
compound_assignment_operator -> '+=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#395
compound_assignment_operator -> '-=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#396
compound_assignment_operator -> '*=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#397
compound_assignment_operator -> '/=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#398
compound_assignment_operator -> '%=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#399
compound_assignment_operator -> '&=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#400
compound_assignment_operator -> '|=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#401
compound_assignment_operator -> '^=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#402
compound_assignment_operator -> '>>=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#403
compound_assignment_operator -> '<<=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#404
if_clause -> 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#405
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#406
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#407
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#408
func_call_statement -> func_call_statement/0.0 call_phrase · : {}

#409
call_phrase -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#410
while_statement -> 'while' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#411
for_statement -> 'for' '(' · for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#412
loop_statement -> 'loop' '{' · loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.2 -> · loop_statement/0.2/0 : {}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#413
switch_statement -> 'switch' expression · '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#414
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_clause -> · 'else' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2 -> · else_clause : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#415
if_statement/0.1 -> if_statement/0.1/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#416
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#417
else_if_clause -> 'else' · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#418
return_statement -> 'return' return_statement/0.1 · : {}

#419
return_statement/0.1 -> expression · : {}

#420
statement -> static_assert_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#421
statement -> variable_updating_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#422
statement -> 'discard' ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#423
statement -> continue_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#424
statement -> break_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#425
statement -> variable_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#426
statement -> func_call_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#427
statement -> return_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#428
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {}

#429
compound_statement -> '{' compound_statement/0.1 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#430
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {}
paren_expression -> · '(' expression ')' : {}

#431
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {}

#432
argument_expression_list/0.1 -> expression_comma_list · : {}

#433
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#434
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {}

#435
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {}

#436
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {}
array_type_specifier/0.3 -> · ',' element_count_expression : {}

#437
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#438
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {}

#439
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {}

#440
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {}

#441
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {}

#442
texel_format -> 'rgba8unorm' · : {}

#443
texel_format -> 'rgba8snorm' · : {}

#444
texel_format -> 'rgba8uint' · : {}

#445
texel_format -> 'rgba8sint' · : {}

#446
texel_format -> 'rgba16uint' · : {}

#447
texel_format -> 'rgba16sint' · : {}

#448
texel_format -> 'rgba16float' · : {}

#449
texel_format -> 'r32uint' · : {}

#450
texel_format -> 'r32sint' · : {}

#451
texel_format -> 'r32float' · : {}

#452
texel_format -> 'rg32uint' · : {}

#453
texel_format -> 'rg32sint' · : {}

#454
texel_format -> 'rg32float' · : {}

#455
texel_format -> 'rgba32uint' · : {}

#456
texel_format -> 'rgba32sint' · : {}

#457
texel_format -> 'rgba32float' · : {}

#458
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {}

#459
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {}

#460
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {}

#461
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {}

#462
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {}

#463
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#464
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#465
attribute -> '@' 'size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#466
attribute -> '@' 'location' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#467
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#468
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_sample_name -> · 'center' : {}
interpolation_sample_name -> · 'centroid' : {}
interpolation_sample_name -> · 'sample' : {}

#469
attribute -> '@' 'id' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#470
attribute -> '@' 'group' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#471
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#472
attribute -> '@' 'binding' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#473
attribute -> '@' 'align' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#474
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#475
interpolation_sample_name -> 'center' · : {}

#476
interpolation_sample_name -> 'centroid' · : {}

#477
interpolation_sample_name -> 'sample' · : {}

#478
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#479
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {}

#480
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {}

#481
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#482
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {}

#483
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {}

#484
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {}

#485
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#486
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {}

#487
array_type_specifier/0.3 -> ',' · element_count_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
element_count_expression -> · additive_expression : {}
element_count_expression -> · bitwise_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#488
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {}

#489
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {}

#490
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#491
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {}

#492
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#493
expression_comma_list/0.1/0/0.0 -> ',' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#494
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {}

#495
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {}

#496
else_if_clause -> 'else' 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#497
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#498
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#499
if_statement/0.2 -> else_clause · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#500
else_clause -> 'else' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#501
switch_statement -> 'switch' expression '{' · switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body -> · case_clause : {}
switch_body -> · default_alone_clause : {}
switch_statement/0.3 -> · switch_statement/0.3/0 : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#502
loop_statement -> 'loop' '{' loop_statement/0.2 · loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.3 -> · continuing_statement : {}

#503
loop_statement/0.2 -> loop_statement/0.2/0 · : {}

#504
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#505
for_statement -> 'for' '(' for_header · ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#506
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#507
for_header/0.0 -> for_init · : {}

#508
for_init -> variable_statement · : {}

#509
for_init -> variable_updating_statement · : {}

#510
for_init -> func_call_statement · : {}

#511
while_statement -> 'while' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#512
call_phrase -> callable argument_expression_list · : {}

#513
variable_statement -> variable_decl '=' expression · : {}

#514
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#515
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#516
if_clause -> 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#517
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#518
assignment_statement -> '_' '=' expression · : {}

#519
core_lhs_expression -> '(' lhs_expression ')' · : {}

#520
param/0.0/0 -> attribute param/0.0/0 · : {}

#521
param -> param/0.0 ident · ':' type_specifier : {}

#522
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#523
param_list/0.1 -> param_list/0.1/0 · : {}

#524
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#525
param_list/0.1/0/0.0 -> ',' · param : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#526
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {}

#527
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {}

#528
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {}

#529
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {EndOfText}

#530
struct_body_decl/0.3 -> ',' · : {}

#531
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#532
variable_qualifier/0.2 -> ',' access_mode · : {}

#533
access_mode -> 'read' · : {}

#534
access_mode -> 'write' · : {}

#535
access_mode -> 'read_write' · : {}

#536
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#537
attrib_end -> attrib_end/0.0 ')' · : {'f16' 'texture_multisampled_2d'}

#538
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {}

#539
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {EndOfText}

#540
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {}

#541
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#542
param_list/0.1/0/0.0 -> ',' param · : {}

#543
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {}

#544
param_list -> param param_list/0.1 param_list/0.2 · : {}

#545
param_list/0.2 -> ',' · : {}

#546
param -> param/0.0 ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#547
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#548
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#549
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#550
for_statement -> 'for' '(' for_header ')' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#551
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {}

#552
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#553
loop_statement/0.3 -> continuing_statement · : {}

#554
continuing_statement -> 'continuing' · continuing_compound_statement : {}
continuing_compound_statement -> · '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}

#555
switch_statement -> 'switch' expression '{' switch_statement/0.3 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#556
switch_statement/0.3 -> switch_statement/0.3/0 · : {}

#557
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body -> · case_clause : {}
switch_body -> · default_alone_clause : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#558
switch_body -> case_clause · : {}

#559
switch_body -> default_alone_clause · : {}

#560
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#561
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {}
default_alone_clause/0.1 -> · ':' : {}

#562
else_clause -> 'else' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#563
else_if_clause -> 'else' 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#564
expression_comma_list/0.1/0/0.0 -> ',' expression · : {}

#565
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {}

#566
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#567
expression_comma_list/0.2 -> ',' · : {}

#568
array_type_specifier/0.3 -> ',' element_count_expression · : {}

#569
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
element_count_expression -> additive_expression · : {}
additive_operator -> · '+' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#570
element_count_expression -> bitwise_expression · : {}

#571
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}

#572
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {}

#573
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident/7.5 -> · ',' access_mode : {}

#574
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {}

#575
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#576
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#577
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#578
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#579
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {}

#580
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {}

#581
type_specifier_without_ident/7.5 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#582
else_if_clause -> 'else' 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#583
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {}

#584
default_alone_clause/0.1 -> ':' · : {}

#585
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {}
case_clause/0.2 -> · ':' : {}

#586
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {}
case_selectors/0.1 -> · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#587
case_selector -> 'default' · : {}

#588
case_selector -> expression · : {}

#589
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {}

#590
switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#591
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#592
continuing_compound_statement -> '{' · continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#593
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#594
for_statement -> 'for' '(' for_header ')' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#595
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#596
for_header/0.2 -> expression · : {}

#597
param -> param/0.0 ident ':' type_specifier · : {}

#598
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#599
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#600
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#601
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#602
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {}

#603
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#604
continuing_compound_statement -> '{' continuing_compound_statement/0.1 · continuing_compound_statement/0.2 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.2 -> · break_if_statement : {}

#605
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break'}

#606
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
break_statement -> · 'break' : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · func_call_statement/0.0 call_phrase : {}
func_call_statement/0.0 -> · func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
func_call_statement/0.0/0 -> · attribute func_call_statement/0.0/0 : {'f16' 'texture_multisampled_2d'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#607
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {}
case_selectors/0.2 -> · ',' : {}

#608
case_selectors/0.1 -> case_selectors/0.1/0 · : {}

#609
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#610
case_selectors/0.1/0/0.0 -> ',' · case_selector : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#611
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {}

#612
case_clause/0.2 -> ':' · : {}

#613
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {}

#614
type_specifier_without_ident/7.5 -> ',' access_mode · : {}

#615
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {}

#616
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#617
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {}

#618
case_selectors/0.1/0/0.0 -> ',' case_selector · : {}

#619
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {}

#620
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {}

#621
case_selectors/0.2 -> ',' · : {}

#622
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break'}

#623
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 · '}' : {}

#624
continuing_compound_statement/0.2 -> break_if_statement · : {}

#625
break_if_statement -> 'break' · 'if' expression ';' : {}

#626
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#627
for_header/0.4 -> for_update · : {}

#628
for_update -> variable_updating_statement · : {}

#629
for_update -> func_call_statement · : {}

#630
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
primary_expression -> · primary_expression/1.0 call_expression : {}
primary_expression/1.0 -> · primary_expression/1.0/0 : {}
primary_expression/1.0/0 -> · attribute primary_expression/1.0/0 : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}

#631
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' · : {}

#632
break_if_statement -> 'break' 'if' expression · ';' : {}

#633
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 global_directive -> diagnostic_directive ·
r#2 global_directive -> enable_directive ·
r#3 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#4 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#5 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#6 global_decl -> ';' ·
r#7 global_decl -> struct_decl ·
r#8 global_decl -> function_decl ·
r#9 attribute -> '@' 'const' ·
r#10 attribute -> '@' 'invariant' ·
r#11 attribute -> '@' 'vertex' ·
r#12 attribute -> '@' 'fragment' ·
r#13 attribute -> '@' 'compute' ·
r#14 global_decl -> static_assert_statement ';' ·
r#15 global_decl -> type_alias_decl ';' ·
r#16 global_decl -> global_constant_decl ';' ·
r#17 global_decl -> global_variable_decl ';' ·
r#18 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#19 diagnostic_directive -> 'diagnostic' diagnostic_control ';' ·
r#20 enable_directive -> 'enable' extension_name ';' ·
r#21 variable_decl/0.1 -> variable_qualifier ·
r#22 struct_decl -> 'struct' ident struct_body_decl ·
r#23 function_decl -> function_decl/0.0 function_header compound_statement ·
r#24 multiplicative_operator -> '*' ·
r#25 multiplicative_operator -> '/' ·
r#26 multiplicative_operator -> '%' ·
r#27 additive_operator -> '+' ·
r#28 additive_operator -> '-' ·
r#29 attribute -> '@' 'diagnostic' diagnostic_control ·
r#30 statement -> ';' ·
r#31 statement -> if_statement ·
r#32 statement -> switch_statement ·
r#33 statement -> loop_statement ·
r#34 statement -> for_statement ·
r#35 statement -> while_statement ·
r#36 statement -> compound_statement ·
r#37 func_call_statement/0.0 -> func_call_statement/0.0/0 ·
r#38 diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end ·
r#39 func_call_statement/0.0/0 -> attribute func_call_statement/0.0/0 ·
r#40 assignment_statement/0.1 -> '=' ·
r#41 assignment_statement/0.1 -> compound_assignment_operator ·
r#42 compound_assignment_operator -> '+=' ·
r#43 compound_assignment_operator -> '-=' ·
r#44 compound_assignment_operator -> '*=' ·
r#45 compound_assignment_operator -> '/=' ·
r#46 compound_assignment_operator -> '%=' ·
r#47 compound_assignment_operator -> '&=' ·
r#48 compound_assignment_operator -> '|=' ·
r#49 compound_assignment_operator -> '^=' ·
r#50 compound_assignment_operator -> '>>=' ·
r#51 compound_assignment_operator -> '<<=' ·
r#52 if_statement/0.1 -> if_statement/0.1/0 ·
r#53 statement -> static_assert_statement ';' ·
r#54 statement -> variable_updating_statement ';' ·
r#55 statement -> 'discard' ';' ·
r#56 statement -> continue_statement ';' ·
r#57 statement -> break_statement ';' ·
r#58 statement -> variable_statement ';' ·
r#59 statement -> func_call_statement ';' ·
r#60 statement -> return_statement ';' ·
r#61 compound_statement -> '{' compound_statement/0.1 '}' ·
r#62 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#63 attribute -> '@' 'size' '(' expression attrib_end ·
r#64 attribute -> '@' 'location' '(' expression attrib_end ·
r#65 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#66 attribute -> '@' 'id' '(' expression attrib_end ·
r#67 attribute -> '@' 'group' '(' expression attrib_end ·
r#68 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#69 attribute -> '@' 'binding' '(' expression attrib_end ·
r#70 attribute -> '@' 'align' '(' expression attrib_end ·
r#71 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#72 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#73 if_statement/0.2 -> else_clause ·
r#74 while_statement -> 'while' expression compound_statement ·
r#75 if_clause -> 'if' expression compound_statement ·
r#76 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#77 attrib_end -> attrib_end/0.0 ')' ·
r#78 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#79 else_clause -> 'else' compound_statement ·
r#80 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#81 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#82 else_if_clause -> 'else' 'if' expression compound_statement ·
r#83 switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' ·
r#84 loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ·
r#85 for_statement -> 'for' '(' for_header ')' compound_statement ·
r#86 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#87 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#88 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#89 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#90 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·

=Action:
[#0 'diagnostic']: s#7
[#0 'enable']: s#8
[#1 EndOfText]: acc
[#2 ';']: s#17
[#2 '@']: s#35
[#2 'const']: s#25
[#2 'static_assert']: s#30
[#2 'struct']: s#28
[#2 'type']: s#27
[#3 EndOfText]: r#0
[#4 'diagnostic']: s#7
[#4 'enable']: s#8
[#5 EndOfText]: r#1
[#6 EndOfText]: r#2
[#7 '(']: s#12
[#8 'f16']: s#10
[#9 ';']: s#121
[#11 ';']: s#120
[#12 'error']: s#117
[#12 'off']: s#119
[#12 'warning']: s#118
[#13 EndOfText]: r#3
[#14 EndOfText]: r#4
[#15 EndOfText]: r#5
[#16 ';']: s#17
[#16 '@']: s#35
[#16 'const']: s#25
[#16 'static_assert']: s#30
[#16 'struct']: s#28
[#16 'type']: s#27
[#17 EndOfText]: r#6
[#18 ';']: s#114
[#19 ';']: s#113
[#20 ';']: s#112
[#21 EndOfText]: r#7
[#22 EndOfText]: r#8
[#23 ';']: s#111
[#24 'var']: s#110
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#26 'override']: s#106
[#27 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#28 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#29 'fn']: s#103
[#30 '!']: s#68
[#30 '&']: s#71
[#30 '(']: s#83
[#30 '*']: s#70
[#30 '-']: s#67
[#30 '@']: s#35
[#30 'bitcast']: s#77
[#30 'false']: s#90
[#30 'true']: s#89
[#30 '~']: s#69
[#30 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#30 /0[fh]/]: s#94
[#30 /0[iu]?/]: s#91
[#30 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#30 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#30 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#30 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#30 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#30 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#30 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#30 /[1-9][0-9]*[fh]/]: s#95
[#30 /[1-9][0-9]*[iu]?/]: s#92
[#34 '@']: s#35
[#35 'align']: s#36
[#35 'binding']: s#37
[#35 'builtin']: s#38
[#35 'compute']: s#50
[#35 'const']: s#39
[#35 'diagnostic']: s#40
[#35 'fragment']: s#49
[#35 'group']: s#41
[#35 'id']: s#42
[#35 'interpolate']: s#43
[#35 'invariant']: s#44
[#35 'location']: s#45
[#35 'size']: s#46
[#35 'vertex']: s#48
[#35 'workgroup_size']: s#47
[#36 '(']: s#230
[#37 '(']: s#229
[#38 '(']: s#228
[#39 'f16']: r#9
[#39 'texture_multisampled_2d']: r#9
[#40 '(']: s#12
[#41 '(']: s#226
[#42 '(']: s#225
[#43 '(']: s#224
[#44 'f16']: r#10
[#44 'texture_multisampled_2d']: r#10
[#45 '(']: s#223
[#46 '(']: s#222
[#47 '(']: s#221
[#48 'f16']: r#11
[#48 'texture_multisampled_2d']: r#11
[#49 'f16']: r#12
[#49 'texture_multisampled_2d']: r#12
[#50 'f16']: r#13
[#50 'texture_multisampled_2d']: r#13
[#56 '||']: s#220
[#57 '&&']: s#219
[#59 '!=']: s#218
[#59 '<']: s#213
[#59 '<=']: s#215
[#59 '==']: s#217
[#59 '>']: s#214
[#59 '>=']: s#216
[#60 '&']: s#212
[#61 '|']: s#211
[#62 '^']: s#210
[#63 '+']: s#208
[#63 '-']: s#209
[#64 '<<']: s#205
[#64 '>>']: s#206
[#65 '%']: s#204
[#65 '*']: s#202
[#65 '/']: s#203
[#67 '!']: s#68
[#67 '&']: s#71
[#67 '(']: s#83
[#67 '*']: s#70
[#67 '-']: s#67
[#67 '@']: s#35
[#67 'bitcast']: s#77
[#67 'false']: s#90
[#67 'true']: s#89
[#67 '~']: s#69
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#67 /0[fh]/]: s#94
[#67 /0[iu]?/]: s#91
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#67 /[1-9][0-9]*[fh]/]: s#95
[#67 /[1-9][0-9]*[iu]?/]: s#92
[#68 '!']: s#68
[#68 '&']: s#71
[#68 '(']: s#83
[#68 '*']: s#70
[#68 '-']: s#67
[#68 '@']: s#35
[#68 'bitcast']: s#77
[#68 'false']: s#90
[#68 'true']: s#89
[#68 '~']: s#69
[#68 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#68 /0[fh]/]: s#94
[#68 /0[iu]?/]: s#91
[#68 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#68 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#68 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#68 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#68 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#68 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#68 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#68 /[1-9][0-9]*[fh]/]: s#95
[#68 /[1-9][0-9]*[iu]?/]: s#92
[#69 '!']: s#68
[#69 '&']: s#71
[#69 '(']: s#83
[#69 '*']: s#70
[#69 '-']: s#67
[#69 '@']: s#35
[#69 'bitcast']: s#77
[#69 'false']: s#90
[#69 'true']: s#89
[#69 '~']: s#69
[#69 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#69 /0[fh]/]: s#94
[#69 /0[iu]?/]: s#91
[#69 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#69 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#69 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#69 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#69 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#69 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#69 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#69 /[1-9][0-9]*[fh]/]: s#95
[#69 /[1-9][0-9]*[iu]?/]: s#92
[#70 '!']: s#68
[#70 '&']: s#71
[#70 '(']: s#83
[#70 '*']: s#70
[#70 '-']: s#67
[#70 '@']: s#35
[#70 'bitcast']: s#77
[#70 'false']: s#90
[#70 'true']: s#89
[#70 '~']: s#69
[#70 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#70 /0[fh]/]: s#94
[#70 /0[iu]?/]: s#91
[#70 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#70 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#70 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#70 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#70 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#70 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#70 /[1-9][0-9]*[fh]/]: s#95
[#70 /[1-9][0-9]*[iu]?/]: s#92
[#71 '!']: s#68
[#71 '&']: s#71
[#71 '(']: s#83
[#71 '*']: s#70
[#71 '-']: s#67
[#71 '@']: s#35
[#71 'bitcast']: s#77
[#71 'false']: s#90
[#71 'true']: s#89
[#71 '~']: s#69
[#71 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#71 /0[fh]/]: s#94
[#71 /0[iu]?/]: s#91
[#71 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#71 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#71 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#71 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#71 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#71 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#71 /[1-9][0-9]*[fh]/]: s#95
[#71 /[1-9][0-9]*[iu]?/]: s#92
[#72 '.']: s#195
[#72 '[']: s#194
[#74 'array']: s#147
[#74 'atomic']: s#155
[#74 'bool']: s#148
[#74 'f16']: s#150
[#74 'f32']: s#149
[#74 'i32']: s#151
[#74 'mat2x2']: s#160
[#74 'mat2x3']: s#161
[#74 'mat2x4']: s#162
[#74 'mat3x2']: s#163
[#74 'mat3x3']: s#164
[#74 'mat3x4']: s#165
[#74 'mat4x2']: s#166
[#74 'mat4x3']: s#167
[#74 'mat4x4']: s#168
[#74 'ptr']: s#153
[#74 'sampler']: s#174
[#74 'sampler_comparison']: s#175
[#74 'texture_1d']: s#181
[#74 'texture_2d']: s#182
[#74 'texture_2d_array']: s#183
[#74 'texture_3d']: s#184
[#74 'texture_cube']: s#185
[#74 'texture_cube_array']: s#186
[#74 'texture_depth_2d']: s#176
[#74 'texture_depth_2d_array']: s#177
[#74 'texture_depth_cube']: s#178
[#74 'texture_depth_cube_array']: s#179
[#74 'texture_depth_multisampled_2d']: s#180
[#74 'texture_multisampled_2d']: s#187
[#74 'texture_storage_1d']: s#188
[#74 'texture_storage_2d']: s#189
[#74 'texture_storage_2d_array']: s#190
[#74 'texture_storage_3d']: s#191
[#74 'u32']: s#152
[#74 'vec2']: s#157
[#74 'vec3']: s#158
[#74 'vec4']: s#159
[#74 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#77 '<']: s#140
[#83 '!']: s#68
[#83 '&']: s#71
[#83 '(']: s#83
[#83 '*']: s#70
[#83 '-']: s#67
[#83 '@']: s#35
[#83 'bitcast']: s#77
[#83 'false']: s#90
[#83 'true']: s#89
[#83 '~']: s#69
[#83 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#83 /0[fh]/]: s#94
[#83 /0[iu]?/]: s#91
[#83 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#83 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#83 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#83 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#83 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#83 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#83 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#83 /[1-9][0-9]*[fh]/]: s#95
[#83 /[1-9][0-9]*[iu]?/]: s#92
[#84 '@']: s#35
[#102 '{']: s#137
[#103 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#104 '{']: s#134
[#105 '=']: s#132
[#106 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#107 '=']: s#130
[#108 ':']: s#129
[#109 '=']: s#127
[#110 '<']: s#125
[#111 EndOfText]: r#14
[#112 EndOfText]: r#15
[#113 EndOfText]: r#16
[#114 EndOfText]: r#17
[#115 EndOfText]: r#18
[#116 ',']: s#122
[#120 EndOfText]: r#19
[#121 EndOfText]: r#20
[#122 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#363
[#123 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#124 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#21
[#125 'function']: s#356
[#125 'private']: s#357
[#125 'storage']: s#360
[#125 'uniform']: s#359
[#125 'workgroup']: s#358
[#127 '!']: s#68
[#127 '&']: s#71
[#127 '(']: s#83
[#127 '*']: s#70
[#127 '-']: s#67
[#127 '@']: s#35
[#127 'bitcast']: s#77
[#127 'false']: s#90
[#127 'true']: s#89
[#127 '~']: s#69
[#127 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#127 /0[fh]/]: s#94
[#127 /0[iu]?/]: s#91
[#127 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#127 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#127 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#127 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#127 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#127 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#127 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#127 /[1-9][0-9]*[fh]/]: s#95
[#127 /[1-9][0-9]*[iu]?/]: s#92
[#129 'array']: s#299
[#129 'atomic']: s#155
[#129 'bool']: s#148
[#129 'f16']: s#150
[#129 'f32']: s#149
[#129 'i32']: s#151
[#129 'mat2x2']: s#160
[#129 'mat2x3']: s#161
[#129 'mat2x4']: s#162
[#129 'mat3x2']: s#163
[#129 'mat3x3']: s#164
[#129 'mat3x4']: s#165
[#129 'mat4x2']: s#166
[#129 'mat4x3']: s#167
[#129 'mat4x4']: s#168
[#129 'ptr']: s#153
[#129 'sampler']: s#174
[#129 'sampler_comparison']: s#175
[#129 'texture_1d']: s#181
[#129 'texture_2d']: s#182
[#129 'texture_2d_array']: s#183
[#129 'texture_3d']: s#184
[#129 'texture_cube']: s#185
[#129 'texture_cube_array']: s#186
[#129 'texture_depth_2d']: s#176
[#129 'texture_depth_2d_array']: s#177
[#129 'texture_depth_cube']: s#178
[#129 'texture_depth_cube_array']: s#179
[#129 'texture_depth_multisampled_2d']: s#180
[#129 'texture_multisampled_2d']: s#187
[#129 'texture_storage_1d']: s#188
[#129 'texture_storage_2d']: s#189
[#129 'texture_storage_2d_array']: s#190
[#129 'texture_storage_3d']: s#191
[#129 'u32']: s#152
[#129 'vec2']: s#157
[#129 'vec3']: s#158
[#129 'vec4']: s#159
[#129 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#130 '!']: s#68
[#130 '&']: s#71
[#130 '(']: s#83
[#130 '*']: s#70
[#130 '-']: s#67
[#130 '@']: s#35
[#130 'bitcast']: s#77
[#130 'false']: s#90
[#130 'true']: s#89
[#130 '~']: s#69
[#130 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#130 /0[fh]/]: s#94
[#130 /0[iu]?/]: s#91
[#130 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#130 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#130 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#130 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#130 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#130 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#130 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#130 /[1-9][0-9]*[fh]/]: s#95
[#130 /[1-9][0-9]*[iu]?/]: s#92
[#131 '=']: s#351
[#132 'array']: s#299
[#132 'atomic']: s#155
[#132 'bool']: s#148
[#132 'f16']: s#150
[#132 'f32']: s#149
[#132 'i32']: s#151
[#132 'mat2x2']: s#160
[#132 'mat2x3']: s#161
[#132 'mat2x4']: s#162
[#132 'mat3x2']: s#163
[#132 'mat3x3']: s#164
[#132 'mat3x4']: s#165
[#132 'mat4x2']: s#166
[#132 'mat4x3']: s#167
[#132 'mat4x4']: s#168
[#132 'ptr']: s#153
[#132 'sampler']: s#174
[#132 'sampler_comparison']: s#175
[#132 'texture_1d']: s#181
[#132 'texture_2d']: s#182
[#132 'texture_2d_array']: s#183
[#132 'texture_3d']: s#184
[#132 'texture_cube']: s#185
[#132 'texture_cube_array']: s#186
[#132 'texture_depth_2d']: s#176
[#132 'texture_depth_2d_array']: s#177
[#132 'texture_depth_cube']: s#178
[#132 'texture_depth_cube_array']: s#179
[#132 'texture_depth_multisampled_2d']: s#180
[#132 'texture_multisampled_2d']: s#187
[#132 'texture_storage_1d']: s#188
[#132 'texture_storage_2d']: s#189
[#132 'texture_storage_2d_array']: s#190
[#132 'texture_storage_3d']: s#191
[#132 'u32']: s#152
[#132 'vec2']: s#157
[#132 'vec3']: s#158
[#132 'vec4']: s#159
[#132 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#133 EndOfText]: r#22
[#134 '@']: s#35
[#135 '(']: s#344
[#136 EndOfText]: r#23
[#137 '&']: s#341
[#137 '(']: s#343
[#137 '*']: s#340
[#137 ';']: s#304
[#137 '@']: s#35
[#137 '_']: s#337
[#137 'break']: s#329
[#137 'const']: s#328
[#137 'continue']: s#330
[#137 'discard']: s#315
[#137 'for']: s#323
[#137 'if']: s#334
[#137 'let']: s#327
[#137 'loop']: s#322
[#137 'return']: s#319
[#137 'static_assert']: s#30
[#137 'switch']: s#321
[#137 'var']: s#110
[#137 'while']: s#324
[#137 '{']: s#137
[#137 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#139 ')']: s#300
[#140 'array']: s#299
[#140 'atomic']: s#155
[#140 'bool']: s#148
[#140 'f16']: s#150
[#140 'f32']: s#149
[#140 'i32']: s#151
[#140 'mat2x2']: s#160
[#140 'mat2x3']: s#161
[#140 'mat2x4']: s#162
[#140 'mat3x2']: s#163
[#140 'mat3x3']: s#164
[#140 'mat3x4']: s#165
[#140 'mat4x2']: s#166
[#140 'mat4x3']: s#167
[#140 'mat4x4']: s#168
[#140 'ptr']: s#153
[#140 'sampler']: s#174
[#140 'sampler_comparison']: s#175
[#140 'texture_1d']: s#181
[#140 'texture_2d']: s#182
[#140 'texture_2d_array']: s#183
[#140 'texture_3d']: s#184
[#140 'texture_cube']: s#185
[#140 'texture_cube_array']: s#186
[#140 'texture_depth_2d']: s#176
[#140 'texture_depth_2d_array']: s#177
[#140 'texture_depth_cube']: s#178
[#140 'texture_depth_cube_array']: s#179
[#140 'texture_depth_multisampled_2d']: s#180
[#140 'texture_multisampled_2d']: s#187
[#140 'texture_storage_1d']: s#188
[#140 'texture_storage_2d']: s#189
[#140 'texture_storage_2d_array']: s#190
[#140 'texture_storage_3d']: s#191
[#140 'u32']: s#152
[#140 'vec2']: s#157
[#140 'vec3']: s#158
[#140 'vec4']: s#159
[#140 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#142 '(']: s#293
[#145 '<']: s#291
[#146 '<']: s#290
[#147 '<']: s#289
[#153 '<']: s#288
[#155 '<']: s#287
[#171 '<']: s#286
[#172 '<']: s#285
[#173 '<']: s#284
[#194 '!']: s#68
[#194 '&']: s#71
[#194 '(']: s#83
[#194 '*']: s#70
[#194 '-']: s#67
[#194 '@']: s#35
[#194 'bitcast']: s#77
[#194 'false']: s#90
[#194 'true']: s#89
[#194 '~']: s#69
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#194 /0[fh]/]: s#94
[#194 /0[iu]?/]: s#91
[#194 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#194 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#194 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#194 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#194 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#194 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#194 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#194 /[1-9][0-9]*[fh]/]: s#95
[#194 /[1-9][0-9]*[iu]?/]: s#92
[#195 '/[rgba]/']: s#275
[#195 '/[rgba][rgba]/']: s#276
[#195 '/[rgba][rgba][rgba]/']: s#277
[#195 '/[rgba][rgba][rgba][rgba]/']: s#278
[#195 '/[xyzw]/']: s#279
[#195 '/[xyzw][xyzw]/']: s#280
[#195 '/[xyzw][xyzw][xyzw]/']: s#281
[#195 '/[xyzw][xyzw][xyzw][xyzw]/']: s#282
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#274
[#201 '!']: s#68
[#201 '&']: s#71
[#201 '(']: s#83
[#201 '*']: s#70
[#201 '-']: s#67
[#201 '@']: s#35
[#201 'bitcast']: s#77
[#201 'false']: s#90
[#201 'true']: s#89
[#201 '~']: s#69
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#201 /0[fh]/]: s#94
[#201 /0[iu]?/]: s#91
[#201 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#201 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#201 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#201 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#201 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#201 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#201 /[1-9][0-9]*[fh]/]: s#95
[#201 /[1-9][0-9]*[iu]?/]: s#92
[#202 'f16']: r#24
[#202 'texture_multisampled_2d']: r#24
[#202 /0[xX][0-9a-fA-F]+[iu]?/]: r#24
[#203 'f16']: r#25
[#203 'texture_multisampled_2d']: r#25
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: r#25
[#204 'f16']: r#26
[#204 'texture_multisampled_2d']: r#26
[#204 /0[xX][0-9a-fA-F]+[iu]?/]: r#26
[#205 '!']: s#68
[#205 '&']: s#71
[#205 '(']: s#83
[#205 '*']: s#70
[#205 '-']: s#67
[#205 '@']: s#35
[#205 'bitcast']: s#77
[#205 'false']: s#90
[#205 'true']: s#89
[#205 '~']: s#69
[#205 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#205 /0[fh]/]: s#94
[#205 /0[iu]?/]: s#91
[#205 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#205 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#205 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#205 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#205 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#205 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#205 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#205 /[1-9][0-9]*[fh]/]: s#95
[#205 /[1-9][0-9]*[iu]?/]: s#92
[#206 '!']: s#68
[#206 '&']: s#71
[#206 '(']: s#83
[#206 '*']: s#70
[#206 '-']: s#67
[#206 '@']: s#35
[#206 'bitcast']: s#77
[#206 'false']: s#90
[#206 'true']: s#89
[#206 '~']: s#69
[#206 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#206 /0[fh]/]: s#94
[#206 /0[iu]?/]: s#91
[#206 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#206 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#206 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#206 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#206 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#206 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#206 /[1-9][0-9]*[fh]/]: s#95
[#206 /[1-9][0-9]*[iu]?/]: s#92
[#207 '!']: s#68
[#207 '&']: s#71
[#207 '(']: s#83
[#207 '*']: s#70
[#207 '-']: s#67
[#207 '@']: s#35
[#207 'bitcast']: s#77
[#207 'false']: s#90
[#207 'true']: s#89
[#207 '~']: s#69
[#207 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#207 /0[fh]/]: s#94
[#207 /0[iu]?/]: s#91
[#207 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#207 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#207 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#207 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#207 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#207 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#207 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#207 /[1-9][0-9]*[fh]/]: s#95
[#207 /[1-9][0-9]*[iu]?/]: s#92
[#208 'f16']: r#27
[#208 'texture_multisampled_2d']: r#27
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: r#27
[#209 'f16']: r#28
[#209 'texture_multisampled_2d']: r#28
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: r#28
[#210 '!']: s#68
[#210 '&']: s#71
[#210 '(']: s#83
[#210 '*']: s#70
[#210 '-']: s#67
[#210 '@']: s#35
[#210 'bitcast']: s#77
[#210 'false']: s#90
[#210 'true']: s#89
[#210 '~']: s#69
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#210 /0[fh]/]: s#94
[#210 /0[iu]?/]: s#91
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#210 /[1-9][0-9]*[fh]/]: s#95
[#210 /[1-9][0-9]*[iu]?/]: s#92
[#211 '!']: s#68
[#211 '&']: s#71
[#211 '(']: s#83
[#211 '*']: s#70
[#211 '-']: s#67
[#211 '@']: s#35
[#211 'bitcast']: s#77
[#211 'false']: s#90
[#211 'true']: s#89
[#211 '~']: s#69
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#211 /0[fh]/]: s#94
[#211 /0[iu]?/]: s#91
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#211 /[1-9][0-9]*[fh]/]: s#95
[#211 /[1-9][0-9]*[iu]?/]: s#92
[#212 '!']: s#68
[#212 '&']: s#71
[#212 '(']: s#83
[#212 '*']: s#70
[#212 '-']: s#67
[#212 '@']: s#35
[#212 'bitcast']: s#77
[#212 'false']: s#90
[#212 'true']: s#89
[#212 '~']: s#69
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#212 /0[fh]/]: s#94
[#212 /0[iu]?/]: s#91
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#212 /[1-9][0-9]*[fh]/]: s#95
[#212 /[1-9][0-9]*[iu]?/]: s#92
[#213 '!']: s#68
[#213 '&']: s#71
[#213 '(']: s#83
[#213 '*']: s#70
[#213 '-']: s#67
[#213 '@']: s#35
[#213 'bitcast']: s#77
[#213 'false']: s#90
[#213 'true']: s#89
[#213 '~']: s#69
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#213 /0[fh]/]: s#94
[#213 /0[iu]?/]: s#91
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#213 /[1-9][0-9]*[fh]/]: s#95
[#213 /[1-9][0-9]*[iu]?/]: s#92
[#214 '!']: s#68
[#214 '&']: s#71
[#214 '(']: s#83
[#214 '*']: s#70
[#214 '-']: s#67
[#214 '@']: s#35
[#214 'bitcast']: s#77
[#214 'false']: s#90
[#214 'true']: s#89
[#214 '~']: s#69
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#214 /0[fh]/]: s#94
[#214 /0[iu]?/]: s#91
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#214 /[1-9][0-9]*[fh]/]: s#95
[#214 /[1-9][0-9]*[iu]?/]: s#92
[#215 '!']: s#68
[#215 '&']: s#71
[#215 '(']: s#83
[#215 '*']: s#70
[#215 '-']: s#67
[#215 '@']: s#35
[#215 'bitcast']: s#77
[#215 'false']: s#90
[#215 'true']: s#89
[#215 '~']: s#69
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#215 /0[fh]/]: s#94
[#215 /0[iu]?/]: s#91
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#215 /[1-9][0-9]*[fh]/]: s#95
[#215 /[1-9][0-9]*[iu]?/]: s#92
[#216 '!']: s#68
[#216 '&']: s#71
[#216 '(']: s#83
[#216 '*']: s#70
[#216 '-']: s#67
[#216 '@']: s#35
[#216 'bitcast']: s#77
[#216 'false']: s#90
[#216 'true']: s#89
[#216 '~']: s#69
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#216 /0[fh]/]: s#94
[#216 /0[iu]?/]: s#91
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#216 /[1-9][0-9]*[fh]/]: s#95
[#216 /[1-9][0-9]*[iu]?/]: s#92
[#217 '!']: s#68
[#217 '&']: s#71
[#217 '(']: s#83
[#217 '*']: s#70
[#217 '-']: s#67
[#217 '@']: s#35
[#217 'bitcast']: s#77
[#217 'false']: s#90
[#217 'true']: s#89
[#217 '~']: s#69
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#217 /0[fh]/]: s#94
[#217 /0[iu]?/]: s#91
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#217 /[1-9][0-9]*[fh]/]: s#95
[#217 /[1-9][0-9]*[iu]?/]: s#92
[#218 '!']: s#68
[#218 '&']: s#71
[#218 '(']: s#83
[#218 '*']: s#70
[#218 '-']: s#67
[#218 '@']: s#35
[#218 'bitcast']: s#77
[#218 'false']: s#90
[#218 'true']: s#89
[#218 '~']: s#69
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#218 /0[fh]/]: s#94
[#218 /0[iu]?/]: s#91
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#218 /[1-9][0-9]*[fh]/]: s#95
[#218 /[1-9][0-9]*[iu]?/]: s#92
[#219 '!']: s#68
[#219 '&']: s#71
[#219 '(']: s#83
[#219 '*']: s#70
[#219 '-']: s#67
[#219 '@']: s#35
[#219 'bitcast']: s#77
[#219 'false']: s#90
[#219 'true']: s#89
[#219 '~']: s#69
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#219 /0[fh]/]: s#94
[#219 /0[iu]?/]: s#91
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#219 /[1-9][0-9]*[fh]/]: s#95
[#219 /[1-9][0-9]*[iu]?/]: s#92
[#220 '!']: s#68
[#220 '&']: s#71
[#220 '(']: s#83
[#220 '*']: s#70
[#220 '-']: s#67
[#220 '@']: s#35
[#220 'bitcast']: s#77
[#220 'false']: s#90
[#220 'true']: s#89
[#220 '~']: s#69
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#220 /0[fh]/]: s#94
[#220 /0[iu]?/]: s#91
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#220 /[1-9][0-9]*[fh]/]: s#95
[#220 /[1-9][0-9]*[iu]?/]: s#92
[#221 '!']: s#68
[#221 '&']: s#71
[#221 '(']: s#83
[#221 '*']: s#70
[#221 '-']: s#67
[#221 '@']: s#35
[#221 'bitcast']: s#77
[#221 'false']: s#90
[#221 'true']: s#89
[#221 '~']: s#69
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#221 /0[fh]/]: s#94
[#221 /0[iu]?/]: s#91
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#221 /[1-9][0-9]*[fh]/]: s#95
[#221 /[1-9][0-9]*[iu]?/]: s#92
[#222 '!']: s#68
[#222 '&']: s#71
[#222 '(']: s#83
[#222 '*']: s#70
[#222 '-']: s#67
[#222 '@']: s#35
[#222 'bitcast']: s#77
[#222 'false']: s#90
[#222 'true']: s#89
[#222 '~']: s#69
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#222 /0[fh]/]: s#94
[#222 /0[iu]?/]: s#91
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#222 /[1-9][0-9]*[fh]/]: s#95
[#222 /[1-9][0-9]*[iu]?/]: s#92
[#223 '!']: s#68
[#223 '&']: s#71
[#223 '(']: s#83
[#223 '*']: s#70
[#223 '-']: s#67
[#223 '@']: s#35
[#223 'bitcast']: s#77
[#223 'false']: s#90
[#223 'true']: s#89
[#223 '~']: s#69
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#223 /0[fh]/]: s#94
[#223 /0[iu]?/]: s#91
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#223 /[1-9][0-9]*[fh]/]: s#95
[#223 /[1-9][0-9]*[iu]?/]: s#92
[#224 'flat']: s#251
[#224 'linear']: s#250
[#224 'perspective']: s#249
[#225 '!']: s#68
[#225 '&']: s#71
[#225 '(']: s#83
[#225 '*']: s#70
[#225 '-']: s#67
[#225 '@']: s#35
[#225 'bitcast']: s#77
[#225 'false']: s#90
[#225 'true']: s#89
[#225 '~']: s#69
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#225 /0[fh]/]: s#94
[#225 /0[iu]?/]: s#91
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#225 /[1-9][0-9]*[fh]/]: s#95
[#225 /[1-9][0-9]*[iu]?/]: s#92
[#226 '!']: s#68
[#226 '&']: s#71
[#226 '(']: s#83
[#226 '*']: s#70
[#226 '-']: s#67
[#226 '@']: s#35
[#226 'bitcast']: s#77
[#226 'false']: s#90
[#226 'true']: s#89
[#226 '~']: s#69
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#226 /0[fh]/]: s#94
[#226 /0[iu]?/]: s#91
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#226 /[1-9][0-9]*[fh]/]: s#95
[#226 /[1-9][0-9]*[iu]?/]: s#92
[#227 'f16']: r#29
[#227 'texture_multisampled_2d']: r#29
[#228 'frag_depth']: s#238
[#228 'front_facing']: s#237
[#228 'global_invocation_id']: s#241
[#228 'instance_index']: s#235
[#228 'local_invocation_id']: s#239
[#228 'local_invocation_index']: s#240
[#228 'num_workgroups']: s#243
[#228 'position']: s#236
[#228 'sample_index']: s#244
[#228 'sample_mask']: s#245
[#228 'vertex_index']: s#234
[#228 'workgroup_id']: s#242
[#229 '!']: s#68
[#229 '&']: s#71
[#229 '(']: s#83
[#229 '*']: s#70
[#229 '-']: s#67
[#229 '@']: s#35
[#229 'bitcast']: s#77
[#229 'false']: s#90
[#229 'true']: s#89
[#229 '~']: s#69
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#229 /0[fh]/]: s#94
[#229 /0[iu]?/]: s#91
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#229 /[1-9][0-9]*[fh]/]: s#95
[#229 /[1-9][0-9]*[iu]?/]: s#92
[#230 '!']: s#68
[#230 '&']: s#71
[#230 '(']: s#83
[#230 '*']: s#70
[#230 '-']: s#67
[#230 '@']: s#35
[#230 'bitcast']: s#77
[#230 'false']: s#90
[#230 'true']: s#89
[#230 '~']: s#69
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#230 /0[fh]/]: s#94
[#230 /0[iu]?/]: s#91
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#230 /[1-9][0-9]*[fh]/]: s#95
[#230 /[1-9][0-9]*[iu]?/]: s#92
[#231 ',']: s#366
[#232 ',']: s#366
[#233 ',']: s#366
[#246 ',']: s#366
[#247 ',']: s#366
[#248 ',']: s#468
[#252 ',']: s#366
[#253 ',']: s#366
[#254 ',']: s#464
[#256 '<<']: s#205
[#256 '>>']: s#206
[#267 '%']: s#204
[#267 '*']: s#202
[#267 '/']: s#203
[#272 '.']: s#195
[#272 '[']: s#194
[#273 '.']: s#195
[#273 '[']: s#194
[#283 ']']: s#458
[#284 'r32float']: s#451
[#284 'r32sint']: s#450
[#284 'r32uint']: s#449
[#284 'rg32float']: s#454
[#284 'rg32sint']: s#453
[#284 'rg32uint']: s#452
[#284 'rgba16float']: s#448
[#284 'rgba16sint']: s#447
[#284 'rgba16uint']: s#446
[#284 'rgba32float']: s#457
[#284 'rgba32sint']: s#456
[#284 'rgba32uint']: s#455
[#284 'rgba8sint']: s#445
[#284 'rgba8snorm']: s#443
[#284 'rgba8uint']: s#444
[#284 'rgba8unorm']: s#442
[#285 'array']: s#299
[#285 'atomic']: s#155
[#285 'bool']: s#148
[#285 'f16']: s#150
[#285 'f32']: s#149
[#285 'i32']: s#151
[#285 'mat2x2']: s#160
[#285 'mat2x3']: s#161
[#285 'mat2x4']: s#162
[#285 'mat3x2']: s#163
[#285 'mat3x3']: s#164
[#285 'mat3x4']: s#165
[#285 'mat4x2']: s#166
[#285 'mat4x3']: s#167
[#285 'mat4x4']: s#168
[#285 'ptr']: s#153
[#285 'sampler']: s#174
[#285 'sampler_comparison']: s#175
[#285 'texture_1d']: s#181
[#285 'texture_2d']: s#182
[#285 'texture_2d_array']: s#183
[#285 'texture_3d']: s#184
[#285 'texture_cube']: s#185
[#285 'texture_cube_array']: s#186
[#285 'texture_depth_2d']: s#176
[#285 'texture_depth_2d_array']: s#177
[#285 'texture_depth_cube']: s#178
[#285 'texture_depth_cube_array']: s#179
[#285 'texture_depth_multisampled_2d']: s#180
[#285 'texture_multisampled_2d']: s#187
[#285 'texture_storage_1d']: s#188
[#285 'texture_storage_2d']: s#189
[#285 'texture_storage_2d_array']: s#190
[#285 'texture_storage_3d']: s#191
[#285 'u32']: s#152
[#285 'vec2']: s#157
[#285 'vec3']: s#158
[#285 'vec4']: s#159
[#285 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#286 'array']: s#299
[#286 'atomic']: s#155
[#286 'bool']: s#148
[#286 'f16']: s#150
[#286 'f32']: s#149
[#286 'i32']: s#151
[#286 'mat2x2']: s#160
[#286 'mat2x3']: s#161
[#286 'mat2x4']: s#162
[#286 'mat3x2']: s#163
[#286 'mat3x3']: s#164
[#286 'mat3x4']: s#165
[#286 'mat4x2']: s#166
[#286 'mat4x3']: s#167
[#286 'mat4x4']: s#168
[#286 'ptr']: s#153
[#286 'sampler']: s#174
[#286 'sampler_comparison']: s#175
[#286 'texture_1d']: s#181
[#286 'texture_2d']: s#182
[#286 'texture_2d_array']: s#183
[#286 'texture_3d']: s#184
[#286 'texture_cube']: s#185
[#286 'texture_cube_array']: s#186
[#286 'texture_depth_2d']: s#176
[#286 'texture_depth_2d_array']: s#177
[#286 'texture_depth_cube']: s#178
[#286 'texture_depth_cube_array']: s#179
[#286 'texture_depth_multisampled_2d']: s#180
[#286 'texture_multisampled_2d']: s#187
[#286 'texture_storage_1d']: s#188
[#286 'texture_storage_2d']: s#189
[#286 'texture_storage_2d_array']: s#190
[#286 'texture_storage_3d']: s#191
[#286 'u32']: s#152
[#286 'vec2']: s#157
[#286 'vec3']: s#158
[#286 'vec4']: s#159
[#286 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#287 'array']: s#299
[#287 'atomic']: s#155
[#287 'bool']: s#148
[#287 'f16']: s#150
[#287 'f32']: s#149
[#287 'i32']: s#151
[#287 'mat2x2']: s#160
[#287 'mat2x3']: s#161
[#287 'mat2x4']: s#162
[#287 'mat3x2']: s#163
[#287 'mat3x3']: s#164
[#287 'mat3x4']: s#165
[#287 'mat4x2']: s#166
[#287 'mat4x3']: s#167
[#287 'mat4x4']: s#168
[#287 'ptr']: s#153
[#287 'sampler']: s#174
[#287 'sampler_comparison']: s#175
[#287 'texture_1d']: s#181
[#287 'texture_2d']: s#182
[#287 'texture_2d_array']: s#183
[#287 'texture_3d']: s#184
[#287 'texture_cube']: s#185
[#287 'texture_cube_array']: s#186
[#287 'texture_depth_2d']: s#176
[#287 'texture_depth_2d_array']: s#177
[#287 'texture_depth_cube']: s#178
[#287 'texture_depth_cube_array']: s#179
[#287 'texture_depth_multisampled_2d']: s#180
[#287 'texture_multisampled_2d']: s#187
[#287 'texture_storage_1d']: s#188
[#287 'texture_storage_2d']: s#189
[#287 'texture_storage_2d_array']: s#190
[#287 'texture_storage_3d']: s#191
[#287 'u32']: s#152
[#287 'vec2']: s#157
[#287 'vec3']: s#158
[#287 'vec4']: s#159
[#287 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#288 'function']: s#356
[#288 'private']: s#357
[#288 'storage']: s#360
[#288 'uniform']: s#359
[#288 'workgroup']: s#358
[#289 'array']: s#299
[#289 'atomic']: s#155
[#289 'bool']: s#148
[#289 'f16']: s#150
[#289 'f32']: s#149
[#289 'i32']: s#151
[#289 'mat2x2']: s#160
[#289 'mat2x3']: s#161
[#289 'mat2x4']: s#162
[#289 'mat3x2']: s#163
[#289 'mat3x3']: s#164
[#289 'mat3x4']: s#165
[#289 'mat4x2']: s#166
[#289 'mat4x3']: s#167
[#289 'mat4x4']: s#168
[#289 'ptr']: s#153
[#289 'sampler']: s#174
[#289 'sampler_comparison']: s#175
[#289 'texture_1d']: s#181
[#289 'texture_2d']: s#182
[#289 'texture_2d_array']: s#183
[#289 'texture_3d']: s#184
[#289 'texture_cube']: s#185
[#289 'texture_cube_array']: s#186
[#289 'texture_depth_2d']: s#176
[#289 'texture_depth_2d_array']: s#177
[#289 'texture_depth_cube']: s#178
[#289 'texture_depth_cube_array']: s#179
[#289 'texture_depth_multisampled_2d']: s#180
[#289 'texture_multisampled_2d']: s#187
[#289 'texture_storage_1d']: s#188
[#289 'texture_storage_2d']: s#189
[#289 'texture_storage_2d_array']: s#190
[#289 'texture_storage_3d']: s#191
[#289 'u32']: s#152
[#289 'vec2']: s#157
[#289 'vec3']: s#158
[#289 'vec4']: s#159
[#289 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#290 'array']: s#299
[#290 'atomic']: s#155
[#290 'bool']: s#148
[#290 'f16']: s#150
[#290 'f32']: s#149
[#290 'i32']: s#151
[#290 'mat2x2']: s#160
[#290 'mat2x3']: s#161
[#290 'mat2x4']: s#162
[#290 'mat3x2']: s#163
[#290 'mat3x3']: s#164
[#290 'mat3x4']: s#165
[#290 'mat4x2']: s#166
[#290 'mat4x3']: s#167
[#290 'mat4x4']: s#168
[#290 'ptr']: s#153
[#290 'sampler']: s#174
[#290 'sampler_comparison']: s#175
[#290 'texture_1d']: s#181
[#290 'texture_2d']: s#182
[#290 'texture_2d_array']: s#183
[#290 'texture_3d']: s#184
[#290 'texture_cube']: s#185
[#290 'texture_cube_array']: s#186
[#290 'texture_depth_2d']: s#176
[#290 'texture_depth_2d_array']: s#177
[#290 'texture_depth_cube']: s#178
[#290 'texture_depth_cube_array']: s#179
[#290 'texture_depth_multisampled_2d']: s#180
[#290 'texture_multisampled_2d']: s#187
[#290 'texture_storage_1d']: s#188
[#290 'texture_storage_2d']: s#189
[#290 'texture_storage_2d_array']: s#190
[#290 'texture_storage_3d']: s#191
[#290 'u32']: s#152
[#290 'vec2']: s#157
[#290 'vec3']: s#158
[#290 'vec4']: s#159
[#290 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#291 'array']: s#299
[#291 'atomic']: s#155
[#291 'bool']: s#148
[#291 'f16']: s#150
[#291 'f32']: s#149
[#291 'i32']: s#151
[#291 'mat2x2']: s#160
[#291 'mat2x3']: s#161
[#291 'mat2x4']: s#162
[#291 'mat3x2']: s#163
[#291 'mat3x3']: s#164
[#291 'mat3x4']: s#165
[#291 'mat4x2']: s#166
[#291 'mat4x3']: s#167
[#291 'mat4x4']: s#168
[#291 'ptr']: s#153
[#291 'sampler']: s#174
[#291 'sampler_comparison']: s#175
[#291 'texture_1d']: s#181
[#291 'texture_2d']: s#182
[#291 'texture_2d_array']: s#183
[#291 'texture_3d']: s#184
[#291 'texture_cube']: s#185
[#291 'texture_cube_array']: s#186
[#291 'texture_depth_2d']: s#176
[#291 'texture_depth_2d_array']: s#177
[#291 'texture_depth_cube']: s#178
[#291 'texture_depth_cube_array']: s#179
[#291 'texture_depth_multisampled_2d']: s#180
[#291 'texture_multisampled_2d']: s#187
[#291 'texture_storage_1d']: s#188
[#291 'texture_storage_2d']: s#189
[#291 'texture_storage_2d_array']: s#190
[#291 'texture_storage_3d']: s#191
[#291 'u32']: s#152
[#291 'vec2']: s#157
[#291 'vec3']: s#158
[#291 'vec4']: s#159
[#291 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#293 '!']: s#68
[#293 '&']: s#71
[#293 '(']: s#83
[#293 '*']: s#70
[#293 '-']: s#67
[#293 '@']: s#35
[#293 'bitcast']: s#77
[#293 'false']: s#90
[#293 'true']: s#89
[#293 '~']: s#69
[#293 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#293 /0[fh]/]: s#94
[#293 /0[iu]?/]: s#91
[#293 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#293 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#293 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#293 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#293 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#293 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#293 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#293 /[1-9][0-9]*[fh]/]: s#95
[#293 /[1-9][0-9]*[iu]?/]: s#92
[#294 '>']: s#430
[#297 '<']: s#291
[#298 '<']: s#290
[#299 '<']: s#289
[#301 '}']: s#429
[#303 '&']: s#341
[#303 '(']: s#343
[#303 '*']: s#340
[#303 ';']: s#304
[#303 '@']: s#35
[#303 '_']: s#337
[#303 'break']: s#329
[#303 'const']: s#328
[#303 'continue']: s#330
[#303 'discard']: s#315
[#303 'for']: s#323
[#303 'if']: s#334
[#303 'let']: s#327
[#303 'loop']: s#322
[#303 'return']: s#319
[#303 'static_assert']: s#30
[#303 'switch']: s#321
[#303 'var']: s#110
[#303 'while']: s#324
[#303 '{']: s#137
[#303 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#304 'break']: r#30
[#304 'continue']: r#30
[#304 'f16']: r#30
[#304 'texture_multisampled_2d']: r#30
[#305 ';']: s#427
[#306 'break']: r#31
[#306 'continue']: r#31
[#306 'f16']: r#31
[#306 'texture_multisampled_2d']: r#31
[#307 'break']: r#32
[#307 'continue']: r#32
[#307 'f16']: r#32
[#307 'texture_multisampled_2d']: r#32
[#308 'break']: r#33
[#308 'continue']: r#33
[#308 'f16']: r#33
[#308 'texture_multisampled_2d']: r#33
[#309 'break']: r#34
[#309 'continue']: r#34
[#309 'f16']: r#34
[#309 'texture_multisampled_2d']: r#34
[#310 'break']: r#35
[#310 'continue']: r#35
[#310 'f16']: r#35
[#310 'texture_multisampled_2d']: r#35
[#311 ';']: s#426
[#312 ';']: s#425
[#313 ';']: s#424
[#314 ';']: s#423
[#315 ';']: s#422
[#316 ';']: s#421
[#317 'break']: r#36
[#317 'continue']: r#36
[#317 'f16']: r#36
[#317 'texture_multisampled_2d']: r#36
[#318 ';']: s#420
[#319 '!']: s#68
[#319 '&']: s#71
[#319 '(']: s#83
[#319 '*']: s#70
[#319 '-']: s#67
[#319 '@']: s#35
[#319 'bitcast']: s#77
[#319 'false']: s#90
[#319 'true']: s#89
[#319 '~']: s#69
[#319 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#319 /0[fh]/]: s#94
[#319 /0[iu]?/]: s#91
[#319 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#319 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#319 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#319 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#319 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#319 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#319 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#319 /[1-9][0-9]*[fh]/]: s#95
[#319 /[1-9][0-9]*[iu]?/]: s#92
[#320 'else']: s#417
[#321 '!']: s#68
[#321 '&']: s#71
[#321 '(']: s#83
[#321 '*']: s#70
[#321 '-']: s#67
[#321 '@']: s#35
[#321 'bitcast']: s#77
[#321 'false']: s#90
[#321 'true']: s#89
[#321 '~']: s#69
[#321 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#321 /0[fh]/]: s#94
[#321 /0[iu]?/]: s#91
[#321 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#321 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#321 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#321 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#321 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#321 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#321 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#321 /[1-9][0-9]*[fh]/]: s#95
[#321 /[1-9][0-9]*[iu]?/]: s#92
[#322 '{']: s#412
[#323 '(']: s#411
[#324 '!']: s#68
[#324 '&']: s#71
[#324 '(']: s#83
[#324 '*']: s#70
[#324 '-']: s#67
[#324 '@']: s#35
[#324 'bitcast']: s#77
[#324 'false']: s#90
[#324 'true']: s#89
[#324 '~']: s#69
[#324 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#324 /0[fh]/]: s#94
[#324 /0[iu]?/]: s#91
[#324 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#324 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#324 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#324 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#324 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#324 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#324 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#324 /[1-9][0-9]*[fh]/]: s#95
[#324 /[1-9][0-9]*[iu]?/]: s#92
[#325 'array']: s#147
[#325 'atomic']: s#155
[#325 'bool']: s#148
[#325 'f16']: s#150
[#325 'f32']: s#149
[#325 'i32']: s#151
[#325 'mat2x2']: s#160
[#325 'mat2x3']: s#161
[#325 'mat2x4']: s#162
[#325 'mat3x2']: s#163
[#325 'mat3x3']: s#164
[#325 'mat3x4']: s#165
[#325 'mat4x2']: s#166
[#325 'mat4x3']: s#167
[#325 'mat4x4']: s#168
[#325 'ptr']: s#153
[#325 'sampler']: s#174
[#325 'sampler_comparison']: s#175
[#325 'texture_1d']: s#181
[#325 'texture_2d']: s#182
[#325 'texture_2d_array']: s#183
[#325 'texture_3d']: s#184
[#325 'texture_cube']: s#185
[#325 'texture_cube_array']: s#186
[#325 'texture_depth_2d']: s#176
[#325 'texture_depth_2d_array']: s#177
[#325 'texture_depth_cube']: s#178
[#325 'texture_depth_cube_array']: s#179
[#325 'texture_depth_multisampled_2d']: s#180
[#325 'texture_multisampled_2d']: s#187
[#325 'texture_storage_1d']: s#188
[#325 'texture_storage_2d']: s#189
[#325 'texture_storage_2d_array']: s#190
[#325 'texture_storage_3d']: s#191
[#325 'u32']: s#152
[#325 'vec2']: s#157
[#325 'vec3']: s#158
[#325 'vec4']: s#159
[#325 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#326 '=']: s#407
[#327 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#328 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#334 '!']: s#68
[#334 '&']: s#71
[#334 '(']: s#83
[#334 '*']: s#70
[#334 '-']: s#67
[#334 '@']: s#35
[#334 'bitcast']: s#77
[#334 'false']: s#90
[#334 'true']: s#89
[#334 '~']: s#69
[#334 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#334 /0[fh]/]: s#94
[#334 /0[iu]?/]: s#91
[#334 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#334 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#334 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#334 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#334 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#334 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#334 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#334 /[1-9][0-9]*[fh]/]: s#95
[#334 /[1-9][0-9]*[iu]?/]: s#92
[#335 'f16']: r#37
[#335 'texture_multisampled_2d']: r#37
[#336 '%=']: s#398
[#336 '&=']: s#399
[#336 '*=']: s#396
[#336 '++']: s#390
[#336 '+=']: s#394
[#336 '--']: s#391
[#336 '-=']: s#395
[#336 '/=']: s#397
[#336 '<<=']: s#403
[#336 '=']: s#392
[#336 '>>=']: s#402
[#336 '^=']: s#401
[#336 '|=']: s#400
[#337 '=']: s#388
[#338 '@']: s#35
[#339 '.']: s#195
[#339 '[']: s#194
[#340 '&']: s#341
[#340 '(']: s#343
[#340 '*']: s#340
[#340 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#341 '&']: s#341
[#341 '(']: s#343
[#341 '*']: s#340
[#341 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#343 '&']: s#341
[#343 '(']: s#343
[#343 '*']: s#340
[#343 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#344 '@']: s#35
[#345 ',']: s#375
[#346 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#274
[#348 '@']: s#35
[#351 '!']: s#68
[#351 '&']: s#71
[#351 '(']: s#83
[#351 '*']: s#70
[#351 '-']: s#67
[#351 '@']: s#35
[#351 'bitcast']: s#77
[#351 'false']: s#90
[#351 'true']: s#89
[#351 '~']: s#69
[#351 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#351 /0[fh]/]: s#94
[#351 /0[iu]?/]: s#91
[#351 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#351 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#351 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#351 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#351 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#351 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#351 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#351 /[1-9][0-9]*[fh]/]: s#95
[#351 /[1-9][0-9]*[iu]?/]: s#92
[#355 ',']: s#368
[#362 ',']: s#366
[#364 'f16']: r#38
[#364 'texture_multisampled_2d']: r#38
[#365 ')']: s#537
[#367 '>']: s#536
[#368 'read']: s#533
[#368 'read_write']: s#535
[#368 'write']: s#534
[#371 ':']: s#531
[#372 ',']: s#530
[#374 ',']: s#375
[#375 '@']: s#35
[#376 ')']: s#526
[#378 ',']: s#525
[#379 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#381 '@']: s#35
[#382 ')']: s#519
[#387 'f16']: r#39
[#387 'texture_multisampled_2d']: r#39
[#388 '!']: s#68
[#388 '&']: s#71
[#388 '(']: s#83
[#388 '*']: s#70
[#388 '-']: s#67
[#388 '@']: s#35
[#388 'bitcast']: s#77
[#388 'false']: s#90
[#388 'true']: s#89
[#388 '~']: s#69
[#388 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#388 /0[fh]/]: s#94
[#388 /0[iu]?/]: s#91
[#388 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#388 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#388 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#388 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#388 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#388 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#388 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#388 /[1-9][0-9]*[fh]/]: s#95
[#388 /[1-9][0-9]*[iu]?/]: s#92
[#389 '!']: s#68
[#389 '&']: s#71
[#389 '(']: s#83
[#389 '*']: s#70
[#389 '-']: s#67
[#389 '@']: s#35
[#389 'bitcast']: s#77
[#389 'false']: s#90
[#389 'true']: s#89
[#389 '~']: s#69
[#389 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#389 /0[fh]/]: s#94
[#389 /0[iu]?/]: s#91
[#389 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#389 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#389 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#389 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#389 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#389 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#389 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#389 /[1-9][0-9]*[fh]/]: s#95
[#389 /[1-9][0-9]*[iu]?/]: s#92
[#392 'f16']: r#40
[#392 'texture_multisampled_2d']: r#40
[#392 /0[xX][0-9a-fA-F]+[iu]?/]: r#40
[#393 'f16']: r#41
[#393 'texture_multisampled_2d']: r#41
[#393 /0[xX][0-9a-fA-F]+[iu]?/]: r#41
[#394 'f16']: r#42
[#394 'texture_multisampled_2d']: r#42
[#394 /0[xX][0-9a-fA-F]+[iu]?/]: r#42
[#395 'f16']: r#43
[#395 'texture_multisampled_2d']: r#43
[#395 /0[xX][0-9a-fA-F]+[iu]?/]: r#43
[#396 'f16']: r#44
[#396 'texture_multisampled_2d']: r#44
[#396 /0[xX][0-9a-fA-F]+[iu]?/]: r#44
[#397 'f16']: r#45
[#397 'texture_multisampled_2d']: r#45
[#397 /0[xX][0-9a-fA-F]+[iu]?/]: r#45
[#398 'f16']: r#46
[#398 'texture_multisampled_2d']: r#46
[#398 /0[xX][0-9a-fA-F]+[iu]?/]: r#46
[#399 'f16']: r#47
[#399 'texture_multisampled_2d']: r#47
[#399 /0[xX][0-9a-fA-F]+[iu]?/]: r#47
[#400 'f16']: r#48
[#400 'texture_multisampled_2d']: r#48
[#400 /0[xX][0-9a-fA-F]+[iu]?/]: r#48
[#401 'f16']: r#49
[#401 'texture_multisampled_2d']: r#49
[#401 /0[xX][0-9a-fA-F]+[iu]?/]: r#49
[#402 'f16']: r#50
[#402 'texture_multisampled_2d']: r#50
[#402 /0[xX][0-9a-fA-F]+[iu]?/]: r#50
[#403 'f16']: r#51
[#403 'texture_multisampled_2d']: r#51
[#403 /0[xX][0-9a-fA-F]+[iu]?/]: r#51
[#404 '{']: s#137
[#405 '=']: s#515
[#406 '=']: s#514
[#407 '!']: s#68
[#407 '&']: s#71
[#407 '(']: s#83
[#407 '*']: s#70
[#407 '-']: s#67
[#407 '@']: s#35
[#407 'bitcast']: s#77
[#407 'false']: s#90
[#407 'true']: s#89
[#407 '~']: s#69
[#407 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#407 /0[fh]/]: s#94
[#407 /0[iu]?/]: s#91
[#407 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#407 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#407 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#407 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#407 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#407 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#407 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#407 /[1-9][0-9]*[fh]/]: s#95
[#407 /[1-9][0-9]*[iu]?/]: s#92
[#409 '(']: s#293
[#410 '{']: s#137
[#411 '&']: s#341
[#411 '(']: s#343
[#411 '*']: s#340
[#411 '@']: s#35
[#411 '_']: s#337
[#411 'const']: s#328
[#411 'let']: s#327
[#411 'var']: s#110
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#412 '&']: s#341
[#412 '(']: s#343
[#412 '*']: s#340
[#412 ';']: s#304
[#412 '@']: s#35
[#412 '_']: s#337
[#412 'break']: s#329
[#412 'const']: s#328
[#412 'continue']: s#330
[#412 'discard']: s#315
[#412 'for']: s#323
[#412 'if']: s#334
[#412 'let']: s#327
[#412 'loop']: s#322
[#412 'return']: s#319
[#412 'static_assert']: s#30
[#412 'switch']: s#321
[#412 'var']: s#110
[#412 'while']: s#324
[#412 '{']: s#137
[#412 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#413 '{']: s#501
[#414 'else']: s#500
[#415 'break']: r#52
[#415 'continue']: r#52
[#415 'f16']: r#52
[#415 'texture_multisampled_2d']: r#52
[#416 'else']: s#417
[#417 'if']: s#496
[#420 'break']: r#53
[#420 'continue']: r#53
[#420 'f16']: r#53
[#420 'texture_multisampled_2d']: r#53
[#421 'break']: r#54
[#421 'continue']: r#54
[#421 'f16']: r#54
[#421 'texture_multisampled_2d']: r#54
[#422 'break']: r#55
[#422 'continue']: r#55
[#422 'f16']: r#55
[#422 'texture_multisampled_2d']: r#55
[#423 'break']: r#56
[#423 'continue']: r#56
[#423 'f16']: r#56
[#423 'texture_multisampled_2d']: r#56
[#424 'break']: r#57
[#424 'continue']: r#57
[#424 'f16']: r#57
[#424 'texture_multisampled_2d']: r#57
[#425 'break']: r#58
[#425 'continue']: r#58
[#425 'f16']: r#58
[#425 'texture_multisampled_2d']: r#58
[#426 'break']: r#59
[#426 'continue']: r#59
[#426 'f16']: r#59
[#426 'texture_multisampled_2d']: r#59
[#427 'break']: r#60
[#427 'continue']: r#60
[#427 'f16']: r#60
[#427 'texture_multisampled_2d']: r#60
[#429 'break']: r#61
[#429 'continue']: r#61
[#429 'f16']: r#61
[#429 'texture_multisampled_2d']: r#61
[#429 EndOfText]: r#61
[#430 '(']: s#83
[#431 ')']: s#494
[#433 ',']: s#493
[#434 '>']: s#489
[#435 '>']: s#488
[#436 ',']: s#487
[#437 ',']: s#485
[#438 '>']: s#484
[#439 '>']: s#483
[#440 '>']: s#482
[#441 ',']: s#481
[#458 '.']: s#195
[#458 '[']: s#194
[#463 'f16']: r#62
[#463 'texture_multisampled_2d']: r#62
[#464 '!']: s#68
[#464 '&']: s#71
[#464 '(']: s#83
[#464 '*']: s#70
[#464 '-']: s#67
[#464 '@']: s#35
[#464 'bitcast']: s#77
[#464 'false']: s#90
[#464 'true']: s#89
[#464 '~']: s#69
[#464 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#464 /0[fh]/]: s#94
[#464 /0[iu]?/]: s#91
[#464 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#464 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#464 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#464 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#464 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#464 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#464 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#464 /[1-9][0-9]*[fh]/]: s#95
[#464 /[1-9][0-9]*[iu]?/]: s#92
[#465 'f16']: r#63
[#465 'texture_multisampled_2d']: r#63
[#466 'f16']: r#64
[#466 'texture_multisampled_2d']: r#64
[#467 'f16']: r#65
[#467 'texture_multisampled_2d']: r#65
[#468 'center']: s#475
[#468 'centroid']: s#476
[#468 'sample']: s#477
[#469 'f16']: r#66
[#469 'texture_multisampled_2d']: r#66
[#470 'f16']: r#67
[#470 'texture_multisampled_2d']: r#67
[#471 'f16']: r#68
[#471 'texture_multisampled_2d']: r#68
[#472 'f16']: r#69
[#472 'texture_multisampled_2d']: r#69
[#473 'f16']: r#70
[#473 'texture_multisampled_2d']: r#70
[#474 ',']: s#366
[#478 ',']: s#576
[#481 'read']: s#533
[#481 'read_write']: s#535
[#481 'write']: s#534
[#485 'array']: s#299
[#485 'atomic']: s#155
[#485 'bool']: s#148
[#485 'f16']: s#150
[#485 'f32']: s#149
[#485 'i32']: s#151
[#485 'mat2x2']: s#160
[#485 'mat2x3']: s#161
[#485 'mat2x4']: s#162
[#485 'mat3x2']: s#163
[#485 'mat3x3']: s#164
[#485 'mat3x4']: s#165
[#485 'mat4x2']: s#166
[#485 'mat4x3']: s#167
[#485 'mat4x4']: s#168
[#485 'ptr']: s#153
[#485 'sampler']: s#174
[#485 'sampler_comparison']: s#175
[#485 'texture_1d']: s#181
[#485 'texture_2d']: s#182
[#485 'texture_2d_array']: s#183
[#485 'texture_3d']: s#184
[#485 'texture_cube']: s#185
[#485 'texture_cube_array']: s#186
[#485 'texture_depth_2d']: s#176
[#485 'texture_depth_2d_array']: s#177
[#485 'texture_depth_cube']: s#178
[#485 'texture_depth_cube_array']: s#179
[#485 'texture_depth_multisampled_2d']: s#180
[#485 'texture_multisampled_2d']: s#187
[#485 'texture_storage_1d']: s#188
[#485 'texture_storage_2d']: s#189
[#485 'texture_storage_2d_array']: s#190
[#485 'texture_storage_3d']: s#191
[#485 'u32']: s#152
[#485 'vec2']: s#157
[#485 'vec3']: s#158
[#485 'vec4']: s#159
[#485 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#486 '>']: s#572
[#487 '!']: s#68
[#487 '&']: s#71
[#487 '(']: s#83
[#487 '*']: s#70
[#487 '-']: s#67
[#487 '@']: s#35
[#487 'bitcast']: s#77
[#487 'false']: s#90
[#487 'true']: s#89
[#487 '~']: s#69
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#487 /0[fh]/]: s#94
[#487 /0[iu]?/]: s#91
[#487 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#487 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#487 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#487 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#487 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#487 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#487 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#487 /[1-9][0-9]*[fh]/]: s#95
[#487 /[1-9][0-9]*[iu]?/]: s#92
[#490 ',']: s#567
[#492 ',']: s#493
[#493 '!']: s#68
[#493 '&']: s#71
[#493 '(']: s#83
[#493 '*']: s#70
[#493 '-']: s#67
[#493 '@']: s#35
[#493 'bitcast']: s#77
[#493 'false']: s#90
[#493 'true']: s#89
[#493 '~']: s#69
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#493 /0[fh]/]: s#94
[#493 /0[iu]?/]: s#91
[#493 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#493 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#493 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#493 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#493 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#493 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#493 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#493 /[1-9][0-9]*[fh]/]: s#95
[#493 /[1-9][0-9]*[iu]?/]: s#92
[#496 '!']: s#68
[#496 '&']: s#71
[#496 '(']: s#83
[#496 '*']: s#70
[#496 '-']: s#67
[#496 '@']: s#35
[#496 'bitcast']: s#77
[#496 'false']: s#90
[#496 'true']: s#89
[#496 '~']: s#69
[#496 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#496 /0[fh]/]: s#94
[#496 /0[iu]?/]: s#91
[#496 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#496 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#496 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#496 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#496 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#496 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#496 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#496 /[1-9][0-9]*[fh]/]: s#95
[#496 /[1-9][0-9]*[iu]?/]: s#92
[#497 'break']: r#71
[#497 'continue']: r#71
[#497 'f16']: r#71
[#497 'texture_multisampled_2d']: r#71
[#498 'break']: r#72
[#498 'continue']: r#72
[#498 'f16']: r#72
[#498 'texture_multisampled_2d']: r#72
[#499 'break']: r#73
[#499 'continue']: r#73
[#499 'f16']: r#73
[#499 'texture_multisampled_2d']: r#73
[#500 '{']: s#137
[#501 'case']: s#560
[#501 'default']: s#561
[#502 'continuing']: s#554
[#504 '&']: s#341
[#504 '(']: s#343
[#504 '*']: s#340
[#504 ';']: s#304
[#504 '@']: s#35
[#504 '_']: s#337
[#504 'break']: s#329
[#504 'const']: s#328
[#504 'continue']: s#330
[#504 'discard']: s#315
[#504 'for']: s#323
[#504 'if']: s#334
[#504 'let']: s#327
[#504 'loop']: s#322
[#504 'return']: s#319
[#504 'static_assert']: s#30
[#504 'switch']: s#321
[#504 'var']: s#110
[#504 'while']: s#324
[#504 '{']: s#137
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#505 ')']: s#550
[#506 ';']: s#549
[#511 'break']: r#74
[#511 'continue']: r#74
[#511 'f16']: r#74
[#511 'texture_multisampled_2d']: r#74
[#514 '!']: s#68
[#514 '&']: s#71
[#514 '(']: s#83
[#514 '*']: s#70
[#514 '-']: s#67
[#514 '@']: s#35
[#514 'bitcast']: s#77
[#514 'false']: s#90
[#514 'true']: s#89
[#514 '~']: s#69
[#514 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#514 /0[fh]/]: s#94
[#514 /0[iu]?/]: s#91
[#514 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#514 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#514 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#514 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#514 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#514 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#514 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#514 /[1-9][0-9]*[fh]/]: s#95
[#514 /[1-9][0-9]*[iu]?/]: s#92
[#515 '!']: s#68
[#515 '&']: s#71
[#515 '(']: s#83
[#515 '*']: s#70
[#515 '-']: s#67
[#515 '@']: s#35
[#515 'bitcast']: s#77
[#515 'false']: s#90
[#515 'true']: s#89
[#515 '~']: s#69
[#515 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#515 /0[fh]/]: s#94
[#515 /0[iu]?/]: s#91
[#515 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#515 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#515 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#515 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#515 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#515 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#515 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#515 /[1-9][0-9]*[fh]/]: s#95
[#515 /[1-9][0-9]*[iu]?/]: s#92
[#516 'break']: r#75
[#516 'continue']: r#75
[#516 'f16']: r#75
[#516 'texture_multisampled_2d']: r#75
[#521 ':']: s#546
[#522 ',']: s#545
[#524 ',']: s#525
[#525 '@']: s#35
[#526 '->']: s#541
[#529 '}']: s#539
[#531 'array']: s#299
[#531 'atomic']: s#155
[#531 'bool']: s#148
[#531 'f16']: s#150
[#531 'f32']: s#149
[#531 'i32']: s#151
[#531 'mat2x2']: s#160
[#531 'mat2x3']: s#161
[#531 'mat2x4']: s#162
[#531 'mat3x2']: s#163
[#531 'mat3x3']: s#164
[#531 'mat3x4']: s#165
[#531 'mat4x2']: s#166
[#531 'mat4x3']: s#167
[#531 'mat4x4']: s#168
[#531 'ptr']: s#153
[#531 'sampler']: s#174
[#531 'sampler_comparison']: s#175
[#531 'texture_1d']: s#181
[#531 'texture_2d']: s#182
[#531 'texture_2d_array']: s#183
[#531 'texture_3d']: s#184
[#531 'texture_cube']: s#185
[#531 'texture_cube_array']: s#186
[#531 'texture_depth_2d']: s#176
[#531 'texture_depth_2d_array']: s#177
[#531 'texture_depth_cube']: s#178
[#531 'texture_depth_cube_array']: s#179
[#531 'texture_depth_multisampled_2d']: s#180
[#531 'texture_multisampled_2d']: s#187
[#531 'texture_storage_1d']: s#188
[#531 'texture_storage_2d']: s#189
[#531 'texture_storage_2d_array']: s#190
[#531 'texture_storage_3d']: s#191
[#531 'u32']: s#152
[#531 'vec2']: s#157
[#531 'vec3']: s#158
[#531 'vec4']: s#159
[#531 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#536 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#76
[#537 'f16']: r#77
[#537 'texture_multisampled_2d']: r#77
[#539 EndOfText]: r#78
[#541 '@']: s#35
[#546 'array']: s#299
[#546 'atomic']: s#155
[#546 'bool']: s#148
[#546 'f16']: s#150
[#546 'f32']: s#149
[#546 'i32']: s#151
[#546 'mat2x2']: s#160
[#546 'mat2x3']: s#161
[#546 'mat2x4']: s#162
[#546 'mat3x2']: s#163
[#546 'mat3x3']: s#164
[#546 'mat3x4']: s#165
[#546 'mat4x2']: s#166
[#546 'mat4x3']: s#167
[#546 'mat4x4']: s#168
[#546 'ptr']: s#153
[#546 'sampler']: s#174
[#546 'sampler_comparison']: s#175
[#546 'texture_1d']: s#181
[#546 'texture_2d']: s#182
[#546 'texture_2d_array']: s#183
[#546 'texture_3d']: s#184
[#546 'texture_cube']: s#185
[#546 'texture_cube_array']: s#186
[#546 'texture_depth_2d']: s#176
[#546 'texture_depth_2d_array']: s#177
[#546 'texture_depth_cube']: s#178
[#546 'texture_depth_cube_array']: s#179
[#546 'texture_depth_multisampled_2d']: s#180
[#546 'texture_multisampled_2d']: s#187
[#546 'texture_storage_1d']: s#188
[#546 'texture_storage_2d']: s#189
[#546 'texture_storage_2d_array']: s#190
[#546 'texture_storage_3d']: s#191
[#546 'u32']: s#152
[#546 'vec2']: s#157
[#546 'vec3']: s#158
[#546 'vec4']: s#159
[#546 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#549 '!']: s#68
[#549 '&']: s#71
[#549 '(']: s#83
[#549 '*']: s#70
[#549 '-']: s#67
[#549 '@']: s#35
[#549 'bitcast']: s#77
[#549 'false']: s#90
[#549 'true']: s#89
[#549 '~']: s#69
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#549 /0[fh]/]: s#94
[#549 /0[iu]?/]: s#91
[#549 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#549 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#549 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#549 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#549 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#549 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#549 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#549 /[1-9][0-9]*[fh]/]: s#95
[#549 /[1-9][0-9]*[iu]?/]: s#92
[#550 '{']: s#137
[#552 '}']: s#593
[#554 '{']: s#592
[#555 '}']: s#590
[#557 'case']: s#560
[#557 'default']: s#561
[#560 '!']: s#68
[#560 '&']: s#71
[#560 '(']: s#83
[#560 '*']: s#70
[#560 '-']: s#67
[#560 '@']: s#35
[#560 'bitcast']: s#77
[#560 'default']: s#587
[#560 'false']: s#90
[#560 'true']: s#89
[#560 '~']: s#69
[#560 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#560 /0[fh]/]: s#94
[#560 /0[iu]?/]: s#91
[#560 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#560 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#560 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#560 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#560 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#560 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#560 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#560 /[1-9][0-9]*[fh]/]: s#95
[#560 /[1-9][0-9]*[iu]?/]: s#92
[#561 ':']: s#584
[#562 'break']: r#79
[#562 'continue']: r#79
[#562 'f16']: r#79
[#562 'texture_multisampled_2d']: r#79
[#563 '{']: s#137
[#569 '+']: s#208
[#569 '-']: s#209
[#573 ',']: s#581
[#574 '>']: s#579
[#575 'f16']: r#80
[#575 'texture_multisampled_2d']: r#80
[#576 '!']: s#68
[#576 '&']: s#71
[#576 '(']: s#83
[#576 '*']: s#70
[#576 '-']: s#67
[#576 '@']: s#35
[#576 'bitcast']: s#77
[#576 'false']: s#90
[#576 'true']: s#89
[#576 '~']: s#69
[#576 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#576 /0[fh]/]: s#94
[#576 /0[iu]?/]: s#91
[#576 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#576 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#576 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#576 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#576 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#576 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#576 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#576 /[1-9][0-9]*[fh]/]: s#95
[#576 /[1-9][0-9]*[iu]?/]: s#92
[#577 'f16']: r#81
[#577 'texture_multisampled_2d']: r#81
[#578 ',']: s#366
[#580 '>']: s#615
[#581 'read']: s#533
[#581 'read_write']: s#535
[#581 'write']: s#534
[#582 'break']: r#82
[#582 'continue']: r#82
[#582 'f16']: r#82
[#582 'texture_multisampled_2d']: r#82
[#583 '{']: s#137
[#585 ':']: s#612
[#586 ',']: s#610
[#590 'break']: r#83
[#590 'continue']: r#83
[#590 'f16']: r#83
[#590 'texture_multisampled_2d']: r#83
[#592 '&']: s#341
[#592 '(']: s#343
[#592 '*']: s#340
[#592 ';']: s#304
[#592 '@']: s#35
[#592 '_']: s#337
[#592 'break']: s#329
[#592 'const']: s#328
[#592 'continue']: s#330
[#592 'discard']: s#315
[#592 'for']: s#323
[#592 'if']: s#334
[#592 'let']: s#327
[#592 'loop']: s#322
[#592 'return']: s#319
[#592 'static_assert']: s#30
[#592 'switch']: s#321
[#592 'var']: s#110
[#592 'while']: s#324
[#592 '{']: s#137
[#592 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#593 'break']: r#84
[#593 'continue']: r#84
[#593 'f16']: r#84
[#593 'texture_multisampled_2d']: r#84
[#594 'break']: r#85
[#594 'continue']: r#85
[#594 'f16']: r#85
[#594 'texture_multisampled_2d']: r#85
[#595 ';']: s#603
[#598 'array']: s#299
[#598 'atomic']: s#155
[#598 'bool']: s#148
[#598 'f16']: s#150
[#598 'f32']: s#149
[#598 'i32']: s#151
[#598 'mat2x2']: s#160
[#598 'mat2x3']: s#161
[#598 'mat2x4']: s#162
[#598 'mat3x2']: s#163
[#598 'mat3x3']: s#164
[#598 'mat3x4']: s#165
[#598 'mat4x2']: s#166
[#598 'mat4x3']: s#167
[#598 'mat4x4']: s#168
[#598 'ptr']: s#153
[#598 'sampler']: s#174
[#598 'sampler_comparison']: s#175
[#598 'texture_1d']: s#181
[#598 'texture_2d']: s#182
[#598 'texture_2d_array']: s#183
[#598 'texture_3d']: s#184
[#598 'texture_cube']: s#185
[#598 'texture_cube_array']: s#186
[#598 'texture_depth_2d']: s#176
[#598 'texture_depth_2d_array']: s#177
[#598 'texture_depth_cube']: s#178
[#598 'texture_depth_cube_array']: s#179
[#598 'texture_depth_multisampled_2d']: s#180
[#598 'texture_multisampled_2d']: s#187
[#598 'texture_storage_1d']: s#188
[#598 'texture_storage_2d']: s#189
[#598 'texture_storage_2d_array']: s#190
[#598 'texture_storage_3d']: s#191
[#598 'u32']: s#152
[#598 'vec2']: s#157
[#598 'vec3']: s#158
[#598 'vec4']: s#159
[#598 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#599 'f16']: r#86
[#599 'texture_multisampled_2d']: r#86
[#600 '@']: s#35
[#601 'f16']: r#87
[#601 'texture_multisampled_2d']: r#87
[#603 '&']: s#341
[#603 '(']: s#343
[#603 '*']: s#340
[#603 '@']: s#35
[#603 '_']: s#337
[#603 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#604 'break']: s#625
[#605 'break']: r#88
[#606 '&']: s#341
[#606 '(']: s#343
[#606 '*']: s#340
[#606 ';']: s#304
[#606 '@']: s#35
[#606 '_']: s#337
[#606 'break']: s#329
[#606 'const']: s#328
[#606 'continue']: s#330
[#606 'discard']: s#315
[#606 'for']: s#323
[#606 'if']: s#334
[#606 'let']: s#327
[#606 'loop']: s#322
[#606 'return']: s#319
[#606 'static_assert']: s#30
[#606 'switch']: s#321
[#606 'var']: s#110
[#606 'while']: s#324
[#606 '{']: s#137
[#606 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#607 ',']: s#621
[#609 ',']: s#610
[#610 '!']: s#68
[#610 '&']: s#71
[#610 '(']: s#83
[#610 '*']: s#70
[#610 '-']: s#67
[#610 '@']: s#35
[#610 'bitcast']: s#77
[#610 'default']: s#587
[#610 'false']: s#90
[#610 'true']: s#89
[#610 '~']: s#69
[#610 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#610 /0[fh]/]: s#94
[#610 /0[iu]?/]: s#91
[#610 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#610 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#610 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#610 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#610 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#610 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#610 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#610 /[1-9][0-9]*[fh]/]: s#95
[#610 /[1-9][0-9]*[iu]?/]: s#92
[#611 '{']: s#137
[#616 'f16']: r#89
[#616 'texture_multisampled_2d']: r#89
[#622 'break']: r#90
[#623 '}']: s#631
[#625 'if']: s#630
[#630 '!']: s#68
[#630 '&']: s#71
[#630 '(']: s#83
[#630 '*']: s#70
[#630 '-']: s#67
[#630 '@']: s#35
[#630 'bitcast']: s#77
[#630 'false']: s#90
[#630 'true']: s#89
[#630 '~']: s#69
[#630 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#630 /0[fh]/]: s#94
[#630 /0[iu]?/]: s#91
[#630 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#99
[#630 /0[xX][0-9a-fA-F]+[iu]?/]: s#93
[#630 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#101
[#630 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#100
[#630 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#96
[#630 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#98
[#630 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#97
[#630 /[1-9][0-9]*[fh]/]: s#95
[#630 /[1-9][0-9]*[iu]?/]: s#92
[#632 ';']: s#633

=Goto:
[#0 diagnostic_directive]: #5
[#0 enable_directive]: #6
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #34
[#2 function_decl]: #22
[#2 function_decl/0.0]: #29
[#2 function_decl/0.0/0]: #33
[#2 global_constant_decl]: #19
[#2 global_constant_decl/1.0]: #26
[#2 global_constant_decl/1.0/0]: #32
[#2 global_decl]: #16
[#2 global_variable_decl]: #18
[#2 global_variable_decl/0.0]: #24
[#2 global_variable_decl/0.0/0]: #31
[#2 static_assert_statement]: #23
[#2 struct_decl]: #21
[#2 translation_unit/0.1]: #14
[#2 translation_unit/0.1/0]: #15
[#2 type_alias_decl]: #20
[#4 diagnostic_directive]: #5
[#4 enable_directive]: #6
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #13
[#7 diagnostic_control]: #11
[#8 extension_name]: #9
[#12 severity_control_name]: #116
[#16 attribute]: #34
[#16 function_decl]: #22
[#16 function_decl/0.0]: #29
[#16 function_decl/0.0/0]: #33
[#16 global_constant_decl]: #19
[#16 global_constant_decl/1.0]: #26
[#16 global_constant_decl/1.0/0]: #32
[#16 global_decl]: #16
[#16 global_variable_decl]: #18
[#16 global_variable_decl/0.0]: #24
[#16 global_variable_decl/0.0/0]: #31
[#16 static_assert_statement]: #23
[#16 struct_decl]: #21
[#16 translation_unit/0.1/0]: #115
[#16 type_alias_decl]: #20
[#24 variable_decl]: #109
[#25 ident]: #108
[#25 optionally_typed_ident]: #107
[#27 ident]: #105
[#28 ident]: #104
[#29 function_header]: #102
[#30 additive_expression]: #63
[#30 attribute]: #84
[#30 binary_and_expression]: #60
[#30 binary_or_expression]: #61
[#30 binary_xor_expression]: #62
[#30 bitwise_expression]: #58
[#30 bool_literal]: #82
[#30 decimal_float_literal]: #87
[#30 decimal_int_literal]: #85
[#30 expression]: #54
[#30 float_literal]: #81
[#30 hex_float_literal]: #88
[#30 hex_int_literal]: #86
[#30 ident]: #73
[#30 int_literal]: #80
[#30 literal]: #75
[#30 multiplicative_expression]: #65
[#30 paren_expression]: #76
[#30 primary_expression]: #72
[#30 primary_expression/1.0]: #74
[#30 primary_expression/1.0/0]: #79
[#30 relational_expression]: #55
[#30 shift_expression]: #59
[#30 short_circuit_and_expression]: #57
[#30 short_circuit_or_expression]: #56
[#30 singular_expression]: #66
[#30 unary_expression]: #64
[#34 attribute]: #34
[#34 function_decl/0.0/0]: #53
[#34 global_constant_decl/1.0/0]: #52
[#34 global_variable_decl/0.0/0]: #51
[#40 diagnostic_control]: #227
[#63 additive_operator]: #207
[#65 multiplicative_operator]: #201
[#67 attribute]: #84
[#67 bool_literal]: #82
[#67 decimal_float_literal]: #87
[#67 decimal_int_literal]: #85
[#67 float_literal]: #81
[#67 hex_float_literal]: #88
[#67 hex_int_literal]: #86
[#67 ident]: #73
[#67 int_literal]: #80
[#67 literal]: #75
[#67 paren_expression]: #76
[#67 primary_expression]: #72
[#67 primary_expression/1.0]: #74
[#67 primary_expression/1.0/0]: #79
[#67 singular_expression]: #66
[#67 unary_expression]: #200
[#68 attribute]: #84
[#68 bool_literal]: #82
[#68 decimal_float_literal]: #87
[#68 decimal_int_literal]: #85
[#68 float_literal]: #81
[#68 hex_float_literal]: #88
[#68 hex_int_literal]: #86
[#68 ident]: #73
[#68 int_literal]: #80
[#68 literal]: #75
[#68 paren_expression]: #76
[#68 primary_expression]: #72
[#68 primary_expression/1.0]: #74
[#68 primary_expression/1.0/0]: #79
[#68 singular_expression]: #66
[#68 unary_expression]: #199
[#69 attribute]: #84
[#69 bool_literal]: #82
[#69 decimal_float_literal]: #87
[#69 decimal_int_literal]: #85
[#69 float_literal]: #81
[#69 hex_float_literal]: #88
[#69 hex_int_literal]: #86
[#69 ident]: #73
[#69 int_literal]: #80
[#69 literal]: #75
[#69 paren_expression]: #76
[#69 primary_expression]: #72
[#69 primary_expression/1.0]: #74
[#69 primary_expression/1.0/0]: #79
[#69 singular_expression]: #66
[#69 unary_expression]: #198
[#70 attribute]: #84
[#70 bool_literal]: #82
[#70 decimal_float_literal]: #87
[#70 decimal_int_literal]: #85
[#70 float_literal]: #81
[#70 hex_float_literal]: #88
[#70 hex_int_literal]: #86
[#70 ident]: #73
[#70 int_literal]: #80
[#70 literal]: #75
[#70 paren_expression]: #76
[#70 primary_expression]: #72
[#70 primary_expression/1.0]: #74
[#70 primary_expression/1.0/0]: #79
[#70 singular_expression]: #66
[#70 unary_expression]: #197
[#71 attribute]: #84
[#71 bool_literal]: #82
[#71 decimal_float_literal]: #87
[#71 decimal_int_literal]: #85
[#71 float_literal]: #81
[#71 hex_float_literal]: #88
[#71 hex_int_literal]: #86
[#71 ident]: #73
[#71 int_literal]: #80
[#71 literal]: #75
[#71 paren_expression]: #76
[#71 primary_expression]: #72
[#71 primary_expression/1.0]: #74
[#71 primary_expression/1.0/0]: #79
[#71 singular_expression]: #66
[#71 unary_expression]: #196
[#72 component_or_swizzle_specifier]: #193
[#72 singular_expression/0.1]: #192
[#74 array_type_specifier]: #154
[#74 call_expression]: #141
[#74 callable]: #142
[#74 depth_texture_type]: #170
[#74 ident]: #143
[#74 mat_prefix]: #146
[#74 multisampled_texture_type]: #172
[#74 sampled_texture_type]: #171
[#74 sampler_type]: #169
[#74 storage_texture_type]: #173
[#74 texture_and_sampler_types]: #156
[#74 type_specifier_without_ident]: #144
[#74 vec_prefix]: #145
[#83 additive_expression]: #63
[#83 attribute]: #84
[#83 binary_and_expression]: #60
[#83 binary_or_expression]: #61
[#83 binary_xor_expression]: #62
[#83 bitwise_expression]: #58
[#83 bool_literal]: #82
[#83 decimal_float_literal]: #87
[#83 decimal_int_literal]: #85
[#83 expression]: #139
[#83 float_literal]: #81
[#83 hex_float_literal]: #88
[#83 hex_int_literal]: #86
[#83 ident]: #73
[#83 int_literal]: #80
[#83 literal]: #75
[#83 multiplicative_expression]: #65
[#83 paren_expression]: #76
[#83 primary_expression]: #72
[#83 primary_expression/1.0]: #74
[#83 primary_expression/1.0/0]: #79
[#83 relational_expression]: #55
[#83 shift_expression]: #59
[#83 short_circuit_and_expression]: #57
[#83 short_circuit_or_expression]: #56
[#83 singular_expression]: #66
[#83 unary_expression]: #64
[#84 attribute]: #84
[#84 primary_expression/1.0/0]: #138
[#102 compound_statement]: #136
[#103 ident]: #135
[#104 struct_body_decl]: #133
[#106 ident]: #108
[#106 optionally_typed_ident]: #131
[#108 optionally_typed_ident/0.1]: #128
[#109 global_variable_decl/0.2]: #126
[#110 variable_decl/0.1]: #123
[#110 variable_qualifier]: #124
[#122 diagnostic_rule_name]: #362
[#123 ident]: #108
[#123 optionally_typed_ident]: #361
[#125 address_space]: #355
[#127 additive_expression]: #63
[#127 attribute]: #84
[#127 binary_and_expression]: #60
[#127 binary_or_expression]: #61
[#127 binary_xor_expression]: #62
[#127 bitwise_expression]: #58
[#127 bool_literal]: #82
[#127 decimal_float_literal]: #87
[#127 decimal_int_literal]: #85
[#127 expression]: #354
[#127 float_literal]: #81
[#127 hex_float_literal]: #88
[#127 hex_int_literal]: #86
[#127 ident]: #73
[#127 int_literal]: #80
[#127 literal]: #75
[#127 multiplicative_expression]: #65
[#127 paren_expression]: #76
[#127 primary_expression]: #72
[#127 primary_expression/1.0]: #74
[#127 primary_expression/1.0/0]: #79
[#127 relational_expression]: #55
[#127 shift_expression]: #59
[#127 short_circuit_and_expression]: #57
[#127 short_circuit_or_expression]: #56
[#127 singular_expression]: #66
[#127 unary_expression]: #64
[#129 array_type_specifier]: #154
[#129 depth_texture_type]: #170
[#129 ident]: #295
[#129 mat_prefix]: #298
[#129 multisampled_texture_type]: #172
[#129 sampled_texture_type]: #171
[#129 sampler_type]: #169
[#129 storage_texture_type]: #173
[#129 texture_and_sampler_types]: #156
[#129 type_specifier]: #353
[#129 type_specifier_without_ident]: #296
[#129 vec_prefix]: #297
[#130 additive_expression]: #63
[#130 attribute]: #84
[#130 binary_and_expression]: #60
[#130 binary_or_expression]: #61
[#130 binary_xor_expression]: #62
[#130 bitwise_expression]: #58
[#130 bool_literal]: #82
[#130 decimal_float_literal]: #87
[#130 decimal_int_literal]: #85
[#130 expression]: #352
[#130 float_literal]: #81
[#130 hex_float_literal]: #88
[#130 hex_int_literal]: #86
[#130 ident]: #73
[#130 int_literal]: #80
[#130 literal]: #75
[#130 multiplicative_expression]: #65
[#130 paren_expression]: #76
[#130 primary_expression]: #72
[#130 primary_expression/1.0]: #74
[#130 primary_expression/1.0/0]: #79
[#130 relational_expression]: #55
[#130 shift_expression]: #59
[#130 short_circuit_and_expression]: #57
[#130 short_circuit_or_expression]: #56
[#130 singular_expression]: #66
[#130 unary_expression]: #64
[#131 global_constant_decl/1.3]: #350
[#132 array_type_specifier]: #154
[#132 depth_texture_type]: #170
[#132 ident]: #295
[#132 mat_prefix]: #298
[#132 multisampled_texture_type]: #172
[#132 sampled_texture_type]: #171
[#132 sampler_type]: #169
[#132 storage_texture_type]: #173
[#132 texture_and_sampler_types]: #156
[#132 type_specifier]: #349
[#132 type_specifier_without_ident]: #296
[#132 vec_prefix]: #297
[#134 attribute]: #348
[#134 struct_member]: #345
[#134 struct_member/0.0]: #346
[#134 struct_member/0.0/0]: #347
[#137 assignment_statement]: #331
[#137 attribute]: #338
[#137 break_statement]: #313
[#137 compound_statement]: #317
[#137 compound_statement/0.1]: #301
[#137 compound_statement/0.1/0]: #302
[#137 continue_statement]: #314
[#137 core_lhs_expression]: #339
[#137 decrement_statement]: #333
[#137 for_statement]: #309
[#137 func_call_statement]: #311
[#137 func_call_statement/0.0]: #325
[#137 func_call_statement/0.0/0]: #335
[#137 ident]: #342
[#137 if_clause]: #320
[#137 if_statement]: #306
[#137 increment_statement]: #332
[#137 lhs_expression]: #336
[#137 loop_statement]: #308
[#137 return_statement]: #305
[#137 statement]: #303
[#137 static_assert_statement]: #318
[#137 switch_statement]: #307
[#137 variable_decl]: #326
[#137 variable_statement]: #312
[#137 variable_updating_statement]: #316
[#137 while_statement]: #310
[#140 array_type_specifier]: #154
[#140 depth_texture_type]: #170
[#140 ident]: #295
[#140 mat_prefix]: #298
[#140 multisampled_texture_type]: #172
[#140 sampled_texture_type]: #171
[#140 sampler_type]: #169
[#140 storage_texture_type]: #173
[#140 texture_and_sampler_types]: #156
[#140 type_specifier]: #294
[#140 type_specifier_without_ident]: #296
[#140 vec_prefix]: #297
[#142 argument_expression_list]: #292
[#194 additive_expression]: #63
[#194 attribute]: #84
[#194 binary_and_expression]: #60
[#194 binary_or_expression]: #61
[#194 binary_xor_expression]: #62
[#194 bitwise_expression]: #58
[#194 bool_literal]: #82
[#194 decimal_float_literal]: #87
[#194 decimal_int_literal]: #85
[#194 expression]: #283
[#194 float_literal]: #81
[#194 hex_float_literal]: #88
[#194 hex_int_literal]: #86
[#194 ident]: #73
[#194 int_literal]: #80
[#194 literal]: #75
[#194 multiplicative_expression]: #65
[#194 paren_expression]: #76
[#194 primary_expression]: #72
[#194 primary_expression/1.0]: #74
[#194 primary_expression/1.0/0]: #79
[#194 relational_expression]: #55
[#194 shift_expression]: #59
[#194 short_circuit_and_expression]: #57
[#194 short_circuit_or_expression]: #56
[#194 singular_expression]: #66
[#194 unary_expression]: #64
[#195 member_ident]: #272
[#195 swizzle_name]: #273
[#201 attribute]: #84
[#201 bool_literal]: #82
[#201 decimal_float_literal]: #87
[#201 decimal_int_literal]: #85
[#201 float_literal]: #81
[#201 hex_float_literal]: #88
[#201 hex_int_literal]: #86
[#201 ident]: #73
[#201 int_literal]: #80
[#201 literal]: #75
[#201 paren_expression]: #76
[#201 primary_expression]: #72
[#201 primary_expression/1.0]: #74
[#201 primary_expression/1.0/0]: #79
[#201 singular_expression]: #66
[#201 unary_expression]: #271
[#205 attribute]: #84
[#205 bool_literal]: #82
[#205 decimal_float_literal]: #87
[#205 decimal_int_literal]: #85
[#205 float_literal]: #81
[#205 hex_float_literal]: #88
[#205 hex_int_literal]: #86
[#205 ident]: #73
[#205 int_literal]: #80
[#205 literal]: #75
[#205 paren_expression]: #76
[#205 primary_expression]: #72
[#205 primary_expression/1.0]: #74
[#205 primary_expression/1.0/0]: #79
[#205 singular_expression]: #66
[#205 unary_expression]: #270
[#206 attribute]: #84
[#206 bool_literal]: #82
[#206 decimal_float_literal]: #87
[#206 decimal_int_literal]: #85
[#206 float_literal]: #81
[#206 hex_float_literal]: #88
[#206 hex_int_literal]: #86
[#206 ident]: #73
[#206 int_literal]: #80
[#206 literal]: #75
[#206 paren_expression]: #76
[#206 primary_expression]: #72
[#206 primary_expression/1.0]: #74
[#206 primary_expression/1.0/0]: #79
[#206 singular_expression]: #66
[#206 unary_expression]: #269
[#207 attribute]: #84
[#207 bool_literal]: #82
[#207 decimal_float_literal]: #87
[#207 decimal_int_literal]: #85
[#207 float_literal]: #81
[#207 hex_float_literal]: #88
[#207 hex_int_literal]: #86
[#207 ident]: #73
[#207 int_literal]: #80
[#207 literal]: #75
[#207 multiplicative_expression]: #267
[#207 paren_expression]: #76
[#207 primary_expression]: #72
[#207 primary_expression/1.0]: #74
[#207 primary_expression/1.0/0]: #79
[#207 singular_expression]: #66
[#207 unary_expression]: #268
[#210 attribute]: #84
[#210 bool_literal]: #82
[#210 decimal_float_literal]: #87
[#210 decimal_int_literal]: #85
[#210 float_literal]: #81
[#210 hex_float_literal]: #88
[#210 hex_int_literal]: #86
[#210 ident]: #73
[#210 int_literal]: #80
[#210 literal]: #75
[#210 paren_expression]: #76
[#210 primary_expression]: #72
[#210 primary_expression/1.0]: #74
[#210 primary_expression/1.0/0]: #79
[#210 singular_expression]: #66
[#210 unary_expression]: #266
[#211 attribute]: #84
[#211 bool_literal]: #82
[#211 decimal_float_literal]: #87
[#211 decimal_int_literal]: #85
[#211 float_literal]: #81
[#211 hex_float_literal]: #88
[#211 hex_int_literal]: #86
[#211 ident]: #73
[#211 int_literal]: #80
[#211 literal]: #75
[#211 paren_expression]: #76
[#211 primary_expression]: #72
[#211 primary_expression/1.0]: #74
[#211 primary_expression/1.0/0]: #79
[#211 singular_expression]: #66
[#211 unary_expression]: #265
[#212 attribute]: #84
[#212 bool_literal]: #82
[#212 decimal_float_literal]: #87
[#212 decimal_int_literal]: #85
[#212 float_literal]: #81
[#212 hex_float_literal]: #88
[#212 hex_int_literal]: #86
[#212 ident]: #73
[#212 int_literal]: #80
[#212 literal]: #75
[#212 paren_expression]: #76
[#212 primary_expression]: #72
[#212 primary_expression/1.0]: #74
[#212 primary_expression/1.0/0]: #79
[#212 singular_expression]: #66
[#212 unary_expression]: #264
[#213 additive_expression]: #63
[#213 attribute]: #84
[#213 bool_literal]: #82
[#213 decimal_float_literal]: #87
[#213 decimal_int_literal]: #85
[#213 float_literal]: #81
[#213 hex_float_literal]: #88
[#213 hex_int_literal]: #86
[#213 ident]: #73
[#213 int_literal]: #80
[#213 literal]: #75
[#213 multiplicative_expression]: #65
[#213 paren_expression]: #76
[#213 primary_expression]: #72
[#213 primary_expression/1.0]: #74
[#213 primary_expression/1.0/0]: #79
[#213 shift_expression]: #263
[#213 singular_expression]: #66
[#213 unary_expression]: #256
[#214 additive_expression]: #63
[#214 attribute]: #84
[#214 bool_literal]: #82
[#214 decimal_float_literal]: #87
[#214 decimal_int_literal]: #85
[#214 float_literal]: #81
[#214 hex_float_literal]: #88
[#214 hex_int_literal]: #86
[#214 ident]: #73
[#214 int_literal]: #80
[#214 literal]: #75
[#214 multiplicative_expression]: #65
[#214 paren_expression]: #76
[#214 primary_expression]: #72
[#214 primary_expression/1.0]: #74
[#214 primary_expression/1.0/0]: #79
[#214 shift_expression]: #262
[#214 singular_expression]: #66
[#214 unary_expression]: #256
[#215 additive_expression]: #63
[#215 attribute]: #84
[#215 bool_literal]: #82
[#215 decimal_float_literal]: #87
[#215 decimal_int_literal]: #85
[#215 float_literal]: #81
[#215 hex_float_literal]: #88
[#215 hex_int_literal]: #86
[#215 ident]: #73
[#215 int_literal]: #80
[#215 literal]: #75
[#215 multiplicative_expression]: #65
[#215 paren_expression]: #76
[#215 primary_expression]: #72
[#215 primary_expression/1.0]: #74
[#215 primary_expression/1.0/0]: #79
[#215 shift_expression]: #261
[#215 singular_expression]: #66
[#215 unary_expression]: #256
[#216 additive_expression]: #63
[#216 attribute]: #84
[#216 bool_literal]: #82
[#216 decimal_float_literal]: #87
[#216 decimal_int_literal]: #85
[#216 float_literal]: #81
[#216 hex_float_literal]: #88
[#216 hex_int_literal]: #86
[#216 ident]: #73
[#216 int_literal]: #80
[#216 literal]: #75
[#216 multiplicative_expression]: #65
[#216 paren_expression]: #76
[#216 primary_expression]: #72
[#216 primary_expression/1.0]: #74
[#216 primary_expression/1.0/0]: #79
[#216 shift_expression]: #260
[#216 singular_expression]: #66
[#216 unary_expression]: #256
[#217 additive_expression]: #63
[#217 attribute]: #84
[#217 bool_literal]: #82
[#217 decimal_float_literal]: #87
[#217 decimal_int_literal]: #85
[#217 float_literal]: #81
[#217 hex_float_literal]: #88
[#217 hex_int_literal]: #86
[#217 ident]: #73
[#217 int_literal]: #80
[#217 literal]: #75
[#217 multiplicative_expression]: #65
[#217 paren_expression]: #76
[#217 primary_expression]: #72
[#217 primary_expression/1.0]: #74
[#217 primary_expression/1.0/0]: #79
[#217 shift_expression]: #259
[#217 singular_expression]: #66
[#217 unary_expression]: #256
[#218 additive_expression]: #63
[#218 attribute]: #84
[#218 bool_literal]: #82
[#218 decimal_float_literal]: #87
[#218 decimal_int_literal]: #85
[#218 float_literal]: #81
[#218 hex_float_literal]: #88
[#218 hex_int_literal]: #86
[#218 ident]: #73
[#218 int_literal]: #80
[#218 literal]: #75
[#218 multiplicative_expression]: #65
[#218 paren_expression]: #76
[#218 primary_expression]: #72
[#218 primary_expression/1.0]: #74
[#218 primary_expression/1.0/0]: #79
[#218 shift_expression]: #258
[#218 singular_expression]: #66
[#218 unary_expression]: #256
[#219 additive_expression]: #63
[#219 attribute]: #84
[#219 bool_literal]: #82
[#219 decimal_float_literal]: #87
[#219 decimal_int_literal]: #85
[#219 float_literal]: #81
[#219 hex_float_literal]: #88
[#219 hex_int_literal]: #86
[#219 ident]: #73
[#219 int_literal]: #80
[#219 literal]: #75
[#219 multiplicative_expression]: #65
[#219 paren_expression]: #76
[#219 primary_expression]: #72
[#219 primary_expression/1.0]: #74
[#219 primary_expression/1.0/0]: #79
[#219 relational_expression]: #257
[#219 shift_expression]: #59
[#219 singular_expression]: #66
[#219 unary_expression]: #256
[#220 additive_expression]: #63
[#220 attribute]: #84
[#220 bool_literal]: #82
[#220 decimal_float_literal]: #87
[#220 decimal_int_literal]: #85
[#220 float_literal]: #81
[#220 hex_float_literal]: #88
[#220 hex_int_literal]: #86
[#220 ident]: #73
[#220 int_literal]: #80
[#220 literal]: #75
[#220 multiplicative_expression]: #65
[#220 paren_expression]: #76
[#220 primary_expression]: #72
[#220 primary_expression/1.0]: #74
[#220 primary_expression/1.0/0]: #79
[#220 relational_expression]: #255
[#220 shift_expression]: #59
[#220 singular_expression]: #66
[#220 unary_expression]: #256
[#221 additive_expression]: #63
[#221 attribute]: #84
[#221 binary_and_expression]: #60
[#221 binary_or_expression]: #61
[#221 binary_xor_expression]: #62
[#221 bitwise_expression]: #58
[#221 bool_literal]: #82
[#221 decimal_float_literal]: #87
[#221 decimal_int_literal]: #85
[#221 expression]: #254
[#221 float_literal]: #81
[#221 hex_float_literal]: #88
[#221 hex_int_literal]: #86
[#221 ident]: #73
[#221 int_literal]: #80
[#221 literal]: #75
[#221 multiplicative_expression]: #65
[#221 paren_expression]: #76
[#221 primary_expression]: #72
[#221 primary_expression/1.0]: #74
[#221 primary_expression/1.0/0]: #79
[#221 relational_expression]: #55
[#221 shift_expression]: #59
[#221 short_circuit_and_expression]: #57
[#221 short_circuit_or_expression]: #56
[#221 singular_expression]: #66
[#221 unary_expression]: #64
[#222 additive_expression]: #63
[#222 attribute]: #84
[#222 binary_and_expression]: #60
[#222 binary_or_expression]: #61
[#222 binary_xor_expression]: #62
[#222 bitwise_expression]: #58
[#222 bool_literal]: #82
[#222 decimal_float_literal]: #87
[#222 decimal_int_literal]: #85
[#222 expression]: #253
[#222 float_literal]: #81
[#222 hex_float_literal]: #88
[#222 hex_int_literal]: #86
[#222 ident]: #73
[#222 int_literal]: #80
[#222 literal]: #75
[#222 multiplicative_expression]: #65
[#222 paren_expression]: #76
[#222 primary_expression]: #72
[#222 primary_expression/1.0]: #74
[#222 primary_expression/1.0/0]: #79
[#222 relational_expression]: #55
[#222 shift_expression]: #59
[#222 short_circuit_and_expression]: #57
[#222 short_circuit_or_expression]: #56
[#222 singular_expression]: #66
[#222 unary_expression]: #64
[#223 additive_expression]: #63
[#223 attribute]: #84
[#223 binary_and_expression]: #60
[#223 binary_or_expression]: #61
[#223 binary_xor_expression]: #62
[#223 bitwise_expression]: #58
[#223 bool_literal]: #82
[#223 decimal_float_literal]: #87
[#223 decimal_int_literal]: #85
[#223 expression]: #252
[#223 float_literal]: #81
[#223 hex_float_literal]: #88
[#223 hex_int_literal]: #86
[#223 ident]: #73
[#223 int_literal]: #80
[#223 literal]: #75
[#223 multiplicative_expression]: #65
[#223 paren_expression]: #76
[#223 primary_expression]: #72
[#223 primary_expression/1.0]: #74
[#223 primary_expression/1.0/0]: #79
[#223 relational_expression]: #55
[#223 shift_expression]: #59
[#223 short_circuit_and_expression]: #57
[#223 short_circuit_or_expression]: #56
[#223 singular_expression]: #66
[#223 unary_expression]: #64
[#224 interpolation_type_name]: #248
[#225 additive_expression]: #63
[#225 attribute]: #84
[#225 binary_and_expression]: #60
[#225 binary_or_expression]: #61
[#225 binary_xor_expression]: #62
[#225 bitwise_expression]: #58
[#225 bool_literal]: #82
[#225 decimal_float_literal]: #87
[#225 decimal_int_literal]: #85
[#225 expression]: #247
[#225 float_literal]: #81
[#225 hex_float_literal]: #88
[#225 hex_int_literal]: #86
[#225 ident]: #73
[#225 int_literal]: #80
[#225 literal]: #75
[#225 multiplicative_expression]: #65
[#225 paren_expression]: #76
[#225 primary_expression]: #72
[#225 primary_expression/1.0]: #74
[#225 primary_expression/1.0/0]: #79
[#225 relational_expression]: #55
[#225 shift_expression]: #59
[#225 short_circuit_and_expression]: #57
[#225 short_circuit_or_expression]: #56
[#225 singular_expression]: #66
[#225 unary_expression]: #64
[#226 additive_expression]: #63
[#226 attribute]: #84
[#226 binary_and_expression]: #60
[#226 binary_or_expression]: #61
[#226 binary_xor_expression]: #62
[#226 bitwise_expression]: #58
[#226 bool_literal]: #82
[#226 decimal_float_literal]: #87
[#226 decimal_int_literal]: #85
[#226 expression]: #246
[#226 float_literal]: #81
[#226 hex_float_literal]: #88
[#226 hex_int_literal]: #86
[#226 ident]: #73
[#226 int_literal]: #80
[#226 literal]: #75
[#226 multiplicative_expression]: #65
[#226 paren_expression]: #76
[#226 primary_expression]: #72
[#226 primary_expression/1.0]: #74
[#226 primary_expression/1.0/0]: #79
[#226 relational_expression]: #55
[#226 shift_expression]: #59
[#226 short_circuit_and_expression]: #57
[#226 short_circuit_or_expression]: #56
[#226 singular_expression]: #66
[#226 unary_expression]: #64
[#228 builtin_value_name]: #233
[#229 additive_expression]: #63
[#229 attribute]: #84
[#229 binary_and_expression]: #60
[#229 binary_or_expression]: #61
[#229 binary_xor_expression]: #62
[#229 bitwise_expression]: #58
[#229 bool_literal]: #82
[#229 decimal_float_literal]: #87
[#229 decimal_int_literal]: #85
[#229 expression]: #232
[#229 float_literal]: #81
[#229 hex_float_literal]: #88
[#229 hex_int_literal]: #86
[#229 ident]: #73
[#229 int_literal]: #80
[#229 literal]: #75
[#229 multiplicative_expression]: #65
[#229 paren_expression]: #76
[#229 primary_expression]: #72
[#229 primary_expression/1.0]: #74
[#229 primary_expression/1.0/0]: #79
[#229 relational_expression]: #55
[#229 shift_expression]: #59
[#229 short_circuit_and_expression]: #57
[#229 short_circuit_or_expression]: #56
[#229 singular_expression]: #66
[#229 unary_expression]: #64
[#230 additive_expression]: #63
[#230 attribute]: #84
[#230 binary_and_expression]: #60
[#230 binary_or_expression]: #61
[#230 binary_xor_expression]: #62
[#230 bitwise_expression]: #58
[#230 bool_literal]: #82
[#230 decimal_float_literal]: #87
[#230 decimal_int_literal]: #85
[#230 expression]: #231
[#230 float_literal]: #81
[#230 hex_float_literal]: #88
[#230 hex_int_literal]: #86
[#230 ident]: #73
[#230 int_literal]: #80
[#230 literal]: #75
[#230 multiplicative_expression]: #65
[#230 paren_expression]: #76
[#230 primary_expression]: #72
[#230 primary_expression/1.0]: #74
[#230 primary_expression/1.0/0]: #79
[#230 relational_expression]: #55
[#230 shift_expression]: #59
[#230 short_circuit_and_expression]: #57
[#230 short_circuit_or_expression]: #56
[#230 singular_expression]: #66
[#230 unary_expression]: #64
[#231 attrib_end]: #473
[#231 attrib_end/0.0]: #365
[#232 attrib_end]: #472
[#232 attrib_end/0.0]: #365
[#233 attrib_end]: #471
[#233 attrib_end/0.0]: #365
[#246 attrib_end]: #470
[#246 attrib_end/0.0]: #365
[#247 attrib_end]: #469
[#247 attrib_end/0.0]: #365
[#248 attrib_end]: #467
[#248 attrib_end/0.0]: #365
[#252 attrib_end]: #466
[#252 attrib_end/0.0]: #365
[#253 attrib_end]: #465
[#253 attrib_end/0.0]: #365
[#254 attrib_end]: #463
[#254 attrib_end/0.0]: #365
[#267 multiplicative_operator]: #201
[#272 component_or_swizzle_specifier]: #462
[#272 component_or_swizzle_specifier/1.2]: #461
[#273 component_or_swizzle_specifier]: #460
[#273 component_or_swizzle_specifier/2.2]: #459
[#284 texel_format]: #441
[#285 array_type_specifier]: #154
[#285 depth_texture_type]: #170
[#285 ident]: #295
[#285 mat_prefix]: #298
[#285 multisampled_texture_type]: #172
[#285 sampled_texture_type]: #171
[#285 sampler_type]: #169
[#285 storage_texture_type]: #173
[#285 texture_and_sampler_types]: #156
[#285 type_specifier]: #440
[#285 type_specifier_without_ident]: #296
[#285 vec_prefix]: #297
[#286 array_type_specifier]: #154
[#286 depth_texture_type]: #170
[#286 ident]: #295
[#286 mat_prefix]: #298
[#286 multisampled_texture_type]: #172
[#286 sampled_texture_type]: #171
[#286 sampler_type]: #169
[#286 storage_texture_type]: #173
[#286 texture_and_sampler_types]: #156
[#286 type_specifier]: #439
[#286 type_specifier_without_ident]: #296
[#286 vec_prefix]: #297
[#287 array_type_specifier]: #154
[#287 depth_texture_type]: #170
[#287 ident]: #295
[#287 mat_prefix]: #298
[#287 multisampled_texture_type]: #172
[#287 sampled_texture_type]: #171
[#287 sampler_type]: #169
[#287 storage_texture_type]: #173
[#287 texture_and_sampler_types]: #156
[#287 type_specifier]: #438
[#287 type_specifier_without_ident]: #296
[#287 vec_prefix]: #297
[#288 address_space]: #437
[#289 array_type_specifier]: #154
[#289 depth_texture_type]: #170
[#289 ident]: #295
[#289 mat_prefix]: #298
[#289 multisampled_texture_type]: #172
[#289 sampled_texture_type]: #171
[#289 sampler_type]: #169
[#289 storage_texture_type]: #173
[#289 texture_and_sampler_types]: #156
[#289 type_specifier]: #436
[#289 type_specifier_without_ident]: #296
[#289 vec_prefix]: #297
[#290 array_type_specifier]: #154
[#290 depth_texture_type]: #170
[#290 ident]: #295
[#290 mat_prefix]: #298
[#290 multisampled_texture_type]: #172
[#290 sampled_texture_type]: #171
[#290 sampler_type]: #169
[#290 storage_texture_type]: #173
[#290 texture_and_sampler_types]: #156
[#290 type_specifier]: #435
[#290 type_specifier_without_ident]: #296
[#290 vec_prefix]: #297
[#291 array_type_specifier]: #154
[#291 depth_texture_type]: #170
[#291 ident]: #295
[#291 mat_prefix]: #298
[#291 multisampled_texture_type]: #172
[#291 sampled_texture_type]: #171
[#291 sampler_type]: #169
[#291 storage_texture_type]: #173
[#291 texture_and_sampler_types]: #156
[#291 type_specifier]: #434
[#291 type_specifier_without_ident]: #296
[#291 vec_prefix]: #297
[#293 additive_expression]: #63
[#293 argument_expression_list/0.1]: #431
[#293 attribute]: #84
[#293 binary_and_expression]: #60
[#293 binary_or_expression]: #61
[#293 binary_xor_expression]: #62
[#293 bitwise_expression]: #58
[#293 bool_literal]: #82
[#293 decimal_float_literal]: #87
[#293 decimal_int_literal]: #85
[#293 expression]: #433
[#293 expression_comma_list]: #432
[#293 float_literal]: #81
[#293 hex_float_literal]: #88
[#293 hex_int_literal]: #86
[#293 ident]: #73
[#293 int_literal]: #80
[#293 literal]: #75
[#293 multiplicative_expression]: #65
[#293 paren_expression]: #76
[#293 primary_expression]: #72
[#293 primary_expression/1.0]: #74
[#293 primary_expression/1.0/0]: #79
[#293 relational_expression]: #55
[#293 shift_expression]: #59
[#293 short_circuit_and_expression]: #57
[#293 short_circuit_or_expression]: #56
[#293 singular_expression]: #66
[#293 unary_expression]: #64
[#303 assignment_statement]: #331
[#303 attribute]: #338
[#303 break_statement]: #313
[#303 compound_statement]: #317
[#303 compound_statement/0.1/0]: #428
[#303 continue_statement]: #314
[#303 core_lhs_expression]: #339
[#303 decrement_statement]: #333
[#303 for_statement]: #309
[#303 func_call_statement]: #311
[#303 func_call_statement/0.0]: #325
[#303 func_call_statement/0.0/0]: #335
[#303 ident]: #342
[#303 if_clause]: #320
[#303 if_statement]: #306
[#303 increment_statement]: #332
[#303 lhs_expression]: #336
[#303 loop_statement]: #308
[#303 return_statement]: #305
[#303 statement]: #303
[#303 static_assert_statement]: #318
[#303 switch_statement]: #307
[#303 variable_decl]: #326
[#303 variable_statement]: #312
[#303 variable_updating_statement]: #316
[#303 while_statement]: #310
[#319 additive_expression]: #63
[#319 attribute]: #84
[#319 binary_and_expression]: #60
[#319 binary_or_expression]: #61
[#319 binary_xor_expression]: #62
[#319 bitwise_expression]: #58
[#319 bool_literal]: #82
[#319 decimal_float_literal]: #87
[#319 decimal_int_literal]: #85
[#319 expression]: #419
[#319 float_literal]: #81
[#319 hex_float_literal]: #88
[#319 hex_int_literal]: #86
[#319 ident]: #73
[#319 int_literal]: #80
[#319 literal]: #75
[#319 multiplicative_expression]: #65
[#319 paren_expression]: #76
[#319 primary_expression]: #72
[#319 primary_expression/1.0]: #74
[#319 primary_expression/1.0/0]: #79
[#319 relational_expression]: #55
[#319 return_statement/0.1]: #418
[#319 shift_expression]: #59
[#319 short_circuit_and_expression]: #57
[#319 short_circuit_or_expression]: #56
[#319 singular_expression]: #66
[#319 unary_expression]: #64
[#320 else_if_clause]: #416
[#320 if_statement/0.1]: #414
[#320 if_statement/0.1/0]: #415
[#321 additive_expression]: #63
[#321 attribute]: #84
[#321 binary_and_expression]: #60
[#321 binary_or_expression]: #61
[#321 binary_xor_expression]: #62
[#321 bitwise_expression]: #58
[#321 bool_literal]: #82
[#321 decimal_float_literal]: #87
[#321 decimal_int_literal]: #85
[#321 expression]: #413
[#321 float_literal]: #81
[#321 hex_float_literal]: #88
[#321 hex_int_literal]: #86
[#321 ident]: #73
[#321 int_literal]: #80
[#321 literal]: #75
[#321 multiplicative_expression]: #65
[#321 paren_expression]: #76
[#321 primary_expression]: #72
[#321 primary_expression/1.0]: #74
[#321 primary_expression/1.0/0]: #79
[#321 relational_expression]: #55
[#321 shift_expression]: #59
[#321 short_circuit_and_expression]: #57
[#321 short_circuit_or_expression]: #56
[#321 singular_expression]: #66
[#321 unary_expression]: #64
[#324 additive_expression]: #63
[#324 attribute]: #84
[#324 binary_and_expression]: #60
[#324 binary_or_expression]: #61
[#324 binary_xor_expression]: #62
[#324 bitwise_expression]: #58
[#324 bool_literal]: #82
[#324 decimal_float_literal]: #87
[#324 decimal_int_literal]: #85
[#324 expression]: #410
[#324 float_literal]: #81
[#324 hex_float_literal]: #88
[#324 hex_int_literal]: #86
[#324 ident]: #73
[#324 int_literal]: #80
[#324 literal]: #75
[#324 multiplicative_expression]: #65
[#324 paren_expression]: #76
[#324 primary_expression]: #72
[#324 primary_expression/1.0]: #74
[#324 primary_expression/1.0/0]: #79
[#324 relational_expression]: #55
[#324 shift_expression]: #59
[#324 short_circuit_and_expression]: #57
[#324 short_circuit_or_expression]: #56
[#324 singular_expression]: #66
[#324 unary_expression]: #64
[#325 array_type_specifier]: #154
[#325 call_phrase]: #408
[#325 callable]: #409
[#325 depth_texture_type]: #170
[#325 ident]: #143
[#325 mat_prefix]: #146
[#325 multisampled_texture_type]: #172
[#325 sampled_texture_type]: #171
[#325 sampler_type]: #169
[#325 storage_texture_type]: #173
[#325 texture_and_sampler_types]: #156
[#325 type_specifier_without_ident]: #144
[#325 vec_prefix]: #145
[#327 ident]: #108
[#327 optionally_typed_ident]: #406
[#328 ident]: #108
[#328 optionally_typed_ident]: #405
[#334 additive_expression]: #63
[#334 attribute]: #84
[#334 binary_and_expression]: #60
[#334 binary_or_expression]: #61
[#334 binary_xor_expression]: #62
[#334 bitwise_expression]: #58
[#334 bool_literal]: #82
[#334 decimal_float_literal]: #87
[#334 decimal_int_literal]: #85
[#334 expression]: #404
[#334 float_literal]: #81
[#334 hex_float_literal]: #88
[#334 hex_int_literal]: #86
[#334 ident]: #73
[#334 int_literal]: #80
[#334 literal]: #75
[#334 multiplicative_expression]: #65
[#334 paren_expression]: #76
[#334 primary_expression]: #72
[#334 primary_expression/1.0]: #74
[#334 primary_expression/1.0/0]: #79
[#334 relational_expression]: #55
[#334 shift_expression]: #59
[#334 short_circuit_and_expression]: #57
[#334 short_circuit_or_expression]: #56
[#334 singular_expression]: #66
[#334 unary_expression]: #64
[#336 assignment_statement/0.1]: #389
[#336 compound_assignment_operator]: #393
[#338 attribute]: #338
[#338 func_call_statement/0.0/0]: #387
[#339 component_or_swizzle_specifier]: #386
[#339 lhs_expression/0.1]: #385
[#340 core_lhs_expression]: #339
[#340 ident]: #342
[#340 lhs_expression]: #384
[#341 core_lhs_expression]: #339
[#341 ident]: #342
[#341 lhs_expression]: #383
[#343 core_lhs_expression]: #339
[#343 ident]: #342
[#343 lhs_expression]: #382
[#344 attribute]: #381
[#344 function_header/0.3]: #376
[#344 param]: #378
[#344 param/0.0]: #379
[#344 param/0.0/0]: #380
[#344 param_list]: #377
[#345 struct_body_decl/0.2]: #372
[#345 struct_body_decl/0.2/0]: #373
[#345 struct_body_decl/0.2/0/0.0]: #374
[#346 member_ident]: #371
[#348 attribute]: #348
[#348 struct_member/0.0/0]: #370
[#351 additive_expression]: #63
[#351 attribute]: #84
[#351 binary_and_expression]: #60
[#351 binary_or_expression]: #61
[#351 binary_xor_expression]: #62
[#351 bitwise_expression]: #58
[#351 bool_literal]: #82
[#351 decimal_float_literal]: #87
[#351 decimal_int_literal]: #85
[#351 expression]: #369
[#351 float_literal]: #81
[#351 hex_float_literal]: #88
[#351 hex_int_literal]: #86
[#351 ident]: #73
[#351 int_literal]: #80
[#351 literal]: #75
[#351 multiplicative_expression]: #65
[#351 paren_expression]: #76
[#351 primary_expression]: #72
[#351 primary_expression/1.0]: #74
[#351 primary_expression/1.0/0]: #79
[#351 relational_expression]: #55
[#351 shift_expression]: #59
[#351 short_circuit_and_expression]: #57
[#351 short_circuit_or_expression]: #56
[#351 singular_expression]: #66
[#351 unary_expression]: #64
[#355 variable_qualifier/0.2]: #367
[#362 attrib_end]: #364
[#362 attrib_end/0.0]: #365
[#368 access_mode]: #532
[#372 struct_body_decl/0.3]: #529
[#374 struct_body_decl/0.2/0]: #528
[#374 struct_body_decl/0.2/0/0.0]: #374
[#375 attribute]: #348
[#375 struct_member]: #527
[#375 struct_member/0.0]: #346
[#375 struct_member/0.0/0]: #347
[#378 param_list/0.1]: #522
[#378 param_list/0.1/0]: #523
[#378 param_list/0.1/0/0.0]: #524
[#379 ident]: #521
[#381 attribute]: #381
[#381 param/0.0/0]: #520
[#388 additive_expression]: #63
[#388 attribute]: #84
[#388 binary_and_expression]: #60
[#388 binary_or_expression]: #61
[#388 binary_xor_expression]: #62
[#388 bitwise_expression]: #58
[#388 bool_literal]: #82
[#388 decimal_float_literal]: #87
[#388 decimal_int_literal]: #85
[#388 expression]: #518
[#388 float_literal]: #81
[#388 hex_float_literal]: #88
[#388 hex_int_literal]: #86
[#388 ident]: #73
[#388 int_literal]: #80
[#388 literal]: #75
[#388 multiplicative_expression]: #65
[#388 paren_expression]: #76
[#388 primary_expression]: #72
[#388 primary_expression/1.0]: #74
[#388 primary_expression/1.0/0]: #79
[#388 relational_expression]: #55
[#388 shift_expression]: #59
[#388 short_circuit_and_expression]: #57
[#388 short_circuit_or_expression]: #56
[#388 singular_expression]: #66
[#388 unary_expression]: #64
[#389 additive_expression]: #63
[#389 attribute]: #84
[#389 binary_and_expression]: #60
[#389 binary_or_expression]: #61
[#389 binary_xor_expression]: #62
[#389 bitwise_expression]: #58
[#389 bool_literal]: #82
[#389 decimal_float_literal]: #87
[#389 decimal_int_literal]: #85
[#389 expression]: #517
[#389 float_literal]: #81
[#389 hex_float_literal]: #88
[#389 hex_int_literal]: #86
[#389 ident]: #73
[#389 int_literal]: #80
[#389 literal]: #75
[#389 multiplicative_expression]: #65
[#389 paren_expression]: #76
[#389 primary_expression]: #72
[#389 primary_expression/1.0]: #74
[#389 primary_expression/1.0/0]: #79
[#389 relational_expression]: #55
[#389 shift_expression]: #59
[#389 short_circuit_and_expression]: #57
[#389 short_circuit_or_expression]: #56
[#389 singular_expression]: #66
[#389 unary_expression]: #64
[#404 compound_statement]: #516
[#407 additive_expression]: #63
[#407 attribute]: #84
[#407 binary_and_expression]: #60
[#407 binary_or_expression]: #61
[#407 binary_xor_expression]: #62
[#407 bitwise_expression]: #58
[#407 bool_literal]: #82
[#407 decimal_float_literal]: #87
[#407 decimal_int_literal]: #85
[#407 expression]: #513
[#407 float_literal]: #81
[#407 hex_float_literal]: #88
[#407 hex_int_literal]: #86
[#407 ident]: #73
[#407 int_literal]: #80
[#407 literal]: #75
[#407 multiplicative_expression]: #65
[#407 paren_expression]: #76
[#407 primary_expression]: #72
[#407 primary_expression/1.0]: #74
[#407 primary_expression/1.0/0]: #79
[#407 relational_expression]: #55
[#407 shift_expression]: #59
[#407 short_circuit_and_expression]: #57
[#407 short_circuit_or_expression]: #56
[#407 singular_expression]: #66
[#407 unary_expression]: #64
[#409 argument_expression_list]: #512
[#410 compound_statement]: #511
[#411 assignment_statement]: #331
[#411 attribute]: #338
[#411 core_lhs_expression]: #339
[#411 decrement_statement]: #333
[#411 for_header]: #505
[#411 for_header/0.0]: #506
[#411 for_init]: #507
[#411 func_call_statement]: #510
[#411 func_call_statement/0.0]: #325
[#411 func_call_statement/0.0/0]: #335
[#411 ident]: #342
[#411 increment_statement]: #332
[#411 lhs_expression]: #336
[#411 variable_decl]: #326
[#411 variable_statement]: #508
[#411 variable_updating_statement]: #509
[#412 assignment_statement]: #331
[#412 attribute]: #338
[#412 break_statement]: #313
[#412 compound_statement]: #317
[#412 continue_statement]: #314
[#412 core_lhs_expression]: #339
[#412 decrement_statement]: #333
[#412 for_statement]: #309
[#412 func_call_statement]: #311
[#412 func_call_statement/0.0]: #325
[#412 func_call_statement/0.0/0]: #335
[#412 ident]: #342
[#412 if_clause]: #320
[#412 if_statement]: #306
[#412 increment_statement]: #332
[#412 lhs_expression]: #336
[#412 loop_statement]: #308
[#412 loop_statement/0.2]: #502
[#412 loop_statement/0.2/0]: #503
[#412 return_statement]: #305
[#412 statement]: #504
[#412 static_assert_statement]: #318
[#412 switch_statement]: #307
[#412 variable_decl]: #326
[#412 variable_statement]: #312
[#412 variable_updating_statement]: #316
[#412 while_statement]: #310
[#414 else_clause]: #499
[#414 if_statement/0.2]: #498
[#416 else_if_clause]: #416
[#416 if_statement/0.1/0]: #497
[#430 paren_expression]: #495
[#433 expression_comma_list/0.1]: #490
[#433 expression_comma_list/0.1/0]: #491
[#433 expression_comma_list/0.1/0/0.0]: #492
[#436 array_type_specifier/0.3]: #486
[#458 component_or_swizzle_specifier]: #480
[#458 component_or_swizzle_specifier/0.3]: #479
[#464 additive_expression]: #63
[#464 attribute]: #84
[#464 binary_and_expression]: #60
[#464 binary_or_expression]: #61
[#464 binary_xor_expression]: #62
[#464 bitwise_expression]: #58
[#464 bool_literal]: #82
[#464 decimal_float_literal]: #87
[#464 decimal_int_literal]: #85
[#464 expression]: #478
[#464 float_literal]: #81
[#464 hex_float_literal]: #88
[#464 hex_int_literal]: #86
[#464 ident]: #73
[#464 int_literal]: #80
[#464 literal]: #75
[#464 multiplicative_expression]: #65
[#464 paren_expression]: #76
[#464 primary_expression]: #72
[#464 primary_expression/1.0]: #74
[#464 primary_expression/1.0/0]: #79
[#464 relational_expression]: #55
[#464 shift_expression]: #59
[#464 short_circuit_and_expression]: #57
[#464 short_circuit_or_expression]: #56
[#464 singular_expression]: #66
[#464 unary_expression]: #64
[#468 interpolation_sample_name]: #474
[#474 attrib_end]: #577
[#474 attrib_end/0.0]: #365
[#478 attrib_end]: #575
[#478 attrib_end/0.0]: #365
[#481 access_mode]: #574
[#485 array_type_specifier]: #154
[#485 depth_texture_type]: #170
[#485 ident]: #295
[#485 mat_prefix]: #298
[#485 multisampled_texture_type]: #172
[#485 sampled_texture_type]: #171
[#485 sampler_type]: #169
[#485 storage_texture_type]: #173
[#485 texture_and_sampler_types]: #156
[#485 type_specifier]: #573
[#485 type_specifier_without_ident]: #296
[#485 vec_prefix]: #297
[#487 additive_expression]: #569
[#487 attribute]: #84
[#487 binary_and_expression]: #60
[#487 binary_or_expression]: #61
[#487 binary_xor_expression]: #62
[#487 bitwise_expression]: #570
[#487 bool_literal]: #82
[#487 decimal_float_literal]: #87
[#487 decimal_int_literal]: #85
[#487 element_count_expression]: #568
[#487 float_literal]: #81
[#487 hex_float_literal]: #88
[#487 hex_int_literal]: #86
[#487 ident]: #73
[#487 int_literal]: #80
[#487 literal]: #75
[#487 multiplicative_expression]: #65
[#487 paren_expression]: #76
[#487 primary_expression]: #72
[#487 primary_expression/1.0]: #74
[#487 primary_expression/1.0/0]: #79
[#487 singular_expression]: #66
[#487 unary_expression]: #571
[#490 expression_comma_list/0.2]: #566
[#492 expression_comma_list/0.1/0]: #565
[#492 expression_comma_list/0.1/0/0.0]: #492
[#493 additive_expression]: #63
[#493 attribute]: #84
[#493 binary_and_expression]: #60
[#493 binary_or_expression]: #61
[#493 binary_xor_expression]: #62
[#493 bitwise_expression]: #58
[#493 bool_literal]: #82
[#493 decimal_float_literal]: #87
[#493 decimal_int_literal]: #85
[#493 expression]: #564
[#493 float_literal]: #81
[#493 hex_float_literal]: #88
[#493 hex_int_literal]: #86
[#493 ident]: #73
[#493 int_literal]: #80
[#493 literal]: #75
[#493 multiplicative_expression]: #65
[#493 paren_expression]: #76
[#493 primary_expression]: #72
[#493 primary_expression/1.0]: #74
[#493 primary_expression/1.0/0]: #79
[#493 relational_expression]: #55
[#493 shift_expression]: #59
[#493 short_circuit_and_expression]: #57
[#493 short_circuit_or_expression]: #56
[#493 singular_expression]: #66
[#493 unary_expression]: #64
[#496 additive_expression]: #63
[#496 attribute]: #84
[#496 binary_and_expression]: #60
[#496 binary_or_expression]: #61
[#496 binary_xor_expression]: #62
[#496 bitwise_expression]: #58
[#496 bool_literal]: #82
[#496 decimal_float_literal]: #87
[#496 decimal_int_literal]: #85
[#496 expression]: #563
[#496 float_literal]: #81
[#496 hex_float_literal]: #88
[#496 hex_int_literal]: #86
[#496 ident]: #73
[#496 int_literal]: #80
[#496 literal]: #75
[#496 multiplicative_expression]: #65
[#496 paren_expression]: #76
[#496 primary_expression]: #72
[#496 primary_expression/1.0]: #74
[#496 primary_expression/1.0/0]: #79
[#496 relational_expression]: #55
[#496 shift_expression]: #59
[#496 short_circuit_and_expression]: #57
[#496 short_circuit_or_expression]: #56
[#496 singular_expression]: #66
[#496 unary_expression]: #64
[#500 compound_statement]: #562
[#501 case_clause]: #558
[#501 default_alone_clause]: #559
[#501 switch_body]: #557
[#501 switch_statement/0.3]: #555
[#501 switch_statement/0.3/0]: #556
[#502 continuing_statement]: #553
[#502 loop_statement/0.3]: #552
[#504 assignment_statement]: #331
[#504 attribute]: #338
[#504 break_statement]: #313
[#504 compound_statement]: #317
[#504 continue_statement]: #314
[#504 core_lhs_expression]: #339
[#504 decrement_statement]: #333
[#504 for_statement]: #309
[#504 func_call_statement]: #311
[#504 func_call_statement/0.0]: #325
[#504 func_call_statement/0.0/0]: #335
[#504 ident]: #342
[#504 if_clause]: #320
[#504 if_statement]: #306
[#504 increment_statement]: #332
[#504 lhs_expression]: #336
[#504 loop_statement]: #308
[#504 loop_statement/0.2/0]: #551
[#504 return_statement]: #305
[#504 statement]: #504
[#504 static_assert_statement]: #318
[#504 switch_statement]: #307
[#504 variable_decl]: #326
[#504 variable_statement]: #312
[#504 variable_updating_statement]: #316
[#504 while_statement]: #310
[#514 additive_expression]: #63
[#514 attribute]: #84
[#514 binary_and_expression]: #60
[#514 binary_or_expression]: #61
[#514 binary_xor_expression]: #62
[#514 bitwise_expression]: #58
[#514 bool_literal]: #82
[#514 decimal_float_literal]: #87
[#514 decimal_int_literal]: #85
[#514 expression]: #548
[#514 float_literal]: #81
[#514 hex_float_literal]: #88
[#514 hex_int_literal]: #86
[#514 ident]: #73
[#514 int_literal]: #80
[#514 literal]: #75
[#514 multiplicative_expression]: #65
[#514 paren_expression]: #76
[#514 primary_expression]: #72
[#514 primary_expression/1.0]: #74
[#514 primary_expression/1.0/0]: #79
[#514 relational_expression]: #55
[#514 shift_expression]: #59
[#514 short_circuit_and_expression]: #57
[#514 short_circuit_or_expression]: #56
[#514 singular_expression]: #66
[#514 unary_expression]: #64
[#515 additive_expression]: #63
[#515 attribute]: #84
[#515 binary_and_expression]: #60
[#515 binary_or_expression]: #61
[#515 binary_xor_expression]: #62
[#515 bitwise_expression]: #58
[#515 bool_literal]: #82
[#515 decimal_float_literal]: #87
[#515 decimal_int_literal]: #85
[#515 expression]: #547
[#515 float_literal]: #81
[#515 hex_float_literal]: #88
[#515 hex_int_literal]: #86
[#515 ident]: #73
[#515 int_literal]: #80
[#515 literal]: #75
[#515 multiplicative_expression]: #65
[#515 paren_expression]: #76
[#515 primary_expression]: #72
[#515 primary_expression/1.0]: #74
[#515 primary_expression/1.0/0]: #79
[#515 relational_expression]: #55
[#515 shift_expression]: #59
[#515 short_circuit_and_expression]: #57
[#515 short_circuit_or_expression]: #56
[#515 singular_expression]: #66
[#515 unary_expression]: #64
[#522 param_list/0.2]: #544
[#524 param_list/0.1/0]: #543
[#524 param_list/0.1/0/0.0]: #524
[#525 attribute]: #381
[#525 param]: #542
[#525 param/0.0]: #379
[#525 param/0.0/0]: #380
[#526 function_header/0.5]: #540
[#531 array_type_specifier]: #154
[#531 depth_texture_type]: #170
[#531 ident]: #295
[#531 mat_prefix]: #298
[#531 multisampled_texture_type]: #172
[#531 sampled_texture_type]: #171
[#531 sampler_type]: #169
[#531 storage_texture_type]: #173
[#531 texture_and_sampler_types]: #156
[#531 type_specifier]: #538
[#531 type_specifier_without_ident]: #296
[#531 vec_prefix]: #297
[#541 attribute]: #600
[#541 function_header/0.5/0.1]: #598
[#541 function_header/0.5/0.1/0]: #599
[#546 array_type_specifier]: #154
[#546 depth_texture_type]: #170
[#546 ident]: #295
[#546 mat_prefix]: #298
[#546 multisampled_texture_type]: #172
[#546 sampled_texture_type]: #171
[#546 sampler_type]: #169
[#546 storage_texture_type]: #173
[#546 texture_and_sampler_types]: #156
[#546 type_specifier]: #597
[#546 type_specifier_without_ident]: #296
[#546 vec_prefix]: #297
[#549 additive_expression]: #63
[#549 attribute]: #84
[#549 binary_and_expression]: #60
[#549 binary_or_expression]: #61
[#549 binary_xor_expression]: #62
[#549 bitwise_expression]: #58
[#549 bool_literal]: #82
[#549 decimal_float_literal]: #87
[#549 decimal_int_literal]: #85
[#549 expression]: #596
[#549 float_literal]: #81
[#549 for_header/0.2]: #595
[#549 hex_float_literal]: #88
[#549 hex_int_literal]: #86
[#549 ident]: #73
[#549 int_literal]: #80
[#549 literal]: #75
[#549 multiplicative_expression]: #65
[#549 paren_expression]: #76
[#549 primary_expression]: #72
[#549 primary_expression/1.0]: #74
[#549 primary_expression/1.0/0]: #79
[#549 relational_expression]: #55
[#549 shift_expression]: #59
[#549 short_circuit_and_expression]: #57
[#549 short_circuit_or_expression]: #56
[#549 singular_expression]: #66
[#549 unary_expression]: #64
[#550 compound_statement]: #594
[#554 continuing_compound_statement]: #591
[#557 case_clause]: #558
[#557 default_alone_clause]: #559
[#557 switch_body]: #557
[#557 switch_statement/0.3/0]: #589
[#560 additive_expression]: #63
[#560 attribute]: #84
[#560 binary_and_expression]: #60
[#560 binary_or_expression]: #61
[#560 binary_xor_expression]: #62
[#560 bitwise_expression]: #58
[#560 bool_literal]: #82
[#560 case_selector]: #586
[#560 case_selectors]: #585
[#560 decimal_float_literal]: #87
[#560 decimal_int_literal]: #85
[#560 expression]: #588
[#560 float_literal]: #81
[#560 hex_float_literal]: #88
[#560 hex_int_literal]: #86
[#560 ident]: #73
[#560 int_literal]: #80
[#560 literal]: #75
[#560 multiplicative_expression]: #65
[#560 paren_expression]: #76
[#560 primary_expression]: #72
[#560 primary_expression/1.0]: #74
[#560 primary_expression/1.0/0]: #79
[#560 relational_expression]: #55
[#560 shift_expression]: #59
[#560 short_circuit_and_expression]: #57
[#560 short_circuit_or_expression]: #56
[#560 singular_expression]: #66
[#560 unary_expression]: #64
[#561 default_alone_clause/0.1]: #583
[#563 compound_statement]: #582
[#569 additive_operator]: #207
[#573 type_specifier_without_ident/7.5]: #580
[#576 additive_expression]: #63
[#576 attribute]: #84
[#576 binary_and_expression]: #60
[#576 binary_or_expression]: #61
[#576 binary_xor_expression]: #62
[#576 bitwise_expression]: #58
[#576 bool_literal]: #82
[#576 decimal_float_literal]: #87
[#576 decimal_int_literal]: #85
[#576 expression]: #578
[#576 float_literal]: #81
[#576 hex_float_literal]: #88
[#576 hex_int_literal]: #86
[#576 ident]: #73
[#576 int_literal]: #80
[#576 literal]: #75
[#576 multiplicative_expression]: #65
[#576 paren_expression]: #76
[#576 primary_expression]: #72
[#576 primary_expression/1.0]: #74
[#576 primary_expression/1.0/0]: #79
[#576 relational_expression]: #55
[#576 shift_expression]: #59
[#576 short_circuit_and_expression]: #57
[#576 short_circuit_or_expression]: #56
[#576 singular_expression]: #66
[#576 unary_expression]: #64
[#578 attrib_end]: #616
[#578 attrib_end/0.0]: #365
[#581 access_mode]: #614
[#583 compound_statement]: #613
[#585 case_clause/0.2]: #611
[#586 case_selectors/0.1]: #607
[#586 case_selectors/0.1/0]: #608
[#586 case_selectors/0.1/0/0.0]: #609
[#592 assignment_statement]: #331
[#592 attribute]: #338
[#592 break_statement]: #313
[#592 compound_statement]: #317
[#592 continue_statement]: #314
[#592 continuing_compound_statement/0.1]: #604
[#592 continuing_compound_statement/0.1/0]: #605
[#592 core_lhs_expression]: #339
[#592 decrement_statement]: #333
[#592 for_statement]: #309
[#592 func_call_statement]: #311
[#592 func_call_statement/0.0]: #325
[#592 func_call_statement/0.0/0]: #335
[#592 ident]: #342
[#592 if_clause]: #320
[#592 if_statement]: #306
[#592 increment_statement]: #332
[#592 lhs_expression]: #336
[#592 loop_statement]: #308
[#592 return_statement]: #305
[#592 statement]: #606
[#592 static_assert_statement]: #318
[#592 switch_statement]: #307
[#592 variable_decl]: #326
[#592 variable_statement]: #312
[#592 variable_updating_statement]: #316
[#592 while_statement]: #310
[#598 array_type_specifier]: #154
[#598 depth_texture_type]: #170
[#598 ident]: #295
[#598 mat_prefix]: #298
[#598 multisampled_texture_type]: #172
[#598 sampled_texture_type]: #171
[#598 sampler_type]: #169
[#598 storage_texture_type]: #173
[#598 texture_and_sampler_types]: #156
[#598 type_specifier]: #602
[#598 type_specifier_without_ident]: #296
[#598 vec_prefix]: #297
[#600 attribute]: #600
[#600 function_header/0.5/0.1/0]: #601
[#603 assignment_statement]: #331
[#603 attribute]: #338
[#603 core_lhs_expression]: #339
[#603 decrement_statement]: #333
[#603 for_header/0.4]: #626
[#603 for_update]: #627
[#603 func_call_statement]: #629
[#603 func_call_statement/0.0]: #325
[#603 func_call_statement/0.0/0]: #335
[#603 ident]: #342
[#603 increment_statement]: #332
[#603 lhs_expression]: #336
[#603 variable_updating_statement]: #628
[#604 break_if_statement]: #624
[#604 continuing_compound_statement/0.2]: #623
[#606 assignment_statement]: #331
[#606 attribute]: #338
[#606 break_statement]: #313
[#606 compound_statement]: #317
[#606 continue_statement]: #314
[#606 continuing_compound_statement/0.1/0]: #622
[#606 core_lhs_expression]: #339
[#606 decrement_statement]: #333
[#606 for_statement]: #309
[#606 func_call_statement]: #311
[#606 func_call_statement/0.0]: #325
[#606 func_call_statement/0.0/0]: #335
[#606 ident]: #342
[#606 if_clause]: #320
[#606 if_statement]: #306
[#606 increment_statement]: #332
[#606 lhs_expression]: #336
[#606 loop_statement]: #308
[#606 return_statement]: #305
[#606 statement]: #606
[#606 static_assert_statement]: #318
[#606 switch_statement]: #307
[#606 variable_decl]: #326
[#606 variable_statement]: #312
[#606 variable_updating_statement]: #316
[#606 while_statement]: #310
[#607 case_selectors/0.2]: #620
[#609 case_selectors/0.1/0]: #619
[#609 case_selectors/0.1/0/0.0]: #609
[#610 additive_expression]: #63
[#610 attribute]: #84
[#610 binary_and_expression]: #60
[#610 binary_or_expression]: #61
[#610 binary_xor_expression]: #62
[#610 bitwise_expression]: #58
[#610 bool_literal]: #82
[#610 case_selector]: #618
[#610 decimal_float_literal]: #87
[#610 decimal_int_literal]: #85
[#610 expression]: #588
[#610 float_literal]: #81
[#610 hex_float_literal]: #88
[#610 hex_int_literal]: #86
[#610 ident]: #73
[#610 int_literal]: #80
[#610 literal]: #75
[#610 multiplicative_expression]: #65
[#610 paren_expression]: #76
[#610 primary_expression]: #72
[#610 primary_expression/1.0]: #74
[#610 primary_expression/1.0/0]: #79
[#610 relational_expression]: #55
[#610 shift_expression]: #59
[#610 short_circuit_and_expression]: #57
[#610 short_circuit_or_expression]: #56
[#610 singular_expression]: #66
[#610 unary_expression]: #64
[#611 compound_statement]: #617
[#630 additive_expression]: #63
[#630 attribute]: #84
[#630 binary_and_expression]: #60
[#630 binary_or_expression]: #61
[#630 binary_xor_expression]: #62
[#630 bitwise_expression]: #58
[#630 bool_literal]: #82
[#630 decimal_float_literal]: #87
[#630 decimal_int_literal]: #85
[#630 expression]: #632
[#630 float_literal]: #81
[#630 hex_float_literal]: #88
[#630 hex_int_literal]: #86
[#630 ident]: #73
[#630 int_literal]: #80
[#630 literal]: #75
[#630 multiplicative_expression]: #65
[#630 paren_expression]: #76
[#630 primary_expression]: #72
[#630 primary_expression/1.0]: #74
[#630 primary_expression/1.0/0]: #79
[#630 relational_expression]: #55
[#630 shift_expression]: #59
[#630 short_circuit_and_expression]: #57
[#630 short_circuit_or_expression]: #56
[#630 singular_expression]: #66
[#630 unary_expression]: #64
