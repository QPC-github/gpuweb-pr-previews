=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:'//.*'
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   ident
 | ident '::' '<' additive_expression ( ',' additive_expression ) * ? ',' ? '>'
callable/1.4/0/0.0:
   ',' additive_expression
callable_type:
   ident
 | ident '::' '<' additive_expression ( ',' additive_expression ) * ? ',' ? '>'
 | ident '<' additive_expression ( ',' additive_expression ) * ? ',' ? '>'
callable_type/1.3/0/0.0:
   ',' additive_expression
callable_type/2.4/0/0.0:
   ',' additive_expression
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   '{' statement * ? '}'
const_assert_statement:
   'const_assert' expression
continue_statement:'continue'
continuing_compound_statement:
   '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | const_assert_statement ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   'loop' '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   call_expression
 | callable
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | const_assert_statement ';'
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression '{' ( switch_body * ) '}'
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'alias' ident '=' type_specifier
type_specifier:callable_type
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}
const_assert_statement -> · 'const_assert' expression : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_directive -> · 'enable' extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}
extension_name -> · 'f16' : {}

#6
global_directive -> 'enable' extension_name · ';' : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#7
extension_name -> 'f16' · : {}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}
const_assert_statement -> · 'const_assert' expression : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'alias' ident '=' type_specifier : {}

#12
global_decl -> ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#13
global_decl -> global_variable_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#14
global_decl -> global_constant_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#15
global_decl -> type_alias_decl · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#18
global_decl -> const_assert_statement · ';' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#19
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {'='}

#20
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#21
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#22
type_alias_decl -> 'alias' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#23
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#24
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {'{'}

#25
const_assert_statement -> 'const_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#26
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#27
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#28
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#29
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#30
attribute -> '@' · 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'compute' : {'@' 'fn' 'var'}
attribute -> '@' · 'const' : {'@' 'fn' 'var'}
attribute -> '@' · 'fragment' : {'@' 'fn' 'var'}
attribute -> '@' · 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'invariant' : {'@' 'fn' 'var'}
attribute -> '@' · 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'vertex' : {'@' 'fn' 'var'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}

#31
attribute -> '@' 'align' · '(' expression attrib_end : {'@' 'fn' 'var'}

#32
attribute -> '@' 'binding' · '(' expression attrib_end : {'@' 'fn' 'var'}

#33
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}

#34
attribute -> '@' 'const' · : {'@' 'fn' 'var'}

#35
attribute -> '@' 'group' · '(' expression attrib_end : {'@' 'fn' 'var'}

#36
attribute -> '@' 'id' · '(' expression attrib_end : {'@' 'fn' 'var'}

#37
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}

#38
attribute -> '@' 'invariant' · : {'@' 'fn' 'var'}

#39
attribute -> '@' 'location' · '(' expression attrib_end : {'@' 'fn' 'var'}

#40
attribute -> '@' 'size' · '(' expression attrib_end : {'@' 'fn' 'var'}

#41
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'@' 'fn' 'var'}

#42
attribute -> '@' 'vertex' · : {'@' 'fn' 'var'}

#43
attribute -> '@' 'fragment' · : {'@' 'fn' 'var'}

#44
attribute -> '@' 'compute' · : {'@' 'fn' 'var'}

#45
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#46
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#47
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#48
const_assert_statement -> 'const_assert' expression · : {}

#49
expression -> relational_expression · : {')' ',' ':' '{'}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#50
expression -> short_circuit_or_expression · '||' relational_expression : {')' ',' ':' '{'}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#51
expression -> short_circuit_and_expression · '&&' relational_expression : {')' ',' ':' '{'}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#52
expression -> bitwise_expression · : {')' ',' ':' '{'}

#53
relational_expression -> shift_expression · '!=' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '<' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '<=' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '==' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '>' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '>=' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · : {')' ',' ':' '{'}

#54
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {')' ',' ':' '{'}

#55
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {')' ',' ':' '{'}

#56
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {')' ',' ':' '{'}

#57
additive_expression -> additive_expression · additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
shift_expression -> additive_expression · : {')' ',' ':' '{'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#58
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
shift_expression -> unary_expression · '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> unary_expression · '>>' unary_expression : {')' ',' ':' '{'}

#59
additive_expression -> multiplicative_expression · : {')' '+' ',' '-' ':' '{'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#60
unary_expression -> singular_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#61
unary_expression -> '-' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#62
unary_expression -> '!' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#63
unary_expression -> '~' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#64
unary_expression -> '*' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#65
unary_expression -> '&' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#66
singular_expression -> primary_expression · singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#67
call_expression -> callable · argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> callable · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#68
primary_expression -> call_expression · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#69
primary_expression -> literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#70
primary_expression -> paren_expression · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#71
callable -> ident · '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> ident · : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#72
literal -> int_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#73
literal -> float_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#74
literal -> bool_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#75
paren_expression -> '(' · expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#76
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'%' '%=' '&=' '(' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#77
int_literal -> decimal_int_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#78
int_literal -> hex_int_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#79
float_literal -> decimal_float_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#80
float_literal -> hex_float_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#81
bool_literal -> 'true' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#82
bool_literal -> 'false' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#83
decimal_int_literal -> /0[iu]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#84
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#85
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#86
decimal_float_literal -> /0[fh]/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#87
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#88
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#89
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#90
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#91
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#92
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#93
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#94
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
compound_statement -> · '{' compound_statement/0.1 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#95
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#96
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#97
type_alias_decl -> 'alias' ident · '=' type_specifier : {}

#98
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#99
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#100
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {'='}
optionally_typed_ident/0.1 -> · ':' type_specifier : {'='}

#101
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#102
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {'='}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#103
global_decl -> const_assert_statement ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#104
global_decl -> type_alias_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#105
global_decl -> global_constant_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#106
global_decl -> global_variable_decl ';' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#107
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#108
global_directive -> 'enable' extension_name ';' · : {';' '@' 'alias' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'var' EndOfText}

#109
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#110
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#111
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#112
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#113
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#114
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {'='}

#115
optionally_typed_ident/0.1 -> ':' · type_specifier : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}
type_specifier -> · ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {'='}
type_specifier -> · ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' : {'='}
type_specifier -> · ident : {'='}

#116
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#117
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#118
type_alias_decl -> 'alias' ident '=' · type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
type_specifier -> · ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {}
type_specifier -> · ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' : {}
type_specifier -> · ident : {}

#119
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#120
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#121
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {'{'}

#122
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#123
compound_statement -> '{' · compound_statement/0.1 '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#124
paren_expression -> '(' expression · ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#125
callable -> ident '::' · '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#126
call_expression -> callable argument_expression_list · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#127
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
argument_expression_list/0.1 -> · expression_comma_list : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {','}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression '&&' relational_expression : {','}
expression -> · short_circuit_or_expression '||' relational_expression : {','}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {','}
relational_expression -> · shift_expression '<' shift_expression : {','}
relational_expression -> · shift_expression '<=' shift_expression : {','}
relational_expression -> · shift_expression '==' shift_expression : {','}
relational_expression -> · shift_expression '>' shift_expression : {','}
relational_expression -> · shift_expression '>=' shift_expression : {','}
relational_expression -> · shift_expression : {','}
shift_expression -> · additive_expression : {','}
shift_expression -> · unary_expression '<<' unary_expression : {','}
shift_expression -> · unary_expression '>>' unary_expression : {','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#128
singular_expression -> primary_expression singular_expression/0.1 · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#129
singular_expression/0.1 -> component_or_swizzle_specifier · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#130
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#131
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba][rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw][xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#132
unary_expression -> '&' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#133
unary_expression -> '*' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#134
unary_expression -> '~' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#135
unary_expression -> '!' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#136
unary_expression -> '-' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#137
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#138
multiplicative_operator -> '*' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#139
multiplicative_operator -> '/' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#140
multiplicative_operator -> '%' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#141
shift_expression -> unary_expression '<<' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#142
shift_expression -> unary_expression '>>' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#143
additive_expression -> additive_expression additive_operator · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#144
additive_operator -> '+' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#145
additive_operator -> '-' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#146
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#147
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#148
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#149
relational_expression -> shift_expression '<' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#150
relational_expression -> shift_expression '>' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#151
relational_expression -> shift_expression '<=' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#152
relational_expression -> shift_expression '>=' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#153
relational_expression -> shift_expression '==' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#154
relational_expression -> shift_expression '!=' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#155
expression -> short_circuit_and_expression '&&' · relational_expression : {')' ',' ':' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression : {')' ',' ':' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#156
expression -> short_circuit_or_expression '||' · relational_expression : {')' ',' ':' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression : {')' ',' ':' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#157
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#158
attribute -> '@' 'size' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#159
attribute -> '@' 'location' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#160
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'@' 'fn' 'var'}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#161
attribute -> '@' 'id' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#162
attribute -> '@' 'group' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#163
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'@' 'fn' 'var'}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#164
attribute -> '@' 'binding' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#165
attribute -> '@' 'align' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#166
attribute -> '@' 'align' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#167
attribute -> '@' 'binding' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#168
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#169
builtin_value_name -> 'vertex_index' · : {')' ','}

#170
builtin_value_name -> 'instance_index' · : {')' ','}

#171
builtin_value_name -> 'position' · : {')' ','}

#172
builtin_value_name -> 'front_facing' · : {')' ','}

#173
builtin_value_name -> 'frag_depth' · : {')' ','}

#174
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#175
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#176
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#177
builtin_value_name -> 'workgroup_id' · : {')' ','}

#178
builtin_value_name -> 'num_workgroups' · : {')' ','}

#179
builtin_value_name -> 'sample_index' · : {')' ','}

#180
builtin_value_name -> 'sample_mask' · : {')' ','}

#181
attribute -> '@' 'group' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#182
attribute -> '@' 'id' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#183
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#184
interpolation_type_name -> 'perspective' · : {')' ','}

#185
interpolation_type_name -> 'linear' · : {')' ','}

#186
interpolation_type_name -> 'flat' · : {')' ','}

#187
attribute -> '@' 'location' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#188
attribute -> '@' 'size' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#189
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#190
expression -> short_circuit_or_expression '||' relational_expression · : {')' ',' ':' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#191
multiplicative_expression -> unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
shift_expression -> unary_expression · '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> unary_expression · '>>' unary_expression : {')' ',' ':' '{'}

#192
expression -> short_circuit_and_expression '&&' relational_expression · : {')' ',' ':' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#193
relational_expression -> shift_expression '!=' shift_expression · : {')' ',' ':' '{'}

#194
relational_expression -> shift_expression '==' shift_expression · : {')' ',' ':' '{'}

#195
relational_expression -> shift_expression '>=' shift_expression · : {')' ',' ':' '{'}

#196
relational_expression -> shift_expression '<=' shift_expression · : {')' ',' ':' '{'}

#197
relational_expression -> shift_expression '>' shift_expression · : {')' ',' ':' '{'}

#198
relational_expression -> shift_expression '<' shift_expression · : {')' ',' ':' '{'}

#199
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {')' ',' ':' '{'}

#200
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {')' ',' ':' '{'}

#201
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {')' ',' ':' '{'}

#202
additive_expression -> additive_expression additive_operator multiplicative_expression · : {')' '+' ',' '-' ':' '{'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#203
multiplicative_expression -> unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#204
shift_expression -> unary_expression '>>' unary_expression · : {')' ',' ':' '{'}

#205
shift_expression -> unary_expression '<<' unary_expression · : {')' ',' ':' '{'}

#206
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#207
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#208
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#209
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#210
swizzle_name -> '/[rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#211
swizzle_name -> '/[rgba][rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#212
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#213
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#214
swizzle_name -> '/[xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#215
swizzle_name -> '/[xyzw][xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#216
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#217
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#218
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#219
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#220
argument_expression_list/0.1 -> expression_comma_list · : {}

#221
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {','}

#222
callable -> ident '::' '<' · additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#223
paren_expression -> '(' expression ')' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#224
compound_statement -> '{' compound_statement/0.1 · '}' : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#225
compound_statement/0.1 -> compound_statement/0.1/0 · : {}

#226
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#227
statement -> ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#228
statement -> return_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#229
statement -> if_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#230
statement -> switch_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#231
statement -> loop_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#232
statement -> for_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#233
statement -> while_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#234
statement -> func_call_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#235
statement -> variable_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#236
statement -> break_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#237
statement -> continue_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#238
statement -> 'discard' · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#239
statement -> variable_updating_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#240
statement -> compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#241
statement -> const_assert_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#242
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#243
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#244
switch_statement -> 'switch' · expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#245
loop_statement -> 'loop' · '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#246
for_statement -> 'for' · '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#247
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '{'}
additive_expression -> · multiplicative_expression : {'+' '-' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'{'}
relational_expression -> · shift_expression '<' shift_expression : {'{'}
relational_expression -> · shift_expression '<=' shift_expression : {'{'}
relational_expression -> · shift_expression '==' shift_expression : {'{'}
relational_expression -> · shift_expression '>' shift_expression : {'{'}
relational_expression -> · shift_expression '>=' shift_expression : {'{'}
relational_expression -> · shift_expression : {'{'}
shift_expression -> · additive_expression : {'{'}
shift_expression -> · unary_expression '<<' unary_expression : {'{'}
shift_expression -> · unary_expression '>>' unary_expression : {'{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/' '{'}

#248
func_call_statement -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#249
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#250
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#251
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#252
break_statement -> 'break' · : {}

#253
continue_statement -> 'continue' · : {}

#254
variable_updating_statement -> assignment_statement · : {}

#255
variable_updating_statement -> increment_statement · : {}

#256
variable_updating_statement -> decrement_statement · : {}

#257
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '{'}
additive_expression -> · multiplicative_expression : {'+' '-' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'{'}
relational_expression -> · shift_expression '<' shift_expression : {'{'}
relational_expression -> · shift_expression '<=' shift_expression : {'{'}
relational_expression -> · shift_expression '==' shift_expression : {'{'}
relational_expression -> · shift_expression '>' shift_expression : {'{'}
relational_expression -> · shift_expression '>=' shift_expression : {'{'}
relational_expression -> · shift_expression : {'{'}
shift_expression -> · additive_expression : {'{'}
shift_expression -> · unary_expression '<<' unary_expression : {'{'}
shift_expression -> · unary_expression '>>' unary_expression : {'{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/' '{'}

#258
callable -> ident · '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> ident · : {'('}
core_lhs_expression -> ident · : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#259
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '%=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '&=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '*=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '+=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '-=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '/=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '<<=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '>>=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '^=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '|=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#260
assignment_statement -> '_' · '=' expression : {}

#261
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#262
lhs_expression -> '*' · lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#263
lhs_expression -> '&' · lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#264
core_lhs_expression -> '(' · lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'.' '['}
core_lhs_expression -> · ident : {'.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'.' '['}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#265
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#266
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {','}

#267
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {','}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#268
struct_member/0.0 -> struct_member/0.0/0 · : {}

#269
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#270
type_alias_decl -> 'alias' ident '=' type_specifier · : {}

#271
type_specifier -> ident · '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {',' '=' '{'}
type_specifier -> ident · '<' additive_expression callable_type/1.3 callable_type/1.4 '>' : {',' '=' '{'}
type_specifier -> ident · : {',' '=' '{'}

#272
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#273
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#274
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#275
optionally_typed_ident/0.1 -> ':' type_specifier · : {'='}

#276
global_variable_decl/0.2 -> '=' expression · : {}

#277
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#278
address_space -> 'function' · : {','}

#279
address_space -> 'private' · : {','}

#280
address_space -> 'workgroup' · : {','}

#281
address_space -> 'uniform' · : {','}

#282
address_space -> 'storage' · : {','}

#283
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {'='}

#284
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#285
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#286
global_constant_decl/1.3 -> '=' expression · : {}

#287
type_specifier -> ident '<' · additive_expression callable_type/1.3 callable_type/1.4 '>' : {',' '=' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#288
type_specifier -> ident '::' · '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {',' '=' '{'}

#289
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#290
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {','}

#291
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#292
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {','}

#293
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {','}

#294
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#295
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {'{'}

#296
function_header/0.3 -> param_list · : {}

#297
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {','}
param_list/0.1/0/0.0 -> · ',' param : {','}

#298
param -> param/0.0 · ident ':' type_specifier : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#299
param/0.0 -> param/0.0/0 · : {}

#300
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
param/0.0/0 -> · attribute param/0.0/0 : {}

#301
core_lhs_expression -> '(' lhs_expression · ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#302
core_lhs_expression -> ident · : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#303
lhs_expression -> '&' lhs_expression · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#304
lhs_expression -> '*' lhs_expression · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#305
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#306
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#307
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#308
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#309
increment_statement -> lhs_expression '++' · : {}

#310
decrement_statement -> lhs_expression '--' · : {}

#311
assignment_statement/0.1 -> '=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#312
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#313
compound_assignment_operator -> '+=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#314
compound_assignment_operator -> '-=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#315
compound_assignment_operator -> '*=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#316
compound_assignment_operator -> '/=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#317
compound_assignment_operator -> '%=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#318
compound_assignment_operator -> '&=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#319
compound_assignment_operator -> '|=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#320
compound_assignment_operator -> '^=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#321
compound_assignment_operator -> '>>=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#322
compound_assignment_operator -> '<<=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#323
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#324
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#325
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#326
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#327
func_call_statement -> callable argument_expression_list · : {}

#328
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#329
for_statement -> 'for' '(' · for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#330
loop_statement -> 'loop' '{' · loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#331
switch_statement -> 'switch' expression · '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#332
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#333
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#334
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#335
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#336
return_statement -> 'return' return_statement/0.1 · : {}

#337
return_statement/0.1 -> expression · : {}

#338
statement -> const_assert_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#339
statement -> variable_updating_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#340
statement -> 'discard' ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#341
statement -> continue_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#342
statement -> break_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#343
statement -> variable_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#344
statement -> func_call_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#345
statement -> return_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#346
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {}

#347
compound_statement -> '{' compound_statement/0.1 '}' · : {'&' '(' '*' ';' '@' '_' 'alias' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#348
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' ',' '-'}
callable -> ident '::' '<' additive_expression · callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
callable/1.4 -> · callable/1.4/0 : {','}
callable/1.4/0 -> · callable/1.4/0/0.0 callable/1.4/0 : {','}
callable/1.4/0/0.0 -> · ',' additive_expression : {','}

#349
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#350
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {','}

#351
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {','}

#352
expression_comma_list/0.1/0/0.0 -> ',' · expression : {','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {','}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression '&&' relational_expression : {','}
expression -> · short_circuit_or_expression '||' relational_expression : {','}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {','}
relational_expression -> · shift_expression '<' shift_expression : {','}
relational_expression -> · shift_expression '<=' shift_expression : {','}
relational_expression -> · shift_expression '==' shift_expression : {','}
relational_expression -> · shift_expression '>' shift_expression : {','}
relational_expression -> · shift_expression '>=' shift_expression : {','}
relational_expression -> · shift_expression : {','}
shift_expression -> · additive_expression : {','}
shift_expression -> · unary_expression '<<' unary_expression : {','}
shift_expression -> · unary_expression '>>' unary_expression : {','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#353
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#354
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#355
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#356
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#357
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#358
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#359
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'@' 'fn' 'var'}

#360
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#361
attrib_end -> attrib_end/0.0 · ')' : {'@' 'fn' 'var'}

#362
attribute -> '@' 'size' '(' expression attrib_end · : {'@' 'fn' 'var'}

#363
attrib_end/0.0 -> ',' · : {}

#364
attribute -> '@' 'location' '(' expression attrib_end · : {'@' 'fn' 'var'}

#365
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'@' 'fn' 'var'}

#366
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#367
attribute -> '@' 'id' '(' expression attrib_end · : {'@' 'fn' 'var'}

#368
attribute -> '@' 'group' '(' expression attrib_end · : {'@' 'fn' 'var'}

#369
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'@' 'fn' 'var'}

#370
attribute -> '@' 'binding' '(' expression attrib_end · : {'@' 'fn' 'var'}

#371
attribute -> '@' 'align' '(' expression attrib_end · : {'@' 'fn' 'var'}

#372
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#373
interpolation_sample_name -> 'center' · : {')' ','}

#374
interpolation_sample_name -> 'centroid' · : {')' ','}

#375
interpolation_sample_name -> 'sample' · : {')' ','}

#376
attrib_end -> attrib_end/0.0 ')' · : {'@' 'fn' 'var'}

#377
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#378
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#379
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#380
expression_comma_list/0.1/0/0.0 -> ',' expression · : {','}

#381
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {','}

#382
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#383
expression_comma_list/0.2 -> ',' · : {}

#384
callable -> ident '::' '<' additive_expression callable/1.4 · callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable/1.5 -> · ',' : {}

#385
callable/1.4 -> callable/1.4/0 · : {','}

#386
callable/1.4/0 -> callable/1.4/0/0.0 · callable/1.4/0 : {','}
callable/1.4/0 -> · callable/1.4/0/0.0 callable/1.4/0 : {','}
callable/1.4/0/0.0 -> · ',' additive_expression : {','}

#387
callable/1.4/0/0.0 -> ',' · additive_expression : {','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#388
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '{'}
additive_expression -> · multiplicative_expression : {'+' '-' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'{'}
relational_expression -> · shift_expression '<' shift_expression : {'{'}
relational_expression -> · shift_expression '<=' shift_expression : {'{'}
relational_expression -> · shift_expression '==' shift_expression : {'{'}
relational_expression -> · shift_expression '>' shift_expression : {'{'}
relational_expression -> · shift_expression '>=' shift_expression : {'{'}
relational_expression -> · shift_expression : {'{'}
shift_expression -> · additive_expression : {'{'}
shift_expression -> · unary_expression '<<' unary_expression : {'{'}
shift_expression -> · unary_expression '>>' unary_expression : {'{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/' '{'}

#389
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#390
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#391
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#392
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#393
switch_statement -> 'switch' expression '{' · switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default'}
switch_body -> · case_clause : {'case' 'default'}
switch_body -> · default_alone_clause : {'case' 'default'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#394
loop_statement -> 'loop' '{' loop_statement/0.2 · loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.3 -> · continuing_statement : {}

#395
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing'}

#396
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#397
for_statement -> 'for' '(' for_header · ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#398
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#399
for_header/0.0 -> for_init · : {}

#400
for_init -> variable_statement · : {}

#401
for_init -> variable_updating_statement · : {}

#402
for_init -> func_call_statement · : {}

#403
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#404
variable_statement -> variable_decl '=' expression · : {}

#405
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#406
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#407
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#408
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#409
assignment_statement -> '_' '=' expression · : {}

#410
core_lhs_expression -> '(' lhs_expression ')' · : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#411
param/0.0/0 -> attribute param/0.0/0 · : {}

#412
param -> param/0.0 ident · ':' type_specifier : {','}

#413
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#414
param_list/0.1 -> param_list/0.1/0 · : {','}

#415
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {','}
param_list/0.1/0/0.0 -> · ',' param : {','}

#416
param_list/0.1/0/0.0 -> ',' · param : {','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
param -> · param/0.0 ident ':' type_specifier : {','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#417
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {'{'}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {'{'}

#418
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {','}

#419
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {','}

#420
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#421
struct_body_decl/0.3 -> ',' · : {}

#422
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {','}
type_specifier -> · ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {','}
type_specifier -> · ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' : {','}
type_specifier -> · ident : {','}

#423
type_specifier -> ident '::' '<' · additive_expression callable_type/2.4 callable_type/2.5 '>' : {',' '=' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#424
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' ',' '-'}
type_specifier -> ident '<' additive_expression · callable_type/1.3 callable_type/1.4 '>' : {',' '=' '{'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
callable_type/1.3 -> · callable_type/1.3/0 : {','}
callable_type/1.3/0 -> · callable_type/1.3/0/0.0 callable_type/1.3/0 : {','}
callable_type/1.3/0/0.0 -> · ',' additive_expression : {','}

#425
variable_qualifier/0.2 -> ',' access_mode · : {}

#426
access_mode -> 'read' · : {}

#427
access_mode -> 'write' · : {}

#428
access_mode -> 'read_write' · : {}

#429
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#430
type_specifier -> ident '<' additive_expression callable_type/1.3 · callable_type/1.4 '>' : {',' '=' '{'}
callable_type/1.4 -> · ',' : {}

#431
callable_type/1.3 -> callable_type/1.3/0 · : {','}

#432
callable_type/1.3/0 -> callable_type/1.3/0/0.0 · callable_type/1.3/0 : {','}
callable_type/1.3/0 -> · callable_type/1.3/0/0.0 callable_type/1.3/0 : {','}
callable_type/1.3/0/0.0 -> · ',' additive_expression : {','}

#433
callable_type/1.3/0/0.0 -> ',' · additive_expression : {','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#434
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' ',' '-'}
type_specifier -> ident '::' '<' additive_expression · callable_type/2.4 callable_type/2.5 '>' : {',' '=' '{'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
callable_type/2.4 -> · callable_type/2.4/0 : {','}
callable_type/2.4/0 -> · callable_type/2.4/0/0.0 callable_type/2.4/0 : {','}
callable_type/2.4/0/0.0 -> · ',' additive_expression : {','}

#435
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {','}

#436
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {';' '@' 'alias' 'const' 'const_assert' 'fn' 'override' 'struct' 'var' EndOfText}

#437
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {'{'}

#438
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {}

#439
param_list/0.1/0/0.0 -> ',' param · : {','}

#440
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {','}

#441
param_list -> param param_list/0.1 param_list/0.2 · : {}

#442
param_list/0.2 -> ',' · : {}

#443
param -> param/0.0 ident ':' · type_specifier : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {','}
type_specifier -> · ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {','}
type_specifier -> · ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' : {','}
type_specifier -> · ident : {','}

#444
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#445
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#446
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#447
for_statement -> 'for' '(' for_header ')' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#448
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing'}

#449
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#450
loop_statement/0.3 -> continuing_statement · : {}

#451
continuing_statement -> 'continuing' · continuing_compound_statement : {}
continuing_compound_statement -> · '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}

#452
switch_statement -> 'switch' expression '{' switch_statement/0.3 · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#453
switch_statement/0.3 -> switch_statement/0.3/0 · : {}

#454
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default'}
switch_body -> · case_clause : {'case' 'default'}
switch_body -> · default_alone_clause : {'case' 'default'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#455
switch_body -> case_clause · : {'case' 'default'}

#456
switch_body -> default_alone_clause · : {'case' 'default'}

#457
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {'+' ',' '-' ':' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression : {',' ':' '{'}
shift_expression -> · additive_expression : {',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {',' ':' '{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}

#458
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default'}
default_alone_clause/0.1 -> · ':' : {'{'}

#459
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#460
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#461
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' ',' '-'}
callable/1.4/0/0.0 -> ',' additive_expression · : {','}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#462
callable/1.4/0 -> callable/1.4/0/0.0 callable/1.4/0 · : {','}

#463
callable -> ident '::' '<' additive_expression callable/1.4 callable/1.5 · '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#464
callable/1.5 -> ',' · : {}

#465
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'@' 'fn' 'var'}

#466
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#467
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'@' 'fn' 'var'}

#468
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#469
callable -> ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' · : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#470
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#471
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'case' 'default'}

#472
default_alone_clause/0.1 -> ':' · : {'{'}

#473
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default'}
case_clause/0.2 -> · ':' : {'{'}

#474
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '{'}

#475
case_selector -> 'default' · : {',' ':' '{'}

#476
case_selector -> expression · : {',' ':' '{'}

#477
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {}

#478
switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#479
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#480
continuing_compound_statement -> '{' · continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#481
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#482
for_statement -> 'for' '(' for_header ')' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#483
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#484
for_header/0.2 -> expression · : {}

#485
param -> param/0.0 ident ':' type_specifier · : {','}

#486
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
type_specifier -> · ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' : {'{'}
type_specifier -> · ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' : {'{'}
type_specifier -> · ident : {'{'}

#487
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {}

#488
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {}

#489
type_specifier -> ident '::' '<' additive_expression callable_type/2.4 · callable_type/2.5 '>' : {',' '=' '{'}
callable_type/2.5 -> · ',' : {}

#490
callable_type/2.4 -> callable_type/2.4/0 · : {','}

#491
callable_type/2.4/0 -> callable_type/2.4/0/0.0 · callable_type/2.4/0 : {','}
callable_type/2.4/0 -> · callable_type/2.4/0/0.0 callable_type/2.4/0 : {','}
callable_type/2.4/0/0.0 -> · ',' additive_expression : {','}

#492
callable_type/2.4/0/0.0 -> ',' · additive_expression : {','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#493
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' ',' '-'}
callable_type/1.3/0/0.0 -> ',' additive_expression · : {','}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#494
callable_type/1.3/0 -> callable_type/1.3/0/0.0 callable_type/1.3/0 · : {','}

#495
type_specifier -> ident '<' additive_expression callable_type/1.3 callable_type/1.4 · '>' : {',' '=' '{'}

#496
callable_type/1.4 -> ',' · : {}

#497
type_specifier -> ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' · : {',' '=' '{'}

#498
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' ',' '-'}
callable_type/2.4/0/0.0 -> ',' additive_expression · : {','}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#499
callable_type/2.4/0 -> callable_type/2.4/0/0.0 callable_type/2.4/0 · : {','}

#500
type_specifier -> ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 · '>' : {',' '=' '{'}

#501
callable_type/2.5 -> ',' · : {}

#502
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {}

#503
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {'{'}

#504
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#505
continuing_compound_statement -> '{' continuing_compound_statement/0.1 · continuing_compound_statement/0.2 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.2 -> · break_if_statement : {}

#506
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break'}

#507
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#508
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · ',' : {':' '{'}

#509
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#510
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '{'}

#511
case_selectors/0.1/0/0.0 -> ',' · case_selector : {',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {'+' ',' '-' ':' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression : {',' ':' '{'}
shift_expression -> · additive_expression : {',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {',' ':' '{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}

#512
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'case' 'default'}

#513
case_clause/0.2 -> ':' · : {'{'}

#514
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default'}

#515
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'@' 'fn' 'var'}

#516
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default'}

#517
case_selectors/0.1/0/0.0 -> ',' case_selector · : {',' ':' '{'}

#518
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#519
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#520
case_selectors/0.2 -> ',' · : {':' '{'}

#521
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break'}

#522
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 · '}' : {}

#523
continuing_compound_statement/0.2 -> break_if_statement · : {}

#524
break_if_statement -> 'break' · 'if' expression ';' : {}

#525
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#526
for_header/0.4 -> for_update · : {}

#527
for_update -> variable_updating_statement · : {}

#528
for_update -> func_call_statement · : {}

#529
type_specifier -> ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' · : {',' '=' '{'}

#530
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#531
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' · : {}

#532
break_if_statement -> 'break' 'if' expression · ';' : {}

#533
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#2 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#3 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#4 global_decl -> ';' ·
r#5 global_decl -> struct_decl ·
r#6 global_decl -> function_decl ·
r#7 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#8 function_decl/0.0 -> function_decl/0.0/0 ·
r#9 attribute -> '@' 'const' ·
r#10 attribute -> '@' 'invariant' ·
r#11 attribute -> '@' 'vertex' ·
r#12 attribute -> '@' 'fragment' ·
r#13 attribute -> '@' 'compute' ·
r#14 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#15 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#16 expression -> relational_expression ·
r#17 expression -> bitwise_expression ·
r#18 relational_expression -> shift_expression ·
r#19 shift_expression -> additive_expression ·
r#20 multiplicative_expression -> unary_expression ·
r#21 additive_expression -> multiplicative_expression ·
r#22 unary_expression -> singular_expression ·
r#23 primary_expression -> callable ·
r#24 primary_expression -> call_expression ·
r#25 primary_expression -> literal ·
r#26 primary_expression -> paren_expression ·
r#27 callable -> ident ·
r#28 literal -> int_literal ·
r#29 literal -> float_literal ·
r#30 literal -> bool_literal ·
r#31 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#32 int_literal -> decimal_int_literal ·
r#33 int_literal -> hex_int_literal ·
r#34 float_literal -> decimal_float_literal ·
r#35 float_literal -> hex_float_literal ·
r#36 bool_literal -> 'true' ·
r#37 bool_literal -> 'false' ·
r#38 decimal_int_literal -> /0[iu]?/ ·
r#39 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#40 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#41 decimal_float_literal -> /0[fh]/ ·
r#42 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#43 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#44 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#45 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#46 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#47 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#48 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#49 global_decl -> const_assert_statement ';' ·
r#50 global_decl -> type_alias_decl ';' ·
r#51 global_decl -> global_constant_decl ';' ·
r#52 global_decl -> global_variable_decl ';' ·
r#53 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#54 global_directive -> 'enable' extension_name ';' ·
r#55 variable_decl/0.1 -> variable_qualifier ·
r#56 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#57 struct_decl -> 'struct' ident struct_body_decl ·
r#58 function_decl -> function_decl/0.0 function_header compound_statement ·
r#59 call_expression -> callable argument_expression_list ·
r#60 singular_expression -> primary_expression singular_expression/0.1 ·
r#61 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#62 unary_expression -> '&' unary_expression ·
r#63 unary_expression -> '*' unary_expression ·
r#64 unary_expression -> '~' unary_expression ·
r#65 unary_expression -> '!' unary_expression ·
r#66 unary_expression -> '-' unary_expression ·
r#67 multiplicative_operator -> '*' ·
r#68 multiplicative_operator -> '/' ·
r#69 multiplicative_operator -> '%' ·
r#70 additive_operator -> '+' ·
r#71 additive_operator -> '-' ·
r#72 builtin_value_name -> 'vertex_index' ·
r#73 builtin_value_name -> 'instance_index' ·
r#74 builtin_value_name -> 'position' ·
r#75 builtin_value_name -> 'front_facing' ·
r#76 builtin_value_name -> 'frag_depth' ·
r#77 builtin_value_name -> 'local_invocation_id' ·
r#78 builtin_value_name -> 'local_invocation_index' ·
r#79 builtin_value_name -> 'global_invocation_id' ·
r#80 builtin_value_name -> 'workgroup_id' ·
r#81 builtin_value_name -> 'num_workgroups' ·
r#82 builtin_value_name -> 'sample_index' ·
r#83 builtin_value_name -> 'sample_mask' ·
r#84 interpolation_type_name -> 'perspective' ·
r#85 interpolation_type_name -> 'linear' ·
r#86 interpolation_type_name -> 'flat' ·
r#87 expression -> short_circuit_or_expression '||' relational_expression ·
r#88 expression -> short_circuit_and_expression '&&' relational_expression ·
r#89 relational_expression -> shift_expression '!=' shift_expression ·
r#90 relational_expression -> shift_expression '==' shift_expression ·
r#91 relational_expression -> shift_expression '>=' shift_expression ·
r#92 relational_expression -> shift_expression '<=' shift_expression ·
r#93 relational_expression -> shift_expression '>' shift_expression ·
r#94 relational_expression -> shift_expression '<' shift_expression ·
r#95 bitwise_expression -> binary_and_expression '&' unary_expression ·
r#96 bitwise_expression -> binary_or_expression '|' unary_expression ·
r#97 bitwise_expression -> binary_xor_expression '^' unary_expression ·
r#98 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#99 shift_expression -> unary_expression '>>' unary_expression ·
r#100 shift_expression -> unary_expression '<<' unary_expression ·
r#101 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#102 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#103 swizzle_name -> '/[rgba]/' ·
r#104 swizzle_name -> '/[rgba][rgba]/' ·
r#105 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#106 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#107 swizzle_name -> '/[xyzw]/' ·
r#108 swizzle_name -> '/[xyzw][xyzw]/' ·
r#109 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#110 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#111 paren_expression -> '(' expression ')' ·
r#112 statement -> ';' ·
r#113 statement -> if_statement ·
r#114 statement -> switch_statement ·
r#115 statement -> loop_statement ·
r#116 statement -> for_statement ·
r#117 statement -> while_statement ·
r#118 statement -> compound_statement ·
r#119 core_lhs_expression -> ident ·
r#120 type_specifier -> ident ·
r#121 optionally_typed_ident/0.1 -> ':' type_specifier ·
r#122 address_space -> 'function' ·
r#123 address_space -> 'private' ·
r#124 address_space -> 'workgroup' ·
r#125 address_space -> 'uniform' ·
r#126 address_space -> 'storage' ·
r#127 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#128 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#129 lhs_expression -> '&' lhs_expression ·
r#130 lhs_expression -> '*' lhs_expression ·
r#131 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#132 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#133 assignment_statement/0.1 -> '=' ·
r#134 assignment_statement/0.1 -> compound_assignment_operator ·
r#135 compound_assignment_operator -> '+=' ·
r#136 compound_assignment_operator -> '-=' ·
r#137 compound_assignment_operator -> '*=' ·
r#138 compound_assignment_operator -> '/=' ·
r#139 compound_assignment_operator -> '%=' ·
r#140 compound_assignment_operator -> '&=' ·
r#141 compound_assignment_operator -> '|=' ·
r#142 compound_assignment_operator -> '^=' ·
r#143 compound_assignment_operator -> '>>=' ·
r#144 compound_assignment_operator -> '<<=' ·
r#145 if_statement/0.1 -> if_statement/0.1/0 ·
r#146 statement -> const_assert_statement ';' ·
r#147 statement -> variable_updating_statement ';' ·
r#148 statement -> 'discard' ';' ·
r#149 statement -> continue_statement ';' ·
r#150 statement -> break_statement ';' ·
r#151 statement -> variable_statement ';' ·
r#152 statement -> func_call_statement ';' ·
r#153 statement -> return_statement ';' ·
r#154 compound_statement -> '{' compound_statement/0.1 '}' ·
r#155 expression_comma_list/0.1 -> expression_comma_list/0.1/0 ·
r#156 argument_expression_list -> '(' argument_expression_list/0.1 ')' ·
r#157 component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 ·
r#158 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#159 component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 ·
r#160 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#161 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#162 attribute -> '@' 'size' '(' expression attrib_end ·
r#163 attribute -> '@' 'location' '(' expression attrib_end ·
r#164 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#165 attribute -> '@' 'id' '(' expression attrib_end ·
r#166 attribute -> '@' 'group' '(' expression attrib_end ·
r#167 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#168 attribute -> '@' 'binding' '(' expression attrib_end ·
r#169 attribute -> '@' 'align' '(' expression attrib_end ·
r#170 interpolation_sample_name -> 'center' ·
r#171 interpolation_sample_name -> 'centroid' ·
r#172 interpolation_sample_name -> 'sample' ·
r#173 attrib_end -> attrib_end/0.0 ')' ·
r#174 component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 ·
r#175 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#176 expression_comma_list/0.1/0/0.0 -> ',' expression ·
r#177 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ·
r#178 callable/1.4 -> callable/1.4/0 ·
r#179 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#180 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#181 if_statement/0.2 -> else_clause ·
r#182 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#183 while_statement -> 'while' expression compound_statement ·
r#184 if_clause -> 'if' expression compound_statement ·
r#185 core_lhs_expression -> '(' lhs_expression ')' ·
r#186 param_list/0.1 -> param_list/0.1/0 ·
r#187 struct_body_decl/0.2/0/0.0 -> ',' struct_member ·
r#188 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#189 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#190 callable_type/1.3 -> callable_type/1.3/0 ·
r#191 struct_member -> struct_member/0.0 member_ident ':' type_specifier ·
r#192 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#193 function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ·
r#194 param_list/0.1/0/0.0 -> ',' param ·
r#195 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#196 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#197 switch_body -> case_clause ·
r#198 switch_body -> default_alone_clause ·
r#199 else_clause -> 'else' compound_statement ·
r#200 callable/1.4/0/0.0 -> ',' additive_expression ·
r#201 callable/1.4/0 -> callable/1.4/0/0.0 callable/1.4/0 ·
r#202 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#203 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#204 callable -> ident '::' '<' additive_expression callable/1.4 callable/1.5 '>' ·
r#205 else_if_clause -> 'else' 'if' expression compound_statement ·
r#206 default_alone_clause/0.1 -> ':' ·
r#207 case_selector -> 'default' ·
r#208 case_selector -> expression ·
r#209 switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' ·
r#210 loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ·
r#211 for_statement -> 'for' '(' for_header ')' compound_statement ·
r#212 param -> param/0.0 ident ':' type_specifier ·
r#213 callable_type/2.4 -> callable_type/2.4/0 ·
r#214 callable_type/1.3/0/0.0 -> ',' additive_expression ·
r#215 callable_type/1.3/0 -> callable_type/1.3/0/0.0 callable_type/1.3/0 ·
r#216 type_specifier -> ident '<' additive_expression callable_type/1.3 callable_type/1.4 '>' ·
r#217 callable_type/2.4/0/0.0 -> ',' additive_expression ·
r#218 callable_type/2.4/0 -> callable_type/2.4/0/0.0 callable_type/2.4/0 ·
r#219 function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier ·
r#220 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#221 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#222 case_clause/0.2 -> ':' ·
r#223 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#224 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#225 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#226 case_selectors/0.1/0/0.0 -> ',' case_selector ·
r#227 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#228 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#229 case_selectors/0.2 -> ',' ·
r#230 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#231 type_specifier -> ident '::' '<' additive_expression callable_type/2.4 callable_type/2.5 '>' ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#12
[#2 '@']: s#30
[#2 'alias']: s#22
[#2 'const']: s#20
[#2 'const_assert']: s#25
[#2 'struct']: s#23
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'alias']: r#0
[#3 'const']: r#0
[#3 'const_assert']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'struct']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#108
[#8 ';']: r#1
[#8 '@']: r#1
[#8 'alias']: r#1
[#8 'const']: r#1
[#8 'const_assert']: r#1
[#8 'fn']: r#1
[#8 'override']: r#1
[#8 'struct']: r#1
[#8 'var']: r#1
[#8 EndOfText]: r#1
[#9 EndOfText]: r#2
[#10 EndOfText]: r#3
[#11 ';']: s#12
[#11 '@']: s#30
[#11 'alias']: s#22
[#11 'const']: s#20
[#11 'const_assert']: s#25
[#11 'struct']: s#23
[#12 ';']: r#4
[#12 '@']: r#4
[#12 'alias']: r#4
[#12 'const']: r#4
[#12 'const_assert']: r#4
[#12 'fn']: r#4
[#12 'override']: r#4
[#12 'struct']: r#4
[#12 'var']: r#4
[#12 EndOfText]: r#4
[#13 ';']: s#106
[#14 ';']: s#105
[#15 ';']: s#104
[#16 ';']: r#5
[#16 '@']: r#5
[#16 'alias']: r#5
[#16 'const']: r#5
[#16 'const_assert']: r#5
[#16 'fn']: r#5
[#16 'override']: r#5
[#16 'struct']: r#5
[#16 'var']: r#5
[#16 EndOfText]: r#5
[#17 ';']: r#6
[#17 '@']: r#6
[#17 'alias']: r#6
[#17 'const']: r#6
[#17 'const_assert']: r#6
[#17 'fn']: r#6
[#17 'override']: r#6
[#17 'struct']: r#6
[#17 'var']: r#6
[#17 EndOfText]: r#6
[#18 ';']: s#103
[#19 'var']: s#102
[#20 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#21 'override']: s#98
[#22 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#24 'fn']: s#95
[#25 '!']: s#62
[#25 '&']: s#65
[#25 '(']: s#75
[#25 '*']: s#64
[#25 '-']: s#61
[#25 'false']: s#82
[#25 'true']: s#81
[#25 '~']: s#63
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#25 /0[fh]/]: s#86
[#25 /0[iu]?/]: s#83
[#25 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#25 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#25 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#25 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#25 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#25 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#25 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#25 /[1-9][0-9]*[fh]/]: s#87
[#25 /[1-9][0-9]*[iu]?/]: s#84
[#26 'var']: r#7
[#28 'fn']: r#8
[#29 '@']: s#30
[#30 'align']: s#31
[#30 'binding']: s#32
[#30 'builtin']: s#33
[#30 'compute']: s#44
[#30 'const']: s#34
[#30 'fragment']: s#43
[#30 'group']: s#35
[#30 'id']: s#36
[#30 'interpolate']: s#37
[#30 'invariant']: s#38
[#30 'location']: s#39
[#30 'size']: s#40
[#30 'vertex']: s#42
[#30 'workgroup_size']: s#41
[#31 '(']: s#165
[#32 '(']: s#164
[#33 '(']: s#163
[#34 '@']: r#9
[#34 'fn']: r#9
[#34 'var']: r#9
[#35 '(']: s#162
[#36 '(']: s#161
[#37 '(']: s#160
[#38 '@']: r#10
[#38 'fn']: r#10
[#38 'var']: r#10
[#39 '(']: s#159
[#40 '(']: s#158
[#41 '(']: s#157
[#42 '@']: r#11
[#42 'fn']: r#11
[#42 'var']: r#11
[#43 '@']: r#12
[#43 'fn']: r#12
[#43 'var']: r#12
[#44 '@']: r#13
[#44 'fn']: r#13
[#44 'var']: r#13
[#45 'var']: r#14
[#47 'fn']: r#15
[#49 ')']: r#16
[#49 ',']: r#16
[#49 ':']: r#16
[#49 '{']: r#16
[#50 '||']: s#156
[#51 '&&']: s#155
[#52 ')']: r#17
[#52 ',']: r#17
[#52 ':']: r#17
[#52 '{']: r#17
[#53 '!=']: s#154
[#53 ')']: r#18
[#53 ',']: r#18
[#53 ':']: r#18
[#53 '<']: s#149
[#53 '<=']: s#151
[#53 '==']: s#153
[#53 '>']: s#150
[#53 '>=']: s#152
[#53 '{']: r#18
[#54 '&']: s#148
[#55 '|']: s#147
[#56 '^']: s#146
[#57 ')']: r#19
[#57 '+']: s#144
[#57 ',']: r#19
[#57 '-']: s#145
[#57 ':']: r#19
[#57 '{']: r#19
[#58 '%']: r#20
[#58 ')']: r#20
[#58 '*']: r#20
[#58 '+']: r#20
[#58 ',']: r#20
[#58 '-']: r#20
[#58 '/']: r#20
[#58 ':']: r#20
[#58 '<<']: s#141
[#58 '>>']: s#142
[#58 '{']: r#20
[#59 '%']: s#140
[#59 ')']: r#21
[#59 '*']: s#138
[#59 '+']: r#21
[#59 ',']: r#21
[#59 '-']: r#21
[#59 '/']: s#139
[#59 ':']: r#21
[#59 '{']: r#21
[#60 '%']: r#22
[#60 ')']: r#22
[#60 '*']: r#22
[#60 '+']: r#22
[#60 ',']: r#22
[#60 '-']: r#22
[#60 '/']: r#22
[#60 ':']: r#22
[#60 '{']: r#22
[#61 '!']: s#62
[#61 '&']: s#65
[#61 '(']: s#75
[#61 '*']: s#64
[#61 '-']: s#61
[#61 'false']: s#82
[#61 'true']: s#81
[#61 '~']: s#63
[#61 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#61 /0[fh]/]: s#86
[#61 /0[iu]?/]: s#83
[#61 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#61 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#61 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#61 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#61 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#61 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#61 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#61 /[1-9][0-9]*[fh]/]: s#87
[#61 /[1-9][0-9]*[iu]?/]: s#84
[#62 '!']: s#62
[#62 '&']: s#65
[#62 '(']: s#75
[#62 '*']: s#64
[#62 '-']: s#61
[#62 'false']: s#82
[#62 'true']: s#81
[#62 '~']: s#63
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#62 /0[fh]/]: s#86
[#62 /0[iu]?/]: s#83
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#62 /[1-9][0-9]*[fh]/]: s#87
[#62 /[1-9][0-9]*[iu]?/]: s#84
[#63 '!']: s#62
[#63 '&']: s#65
[#63 '(']: s#75
[#63 '*']: s#64
[#63 '-']: s#61
[#63 'false']: s#82
[#63 'true']: s#81
[#63 '~']: s#63
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#63 /0[fh]/]: s#86
[#63 /0[iu]?/]: s#83
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#63 /[1-9][0-9]*[fh]/]: s#87
[#63 /[1-9][0-9]*[iu]?/]: s#84
[#64 '!']: s#62
[#64 '&']: s#65
[#64 '(']: s#75
[#64 '*']: s#64
[#64 '-']: s#61
[#64 'false']: s#82
[#64 'true']: s#81
[#64 '~']: s#63
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#64 /0[fh]/]: s#86
[#64 /0[iu]?/]: s#83
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#64 /[1-9][0-9]*[fh]/]: s#87
[#64 /[1-9][0-9]*[iu]?/]: s#84
[#65 '!']: s#62
[#65 '&']: s#65
[#65 '(']: s#75
[#65 '*']: s#64
[#65 '-']: s#61
[#65 'false']: s#82
[#65 'true']: s#81
[#65 '~']: s#63
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#65 /0[fh]/]: s#86
[#65 /0[iu]?/]: s#83
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#65 /[1-9][0-9]*[fh]/]: s#87
[#65 /[1-9][0-9]*[iu]?/]: s#84
[#66 '.']: s#131
[#66 '[']: s#130
[#67 '%']: r#23
[#67 '(']: s#127
[#67 ')']: r#23
[#67 '*']: r#23
[#67 '+']: r#23
[#67 ',']: r#23
[#67 '-']: r#23
[#67 '.']: r#23
[#67 '/']: r#23
[#67 ':']: r#23
[#67 '[']: r#23
[#67 '{']: r#23
[#68 '%']: r#24
[#68 ')']: r#24
[#68 '*']: r#24
[#68 '+']: r#24
[#68 ',']: r#24
[#68 '-']: r#24
[#68 '.']: r#24
[#68 '/']: r#24
[#68 ':']: r#24
[#68 '[']: r#24
[#68 '{']: r#24
[#69 '%']: r#25
[#69 ')']: r#25
[#69 '*']: r#25
[#69 '+']: r#25
[#69 ',']: r#25
[#69 '-']: r#25
[#69 '.']: r#25
[#69 '/']: r#25
[#69 ':']: r#25
[#69 '[']: r#25
[#69 '{']: r#25
[#70 '%']: r#26
[#70 ')']: r#26
[#70 '*']: r#26
[#70 '+']: r#26
[#70 ',']: r#26
[#70 '-']: r#26
[#70 '.']: r#26
[#70 '/']: r#26
[#70 ':']: r#26
[#70 '[']: r#26
[#70 '{']: r#26
[#71 '%']: r#27
[#71 '(']: r#27
[#71 ')']: r#27
[#71 '*']: r#27
[#71 '+']: r#27
[#71 ',']: r#27
[#71 '-']: r#27
[#71 '.']: r#27
[#71 '/']: r#27
[#71 ':']: r#27
[#71 '::']: s#125
[#71 '[']: r#27
[#71 '{']: r#27
[#72 '%']: r#28
[#72 ')']: r#28
[#72 '*']: r#28
[#72 '+']: r#28
[#72 ',']: r#28
[#72 '-']: r#28
[#72 '.']: r#28
[#72 '/']: r#28
[#72 ':']: r#28
[#72 '[']: r#28
[#72 '{']: r#28
[#73 '%']: r#29
[#73 ')']: r#29
[#73 '*']: r#29
[#73 '+']: r#29
[#73 ',']: r#29
[#73 '-']: r#29
[#73 '.']: r#29
[#73 '/']: r#29
[#73 ':']: r#29
[#73 '[']: r#29
[#73 '{']: r#29
[#74 '%']: r#30
[#74 ')']: r#30
[#74 '*']: r#30
[#74 '+']: r#30
[#74 ',']: r#30
[#74 '-']: r#30
[#74 '.']: r#30
[#74 '/']: r#30
[#74 ':']: r#30
[#74 '[']: r#30
[#74 '{']: r#30
[#75 '!']: s#62
[#75 '&']: s#65
[#75 '(']: s#75
[#75 '*']: s#64
[#75 '-']: s#61
[#75 'false']: s#82
[#75 'true']: s#81
[#75 '~']: s#63
[#75 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#75 /0[fh]/]: s#86
[#75 /0[iu]?/]: s#83
[#75 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#75 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#75 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#75 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#75 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#75 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#75 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#75 /[1-9][0-9]*[fh]/]: s#87
[#75 /[1-9][0-9]*[iu]?/]: s#84
[#76 '%']: r#31
[#76 '%=']: r#31
[#76 '&=']: r#31
[#76 '(']: r#31
[#76 ')']: r#31
[#76 '*']: r#31
[#76 '*=']: r#31
[#76 '+']: r#31
[#76 '+=']: r#31
[#76 ',']: r#31
[#76 '-']: r#31
[#76 '-=']: r#31
[#76 '.']: r#31
[#76 '/']: r#31
[#76 '/=']: r#31
[#76 ':']: r#31
[#76 '<<=']: r#31
[#76 '=']: r#31
[#76 '>>=']: r#31
[#76 '[']: r#31
[#76 '^=']: r#31
[#76 '{']: r#31
[#76 '|=']: r#31
[#77 '%']: r#32
[#77 ')']: r#32
[#77 '*']: r#32
[#77 '+']: r#32
[#77 ',']: r#32
[#77 '-']: r#32
[#77 '.']: r#32
[#77 '/']: r#32
[#77 ':']: r#32
[#77 '[']: r#32
[#77 '{']: r#32
[#78 '%']: r#33
[#78 ')']: r#33
[#78 '*']: r#33
[#78 '+']: r#33
[#78 ',']: r#33
[#78 '-']: r#33
[#78 '.']: r#33
[#78 '/']: r#33
[#78 ':']: r#33
[#78 '[']: r#33
[#78 '{']: r#33
[#79 '%']: r#34
[#79 ')']: r#34
[#79 '*']: r#34
[#79 '+']: r#34
[#79 ',']: r#34
[#79 '-']: r#34
[#79 '.']: r#34
[#79 '/']: r#34
[#79 ':']: r#34
[#79 '[']: r#34
[#79 '{']: r#34
[#80 '%']: r#35
[#80 ')']: r#35
[#80 '*']: r#35
[#80 '+']: r#35
[#80 ',']: r#35
[#80 '-']: r#35
[#80 '.']: r#35
[#80 '/']: r#35
[#80 ':']: r#35
[#80 '[']: r#35
[#80 '{']: r#35
[#81 '%']: r#36
[#81 ')']: r#36
[#81 '*']: r#36
[#81 '+']: r#36
[#81 ',']: r#36
[#81 '-']: r#36
[#81 '.']: r#36
[#81 '/']: r#36
[#81 ':']: r#36
[#81 '[']: r#36
[#81 '{']: r#36
[#82 '%']: r#37
[#82 ')']: r#37
[#82 '*']: r#37
[#82 '+']: r#37
[#82 ',']: r#37
[#82 '-']: r#37
[#82 '.']: r#37
[#82 '/']: r#37
[#82 ':']: r#37
[#82 '[']: r#37
[#82 '{']: r#37
[#83 '%']: r#38
[#83 ')']: r#38
[#83 '*']: r#38
[#83 '+']: r#38
[#83 ',']: r#38
[#83 '-']: r#38
[#83 '.']: r#38
[#83 '/']: r#38
[#83 ':']: r#38
[#83 '[']: r#38
[#83 '{']: r#38
[#84 '%']: r#39
[#84 ')']: r#39
[#84 '*']: r#39
[#84 '+']: r#39
[#84 ',']: r#39
[#84 '-']: r#39
[#84 '.']: r#39
[#84 '/']: r#39
[#84 ':']: r#39
[#84 '[']: r#39
[#84 '{']: r#39
[#85 '%']: r#40
[#85 ')']: r#40
[#85 '*']: r#40
[#85 '+']: r#40
[#85 ',']: r#40
[#85 '-']: r#40
[#85 '.']: r#40
[#85 '/']: r#40
[#85 ':']: r#40
[#85 '[']: r#40
[#85 '{']: r#40
[#86 '%']: r#41
[#86 ')']: r#41
[#86 '*']: r#41
[#86 '+']: r#41
[#86 ',']: r#41
[#86 '-']: r#41
[#86 '.']: r#41
[#86 '/']: r#41
[#86 ':']: r#41
[#86 '[']: r#41
[#86 '{']: r#41
[#87 '%']: r#42
[#87 ')']: r#42
[#87 '*']: r#42
[#87 '+']: r#42
[#87 ',']: r#42
[#87 '-']: r#42
[#87 '.']: r#42
[#87 '/']: r#42
[#87 ':']: r#42
[#87 '[']: r#42
[#87 '{']: r#42
[#88 '%']: r#43
[#88 ')']: r#43
[#88 '*']: r#43
[#88 '+']: r#43
[#88 ',']: r#43
[#88 '-']: r#43
[#88 '.']: r#43
[#88 '/']: r#43
[#88 ':']: r#43
[#88 '[']: r#43
[#88 '{']: r#43
[#89 '%']: r#44
[#89 ')']: r#44
[#89 '*']: r#44
[#89 '+']: r#44
[#89 ',']: r#44
[#89 '-']: r#44
[#89 '.']: r#44
[#89 '/']: r#44
[#89 ':']: r#44
[#89 '[']: r#44
[#89 '{']: r#44
[#90 '%']: r#45
[#90 ')']: r#45
[#90 '*']: r#45
[#90 '+']: r#45
[#90 ',']: r#45
[#90 '-']: r#45
[#90 '.']: r#45
[#90 '/']: r#45
[#90 ':']: r#45
[#90 '[']: r#45
[#90 '{']: r#45
[#91 '%']: r#46
[#91 ')']: r#46
[#91 '*']: r#46
[#91 '+']: r#46
[#91 ',']: r#46
[#91 '-']: r#46
[#91 '.']: r#46
[#91 '/']: r#46
[#91 ':']: r#46
[#91 '[']: r#46
[#91 '{']: r#46
[#92 '%']: r#47
[#92 ')']: r#47
[#92 '*']: r#47
[#92 '+']: r#47
[#92 ',']: r#47
[#92 '-']: r#47
[#92 '.']: r#47
[#92 '/']: r#47
[#92 ':']: r#47
[#92 '[']: r#47
[#92 '{']: r#47
[#93 '%']: r#48
[#93 ')']: r#48
[#93 '*']: r#48
[#93 '+']: r#48
[#93 ',']: r#48
[#93 '-']: r#48
[#93 '.']: r#48
[#93 '/']: r#48
[#93 ':']: r#48
[#93 '[']: r#48
[#93 '{']: r#48
[#94 '{']: s#123
[#95 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#96 '{']: s#120
[#97 '=']: s#118
[#98 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#99 '=']: s#116
[#100 ':']: s#115
[#101 '=']: s#113
[#102 '<']: s#111
[#103 ';']: r#49
[#103 '@']: r#49
[#103 'alias']: r#49
[#103 'const']: r#49
[#103 'const_assert']: r#49
[#103 'fn']: r#49
[#103 'override']: r#49
[#103 'struct']: r#49
[#103 'var']: r#49
[#103 EndOfText]: r#49
[#104 ';']: r#50
[#104 '@']: r#50
[#104 'alias']: r#50
[#104 'const']: r#50
[#104 'const_assert']: r#50
[#104 'fn']: r#50
[#104 'override']: r#50
[#104 'struct']: r#50
[#104 'var']: r#50
[#104 EndOfText]: r#50
[#105 ';']: r#51
[#105 '@']: r#51
[#105 'alias']: r#51
[#105 'const']: r#51
[#105 'const_assert']: r#51
[#105 'fn']: r#51
[#105 'override']: r#51
[#105 'struct']: r#51
[#105 'var']: r#51
[#105 EndOfText]: r#51
[#106 ';']: r#52
[#106 '@']: r#52
[#106 'alias']: r#52
[#106 'const']: r#52
[#106 'const_assert']: r#52
[#106 'fn']: r#52
[#106 'override']: r#52
[#106 'struct']: r#52
[#106 'var']: r#52
[#106 EndOfText]: r#52
[#107 EndOfText]: r#53
[#108 ';']: r#54
[#108 '@']: r#54
[#108 'alias']: r#54
[#108 'const']: r#54
[#108 'const_assert']: r#54
[#108 'enable']: r#54
[#108 'fn']: r#54
[#108 'override']: r#54
[#108 'struct']: r#54
[#108 'var']: r#54
[#108 EndOfText]: r#54
[#109 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#110 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#55
[#111 'function']: s#278
[#111 'private']: s#279
[#111 'storage']: s#282
[#111 'uniform']: s#281
[#111 'workgroup']: s#280
[#113 '!']: s#62
[#113 '&']: s#65
[#113 '(']: s#75
[#113 '*']: s#64
[#113 '-']: s#61
[#113 'false']: s#82
[#113 'true']: s#81
[#113 '~']: s#63
[#113 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#113 /0[fh]/]: s#86
[#113 /0[iu]?/]: s#83
[#113 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#113 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#113 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#113 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#113 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#113 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#113 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#113 /[1-9][0-9]*[fh]/]: s#87
[#113 /[1-9][0-9]*[iu]?/]: s#84
[#114 '=']: r#56
[#115 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#116 '!']: s#62
[#116 '&']: s#65
[#116 '(']: s#75
[#116 '*']: s#64
[#116 '-']: s#61
[#116 'false']: s#82
[#116 'true']: s#81
[#116 '~']: s#63
[#116 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#116 /0[fh]/]: s#86
[#116 /0[iu]?/]: s#83
[#116 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#116 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#116 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#116 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#116 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#116 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#116 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#116 /[1-9][0-9]*[fh]/]: s#87
[#116 /[1-9][0-9]*[iu]?/]: s#84
[#117 '=']: s#273
[#118 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#119 ';']: r#57
[#119 '@']: r#57
[#119 'alias']: r#57
[#119 'const']: r#57
[#119 'const_assert']: r#57
[#119 'fn']: r#57
[#119 'override']: r#57
[#119 'struct']: r#57
[#119 'var']: r#57
[#119 EndOfText]: r#57
[#120 '@']: s#30
[#121 '(']: s#265
[#122 ';']: r#58
[#122 '@']: r#58
[#122 'alias']: r#58
[#122 'const']: r#58
[#122 'const_assert']: r#58
[#122 'fn']: r#58
[#122 'override']: r#58
[#122 'struct']: r#58
[#122 'var']: r#58
[#122 EndOfText]: r#58
[#123 '&']: s#263
[#123 '(']: s#264
[#123 '*']: s#262
[#123 ';']: s#227
[#123 '_']: s#260
[#123 'break']: s#252
[#123 'const']: s#251
[#123 'const_assert']: s#25
[#123 'continue']: s#253
[#123 'discard']: s#238
[#123 'for']: s#246
[#123 'if']: s#257
[#123 'let']: s#250
[#123 'loop']: s#245
[#123 'return']: s#242
[#123 'switch']: s#244
[#123 'var']: s#102
[#123 'while']: s#247
[#123 '{']: s#123
[#123 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#124 ')']: s#223
[#125 '<']: s#222
[#126 '%']: r#59
[#126 ')']: r#59
[#126 '*']: r#59
[#126 '+']: r#59
[#126 ',']: r#59
[#126 '-']: r#59
[#126 '.']: r#59
[#126 '/']: r#59
[#126 ':']: r#59
[#126 '[']: r#59
[#126 '{']: r#59
[#127 '!']: s#62
[#127 '&']: s#65
[#127 '(']: s#75
[#127 '*']: s#64
[#127 '-']: s#61
[#127 'false']: s#82
[#127 'true']: s#81
[#127 '~']: s#63
[#127 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#127 /0[fh]/]: s#86
[#127 /0[iu]?/]: s#83
[#127 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#127 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#127 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#127 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#127 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#127 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#127 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#127 /[1-9][0-9]*[fh]/]: s#87
[#127 /[1-9][0-9]*[iu]?/]: s#84
[#128 '%']: r#60
[#128 ')']: r#60
[#128 '*']: r#60
[#128 '+']: r#60
[#128 ',']: r#60
[#128 '-']: r#60
[#128 '/']: r#60
[#128 ':']: r#60
[#128 '{']: r#60
[#129 '%']: r#61
[#129 ')']: r#61
[#129 '*']: r#61
[#129 '+']: r#61
[#129 ',']: r#61
[#129 '-']: r#61
[#129 '/']: r#61
[#129 ':']: r#61
[#129 '{']: r#61
[#130 '!']: s#62
[#130 '&']: s#65
[#130 '(']: s#75
[#130 '*']: s#64
[#130 '-']: s#61
[#130 'false']: s#82
[#130 'true']: s#81
[#130 '~']: s#63
[#130 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#130 /0[fh]/]: s#86
[#130 /0[iu]?/]: s#83
[#130 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#130 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#130 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#130 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#130 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#130 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#130 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#130 /[1-9][0-9]*[fh]/]: s#87
[#130 /[1-9][0-9]*[iu]?/]: s#84
[#131 '/[rgba]/']: s#210
[#131 '/[rgba][rgba]/']: s#211
[#131 '/[rgba][rgba][rgba]/']: s#212
[#131 '/[rgba][rgba][rgba][rgba]/']: s#213
[#131 '/[xyzw]/']: s#214
[#131 '/[xyzw][xyzw]/']: s#215
[#131 '/[xyzw][xyzw][xyzw]/']: s#216
[#131 '/[xyzw][xyzw][xyzw][xyzw]/']: s#217
[#131 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#209
[#132 '%']: r#62
[#132 ')']: r#62
[#132 '*']: r#62
[#132 '+']: r#62
[#132 ',']: r#62
[#132 '-']: r#62
[#132 '/']: r#62
[#132 ':']: r#62
[#132 '{']: r#62
[#133 '%']: r#63
[#133 ')']: r#63
[#133 '*']: r#63
[#133 '+']: r#63
[#133 ',']: r#63
[#133 '-']: r#63
[#133 '/']: r#63
[#133 ':']: r#63
[#133 '{']: r#63
[#134 '%']: r#64
[#134 ')']: r#64
[#134 '*']: r#64
[#134 '+']: r#64
[#134 ',']: r#64
[#134 '-']: r#64
[#134 '/']: r#64
[#134 ':']: r#64
[#134 '{']: r#64
[#135 '%']: r#65
[#135 ')']: r#65
[#135 '*']: r#65
[#135 '+']: r#65
[#135 ',']: r#65
[#135 '-']: r#65
[#135 '/']: r#65
[#135 ':']: r#65
[#135 '{']: r#65
[#136 '%']: r#66
[#136 ')']: r#66
[#136 '*']: r#66
[#136 '+']: r#66
[#136 ',']: r#66
[#136 '-']: r#66
[#136 '/']: r#66
[#136 ':']: r#66
[#136 '{']: r#66
[#137 '!']: s#62
[#137 '&']: s#65
[#137 '(']: s#75
[#137 '*']: s#64
[#137 '-']: s#61
[#137 'false']: s#82
[#137 'true']: s#81
[#137 '~']: s#63
[#137 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#137 /0[fh]/]: s#86
[#137 /0[iu]?/]: s#83
[#137 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#137 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#137 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#137 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#137 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#137 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#137 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#137 /[1-9][0-9]*[fh]/]: s#87
[#137 /[1-9][0-9]*[iu]?/]: s#84
[#138 '!']: r#67
[#138 '&']: r#67
[#138 '(']: r#67
[#138 '*']: r#67
[#138 '-']: r#67
[#138 'false']: r#67
[#138 'true']: r#67
[#138 '~']: r#67
[#138 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#67
[#138 /0[fh]/]: r#67
[#138 /0[iu]?/]: r#67
[#138 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#67
[#138 /0[xX][0-9a-fA-F]+[iu]?/]: r#67
[#138 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#67
[#138 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#67
[#138 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#67
[#138 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#67
[#138 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#67
[#138 /[1-9][0-9]*[fh]/]: r#67
[#138 /[1-9][0-9]*[iu]?/]: r#67
[#139 '!']: r#68
[#139 '&']: r#68
[#139 '(']: r#68
[#139 '*']: r#68
[#139 '-']: r#68
[#139 'false']: r#68
[#139 'true']: r#68
[#139 '~']: r#68
[#139 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#68
[#139 /0[fh]/]: r#68
[#139 /0[iu]?/]: r#68
[#139 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#68
[#139 /0[xX][0-9a-fA-F]+[iu]?/]: r#68
[#139 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#68
[#139 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#68
[#139 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#68
[#139 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#68
[#139 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#68
[#139 /[1-9][0-9]*[fh]/]: r#68
[#139 /[1-9][0-9]*[iu]?/]: r#68
[#140 '!']: r#69
[#140 '&']: r#69
[#140 '(']: r#69
[#140 '*']: r#69
[#140 '-']: r#69
[#140 'false']: r#69
[#140 'true']: r#69
[#140 '~']: r#69
[#140 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#69
[#140 /0[fh]/]: r#69
[#140 /0[iu]?/]: r#69
[#140 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#69
[#140 /0[xX][0-9a-fA-F]+[iu]?/]: r#69
[#140 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#69
[#140 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#69
[#140 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#69
[#140 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#69
[#140 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#69
[#140 /[1-9][0-9]*[fh]/]: r#69
[#140 /[1-9][0-9]*[iu]?/]: r#69
[#141 '!']: s#62
[#141 '&']: s#65
[#141 '(']: s#75
[#141 '*']: s#64
[#141 '-']: s#61
[#141 'false']: s#82
[#141 'true']: s#81
[#141 '~']: s#63
[#141 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#141 /0[fh]/]: s#86
[#141 /0[iu]?/]: s#83
[#141 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#141 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#141 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#141 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#141 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#141 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#141 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#141 /[1-9][0-9]*[fh]/]: s#87
[#141 /[1-9][0-9]*[iu]?/]: s#84
[#142 '!']: s#62
[#142 '&']: s#65
[#142 '(']: s#75
[#142 '*']: s#64
[#142 '-']: s#61
[#142 'false']: s#82
[#142 'true']: s#81
[#142 '~']: s#63
[#142 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#142 /0[fh]/]: s#86
[#142 /0[iu]?/]: s#83
[#142 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#142 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#142 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#142 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#142 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#142 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#142 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#142 /[1-9][0-9]*[fh]/]: s#87
[#142 /[1-9][0-9]*[iu]?/]: s#84
[#143 '!']: s#62
[#143 '&']: s#65
[#143 '(']: s#75
[#143 '*']: s#64
[#143 '-']: s#61
[#143 'false']: s#82
[#143 'true']: s#81
[#143 '~']: s#63
[#143 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#143 /0[fh]/]: s#86
[#143 /0[iu]?/]: s#83
[#143 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#143 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#143 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#143 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#143 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#143 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#143 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#143 /[1-9][0-9]*[fh]/]: s#87
[#143 /[1-9][0-9]*[iu]?/]: s#84
[#144 '!']: r#70
[#144 '&']: r#70
[#144 '(']: r#70
[#144 '*']: r#70
[#144 '-']: r#70
[#144 'false']: r#70
[#144 'true']: r#70
[#144 '~']: r#70
[#144 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#70
[#144 /0[fh]/]: r#70
[#144 /0[iu]?/]: r#70
[#144 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#70
[#144 /0[xX][0-9a-fA-F]+[iu]?/]: r#70
[#144 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#70
[#144 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#70
[#144 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#70
[#144 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#70
[#144 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#70
[#144 /[1-9][0-9]*[fh]/]: r#70
[#144 /[1-9][0-9]*[iu]?/]: r#70
[#145 '!']: r#71
[#145 '&']: r#71
[#145 '(']: r#71
[#145 '*']: r#71
[#145 '-']: r#71
[#145 'false']: r#71
[#145 'true']: r#71
[#145 '~']: r#71
[#145 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#71
[#145 /0[fh]/]: r#71
[#145 /0[iu]?/]: r#71
[#145 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#71
[#145 /0[xX][0-9a-fA-F]+[iu]?/]: r#71
[#145 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#71
[#145 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#71
[#145 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#71
[#145 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#71
[#145 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#71
[#145 /[1-9][0-9]*[fh]/]: r#71
[#145 /[1-9][0-9]*[iu]?/]: r#71
[#146 '!']: s#62
[#146 '&']: s#65
[#146 '(']: s#75
[#146 '*']: s#64
[#146 '-']: s#61
[#146 'false']: s#82
[#146 'true']: s#81
[#146 '~']: s#63
[#146 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#146 /0[fh]/]: s#86
[#146 /0[iu]?/]: s#83
[#146 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#146 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#146 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#146 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#146 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#146 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#146 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#146 /[1-9][0-9]*[fh]/]: s#87
[#146 /[1-9][0-9]*[iu]?/]: s#84
[#147 '!']: s#62
[#147 '&']: s#65
[#147 '(']: s#75
[#147 '*']: s#64
[#147 '-']: s#61
[#147 'false']: s#82
[#147 'true']: s#81
[#147 '~']: s#63
[#147 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#147 /0[fh]/]: s#86
[#147 /0[iu]?/]: s#83
[#147 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#147 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#147 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#147 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#147 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#147 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#147 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#147 /[1-9][0-9]*[fh]/]: s#87
[#147 /[1-9][0-9]*[iu]?/]: s#84
[#148 '!']: s#62
[#148 '&']: s#65
[#148 '(']: s#75
[#148 '*']: s#64
[#148 '-']: s#61
[#148 'false']: s#82
[#148 'true']: s#81
[#148 '~']: s#63
[#148 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#148 /0[fh]/]: s#86
[#148 /0[iu]?/]: s#83
[#148 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#148 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#148 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#148 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#148 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#148 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#148 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#148 /[1-9][0-9]*[fh]/]: s#87
[#148 /[1-9][0-9]*[iu]?/]: s#84
[#149 '!']: s#62
[#149 '&']: s#65
[#149 '(']: s#75
[#149 '*']: s#64
[#149 '-']: s#61
[#149 'false']: s#82
[#149 'true']: s#81
[#149 '~']: s#63
[#149 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#149 /0[fh]/]: s#86
[#149 /0[iu]?/]: s#83
[#149 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#149 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#149 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#149 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#149 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#149 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#149 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#149 /[1-9][0-9]*[fh]/]: s#87
[#149 /[1-9][0-9]*[iu]?/]: s#84
[#150 '!']: s#62
[#150 '&']: s#65
[#150 '(']: s#75
[#150 '*']: s#64
[#150 '-']: s#61
[#150 'false']: s#82
[#150 'true']: s#81
[#150 '~']: s#63
[#150 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#150 /0[fh]/]: s#86
[#150 /0[iu]?/]: s#83
[#150 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#150 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#150 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#150 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#150 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#150 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#150 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#150 /[1-9][0-9]*[fh]/]: s#87
[#150 /[1-9][0-9]*[iu]?/]: s#84
[#151 '!']: s#62
[#151 '&']: s#65
[#151 '(']: s#75
[#151 '*']: s#64
[#151 '-']: s#61
[#151 'false']: s#82
[#151 'true']: s#81
[#151 '~']: s#63
[#151 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#151 /0[fh]/]: s#86
[#151 /0[iu]?/]: s#83
[#151 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#151 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#151 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#151 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#151 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#151 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#151 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#151 /[1-9][0-9]*[fh]/]: s#87
[#151 /[1-9][0-9]*[iu]?/]: s#84
[#152 '!']: s#62
[#152 '&']: s#65
[#152 '(']: s#75
[#152 '*']: s#64
[#152 '-']: s#61
[#152 'false']: s#82
[#152 'true']: s#81
[#152 '~']: s#63
[#152 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#152 /0[fh]/]: s#86
[#152 /0[iu]?/]: s#83
[#152 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#152 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#152 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#152 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#152 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#152 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#152 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#152 /[1-9][0-9]*[fh]/]: s#87
[#152 /[1-9][0-9]*[iu]?/]: s#84
[#153 '!']: s#62
[#153 '&']: s#65
[#153 '(']: s#75
[#153 '*']: s#64
[#153 '-']: s#61
[#153 'false']: s#82
[#153 'true']: s#81
[#153 '~']: s#63
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#153 /0[fh]/]: s#86
[#153 /0[iu]?/]: s#83
[#153 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#153 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#153 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#153 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#153 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#153 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#153 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#153 /[1-9][0-9]*[fh]/]: s#87
[#153 /[1-9][0-9]*[iu]?/]: s#84
[#154 '!']: s#62
[#154 '&']: s#65
[#154 '(']: s#75
[#154 '*']: s#64
[#154 '-']: s#61
[#154 'false']: s#82
[#154 'true']: s#81
[#154 '~']: s#63
[#154 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#154 /0[fh]/]: s#86
[#154 /0[iu]?/]: s#83
[#154 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#154 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#154 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#154 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#154 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#154 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#154 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#154 /[1-9][0-9]*[fh]/]: s#87
[#154 /[1-9][0-9]*[iu]?/]: s#84
[#155 '!']: s#62
[#155 '&']: s#65
[#155 '(']: s#75
[#155 '*']: s#64
[#155 '-']: s#61
[#155 'false']: s#82
[#155 'true']: s#81
[#155 '~']: s#63
[#155 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#155 /0[fh]/]: s#86
[#155 /0[iu]?/]: s#83
[#155 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#155 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#155 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#155 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#155 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#155 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#155 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#155 /[1-9][0-9]*[fh]/]: s#87
[#155 /[1-9][0-9]*[iu]?/]: s#84
[#156 '!']: s#62
[#156 '&']: s#65
[#156 '(']: s#75
[#156 '*']: s#64
[#156 '-']: s#61
[#156 'false']: s#82
[#156 'true']: s#81
[#156 '~']: s#63
[#156 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#156 /0[fh]/]: s#86
[#156 /0[iu]?/]: s#83
[#156 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#156 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#156 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#156 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#156 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#156 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#156 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#156 /[1-9][0-9]*[fh]/]: s#87
[#156 /[1-9][0-9]*[iu]?/]: s#84
[#157 '!']: s#62
[#157 '&']: s#65
[#157 '(']: s#75
[#157 '*']: s#64
[#157 '-']: s#61
[#157 'false']: s#82
[#157 'true']: s#81
[#157 '~']: s#63
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#157 /0[fh]/]: s#86
[#157 /0[iu]?/]: s#83
[#157 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#157 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#157 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#157 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#157 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#157 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#157 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#157 /[1-9][0-9]*[fh]/]: s#87
[#157 /[1-9][0-9]*[iu]?/]: s#84
[#158 '!']: s#62
[#158 '&']: s#65
[#158 '(']: s#75
[#158 '*']: s#64
[#158 '-']: s#61
[#158 'false']: s#82
[#158 'true']: s#81
[#158 '~']: s#63
[#158 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#158 /0[fh]/]: s#86
[#158 /0[iu]?/]: s#83
[#158 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#158 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#158 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#158 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#158 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#158 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#158 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#158 /[1-9][0-9]*[fh]/]: s#87
[#158 /[1-9][0-9]*[iu]?/]: s#84
[#159 '!']: s#62
[#159 '&']: s#65
[#159 '(']: s#75
[#159 '*']: s#64
[#159 '-']: s#61
[#159 'false']: s#82
[#159 'true']: s#81
[#159 '~']: s#63
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#159 /0[fh]/]: s#86
[#159 /0[iu]?/]: s#83
[#159 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#159 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#159 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#159 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#159 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#159 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#159 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#159 /[1-9][0-9]*[fh]/]: s#87
[#159 /[1-9][0-9]*[iu]?/]: s#84
[#160 'flat']: s#186
[#160 'linear']: s#185
[#160 'perspective']: s#184
[#161 '!']: s#62
[#161 '&']: s#65
[#161 '(']: s#75
[#161 '*']: s#64
[#161 '-']: s#61
[#161 'false']: s#82
[#161 'true']: s#81
[#161 '~']: s#63
[#161 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#161 /0[fh]/]: s#86
[#161 /0[iu]?/]: s#83
[#161 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#161 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#161 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#161 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#161 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#161 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#161 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#161 /[1-9][0-9]*[fh]/]: s#87
[#161 /[1-9][0-9]*[iu]?/]: s#84
[#162 '!']: s#62
[#162 '&']: s#65
[#162 '(']: s#75
[#162 '*']: s#64
[#162 '-']: s#61
[#162 'false']: s#82
[#162 'true']: s#81
[#162 '~']: s#63
[#162 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#162 /0[fh]/]: s#86
[#162 /0[iu]?/]: s#83
[#162 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#162 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#162 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#162 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#162 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#162 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#162 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#162 /[1-9][0-9]*[fh]/]: s#87
[#162 /[1-9][0-9]*[iu]?/]: s#84
[#163 'frag_depth']: s#173
[#163 'front_facing']: s#172
[#163 'global_invocation_id']: s#176
[#163 'instance_index']: s#170
[#163 'local_invocation_id']: s#174
[#163 'local_invocation_index']: s#175
[#163 'num_workgroups']: s#178
[#163 'position']: s#171
[#163 'sample_index']: s#179
[#163 'sample_mask']: s#180
[#163 'vertex_index']: s#169
[#163 'workgroup_id']: s#177
[#164 '!']: s#62
[#164 '&']: s#65
[#164 '(']: s#75
[#164 '*']: s#64
[#164 '-']: s#61
[#164 'false']: s#82
[#164 'true']: s#81
[#164 '~']: s#63
[#164 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#164 /0[fh]/]: s#86
[#164 /0[iu]?/]: s#83
[#164 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#164 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#164 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#164 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#164 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#164 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#164 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#164 /[1-9][0-9]*[fh]/]: s#87
[#164 /[1-9][0-9]*[iu]?/]: s#84
[#165 '!']: s#62
[#165 '&']: s#65
[#165 '(']: s#75
[#165 '*']: s#64
[#165 '-']: s#61
[#165 'false']: s#82
[#165 'true']: s#81
[#165 '~']: s#63
[#165 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#165 /0[fh]/]: s#86
[#165 /0[iu]?/]: s#83
[#165 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#165 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#165 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#165 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#165 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#165 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#165 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#165 /[1-9][0-9]*[fh]/]: s#87
[#165 /[1-9][0-9]*[iu]?/]: s#84
[#166 ',']: s#363
[#167 ',']: s#363
[#168 ',']: s#363
[#169 ')']: r#72
[#169 ',']: r#72
[#170 ')']: r#73
[#170 ',']: r#73
[#171 ')']: r#74
[#171 ',']: r#74
[#172 ')']: r#75
[#172 ',']: r#75
[#173 ')']: r#76
[#173 ',']: r#76
[#174 ')']: r#77
[#174 ',']: r#77
[#175 ')']: r#78
[#175 ',']: r#78
[#176 ')']: r#79
[#176 ',']: r#79
[#177 ')']: r#80
[#177 ',']: r#80
[#178 ')']: r#81
[#178 ',']: r#81
[#179 ')']: r#82
[#179 ',']: r#82
[#180 ')']: r#83
[#180 ',']: r#83
[#181 ',']: s#363
[#182 ',']: s#363
[#183 ',']: s#366
[#184 ')']: r#84
[#184 ',']: r#84
[#185 ')']: r#85
[#185 ',']: r#85
[#186 ')']: r#86
[#186 ',']: r#86
[#187 ',']: s#363
[#188 ',']: s#363
[#189 ',']: s#360
[#190 ')']: r#87
[#190 ',']: r#87
[#190 ':']: r#87
[#190 '{']: r#87
[#191 '%']: r#20
[#191 ')']: r#20
[#191 '*']: r#20
[#191 '+']: r#20
[#191 ',']: r#20
[#191 '-']: r#20
[#191 '/']: r#20
[#191 ':']: r#20
[#191 '<<']: s#141
[#191 '>>']: s#142
[#191 '{']: r#20
[#192 ')']: r#88
[#192 ',']: r#88
[#192 ':']: r#88
[#192 '{']: r#88
[#193 ')']: r#89
[#193 ',']: r#89
[#193 ':']: r#89
[#193 '{']: r#89
[#194 ')']: r#90
[#194 ',']: r#90
[#194 ':']: r#90
[#194 '{']: r#90
[#195 ')']: r#91
[#195 ',']: r#91
[#195 ':']: r#91
[#195 '{']: r#91
[#196 ')']: r#92
[#196 ',']: r#92
[#196 ':']: r#92
[#196 '{']: r#92
[#197 ')']: r#93
[#197 ',']: r#93
[#197 ':']: r#93
[#197 '{']: r#93
[#198 ')']: r#94
[#198 ',']: r#94
[#198 ':']: r#94
[#198 '{']: r#94
[#199 ')']: r#95
[#199 ',']: r#95
[#199 ':']: r#95
[#199 '{']: r#95
[#200 ')']: r#96
[#200 ',']: r#96
[#200 ':']: r#96
[#200 '{']: r#96
[#201 ')']: r#97
[#201 ',']: r#97
[#201 ':']: r#97
[#201 '{']: r#97
[#202 '%']: s#140
[#202 ')']: r#98
[#202 '*']: s#138
[#202 '+']: r#98
[#202 ',']: r#98
[#202 '-']: r#98
[#202 '/']: s#139
[#202 ':']: r#98
[#202 '{']: r#98
[#203 '%']: r#20
[#203 ')']: r#20
[#203 '*']: r#20
[#203 '+']: r#20
[#203 ',']: r#20
[#203 '-']: r#20
[#203 '/']: r#20
[#203 ':']: r#20
[#203 '{']: r#20
[#204 ')']: r#99
[#204 ',']: r#99
[#204 ':']: r#99
[#204 '{']: r#99
[#205 ')']: r#100
[#205 ',']: r#100
[#205 ':']: r#100
[#205 '{']: r#100
[#206 '%']: r#101
[#206 ')']: r#101
[#206 '*']: r#101
[#206 '+']: r#101
[#206 ',']: r#101
[#206 '-']: r#101
[#206 '/']: r#101
[#206 ':']: r#101
[#206 '{']: r#101
[#207 '.']: s#131
[#207 '[']: s#130
[#208 '.']: s#131
[#208 '[']: s#130
[#209 '%']: r#102
[#209 '%=']: r#102
[#209 '&=']: r#102
[#209 ')']: r#102
[#209 '*']: r#102
[#209 '*=']: r#102
[#209 '+']: r#102
[#209 '+=']: r#102
[#209 ',']: r#102
[#209 '-']: r#102
[#209 '-=']: r#102
[#209 '.']: r#102
[#209 '/']: r#102
[#209 '/=']: r#102
[#209 ':']: r#102
[#209 '<<=']: r#102
[#209 '=']: r#102
[#209 '>>=']: r#102
[#209 '[']: r#102
[#209 '^=']: r#102
[#209 '{']: r#102
[#209 '|=']: r#102
[#210 '%']: r#103
[#210 '%=']: r#103
[#210 '&=']: r#103
[#210 ')']: r#103
[#210 '*']: r#103
[#210 '*=']: r#103
[#210 '+']: r#103
[#210 '+=']: r#103
[#210 ',']: r#103
[#210 '-']: r#103
[#210 '-=']: r#103
[#210 '.']: r#103
[#210 '/']: r#103
[#210 '/=']: r#103
[#210 ':']: r#103
[#210 '<<=']: r#103
[#210 '=']: r#103
[#210 '>>=']: r#103
[#210 '[']: r#103
[#210 '^=']: r#103
[#210 '{']: r#103
[#210 '|=']: r#103
[#211 '%']: r#104
[#211 '%=']: r#104
[#211 '&=']: r#104
[#211 ')']: r#104
[#211 '*']: r#104
[#211 '*=']: r#104
[#211 '+']: r#104
[#211 '+=']: r#104
[#211 ',']: r#104
[#211 '-']: r#104
[#211 '-=']: r#104
[#211 '.']: r#104
[#211 '/']: r#104
[#211 '/=']: r#104
[#211 ':']: r#104
[#211 '<<=']: r#104
[#211 '=']: r#104
[#211 '>>=']: r#104
[#211 '[']: r#104
[#211 '^=']: r#104
[#211 '{']: r#104
[#211 '|=']: r#104
[#212 '%']: r#105
[#212 '%=']: r#105
[#212 '&=']: r#105
[#212 ')']: r#105
[#212 '*']: r#105
[#212 '*=']: r#105
[#212 '+']: r#105
[#212 '+=']: r#105
[#212 ',']: r#105
[#212 '-']: r#105
[#212 '-=']: r#105
[#212 '.']: r#105
[#212 '/']: r#105
[#212 '/=']: r#105
[#212 ':']: r#105
[#212 '<<=']: r#105
[#212 '=']: r#105
[#212 '>>=']: r#105
[#212 '[']: r#105
[#212 '^=']: r#105
[#212 '{']: r#105
[#212 '|=']: r#105
[#213 '%']: r#106
[#213 '%=']: r#106
[#213 '&=']: r#106
[#213 ')']: r#106
[#213 '*']: r#106
[#213 '*=']: r#106
[#213 '+']: r#106
[#213 '+=']: r#106
[#213 ',']: r#106
[#213 '-']: r#106
[#213 '-=']: r#106
[#213 '.']: r#106
[#213 '/']: r#106
[#213 '/=']: r#106
[#213 ':']: r#106
[#213 '<<=']: r#106
[#213 '=']: r#106
[#213 '>>=']: r#106
[#213 '[']: r#106
[#213 '^=']: r#106
[#213 '{']: r#106
[#213 '|=']: r#106
[#214 '%']: r#107
[#214 '%=']: r#107
[#214 '&=']: r#107
[#214 ')']: r#107
[#214 '*']: r#107
[#214 '*=']: r#107
[#214 '+']: r#107
[#214 '+=']: r#107
[#214 ',']: r#107
[#214 '-']: r#107
[#214 '-=']: r#107
[#214 '.']: r#107
[#214 '/']: r#107
[#214 '/=']: r#107
[#214 ':']: r#107
[#214 '<<=']: r#107
[#214 '=']: r#107
[#214 '>>=']: r#107
[#214 '[']: r#107
[#214 '^=']: r#107
[#214 '{']: r#107
[#214 '|=']: r#107
[#215 '%']: r#108
[#215 '%=']: r#108
[#215 '&=']: r#108
[#215 ')']: r#108
[#215 '*']: r#108
[#215 '*=']: r#108
[#215 '+']: r#108
[#215 '+=']: r#108
[#215 ',']: r#108
[#215 '-']: r#108
[#215 '-=']: r#108
[#215 '.']: r#108
[#215 '/']: r#108
[#215 '/=']: r#108
[#215 ':']: r#108
[#215 '<<=']: r#108
[#215 '=']: r#108
[#215 '>>=']: r#108
[#215 '[']: r#108
[#215 '^=']: r#108
[#215 '{']: r#108
[#215 '|=']: r#108
[#216 '%']: r#109
[#216 '%=']: r#109
[#216 '&=']: r#109
[#216 ')']: r#109
[#216 '*']: r#109
[#216 '*=']: r#109
[#216 '+']: r#109
[#216 '+=']: r#109
[#216 ',']: r#109
[#216 '-']: r#109
[#216 '-=']: r#109
[#216 '.']: r#109
[#216 '/']: r#109
[#216 '/=']: r#109
[#216 ':']: r#109
[#216 '<<=']: r#109
[#216 '=']: r#109
[#216 '>>=']: r#109
[#216 '[']: r#109
[#216 '^=']: r#109
[#216 '{']: r#109
[#216 '|=']: r#109
[#217 '%']: r#110
[#217 '%=']: r#110
[#217 '&=']: r#110
[#217 ')']: r#110
[#217 '*']: r#110
[#217 '*=']: r#110
[#217 '+']: r#110
[#217 '+=']: r#110
[#217 ',']: r#110
[#217 '-']: r#110
[#217 '-=']: r#110
[#217 '.']: r#110
[#217 '/']: r#110
[#217 '/=']: r#110
[#217 ':']: r#110
[#217 '<<=']: r#110
[#217 '=']: r#110
[#217 '>>=']: r#110
[#217 '[']: r#110
[#217 '^=']: r#110
[#217 '{']: r#110
[#217 '|=']: r#110
[#218 ']']: s#354
[#219 ')']: s#353
[#221 ',']: s#352
[#222 '!']: s#62
[#222 '&']: s#65
[#222 '(']: s#75
[#222 '*']: s#64
[#222 '-']: s#61
[#222 'false']: s#82
[#222 'true']: s#81
[#222 '~']: s#63
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#222 /0[fh]/]: s#86
[#222 /0[iu]?/]: s#83
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#222 /[1-9][0-9]*[fh]/]: s#87
[#222 /[1-9][0-9]*[iu]?/]: s#84
[#223 '%']: r#111
[#223 ')']: r#111
[#223 '*']: r#111
[#223 '+']: r#111
[#223 ',']: r#111
[#223 '-']: r#111
[#223 '.']: r#111
[#223 '/']: r#111
[#223 ':']: r#111
[#223 '[']: r#111
[#223 '{']: r#111
[#224 '}']: s#347
[#226 '&']: s#263
[#226 '(']: s#264
[#226 '*']: s#262
[#226 ';']: s#227
[#226 '_']: s#260
[#226 'break']: s#252
[#226 'const']: s#251
[#226 'const_assert']: s#25
[#226 'continue']: s#253
[#226 'discard']: s#238
[#226 'for']: s#246
[#226 'if']: s#257
[#226 'let']: s#250
[#226 'loop']: s#245
[#226 'return']: s#242
[#226 'switch']: s#244
[#226 'var']: s#102
[#226 'while']: s#247
[#226 '{']: s#123
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#227 '&']: r#112
[#227 '(']: r#112
[#227 '*']: r#112
[#227 ';']: r#112
[#227 '_']: r#112
[#227 'break']: r#112
[#227 'const']: r#112
[#227 'const_assert']: r#112
[#227 'continue']: r#112
[#227 'continuing']: r#112
[#227 'discard']: r#112
[#227 'for']: r#112
[#227 'if']: r#112
[#227 'let']: r#112
[#227 'loop']: r#112
[#227 'return']: r#112
[#227 'switch']: r#112
[#227 'var']: r#112
[#227 'while']: r#112
[#227 '{']: r#112
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#112
[#228 ';']: s#345
[#229 '&']: r#113
[#229 '(']: r#113
[#229 '*']: r#113
[#229 ';']: r#113
[#229 '_']: r#113
[#229 'break']: r#113
[#229 'const']: r#113
[#229 'const_assert']: r#113
[#229 'continue']: r#113
[#229 'continuing']: r#113
[#229 'discard']: r#113
[#229 'for']: r#113
[#229 'if']: r#113
[#229 'let']: r#113
[#229 'loop']: r#113
[#229 'return']: r#113
[#229 'switch']: r#113
[#229 'var']: r#113
[#229 'while']: r#113
[#229 '{']: r#113
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#113
[#230 '&']: r#114
[#230 '(']: r#114
[#230 '*']: r#114
[#230 ';']: r#114
[#230 '_']: r#114
[#230 'break']: r#114
[#230 'const']: r#114
[#230 'const_assert']: r#114
[#230 'continue']: r#114
[#230 'continuing']: r#114
[#230 'discard']: r#114
[#230 'for']: r#114
[#230 'if']: r#114
[#230 'let']: r#114
[#230 'loop']: r#114
[#230 'return']: r#114
[#230 'switch']: r#114
[#230 'var']: r#114
[#230 'while']: r#114
[#230 '{']: r#114
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#114
[#231 '&']: r#115
[#231 '(']: r#115
[#231 '*']: r#115
[#231 ';']: r#115
[#231 '_']: r#115
[#231 'break']: r#115
[#231 'const']: r#115
[#231 'const_assert']: r#115
[#231 'continue']: r#115
[#231 'continuing']: r#115
[#231 'discard']: r#115
[#231 'for']: r#115
[#231 'if']: r#115
[#231 'let']: r#115
[#231 'loop']: r#115
[#231 'return']: r#115
[#231 'switch']: r#115
[#231 'var']: r#115
[#231 'while']: r#115
[#231 '{']: r#115
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#115
[#232 '&']: r#116
[#232 '(']: r#116
[#232 '*']: r#116
[#232 ';']: r#116
[#232 '_']: r#116
[#232 'break']: r#116
[#232 'const']: r#116
[#232 'const_assert']: r#116
[#232 'continue']: r#116
[#232 'continuing']: r#116
[#232 'discard']: r#116
[#232 'for']: r#116
[#232 'if']: r#116
[#232 'let']: r#116
[#232 'loop']: r#116
[#232 'return']: r#116
[#232 'switch']: r#116
[#232 'var']: r#116
[#232 'while']: r#116
[#232 '{']: r#116
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#116
[#233 '&']: r#117
[#233 '(']: r#117
[#233 '*']: r#117
[#233 ';']: r#117
[#233 '_']: r#117
[#233 'break']: r#117
[#233 'const']: r#117
[#233 'const_assert']: r#117
[#233 'continue']: r#117
[#233 'continuing']: r#117
[#233 'discard']: r#117
[#233 'for']: r#117
[#233 'if']: r#117
[#233 'let']: r#117
[#233 'loop']: r#117
[#233 'return']: r#117
[#233 'switch']: r#117
[#233 'var']: r#117
[#233 'while']: r#117
[#233 '{']: r#117
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#117
[#234 ';']: s#344
[#235 ';']: s#343
[#236 ';']: s#342
[#237 ';']: s#341
[#238 ';']: s#340
[#239 ';']: s#339
[#240 '&']: r#118
[#240 '(']: r#118
[#240 '*']: r#118
[#240 ';']: r#118
[#240 '_']: r#118
[#240 'break']: r#118
[#240 'const']: r#118
[#240 'const_assert']: r#118
[#240 'continue']: r#118
[#240 'continuing']: r#118
[#240 'discard']: r#118
[#240 'for']: r#118
[#240 'if']: r#118
[#240 'let']: r#118
[#240 'loop']: r#118
[#240 'return']: r#118
[#240 'switch']: r#118
[#240 'var']: r#118
[#240 'while']: r#118
[#240 '{']: r#118
[#240 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#118
[#241 ';']: s#338
[#242 '!']: s#62
[#242 '&']: s#65
[#242 '(']: s#75
[#242 '*']: s#64
[#242 '-']: s#61
[#242 'false']: s#82
[#242 'true']: s#81
[#242 '~']: s#63
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#242 /0[fh]/]: s#86
[#242 /0[iu]?/]: s#83
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#242 /[1-9][0-9]*[fh]/]: s#87
[#242 /[1-9][0-9]*[iu]?/]: s#84
[#243 'else']: s#335
[#244 '!']: s#62
[#244 '&']: s#65
[#244 '(']: s#75
[#244 '*']: s#64
[#244 '-']: s#61
[#244 'false']: s#82
[#244 'true']: s#81
[#244 '~']: s#63
[#244 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#244 /0[fh]/]: s#86
[#244 /0[iu]?/]: s#83
[#244 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#244 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#244 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#244 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#244 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#244 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#244 /[1-9][0-9]*[fh]/]: s#87
[#244 /[1-9][0-9]*[iu]?/]: s#84
[#245 '{']: s#330
[#246 '(']: s#329
[#247 '!']: s#62
[#247 '&']: s#65
[#247 '(']: s#75
[#247 '*']: s#64
[#247 '-']: s#61
[#247 'false']: s#82
[#247 'true']: s#81
[#247 '~']: s#63
[#247 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#247 /0[fh]/]: s#86
[#247 /0[iu]?/]: s#83
[#247 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#247 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#247 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#247 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#247 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#247 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#247 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#247 /[1-9][0-9]*[fh]/]: s#87
[#247 /[1-9][0-9]*[iu]?/]: s#84
[#248 '(']: s#127
[#249 '=']: s#326
[#250 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#251 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#257 '!']: s#62
[#257 '&']: s#65
[#257 '(']: s#75
[#257 '*']: s#64
[#257 '-']: s#61
[#257 'false']: s#82
[#257 'true']: s#81
[#257 '~']: s#63
[#257 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#257 /0[fh]/]: s#86
[#257 /0[iu]?/]: s#83
[#257 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#257 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#257 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#257 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#257 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#257 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#257 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#257 /[1-9][0-9]*[fh]/]: s#87
[#257 /[1-9][0-9]*[iu]?/]: s#84
[#258 '%=']: r#119
[#258 '&=']: r#119
[#258 '(']: r#27
[#258 '*=']: r#119
[#258 '+=']: r#119
[#258 '-=']: r#119
[#258 '.']: r#119
[#258 '/=']: r#119
[#258 '::']: s#125
[#258 '<<=']: r#119
[#258 '=']: r#119
[#258 '>>=']: r#119
[#258 '[']: r#119
[#258 '^=']: r#119
[#258 '|=']: r#119
[#259 '%=']: s#317
[#259 '&=']: s#318
[#259 '*=']: s#315
[#259 '++']: s#309
[#259 '+=']: s#313
[#259 '--']: s#310
[#259 '-=']: s#314
[#259 '/=']: s#316
[#259 '<<=']: s#322
[#259 '=']: s#311
[#259 '>>=']: s#321
[#259 '^=']: s#320
[#259 '|=']: s#319
[#260 '=']: s#307
[#261 '.']: s#131
[#261 '[']: s#130
[#262 '&']: s#263
[#262 '(']: s#264
[#262 '*']: s#262
[#262 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#263 '&']: s#263
[#263 '(']: s#264
[#263 '*']: s#262
[#263 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#264 '&']: s#263
[#264 '(']: s#264
[#264 '*']: s#262
[#264 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#265 '@']: s#30
[#266 ',']: s#294
[#267 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#209
[#269 '@']: s#30
[#271 ',']: r#120
[#271 '::']: s#288
[#271 '<']: s#287
[#271 '=']: r#120
[#271 '{']: r#120
[#273 '!']: s#62
[#273 '&']: s#65
[#273 '(']: s#75
[#273 '*']: s#64
[#273 '-']: s#61
[#273 'false']: s#82
[#273 'true']: s#81
[#273 '~']: s#63
[#273 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#273 /0[fh]/]: s#86
[#273 /0[iu]?/]: s#83
[#273 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#273 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#273 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#273 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#273 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#273 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#273 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#273 /[1-9][0-9]*[fh]/]: s#87
[#273 /[1-9][0-9]*[iu]?/]: s#84
[#275 '=']: r#121
[#277 ',']: s#285
[#278 ',']: r#122
[#279 ',']: r#123
[#280 ',']: r#124
[#281 ',']: r#125
[#282 ',']: r#126
[#283 '=']: r#127
[#284 '>']: s#429
[#285 'read']: s#426
[#285 'read_write']: s#428
[#285 'write']: s#427
[#287 '!']: s#62
[#287 '&']: s#65
[#287 '(']: s#75
[#287 '*']: s#64
[#287 '-']: s#61
[#287 'false']: s#82
[#287 'true']: s#81
[#287 '~']: s#63
[#287 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#287 /0[fh]/]: s#86
[#287 /0[iu]?/]: s#83
[#287 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#287 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#287 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#287 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#287 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#287 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#287 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#287 /[1-9][0-9]*[fh]/]: s#87
[#287 /[1-9][0-9]*[iu]?/]: s#84
[#288 '<']: s#423
[#290 ':']: s#422
[#291 ',']: s#421
[#292 ',']: r#128
[#293 ',']: s#294
[#294 '@']: s#30
[#295 ')']: s#417
[#297 ',']: s#416
[#298 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#300 '@']: s#30
[#301 ')']: s#410
[#302 '%=']: r#119
[#302 '&=']: r#119
[#302 '*=']: r#119
[#302 '+=']: r#119
[#302 '-=']: r#119
[#302 '.']: r#119
[#302 '/=']: r#119
[#302 '<<=']: r#119
[#302 '=']: r#119
[#302 '>>=']: r#119
[#302 '[']: r#119
[#302 '^=']: r#119
[#302 '|=']: r#119
[#303 '%=']: r#129
[#303 '&=']: r#129
[#303 '*=']: r#129
[#303 '+=']: r#129
[#303 '-=']: r#129
[#303 '/=']: r#129
[#303 '<<=']: r#129
[#303 '=']: r#129
[#303 '>>=']: r#129
[#303 '^=']: r#129
[#303 '|=']: r#129
[#304 '%=']: r#130
[#304 '&=']: r#130
[#304 '*=']: r#130
[#304 '+=']: r#130
[#304 '-=']: r#130
[#304 '/=']: r#130
[#304 '<<=']: r#130
[#304 '=']: r#130
[#304 '>>=']: r#130
[#304 '^=']: r#130
[#304 '|=']: r#130
[#305 '%=']: r#131
[#305 '&=']: r#131
[#305 '*=']: r#131
[#305 '+=']: r#131
[#305 '-=']: r#131
[#305 '/=']: r#131
[#305 '<<=']: r#131
[#305 '=']: r#131
[#305 '>>=']: r#131
[#305 '^=']: r#131
[#305 '|=']: r#131
[#306 '%=']: r#132
[#306 '&=']: r#132
[#306 '*=']: r#132
[#306 '+=']: r#132
[#306 '-=']: r#132
[#306 '/=']: r#132
[#306 '<<=']: r#132
[#306 '=']: r#132
[#306 '>>=']: r#132
[#306 '^=']: r#132
[#306 '|=']: r#132
[#307 '!']: s#62
[#307 '&']: s#65
[#307 '(']: s#75
[#307 '*']: s#64
[#307 '-']: s#61
[#307 'false']: s#82
[#307 'true']: s#81
[#307 '~']: s#63
[#307 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#307 /0[fh]/]: s#86
[#307 /0[iu]?/]: s#83
[#307 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#307 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#307 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#307 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#307 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#307 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#307 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#307 /[1-9][0-9]*[fh]/]: s#87
[#307 /[1-9][0-9]*[iu]?/]: s#84
[#308 '!']: s#62
[#308 '&']: s#65
[#308 '(']: s#75
[#308 '*']: s#64
[#308 '-']: s#61
[#308 'false']: s#82
[#308 'true']: s#81
[#308 '~']: s#63
[#308 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#308 /0[fh]/]: s#86
[#308 /0[iu]?/]: s#83
[#308 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#308 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#308 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#308 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#308 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#308 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#308 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#308 /[1-9][0-9]*[fh]/]: s#87
[#308 /[1-9][0-9]*[iu]?/]: s#84
[#311 '!']: r#133
[#311 '&']: r#133
[#311 '(']: r#133
[#311 '*']: r#133
[#311 '-']: r#133
[#311 'false']: r#133
[#311 'true']: r#133
[#311 '~']: r#133
[#311 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#133
[#311 /0[fh]/]: r#133
[#311 /0[iu]?/]: r#133
[#311 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#133
[#311 /0[xX][0-9a-fA-F]+[iu]?/]: r#133
[#311 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#133
[#311 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#133
[#311 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#133
[#311 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#133
[#311 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#133
[#311 /[1-9][0-9]*[fh]/]: r#133
[#311 /[1-9][0-9]*[iu]?/]: r#133
[#312 '!']: r#134
[#312 '&']: r#134
[#312 '(']: r#134
[#312 '*']: r#134
[#312 '-']: r#134
[#312 'false']: r#134
[#312 'true']: r#134
[#312 '~']: r#134
[#312 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#134
[#312 /0[fh]/]: r#134
[#312 /0[iu]?/]: r#134
[#312 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#312 /0[xX][0-9a-fA-F]+[iu]?/]: r#134
[#312 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#134
[#312 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#312 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#312 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#134
[#312 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#312 /[1-9][0-9]*[fh]/]: r#134
[#312 /[1-9][0-9]*[iu]?/]: r#134
[#313 '!']: r#135
[#313 '&']: r#135
[#313 '(']: r#135
[#313 '*']: r#135
[#313 '-']: r#135
[#313 'false']: r#135
[#313 'true']: r#135
[#313 '~']: r#135
[#313 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#135
[#313 /0[fh]/]: r#135
[#313 /0[iu]?/]: r#135
[#313 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#135
[#313 /0[xX][0-9a-fA-F]+[iu]?/]: r#135
[#313 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#135
[#313 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#135
[#313 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#135
[#313 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#135
[#313 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#135
[#313 /[1-9][0-9]*[fh]/]: r#135
[#313 /[1-9][0-9]*[iu]?/]: r#135
[#314 '!']: r#136
[#314 '&']: r#136
[#314 '(']: r#136
[#314 '*']: r#136
[#314 '-']: r#136
[#314 'false']: r#136
[#314 'true']: r#136
[#314 '~']: r#136
[#314 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#136
[#314 /0[fh]/]: r#136
[#314 /0[iu]?/]: r#136
[#314 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#136
[#314 /0[xX][0-9a-fA-F]+[iu]?/]: r#136
[#314 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#136
[#314 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#136
[#314 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#136
[#314 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#136
[#314 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#136
[#314 /[1-9][0-9]*[fh]/]: r#136
[#314 /[1-9][0-9]*[iu]?/]: r#136
[#315 '!']: r#137
[#315 '&']: r#137
[#315 '(']: r#137
[#315 '*']: r#137
[#315 '-']: r#137
[#315 'false']: r#137
[#315 'true']: r#137
[#315 '~']: r#137
[#315 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#137
[#315 /0[fh]/]: r#137
[#315 /0[iu]?/]: r#137
[#315 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#137
[#315 /0[xX][0-9a-fA-F]+[iu]?/]: r#137
[#315 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#137
[#315 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#137
[#315 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#137
[#315 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#137
[#315 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#137
[#315 /[1-9][0-9]*[fh]/]: r#137
[#315 /[1-9][0-9]*[iu]?/]: r#137
[#316 '!']: r#138
[#316 '&']: r#138
[#316 '(']: r#138
[#316 '*']: r#138
[#316 '-']: r#138
[#316 'false']: r#138
[#316 'true']: r#138
[#316 '~']: r#138
[#316 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#138
[#316 /0[fh]/]: r#138
[#316 /0[iu]?/]: r#138
[#316 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#138
[#316 /0[xX][0-9a-fA-F]+[iu]?/]: r#138
[#316 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#138
[#316 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#138
[#316 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#138
[#316 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#138
[#316 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#138
[#316 /[1-9][0-9]*[fh]/]: r#138
[#316 /[1-9][0-9]*[iu]?/]: r#138
[#317 '!']: r#139
[#317 '&']: r#139
[#317 '(']: r#139
[#317 '*']: r#139
[#317 '-']: r#139
[#317 'false']: r#139
[#317 'true']: r#139
[#317 '~']: r#139
[#317 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#139
[#317 /0[fh]/]: r#139
[#317 /0[iu]?/]: r#139
[#317 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#139
[#317 /0[xX][0-9a-fA-F]+[iu]?/]: r#139
[#317 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#139
[#317 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#139
[#317 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#139
[#317 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#139
[#317 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#139
[#317 /[1-9][0-9]*[fh]/]: r#139
[#317 /[1-9][0-9]*[iu]?/]: r#139
[#318 '!']: r#140
[#318 '&']: r#140
[#318 '(']: r#140
[#318 '*']: r#140
[#318 '-']: r#140
[#318 'false']: r#140
[#318 'true']: r#140
[#318 '~']: r#140
[#318 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#140
[#318 /0[fh]/]: r#140
[#318 /0[iu]?/]: r#140
[#318 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#140
[#318 /0[xX][0-9a-fA-F]+[iu]?/]: r#140
[#318 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#140
[#318 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#140
[#318 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#140
[#318 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#140
[#318 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#140
[#318 /[1-9][0-9]*[fh]/]: r#140
[#318 /[1-9][0-9]*[iu]?/]: r#140
[#319 '!']: r#141
[#319 '&']: r#141
[#319 '(']: r#141
[#319 '*']: r#141
[#319 '-']: r#141
[#319 'false']: r#141
[#319 'true']: r#141
[#319 '~']: r#141
[#319 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#141
[#319 /0[fh]/]: r#141
[#319 /0[iu]?/]: r#141
[#319 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#141
[#319 /0[xX][0-9a-fA-F]+[iu]?/]: r#141
[#319 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#141
[#319 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#141
[#319 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#141
[#319 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#141
[#319 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#141
[#319 /[1-9][0-9]*[fh]/]: r#141
[#319 /[1-9][0-9]*[iu]?/]: r#141
[#320 '!']: r#142
[#320 '&']: r#142
[#320 '(']: r#142
[#320 '*']: r#142
[#320 '-']: r#142
[#320 'false']: r#142
[#320 'true']: r#142
[#320 '~']: r#142
[#320 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#142
[#320 /0[fh]/]: r#142
[#320 /0[iu]?/]: r#142
[#320 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#142
[#320 /0[xX][0-9a-fA-F]+[iu]?/]: r#142
[#320 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#142
[#320 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#142
[#320 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#142
[#320 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#142
[#320 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#142
[#320 /[1-9][0-9]*[fh]/]: r#142
[#320 /[1-9][0-9]*[iu]?/]: r#142
[#321 '!']: r#143
[#321 '&']: r#143
[#321 '(']: r#143
[#321 '*']: r#143
[#321 '-']: r#143
[#321 'false']: r#143
[#321 'true']: r#143
[#321 '~']: r#143
[#321 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#143
[#321 /0[fh]/]: r#143
[#321 /0[iu]?/]: r#143
[#321 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#143
[#321 /0[xX][0-9a-fA-F]+[iu]?/]: r#143
[#321 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#143
[#321 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#143
[#321 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#143
[#321 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#143
[#321 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#143
[#321 /[1-9][0-9]*[fh]/]: r#143
[#321 /[1-9][0-9]*[iu]?/]: r#143
[#322 '!']: r#144
[#322 '&']: r#144
[#322 '(']: r#144
[#322 '*']: r#144
[#322 '-']: r#144
[#322 'false']: r#144
[#322 'true']: r#144
[#322 '~']: r#144
[#322 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#144
[#322 /0[fh]/]: r#144
[#322 /0[iu]?/]: r#144
[#322 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#144
[#322 /0[xX][0-9a-fA-F]+[iu]?/]: r#144
[#322 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#144
[#322 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#144
[#322 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#144
[#322 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#144
[#322 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#144
[#322 /[1-9][0-9]*[fh]/]: r#144
[#322 /[1-9][0-9]*[iu]?/]: r#144
[#323 '{']: s#123
[#324 '=']: s#406
[#325 '=']: s#405
[#326 '!']: s#62
[#326 '&']: s#65
[#326 '(']: s#75
[#326 '*']: s#64
[#326 '-']: s#61
[#326 'false']: s#82
[#326 'true']: s#81
[#326 '~']: s#63
[#326 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#326 /0[fh]/]: s#86
[#326 /0[iu]?/]: s#83
[#326 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#326 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#326 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#326 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#326 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#326 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#326 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#326 /[1-9][0-9]*[fh]/]: s#87
[#326 /[1-9][0-9]*[iu]?/]: s#84
[#328 '{']: s#123
[#329 '&']: s#263
[#329 '(']: s#264
[#329 '*']: s#262
[#329 '_']: s#260
[#329 'const']: s#251
[#329 'let']: s#250
[#329 'var']: s#102
[#329 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#330 '&']: s#263
[#330 '(']: s#264
[#330 '*']: s#262
[#330 ';']: s#227
[#330 '_']: s#260
[#330 'break']: s#252
[#330 'const']: s#251
[#330 'const_assert']: s#25
[#330 'continue']: s#253
[#330 'discard']: s#238
[#330 'for']: s#246
[#330 'if']: s#257
[#330 'let']: s#250
[#330 'loop']: s#245
[#330 'return']: s#242
[#330 'switch']: s#244
[#330 'var']: s#102
[#330 'while']: s#247
[#330 '{']: s#123
[#330 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#331 '{']: s#393
[#332 'else']: s#392
[#333 '&']: r#145
[#333 '(']: r#145
[#333 '*']: r#145
[#333 ';']: r#145
[#333 '_']: r#145
[#333 'break']: r#145
[#333 'const']: r#145
[#333 'const_assert']: r#145
[#333 'continue']: r#145
[#333 'continuing']: r#145
[#333 'discard']: r#145
[#333 'else']: r#145
[#333 'for']: r#145
[#333 'if']: r#145
[#333 'let']: r#145
[#333 'loop']: r#145
[#333 'return']: r#145
[#333 'switch']: r#145
[#333 'var']: r#145
[#333 'while']: r#145
[#333 '{']: r#145
[#333 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#145
[#334 'else']: s#335
[#335 'if']: s#388
[#338 '&']: r#146
[#338 '(']: r#146
[#338 '*']: r#146
[#338 ';']: r#146
[#338 '_']: r#146
[#338 'break']: r#146
[#338 'const']: r#146
[#338 'const_assert']: r#146
[#338 'continue']: r#146
[#338 'continuing']: r#146
[#338 'discard']: r#146
[#338 'for']: r#146
[#338 'if']: r#146
[#338 'let']: r#146
[#338 'loop']: r#146
[#338 'return']: r#146
[#338 'switch']: r#146
[#338 'var']: r#146
[#338 'while']: r#146
[#338 '{']: r#146
[#338 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#146
[#339 '&']: r#147
[#339 '(']: r#147
[#339 '*']: r#147
[#339 ';']: r#147
[#339 '_']: r#147
[#339 'break']: r#147
[#339 'const']: r#147
[#339 'const_assert']: r#147
[#339 'continue']: r#147
[#339 'continuing']: r#147
[#339 'discard']: r#147
[#339 'for']: r#147
[#339 'if']: r#147
[#339 'let']: r#147
[#339 'loop']: r#147
[#339 'return']: r#147
[#339 'switch']: r#147
[#339 'var']: r#147
[#339 'while']: r#147
[#339 '{']: r#147
[#339 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#147
[#340 '&']: r#148
[#340 '(']: r#148
[#340 '*']: r#148
[#340 ';']: r#148
[#340 '_']: r#148
[#340 'break']: r#148
[#340 'const']: r#148
[#340 'const_assert']: r#148
[#340 'continue']: r#148
[#340 'continuing']: r#148
[#340 'discard']: r#148
[#340 'for']: r#148
[#340 'if']: r#148
[#340 'let']: r#148
[#340 'loop']: r#148
[#340 'return']: r#148
[#340 'switch']: r#148
[#340 'var']: r#148
[#340 'while']: r#148
[#340 '{']: r#148
[#340 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#148
[#341 '&']: r#149
[#341 '(']: r#149
[#341 '*']: r#149
[#341 ';']: r#149
[#341 '_']: r#149
[#341 'break']: r#149
[#341 'const']: r#149
[#341 'const_assert']: r#149
[#341 'continue']: r#149
[#341 'continuing']: r#149
[#341 'discard']: r#149
[#341 'for']: r#149
[#341 'if']: r#149
[#341 'let']: r#149
[#341 'loop']: r#149
[#341 'return']: r#149
[#341 'switch']: r#149
[#341 'var']: r#149
[#341 'while']: r#149
[#341 '{']: r#149
[#341 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#149
[#342 '&']: r#150
[#342 '(']: r#150
[#342 '*']: r#150
[#342 ';']: r#150
[#342 '_']: r#150
[#342 'break']: r#150
[#342 'const']: r#150
[#342 'const_assert']: r#150
[#342 'continue']: r#150
[#342 'continuing']: r#150
[#342 'discard']: r#150
[#342 'for']: r#150
[#342 'if']: r#150
[#342 'let']: r#150
[#342 'loop']: r#150
[#342 'return']: r#150
[#342 'switch']: r#150
[#342 'var']: r#150
[#342 'while']: r#150
[#342 '{']: r#150
[#342 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#150
[#343 '&']: r#151
[#343 '(']: r#151
[#343 '*']: r#151
[#343 ';']: r#151
[#343 '_']: r#151
[#343 'break']: r#151
[#343 'const']: r#151
[#343 'const_assert']: r#151
[#343 'continue']: r#151
[#343 'continuing']: r#151
[#343 'discard']: r#151
[#343 'for']: r#151
[#343 'if']: r#151
[#343 'let']: r#151
[#343 'loop']: r#151
[#343 'return']: r#151
[#343 'switch']: r#151
[#343 'var']: r#151
[#343 'while']: r#151
[#343 '{']: r#151
[#343 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#151
[#344 '&']: r#152
[#344 '(']: r#152
[#344 '*']: r#152
[#344 ';']: r#152
[#344 '_']: r#152
[#344 'break']: r#152
[#344 'const']: r#152
[#344 'const_assert']: r#152
[#344 'continue']: r#152
[#344 'continuing']: r#152
[#344 'discard']: r#152
[#344 'for']: r#152
[#344 'if']: r#152
[#344 'let']: r#152
[#344 'loop']: r#152
[#344 'return']: r#152
[#344 'switch']: r#152
[#344 'var']: r#152
[#344 'while']: r#152
[#344 '{']: r#152
[#344 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#152
[#345 '&']: r#153
[#345 '(']: r#153
[#345 '*']: r#153
[#345 ';']: r#153
[#345 '_']: r#153
[#345 'break']: r#153
[#345 'const']: r#153
[#345 'const_assert']: r#153
[#345 'continue']: r#153
[#345 'continuing']: r#153
[#345 'discard']: r#153
[#345 'for']: r#153
[#345 'if']: r#153
[#345 'let']: r#153
[#345 'loop']: r#153
[#345 'return']: r#153
[#345 'switch']: r#153
[#345 'var']: r#153
[#345 'while']: r#153
[#345 '{']: r#153
[#345 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#153
[#347 '&']: r#154
[#347 '(']: r#154
[#347 '*']: r#154
[#347 ';']: r#154
[#347 '@']: r#154
[#347 '_']: r#154
[#347 'alias']: r#154
[#347 'break']: r#154
[#347 'case']: r#154
[#347 'const']: r#154
[#347 'const_assert']: r#154
[#347 'continue']: r#154
[#347 'continuing']: r#154
[#347 'default']: r#154
[#347 'discard']: r#154
[#347 'else']: r#154
[#347 'fn']: r#154
[#347 'for']: r#154
[#347 'if']: r#154
[#347 'let']: r#154
[#347 'loop']: r#154
[#347 'override']: r#154
[#347 'return']: r#154
[#347 'struct']: r#154
[#347 'switch']: r#154
[#347 'var']: r#154
[#347 'while']: r#154
[#347 '{']: r#154
[#347 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#154
[#347 EndOfText]: r#154
[#348 '+']: s#144
[#348 ',']: s#387
[#348 '-']: s#145
[#349 ',']: s#383
[#350 ',']: r#155
[#351 ',']: s#352
[#352 '!']: s#62
[#352 '&']: s#65
[#352 '(']: s#75
[#352 '*']: s#64
[#352 '-']: s#61
[#352 'false']: s#82
[#352 'true']: s#81
[#352 '~']: s#63
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#352 /0[fh]/]: s#86
[#352 /0[iu]?/]: s#83
[#352 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#352 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#352 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#352 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#352 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#352 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#352 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#352 /[1-9][0-9]*[fh]/]: s#87
[#352 /[1-9][0-9]*[iu]?/]: s#84
[#353 '%']: r#156
[#353 ')']: r#156
[#353 '*']: r#156
[#353 '+']: r#156
[#353 ',']: r#156
[#353 '-']: r#156
[#353 '.']: r#156
[#353 '/']: r#156
[#353 ':']: r#156
[#353 '[']: r#156
[#353 '{']: r#156
[#354 '.']: s#131
[#354 '[']: s#130
[#355 '%']: r#157
[#355 '%=']: r#157
[#355 '&=']: r#157
[#355 ')']: r#157
[#355 '*']: r#157
[#355 '*=']: r#157
[#355 '+']: r#157
[#355 '+=']: r#157
[#355 ',']: r#157
[#355 '-']: r#157
[#355 '-=']: r#157
[#355 '/']: r#157
[#355 '/=']: r#157
[#355 ':']: r#157
[#355 '<<=']: r#157
[#355 '=']: r#157
[#355 '>>=']: r#157
[#355 '^=']: r#157
[#355 '{']: r#157
[#355 '|=']: r#157
[#356 '%']: r#158
[#356 '%=']: r#158
[#356 '&=']: r#158
[#356 ')']: r#158
[#356 '*']: r#158
[#356 '*=']: r#158
[#356 '+']: r#158
[#356 '+=']: r#158
[#356 ',']: r#158
[#356 '-']: r#158
[#356 '-=']: r#158
[#356 '/']: r#158
[#356 '/=']: r#158
[#356 ':']: r#158
[#356 '<<=']: r#158
[#356 '=']: r#158
[#356 '>>=']: r#158
[#356 '^=']: r#158
[#356 '{']: r#158
[#356 '|=']: r#158
[#357 '%']: r#159
[#357 '%=']: r#159
[#357 '&=']: r#159
[#357 ')']: r#159
[#357 '*']: r#159
[#357 '*=']: r#159
[#357 '+']: r#159
[#357 '+=']: r#159
[#357 ',']: r#159
[#357 '-']: r#159
[#357 '-=']: r#159
[#357 '/']: r#159
[#357 '/=']: r#159
[#357 ':']: r#159
[#357 '<<=']: r#159
[#357 '=']: r#159
[#357 '>>=']: r#159
[#357 '^=']: r#159
[#357 '{']: r#159
[#357 '|=']: r#159
[#358 '%']: r#160
[#358 '%=']: r#160
[#358 '&=']: r#160
[#358 ')']: r#160
[#358 '*']: r#160
[#358 '*=']: r#160
[#358 '+']: r#160
[#358 '+=']: r#160
[#358 ',']: r#160
[#358 '-']: r#160
[#358 '-=']: r#160
[#358 '/']: r#160
[#358 '/=']: r#160
[#358 ':']: r#160
[#358 '<<=']: r#160
[#358 '=']: r#160
[#358 '>>=']: r#160
[#358 '^=']: r#160
[#358 '{']: r#160
[#358 '|=']: r#160
[#359 '@']: r#161
[#359 'fn']: r#161
[#359 'var']: r#161
[#360 '!']: s#62
[#360 '&']: s#65
[#360 '(']: s#75
[#360 '*']: s#64
[#360 '-']: s#61
[#360 'false']: s#82
[#360 'true']: s#81
[#360 '~']: s#63
[#360 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#360 /0[fh]/]: s#86
[#360 /0[iu]?/]: s#83
[#360 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#360 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#360 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#360 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#360 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#360 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#360 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#360 /[1-9][0-9]*[fh]/]: s#87
[#360 /[1-9][0-9]*[iu]?/]: s#84
[#361 ')']: s#376
[#362 '@']: r#162
[#362 'fn']: r#162
[#362 'var']: r#162
[#364 '@']: r#163
[#364 'fn']: r#163
[#364 'var']: r#163
[#365 '@']: r#164
[#365 'fn']: r#164
[#365 'var']: r#164
[#366 'center']: s#373
[#366 'centroid']: s#374
[#366 'sample']: s#375
[#367 '@']: r#165
[#367 'fn']: r#165
[#367 'var']: r#165
[#368 '@']: r#166
[#368 'fn']: r#166
[#368 'var']: r#166
[#369 '@']: r#167
[#369 'fn']: r#167
[#369 'var']: r#167
[#370 '@']: r#168
[#370 'fn']: r#168
[#370 'var']: r#168
[#371 '@']: r#169
[#371 'fn']: r#169
[#371 'var']: r#169
[#372 ',']: s#363
[#373 ')']: r#170
[#373 ',']: r#170
[#374 ')']: r#171
[#374 ',']: r#171
[#375 ')']: r#172
[#375 ',']: r#172
[#376 '@']: r#173
[#376 'fn']: r#173
[#376 'var']: r#173
[#377 ',']: s#466
[#378 '%']: r#174
[#378 '%=']: r#174
[#378 '&=']: r#174
[#378 ')']: r#174
[#378 '*']: r#174
[#378 '*=']: r#174
[#378 '+']: r#174
[#378 '+=']: r#174
[#378 ',']: r#174
[#378 '-']: r#174
[#378 '-=']: r#174
[#378 '/']: r#174
[#378 '/=']: r#174
[#378 ':']: r#174
[#378 '<<=']: r#174
[#378 '=']: r#174
[#378 '>>=']: r#174
[#378 '^=']: r#174
[#378 '{']: r#174
[#378 '|=']: r#174
[#379 '%']: r#175
[#379 '%=']: r#175
[#379 '&=']: r#175
[#379 ')']: r#175
[#379 '*']: r#175
[#379 '*=']: r#175
[#379 '+']: r#175
[#379 '+=']: r#175
[#379 ',']: r#175
[#379 '-']: r#175
[#379 '-=']: r#175
[#379 '/']: r#175
[#379 '/=']: r#175
[#379 ':']: r#175
[#379 '<<=']: r#175
[#379 '=']: r#175
[#379 '>>=']: r#175
[#379 '^=']: r#175
[#379 '{']: r#175
[#379 '|=']: r#175
[#380 ',']: r#176
[#381 ',']: r#177
[#384 ',']: s#464
[#385 ',']: r#178
[#386 ',']: s#387
[#387 '!']: s#62
[#387 '&']: s#65
[#387 '(']: s#75
[#387 '*']: s#64
[#387 '-']: s#61
[#387 'false']: s#82
[#387 'true']: s#81
[#387 '~']: s#63
[#387 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#387 /0[fh]/]: s#86
[#387 /0[iu]?/]: s#83
[#387 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#387 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#387 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#387 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#387 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#387 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#387 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#387 /[1-9][0-9]*[fh]/]: s#87
[#387 /[1-9][0-9]*[iu]?/]: s#84
[#388 '!']: s#62
[#388 '&']: s#65
[#388 '(']: s#75
[#388 '*']: s#64
[#388 '-']: s#61
[#388 'false']: s#82
[#388 'true']: s#81
[#388 '~']: s#63
[#388 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#388 /0[fh]/]: s#86
[#388 /0[iu]?/]: s#83
[#388 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#388 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#388 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#388 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#388 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#388 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#388 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#388 /[1-9][0-9]*[fh]/]: s#87
[#388 /[1-9][0-9]*[iu]?/]: s#84
[#389 '&']: r#179
[#389 '(']: r#179
[#389 '*']: r#179
[#389 ';']: r#179
[#389 '_']: r#179
[#389 'break']: r#179
[#389 'const']: r#179
[#389 'const_assert']: r#179
[#389 'continue']: r#179
[#389 'continuing']: r#179
[#389 'discard']: r#179
[#389 'else']: r#179
[#389 'for']: r#179
[#389 'if']: r#179
[#389 'let']: r#179
[#389 'loop']: r#179
[#389 'return']: r#179
[#389 'switch']: r#179
[#389 'var']: r#179
[#389 'while']: r#179
[#389 '{']: r#179
[#389 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#179
[#390 '&']: r#180
[#390 '(']: r#180
[#390 '*']: r#180
[#390 ';']: r#180
[#390 '_']: r#180
[#390 'break']: r#180
[#390 'const']: r#180
[#390 'const_assert']: r#180
[#390 'continue']: r#180
[#390 'continuing']: r#180
[#390 'discard']: r#180
[#390 'for']: r#180
[#390 'if']: r#180
[#390 'let']: r#180
[#390 'loop']: r#180
[#390 'return']: r#180
[#390 'switch']: r#180
[#390 'var']: r#180
[#390 'while']: r#180
[#390 '{']: r#180
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#180
[#391 '&']: r#181
[#391 '(']: r#181
[#391 '*']: r#181
[#391 ';']: r#181
[#391 '_']: r#181
[#391 'break']: r#181
[#391 'const']: r#181
[#391 'const_assert']: r#181
[#391 'continue']: r#181
[#391 'continuing']: r#181
[#391 'discard']: r#181
[#391 'for']: r#181
[#391 'if']: r#181
[#391 'let']: r#181
[#391 'loop']: r#181
[#391 'return']: r#181
[#391 'switch']: r#181
[#391 'var']: r#181
[#391 'while']: r#181
[#391 '{']: r#181
[#391 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#181
[#392 '{']: s#123
[#393 'case']: s#457
[#393 'default']: s#458
[#394 'continuing']: s#451
[#395 'continuing']: r#182
[#396 '&']: s#263
[#396 '(']: s#264
[#396 '*']: s#262
[#396 ';']: s#227
[#396 '_']: s#260
[#396 'break']: s#252
[#396 'const']: s#251
[#396 'const_assert']: s#25
[#396 'continue']: s#253
[#396 'discard']: s#238
[#396 'for']: s#246
[#396 'if']: s#257
[#396 'let']: s#250
[#396 'loop']: s#245
[#396 'return']: s#242
[#396 'switch']: s#244
[#396 'var']: s#102
[#396 'while']: s#247
[#396 '{']: s#123
[#396 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#397 ')']: s#447
[#398 ';']: s#446
[#403 '&']: r#183
[#403 '(']: r#183
[#403 '*']: r#183
[#403 ';']: r#183
[#403 '_']: r#183
[#403 'break']: r#183
[#403 'const']: r#183
[#403 'const_assert']: r#183
[#403 'continue']: r#183
[#403 'continuing']: r#183
[#403 'discard']: r#183
[#403 'for']: r#183
[#403 'if']: r#183
[#403 'let']: r#183
[#403 'loop']: r#183
[#403 'return']: r#183
[#403 'switch']: r#183
[#403 'var']: r#183
[#403 'while']: r#183
[#403 '{']: r#183
[#403 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#183
[#405 '!']: s#62
[#405 '&']: s#65
[#405 '(']: s#75
[#405 '*']: s#64
[#405 '-']: s#61
[#405 'false']: s#82
[#405 'true']: s#81
[#405 '~']: s#63
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#405 /0[fh]/]: s#86
[#405 /0[iu]?/]: s#83
[#405 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#405 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#405 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#405 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#405 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#405 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#405 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#405 /[1-9][0-9]*[fh]/]: s#87
[#405 /[1-9][0-9]*[iu]?/]: s#84
[#406 '!']: s#62
[#406 '&']: s#65
[#406 '(']: s#75
[#406 '*']: s#64
[#406 '-']: s#61
[#406 'false']: s#82
[#406 'true']: s#81
[#406 '~']: s#63
[#406 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#406 /0[fh]/]: s#86
[#406 /0[iu]?/]: s#83
[#406 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#406 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#406 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#406 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#406 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#406 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#406 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#406 /[1-9][0-9]*[fh]/]: s#87
[#406 /[1-9][0-9]*[iu]?/]: s#84
[#407 '&']: r#184
[#407 '(']: r#184
[#407 '*']: r#184
[#407 ';']: r#184
[#407 '_']: r#184
[#407 'break']: r#184
[#407 'const']: r#184
[#407 'const_assert']: r#184
[#407 'continue']: r#184
[#407 'continuing']: r#184
[#407 'discard']: r#184
[#407 'else']: r#184
[#407 'for']: r#184
[#407 'if']: r#184
[#407 'let']: r#184
[#407 'loop']: r#184
[#407 'return']: r#184
[#407 'switch']: r#184
[#407 'var']: r#184
[#407 'while']: r#184
[#407 '{']: r#184
[#407 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#184
[#410 '%=']: r#185
[#410 '&=']: r#185
[#410 '*=']: r#185
[#410 '+=']: r#185
[#410 '-=']: r#185
[#410 '.']: r#185
[#410 '/=']: r#185
[#410 '<<=']: r#185
[#410 '=']: r#185
[#410 '>>=']: r#185
[#410 '[']: r#185
[#410 '^=']: r#185
[#410 '|=']: r#185
[#412 ':']: s#443
[#413 ',']: s#442
[#414 ',']: r#186
[#415 ',']: s#416
[#416 '@']: s#30
[#417 '->']: s#438
[#418 ',']: r#187
[#419 ',']: r#188
[#420 '}']: s#436
[#422 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#423 '!']: s#62
[#423 '&']: s#65
[#423 '(']: s#75
[#423 '*']: s#64
[#423 '-']: s#61
[#423 'false']: s#82
[#423 'true']: s#81
[#423 '~']: s#63
[#423 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#423 /0[fh]/]: s#86
[#423 /0[iu]?/]: s#83
[#423 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#423 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#423 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#423 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#423 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#423 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#423 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#423 /[1-9][0-9]*[fh]/]: s#87
[#423 /[1-9][0-9]*[iu]?/]: s#84
[#424 '+']: s#144
[#424 ',']: s#433
[#424 '-']: s#145
[#429 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#189
[#430 ',']: s#496
[#431 ',']: r#190
[#432 ',']: s#433
[#433 '!']: s#62
[#433 '&']: s#65
[#433 '(']: s#75
[#433 '*']: s#64
[#433 '-']: s#61
[#433 'false']: s#82
[#433 'true']: s#81
[#433 '~']: s#63
[#433 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#433 /0[fh]/]: s#86
[#433 /0[iu]?/]: s#83
[#433 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#433 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#433 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#433 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#433 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#433 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#433 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#433 /[1-9][0-9]*[fh]/]: s#87
[#433 /[1-9][0-9]*[iu]?/]: s#84
[#434 '+']: s#144
[#434 ',']: s#492
[#434 '-']: s#145
[#435 ',']: r#191
[#436 ';']: r#192
[#436 '@']: r#192
[#436 'alias']: r#192
[#436 'const']: r#192
[#436 'const_assert']: r#192
[#436 'fn']: r#192
[#436 'override']: r#192
[#436 'struct']: r#192
[#436 'var']: r#192
[#436 EndOfText]: r#192
[#437 '{']: r#193
[#438 '@']: s#30
[#439 ',']: r#194
[#440 ',']: r#195
[#443 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#446 '!']: s#62
[#446 '&']: s#65
[#446 '(']: s#75
[#446 '*']: s#64
[#446 '-']: s#61
[#446 'false']: s#82
[#446 'true']: s#81
[#446 '~']: s#63
[#446 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#446 /0[fh]/]: s#86
[#446 /0[iu]?/]: s#83
[#446 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#446 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#446 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#446 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#446 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#446 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#446 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#446 /[1-9][0-9]*[fh]/]: s#87
[#446 /[1-9][0-9]*[iu]?/]: s#84
[#447 '{']: s#123
[#448 'continuing']: r#196
[#449 '}']: s#481
[#451 '{']: s#480
[#452 '}']: s#478
[#454 'case']: s#457
[#454 'default']: s#458
[#455 'case']: r#197
[#455 'default']: r#197
[#456 'case']: r#198
[#456 'default']: r#198
[#457 '!']: s#62
[#457 '&']: s#65
[#457 '(']: s#75
[#457 '*']: s#64
[#457 '-']: s#61
[#457 'default']: s#475
[#457 'false']: s#82
[#457 'true']: s#81
[#457 '~']: s#63
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#457 /0[fh]/]: s#86
[#457 /0[iu]?/]: s#83
[#457 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#457 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#457 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#457 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#457 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#457 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#457 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#457 /[1-9][0-9]*[fh]/]: s#87
[#457 /[1-9][0-9]*[iu]?/]: s#84
[#458 ':']: s#472
[#459 '&']: r#199
[#459 '(']: r#199
[#459 '*']: r#199
[#459 ';']: r#199
[#459 '_']: r#199
[#459 'break']: r#199
[#459 'const']: r#199
[#459 'const_assert']: r#199
[#459 'continue']: r#199
[#459 'continuing']: r#199
[#459 'discard']: r#199
[#459 'for']: r#199
[#459 'if']: r#199
[#459 'let']: r#199
[#459 'loop']: r#199
[#459 'return']: r#199
[#459 'switch']: r#199
[#459 'var']: r#199
[#459 'while']: r#199
[#459 '{']: r#199
[#459 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#199
[#460 '{']: s#123
[#461 '+']: s#144
[#461 ',']: r#200
[#461 '-']: s#145
[#462 ',']: r#201
[#463 '>']: s#469
[#465 '@']: r#202
[#465 'fn']: r#202
[#465 'var']: r#202
[#466 '!']: s#62
[#466 '&']: s#65
[#466 '(']: s#75
[#466 '*']: s#64
[#466 '-']: s#61
[#466 'false']: s#82
[#466 'true']: s#81
[#466 '~']: s#63
[#466 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#466 /0[fh]/]: s#86
[#466 /0[iu]?/]: s#83
[#466 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#466 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#466 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#466 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#466 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#466 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#466 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#466 /[1-9][0-9]*[fh]/]: s#87
[#466 /[1-9][0-9]*[iu]?/]: s#84
[#467 '@']: r#203
[#467 'fn']: r#203
[#467 'var']: r#203
[#468 ',']: s#363
[#469 '%']: r#204
[#469 '(']: r#204
[#469 ')']: r#204
[#469 '*']: r#204
[#469 '+']: r#204
[#469 ',']: r#204
[#469 '-']: r#204
[#469 '.']: r#204
[#469 '/']: r#204
[#469 ':']: r#204
[#469 '[']: r#204
[#469 '{']: r#204
[#470 '&']: r#205
[#470 '(']: r#205
[#470 '*']: r#205
[#470 ';']: r#205
[#470 '_']: r#205
[#470 'break']: r#205
[#470 'const']: r#205
[#470 'const_assert']: r#205
[#470 'continue']: r#205
[#470 'continuing']: r#205
[#470 'discard']: r#205
[#470 'else']: r#205
[#470 'for']: r#205
[#470 'if']: r#205
[#470 'let']: r#205
[#470 'loop']: r#205
[#470 'return']: r#205
[#470 'switch']: r#205
[#470 'var']: r#205
[#470 'while']: r#205
[#470 '{']: r#205
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#205
[#471 '{']: s#123
[#472 '{']: r#206
[#473 ':']: s#513
[#474 ',']: s#511
[#475 ',']: r#207
[#475 ':']: r#207
[#475 '{']: r#207
[#476 ',']: r#208
[#476 ':']: r#208
[#476 '{']: r#208
[#478 '&']: r#209
[#478 '(']: r#209
[#478 '*']: r#209
[#478 ';']: r#209
[#478 '_']: r#209
[#478 'break']: r#209
[#478 'const']: r#209
[#478 'const_assert']: r#209
[#478 'continue']: r#209
[#478 'continuing']: r#209
[#478 'discard']: r#209
[#478 'for']: r#209
[#478 'if']: r#209
[#478 'let']: r#209
[#478 'loop']: r#209
[#478 'return']: r#209
[#478 'switch']: r#209
[#478 'var']: r#209
[#478 'while']: r#209
[#478 '{']: r#209
[#478 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#209
[#480 '&']: s#263
[#480 '(']: s#264
[#480 '*']: s#262
[#480 ';']: s#227
[#480 '_']: s#260
[#480 'break']: s#252
[#480 'const']: s#251
[#480 'const_assert']: s#25
[#480 'continue']: s#253
[#480 'discard']: s#238
[#480 'for']: s#246
[#480 'if']: s#257
[#480 'let']: s#250
[#480 'loop']: s#245
[#480 'return']: s#242
[#480 'switch']: s#244
[#480 'var']: s#102
[#480 'while']: s#247
[#480 '{']: s#123
[#480 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#481 '&']: r#210
[#481 '(']: r#210
[#481 '*']: r#210
[#481 ';']: r#210
[#481 '_']: r#210
[#481 'break']: r#210
[#481 'const']: r#210
[#481 'const_assert']: r#210
[#481 'continue']: r#210
[#481 'continuing']: r#210
[#481 'discard']: r#210
[#481 'for']: r#210
[#481 'if']: r#210
[#481 'let']: r#210
[#481 'loop']: r#210
[#481 'return']: r#210
[#481 'switch']: r#210
[#481 'var']: r#210
[#481 'while']: r#210
[#481 '{']: r#210
[#481 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#210
[#482 '&']: r#211
[#482 '(']: r#211
[#482 '*']: r#211
[#482 ';']: r#211
[#482 '_']: r#211
[#482 'break']: r#211
[#482 'const']: r#211
[#482 'const_assert']: r#211
[#482 'continue']: r#211
[#482 'continuing']: r#211
[#482 'discard']: r#211
[#482 'for']: r#211
[#482 'if']: r#211
[#482 'let']: r#211
[#482 'loop']: r#211
[#482 'return']: r#211
[#482 'switch']: r#211
[#482 'var']: r#211
[#482 'while']: r#211
[#482 '{']: r#211
[#482 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#211
[#483 ';']: s#504
[#485 ',']: r#212
[#486 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#488 '@']: s#30
[#489 ',']: s#501
[#490 ',']: r#213
[#491 ',']: s#492
[#492 '!']: s#62
[#492 '&']: s#65
[#492 '(']: s#75
[#492 '*']: s#64
[#492 '-']: s#61
[#492 'false']: s#82
[#492 'true']: s#81
[#492 '~']: s#63
[#492 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#492 /0[fh]/]: s#86
[#492 /0[iu]?/]: s#83
[#492 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#492 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#492 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#492 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#492 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#492 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#492 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#492 /[1-9][0-9]*[fh]/]: s#87
[#492 /[1-9][0-9]*[iu]?/]: s#84
[#493 '+']: s#144
[#493 ',']: r#214
[#493 '-']: s#145
[#494 ',']: r#215
[#495 '>']: s#497
[#497 ',']: r#216
[#497 '=']: r#216
[#497 '{']: r#216
[#498 '+']: s#144
[#498 ',']: r#217
[#498 '-']: s#145
[#499 ',']: r#218
[#500 '>']: s#529
[#503 '{']: r#219
[#504 '&']: s#263
[#504 '(']: s#264
[#504 '*']: s#262
[#504 '_']: s#260
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#505 'break']: s#524
[#506 'break']: r#220
[#507 '&']: s#263
[#507 '(']: s#264
[#507 '*']: s#262
[#507 ';']: s#227
[#507 '_']: s#260
[#507 'break']: s#252
[#507 'const']: s#251
[#507 'const_assert']: s#25
[#507 'continue']: s#253
[#507 'discard']: s#238
[#507 'for']: s#246
[#507 'if']: s#257
[#507 'let']: s#250
[#507 'loop']: s#245
[#507 'return']: s#242
[#507 'switch']: s#244
[#507 'var']: s#102
[#507 'while']: s#247
[#507 '{']: s#123
[#507 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#508 ',']: s#520
[#509 ',']: r#221
[#509 ':']: r#221
[#509 '{']: r#221
[#510 ',']: s#511
[#511 '!']: s#62
[#511 '&']: s#65
[#511 '(']: s#75
[#511 '*']: s#64
[#511 '-']: s#61
[#511 'default']: s#475
[#511 'false']: s#82
[#511 'true']: s#81
[#511 '~']: s#63
[#511 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#511 /0[fh]/]: s#86
[#511 /0[iu]?/]: s#83
[#511 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#511 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#511 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#511 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#511 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#511 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#511 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#511 /[1-9][0-9]*[fh]/]: s#87
[#511 /[1-9][0-9]*[iu]?/]: s#84
[#512 '{']: s#123
[#513 '{']: r#222
[#514 'case']: r#223
[#514 'default']: r#223
[#515 '@']: r#224
[#515 'fn']: r#224
[#515 'var']: r#224
[#516 'case']: r#225
[#516 'default']: r#225
[#517 ',']: r#226
[#517 ':']: r#226
[#517 '{']: r#226
[#518 ',']: r#227
[#518 ':']: r#227
[#518 '{']: r#227
[#519 ':']: r#228
[#519 '{']: r#228
[#520 ':']: r#229
[#520 '{']: r#229
[#521 'break']: r#230
[#522 '}']: s#531
[#524 'if']: s#530
[#529 ',']: r#231
[#529 '=']: r#231
[#529 '{']: r#231
[#530 '!']: s#62
[#530 '&']: s#65
[#530 '(']: s#75
[#530 '*']: s#64
[#530 '-']: s#61
[#530 'false']: s#82
[#530 'true']: s#81
[#530 '~']: s#63
[#530 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#530 /0[fh]/]: s#86
[#530 /0[iu]?/]: s#83
[#530 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#530 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#530 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#530 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#530 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#530 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#530 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#530 /[1-9][0-9]*[fh]/]: s#87
[#530 /[1-9][0-9]*[iu]?/]: s#84
[#532 ';']: s#533

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #29
[#2 const_assert_statement]: #18
[#2 function_decl]: #17
[#2 function_decl/0.0]: #24
[#2 function_decl/0.0/0]: #28
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #21
[#2 global_constant_decl/1.0/0]: #27
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #19
[#2 global_variable_decl/0.0/0]: #26
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#11 attribute]: #29
[#11 const_assert_statement]: #18
[#11 function_decl]: #17
[#11 function_decl/0.0]: #24
[#11 function_decl/0.0/0]: #28
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #21
[#11 global_constant_decl/1.0/0]: #27
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #19
[#11 global_variable_decl/0.0/0]: #26
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #107
[#11 type_alias_decl]: #15
[#19 variable_decl]: #101
[#20 ident]: #100
[#20 optionally_typed_ident]: #99
[#22 ident]: #97
[#23 ident]: #96
[#24 function_header]: #94
[#25 additive_expression]: #57
[#25 binary_and_expression]: #54
[#25 binary_or_expression]: #55
[#25 binary_xor_expression]: #56
[#25 bitwise_expression]: #52
[#25 bool_literal]: #74
[#25 call_expression]: #68
[#25 callable]: #67
[#25 decimal_float_literal]: #79
[#25 decimal_int_literal]: #77
[#25 expression]: #48
[#25 float_literal]: #73
[#25 hex_float_literal]: #80
[#25 hex_int_literal]: #78
[#25 ident]: #71
[#25 int_literal]: #72
[#25 literal]: #69
[#25 multiplicative_expression]: #59
[#25 paren_expression]: #70
[#25 primary_expression]: #66
[#25 relational_expression]: #49
[#25 shift_expression]: #53
[#25 short_circuit_and_expression]: #51
[#25 short_circuit_or_expression]: #50
[#25 singular_expression]: #60
[#25 unary_expression]: #58
[#29 attribute]: #29
[#29 function_decl/0.0/0]: #47
[#29 global_constant_decl/1.0/0]: #46
[#29 global_variable_decl/0.0/0]: #45
[#57 additive_operator]: #143
[#59 multiplicative_operator]: #137
[#61 bool_literal]: #74
[#61 call_expression]: #68
[#61 callable]: #67
[#61 decimal_float_literal]: #79
[#61 decimal_int_literal]: #77
[#61 float_literal]: #73
[#61 hex_float_literal]: #80
[#61 hex_int_literal]: #78
[#61 ident]: #71
[#61 int_literal]: #72
[#61 literal]: #69
[#61 paren_expression]: #70
[#61 primary_expression]: #66
[#61 singular_expression]: #60
[#61 unary_expression]: #136
[#62 bool_literal]: #74
[#62 call_expression]: #68
[#62 callable]: #67
[#62 decimal_float_literal]: #79
[#62 decimal_int_literal]: #77
[#62 float_literal]: #73
[#62 hex_float_literal]: #80
[#62 hex_int_literal]: #78
[#62 ident]: #71
[#62 int_literal]: #72
[#62 literal]: #69
[#62 paren_expression]: #70
[#62 primary_expression]: #66
[#62 singular_expression]: #60
[#62 unary_expression]: #135
[#63 bool_literal]: #74
[#63 call_expression]: #68
[#63 callable]: #67
[#63 decimal_float_literal]: #79
[#63 decimal_int_literal]: #77
[#63 float_literal]: #73
[#63 hex_float_literal]: #80
[#63 hex_int_literal]: #78
[#63 ident]: #71
[#63 int_literal]: #72
[#63 literal]: #69
[#63 paren_expression]: #70
[#63 primary_expression]: #66
[#63 singular_expression]: #60
[#63 unary_expression]: #134
[#64 bool_literal]: #74
[#64 call_expression]: #68
[#64 callable]: #67
[#64 decimal_float_literal]: #79
[#64 decimal_int_literal]: #77
[#64 float_literal]: #73
[#64 hex_float_literal]: #80
[#64 hex_int_literal]: #78
[#64 ident]: #71
[#64 int_literal]: #72
[#64 literal]: #69
[#64 paren_expression]: #70
[#64 primary_expression]: #66
[#64 singular_expression]: #60
[#64 unary_expression]: #133
[#65 bool_literal]: #74
[#65 call_expression]: #68
[#65 callable]: #67
[#65 decimal_float_literal]: #79
[#65 decimal_int_literal]: #77
[#65 float_literal]: #73
[#65 hex_float_literal]: #80
[#65 hex_int_literal]: #78
[#65 ident]: #71
[#65 int_literal]: #72
[#65 literal]: #69
[#65 paren_expression]: #70
[#65 primary_expression]: #66
[#65 singular_expression]: #60
[#65 unary_expression]: #132
[#66 component_or_swizzle_specifier]: #129
[#66 singular_expression/0.1]: #128
[#67 argument_expression_list]: #126
[#75 additive_expression]: #57
[#75 binary_and_expression]: #54
[#75 binary_or_expression]: #55
[#75 binary_xor_expression]: #56
[#75 bitwise_expression]: #52
[#75 bool_literal]: #74
[#75 call_expression]: #68
[#75 callable]: #67
[#75 decimal_float_literal]: #79
[#75 decimal_int_literal]: #77
[#75 expression]: #124
[#75 float_literal]: #73
[#75 hex_float_literal]: #80
[#75 hex_int_literal]: #78
[#75 ident]: #71
[#75 int_literal]: #72
[#75 literal]: #69
[#75 multiplicative_expression]: #59
[#75 paren_expression]: #70
[#75 primary_expression]: #66
[#75 relational_expression]: #49
[#75 shift_expression]: #53
[#75 short_circuit_and_expression]: #51
[#75 short_circuit_or_expression]: #50
[#75 singular_expression]: #60
[#75 unary_expression]: #58
[#94 compound_statement]: #122
[#95 ident]: #121
[#96 struct_body_decl]: #119
[#98 ident]: #100
[#98 optionally_typed_ident]: #117
[#100 optionally_typed_ident/0.1]: #114
[#101 global_variable_decl/0.2]: #112
[#102 variable_decl/0.1]: #109
[#102 variable_qualifier]: #110
[#109 ident]: #100
[#109 optionally_typed_ident]: #283
[#111 address_space]: #277
[#113 additive_expression]: #57
[#113 binary_and_expression]: #54
[#113 binary_or_expression]: #55
[#113 binary_xor_expression]: #56
[#113 bitwise_expression]: #52
[#113 bool_literal]: #74
[#113 call_expression]: #68
[#113 callable]: #67
[#113 decimal_float_literal]: #79
[#113 decimal_int_literal]: #77
[#113 expression]: #276
[#113 float_literal]: #73
[#113 hex_float_literal]: #80
[#113 hex_int_literal]: #78
[#113 ident]: #71
[#113 int_literal]: #72
[#113 literal]: #69
[#113 multiplicative_expression]: #59
[#113 paren_expression]: #70
[#113 primary_expression]: #66
[#113 relational_expression]: #49
[#113 shift_expression]: #53
[#113 short_circuit_and_expression]: #51
[#113 short_circuit_or_expression]: #50
[#113 singular_expression]: #60
[#113 unary_expression]: #58
[#115 ident]: #271
[#115 type_specifier]: #275
[#116 additive_expression]: #57
[#116 binary_and_expression]: #54
[#116 binary_or_expression]: #55
[#116 binary_xor_expression]: #56
[#116 bitwise_expression]: #52
[#116 bool_literal]: #74
[#116 call_expression]: #68
[#116 callable]: #67
[#116 decimal_float_literal]: #79
[#116 decimal_int_literal]: #77
[#116 expression]: #274
[#116 float_literal]: #73
[#116 hex_float_literal]: #80
[#116 hex_int_literal]: #78
[#116 ident]: #71
[#116 int_literal]: #72
[#116 literal]: #69
[#116 multiplicative_expression]: #59
[#116 paren_expression]: #70
[#116 primary_expression]: #66
[#116 relational_expression]: #49
[#116 shift_expression]: #53
[#116 short_circuit_and_expression]: #51
[#116 short_circuit_or_expression]: #50
[#116 singular_expression]: #60
[#116 unary_expression]: #58
[#117 global_constant_decl/1.3]: #272
[#118 ident]: #271
[#118 type_specifier]: #270
[#120 attribute]: #269
[#120 struct_member]: #266
[#120 struct_member/0.0]: #267
[#120 struct_member/0.0/0]: #268
[#123 assignment_statement]: #254
[#123 break_statement]: #236
[#123 callable]: #248
[#123 compound_statement]: #240
[#123 compound_statement/0.1]: #224
[#123 compound_statement/0.1/0]: #225
[#123 const_assert_statement]: #241
[#123 continue_statement]: #237
[#123 core_lhs_expression]: #261
[#123 decrement_statement]: #256
[#123 for_statement]: #232
[#123 func_call_statement]: #234
[#123 ident]: #258
[#123 if_clause]: #243
[#123 if_statement]: #229
[#123 increment_statement]: #255
[#123 lhs_expression]: #259
[#123 loop_statement]: #231
[#123 return_statement]: #228
[#123 statement]: #226
[#123 switch_statement]: #230
[#123 variable_decl]: #249
[#123 variable_statement]: #235
[#123 variable_updating_statement]: #239
[#123 while_statement]: #233
[#127 additive_expression]: #57
[#127 argument_expression_list/0.1]: #219
[#127 binary_and_expression]: #54
[#127 binary_or_expression]: #55
[#127 binary_xor_expression]: #56
[#127 bitwise_expression]: #52
[#127 bool_literal]: #74
[#127 call_expression]: #68
[#127 callable]: #67
[#127 decimal_float_literal]: #79
[#127 decimal_int_literal]: #77
[#127 expression]: #221
[#127 expression_comma_list]: #220
[#127 float_literal]: #73
[#127 hex_float_literal]: #80
[#127 hex_int_literal]: #78
[#127 ident]: #71
[#127 int_literal]: #72
[#127 literal]: #69
[#127 multiplicative_expression]: #59
[#127 paren_expression]: #70
[#127 primary_expression]: #66
[#127 relational_expression]: #49
[#127 shift_expression]: #53
[#127 short_circuit_and_expression]: #51
[#127 short_circuit_or_expression]: #50
[#127 singular_expression]: #60
[#127 unary_expression]: #58
[#130 additive_expression]: #57
[#130 binary_and_expression]: #54
[#130 binary_or_expression]: #55
[#130 binary_xor_expression]: #56
[#130 bitwise_expression]: #52
[#130 bool_literal]: #74
[#130 call_expression]: #68
[#130 callable]: #67
[#130 decimal_float_literal]: #79
[#130 decimal_int_literal]: #77
[#130 expression]: #218
[#130 float_literal]: #73
[#130 hex_float_literal]: #80
[#130 hex_int_literal]: #78
[#130 ident]: #71
[#130 int_literal]: #72
[#130 literal]: #69
[#130 multiplicative_expression]: #59
[#130 paren_expression]: #70
[#130 primary_expression]: #66
[#130 relational_expression]: #49
[#130 shift_expression]: #53
[#130 short_circuit_and_expression]: #51
[#130 short_circuit_or_expression]: #50
[#130 singular_expression]: #60
[#130 unary_expression]: #58
[#131 member_ident]: #207
[#131 swizzle_name]: #208
[#137 bool_literal]: #74
[#137 call_expression]: #68
[#137 callable]: #67
[#137 decimal_float_literal]: #79
[#137 decimal_int_literal]: #77
[#137 float_literal]: #73
[#137 hex_float_literal]: #80
[#137 hex_int_literal]: #78
[#137 ident]: #71
[#137 int_literal]: #72
[#137 literal]: #69
[#137 paren_expression]: #70
[#137 primary_expression]: #66
[#137 singular_expression]: #60
[#137 unary_expression]: #206
[#141 bool_literal]: #74
[#141 call_expression]: #68
[#141 callable]: #67
[#141 decimal_float_literal]: #79
[#141 decimal_int_literal]: #77
[#141 float_literal]: #73
[#141 hex_float_literal]: #80
[#141 hex_int_literal]: #78
[#141 ident]: #71
[#141 int_literal]: #72
[#141 literal]: #69
[#141 paren_expression]: #70
[#141 primary_expression]: #66
[#141 singular_expression]: #60
[#141 unary_expression]: #205
[#142 bool_literal]: #74
[#142 call_expression]: #68
[#142 callable]: #67
[#142 decimal_float_literal]: #79
[#142 decimal_int_literal]: #77
[#142 float_literal]: #73
[#142 hex_float_literal]: #80
[#142 hex_int_literal]: #78
[#142 ident]: #71
[#142 int_literal]: #72
[#142 literal]: #69
[#142 paren_expression]: #70
[#142 primary_expression]: #66
[#142 singular_expression]: #60
[#142 unary_expression]: #204
[#143 bool_literal]: #74
[#143 call_expression]: #68
[#143 callable]: #67
[#143 decimal_float_literal]: #79
[#143 decimal_int_literal]: #77
[#143 float_literal]: #73
[#143 hex_float_literal]: #80
[#143 hex_int_literal]: #78
[#143 ident]: #71
[#143 int_literal]: #72
[#143 literal]: #69
[#143 multiplicative_expression]: #202
[#143 paren_expression]: #70
[#143 primary_expression]: #66
[#143 singular_expression]: #60
[#143 unary_expression]: #203
[#146 bool_literal]: #74
[#146 call_expression]: #68
[#146 callable]: #67
[#146 decimal_float_literal]: #79
[#146 decimal_int_literal]: #77
[#146 float_literal]: #73
[#146 hex_float_literal]: #80
[#146 hex_int_literal]: #78
[#146 ident]: #71
[#146 int_literal]: #72
[#146 literal]: #69
[#146 paren_expression]: #70
[#146 primary_expression]: #66
[#146 singular_expression]: #60
[#146 unary_expression]: #201
[#147 bool_literal]: #74
[#147 call_expression]: #68
[#147 callable]: #67
[#147 decimal_float_literal]: #79
[#147 decimal_int_literal]: #77
[#147 float_literal]: #73
[#147 hex_float_literal]: #80
[#147 hex_int_literal]: #78
[#147 ident]: #71
[#147 int_literal]: #72
[#147 literal]: #69
[#147 paren_expression]: #70
[#147 primary_expression]: #66
[#147 singular_expression]: #60
[#147 unary_expression]: #200
[#148 bool_literal]: #74
[#148 call_expression]: #68
[#148 callable]: #67
[#148 decimal_float_literal]: #79
[#148 decimal_int_literal]: #77
[#148 float_literal]: #73
[#148 hex_float_literal]: #80
[#148 hex_int_literal]: #78
[#148 ident]: #71
[#148 int_literal]: #72
[#148 literal]: #69
[#148 paren_expression]: #70
[#148 primary_expression]: #66
[#148 singular_expression]: #60
[#148 unary_expression]: #199
[#149 additive_expression]: #57
[#149 bool_literal]: #74
[#149 call_expression]: #68
[#149 callable]: #67
[#149 decimal_float_literal]: #79
[#149 decimal_int_literal]: #77
[#149 float_literal]: #73
[#149 hex_float_literal]: #80
[#149 hex_int_literal]: #78
[#149 ident]: #71
[#149 int_literal]: #72
[#149 literal]: #69
[#149 multiplicative_expression]: #59
[#149 paren_expression]: #70
[#149 primary_expression]: #66
[#149 shift_expression]: #198
[#149 singular_expression]: #60
[#149 unary_expression]: #191
[#150 additive_expression]: #57
[#150 bool_literal]: #74
[#150 call_expression]: #68
[#150 callable]: #67
[#150 decimal_float_literal]: #79
[#150 decimal_int_literal]: #77
[#150 float_literal]: #73
[#150 hex_float_literal]: #80
[#150 hex_int_literal]: #78
[#150 ident]: #71
[#150 int_literal]: #72
[#150 literal]: #69
[#150 multiplicative_expression]: #59
[#150 paren_expression]: #70
[#150 primary_expression]: #66
[#150 shift_expression]: #197
[#150 singular_expression]: #60
[#150 unary_expression]: #191
[#151 additive_expression]: #57
[#151 bool_literal]: #74
[#151 call_expression]: #68
[#151 callable]: #67
[#151 decimal_float_literal]: #79
[#151 decimal_int_literal]: #77
[#151 float_literal]: #73
[#151 hex_float_literal]: #80
[#151 hex_int_literal]: #78
[#151 ident]: #71
[#151 int_literal]: #72
[#151 literal]: #69
[#151 multiplicative_expression]: #59
[#151 paren_expression]: #70
[#151 primary_expression]: #66
[#151 shift_expression]: #196
[#151 singular_expression]: #60
[#151 unary_expression]: #191
[#152 additive_expression]: #57
[#152 bool_literal]: #74
[#152 call_expression]: #68
[#152 callable]: #67
[#152 decimal_float_literal]: #79
[#152 decimal_int_literal]: #77
[#152 float_literal]: #73
[#152 hex_float_literal]: #80
[#152 hex_int_literal]: #78
[#152 ident]: #71
[#152 int_literal]: #72
[#152 literal]: #69
[#152 multiplicative_expression]: #59
[#152 paren_expression]: #70
[#152 primary_expression]: #66
[#152 shift_expression]: #195
[#152 singular_expression]: #60
[#152 unary_expression]: #191
[#153 additive_expression]: #57
[#153 bool_literal]: #74
[#153 call_expression]: #68
[#153 callable]: #67
[#153 decimal_float_literal]: #79
[#153 decimal_int_literal]: #77
[#153 float_literal]: #73
[#153 hex_float_literal]: #80
[#153 hex_int_literal]: #78
[#153 ident]: #71
[#153 int_literal]: #72
[#153 literal]: #69
[#153 multiplicative_expression]: #59
[#153 paren_expression]: #70
[#153 primary_expression]: #66
[#153 shift_expression]: #194
[#153 singular_expression]: #60
[#153 unary_expression]: #191
[#154 additive_expression]: #57
[#154 bool_literal]: #74
[#154 call_expression]: #68
[#154 callable]: #67
[#154 decimal_float_literal]: #79
[#154 decimal_int_literal]: #77
[#154 float_literal]: #73
[#154 hex_float_literal]: #80
[#154 hex_int_literal]: #78
[#154 ident]: #71
[#154 int_literal]: #72
[#154 literal]: #69
[#154 multiplicative_expression]: #59
[#154 paren_expression]: #70
[#154 primary_expression]: #66
[#154 shift_expression]: #193
[#154 singular_expression]: #60
[#154 unary_expression]: #191
[#155 additive_expression]: #57
[#155 bool_literal]: #74
[#155 call_expression]: #68
[#155 callable]: #67
[#155 decimal_float_literal]: #79
[#155 decimal_int_literal]: #77
[#155 float_literal]: #73
[#155 hex_float_literal]: #80
[#155 hex_int_literal]: #78
[#155 ident]: #71
[#155 int_literal]: #72
[#155 literal]: #69
[#155 multiplicative_expression]: #59
[#155 paren_expression]: #70
[#155 primary_expression]: #66
[#155 relational_expression]: #192
[#155 shift_expression]: #53
[#155 singular_expression]: #60
[#155 unary_expression]: #191
[#156 additive_expression]: #57
[#156 bool_literal]: #74
[#156 call_expression]: #68
[#156 callable]: #67
[#156 decimal_float_literal]: #79
[#156 decimal_int_literal]: #77
[#156 float_literal]: #73
[#156 hex_float_literal]: #80
[#156 hex_int_literal]: #78
[#156 ident]: #71
[#156 int_literal]: #72
[#156 literal]: #69
[#156 multiplicative_expression]: #59
[#156 paren_expression]: #70
[#156 primary_expression]: #66
[#156 relational_expression]: #190
[#156 shift_expression]: #53
[#156 singular_expression]: #60
[#156 unary_expression]: #191
[#157 additive_expression]: #57
[#157 binary_and_expression]: #54
[#157 binary_or_expression]: #55
[#157 binary_xor_expression]: #56
[#157 bitwise_expression]: #52
[#157 bool_literal]: #74
[#157 call_expression]: #68
[#157 callable]: #67
[#157 decimal_float_literal]: #79
[#157 decimal_int_literal]: #77
[#157 expression]: #189
[#157 float_literal]: #73
[#157 hex_float_literal]: #80
[#157 hex_int_literal]: #78
[#157 ident]: #71
[#157 int_literal]: #72
[#157 literal]: #69
[#157 multiplicative_expression]: #59
[#157 paren_expression]: #70
[#157 primary_expression]: #66
[#157 relational_expression]: #49
[#157 shift_expression]: #53
[#157 short_circuit_and_expression]: #51
[#157 short_circuit_or_expression]: #50
[#157 singular_expression]: #60
[#157 unary_expression]: #58
[#158 additive_expression]: #57
[#158 binary_and_expression]: #54
[#158 binary_or_expression]: #55
[#158 binary_xor_expression]: #56
[#158 bitwise_expression]: #52
[#158 bool_literal]: #74
[#158 call_expression]: #68
[#158 callable]: #67
[#158 decimal_float_literal]: #79
[#158 decimal_int_literal]: #77
[#158 expression]: #188
[#158 float_literal]: #73
[#158 hex_float_literal]: #80
[#158 hex_int_literal]: #78
[#158 ident]: #71
[#158 int_literal]: #72
[#158 literal]: #69
[#158 multiplicative_expression]: #59
[#158 paren_expression]: #70
[#158 primary_expression]: #66
[#158 relational_expression]: #49
[#158 shift_expression]: #53
[#158 short_circuit_and_expression]: #51
[#158 short_circuit_or_expression]: #50
[#158 singular_expression]: #60
[#158 unary_expression]: #58
[#159 additive_expression]: #57
[#159 binary_and_expression]: #54
[#159 binary_or_expression]: #55
[#159 binary_xor_expression]: #56
[#159 bitwise_expression]: #52
[#159 bool_literal]: #74
[#159 call_expression]: #68
[#159 callable]: #67
[#159 decimal_float_literal]: #79
[#159 decimal_int_literal]: #77
[#159 expression]: #187
[#159 float_literal]: #73
[#159 hex_float_literal]: #80
[#159 hex_int_literal]: #78
[#159 ident]: #71
[#159 int_literal]: #72
[#159 literal]: #69
[#159 multiplicative_expression]: #59
[#159 paren_expression]: #70
[#159 primary_expression]: #66
[#159 relational_expression]: #49
[#159 shift_expression]: #53
[#159 short_circuit_and_expression]: #51
[#159 short_circuit_or_expression]: #50
[#159 singular_expression]: #60
[#159 unary_expression]: #58
[#160 interpolation_type_name]: #183
[#161 additive_expression]: #57
[#161 binary_and_expression]: #54
[#161 binary_or_expression]: #55
[#161 binary_xor_expression]: #56
[#161 bitwise_expression]: #52
[#161 bool_literal]: #74
[#161 call_expression]: #68
[#161 callable]: #67
[#161 decimal_float_literal]: #79
[#161 decimal_int_literal]: #77
[#161 expression]: #182
[#161 float_literal]: #73
[#161 hex_float_literal]: #80
[#161 hex_int_literal]: #78
[#161 ident]: #71
[#161 int_literal]: #72
[#161 literal]: #69
[#161 multiplicative_expression]: #59
[#161 paren_expression]: #70
[#161 primary_expression]: #66
[#161 relational_expression]: #49
[#161 shift_expression]: #53
[#161 short_circuit_and_expression]: #51
[#161 short_circuit_or_expression]: #50
[#161 singular_expression]: #60
[#161 unary_expression]: #58
[#162 additive_expression]: #57
[#162 binary_and_expression]: #54
[#162 binary_or_expression]: #55
[#162 binary_xor_expression]: #56
[#162 bitwise_expression]: #52
[#162 bool_literal]: #74
[#162 call_expression]: #68
[#162 callable]: #67
[#162 decimal_float_literal]: #79
[#162 decimal_int_literal]: #77
[#162 expression]: #181
[#162 float_literal]: #73
[#162 hex_float_literal]: #80
[#162 hex_int_literal]: #78
[#162 ident]: #71
[#162 int_literal]: #72
[#162 literal]: #69
[#162 multiplicative_expression]: #59
[#162 paren_expression]: #70
[#162 primary_expression]: #66
[#162 relational_expression]: #49
[#162 shift_expression]: #53
[#162 short_circuit_and_expression]: #51
[#162 short_circuit_or_expression]: #50
[#162 singular_expression]: #60
[#162 unary_expression]: #58
[#163 builtin_value_name]: #168
[#164 additive_expression]: #57
[#164 binary_and_expression]: #54
[#164 binary_or_expression]: #55
[#164 binary_xor_expression]: #56
[#164 bitwise_expression]: #52
[#164 bool_literal]: #74
[#164 call_expression]: #68
[#164 callable]: #67
[#164 decimal_float_literal]: #79
[#164 decimal_int_literal]: #77
[#164 expression]: #167
[#164 float_literal]: #73
[#164 hex_float_literal]: #80
[#164 hex_int_literal]: #78
[#164 ident]: #71
[#164 int_literal]: #72
[#164 literal]: #69
[#164 multiplicative_expression]: #59
[#164 paren_expression]: #70
[#164 primary_expression]: #66
[#164 relational_expression]: #49
[#164 shift_expression]: #53
[#164 short_circuit_and_expression]: #51
[#164 short_circuit_or_expression]: #50
[#164 singular_expression]: #60
[#164 unary_expression]: #58
[#165 additive_expression]: #57
[#165 binary_and_expression]: #54
[#165 binary_or_expression]: #55
[#165 binary_xor_expression]: #56
[#165 bitwise_expression]: #52
[#165 bool_literal]: #74
[#165 call_expression]: #68
[#165 callable]: #67
[#165 decimal_float_literal]: #79
[#165 decimal_int_literal]: #77
[#165 expression]: #166
[#165 float_literal]: #73
[#165 hex_float_literal]: #80
[#165 hex_int_literal]: #78
[#165 ident]: #71
[#165 int_literal]: #72
[#165 literal]: #69
[#165 multiplicative_expression]: #59
[#165 paren_expression]: #70
[#165 primary_expression]: #66
[#165 relational_expression]: #49
[#165 shift_expression]: #53
[#165 short_circuit_and_expression]: #51
[#165 short_circuit_or_expression]: #50
[#165 singular_expression]: #60
[#165 unary_expression]: #58
[#166 attrib_end]: #371
[#166 attrib_end/0.0]: #361
[#167 attrib_end]: #370
[#167 attrib_end/0.0]: #361
[#168 attrib_end]: #369
[#168 attrib_end/0.0]: #361
[#181 attrib_end]: #368
[#181 attrib_end/0.0]: #361
[#182 attrib_end]: #367
[#182 attrib_end/0.0]: #361
[#183 attrib_end]: #365
[#183 attrib_end/0.0]: #361
[#187 attrib_end]: #364
[#187 attrib_end/0.0]: #361
[#188 attrib_end]: #362
[#188 attrib_end/0.0]: #361
[#189 attrib_end]: #359
[#189 attrib_end/0.0]: #361
[#202 multiplicative_operator]: #137
[#207 component_or_swizzle_specifier]: #358
[#207 component_or_swizzle_specifier/1.2]: #357
[#208 component_or_swizzle_specifier]: #356
[#208 component_or_swizzle_specifier/2.2]: #355
[#221 expression_comma_list/0.1]: #349
[#221 expression_comma_list/0.1/0]: #350
[#221 expression_comma_list/0.1/0/0.0]: #351
[#222 additive_expression]: #348
[#222 bool_literal]: #74
[#222 call_expression]: #68
[#222 callable]: #67
[#222 decimal_float_literal]: #79
[#222 decimal_int_literal]: #77
[#222 float_literal]: #73
[#222 hex_float_literal]: #80
[#222 hex_int_literal]: #78
[#222 ident]: #71
[#222 int_literal]: #72
[#222 literal]: #69
[#222 multiplicative_expression]: #59
[#222 paren_expression]: #70
[#222 primary_expression]: #66
[#222 singular_expression]: #60
[#222 unary_expression]: #203
[#226 assignment_statement]: #254
[#226 break_statement]: #236
[#226 callable]: #248
[#226 compound_statement]: #240
[#226 compound_statement/0.1/0]: #346
[#226 const_assert_statement]: #241
[#226 continue_statement]: #237
[#226 core_lhs_expression]: #261
[#226 decrement_statement]: #256
[#226 for_statement]: #232
[#226 func_call_statement]: #234
[#226 ident]: #258
[#226 if_clause]: #243
[#226 if_statement]: #229
[#226 increment_statement]: #255
[#226 lhs_expression]: #259
[#226 loop_statement]: #231
[#226 return_statement]: #228
[#226 statement]: #226
[#226 switch_statement]: #230
[#226 variable_decl]: #249
[#226 variable_statement]: #235
[#226 variable_updating_statement]: #239
[#226 while_statement]: #233
[#242 additive_expression]: #57
[#242 binary_and_expression]: #54
[#242 binary_or_expression]: #55
[#242 binary_xor_expression]: #56
[#242 bitwise_expression]: #52
[#242 bool_literal]: #74
[#242 call_expression]: #68
[#242 callable]: #67
[#242 decimal_float_literal]: #79
[#242 decimal_int_literal]: #77
[#242 expression]: #337
[#242 float_literal]: #73
[#242 hex_float_literal]: #80
[#242 hex_int_literal]: #78
[#242 ident]: #71
[#242 int_literal]: #72
[#242 literal]: #69
[#242 multiplicative_expression]: #59
[#242 paren_expression]: #70
[#242 primary_expression]: #66
[#242 relational_expression]: #49
[#242 return_statement/0.1]: #336
[#242 shift_expression]: #53
[#242 short_circuit_and_expression]: #51
[#242 short_circuit_or_expression]: #50
[#242 singular_expression]: #60
[#242 unary_expression]: #58
[#243 else_if_clause]: #334
[#243 if_statement/0.1]: #332
[#243 if_statement/0.1/0]: #333
[#244 additive_expression]: #57
[#244 binary_and_expression]: #54
[#244 binary_or_expression]: #55
[#244 binary_xor_expression]: #56
[#244 bitwise_expression]: #52
[#244 bool_literal]: #74
[#244 call_expression]: #68
[#244 callable]: #67
[#244 decimal_float_literal]: #79
[#244 decimal_int_literal]: #77
[#244 expression]: #331
[#244 float_literal]: #73
[#244 hex_float_literal]: #80
[#244 hex_int_literal]: #78
[#244 ident]: #71
[#244 int_literal]: #72
[#244 literal]: #69
[#244 multiplicative_expression]: #59
[#244 paren_expression]: #70
[#244 primary_expression]: #66
[#244 relational_expression]: #49
[#244 shift_expression]: #53
[#244 short_circuit_and_expression]: #51
[#244 short_circuit_or_expression]: #50
[#244 singular_expression]: #60
[#244 unary_expression]: #58
[#247 additive_expression]: #57
[#247 binary_and_expression]: #54
[#247 binary_or_expression]: #55
[#247 binary_xor_expression]: #56
[#247 bitwise_expression]: #52
[#247 bool_literal]: #74
[#247 call_expression]: #68
[#247 callable]: #67
[#247 decimal_float_literal]: #79
[#247 decimal_int_literal]: #77
[#247 expression]: #328
[#247 float_literal]: #73
[#247 hex_float_literal]: #80
[#247 hex_int_literal]: #78
[#247 ident]: #71
[#247 int_literal]: #72
[#247 literal]: #69
[#247 multiplicative_expression]: #59
[#247 paren_expression]: #70
[#247 primary_expression]: #66
[#247 relational_expression]: #49
[#247 shift_expression]: #53
[#247 short_circuit_and_expression]: #51
[#247 short_circuit_or_expression]: #50
[#247 singular_expression]: #60
[#247 unary_expression]: #58
[#248 argument_expression_list]: #327
[#250 ident]: #100
[#250 optionally_typed_ident]: #325
[#251 ident]: #100
[#251 optionally_typed_ident]: #324
[#257 additive_expression]: #57
[#257 binary_and_expression]: #54
[#257 binary_or_expression]: #55
[#257 binary_xor_expression]: #56
[#257 bitwise_expression]: #52
[#257 bool_literal]: #74
[#257 call_expression]: #68
[#257 callable]: #67
[#257 decimal_float_literal]: #79
[#257 decimal_int_literal]: #77
[#257 expression]: #323
[#257 float_literal]: #73
[#257 hex_float_literal]: #80
[#257 hex_int_literal]: #78
[#257 ident]: #71
[#257 int_literal]: #72
[#257 literal]: #69
[#257 multiplicative_expression]: #59
[#257 paren_expression]: #70
[#257 primary_expression]: #66
[#257 relational_expression]: #49
[#257 shift_expression]: #53
[#257 short_circuit_and_expression]: #51
[#257 short_circuit_or_expression]: #50
[#257 singular_expression]: #60
[#257 unary_expression]: #58
[#259 assignment_statement/0.1]: #308
[#259 compound_assignment_operator]: #312
[#261 component_or_swizzle_specifier]: #306
[#261 lhs_expression/0.1]: #305
[#262 core_lhs_expression]: #261
[#262 ident]: #302
[#262 lhs_expression]: #304
[#263 core_lhs_expression]: #261
[#263 ident]: #302
[#263 lhs_expression]: #303
[#264 core_lhs_expression]: #261
[#264 ident]: #302
[#264 lhs_expression]: #301
[#265 attribute]: #300
[#265 function_header/0.3]: #295
[#265 param]: #297
[#265 param/0.0]: #298
[#265 param/0.0/0]: #299
[#265 param_list]: #296
[#266 struct_body_decl/0.2]: #291
[#266 struct_body_decl/0.2/0]: #292
[#266 struct_body_decl/0.2/0/0.0]: #293
[#267 member_ident]: #290
[#269 attribute]: #269
[#269 struct_member/0.0/0]: #289
[#273 additive_expression]: #57
[#273 binary_and_expression]: #54
[#273 binary_or_expression]: #55
[#273 binary_xor_expression]: #56
[#273 bitwise_expression]: #52
[#273 bool_literal]: #74
[#273 call_expression]: #68
[#273 callable]: #67
[#273 decimal_float_literal]: #79
[#273 decimal_int_literal]: #77
[#273 expression]: #286
[#273 float_literal]: #73
[#273 hex_float_literal]: #80
[#273 hex_int_literal]: #78
[#273 ident]: #71
[#273 int_literal]: #72
[#273 literal]: #69
[#273 multiplicative_expression]: #59
[#273 paren_expression]: #70
[#273 primary_expression]: #66
[#273 relational_expression]: #49
[#273 shift_expression]: #53
[#273 short_circuit_and_expression]: #51
[#273 short_circuit_or_expression]: #50
[#273 singular_expression]: #60
[#273 unary_expression]: #58
[#277 variable_qualifier/0.2]: #284
[#285 access_mode]: #425
[#287 additive_expression]: #424
[#287 bool_literal]: #74
[#287 call_expression]: #68
[#287 callable]: #67
[#287 decimal_float_literal]: #79
[#287 decimal_int_literal]: #77
[#287 float_literal]: #73
[#287 hex_float_literal]: #80
[#287 hex_int_literal]: #78
[#287 ident]: #71
[#287 int_literal]: #72
[#287 literal]: #69
[#287 multiplicative_expression]: #59
[#287 paren_expression]: #70
[#287 primary_expression]: #66
[#287 singular_expression]: #60
[#287 unary_expression]: #203
[#291 struct_body_decl/0.3]: #420
[#293 struct_body_decl/0.2/0]: #419
[#293 struct_body_decl/0.2/0/0.0]: #293
[#294 attribute]: #269
[#294 struct_member]: #418
[#294 struct_member/0.0]: #267
[#294 struct_member/0.0/0]: #268
[#297 param_list/0.1]: #413
[#297 param_list/0.1/0]: #414
[#297 param_list/0.1/0/0.0]: #415
[#298 ident]: #412
[#300 attribute]: #300
[#300 param/0.0/0]: #411
[#307 additive_expression]: #57
[#307 binary_and_expression]: #54
[#307 binary_or_expression]: #55
[#307 binary_xor_expression]: #56
[#307 bitwise_expression]: #52
[#307 bool_literal]: #74
[#307 call_expression]: #68
[#307 callable]: #67
[#307 decimal_float_literal]: #79
[#307 decimal_int_literal]: #77
[#307 expression]: #409
[#307 float_literal]: #73
[#307 hex_float_literal]: #80
[#307 hex_int_literal]: #78
[#307 ident]: #71
[#307 int_literal]: #72
[#307 literal]: #69
[#307 multiplicative_expression]: #59
[#307 paren_expression]: #70
[#307 primary_expression]: #66
[#307 relational_expression]: #49
[#307 shift_expression]: #53
[#307 short_circuit_and_expression]: #51
[#307 short_circuit_or_expression]: #50
[#307 singular_expression]: #60
[#307 unary_expression]: #58
[#308 additive_expression]: #57
[#308 binary_and_expression]: #54
[#308 binary_or_expression]: #55
[#308 binary_xor_expression]: #56
[#308 bitwise_expression]: #52
[#308 bool_literal]: #74
[#308 call_expression]: #68
[#308 callable]: #67
[#308 decimal_float_literal]: #79
[#308 decimal_int_literal]: #77
[#308 expression]: #408
[#308 float_literal]: #73
[#308 hex_float_literal]: #80
[#308 hex_int_literal]: #78
[#308 ident]: #71
[#308 int_literal]: #72
[#308 literal]: #69
[#308 multiplicative_expression]: #59
[#308 paren_expression]: #70
[#308 primary_expression]: #66
[#308 relational_expression]: #49
[#308 shift_expression]: #53
[#308 short_circuit_and_expression]: #51
[#308 short_circuit_or_expression]: #50
[#308 singular_expression]: #60
[#308 unary_expression]: #58
[#323 compound_statement]: #407
[#326 additive_expression]: #57
[#326 binary_and_expression]: #54
[#326 binary_or_expression]: #55
[#326 binary_xor_expression]: #56
[#326 bitwise_expression]: #52
[#326 bool_literal]: #74
[#326 call_expression]: #68
[#326 callable]: #67
[#326 decimal_float_literal]: #79
[#326 decimal_int_literal]: #77
[#326 expression]: #404
[#326 float_literal]: #73
[#326 hex_float_literal]: #80
[#326 hex_int_literal]: #78
[#326 ident]: #71
[#326 int_literal]: #72
[#326 literal]: #69
[#326 multiplicative_expression]: #59
[#326 paren_expression]: #70
[#326 primary_expression]: #66
[#326 relational_expression]: #49
[#326 shift_expression]: #53
[#326 short_circuit_and_expression]: #51
[#326 short_circuit_or_expression]: #50
[#326 singular_expression]: #60
[#326 unary_expression]: #58
[#328 compound_statement]: #403
[#329 assignment_statement]: #254
[#329 callable]: #248
[#329 core_lhs_expression]: #261
[#329 decrement_statement]: #256
[#329 for_header]: #397
[#329 for_header/0.0]: #398
[#329 for_init]: #399
[#329 func_call_statement]: #402
[#329 ident]: #258
[#329 increment_statement]: #255
[#329 lhs_expression]: #259
[#329 variable_decl]: #249
[#329 variable_statement]: #400
[#329 variable_updating_statement]: #401
[#330 assignment_statement]: #254
[#330 break_statement]: #236
[#330 callable]: #248
[#330 compound_statement]: #240
[#330 const_assert_statement]: #241
[#330 continue_statement]: #237
[#330 core_lhs_expression]: #261
[#330 decrement_statement]: #256
[#330 for_statement]: #232
[#330 func_call_statement]: #234
[#330 ident]: #258
[#330 if_clause]: #243
[#330 if_statement]: #229
[#330 increment_statement]: #255
[#330 lhs_expression]: #259
[#330 loop_statement]: #231
[#330 loop_statement/0.2]: #394
[#330 loop_statement/0.2/0]: #395
[#330 return_statement]: #228
[#330 statement]: #396
[#330 switch_statement]: #230
[#330 variable_decl]: #249
[#330 variable_statement]: #235
[#330 variable_updating_statement]: #239
[#330 while_statement]: #233
[#332 else_clause]: #391
[#332 if_statement/0.2]: #390
[#334 else_if_clause]: #334
[#334 if_statement/0.1/0]: #389
[#348 additive_operator]: #143
[#348 callable/1.4]: #384
[#348 callable/1.4/0]: #385
[#348 callable/1.4/0/0.0]: #386
[#349 expression_comma_list/0.2]: #382
[#351 expression_comma_list/0.1/0]: #381
[#351 expression_comma_list/0.1/0/0.0]: #351
[#352 additive_expression]: #57
[#352 binary_and_expression]: #54
[#352 binary_or_expression]: #55
[#352 binary_xor_expression]: #56
[#352 bitwise_expression]: #52
[#352 bool_literal]: #74
[#352 call_expression]: #68
[#352 callable]: #67
[#352 decimal_float_literal]: #79
[#352 decimal_int_literal]: #77
[#352 expression]: #380
[#352 float_literal]: #73
[#352 hex_float_literal]: #80
[#352 hex_int_literal]: #78
[#352 ident]: #71
[#352 int_literal]: #72
[#352 literal]: #69
[#352 multiplicative_expression]: #59
[#352 paren_expression]: #70
[#352 primary_expression]: #66
[#352 relational_expression]: #49
[#352 shift_expression]: #53
[#352 short_circuit_and_expression]: #51
[#352 short_circuit_or_expression]: #50
[#352 singular_expression]: #60
[#352 unary_expression]: #58
[#354 component_or_swizzle_specifier]: #379
[#354 component_or_swizzle_specifier/0.3]: #378
[#360 additive_expression]: #57
[#360 binary_and_expression]: #54
[#360 binary_or_expression]: #55
[#360 binary_xor_expression]: #56
[#360 bitwise_expression]: #52
[#360 bool_literal]: #74
[#360 call_expression]: #68
[#360 callable]: #67
[#360 decimal_float_literal]: #79
[#360 decimal_int_literal]: #77
[#360 expression]: #377
[#360 float_literal]: #73
[#360 hex_float_literal]: #80
[#360 hex_int_literal]: #78
[#360 ident]: #71
[#360 int_literal]: #72
[#360 literal]: #69
[#360 multiplicative_expression]: #59
[#360 paren_expression]: #70
[#360 primary_expression]: #66
[#360 relational_expression]: #49
[#360 shift_expression]: #53
[#360 short_circuit_and_expression]: #51
[#360 short_circuit_or_expression]: #50
[#360 singular_expression]: #60
[#360 unary_expression]: #58
[#366 interpolation_sample_name]: #372
[#372 attrib_end]: #467
[#372 attrib_end/0.0]: #361
[#377 attrib_end]: #465
[#377 attrib_end/0.0]: #361
[#384 callable/1.5]: #463
[#386 callable/1.4/0]: #462
[#386 callable/1.4/0/0.0]: #386
[#387 additive_expression]: #461
[#387 bool_literal]: #74
[#387 call_expression]: #68
[#387 callable]: #67
[#387 decimal_float_literal]: #79
[#387 decimal_int_literal]: #77
[#387 float_literal]: #73
[#387 hex_float_literal]: #80
[#387 hex_int_literal]: #78
[#387 ident]: #71
[#387 int_literal]: #72
[#387 literal]: #69
[#387 multiplicative_expression]: #59
[#387 paren_expression]: #70
[#387 primary_expression]: #66
[#387 singular_expression]: #60
[#387 unary_expression]: #203
[#388 additive_expression]: #57
[#388 binary_and_expression]: #54
[#388 binary_or_expression]: #55
[#388 binary_xor_expression]: #56
[#388 bitwise_expression]: #52
[#388 bool_literal]: #74
[#388 call_expression]: #68
[#388 callable]: #67
[#388 decimal_float_literal]: #79
[#388 decimal_int_literal]: #77
[#388 expression]: #460
[#388 float_literal]: #73
[#388 hex_float_literal]: #80
[#388 hex_int_literal]: #78
[#388 ident]: #71
[#388 int_literal]: #72
[#388 literal]: #69
[#388 multiplicative_expression]: #59
[#388 paren_expression]: #70
[#388 primary_expression]: #66
[#388 relational_expression]: #49
[#388 shift_expression]: #53
[#388 short_circuit_and_expression]: #51
[#388 short_circuit_or_expression]: #50
[#388 singular_expression]: #60
[#388 unary_expression]: #58
[#392 compound_statement]: #459
[#393 case_clause]: #455
[#393 default_alone_clause]: #456
[#393 switch_body]: #454
[#393 switch_statement/0.3]: #452
[#393 switch_statement/0.3/0]: #453
[#394 continuing_statement]: #450
[#394 loop_statement/0.3]: #449
[#396 assignment_statement]: #254
[#396 break_statement]: #236
[#396 callable]: #248
[#396 compound_statement]: #240
[#396 const_assert_statement]: #241
[#396 continue_statement]: #237
[#396 core_lhs_expression]: #261
[#396 decrement_statement]: #256
[#396 for_statement]: #232
[#396 func_call_statement]: #234
[#396 ident]: #258
[#396 if_clause]: #243
[#396 if_statement]: #229
[#396 increment_statement]: #255
[#396 lhs_expression]: #259
[#396 loop_statement]: #231
[#396 loop_statement/0.2/0]: #448
[#396 return_statement]: #228
[#396 statement]: #396
[#396 switch_statement]: #230
[#396 variable_decl]: #249
[#396 variable_statement]: #235
[#396 variable_updating_statement]: #239
[#396 while_statement]: #233
[#405 additive_expression]: #57
[#405 binary_and_expression]: #54
[#405 binary_or_expression]: #55
[#405 binary_xor_expression]: #56
[#405 bitwise_expression]: #52
[#405 bool_literal]: #74
[#405 call_expression]: #68
[#405 callable]: #67
[#405 decimal_float_literal]: #79
[#405 decimal_int_literal]: #77
[#405 expression]: #445
[#405 float_literal]: #73
[#405 hex_float_literal]: #80
[#405 hex_int_literal]: #78
[#405 ident]: #71
[#405 int_literal]: #72
[#405 literal]: #69
[#405 multiplicative_expression]: #59
[#405 paren_expression]: #70
[#405 primary_expression]: #66
[#405 relational_expression]: #49
[#405 shift_expression]: #53
[#405 short_circuit_and_expression]: #51
[#405 short_circuit_or_expression]: #50
[#405 singular_expression]: #60
[#405 unary_expression]: #58
[#406 additive_expression]: #57
[#406 binary_and_expression]: #54
[#406 binary_or_expression]: #55
[#406 binary_xor_expression]: #56
[#406 bitwise_expression]: #52
[#406 bool_literal]: #74
[#406 call_expression]: #68
[#406 callable]: #67
[#406 decimal_float_literal]: #79
[#406 decimal_int_literal]: #77
[#406 expression]: #444
[#406 float_literal]: #73
[#406 hex_float_literal]: #80
[#406 hex_int_literal]: #78
[#406 ident]: #71
[#406 int_literal]: #72
[#406 literal]: #69
[#406 multiplicative_expression]: #59
[#406 paren_expression]: #70
[#406 primary_expression]: #66
[#406 relational_expression]: #49
[#406 shift_expression]: #53
[#406 short_circuit_and_expression]: #51
[#406 short_circuit_or_expression]: #50
[#406 singular_expression]: #60
[#406 unary_expression]: #58
[#413 param_list/0.2]: #441
[#415 param_list/0.1/0]: #440
[#415 param_list/0.1/0/0.0]: #415
[#416 attribute]: #300
[#416 param]: #439
[#416 param/0.0]: #298
[#416 param/0.0/0]: #299
[#417 function_header/0.5]: #437
[#422 ident]: #271
[#422 type_specifier]: #435
[#423 additive_expression]: #434
[#423 bool_literal]: #74
[#423 call_expression]: #68
[#423 callable]: #67
[#423 decimal_float_literal]: #79
[#423 decimal_int_literal]: #77
[#423 float_literal]: #73
[#423 hex_float_literal]: #80
[#423 hex_int_literal]: #78
[#423 ident]: #71
[#423 int_literal]: #72
[#423 literal]: #69
[#423 multiplicative_expression]: #59
[#423 paren_expression]: #70
[#423 primary_expression]: #66
[#423 singular_expression]: #60
[#423 unary_expression]: #203
[#424 additive_operator]: #143
[#424 callable_type/1.3]: #430
[#424 callable_type/1.3/0]: #431
[#424 callable_type/1.3/0/0.0]: #432
[#430 callable_type/1.4]: #495
[#432 callable_type/1.3/0]: #494
[#432 callable_type/1.3/0/0.0]: #432
[#433 additive_expression]: #493
[#433 bool_literal]: #74
[#433 call_expression]: #68
[#433 callable]: #67
[#433 decimal_float_literal]: #79
[#433 decimal_int_literal]: #77
[#433 float_literal]: #73
[#433 hex_float_literal]: #80
[#433 hex_int_literal]: #78
[#433 ident]: #71
[#433 int_literal]: #72
[#433 literal]: #69
[#433 multiplicative_expression]: #59
[#433 paren_expression]: #70
[#433 primary_expression]: #66
[#433 singular_expression]: #60
[#433 unary_expression]: #203
[#434 additive_operator]: #143
[#434 callable_type/2.4]: #489
[#434 callable_type/2.4/0]: #490
[#434 callable_type/2.4/0/0.0]: #491
[#438 attribute]: #488
[#438 function_header/0.5/0.1]: #486
[#438 function_header/0.5/0.1/0]: #487
[#443 ident]: #271
[#443 type_specifier]: #485
[#446 additive_expression]: #57
[#446 binary_and_expression]: #54
[#446 binary_or_expression]: #55
[#446 binary_xor_expression]: #56
[#446 bitwise_expression]: #52
[#446 bool_literal]: #74
[#446 call_expression]: #68
[#446 callable]: #67
[#446 decimal_float_literal]: #79
[#446 decimal_int_literal]: #77
[#446 expression]: #484
[#446 float_literal]: #73
[#446 for_header/0.2]: #483
[#446 hex_float_literal]: #80
[#446 hex_int_literal]: #78
[#446 ident]: #71
[#446 int_literal]: #72
[#446 literal]: #69
[#446 multiplicative_expression]: #59
[#446 paren_expression]: #70
[#446 primary_expression]: #66
[#446 relational_expression]: #49
[#446 shift_expression]: #53
[#446 short_circuit_and_expression]: #51
[#446 short_circuit_or_expression]: #50
[#446 singular_expression]: #60
[#446 unary_expression]: #58
[#447 compound_statement]: #482
[#451 continuing_compound_statement]: #479
[#454 case_clause]: #455
[#454 default_alone_clause]: #456
[#454 switch_body]: #454
[#454 switch_statement/0.3/0]: #477
[#457 additive_expression]: #57
[#457 binary_and_expression]: #54
[#457 binary_or_expression]: #55
[#457 binary_xor_expression]: #56
[#457 bitwise_expression]: #52
[#457 bool_literal]: #74
[#457 call_expression]: #68
[#457 callable]: #67
[#457 case_selector]: #474
[#457 case_selectors]: #473
[#457 decimal_float_literal]: #79
[#457 decimal_int_literal]: #77
[#457 expression]: #476
[#457 float_literal]: #73
[#457 hex_float_literal]: #80
[#457 hex_int_literal]: #78
[#457 ident]: #71
[#457 int_literal]: #72
[#457 literal]: #69
[#457 multiplicative_expression]: #59
[#457 paren_expression]: #70
[#457 primary_expression]: #66
[#457 relational_expression]: #49
[#457 shift_expression]: #53
[#457 short_circuit_and_expression]: #51
[#457 short_circuit_or_expression]: #50
[#457 singular_expression]: #60
[#457 unary_expression]: #58
[#458 default_alone_clause/0.1]: #471
[#460 compound_statement]: #470
[#461 additive_operator]: #143
[#466 additive_expression]: #57
[#466 binary_and_expression]: #54
[#466 binary_or_expression]: #55
[#466 binary_xor_expression]: #56
[#466 bitwise_expression]: #52
[#466 bool_literal]: #74
[#466 call_expression]: #68
[#466 callable]: #67
[#466 decimal_float_literal]: #79
[#466 decimal_int_literal]: #77
[#466 expression]: #468
[#466 float_literal]: #73
[#466 hex_float_literal]: #80
[#466 hex_int_literal]: #78
[#466 ident]: #71
[#466 int_literal]: #72
[#466 literal]: #69
[#466 multiplicative_expression]: #59
[#466 paren_expression]: #70
[#466 primary_expression]: #66
[#466 relational_expression]: #49
[#466 shift_expression]: #53
[#466 short_circuit_and_expression]: #51
[#466 short_circuit_or_expression]: #50
[#466 singular_expression]: #60
[#466 unary_expression]: #58
[#468 attrib_end]: #515
[#468 attrib_end/0.0]: #361
[#471 compound_statement]: #514
[#473 case_clause/0.2]: #512
[#474 case_selectors/0.1]: #508
[#474 case_selectors/0.1/0]: #509
[#474 case_selectors/0.1/0/0.0]: #510
[#480 assignment_statement]: #254
[#480 break_statement]: #236
[#480 callable]: #248
[#480 compound_statement]: #240
[#480 const_assert_statement]: #241
[#480 continue_statement]: #237
[#480 continuing_compound_statement/0.1]: #505
[#480 continuing_compound_statement/0.1/0]: #506
[#480 core_lhs_expression]: #261
[#480 decrement_statement]: #256
[#480 for_statement]: #232
[#480 func_call_statement]: #234
[#480 ident]: #258
[#480 if_clause]: #243
[#480 if_statement]: #229
[#480 increment_statement]: #255
[#480 lhs_expression]: #259
[#480 loop_statement]: #231
[#480 return_statement]: #228
[#480 statement]: #507
[#480 switch_statement]: #230
[#480 variable_decl]: #249
[#480 variable_statement]: #235
[#480 variable_updating_statement]: #239
[#480 while_statement]: #233
[#486 ident]: #271
[#486 type_specifier]: #503
[#488 attribute]: #488
[#488 function_header/0.5/0.1/0]: #502
[#489 callable_type/2.5]: #500
[#491 callable_type/2.4/0]: #499
[#491 callable_type/2.4/0/0.0]: #491
[#492 additive_expression]: #498
[#492 bool_literal]: #74
[#492 call_expression]: #68
[#492 callable]: #67
[#492 decimal_float_literal]: #79
[#492 decimal_int_literal]: #77
[#492 float_literal]: #73
[#492 hex_float_literal]: #80
[#492 hex_int_literal]: #78
[#492 ident]: #71
[#492 int_literal]: #72
[#492 literal]: #69
[#492 multiplicative_expression]: #59
[#492 paren_expression]: #70
[#492 primary_expression]: #66
[#492 singular_expression]: #60
[#492 unary_expression]: #203
[#493 additive_operator]: #143
[#498 additive_operator]: #143
[#504 assignment_statement]: #254
[#504 callable]: #248
[#504 core_lhs_expression]: #261
[#504 decrement_statement]: #256
[#504 for_header/0.4]: #525
[#504 for_update]: #526
[#504 func_call_statement]: #528
[#504 ident]: #258
[#504 increment_statement]: #255
[#504 lhs_expression]: #259
[#504 variable_updating_statement]: #527
[#505 break_if_statement]: #523
[#505 continuing_compound_statement/0.2]: #522
[#507 assignment_statement]: #254
[#507 break_statement]: #236
[#507 callable]: #248
[#507 compound_statement]: #240
[#507 const_assert_statement]: #241
[#507 continue_statement]: #237
[#507 continuing_compound_statement/0.1/0]: #521
[#507 core_lhs_expression]: #261
[#507 decrement_statement]: #256
[#507 for_statement]: #232
[#507 func_call_statement]: #234
[#507 ident]: #258
[#507 if_clause]: #243
[#507 if_statement]: #229
[#507 increment_statement]: #255
[#507 lhs_expression]: #259
[#507 loop_statement]: #231
[#507 return_statement]: #228
[#507 statement]: #507
[#507 switch_statement]: #230
[#507 variable_decl]: #249
[#507 variable_statement]: #235
[#507 variable_updating_statement]: #239
[#507 while_statement]: #233
[#508 case_selectors/0.2]: #519
[#510 case_selectors/0.1/0]: #518
[#510 case_selectors/0.1/0/0.0]: #510
[#511 additive_expression]: #57
[#511 binary_and_expression]: #54
[#511 binary_or_expression]: #55
[#511 binary_xor_expression]: #56
[#511 bitwise_expression]: #52
[#511 bool_literal]: #74
[#511 call_expression]: #68
[#511 callable]: #67
[#511 case_selector]: #517
[#511 decimal_float_literal]: #79
[#511 decimal_int_literal]: #77
[#511 expression]: #476
[#511 float_literal]: #73
[#511 hex_float_literal]: #80
[#511 hex_int_literal]: #78
[#511 ident]: #71
[#511 int_literal]: #72
[#511 literal]: #69
[#511 multiplicative_expression]: #59
[#511 paren_expression]: #70
[#511 primary_expression]: #66
[#511 relational_expression]: #49
[#511 shift_expression]: #53
[#511 short_circuit_and_expression]: #51
[#511 short_circuit_or_expression]: #50
[#511 singular_expression]: #60
[#511 unary_expression]: #58
[#512 compound_statement]: #516
[#530 additive_expression]: #57
[#530 binary_and_expression]: #54
[#530 binary_or_expression]: #55
[#530 binary_xor_expression]: #56
[#530 bitwise_expression]: #52
[#530 bool_literal]: #74
[#530 call_expression]: #68
[#530 callable]: #67
[#530 decimal_float_literal]: #79
[#530 decimal_int_literal]: #77
[#530 expression]: #532
[#530 float_literal]: #73
[#530 hex_float_literal]: #80
[#530 hex_int_literal]: #78
[#530 ident]: #71
[#530 int_literal]: #72
[#530 literal]: #69
[#530 multiplicative_expression]: #59
[#530 paren_expression]: #70
[#530 primary_expression]: #66
[#530 relational_expression]: #49
[#530 shift_expression]: #53
[#530 short_circuit_and_expression]: #51
[#530 short_circuit_or_expression]: #50
[#530 singular_expression]: #60
[#530 unary_expression]: #58
