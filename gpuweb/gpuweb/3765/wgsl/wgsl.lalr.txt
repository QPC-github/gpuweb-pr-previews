=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   ident
 | ident '::' '<' primary_expression ( ',' primary_expression ) * ? ',' ? '>'
callable/1.4/0/0.0:
   ',' primary_expression
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   '{' statement * ? '}'
const_assert_statement:
   'const_assert' expression
continue_statement:'continue'
continuing_compound_statement:
   '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | const_assert_statement ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   'loop' '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   call_expression
 | callable
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | const_assert_statement ';'
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression '{' ( switch_body * ) '}'
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'type' ident '=' type_specifier
type_specifier:callable
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {';' '@' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}
const_assert_statement -> · 'const_assert' expression : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name ';' : {';' '@' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name ';' : {';' '@' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'f16' : {}

#6
global_directive -> 'enable' extension_name · ';' : {';' '@' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}
const_assert_statement -> · 'const_assert' expression : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · const_assert_statement ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · function_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#12
global_decl -> ';' · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> const_assert_statement · ';' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#19
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {'='}

#20
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#21
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#22
type_alias_decl -> 'type' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#23
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#24
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {'{'}

#25
const_assert_statement -> 'const_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#26
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#27
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#28
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#29
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'compute' : {'@' 'fn' 'var'}
attribute -> · '@' 'const' : {'@' 'fn' 'var'}
attribute -> · '@' 'fragment' : {'@' 'fn' 'var'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'invariant' : {'@' 'fn' 'var'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'vertex' : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#30
attribute -> '@' · 'align' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'compute' : {'@' 'fn' 'var'}
attribute -> '@' · 'const' : {'@' 'fn' 'var'}
attribute -> '@' · 'fragment' : {'@' 'fn' 'var'}
attribute -> '@' · 'group' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'id' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'invariant' : {'@' 'fn' 'var'}
attribute -> '@' · 'location' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'size' '(' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'vertex' : {'@' 'fn' 'var'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'@' 'fn' 'var'}

#31
attribute -> '@' 'align' · '(' expression attrib_end : {'@' 'fn' 'var'}

#32
attribute -> '@' 'binding' · '(' expression attrib_end : {'@' 'fn' 'var'}

#33
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'@' 'fn' 'var'}

#34
attribute -> '@' 'const' · : {'@' 'fn' 'var'}

#35
attribute -> '@' 'group' · '(' expression attrib_end : {'@' 'fn' 'var'}

#36
attribute -> '@' 'id' · '(' expression attrib_end : {'@' 'fn' 'var'}

#37
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'@' 'fn' 'var'}

#38
attribute -> '@' 'invariant' · : {'@' 'fn' 'var'}

#39
attribute -> '@' 'location' · '(' expression attrib_end : {'@' 'fn' 'var'}

#40
attribute -> '@' 'size' · '(' expression attrib_end : {'@' 'fn' 'var'}

#41
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'@' 'fn' 'var'}

#42
attribute -> '@' 'vertex' · : {'@' 'fn' 'var'}

#43
attribute -> '@' 'fragment' · : {'@' 'fn' 'var'}

#44
attribute -> '@' 'compute' · : {'@' 'fn' 'var'}

#45
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#46
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#47
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#48
const_assert_statement -> 'const_assert' expression · : {}

#49
expression -> relational_expression · : {')' ',' ':' '{'}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#50
expression -> short_circuit_or_expression · '||' relational_expression : {')' ',' ':' '{'}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#51
expression -> short_circuit_and_expression · '&&' relational_expression : {')' ',' ':' '{'}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#52
expression -> bitwise_expression · : {')' ',' ':' '{'}

#53
relational_expression -> shift_expression · '!=' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '<' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '<=' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '==' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '>' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · '>=' shift_expression : {')' ',' ':' '{'}
relational_expression -> shift_expression · : {')' ',' ':' '{'}

#54
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {')' ',' ':' '{'}

#55
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {')' ',' ':' '{'}

#56
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {')' ',' ':' '{'}

#57
additive_expression -> additive_expression · additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
shift_expression -> additive_expression · : {')' ',' ':' '{'}
additive_operator -> · '+' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
additive_operator -> · '-' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#58
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
shift_expression -> unary_expression · '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> unary_expression · '>>' unary_expression : {')' ',' ':' '{'}

#59
additive_expression -> multiplicative_expression · : {')' '+' ',' '-' ':' '{'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#60
unary_expression -> singular_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#61
unary_expression -> '-' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#62
unary_expression -> '!' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#63
unary_expression -> '~' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#64
unary_expression -> '*' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#65
unary_expression -> '&' · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#66
singular_expression -> primary_expression · singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#67
call_expression -> callable · argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> callable · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#68
primary_expression -> call_expression · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#69
primary_expression -> literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#70
primary_expression -> paren_expression · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#71
callable -> ident · '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> ident · : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#72
literal -> int_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#73
literal -> float_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#74
literal -> bool_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#75
paren_expression -> '(' · expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#76
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'%' '%=' '&=' '(' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#77
int_literal -> decimal_int_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#78
int_literal -> hex_int_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#79
float_literal -> decimal_float_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#80
float_literal -> hex_float_literal · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#81
bool_literal -> 'true' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#82
bool_literal -> 'false' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#83
decimal_int_literal -> /0[iu]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#84
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#85
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#86
decimal_float_literal -> /0[fh]/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#87
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#88
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#89
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#90
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#91
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#92
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#93
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#94
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
compound_statement -> · '{' compound_statement/0.1 '}' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#95
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#96
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#97
type_alias_decl -> 'type' ident · '=' type_specifier : {}

#98
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#99
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#100
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {'='}
optionally_typed_ident/0.1 -> · ':' type_specifier : {'='}

#101
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#102
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {'='}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#103
global_decl -> const_assert_statement ';' · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#104
global_decl -> type_alias_decl ';' · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#105
global_decl -> global_constant_decl ';' · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#106
global_decl -> global_variable_decl ';' · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#107
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#108
global_directive -> 'enable' extension_name ';' · : {';' '@' 'const' 'const_assert' 'enable' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#109
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#110
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#111
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#112
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#113
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#114
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {'='}

#115
optionally_typed_ident/0.1 -> ':' · type_specifier : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}
type_specifier -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'='}
type_specifier -> · ident : {'='}

#116
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#117
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#118
type_alias_decl -> 'type' ident '=' · type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
type_specifier -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {}
type_specifier -> · ident : {}

#119
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#120
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#121
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {'{'}

#122
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#123
compound_statement -> '{' · compound_statement/0.1 '}' : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'type' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#124
paren_expression -> '(' expression · ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#125
callable -> ident '::' · '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#126
call_expression -> callable argument_expression_list · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#127
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
argument_expression_list/0.1 -> · expression_comma_list : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {','}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression '&&' relational_expression : {','}
expression -> · short_circuit_or_expression '||' relational_expression : {','}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {','}
relational_expression -> · shift_expression '<' shift_expression : {','}
relational_expression -> · shift_expression '<=' shift_expression : {','}
relational_expression -> · shift_expression '==' shift_expression : {','}
relational_expression -> · shift_expression '>' shift_expression : {','}
relational_expression -> · shift_expression '>=' shift_expression : {','}
relational_expression -> · shift_expression : {','}
shift_expression -> · additive_expression : {','}
shift_expression -> · unary_expression '<<' unary_expression : {','}
shift_expression -> · unary_expression '>>' unary_expression : {','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#128
singular_expression -> primary_expression singular_expression/0.1 · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#129
singular_expression/0.1 -> component_or_swizzle_specifier · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#130
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#131
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba][rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw][xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#132
unary_expression -> '&' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#133
unary_expression -> '*' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#134
unary_expression -> '~' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#135
unary_expression -> '!' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#136
unary_expression -> '-' unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#137
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#138
multiplicative_operator -> '*' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#139
multiplicative_operator -> '/' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#140
multiplicative_operator -> '%' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#141
shift_expression -> unary_expression '<<' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#142
shift_expression -> unary_expression '>>' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#143
additive_expression -> additive_expression additive_operator · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#144
additive_operator -> '+' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#145
additive_operator -> '-' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#146
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#147
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#148
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {')' ',' ':' '{'}
bool_literal -> · 'false' : {')' ',' '.' ':' '[' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {')' ',' '.' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ')' ',' '.' ':' '[' '{'}
callable -> · ident : {'(' ')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' '[' '{'}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' '[' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' '[' '{'}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' '[' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' '[' '{'}
literal -> · bool_literal : {')' ',' '.' ':' '[' '{'}
literal -> · float_literal : {')' ',' '.' ':' '[' '{'}
literal -> · int_literal : {')' ',' '.' ':' '[' '{'}
paren_expression -> · '(' expression ')' : {')' ',' '.' ':' '[' '{'}
primary_expression -> · call_expression : {')' ',' '.' ':' '[' '{'}
primary_expression -> · callable : {')' ',' '.' ':' '[' '{'}
primary_expression -> · literal : {')' ',' '.' ':' '[' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' '[' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' '{'}
unary_expression -> · '!' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '&' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '*' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '-' unary_expression : {')' ',' ':' '{'}
unary_expression -> · '~' unary_expression : {')' ',' ':' '{'}
unary_expression -> · singular_expression : {')' ',' ':' '{'}

#149
relational_expression -> shift_expression '<' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#150
relational_expression -> shift_expression '>' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#151
relational_expression -> shift_expression '<=' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#152
relational_expression -> shift_expression '>=' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#153
relational_expression -> shift_expression '==' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#154
relational_expression -> shift_expression '!=' · shift_expression : {')' ',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#155
expression -> short_circuit_and_expression '&&' · relational_expression : {')' ',' ':' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression : {')' ',' ':' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#156
expression -> short_circuit_or_expression '||' · relational_expression : {')' ',' ':' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-' ':' '{'}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {')' ',' ':' '{'}
relational_expression -> · shift_expression : {')' ',' ':' '{'}
shift_expression -> · additive_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {')' ',' ':' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#157
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#158
attribute -> '@' 'size' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#159
attribute -> '@' 'location' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#160
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'@' 'fn' 'var'}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#161
attribute -> '@' 'id' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#162
attribute -> '@' 'group' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#163
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'@' 'fn' 'var'}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#164
attribute -> '@' 'binding' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#165
attribute -> '@' 'align' '(' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#166
attribute -> '@' 'align' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#167
attribute -> '@' 'binding' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#168
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#169
builtin_value_name -> 'vertex_index' · : {')' ','}

#170
builtin_value_name -> 'instance_index' · : {')' ','}

#171
builtin_value_name -> 'position' · : {')' ','}

#172
builtin_value_name -> 'front_facing' · : {')' ','}

#173
builtin_value_name -> 'frag_depth' · : {')' ','}

#174
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#175
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#176
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#177
builtin_value_name -> 'workgroup_id' · : {')' ','}

#178
builtin_value_name -> 'num_workgroups' · : {')' ','}

#179
builtin_value_name -> 'sample_index' · : {')' ','}

#180
builtin_value_name -> 'sample_mask' · : {')' ','}

#181
attribute -> '@' 'group' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#182
attribute -> '@' 'id' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#183
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#184
interpolation_type_name -> 'perspective' · : {')' ','}

#185
interpolation_type_name -> 'linear' · : {')' ','}

#186
interpolation_type_name -> 'flat' · : {')' ','}

#187
attribute -> '@' 'location' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#188
attribute -> '@' 'size' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#189
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#190
expression -> short_circuit_or_expression '||' relational_expression · : {')' ',' ':' '{'}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#191
multiplicative_expression -> unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
shift_expression -> unary_expression · '<<' unary_expression : {')' ',' ':' '{'}
shift_expression -> unary_expression · '>>' unary_expression : {')' ',' ':' '{'}

#192
expression -> short_circuit_and_expression '&&' relational_expression · : {')' ',' ':' '{'}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#193
relational_expression -> shift_expression '!=' shift_expression · : {')' ',' ':' '{'}

#194
relational_expression -> shift_expression '==' shift_expression · : {')' ',' ':' '{'}

#195
relational_expression -> shift_expression '>=' shift_expression · : {')' ',' ':' '{'}

#196
relational_expression -> shift_expression '<=' shift_expression · : {')' ',' ':' '{'}

#197
relational_expression -> shift_expression '>' shift_expression · : {')' ',' ':' '{'}

#198
relational_expression -> shift_expression '<' shift_expression · : {')' ',' ':' '{'}

#199
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {')' ',' ':' '{'}

#200
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {')' ',' ':' '{'}

#201
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {')' ',' ':' '{'}

#202
additive_expression -> additive_expression additive_operator multiplicative_expression · : {')' '+' ',' '-' ':' '{'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_operator -> · '%' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '*' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
multiplicative_operator -> · '/' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#203
multiplicative_expression -> unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#204
shift_expression -> unary_expression '>>' unary_expression · : {')' ',' ':' '{'}

#205
shift_expression -> unary_expression '<<' unary_expression · : {')' ',' ':' '{'}

#206
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'%' ')' '*' '+' ',' '-' '/' ':' '{'}

#207
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#208
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#209
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#210
swizzle_name -> '/[rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#211
swizzle_name -> '/[rgba][rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#212
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#213
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#214
swizzle_name -> '/[xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#215
swizzle_name -> '/[xyzw][xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#216
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#217
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '.' '/' '/=' ':' '<<=' '=' '>>=' '[' '^=' '{' '|='}

#218
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#219
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#220
argument_expression_list/0.1 -> expression_comma_list · : {}

#221
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {','}

#222
callable -> ident '::' '<' · primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'false' : {','}
bool_literal -> · 'true' : {','}
call_expression -> · callable argument_expression_list : {','}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ','}
callable -> · ident : {'(' ','}
decimal_float_literal -> · /0[fh]/ : {','}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {','}
decimal_int_literal -> · /0[iu]?/ : {','}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {','}
float_literal -> · decimal_float_literal : {','}
float_literal -> · hex_float_literal : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ','}
int_literal -> · decimal_int_literal : {','}
int_literal -> · hex_int_literal : {','}
literal -> · bool_literal : {','}
literal -> · float_literal : {','}
literal -> · int_literal : {','}
paren_expression -> · '(' expression ')' : {','}
primary_expression -> · call_expression : {','}
primary_expression -> · callable : {','}
primary_expression -> · literal : {','}
primary_expression -> · paren_expression : {','}

#223
paren_expression -> '(' expression ')' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#224
compound_statement -> '{' compound_statement/0.1 · '}' : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'type' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#225
compound_statement/0.1 -> compound_statement/0.1/0 · : {}

#226
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#227
statement -> ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#228
statement -> return_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#229
statement -> if_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#230
statement -> switch_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#231
statement -> loop_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#232
statement -> for_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#233
statement -> while_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#234
statement -> func_call_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#235
statement -> variable_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#236
statement -> break_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#237
statement -> continue_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#238
statement -> 'discard' · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#239
statement -> variable_updating_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#240
statement -> compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#241
statement -> const_assert_statement · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#242
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#243
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#244
switch_statement -> 'switch' · expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#245
loop_statement -> 'loop' · '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#246
for_statement -> 'for' · '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#247
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '{'}
additive_expression -> · multiplicative_expression : {'+' '-' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'{'}
relational_expression -> · shift_expression '<' shift_expression : {'{'}
relational_expression -> · shift_expression '<=' shift_expression : {'{'}
relational_expression -> · shift_expression '==' shift_expression : {'{'}
relational_expression -> · shift_expression '>' shift_expression : {'{'}
relational_expression -> · shift_expression '>=' shift_expression : {'{'}
relational_expression -> · shift_expression : {'{'}
shift_expression -> · additive_expression : {'{'}
shift_expression -> · unary_expression '<<' unary_expression : {'{'}
shift_expression -> · unary_expression '>>' unary_expression : {'{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/' '{'}

#248
func_call_statement -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#249
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#250
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#251
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#252
break_statement -> 'break' · : {}

#253
continue_statement -> 'continue' · : {}

#254
variable_updating_statement -> assignment_statement · : {}

#255
variable_updating_statement -> increment_statement · : {}

#256
variable_updating_statement -> decrement_statement · : {}

#257
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '{'}
additive_expression -> · multiplicative_expression : {'+' '-' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'{'}
relational_expression -> · shift_expression '<' shift_expression : {'{'}
relational_expression -> · shift_expression '<=' shift_expression : {'{'}
relational_expression -> · shift_expression '==' shift_expression : {'{'}
relational_expression -> · shift_expression '>' shift_expression : {'{'}
relational_expression -> · shift_expression '>=' shift_expression : {'{'}
relational_expression -> · shift_expression : {'{'}
shift_expression -> · additive_expression : {'{'}
shift_expression -> · unary_expression '<<' unary_expression : {'{'}
shift_expression -> · unary_expression '>>' unary_expression : {'{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/' '{'}

#258
callable -> ident · '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> ident · : {'('}
core_lhs_expression -> ident · : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#259
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '%=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '&=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '*=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '+=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '-=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '/=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '<<=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '>>=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '^=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}
compound_assignment_operator -> · '|=' : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#260
assignment_statement -> '_' · '=' expression : {}

#261
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#262
lhs_expression -> '*' · lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#263
lhs_expression -> '&' · lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#264
core_lhs_expression -> '(' · lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · '(' lhs_expression ')' : {'.' '['}
core_lhs_expression -> · ident : {'.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'.' '['}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#265
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#266
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {','}

#267
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {','}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#268
struct_member/0.0 -> struct_member/0.0/0 · : {}

#269
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#270
type_alias_decl -> 'type' ident '=' type_specifier · : {}

#271
type_specifier -> ident · '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {',' '=' '{'}
type_specifier -> ident · : {',' '=' '{'}

#272
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#273
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#274
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#275
optionally_typed_ident/0.1 -> ':' type_specifier · : {'='}

#276
global_variable_decl/0.2 -> '=' expression · : {}

#277
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#278
address_space -> 'function' · : {','}

#279
address_space -> 'private' · : {','}

#280
address_space -> 'workgroup' · : {','}

#281
address_space -> 'uniform' · : {','}

#282
address_space -> 'storage' · : {','}

#283
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {'='}

#284
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#285
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#286
global_constant_decl/1.3 -> '=' expression · : {}

#287
type_specifier -> ident '::' · '<' primary_expression callable/1.4 callable/1.5 '>' : {',' '=' '{'}

#288
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#289
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {','}

#290
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#291
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {','}

#292
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {','}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {','}

#293
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#294
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {'{'}

#295
function_header/0.3 -> param_list · : {}

#296
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {','}
param_list/0.1/0/0.0 -> · ',' param : {','}

#297
param -> param/0.0 · ident ':' type_specifier : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#298
param/0.0 -> param/0.0/0 · : {}

#299
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
param/0.0/0 -> · attribute param/0.0/0 : {}

#300
core_lhs_expression -> '(' lhs_expression · ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#301
core_lhs_expression -> ident · : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#302
lhs_expression -> '&' lhs_expression · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#303
lhs_expression -> '*' lhs_expression · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#304
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#305
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#306
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#307
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#308
increment_statement -> lhs_expression '++' · : {}

#309
decrement_statement -> lhs_expression '--' · : {}

#310
assignment_statement/0.1 -> '=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#311
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#312
compound_assignment_operator -> '+=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#313
compound_assignment_operator -> '-=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#314
compound_assignment_operator -> '*=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#315
compound_assignment_operator -> '/=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#316
compound_assignment_operator -> '%=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#317
compound_assignment_operator -> '&=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#318
compound_assignment_operator -> '|=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#319
compound_assignment_operator -> '^=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#320
compound_assignment_operator -> '>>=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#321
compound_assignment_operator -> '<<=' · : {'!' '&' '(' '*' '-' 'false' 'true' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[fh]/ /0[iu]?/ /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ /0[xX][0-9a-fA-F]+[iu]?/ /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ /[0-9]+[eE][+-]?[0-9]+[fh]?/ /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ /[1-9][0-9]*[fh]/ /[1-9][0-9]*[iu]?/}

#322
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#323
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#324
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#325
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#326
func_call_statement -> callable argument_expression_list · : {}

#327
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#328
for_statement -> 'for' '(' · for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#329
loop_statement -> 'loop' '{' · loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#330
switch_statement -> 'switch' expression · '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#331
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#332
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#333
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#334
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#335
return_statement -> 'return' return_statement/0.1 · : {}

#336
return_statement/0.1 -> expression · : {}

#337
statement -> const_assert_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#338
statement -> variable_updating_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#339
statement -> 'discard' ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#340
statement -> continue_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#341
statement -> break_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#342
statement -> variable_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#343
statement -> func_call_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#344
statement -> return_statement ';' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#345
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {}

#346
compound_statement -> '{' compound_statement/0.1 '}' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'const_assert' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'struct' 'switch' 'type' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#347
callable -> ident '::' '<' primary_expression · callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable/1.4 -> · callable/1.4/0 : {','}
callable/1.4/0 -> · callable/1.4/0/0.0 callable/1.4/0 : {','}
callable/1.4/0/0.0 -> · ',' primary_expression : {','}

#348
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#349
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {','}

#350
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {','}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {','}

#351
expression_comma_list/0.1/0/0.0 -> ',' · expression : {','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-'}
additive_expression -> · multiplicative_expression : {'+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {','}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression '&&' relational_expression : {','}
expression -> · short_circuit_or_expression '||' relational_expression : {','}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {','}
relational_expression -> · shift_expression '<' shift_expression : {','}
relational_expression -> · shift_expression '<=' shift_expression : {','}
relational_expression -> · shift_expression '==' shift_expression : {','}
relational_expression -> · shift_expression '>' shift_expression : {','}
relational_expression -> · shift_expression '>=' shift_expression : {','}
relational_expression -> · shift_expression : {','}
shift_expression -> · additive_expression : {','}
shift_expression -> · unary_expression '<<' unary_expression : {','}
shift_expression -> · unary_expression '>>' unary_expression : {','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/'}

#352
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {'%' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#353
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#354
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#355
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#356
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#357
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#358
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'@' 'fn' 'var'}

#359
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#360
attrib_end -> attrib_end/0.0 · ')' : {'@' 'fn' 'var'}

#361
attribute -> '@' 'size' '(' expression attrib_end · : {'@' 'fn' 'var'}

#362
attrib_end/0.0 -> ',' · : {}

#363
attribute -> '@' 'location' '(' expression attrib_end · : {'@' 'fn' 'var'}

#364
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'@' 'fn' 'var'}

#365
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'@' 'fn' 'var'}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#366
attribute -> '@' 'id' '(' expression attrib_end · : {'@' 'fn' 'var'}

#367
attribute -> '@' 'group' '(' expression attrib_end · : {'@' 'fn' 'var'}

#368
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'@' 'fn' 'var'}

#369
attribute -> '@' 'binding' '(' expression attrib_end · : {'@' 'fn' 'var'}

#370
attribute -> '@' 'align' '(' expression attrib_end · : {'@' 'fn' 'var'}

#371
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#372
interpolation_sample_name -> 'center' · : {')' ','}

#373
interpolation_sample_name -> 'centroid' · : {')' ','}

#374
interpolation_sample_name -> 'sample' · : {')' ','}

#375
attrib_end -> attrib_end/0.0 ')' · : {'@' 'fn' 'var'}

#376
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'@' 'fn' 'var'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#377
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#378
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'%' '%=' '&=' ')' '*' '*=' '+' '+=' ',' '-' '-=' '/' '/=' ':' '<<=' '=' '>>=' '^=' '{' '|='}

#379
expression_comma_list/0.1/0/0.0 -> ',' expression · : {','}

#380
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {','}

#381
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#382
expression_comma_list/0.2 -> ',' · : {}

#383
callable -> ident '::' '<' primary_expression callable/1.4 · callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable/1.5 -> · ',' : {}

#384
callable/1.4 -> callable/1.4/0 · : {','}

#385
callable/1.4/0 -> callable/1.4/0/0.0 · callable/1.4/0 : {','}
callable/1.4/0 -> · callable/1.4/0/0.0 callable/1.4/0 : {','}
callable/1.4/0/0.0 -> · ',' primary_expression : {','}

#386
callable/1.4/0/0.0 -> ',' · primary_expression : {','}
bool_literal -> · 'false' : {','}
bool_literal -> · 'true' : {','}
call_expression -> · callable argument_expression_list : {','}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ','}
callable -> · ident : {'(' ','}
decimal_float_literal -> · /0[fh]/ : {','}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {','}
decimal_int_literal -> · /0[iu]?/ : {','}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {','}
float_literal -> · decimal_float_literal : {','}
float_literal -> · hex_float_literal : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ','}
int_literal -> · decimal_int_literal : {','}
int_literal -> · hex_int_literal : {','}
literal -> · bool_literal : {','}
literal -> · float_literal : {','}
literal -> · int_literal : {','}
paren_expression -> · '(' expression ')' : {','}
primary_expression -> · call_expression : {','}
primary_expression -> · callable : {','}
primary_expression -> · literal : {','}
primary_expression -> · paren_expression : {','}

#387
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '{'}
additive_expression -> · multiplicative_expression : {'+' '-' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {'{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {'{'}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {'{'}
expression -> · short_circuit_or_expression '||' relational_expression : {'{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {'{'}
relational_expression -> · shift_expression '<' shift_expression : {'{'}
relational_expression -> · shift_expression '<=' shift_expression : {'{'}
relational_expression -> · shift_expression '==' shift_expression : {'{'}
relational_expression -> · shift_expression '>' shift_expression : {'{'}
relational_expression -> · shift_expression '>=' shift_expression : {'{'}
relational_expression -> · shift_expression : {'{'}
shift_expression -> · additive_expression : {'{'}
shift_expression -> · unary_expression '<<' unary_expression : {'{'}
shift_expression -> · unary_expression '>>' unary_expression : {'{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/' '{'}

#388
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#389
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#390
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#391
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#392
switch_statement -> 'switch' expression '{' · switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default'}
switch_body -> · case_clause : {'case' 'default'}
switch_body -> · default_alone_clause : {'case' 'default'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#393
loop_statement -> 'loop' '{' loop_statement/0.2 · loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.3 -> · continuing_statement : {}

#394
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing'}

#395
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing'}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#396
for_statement -> 'for' '(' for_header · ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#397
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#398
for_header/0.0 -> for_init · : {}

#399
for_init -> variable_statement · : {}

#400
for_init -> variable_updating_statement · : {}

#401
for_init -> func_call_statement · : {}

#402
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#403
variable_statement -> variable_decl '=' expression · : {}

#404
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#405
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#406
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#407
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#408
assignment_statement -> '_' '=' expression · : {}

#409
core_lhs_expression -> '(' lhs_expression ')' · : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#410
param/0.0/0 -> attribute param/0.0/0 · : {}

#411
param -> param/0.0 ident · ':' type_specifier : {','}

#412
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#413
param_list/0.1 -> param_list/0.1/0 · : {','}

#414
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {','}
param_list/0.1/0/0.0 -> · ',' param : {','}

#415
param_list/0.1/0/0.0 -> ',' · param : {','}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
param -> · param/0.0 ident ':' type_specifier : {','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#416
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {'{'}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {'{'}

#417
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {','}

#418
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {','}

#419
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#420
struct_body_decl/0.3 -> ',' · : {}

#421
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {','}
type_specifier -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {','}
type_specifier -> · ident : {','}

#422
type_specifier -> ident '::' '<' · primary_expression callable/1.4 callable/1.5 '>' : {',' '=' '{'}
bool_literal -> · 'false' : {','}
bool_literal -> · 'true' : {','}
call_expression -> · callable argument_expression_list : {','}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'(' ','}
callable -> · ident : {'(' ','}
decimal_float_literal -> · /0[fh]/ : {','}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {','}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {','}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {','}
decimal_int_literal -> · /0[iu]?/ : {','}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {','}
float_literal -> · decimal_float_literal : {','}
float_literal -> · hex_float_literal : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {','}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {','}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ','}
int_literal -> · decimal_int_literal : {','}
int_literal -> · hex_int_literal : {','}
literal -> · bool_literal : {','}
literal -> · float_literal : {','}
literal -> · int_literal : {','}
paren_expression -> · '(' expression ')' : {','}
primary_expression -> · call_expression : {','}
primary_expression -> · callable : {','}
primary_expression -> · literal : {','}
primary_expression -> · paren_expression : {','}

#423
variable_qualifier/0.2 -> ',' access_mode · : {}

#424
access_mode -> 'read' · : {}

#425
access_mode -> 'write' · : {}

#426
access_mode -> 'read_write' · : {}

#427
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#428
type_specifier -> ident '::' '<' primary_expression · callable/1.4 callable/1.5 '>' : {',' '=' '{'}
callable/1.4 -> · callable/1.4/0 : {','}
callable/1.4/0 -> · callable/1.4/0/0.0 callable/1.4/0 : {','}
callable/1.4/0/0.0 -> · ',' primary_expression : {','}

#429
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {','}

#430
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {';' '@' 'const' 'const_assert' 'fn' 'override' 'struct' 'type' 'var' EndOfText}

#431
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {'{'}

#432
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {'{'}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {}

#433
param_list/0.1/0/0.0 -> ',' param · : {','}

#434
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {','}

#435
param_list -> param param_list/0.1 param_list/0.2 · : {}

#436
param_list/0.2 -> ',' · : {}

#437
param -> param/0.0 ident ':' · type_specifier : {','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {','}
type_specifier -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {','}
type_specifier -> · ident : {','}

#438
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#439
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#440
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#441
for_statement -> 'for' '(' for_header ')' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#442
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing'}

#443
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#444
loop_statement/0.3 -> continuing_statement · : {}

#445
continuing_statement -> 'continuing' · continuing_compound_statement : {}
continuing_compound_statement -> · '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}

#446
switch_statement -> 'switch' expression '{' switch_statement/0.3 · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#447
switch_statement/0.3 -> switch_statement/0.3/0 · : {}

#448
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default'}
switch_body -> · case_clause : {'case' 'default'}
switch_body -> · default_alone_clause : {'case' 'default'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#449
switch_body -> case_clause · : {'case' 'default'}

#450
switch_body -> default_alone_clause · : {'case' 'default'}

#451
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {'+' ',' '-' ':' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression : {',' ':' '{'}
shift_expression -> · additive_expression : {',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {',' ':' '{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}

#452
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default'}
default_alone_clause/0.1 -> · ':' : {'{'}

#453
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#454
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#455
callable/1.4/0/0.0 -> ',' primary_expression · : {','}

#456
callable/1.4/0 -> callable/1.4/0/0.0 callable/1.4/0 · : {','}

#457
callable -> ident '::' '<' primary_expression callable/1.4 callable/1.5 · '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#458
callable/1.5 -> ',' · : {}

#459
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'@' 'fn' 'var'}

#460
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'@' 'fn' 'var'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {')' '+' ',' '-'}
additive_expression -> · multiplicative_expression : {')' '+' ',' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression '|' unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {')' ','}
bool_literal -> · 'false' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
callable -> · ident : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression '&&' relational_expression : {')' ','}
expression -> · short_circuit_or_expression '||' relational_expression : {')' ','}
float_literal -> · decimal_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · bool_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · float_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
literal -> · int_literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · callable : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · literal : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' ')' '*' '+' ',' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {')' ','}
relational_expression -> · shift_expression '<' shift_expression : {')' ','}
relational_expression -> · shift_expression '<=' shift_expression : {')' ','}
relational_expression -> · shift_expression '==' shift_expression : {')' ','}
relational_expression -> · shift_expression '>' shift_expression : {')' ','}
relational_expression -> · shift_expression '>=' shift_expression : {')' ','}
relational_expression -> · shift_expression : {')' ','}
shift_expression -> · additive_expression : {')' ','}
shift_expression -> · unary_expression '<<' unary_expression : {')' ','}
shift_expression -> · unary_expression '>>' unary_expression : {')' ','}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' ')' '*' '+' ',' '-' '/'}
unary_expression -> · singular_expression : {'%' ')' '*' '+' ',' '-' '/'}

#461
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'@' 'fn' 'var'}

#462
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'@' 'fn' 'var'}
attrib_end -> · attrib_end/0.0 ')' : {'@' 'fn' 'var'}
attrib_end/0.0 -> · ',' : {}

#463
callable -> ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' · : {'%' '(' ')' '*' '+' ',' '-' '.' '/' ':' '[' '{'}

#464
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#465
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'case' 'default'}

#466
default_alone_clause/0.1 -> ':' · : {'{'}

#467
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default'}
case_clause/0.2 -> · ':' : {'{'}

#468
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '{'}

#469
case_selector -> 'default' · : {',' ':' '{'}

#470
case_selector -> expression · : {',' ':' '{'}

#471
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {}

#472
switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#473
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#474
continuing_compound_statement -> '{' · continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#475
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#476
for_statement -> 'for' '(' for_header ')' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#477
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#478
for_header/0.2 -> expression · : {}

#479
param -> param/0.0 ident ':' type_specifier · : {','}

#480
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
type_specifier -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'{'}
type_specifier -> · ident : {'{'}

#481
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {}

#482
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'@'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'@'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'@'}
attribute -> · '@' 'compute' : {'@'}
attribute -> · '@' 'const' : {'@'}
attribute -> · '@' 'fragment' : {'@'}
attribute -> · '@' 'group' '(' expression attrib_end : {'@'}
attribute -> · '@' 'id' '(' expression attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'@'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'@'}
attribute -> · '@' 'invariant' : {'@'}
attribute -> · '@' 'location' '(' expression attrib_end : {'@'}
attribute -> · '@' 'size' '(' expression attrib_end : {'@'}
attribute -> · '@' 'vertex' : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'@'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'@'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {}

#483
type_specifier -> ident '::' '<' primary_expression callable/1.4 · callable/1.5 '>' : {',' '=' '{'}
callable/1.5 -> · ',' : {}

#484
type_specifier -> ident '::' '<' primary_expression callable/1.4 callable/1.5 · '>' : {',' '=' '{'}

#485
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {}

#486
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {'{'}

#487
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}

#488
continuing_compound_statement -> '{' continuing_compound_statement/0.1 · continuing_compound_statement/0.2 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.2 -> · break_if_statement : {}

#489
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break'}

#490
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break'}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'('}
callable -> · ident : {'('}
compound_statement -> · '{' compound_statement/0.1 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
const_assert_statement -> · 'const_assert' expression : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression '--' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '+=' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · '*' lhs_expression : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '+=' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {}
statement -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · 'discard' ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · const_assert_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'const_assert' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'switch' 'var' 'while' '{' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#491
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · ',' : {':' '{'}

#492
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#493
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {',' ':' '{'}

#494
case_selectors/0.1/0/0.0 -> ',' · case_selector : {',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' ',' '-' ':' '{'}
additive_expression -> · multiplicative_expression : {'+' ',' '-' ':' '{'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression '|' unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
bool_literal -> · 'true' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
call_expression -> · callable argument_expression_list : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
callable -> · ident : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression '&&' relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression '||' relational_expression : {',' ':' '{'}
float_literal -> · decimal_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
float_literal -> · hex_float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · decimal_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
int_literal -> · hex_int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · bool_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · float_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
literal -> · int_literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · call_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · callable : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · literal : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
primary_expression -> · paren_expression : {'%' '*' '+' ',' '-' '.' '/' ':' '[' '{'}
relational_expression -> · shift_expression '!=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '<=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '==' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression '>=' shift_expression : {',' ':' '{'}
relational_expression -> · shift_expression : {',' ':' '{'}
shift_expression -> · additive_expression : {',' ':' '{'}
shift_expression -> · unary_expression '<<' unary_expression : {',' ':' '{'}
shift_expression -> · unary_expression '>>' unary_expression : {',' ':' '{'}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}
unary_expression -> · singular_expression : {'%' '*' '+' ',' '-' '/' ':' '{'}

#495
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'case' 'default'}

#496
case_clause/0.2 -> ':' · : {'{'}

#497
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default'}

#498
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'@' 'fn' 'var'}

#499
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default'}

#500
case_selectors/0.1/0/0.0 -> ',' case_selector · : {',' ':' '{'}

#501
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#502
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#503
case_selectors/0.2 -> ',' · : {':' '{'}

#504
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break'}

#505
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 · '}' : {}

#506
continuing_compound_statement/0.2 -> break_if_statement · : {}

#507
break_if_statement -> 'break' · 'if' expression ';' : {}

#508
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#509
for_header/0.4 -> for_update · : {}

#510
for_update -> variable_updating_statement · : {}

#511
for_update -> func_call_statement · : {}

#512
type_specifier -> ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' · : {',' '=' '{'}

#513
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-'}
additive_expression -> · multiplicative_expression : {'+' '-'}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {'%' '*' '+' '-' '.' '/' '['}
bool_literal -> · 'true' : {'%' '*' '+' '-' '.' '/' '['}
call_expression -> · callable argument_expression_list : {'%' '*' '+' '-' '.' '/' '['}
callable -> · ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' : {'%' '(' '*' '+' '-' '.' '/' '['}
callable -> · ident : {'%' '(' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /0[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /0[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {'%' '*' '+' '-' '.' '/' '['}
float_literal -> · hex_float_literal : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '*' '+' '-' '.' '/' '['}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '*' '+' '-' '.' '/' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '(' '*' '+' '-' '.' '/' '['}
int_literal -> · decimal_int_literal : {'%' '*' '+' '-' '.' '/' '['}
int_literal -> · hex_int_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · bool_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · float_literal : {'%' '*' '+' '-' '.' '/' '['}
literal -> · int_literal : {'%' '*' '+' '-' '.' '/' '['}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/'}
paren_expression -> · '(' expression ')' : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · call_expression : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · callable : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · literal : {'%' '*' '+' '-' '.' '/' '['}
primary_expression -> · paren_expression : {'%' '*' '+' '-' '.' '/' '['}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '*' '+' '-' '/'}
unary_expression -> · '!' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '&' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '*' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '-' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · '~' unary_expression : {'%' '*' '+' '-' '/'}
unary_expression -> · singular_expression : {'%' '*' '+' '-' '/'}

#514
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' · : {}

#515
break_if_statement -> 'break' 'if' expression · ';' : {}

#516
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#2 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#3 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#4 global_decl -> ';' ·
r#5 global_decl -> struct_decl ·
r#6 global_decl -> function_decl ·
r#7 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#8 function_decl/0.0 -> function_decl/0.0/0 ·
r#9 attribute -> '@' 'const' ·
r#10 attribute -> '@' 'invariant' ·
r#11 attribute -> '@' 'vertex' ·
r#12 attribute -> '@' 'fragment' ·
r#13 attribute -> '@' 'compute' ·
r#14 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#15 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#16 expression -> relational_expression ·
r#17 expression -> bitwise_expression ·
r#18 relational_expression -> shift_expression ·
r#19 shift_expression -> additive_expression ·
r#20 multiplicative_expression -> unary_expression ·
r#21 additive_expression -> multiplicative_expression ·
r#22 unary_expression -> singular_expression ·
r#23 primary_expression -> callable ·
r#24 primary_expression -> call_expression ·
r#25 primary_expression -> literal ·
r#26 primary_expression -> paren_expression ·
r#27 callable -> ident ·
r#28 literal -> int_literal ·
r#29 literal -> float_literal ·
r#30 literal -> bool_literal ·
r#31 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#32 int_literal -> decimal_int_literal ·
r#33 int_literal -> hex_int_literal ·
r#34 float_literal -> decimal_float_literal ·
r#35 float_literal -> hex_float_literal ·
r#36 bool_literal -> 'true' ·
r#37 bool_literal -> 'false' ·
r#38 decimal_int_literal -> /0[iu]?/ ·
r#39 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#40 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#41 decimal_float_literal -> /0[fh]/ ·
r#42 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#43 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#44 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#45 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#46 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#47 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#48 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#49 global_decl -> const_assert_statement ';' ·
r#50 global_decl -> type_alias_decl ';' ·
r#51 global_decl -> global_constant_decl ';' ·
r#52 global_decl -> global_variable_decl ';' ·
r#53 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#54 global_directive -> 'enable' extension_name ';' ·
r#55 variable_decl/0.1 -> variable_qualifier ·
r#56 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#57 struct_decl -> 'struct' ident struct_body_decl ·
r#58 function_decl -> function_decl/0.0 function_header compound_statement ·
r#59 call_expression -> callable argument_expression_list ·
r#60 singular_expression -> primary_expression singular_expression/0.1 ·
r#61 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#62 unary_expression -> '&' unary_expression ·
r#63 unary_expression -> '*' unary_expression ·
r#64 unary_expression -> '~' unary_expression ·
r#65 unary_expression -> '!' unary_expression ·
r#66 unary_expression -> '-' unary_expression ·
r#67 multiplicative_operator -> '*' ·
r#68 multiplicative_operator -> '/' ·
r#69 multiplicative_operator -> '%' ·
r#70 additive_operator -> '+' ·
r#71 additive_operator -> '-' ·
r#72 builtin_value_name -> 'vertex_index' ·
r#73 builtin_value_name -> 'instance_index' ·
r#74 builtin_value_name -> 'position' ·
r#75 builtin_value_name -> 'front_facing' ·
r#76 builtin_value_name -> 'frag_depth' ·
r#77 builtin_value_name -> 'local_invocation_id' ·
r#78 builtin_value_name -> 'local_invocation_index' ·
r#79 builtin_value_name -> 'global_invocation_id' ·
r#80 builtin_value_name -> 'workgroup_id' ·
r#81 builtin_value_name -> 'num_workgroups' ·
r#82 builtin_value_name -> 'sample_index' ·
r#83 builtin_value_name -> 'sample_mask' ·
r#84 interpolation_type_name -> 'perspective' ·
r#85 interpolation_type_name -> 'linear' ·
r#86 interpolation_type_name -> 'flat' ·
r#87 expression -> short_circuit_or_expression '||' relational_expression ·
r#88 expression -> short_circuit_and_expression '&&' relational_expression ·
r#89 relational_expression -> shift_expression '!=' shift_expression ·
r#90 relational_expression -> shift_expression '==' shift_expression ·
r#91 relational_expression -> shift_expression '>=' shift_expression ·
r#92 relational_expression -> shift_expression '<=' shift_expression ·
r#93 relational_expression -> shift_expression '>' shift_expression ·
r#94 relational_expression -> shift_expression '<' shift_expression ·
r#95 bitwise_expression -> binary_and_expression '&' unary_expression ·
r#96 bitwise_expression -> binary_or_expression '|' unary_expression ·
r#97 bitwise_expression -> binary_xor_expression '^' unary_expression ·
r#98 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#99 shift_expression -> unary_expression '>>' unary_expression ·
r#100 shift_expression -> unary_expression '<<' unary_expression ·
r#101 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#102 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#103 swizzle_name -> '/[rgba]/' ·
r#104 swizzle_name -> '/[rgba][rgba]/' ·
r#105 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#106 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#107 swizzle_name -> '/[xyzw]/' ·
r#108 swizzle_name -> '/[xyzw][xyzw]/' ·
r#109 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#110 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#111 paren_expression -> '(' expression ')' ·
r#112 statement -> ';' ·
r#113 statement -> if_statement ·
r#114 statement -> switch_statement ·
r#115 statement -> loop_statement ·
r#116 statement -> for_statement ·
r#117 statement -> while_statement ·
r#118 statement -> compound_statement ·
r#119 core_lhs_expression -> ident ·
r#120 type_specifier -> ident ·
r#121 optionally_typed_ident/0.1 -> ':' type_specifier ·
r#122 address_space -> 'function' ·
r#123 address_space -> 'private' ·
r#124 address_space -> 'workgroup' ·
r#125 address_space -> 'uniform' ·
r#126 address_space -> 'storage' ·
r#127 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#128 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#129 lhs_expression -> '&' lhs_expression ·
r#130 lhs_expression -> '*' lhs_expression ·
r#131 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#132 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#133 assignment_statement/0.1 -> '=' ·
r#134 assignment_statement/0.1 -> compound_assignment_operator ·
r#135 compound_assignment_operator -> '+=' ·
r#136 compound_assignment_operator -> '-=' ·
r#137 compound_assignment_operator -> '*=' ·
r#138 compound_assignment_operator -> '/=' ·
r#139 compound_assignment_operator -> '%=' ·
r#140 compound_assignment_operator -> '&=' ·
r#141 compound_assignment_operator -> '|=' ·
r#142 compound_assignment_operator -> '^=' ·
r#143 compound_assignment_operator -> '>>=' ·
r#144 compound_assignment_operator -> '<<=' ·
r#145 if_statement/0.1 -> if_statement/0.1/0 ·
r#146 statement -> const_assert_statement ';' ·
r#147 statement -> variable_updating_statement ';' ·
r#148 statement -> 'discard' ';' ·
r#149 statement -> continue_statement ';' ·
r#150 statement -> break_statement ';' ·
r#151 statement -> variable_statement ';' ·
r#152 statement -> func_call_statement ';' ·
r#153 statement -> return_statement ';' ·
r#154 compound_statement -> '{' compound_statement/0.1 '}' ·
r#155 expression_comma_list/0.1 -> expression_comma_list/0.1/0 ·
r#156 argument_expression_list -> '(' argument_expression_list/0.1 ')' ·
r#157 component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 ·
r#158 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#159 component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 ·
r#160 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#161 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#162 attribute -> '@' 'size' '(' expression attrib_end ·
r#163 attribute -> '@' 'location' '(' expression attrib_end ·
r#164 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#165 attribute -> '@' 'id' '(' expression attrib_end ·
r#166 attribute -> '@' 'group' '(' expression attrib_end ·
r#167 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#168 attribute -> '@' 'binding' '(' expression attrib_end ·
r#169 attribute -> '@' 'align' '(' expression attrib_end ·
r#170 interpolation_sample_name -> 'center' ·
r#171 interpolation_sample_name -> 'centroid' ·
r#172 interpolation_sample_name -> 'sample' ·
r#173 attrib_end -> attrib_end/0.0 ')' ·
r#174 component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 ·
r#175 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#176 expression_comma_list/0.1/0/0.0 -> ',' expression ·
r#177 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ·
r#178 callable/1.4 -> callable/1.4/0 ·
r#179 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#180 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#181 if_statement/0.2 -> else_clause ·
r#182 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#183 while_statement -> 'while' expression compound_statement ·
r#184 if_clause -> 'if' expression compound_statement ·
r#185 core_lhs_expression -> '(' lhs_expression ')' ·
r#186 param_list/0.1 -> param_list/0.1/0 ·
r#187 struct_body_decl/0.2/0/0.0 -> ',' struct_member ·
r#188 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#189 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#190 struct_member -> struct_member/0.0 member_ident ':' type_specifier ·
r#191 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#192 function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 ·
r#193 param_list/0.1/0/0.0 -> ',' param ·
r#194 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#195 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#196 switch_body -> case_clause ·
r#197 switch_body -> default_alone_clause ·
r#198 else_clause -> 'else' compound_statement ·
r#199 callable/1.4/0/0.0 -> ',' primary_expression ·
r#200 callable/1.4/0 -> callable/1.4/0/0.0 callable/1.4/0 ·
r#201 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#202 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#203 callable -> ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' ·
r#204 else_if_clause -> 'else' 'if' expression compound_statement ·
r#205 default_alone_clause/0.1 -> ':' ·
r#206 case_selector -> 'default' ·
r#207 case_selector -> expression ·
r#208 switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' ·
r#209 loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ·
r#210 for_statement -> 'for' '(' for_header ')' compound_statement ·
r#211 param -> param/0.0 ident ':' type_specifier ·
r#212 function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier ·
r#213 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#214 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#215 case_clause/0.2 -> ':' ·
r#216 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#217 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#218 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#219 case_selectors/0.1/0/0.0 -> ',' case_selector ·
r#220 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#221 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#222 case_selectors/0.2 -> ',' ·
r#223 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#224 type_specifier -> ident '::' '<' primary_expression callable/1.4 callable/1.5 '>' ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#12
[#2 '@']: s#30
[#2 'const']: s#20
[#2 'const_assert']: s#25
[#2 'struct']: s#23
[#2 'type']: s#22
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'const_assert']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#108
[#8 ';']: r#1
[#8 '@']: r#1
[#8 'const']: r#1
[#8 'const_assert']: r#1
[#8 'fn']: r#1
[#8 'override']: r#1
[#8 'struct']: r#1
[#8 'type']: r#1
[#8 'var']: r#1
[#8 EndOfText]: r#1
[#9 EndOfText]: r#2
[#10 EndOfText]: r#3
[#11 ';']: s#12
[#11 '@']: s#30
[#11 'const']: s#20
[#11 'const_assert']: s#25
[#11 'struct']: s#23
[#11 'type']: s#22
[#12 ';']: r#4
[#12 '@']: r#4
[#12 'const']: r#4
[#12 'const_assert']: r#4
[#12 'fn']: r#4
[#12 'override']: r#4
[#12 'struct']: r#4
[#12 'type']: r#4
[#12 'var']: r#4
[#12 EndOfText]: r#4
[#13 ';']: s#106
[#14 ';']: s#105
[#15 ';']: s#104
[#16 ';']: r#5
[#16 '@']: r#5
[#16 'const']: r#5
[#16 'const_assert']: r#5
[#16 'fn']: r#5
[#16 'override']: r#5
[#16 'struct']: r#5
[#16 'type']: r#5
[#16 'var']: r#5
[#16 EndOfText]: r#5
[#17 ';']: r#6
[#17 '@']: r#6
[#17 'const']: r#6
[#17 'const_assert']: r#6
[#17 'fn']: r#6
[#17 'override']: r#6
[#17 'struct']: r#6
[#17 'type']: r#6
[#17 'var']: r#6
[#17 EndOfText]: r#6
[#18 ';']: s#103
[#19 'var']: s#102
[#20 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#21 'override']: s#98
[#22 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#24 'fn']: s#95
[#25 '!']: s#62
[#25 '&']: s#65
[#25 '(']: s#75
[#25 '*']: s#64
[#25 '-']: s#61
[#25 'false']: s#82
[#25 'true']: s#81
[#25 '~']: s#63
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#25 /0[fh]/]: s#86
[#25 /0[iu]?/]: s#83
[#25 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#25 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#25 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#25 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#25 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#25 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#25 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#25 /[1-9][0-9]*[fh]/]: s#87
[#25 /[1-9][0-9]*[iu]?/]: s#84
[#26 'var']: r#7
[#28 'fn']: r#8
[#29 '@']: s#30
[#30 'align']: s#31
[#30 'binding']: s#32
[#30 'builtin']: s#33
[#30 'compute']: s#44
[#30 'const']: s#34
[#30 'fragment']: s#43
[#30 'group']: s#35
[#30 'id']: s#36
[#30 'interpolate']: s#37
[#30 'invariant']: s#38
[#30 'location']: s#39
[#30 'size']: s#40
[#30 'vertex']: s#42
[#30 'workgroup_size']: s#41
[#31 '(']: s#165
[#32 '(']: s#164
[#33 '(']: s#163
[#34 '@']: r#9
[#34 'fn']: r#9
[#34 'var']: r#9
[#35 '(']: s#162
[#36 '(']: s#161
[#37 '(']: s#160
[#38 '@']: r#10
[#38 'fn']: r#10
[#38 'var']: r#10
[#39 '(']: s#159
[#40 '(']: s#158
[#41 '(']: s#157
[#42 '@']: r#11
[#42 'fn']: r#11
[#42 'var']: r#11
[#43 '@']: r#12
[#43 'fn']: r#12
[#43 'var']: r#12
[#44 '@']: r#13
[#44 'fn']: r#13
[#44 'var']: r#13
[#45 'var']: r#14
[#47 'fn']: r#15
[#49 ')']: r#16
[#49 ',']: r#16
[#49 ':']: r#16
[#49 '{']: r#16
[#50 '||']: s#156
[#51 '&&']: s#155
[#52 ')']: r#17
[#52 ',']: r#17
[#52 ':']: r#17
[#52 '{']: r#17
[#53 '!=']: s#154
[#53 ')']: r#18
[#53 ',']: r#18
[#53 ':']: r#18
[#53 '<']: s#149
[#53 '<=']: s#151
[#53 '==']: s#153
[#53 '>']: s#150
[#53 '>=']: s#152
[#53 '{']: r#18
[#54 '&']: s#148
[#55 '|']: s#147
[#56 '^']: s#146
[#57 ')']: r#19
[#57 '+']: s#144
[#57 ',']: r#19
[#57 '-']: s#145
[#57 ':']: r#19
[#57 '{']: r#19
[#58 '%']: r#20
[#58 ')']: r#20
[#58 '*']: r#20
[#58 '+']: r#20
[#58 ',']: r#20
[#58 '-']: r#20
[#58 '/']: r#20
[#58 ':']: r#20
[#58 '<<']: s#141
[#58 '>>']: s#142
[#58 '{']: r#20
[#59 '%']: s#140
[#59 ')']: r#21
[#59 '*']: s#138
[#59 '+']: r#21
[#59 ',']: r#21
[#59 '-']: r#21
[#59 '/']: s#139
[#59 ':']: r#21
[#59 '{']: r#21
[#60 '%']: r#22
[#60 ')']: r#22
[#60 '*']: r#22
[#60 '+']: r#22
[#60 ',']: r#22
[#60 '-']: r#22
[#60 '/']: r#22
[#60 ':']: r#22
[#60 '{']: r#22
[#61 '!']: s#62
[#61 '&']: s#65
[#61 '(']: s#75
[#61 '*']: s#64
[#61 '-']: s#61
[#61 'false']: s#82
[#61 'true']: s#81
[#61 '~']: s#63
[#61 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#61 /0[fh]/]: s#86
[#61 /0[iu]?/]: s#83
[#61 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#61 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#61 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#61 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#61 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#61 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#61 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#61 /[1-9][0-9]*[fh]/]: s#87
[#61 /[1-9][0-9]*[iu]?/]: s#84
[#62 '!']: s#62
[#62 '&']: s#65
[#62 '(']: s#75
[#62 '*']: s#64
[#62 '-']: s#61
[#62 'false']: s#82
[#62 'true']: s#81
[#62 '~']: s#63
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#62 /0[fh]/]: s#86
[#62 /0[iu]?/]: s#83
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#62 /[1-9][0-9]*[fh]/]: s#87
[#62 /[1-9][0-9]*[iu]?/]: s#84
[#63 '!']: s#62
[#63 '&']: s#65
[#63 '(']: s#75
[#63 '*']: s#64
[#63 '-']: s#61
[#63 'false']: s#82
[#63 'true']: s#81
[#63 '~']: s#63
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#63 /0[fh]/]: s#86
[#63 /0[iu]?/]: s#83
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#63 /[1-9][0-9]*[fh]/]: s#87
[#63 /[1-9][0-9]*[iu]?/]: s#84
[#64 '!']: s#62
[#64 '&']: s#65
[#64 '(']: s#75
[#64 '*']: s#64
[#64 '-']: s#61
[#64 'false']: s#82
[#64 'true']: s#81
[#64 '~']: s#63
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#64 /0[fh]/]: s#86
[#64 /0[iu]?/]: s#83
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#64 /[1-9][0-9]*[fh]/]: s#87
[#64 /[1-9][0-9]*[iu]?/]: s#84
[#65 '!']: s#62
[#65 '&']: s#65
[#65 '(']: s#75
[#65 '*']: s#64
[#65 '-']: s#61
[#65 'false']: s#82
[#65 'true']: s#81
[#65 '~']: s#63
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#65 /0[fh]/]: s#86
[#65 /0[iu]?/]: s#83
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#65 /[1-9][0-9]*[fh]/]: s#87
[#65 /[1-9][0-9]*[iu]?/]: s#84
[#66 '.']: s#131
[#66 '[']: s#130
[#67 '%']: r#23
[#67 '(']: s#127
[#67 ')']: r#23
[#67 '*']: r#23
[#67 '+']: r#23
[#67 ',']: r#23
[#67 '-']: r#23
[#67 '.']: r#23
[#67 '/']: r#23
[#67 ':']: r#23
[#67 '[']: r#23
[#67 '{']: r#23
[#68 '%']: r#24
[#68 ')']: r#24
[#68 '*']: r#24
[#68 '+']: r#24
[#68 ',']: r#24
[#68 '-']: r#24
[#68 '.']: r#24
[#68 '/']: r#24
[#68 ':']: r#24
[#68 '[']: r#24
[#68 '{']: r#24
[#69 '%']: r#25
[#69 ')']: r#25
[#69 '*']: r#25
[#69 '+']: r#25
[#69 ',']: r#25
[#69 '-']: r#25
[#69 '.']: r#25
[#69 '/']: r#25
[#69 ':']: r#25
[#69 '[']: r#25
[#69 '{']: r#25
[#70 '%']: r#26
[#70 ')']: r#26
[#70 '*']: r#26
[#70 '+']: r#26
[#70 ',']: r#26
[#70 '-']: r#26
[#70 '.']: r#26
[#70 '/']: r#26
[#70 ':']: r#26
[#70 '[']: r#26
[#70 '{']: r#26
[#71 '%']: r#27
[#71 '(']: r#27
[#71 ')']: r#27
[#71 '*']: r#27
[#71 '+']: r#27
[#71 ',']: r#27
[#71 '-']: r#27
[#71 '.']: r#27
[#71 '/']: r#27
[#71 ':']: r#27
[#71 '::']: s#125
[#71 '[']: r#27
[#71 '{']: r#27
[#72 '%']: r#28
[#72 ')']: r#28
[#72 '*']: r#28
[#72 '+']: r#28
[#72 ',']: r#28
[#72 '-']: r#28
[#72 '.']: r#28
[#72 '/']: r#28
[#72 ':']: r#28
[#72 '[']: r#28
[#72 '{']: r#28
[#73 '%']: r#29
[#73 ')']: r#29
[#73 '*']: r#29
[#73 '+']: r#29
[#73 ',']: r#29
[#73 '-']: r#29
[#73 '.']: r#29
[#73 '/']: r#29
[#73 ':']: r#29
[#73 '[']: r#29
[#73 '{']: r#29
[#74 '%']: r#30
[#74 ')']: r#30
[#74 '*']: r#30
[#74 '+']: r#30
[#74 ',']: r#30
[#74 '-']: r#30
[#74 '.']: r#30
[#74 '/']: r#30
[#74 ':']: r#30
[#74 '[']: r#30
[#74 '{']: r#30
[#75 '!']: s#62
[#75 '&']: s#65
[#75 '(']: s#75
[#75 '*']: s#64
[#75 '-']: s#61
[#75 'false']: s#82
[#75 'true']: s#81
[#75 '~']: s#63
[#75 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#75 /0[fh]/]: s#86
[#75 /0[iu]?/]: s#83
[#75 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#75 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#75 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#75 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#75 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#75 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#75 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#75 /[1-9][0-9]*[fh]/]: s#87
[#75 /[1-9][0-9]*[iu]?/]: s#84
[#76 '%']: r#31
[#76 '%=']: r#31
[#76 '&=']: r#31
[#76 '(']: r#31
[#76 ')']: r#31
[#76 '*']: r#31
[#76 '*=']: r#31
[#76 '+']: r#31
[#76 '+=']: r#31
[#76 ',']: r#31
[#76 '-']: r#31
[#76 '-=']: r#31
[#76 '.']: r#31
[#76 '/']: r#31
[#76 '/=']: r#31
[#76 ':']: r#31
[#76 '<<=']: r#31
[#76 '=']: r#31
[#76 '>>=']: r#31
[#76 '[']: r#31
[#76 '^=']: r#31
[#76 '{']: r#31
[#76 '|=']: r#31
[#77 '%']: r#32
[#77 ')']: r#32
[#77 '*']: r#32
[#77 '+']: r#32
[#77 ',']: r#32
[#77 '-']: r#32
[#77 '.']: r#32
[#77 '/']: r#32
[#77 ':']: r#32
[#77 '[']: r#32
[#77 '{']: r#32
[#78 '%']: r#33
[#78 ')']: r#33
[#78 '*']: r#33
[#78 '+']: r#33
[#78 ',']: r#33
[#78 '-']: r#33
[#78 '.']: r#33
[#78 '/']: r#33
[#78 ':']: r#33
[#78 '[']: r#33
[#78 '{']: r#33
[#79 '%']: r#34
[#79 ')']: r#34
[#79 '*']: r#34
[#79 '+']: r#34
[#79 ',']: r#34
[#79 '-']: r#34
[#79 '.']: r#34
[#79 '/']: r#34
[#79 ':']: r#34
[#79 '[']: r#34
[#79 '{']: r#34
[#80 '%']: r#35
[#80 ')']: r#35
[#80 '*']: r#35
[#80 '+']: r#35
[#80 ',']: r#35
[#80 '-']: r#35
[#80 '.']: r#35
[#80 '/']: r#35
[#80 ':']: r#35
[#80 '[']: r#35
[#80 '{']: r#35
[#81 '%']: r#36
[#81 ')']: r#36
[#81 '*']: r#36
[#81 '+']: r#36
[#81 ',']: r#36
[#81 '-']: r#36
[#81 '.']: r#36
[#81 '/']: r#36
[#81 ':']: r#36
[#81 '[']: r#36
[#81 '{']: r#36
[#82 '%']: r#37
[#82 ')']: r#37
[#82 '*']: r#37
[#82 '+']: r#37
[#82 ',']: r#37
[#82 '-']: r#37
[#82 '.']: r#37
[#82 '/']: r#37
[#82 ':']: r#37
[#82 '[']: r#37
[#82 '{']: r#37
[#83 '%']: r#38
[#83 ')']: r#38
[#83 '*']: r#38
[#83 '+']: r#38
[#83 ',']: r#38
[#83 '-']: r#38
[#83 '.']: r#38
[#83 '/']: r#38
[#83 ':']: r#38
[#83 '[']: r#38
[#83 '{']: r#38
[#84 '%']: r#39
[#84 ')']: r#39
[#84 '*']: r#39
[#84 '+']: r#39
[#84 ',']: r#39
[#84 '-']: r#39
[#84 '.']: r#39
[#84 '/']: r#39
[#84 ':']: r#39
[#84 '[']: r#39
[#84 '{']: r#39
[#85 '%']: r#40
[#85 ')']: r#40
[#85 '*']: r#40
[#85 '+']: r#40
[#85 ',']: r#40
[#85 '-']: r#40
[#85 '.']: r#40
[#85 '/']: r#40
[#85 ':']: r#40
[#85 '[']: r#40
[#85 '{']: r#40
[#86 '%']: r#41
[#86 ')']: r#41
[#86 '*']: r#41
[#86 '+']: r#41
[#86 ',']: r#41
[#86 '-']: r#41
[#86 '.']: r#41
[#86 '/']: r#41
[#86 ':']: r#41
[#86 '[']: r#41
[#86 '{']: r#41
[#87 '%']: r#42
[#87 ')']: r#42
[#87 '*']: r#42
[#87 '+']: r#42
[#87 ',']: r#42
[#87 '-']: r#42
[#87 '.']: r#42
[#87 '/']: r#42
[#87 ':']: r#42
[#87 '[']: r#42
[#87 '{']: r#42
[#88 '%']: r#43
[#88 ')']: r#43
[#88 '*']: r#43
[#88 '+']: r#43
[#88 ',']: r#43
[#88 '-']: r#43
[#88 '.']: r#43
[#88 '/']: r#43
[#88 ':']: r#43
[#88 '[']: r#43
[#88 '{']: r#43
[#89 '%']: r#44
[#89 ')']: r#44
[#89 '*']: r#44
[#89 '+']: r#44
[#89 ',']: r#44
[#89 '-']: r#44
[#89 '.']: r#44
[#89 '/']: r#44
[#89 ':']: r#44
[#89 '[']: r#44
[#89 '{']: r#44
[#90 '%']: r#45
[#90 ')']: r#45
[#90 '*']: r#45
[#90 '+']: r#45
[#90 ',']: r#45
[#90 '-']: r#45
[#90 '.']: r#45
[#90 '/']: r#45
[#90 ':']: r#45
[#90 '[']: r#45
[#90 '{']: r#45
[#91 '%']: r#46
[#91 ')']: r#46
[#91 '*']: r#46
[#91 '+']: r#46
[#91 ',']: r#46
[#91 '-']: r#46
[#91 '.']: r#46
[#91 '/']: r#46
[#91 ':']: r#46
[#91 '[']: r#46
[#91 '{']: r#46
[#92 '%']: r#47
[#92 ')']: r#47
[#92 '*']: r#47
[#92 '+']: r#47
[#92 ',']: r#47
[#92 '-']: r#47
[#92 '.']: r#47
[#92 '/']: r#47
[#92 ':']: r#47
[#92 '[']: r#47
[#92 '{']: r#47
[#93 '%']: r#48
[#93 ')']: r#48
[#93 '*']: r#48
[#93 '+']: r#48
[#93 ',']: r#48
[#93 '-']: r#48
[#93 '.']: r#48
[#93 '/']: r#48
[#93 ':']: r#48
[#93 '[']: r#48
[#93 '{']: r#48
[#94 '{']: s#123
[#95 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#96 '{']: s#120
[#97 '=']: s#118
[#98 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#99 '=']: s#116
[#100 ':']: s#115
[#101 '=']: s#113
[#102 '<']: s#111
[#103 ';']: r#49
[#103 '@']: r#49
[#103 'const']: r#49
[#103 'const_assert']: r#49
[#103 'fn']: r#49
[#103 'override']: r#49
[#103 'struct']: r#49
[#103 'type']: r#49
[#103 'var']: r#49
[#103 EndOfText]: r#49
[#104 ';']: r#50
[#104 '@']: r#50
[#104 'const']: r#50
[#104 'const_assert']: r#50
[#104 'fn']: r#50
[#104 'override']: r#50
[#104 'struct']: r#50
[#104 'type']: r#50
[#104 'var']: r#50
[#104 EndOfText]: r#50
[#105 ';']: r#51
[#105 '@']: r#51
[#105 'const']: r#51
[#105 'const_assert']: r#51
[#105 'fn']: r#51
[#105 'override']: r#51
[#105 'struct']: r#51
[#105 'type']: r#51
[#105 'var']: r#51
[#105 EndOfText]: r#51
[#106 ';']: r#52
[#106 '@']: r#52
[#106 'const']: r#52
[#106 'const_assert']: r#52
[#106 'fn']: r#52
[#106 'override']: r#52
[#106 'struct']: r#52
[#106 'type']: r#52
[#106 'var']: r#52
[#106 EndOfText]: r#52
[#107 EndOfText]: r#53
[#108 ';']: r#54
[#108 '@']: r#54
[#108 'const']: r#54
[#108 'const_assert']: r#54
[#108 'enable']: r#54
[#108 'fn']: r#54
[#108 'override']: r#54
[#108 'struct']: r#54
[#108 'type']: r#54
[#108 'var']: r#54
[#108 EndOfText]: r#54
[#109 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#110 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#55
[#111 'function']: s#278
[#111 'private']: s#279
[#111 'storage']: s#282
[#111 'uniform']: s#281
[#111 'workgroup']: s#280
[#113 '!']: s#62
[#113 '&']: s#65
[#113 '(']: s#75
[#113 '*']: s#64
[#113 '-']: s#61
[#113 'false']: s#82
[#113 'true']: s#81
[#113 '~']: s#63
[#113 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#113 /0[fh]/]: s#86
[#113 /0[iu]?/]: s#83
[#113 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#113 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#113 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#113 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#113 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#113 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#113 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#113 /[1-9][0-9]*[fh]/]: s#87
[#113 /[1-9][0-9]*[iu]?/]: s#84
[#114 '=']: r#56
[#115 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#116 '!']: s#62
[#116 '&']: s#65
[#116 '(']: s#75
[#116 '*']: s#64
[#116 '-']: s#61
[#116 'false']: s#82
[#116 'true']: s#81
[#116 '~']: s#63
[#116 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#116 /0[fh]/]: s#86
[#116 /0[iu]?/]: s#83
[#116 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#116 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#116 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#116 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#116 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#116 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#116 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#116 /[1-9][0-9]*[fh]/]: s#87
[#116 /[1-9][0-9]*[iu]?/]: s#84
[#117 '=']: s#273
[#118 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#119 ';']: r#57
[#119 '@']: r#57
[#119 'const']: r#57
[#119 'const_assert']: r#57
[#119 'fn']: r#57
[#119 'override']: r#57
[#119 'struct']: r#57
[#119 'type']: r#57
[#119 'var']: r#57
[#119 EndOfText]: r#57
[#120 '@']: s#30
[#121 '(']: s#265
[#122 ';']: r#58
[#122 '@']: r#58
[#122 'const']: r#58
[#122 'const_assert']: r#58
[#122 'fn']: r#58
[#122 'override']: r#58
[#122 'struct']: r#58
[#122 'type']: r#58
[#122 'var']: r#58
[#122 EndOfText]: r#58
[#123 '&']: s#263
[#123 '(']: s#264
[#123 '*']: s#262
[#123 ';']: s#227
[#123 '_']: s#260
[#123 'break']: s#252
[#123 'const']: s#251
[#123 'const_assert']: s#25
[#123 'continue']: s#253
[#123 'discard']: s#238
[#123 'for']: s#246
[#123 'if']: s#257
[#123 'let']: s#250
[#123 'loop']: s#245
[#123 'return']: s#242
[#123 'switch']: s#244
[#123 'var']: s#102
[#123 'while']: s#247
[#123 '{']: s#123
[#123 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#124 ')']: s#223
[#125 '<']: s#222
[#126 '%']: r#59
[#126 ')']: r#59
[#126 '*']: r#59
[#126 '+']: r#59
[#126 ',']: r#59
[#126 '-']: r#59
[#126 '.']: r#59
[#126 '/']: r#59
[#126 ':']: r#59
[#126 '[']: r#59
[#126 '{']: r#59
[#127 '!']: s#62
[#127 '&']: s#65
[#127 '(']: s#75
[#127 '*']: s#64
[#127 '-']: s#61
[#127 'false']: s#82
[#127 'true']: s#81
[#127 '~']: s#63
[#127 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#127 /0[fh]/]: s#86
[#127 /0[iu]?/]: s#83
[#127 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#127 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#127 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#127 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#127 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#127 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#127 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#127 /[1-9][0-9]*[fh]/]: s#87
[#127 /[1-9][0-9]*[iu]?/]: s#84
[#128 '%']: r#60
[#128 ')']: r#60
[#128 '*']: r#60
[#128 '+']: r#60
[#128 ',']: r#60
[#128 '-']: r#60
[#128 '/']: r#60
[#128 ':']: r#60
[#128 '{']: r#60
[#129 '%']: r#61
[#129 ')']: r#61
[#129 '*']: r#61
[#129 '+']: r#61
[#129 ',']: r#61
[#129 '-']: r#61
[#129 '/']: r#61
[#129 ':']: r#61
[#129 '{']: r#61
[#130 '!']: s#62
[#130 '&']: s#65
[#130 '(']: s#75
[#130 '*']: s#64
[#130 '-']: s#61
[#130 'false']: s#82
[#130 'true']: s#81
[#130 '~']: s#63
[#130 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#130 /0[fh]/]: s#86
[#130 /0[iu]?/]: s#83
[#130 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#130 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#130 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#130 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#130 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#130 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#130 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#130 /[1-9][0-9]*[fh]/]: s#87
[#130 /[1-9][0-9]*[iu]?/]: s#84
[#131 '/[rgba]/']: s#210
[#131 '/[rgba][rgba]/']: s#211
[#131 '/[rgba][rgba][rgba]/']: s#212
[#131 '/[rgba][rgba][rgba][rgba]/']: s#213
[#131 '/[xyzw]/']: s#214
[#131 '/[xyzw][xyzw]/']: s#215
[#131 '/[xyzw][xyzw][xyzw]/']: s#216
[#131 '/[xyzw][xyzw][xyzw][xyzw]/']: s#217
[#131 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#209
[#132 '%']: r#62
[#132 ')']: r#62
[#132 '*']: r#62
[#132 '+']: r#62
[#132 ',']: r#62
[#132 '-']: r#62
[#132 '/']: r#62
[#132 ':']: r#62
[#132 '{']: r#62
[#133 '%']: r#63
[#133 ')']: r#63
[#133 '*']: r#63
[#133 '+']: r#63
[#133 ',']: r#63
[#133 '-']: r#63
[#133 '/']: r#63
[#133 ':']: r#63
[#133 '{']: r#63
[#134 '%']: r#64
[#134 ')']: r#64
[#134 '*']: r#64
[#134 '+']: r#64
[#134 ',']: r#64
[#134 '-']: r#64
[#134 '/']: r#64
[#134 ':']: r#64
[#134 '{']: r#64
[#135 '%']: r#65
[#135 ')']: r#65
[#135 '*']: r#65
[#135 '+']: r#65
[#135 ',']: r#65
[#135 '-']: r#65
[#135 '/']: r#65
[#135 ':']: r#65
[#135 '{']: r#65
[#136 '%']: r#66
[#136 ')']: r#66
[#136 '*']: r#66
[#136 '+']: r#66
[#136 ',']: r#66
[#136 '-']: r#66
[#136 '/']: r#66
[#136 ':']: r#66
[#136 '{']: r#66
[#137 '!']: s#62
[#137 '&']: s#65
[#137 '(']: s#75
[#137 '*']: s#64
[#137 '-']: s#61
[#137 'false']: s#82
[#137 'true']: s#81
[#137 '~']: s#63
[#137 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#137 /0[fh]/]: s#86
[#137 /0[iu]?/]: s#83
[#137 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#137 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#137 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#137 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#137 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#137 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#137 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#137 /[1-9][0-9]*[fh]/]: s#87
[#137 /[1-9][0-9]*[iu]?/]: s#84
[#138 '!']: r#67
[#138 '&']: r#67
[#138 '(']: r#67
[#138 '*']: r#67
[#138 '-']: r#67
[#138 'false']: r#67
[#138 'true']: r#67
[#138 '~']: r#67
[#138 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#67
[#138 /0[fh]/]: r#67
[#138 /0[iu]?/]: r#67
[#138 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#67
[#138 /0[xX][0-9a-fA-F]+[iu]?/]: r#67
[#138 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#67
[#138 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#67
[#138 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#67
[#138 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#67
[#138 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#67
[#138 /[1-9][0-9]*[fh]/]: r#67
[#138 /[1-9][0-9]*[iu]?/]: r#67
[#139 '!']: r#68
[#139 '&']: r#68
[#139 '(']: r#68
[#139 '*']: r#68
[#139 '-']: r#68
[#139 'false']: r#68
[#139 'true']: r#68
[#139 '~']: r#68
[#139 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#68
[#139 /0[fh]/]: r#68
[#139 /0[iu]?/]: r#68
[#139 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#68
[#139 /0[xX][0-9a-fA-F]+[iu]?/]: r#68
[#139 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#68
[#139 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#68
[#139 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#68
[#139 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#68
[#139 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#68
[#139 /[1-9][0-9]*[fh]/]: r#68
[#139 /[1-9][0-9]*[iu]?/]: r#68
[#140 '!']: r#69
[#140 '&']: r#69
[#140 '(']: r#69
[#140 '*']: r#69
[#140 '-']: r#69
[#140 'false']: r#69
[#140 'true']: r#69
[#140 '~']: r#69
[#140 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#69
[#140 /0[fh]/]: r#69
[#140 /0[iu]?/]: r#69
[#140 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#69
[#140 /0[xX][0-9a-fA-F]+[iu]?/]: r#69
[#140 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#69
[#140 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#69
[#140 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#69
[#140 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#69
[#140 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#69
[#140 /[1-9][0-9]*[fh]/]: r#69
[#140 /[1-9][0-9]*[iu]?/]: r#69
[#141 '!']: s#62
[#141 '&']: s#65
[#141 '(']: s#75
[#141 '*']: s#64
[#141 '-']: s#61
[#141 'false']: s#82
[#141 'true']: s#81
[#141 '~']: s#63
[#141 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#141 /0[fh]/]: s#86
[#141 /0[iu]?/]: s#83
[#141 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#141 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#141 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#141 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#141 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#141 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#141 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#141 /[1-9][0-9]*[fh]/]: s#87
[#141 /[1-9][0-9]*[iu]?/]: s#84
[#142 '!']: s#62
[#142 '&']: s#65
[#142 '(']: s#75
[#142 '*']: s#64
[#142 '-']: s#61
[#142 'false']: s#82
[#142 'true']: s#81
[#142 '~']: s#63
[#142 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#142 /0[fh]/]: s#86
[#142 /0[iu]?/]: s#83
[#142 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#142 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#142 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#142 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#142 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#142 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#142 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#142 /[1-9][0-9]*[fh]/]: s#87
[#142 /[1-9][0-9]*[iu]?/]: s#84
[#143 '!']: s#62
[#143 '&']: s#65
[#143 '(']: s#75
[#143 '*']: s#64
[#143 '-']: s#61
[#143 'false']: s#82
[#143 'true']: s#81
[#143 '~']: s#63
[#143 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#143 /0[fh]/]: s#86
[#143 /0[iu]?/]: s#83
[#143 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#143 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#143 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#143 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#143 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#143 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#143 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#143 /[1-9][0-9]*[fh]/]: s#87
[#143 /[1-9][0-9]*[iu]?/]: s#84
[#144 '!']: r#70
[#144 '&']: r#70
[#144 '(']: r#70
[#144 '*']: r#70
[#144 '-']: r#70
[#144 'false']: r#70
[#144 'true']: r#70
[#144 '~']: r#70
[#144 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#70
[#144 /0[fh]/]: r#70
[#144 /0[iu]?/]: r#70
[#144 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#70
[#144 /0[xX][0-9a-fA-F]+[iu]?/]: r#70
[#144 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#70
[#144 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#70
[#144 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#70
[#144 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#70
[#144 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#70
[#144 /[1-9][0-9]*[fh]/]: r#70
[#144 /[1-9][0-9]*[iu]?/]: r#70
[#145 '!']: r#71
[#145 '&']: r#71
[#145 '(']: r#71
[#145 '*']: r#71
[#145 '-']: r#71
[#145 'false']: r#71
[#145 'true']: r#71
[#145 '~']: r#71
[#145 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#71
[#145 /0[fh]/]: r#71
[#145 /0[iu]?/]: r#71
[#145 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#71
[#145 /0[xX][0-9a-fA-F]+[iu]?/]: r#71
[#145 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#71
[#145 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#71
[#145 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#71
[#145 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#71
[#145 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#71
[#145 /[1-9][0-9]*[fh]/]: r#71
[#145 /[1-9][0-9]*[iu]?/]: r#71
[#146 '!']: s#62
[#146 '&']: s#65
[#146 '(']: s#75
[#146 '*']: s#64
[#146 '-']: s#61
[#146 'false']: s#82
[#146 'true']: s#81
[#146 '~']: s#63
[#146 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#146 /0[fh]/]: s#86
[#146 /0[iu]?/]: s#83
[#146 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#146 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#146 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#146 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#146 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#146 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#146 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#146 /[1-9][0-9]*[fh]/]: s#87
[#146 /[1-9][0-9]*[iu]?/]: s#84
[#147 '!']: s#62
[#147 '&']: s#65
[#147 '(']: s#75
[#147 '*']: s#64
[#147 '-']: s#61
[#147 'false']: s#82
[#147 'true']: s#81
[#147 '~']: s#63
[#147 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#147 /0[fh]/]: s#86
[#147 /0[iu]?/]: s#83
[#147 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#147 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#147 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#147 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#147 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#147 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#147 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#147 /[1-9][0-9]*[fh]/]: s#87
[#147 /[1-9][0-9]*[iu]?/]: s#84
[#148 '!']: s#62
[#148 '&']: s#65
[#148 '(']: s#75
[#148 '*']: s#64
[#148 '-']: s#61
[#148 'false']: s#82
[#148 'true']: s#81
[#148 '~']: s#63
[#148 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#148 /0[fh]/]: s#86
[#148 /0[iu]?/]: s#83
[#148 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#148 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#148 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#148 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#148 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#148 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#148 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#148 /[1-9][0-9]*[fh]/]: s#87
[#148 /[1-9][0-9]*[iu]?/]: s#84
[#149 '!']: s#62
[#149 '&']: s#65
[#149 '(']: s#75
[#149 '*']: s#64
[#149 '-']: s#61
[#149 'false']: s#82
[#149 'true']: s#81
[#149 '~']: s#63
[#149 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#149 /0[fh]/]: s#86
[#149 /0[iu]?/]: s#83
[#149 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#149 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#149 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#149 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#149 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#149 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#149 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#149 /[1-9][0-9]*[fh]/]: s#87
[#149 /[1-9][0-9]*[iu]?/]: s#84
[#150 '!']: s#62
[#150 '&']: s#65
[#150 '(']: s#75
[#150 '*']: s#64
[#150 '-']: s#61
[#150 'false']: s#82
[#150 'true']: s#81
[#150 '~']: s#63
[#150 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#150 /0[fh]/]: s#86
[#150 /0[iu]?/]: s#83
[#150 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#150 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#150 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#150 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#150 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#150 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#150 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#150 /[1-9][0-9]*[fh]/]: s#87
[#150 /[1-9][0-9]*[iu]?/]: s#84
[#151 '!']: s#62
[#151 '&']: s#65
[#151 '(']: s#75
[#151 '*']: s#64
[#151 '-']: s#61
[#151 'false']: s#82
[#151 'true']: s#81
[#151 '~']: s#63
[#151 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#151 /0[fh]/]: s#86
[#151 /0[iu]?/]: s#83
[#151 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#151 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#151 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#151 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#151 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#151 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#151 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#151 /[1-9][0-9]*[fh]/]: s#87
[#151 /[1-9][0-9]*[iu]?/]: s#84
[#152 '!']: s#62
[#152 '&']: s#65
[#152 '(']: s#75
[#152 '*']: s#64
[#152 '-']: s#61
[#152 'false']: s#82
[#152 'true']: s#81
[#152 '~']: s#63
[#152 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#152 /0[fh]/]: s#86
[#152 /0[iu]?/]: s#83
[#152 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#152 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#152 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#152 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#152 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#152 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#152 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#152 /[1-9][0-9]*[fh]/]: s#87
[#152 /[1-9][0-9]*[iu]?/]: s#84
[#153 '!']: s#62
[#153 '&']: s#65
[#153 '(']: s#75
[#153 '*']: s#64
[#153 '-']: s#61
[#153 'false']: s#82
[#153 'true']: s#81
[#153 '~']: s#63
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#153 /0[fh]/]: s#86
[#153 /0[iu]?/]: s#83
[#153 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#153 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#153 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#153 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#153 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#153 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#153 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#153 /[1-9][0-9]*[fh]/]: s#87
[#153 /[1-9][0-9]*[iu]?/]: s#84
[#154 '!']: s#62
[#154 '&']: s#65
[#154 '(']: s#75
[#154 '*']: s#64
[#154 '-']: s#61
[#154 'false']: s#82
[#154 'true']: s#81
[#154 '~']: s#63
[#154 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#154 /0[fh]/]: s#86
[#154 /0[iu]?/]: s#83
[#154 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#154 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#154 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#154 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#154 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#154 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#154 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#154 /[1-9][0-9]*[fh]/]: s#87
[#154 /[1-9][0-9]*[iu]?/]: s#84
[#155 '!']: s#62
[#155 '&']: s#65
[#155 '(']: s#75
[#155 '*']: s#64
[#155 '-']: s#61
[#155 'false']: s#82
[#155 'true']: s#81
[#155 '~']: s#63
[#155 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#155 /0[fh]/]: s#86
[#155 /0[iu]?/]: s#83
[#155 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#155 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#155 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#155 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#155 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#155 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#155 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#155 /[1-9][0-9]*[fh]/]: s#87
[#155 /[1-9][0-9]*[iu]?/]: s#84
[#156 '!']: s#62
[#156 '&']: s#65
[#156 '(']: s#75
[#156 '*']: s#64
[#156 '-']: s#61
[#156 'false']: s#82
[#156 'true']: s#81
[#156 '~']: s#63
[#156 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#156 /0[fh]/]: s#86
[#156 /0[iu]?/]: s#83
[#156 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#156 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#156 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#156 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#156 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#156 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#156 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#156 /[1-9][0-9]*[fh]/]: s#87
[#156 /[1-9][0-9]*[iu]?/]: s#84
[#157 '!']: s#62
[#157 '&']: s#65
[#157 '(']: s#75
[#157 '*']: s#64
[#157 '-']: s#61
[#157 'false']: s#82
[#157 'true']: s#81
[#157 '~']: s#63
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#157 /0[fh]/]: s#86
[#157 /0[iu]?/]: s#83
[#157 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#157 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#157 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#157 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#157 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#157 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#157 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#157 /[1-9][0-9]*[fh]/]: s#87
[#157 /[1-9][0-9]*[iu]?/]: s#84
[#158 '!']: s#62
[#158 '&']: s#65
[#158 '(']: s#75
[#158 '*']: s#64
[#158 '-']: s#61
[#158 'false']: s#82
[#158 'true']: s#81
[#158 '~']: s#63
[#158 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#158 /0[fh]/]: s#86
[#158 /0[iu]?/]: s#83
[#158 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#158 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#158 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#158 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#158 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#158 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#158 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#158 /[1-9][0-9]*[fh]/]: s#87
[#158 /[1-9][0-9]*[iu]?/]: s#84
[#159 '!']: s#62
[#159 '&']: s#65
[#159 '(']: s#75
[#159 '*']: s#64
[#159 '-']: s#61
[#159 'false']: s#82
[#159 'true']: s#81
[#159 '~']: s#63
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#159 /0[fh]/]: s#86
[#159 /0[iu]?/]: s#83
[#159 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#159 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#159 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#159 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#159 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#159 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#159 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#159 /[1-9][0-9]*[fh]/]: s#87
[#159 /[1-9][0-9]*[iu]?/]: s#84
[#160 'flat']: s#186
[#160 'linear']: s#185
[#160 'perspective']: s#184
[#161 '!']: s#62
[#161 '&']: s#65
[#161 '(']: s#75
[#161 '*']: s#64
[#161 '-']: s#61
[#161 'false']: s#82
[#161 'true']: s#81
[#161 '~']: s#63
[#161 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#161 /0[fh]/]: s#86
[#161 /0[iu]?/]: s#83
[#161 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#161 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#161 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#161 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#161 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#161 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#161 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#161 /[1-9][0-9]*[fh]/]: s#87
[#161 /[1-9][0-9]*[iu]?/]: s#84
[#162 '!']: s#62
[#162 '&']: s#65
[#162 '(']: s#75
[#162 '*']: s#64
[#162 '-']: s#61
[#162 'false']: s#82
[#162 'true']: s#81
[#162 '~']: s#63
[#162 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#162 /0[fh]/]: s#86
[#162 /0[iu]?/]: s#83
[#162 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#162 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#162 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#162 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#162 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#162 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#162 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#162 /[1-9][0-9]*[fh]/]: s#87
[#162 /[1-9][0-9]*[iu]?/]: s#84
[#163 'frag_depth']: s#173
[#163 'front_facing']: s#172
[#163 'global_invocation_id']: s#176
[#163 'instance_index']: s#170
[#163 'local_invocation_id']: s#174
[#163 'local_invocation_index']: s#175
[#163 'num_workgroups']: s#178
[#163 'position']: s#171
[#163 'sample_index']: s#179
[#163 'sample_mask']: s#180
[#163 'vertex_index']: s#169
[#163 'workgroup_id']: s#177
[#164 '!']: s#62
[#164 '&']: s#65
[#164 '(']: s#75
[#164 '*']: s#64
[#164 '-']: s#61
[#164 'false']: s#82
[#164 'true']: s#81
[#164 '~']: s#63
[#164 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#164 /0[fh]/]: s#86
[#164 /0[iu]?/]: s#83
[#164 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#164 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#164 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#164 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#164 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#164 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#164 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#164 /[1-9][0-9]*[fh]/]: s#87
[#164 /[1-9][0-9]*[iu]?/]: s#84
[#165 '!']: s#62
[#165 '&']: s#65
[#165 '(']: s#75
[#165 '*']: s#64
[#165 '-']: s#61
[#165 'false']: s#82
[#165 'true']: s#81
[#165 '~']: s#63
[#165 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#165 /0[fh]/]: s#86
[#165 /0[iu]?/]: s#83
[#165 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#165 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#165 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#165 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#165 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#165 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#165 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#165 /[1-9][0-9]*[fh]/]: s#87
[#165 /[1-9][0-9]*[iu]?/]: s#84
[#166 ',']: s#362
[#167 ',']: s#362
[#168 ',']: s#362
[#169 ')']: r#72
[#169 ',']: r#72
[#170 ')']: r#73
[#170 ',']: r#73
[#171 ')']: r#74
[#171 ',']: r#74
[#172 ')']: r#75
[#172 ',']: r#75
[#173 ')']: r#76
[#173 ',']: r#76
[#174 ')']: r#77
[#174 ',']: r#77
[#175 ')']: r#78
[#175 ',']: r#78
[#176 ')']: r#79
[#176 ',']: r#79
[#177 ')']: r#80
[#177 ',']: r#80
[#178 ')']: r#81
[#178 ',']: r#81
[#179 ')']: r#82
[#179 ',']: r#82
[#180 ')']: r#83
[#180 ',']: r#83
[#181 ',']: s#362
[#182 ',']: s#362
[#183 ',']: s#365
[#184 ')']: r#84
[#184 ',']: r#84
[#185 ')']: r#85
[#185 ',']: r#85
[#186 ')']: r#86
[#186 ',']: r#86
[#187 ',']: s#362
[#188 ',']: s#362
[#189 ',']: s#359
[#190 ')']: r#87
[#190 ',']: r#87
[#190 ':']: r#87
[#190 '{']: r#87
[#191 '%']: r#20
[#191 ')']: r#20
[#191 '*']: r#20
[#191 '+']: r#20
[#191 ',']: r#20
[#191 '-']: r#20
[#191 '/']: r#20
[#191 ':']: r#20
[#191 '<<']: s#141
[#191 '>>']: s#142
[#191 '{']: r#20
[#192 ')']: r#88
[#192 ',']: r#88
[#192 ':']: r#88
[#192 '{']: r#88
[#193 ')']: r#89
[#193 ',']: r#89
[#193 ':']: r#89
[#193 '{']: r#89
[#194 ')']: r#90
[#194 ',']: r#90
[#194 ':']: r#90
[#194 '{']: r#90
[#195 ')']: r#91
[#195 ',']: r#91
[#195 ':']: r#91
[#195 '{']: r#91
[#196 ')']: r#92
[#196 ',']: r#92
[#196 ':']: r#92
[#196 '{']: r#92
[#197 ')']: r#93
[#197 ',']: r#93
[#197 ':']: r#93
[#197 '{']: r#93
[#198 ')']: r#94
[#198 ',']: r#94
[#198 ':']: r#94
[#198 '{']: r#94
[#199 ')']: r#95
[#199 ',']: r#95
[#199 ':']: r#95
[#199 '{']: r#95
[#200 ')']: r#96
[#200 ',']: r#96
[#200 ':']: r#96
[#200 '{']: r#96
[#201 ')']: r#97
[#201 ',']: r#97
[#201 ':']: r#97
[#201 '{']: r#97
[#202 '%']: s#140
[#202 ')']: r#98
[#202 '*']: s#138
[#202 '+']: r#98
[#202 ',']: r#98
[#202 '-']: r#98
[#202 '/']: s#139
[#202 ':']: r#98
[#202 '{']: r#98
[#203 '%']: r#20
[#203 ')']: r#20
[#203 '*']: r#20
[#203 '+']: r#20
[#203 ',']: r#20
[#203 '-']: r#20
[#203 '/']: r#20
[#203 ':']: r#20
[#203 '{']: r#20
[#204 ')']: r#99
[#204 ',']: r#99
[#204 ':']: r#99
[#204 '{']: r#99
[#205 ')']: r#100
[#205 ',']: r#100
[#205 ':']: r#100
[#205 '{']: r#100
[#206 '%']: r#101
[#206 ')']: r#101
[#206 '*']: r#101
[#206 '+']: r#101
[#206 ',']: r#101
[#206 '-']: r#101
[#206 '/']: r#101
[#206 ':']: r#101
[#206 '{']: r#101
[#207 '.']: s#131
[#207 '[']: s#130
[#208 '.']: s#131
[#208 '[']: s#130
[#209 '%']: r#102
[#209 '%=']: r#102
[#209 '&=']: r#102
[#209 ')']: r#102
[#209 '*']: r#102
[#209 '*=']: r#102
[#209 '+']: r#102
[#209 '+=']: r#102
[#209 ',']: r#102
[#209 '-']: r#102
[#209 '-=']: r#102
[#209 '.']: r#102
[#209 '/']: r#102
[#209 '/=']: r#102
[#209 ':']: r#102
[#209 '<<=']: r#102
[#209 '=']: r#102
[#209 '>>=']: r#102
[#209 '[']: r#102
[#209 '^=']: r#102
[#209 '{']: r#102
[#209 '|=']: r#102
[#210 '%']: r#103
[#210 '%=']: r#103
[#210 '&=']: r#103
[#210 ')']: r#103
[#210 '*']: r#103
[#210 '*=']: r#103
[#210 '+']: r#103
[#210 '+=']: r#103
[#210 ',']: r#103
[#210 '-']: r#103
[#210 '-=']: r#103
[#210 '.']: r#103
[#210 '/']: r#103
[#210 '/=']: r#103
[#210 ':']: r#103
[#210 '<<=']: r#103
[#210 '=']: r#103
[#210 '>>=']: r#103
[#210 '[']: r#103
[#210 '^=']: r#103
[#210 '{']: r#103
[#210 '|=']: r#103
[#211 '%']: r#104
[#211 '%=']: r#104
[#211 '&=']: r#104
[#211 ')']: r#104
[#211 '*']: r#104
[#211 '*=']: r#104
[#211 '+']: r#104
[#211 '+=']: r#104
[#211 ',']: r#104
[#211 '-']: r#104
[#211 '-=']: r#104
[#211 '.']: r#104
[#211 '/']: r#104
[#211 '/=']: r#104
[#211 ':']: r#104
[#211 '<<=']: r#104
[#211 '=']: r#104
[#211 '>>=']: r#104
[#211 '[']: r#104
[#211 '^=']: r#104
[#211 '{']: r#104
[#211 '|=']: r#104
[#212 '%']: r#105
[#212 '%=']: r#105
[#212 '&=']: r#105
[#212 ')']: r#105
[#212 '*']: r#105
[#212 '*=']: r#105
[#212 '+']: r#105
[#212 '+=']: r#105
[#212 ',']: r#105
[#212 '-']: r#105
[#212 '-=']: r#105
[#212 '.']: r#105
[#212 '/']: r#105
[#212 '/=']: r#105
[#212 ':']: r#105
[#212 '<<=']: r#105
[#212 '=']: r#105
[#212 '>>=']: r#105
[#212 '[']: r#105
[#212 '^=']: r#105
[#212 '{']: r#105
[#212 '|=']: r#105
[#213 '%']: r#106
[#213 '%=']: r#106
[#213 '&=']: r#106
[#213 ')']: r#106
[#213 '*']: r#106
[#213 '*=']: r#106
[#213 '+']: r#106
[#213 '+=']: r#106
[#213 ',']: r#106
[#213 '-']: r#106
[#213 '-=']: r#106
[#213 '.']: r#106
[#213 '/']: r#106
[#213 '/=']: r#106
[#213 ':']: r#106
[#213 '<<=']: r#106
[#213 '=']: r#106
[#213 '>>=']: r#106
[#213 '[']: r#106
[#213 '^=']: r#106
[#213 '{']: r#106
[#213 '|=']: r#106
[#214 '%']: r#107
[#214 '%=']: r#107
[#214 '&=']: r#107
[#214 ')']: r#107
[#214 '*']: r#107
[#214 '*=']: r#107
[#214 '+']: r#107
[#214 '+=']: r#107
[#214 ',']: r#107
[#214 '-']: r#107
[#214 '-=']: r#107
[#214 '.']: r#107
[#214 '/']: r#107
[#214 '/=']: r#107
[#214 ':']: r#107
[#214 '<<=']: r#107
[#214 '=']: r#107
[#214 '>>=']: r#107
[#214 '[']: r#107
[#214 '^=']: r#107
[#214 '{']: r#107
[#214 '|=']: r#107
[#215 '%']: r#108
[#215 '%=']: r#108
[#215 '&=']: r#108
[#215 ')']: r#108
[#215 '*']: r#108
[#215 '*=']: r#108
[#215 '+']: r#108
[#215 '+=']: r#108
[#215 ',']: r#108
[#215 '-']: r#108
[#215 '-=']: r#108
[#215 '.']: r#108
[#215 '/']: r#108
[#215 '/=']: r#108
[#215 ':']: r#108
[#215 '<<=']: r#108
[#215 '=']: r#108
[#215 '>>=']: r#108
[#215 '[']: r#108
[#215 '^=']: r#108
[#215 '{']: r#108
[#215 '|=']: r#108
[#216 '%']: r#109
[#216 '%=']: r#109
[#216 '&=']: r#109
[#216 ')']: r#109
[#216 '*']: r#109
[#216 '*=']: r#109
[#216 '+']: r#109
[#216 '+=']: r#109
[#216 ',']: r#109
[#216 '-']: r#109
[#216 '-=']: r#109
[#216 '.']: r#109
[#216 '/']: r#109
[#216 '/=']: r#109
[#216 ':']: r#109
[#216 '<<=']: r#109
[#216 '=']: r#109
[#216 '>>=']: r#109
[#216 '[']: r#109
[#216 '^=']: r#109
[#216 '{']: r#109
[#216 '|=']: r#109
[#217 '%']: r#110
[#217 '%=']: r#110
[#217 '&=']: r#110
[#217 ')']: r#110
[#217 '*']: r#110
[#217 '*=']: r#110
[#217 '+']: r#110
[#217 '+=']: r#110
[#217 ',']: r#110
[#217 '-']: r#110
[#217 '-=']: r#110
[#217 '.']: r#110
[#217 '/']: r#110
[#217 '/=']: r#110
[#217 ':']: r#110
[#217 '<<=']: r#110
[#217 '=']: r#110
[#217 '>>=']: r#110
[#217 '[']: r#110
[#217 '^=']: r#110
[#217 '{']: r#110
[#217 '|=']: r#110
[#218 ']']: s#353
[#219 ')']: s#352
[#221 ',']: s#351
[#222 '(']: s#75
[#222 'false']: s#82
[#222 'true']: s#81
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#222 /0[fh]/]: s#86
[#222 /0[iu]?/]: s#83
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#222 /[1-9][0-9]*[fh]/]: s#87
[#222 /[1-9][0-9]*[iu]?/]: s#84
[#223 '%']: r#111
[#223 ')']: r#111
[#223 '*']: r#111
[#223 '+']: r#111
[#223 ',']: r#111
[#223 '-']: r#111
[#223 '.']: r#111
[#223 '/']: r#111
[#223 ':']: r#111
[#223 '[']: r#111
[#223 '{']: r#111
[#224 '}']: s#346
[#226 '&']: s#263
[#226 '(']: s#264
[#226 '*']: s#262
[#226 ';']: s#227
[#226 '_']: s#260
[#226 'break']: s#252
[#226 'const']: s#251
[#226 'const_assert']: s#25
[#226 'continue']: s#253
[#226 'discard']: s#238
[#226 'for']: s#246
[#226 'if']: s#257
[#226 'let']: s#250
[#226 'loop']: s#245
[#226 'return']: s#242
[#226 'switch']: s#244
[#226 'var']: s#102
[#226 'while']: s#247
[#226 '{']: s#123
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#227 '&']: r#112
[#227 '(']: r#112
[#227 '*']: r#112
[#227 ';']: r#112
[#227 '_']: r#112
[#227 'break']: r#112
[#227 'const']: r#112
[#227 'const_assert']: r#112
[#227 'continue']: r#112
[#227 'continuing']: r#112
[#227 'discard']: r#112
[#227 'for']: r#112
[#227 'if']: r#112
[#227 'let']: r#112
[#227 'loop']: r#112
[#227 'return']: r#112
[#227 'switch']: r#112
[#227 'var']: r#112
[#227 'while']: r#112
[#227 '{']: r#112
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#112
[#228 ';']: s#344
[#229 '&']: r#113
[#229 '(']: r#113
[#229 '*']: r#113
[#229 ';']: r#113
[#229 '_']: r#113
[#229 'break']: r#113
[#229 'const']: r#113
[#229 'const_assert']: r#113
[#229 'continue']: r#113
[#229 'continuing']: r#113
[#229 'discard']: r#113
[#229 'for']: r#113
[#229 'if']: r#113
[#229 'let']: r#113
[#229 'loop']: r#113
[#229 'return']: r#113
[#229 'switch']: r#113
[#229 'var']: r#113
[#229 'while']: r#113
[#229 '{']: r#113
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#113
[#230 '&']: r#114
[#230 '(']: r#114
[#230 '*']: r#114
[#230 ';']: r#114
[#230 '_']: r#114
[#230 'break']: r#114
[#230 'const']: r#114
[#230 'const_assert']: r#114
[#230 'continue']: r#114
[#230 'continuing']: r#114
[#230 'discard']: r#114
[#230 'for']: r#114
[#230 'if']: r#114
[#230 'let']: r#114
[#230 'loop']: r#114
[#230 'return']: r#114
[#230 'switch']: r#114
[#230 'var']: r#114
[#230 'while']: r#114
[#230 '{']: r#114
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#114
[#231 '&']: r#115
[#231 '(']: r#115
[#231 '*']: r#115
[#231 ';']: r#115
[#231 '_']: r#115
[#231 'break']: r#115
[#231 'const']: r#115
[#231 'const_assert']: r#115
[#231 'continue']: r#115
[#231 'continuing']: r#115
[#231 'discard']: r#115
[#231 'for']: r#115
[#231 'if']: r#115
[#231 'let']: r#115
[#231 'loop']: r#115
[#231 'return']: r#115
[#231 'switch']: r#115
[#231 'var']: r#115
[#231 'while']: r#115
[#231 '{']: r#115
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#115
[#232 '&']: r#116
[#232 '(']: r#116
[#232 '*']: r#116
[#232 ';']: r#116
[#232 '_']: r#116
[#232 'break']: r#116
[#232 'const']: r#116
[#232 'const_assert']: r#116
[#232 'continue']: r#116
[#232 'continuing']: r#116
[#232 'discard']: r#116
[#232 'for']: r#116
[#232 'if']: r#116
[#232 'let']: r#116
[#232 'loop']: r#116
[#232 'return']: r#116
[#232 'switch']: r#116
[#232 'var']: r#116
[#232 'while']: r#116
[#232 '{']: r#116
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#116
[#233 '&']: r#117
[#233 '(']: r#117
[#233 '*']: r#117
[#233 ';']: r#117
[#233 '_']: r#117
[#233 'break']: r#117
[#233 'const']: r#117
[#233 'const_assert']: r#117
[#233 'continue']: r#117
[#233 'continuing']: r#117
[#233 'discard']: r#117
[#233 'for']: r#117
[#233 'if']: r#117
[#233 'let']: r#117
[#233 'loop']: r#117
[#233 'return']: r#117
[#233 'switch']: r#117
[#233 'var']: r#117
[#233 'while']: r#117
[#233 '{']: r#117
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#117
[#234 ';']: s#343
[#235 ';']: s#342
[#236 ';']: s#341
[#237 ';']: s#340
[#238 ';']: s#339
[#239 ';']: s#338
[#240 '&']: r#118
[#240 '(']: r#118
[#240 '*']: r#118
[#240 ';']: r#118
[#240 '_']: r#118
[#240 'break']: r#118
[#240 'const']: r#118
[#240 'const_assert']: r#118
[#240 'continue']: r#118
[#240 'continuing']: r#118
[#240 'discard']: r#118
[#240 'for']: r#118
[#240 'if']: r#118
[#240 'let']: r#118
[#240 'loop']: r#118
[#240 'return']: r#118
[#240 'switch']: r#118
[#240 'var']: r#118
[#240 'while']: r#118
[#240 '{']: r#118
[#240 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#118
[#241 ';']: s#337
[#242 '!']: s#62
[#242 '&']: s#65
[#242 '(']: s#75
[#242 '*']: s#64
[#242 '-']: s#61
[#242 'false']: s#82
[#242 'true']: s#81
[#242 '~']: s#63
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#242 /0[fh]/]: s#86
[#242 /0[iu]?/]: s#83
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#242 /[1-9][0-9]*[fh]/]: s#87
[#242 /[1-9][0-9]*[iu]?/]: s#84
[#243 'else']: s#334
[#244 '!']: s#62
[#244 '&']: s#65
[#244 '(']: s#75
[#244 '*']: s#64
[#244 '-']: s#61
[#244 'false']: s#82
[#244 'true']: s#81
[#244 '~']: s#63
[#244 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#244 /0[fh]/]: s#86
[#244 /0[iu]?/]: s#83
[#244 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#244 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#244 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#244 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#244 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#244 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#244 /[1-9][0-9]*[fh]/]: s#87
[#244 /[1-9][0-9]*[iu]?/]: s#84
[#245 '{']: s#329
[#246 '(']: s#328
[#247 '!']: s#62
[#247 '&']: s#65
[#247 '(']: s#75
[#247 '*']: s#64
[#247 '-']: s#61
[#247 'false']: s#82
[#247 'true']: s#81
[#247 '~']: s#63
[#247 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#247 /0[fh]/]: s#86
[#247 /0[iu]?/]: s#83
[#247 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#247 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#247 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#247 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#247 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#247 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#247 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#247 /[1-9][0-9]*[fh]/]: s#87
[#247 /[1-9][0-9]*[iu]?/]: s#84
[#248 '(']: s#127
[#249 '=']: s#325
[#250 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#251 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#257 '!']: s#62
[#257 '&']: s#65
[#257 '(']: s#75
[#257 '*']: s#64
[#257 '-']: s#61
[#257 'false']: s#82
[#257 'true']: s#81
[#257 '~']: s#63
[#257 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#257 /0[fh]/]: s#86
[#257 /0[iu]?/]: s#83
[#257 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#257 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#257 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#257 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#257 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#257 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#257 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#257 /[1-9][0-9]*[fh]/]: s#87
[#257 /[1-9][0-9]*[iu]?/]: s#84
[#258 '%=']: r#119
[#258 '&=']: r#119
[#258 '(']: r#27
[#258 '*=']: r#119
[#258 '+=']: r#119
[#258 '-=']: r#119
[#258 '.']: r#119
[#258 '/=']: r#119
[#258 '::']: s#125
[#258 '<<=']: r#119
[#258 '=']: r#119
[#258 '>>=']: r#119
[#258 '[']: r#119
[#258 '^=']: r#119
[#258 '|=']: r#119
[#259 '%=']: s#316
[#259 '&=']: s#317
[#259 '*=']: s#314
[#259 '++']: s#308
[#259 '+=']: s#312
[#259 '--']: s#309
[#259 '-=']: s#313
[#259 '/=']: s#315
[#259 '<<=']: s#321
[#259 '=']: s#310
[#259 '>>=']: s#320
[#259 '^=']: s#319
[#259 '|=']: s#318
[#260 '=']: s#306
[#261 '.']: s#131
[#261 '[']: s#130
[#262 '&']: s#263
[#262 '(']: s#264
[#262 '*']: s#262
[#262 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#263 '&']: s#263
[#263 '(']: s#264
[#263 '*']: s#262
[#263 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#264 '&']: s#263
[#264 '(']: s#264
[#264 '*']: s#262
[#264 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#265 '@']: s#30
[#266 ',']: s#293
[#267 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#209
[#269 '@']: s#30
[#271 ',']: r#120
[#271 '::']: s#287
[#271 '=']: r#120
[#271 '{']: r#120
[#273 '!']: s#62
[#273 '&']: s#65
[#273 '(']: s#75
[#273 '*']: s#64
[#273 '-']: s#61
[#273 'false']: s#82
[#273 'true']: s#81
[#273 '~']: s#63
[#273 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#273 /0[fh]/]: s#86
[#273 /0[iu]?/]: s#83
[#273 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#273 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#273 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#273 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#273 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#273 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#273 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#273 /[1-9][0-9]*[fh]/]: s#87
[#273 /[1-9][0-9]*[iu]?/]: s#84
[#275 '=']: r#121
[#277 ',']: s#285
[#278 ',']: r#122
[#279 ',']: r#123
[#280 ',']: r#124
[#281 ',']: r#125
[#282 ',']: r#126
[#283 '=']: r#127
[#284 '>']: s#427
[#285 'read']: s#424
[#285 'read_write']: s#426
[#285 'write']: s#425
[#287 '<']: s#422
[#289 ':']: s#421
[#290 ',']: s#420
[#291 ',']: r#128
[#292 ',']: s#293
[#293 '@']: s#30
[#294 ')']: s#416
[#296 ',']: s#415
[#297 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#299 '@']: s#30
[#300 ')']: s#409
[#301 '%=']: r#119
[#301 '&=']: r#119
[#301 '*=']: r#119
[#301 '+=']: r#119
[#301 '-=']: r#119
[#301 '.']: r#119
[#301 '/=']: r#119
[#301 '<<=']: r#119
[#301 '=']: r#119
[#301 '>>=']: r#119
[#301 '[']: r#119
[#301 '^=']: r#119
[#301 '|=']: r#119
[#302 '%=']: r#129
[#302 '&=']: r#129
[#302 '*=']: r#129
[#302 '+=']: r#129
[#302 '-=']: r#129
[#302 '/=']: r#129
[#302 '<<=']: r#129
[#302 '=']: r#129
[#302 '>>=']: r#129
[#302 '^=']: r#129
[#302 '|=']: r#129
[#303 '%=']: r#130
[#303 '&=']: r#130
[#303 '*=']: r#130
[#303 '+=']: r#130
[#303 '-=']: r#130
[#303 '/=']: r#130
[#303 '<<=']: r#130
[#303 '=']: r#130
[#303 '>>=']: r#130
[#303 '^=']: r#130
[#303 '|=']: r#130
[#304 '%=']: r#131
[#304 '&=']: r#131
[#304 '*=']: r#131
[#304 '+=']: r#131
[#304 '-=']: r#131
[#304 '/=']: r#131
[#304 '<<=']: r#131
[#304 '=']: r#131
[#304 '>>=']: r#131
[#304 '^=']: r#131
[#304 '|=']: r#131
[#305 '%=']: r#132
[#305 '&=']: r#132
[#305 '*=']: r#132
[#305 '+=']: r#132
[#305 '-=']: r#132
[#305 '/=']: r#132
[#305 '<<=']: r#132
[#305 '=']: r#132
[#305 '>>=']: r#132
[#305 '^=']: r#132
[#305 '|=']: r#132
[#306 '!']: s#62
[#306 '&']: s#65
[#306 '(']: s#75
[#306 '*']: s#64
[#306 '-']: s#61
[#306 'false']: s#82
[#306 'true']: s#81
[#306 '~']: s#63
[#306 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#306 /0[fh]/]: s#86
[#306 /0[iu]?/]: s#83
[#306 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#306 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#306 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#306 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#306 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#306 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#306 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#306 /[1-9][0-9]*[fh]/]: s#87
[#306 /[1-9][0-9]*[iu]?/]: s#84
[#307 '!']: s#62
[#307 '&']: s#65
[#307 '(']: s#75
[#307 '*']: s#64
[#307 '-']: s#61
[#307 'false']: s#82
[#307 'true']: s#81
[#307 '~']: s#63
[#307 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#307 /0[fh]/]: s#86
[#307 /0[iu]?/]: s#83
[#307 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#307 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#307 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#307 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#307 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#307 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#307 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#307 /[1-9][0-9]*[fh]/]: s#87
[#307 /[1-9][0-9]*[iu]?/]: s#84
[#310 '!']: r#133
[#310 '&']: r#133
[#310 '(']: r#133
[#310 '*']: r#133
[#310 '-']: r#133
[#310 'false']: r#133
[#310 'true']: r#133
[#310 '~']: r#133
[#310 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#133
[#310 /0[fh]/]: r#133
[#310 /0[iu]?/]: r#133
[#310 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#133
[#310 /0[xX][0-9a-fA-F]+[iu]?/]: r#133
[#310 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#133
[#310 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#133
[#310 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#133
[#310 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#133
[#310 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#133
[#310 /[1-9][0-9]*[fh]/]: r#133
[#310 /[1-9][0-9]*[iu]?/]: r#133
[#311 '!']: r#134
[#311 '&']: r#134
[#311 '(']: r#134
[#311 '*']: r#134
[#311 '-']: r#134
[#311 'false']: r#134
[#311 'true']: r#134
[#311 '~']: r#134
[#311 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#134
[#311 /0[fh]/]: r#134
[#311 /0[iu]?/]: r#134
[#311 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#311 /0[xX][0-9a-fA-F]+[iu]?/]: r#134
[#311 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#134
[#311 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#134
[#311 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#311 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#134
[#311 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#134
[#311 /[1-9][0-9]*[fh]/]: r#134
[#311 /[1-9][0-9]*[iu]?/]: r#134
[#312 '!']: r#135
[#312 '&']: r#135
[#312 '(']: r#135
[#312 '*']: r#135
[#312 '-']: r#135
[#312 'false']: r#135
[#312 'true']: r#135
[#312 '~']: r#135
[#312 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#135
[#312 /0[fh]/]: r#135
[#312 /0[iu]?/]: r#135
[#312 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#135
[#312 /0[xX][0-9a-fA-F]+[iu]?/]: r#135
[#312 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#135
[#312 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#135
[#312 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#135
[#312 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#135
[#312 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#135
[#312 /[1-9][0-9]*[fh]/]: r#135
[#312 /[1-9][0-9]*[iu]?/]: r#135
[#313 '!']: r#136
[#313 '&']: r#136
[#313 '(']: r#136
[#313 '*']: r#136
[#313 '-']: r#136
[#313 'false']: r#136
[#313 'true']: r#136
[#313 '~']: r#136
[#313 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#136
[#313 /0[fh]/]: r#136
[#313 /0[iu]?/]: r#136
[#313 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#136
[#313 /0[xX][0-9a-fA-F]+[iu]?/]: r#136
[#313 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#136
[#313 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#136
[#313 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#136
[#313 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#136
[#313 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#136
[#313 /[1-9][0-9]*[fh]/]: r#136
[#313 /[1-9][0-9]*[iu]?/]: r#136
[#314 '!']: r#137
[#314 '&']: r#137
[#314 '(']: r#137
[#314 '*']: r#137
[#314 '-']: r#137
[#314 'false']: r#137
[#314 'true']: r#137
[#314 '~']: r#137
[#314 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#137
[#314 /0[fh]/]: r#137
[#314 /0[iu]?/]: r#137
[#314 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#137
[#314 /0[xX][0-9a-fA-F]+[iu]?/]: r#137
[#314 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#137
[#314 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#137
[#314 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#137
[#314 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#137
[#314 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#137
[#314 /[1-9][0-9]*[fh]/]: r#137
[#314 /[1-9][0-9]*[iu]?/]: r#137
[#315 '!']: r#138
[#315 '&']: r#138
[#315 '(']: r#138
[#315 '*']: r#138
[#315 '-']: r#138
[#315 'false']: r#138
[#315 'true']: r#138
[#315 '~']: r#138
[#315 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#138
[#315 /0[fh]/]: r#138
[#315 /0[iu]?/]: r#138
[#315 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#138
[#315 /0[xX][0-9a-fA-F]+[iu]?/]: r#138
[#315 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#138
[#315 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#138
[#315 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#138
[#315 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#138
[#315 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#138
[#315 /[1-9][0-9]*[fh]/]: r#138
[#315 /[1-9][0-9]*[iu]?/]: r#138
[#316 '!']: r#139
[#316 '&']: r#139
[#316 '(']: r#139
[#316 '*']: r#139
[#316 '-']: r#139
[#316 'false']: r#139
[#316 'true']: r#139
[#316 '~']: r#139
[#316 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#139
[#316 /0[fh]/]: r#139
[#316 /0[iu]?/]: r#139
[#316 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#139
[#316 /0[xX][0-9a-fA-F]+[iu]?/]: r#139
[#316 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#139
[#316 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#139
[#316 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#139
[#316 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#139
[#316 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#139
[#316 /[1-9][0-9]*[fh]/]: r#139
[#316 /[1-9][0-9]*[iu]?/]: r#139
[#317 '!']: r#140
[#317 '&']: r#140
[#317 '(']: r#140
[#317 '*']: r#140
[#317 '-']: r#140
[#317 'false']: r#140
[#317 'true']: r#140
[#317 '~']: r#140
[#317 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#140
[#317 /0[fh]/]: r#140
[#317 /0[iu]?/]: r#140
[#317 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#140
[#317 /0[xX][0-9a-fA-F]+[iu]?/]: r#140
[#317 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#140
[#317 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#140
[#317 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#140
[#317 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#140
[#317 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#140
[#317 /[1-9][0-9]*[fh]/]: r#140
[#317 /[1-9][0-9]*[iu]?/]: r#140
[#318 '!']: r#141
[#318 '&']: r#141
[#318 '(']: r#141
[#318 '*']: r#141
[#318 '-']: r#141
[#318 'false']: r#141
[#318 'true']: r#141
[#318 '~']: r#141
[#318 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#141
[#318 /0[fh]/]: r#141
[#318 /0[iu]?/]: r#141
[#318 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#141
[#318 /0[xX][0-9a-fA-F]+[iu]?/]: r#141
[#318 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#141
[#318 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#141
[#318 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#141
[#318 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#141
[#318 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#141
[#318 /[1-9][0-9]*[fh]/]: r#141
[#318 /[1-9][0-9]*[iu]?/]: r#141
[#319 '!']: r#142
[#319 '&']: r#142
[#319 '(']: r#142
[#319 '*']: r#142
[#319 '-']: r#142
[#319 'false']: r#142
[#319 'true']: r#142
[#319 '~']: r#142
[#319 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#142
[#319 /0[fh]/]: r#142
[#319 /0[iu]?/]: r#142
[#319 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#142
[#319 /0[xX][0-9a-fA-F]+[iu]?/]: r#142
[#319 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#142
[#319 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#142
[#319 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#142
[#319 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#142
[#319 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#142
[#319 /[1-9][0-9]*[fh]/]: r#142
[#319 /[1-9][0-9]*[iu]?/]: r#142
[#320 '!']: r#143
[#320 '&']: r#143
[#320 '(']: r#143
[#320 '*']: r#143
[#320 '-']: r#143
[#320 'false']: r#143
[#320 'true']: r#143
[#320 '~']: r#143
[#320 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#143
[#320 /0[fh]/]: r#143
[#320 /0[iu]?/]: r#143
[#320 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#143
[#320 /0[xX][0-9a-fA-F]+[iu]?/]: r#143
[#320 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#143
[#320 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#143
[#320 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#143
[#320 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#143
[#320 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#143
[#320 /[1-9][0-9]*[fh]/]: r#143
[#320 /[1-9][0-9]*[iu]?/]: r#143
[#321 '!']: r#144
[#321 '&']: r#144
[#321 '(']: r#144
[#321 '*']: r#144
[#321 '-']: r#144
[#321 'false']: r#144
[#321 'true']: r#144
[#321 '~']: r#144
[#321 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#144
[#321 /0[fh]/]: r#144
[#321 /0[iu]?/]: r#144
[#321 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: r#144
[#321 /0[xX][0-9a-fA-F]+[iu]?/]: r#144
[#321 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: r#144
[#321 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: r#144
[#321 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: r#144
[#321 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: r#144
[#321 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: r#144
[#321 /[1-9][0-9]*[fh]/]: r#144
[#321 /[1-9][0-9]*[iu]?/]: r#144
[#322 '{']: s#123
[#323 '=']: s#405
[#324 '=']: s#404
[#325 '!']: s#62
[#325 '&']: s#65
[#325 '(']: s#75
[#325 '*']: s#64
[#325 '-']: s#61
[#325 'false']: s#82
[#325 'true']: s#81
[#325 '~']: s#63
[#325 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#325 /0[fh]/]: s#86
[#325 /0[iu]?/]: s#83
[#325 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#325 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#325 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#325 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#325 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#325 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#325 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#325 /[1-9][0-9]*[fh]/]: s#87
[#325 /[1-9][0-9]*[iu]?/]: s#84
[#327 '{']: s#123
[#328 '&']: s#263
[#328 '(']: s#264
[#328 '*']: s#262
[#328 '_']: s#260
[#328 'const']: s#251
[#328 'let']: s#250
[#328 'var']: s#102
[#328 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#329 '&']: s#263
[#329 '(']: s#264
[#329 '*']: s#262
[#329 ';']: s#227
[#329 '_']: s#260
[#329 'break']: s#252
[#329 'const']: s#251
[#329 'const_assert']: s#25
[#329 'continue']: s#253
[#329 'discard']: s#238
[#329 'for']: s#246
[#329 'if']: s#257
[#329 'let']: s#250
[#329 'loop']: s#245
[#329 'return']: s#242
[#329 'switch']: s#244
[#329 'var']: s#102
[#329 'while']: s#247
[#329 '{']: s#123
[#329 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#330 '{']: s#392
[#331 'else']: s#391
[#332 '&']: r#145
[#332 '(']: r#145
[#332 '*']: r#145
[#332 ';']: r#145
[#332 '_']: r#145
[#332 'break']: r#145
[#332 'const']: r#145
[#332 'const_assert']: r#145
[#332 'continue']: r#145
[#332 'continuing']: r#145
[#332 'discard']: r#145
[#332 'else']: r#145
[#332 'for']: r#145
[#332 'if']: r#145
[#332 'let']: r#145
[#332 'loop']: r#145
[#332 'return']: r#145
[#332 'switch']: r#145
[#332 'var']: r#145
[#332 'while']: r#145
[#332 '{']: r#145
[#332 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#145
[#333 'else']: s#334
[#334 'if']: s#387
[#337 '&']: r#146
[#337 '(']: r#146
[#337 '*']: r#146
[#337 ';']: r#146
[#337 '_']: r#146
[#337 'break']: r#146
[#337 'const']: r#146
[#337 'const_assert']: r#146
[#337 'continue']: r#146
[#337 'continuing']: r#146
[#337 'discard']: r#146
[#337 'for']: r#146
[#337 'if']: r#146
[#337 'let']: r#146
[#337 'loop']: r#146
[#337 'return']: r#146
[#337 'switch']: r#146
[#337 'var']: r#146
[#337 'while']: r#146
[#337 '{']: r#146
[#337 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#146
[#338 '&']: r#147
[#338 '(']: r#147
[#338 '*']: r#147
[#338 ';']: r#147
[#338 '_']: r#147
[#338 'break']: r#147
[#338 'const']: r#147
[#338 'const_assert']: r#147
[#338 'continue']: r#147
[#338 'continuing']: r#147
[#338 'discard']: r#147
[#338 'for']: r#147
[#338 'if']: r#147
[#338 'let']: r#147
[#338 'loop']: r#147
[#338 'return']: r#147
[#338 'switch']: r#147
[#338 'var']: r#147
[#338 'while']: r#147
[#338 '{']: r#147
[#338 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#147
[#339 '&']: r#148
[#339 '(']: r#148
[#339 '*']: r#148
[#339 ';']: r#148
[#339 '_']: r#148
[#339 'break']: r#148
[#339 'const']: r#148
[#339 'const_assert']: r#148
[#339 'continue']: r#148
[#339 'continuing']: r#148
[#339 'discard']: r#148
[#339 'for']: r#148
[#339 'if']: r#148
[#339 'let']: r#148
[#339 'loop']: r#148
[#339 'return']: r#148
[#339 'switch']: r#148
[#339 'var']: r#148
[#339 'while']: r#148
[#339 '{']: r#148
[#339 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#148
[#340 '&']: r#149
[#340 '(']: r#149
[#340 '*']: r#149
[#340 ';']: r#149
[#340 '_']: r#149
[#340 'break']: r#149
[#340 'const']: r#149
[#340 'const_assert']: r#149
[#340 'continue']: r#149
[#340 'continuing']: r#149
[#340 'discard']: r#149
[#340 'for']: r#149
[#340 'if']: r#149
[#340 'let']: r#149
[#340 'loop']: r#149
[#340 'return']: r#149
[#340 'switch']: r#149
[#340 'var']: r#149
[#340 'while']: r#149
[#340 '{']: r#149
[#340 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#149
[#341 '&']: r#150
[#341 '(']: r#150
[#341 '*']: r#150
[#341 ';']: r#150
[#341 '_']: r#150
[#341 'break']: r#150
[#341 'const']: r#150
[#341 'const_assert']: r#150
[#341 'continue']: r#150
[#341 'continuing']: r#150
[#341 'discard']: r#150
[#341 'for']: r#150
[#341 'if']: r#150
[#341 'let']: r#150
[#341 'loop']: r#150
[#341 'return']: r#150
[#341 'switch']: r#150
[#341 'var']: r#150
[#341 'while']: r#150
[#341 '{']: r#150
[#341 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#150
[#342 '&']: r#151
[#342 '(']: r#151
[#342 '*']: r#151
[#342 ';']: r#151
[#342 '_']: r#151
[#342 'break']: r#151
[#342 'const']: r#151
[#342 'const_assert']: r#151
[#342 'continue']: r#151
[#342 'continuing']: r#151
[#342 'discard']: r#151
[#342 'for']: r#151
[#342 'if']: r#151
[#342 'let']: r#151
[#342 'loop']: r#151
[#342 'return']: r#151
[#342 'switch']: r#151
[#342 'var']: r#151
[#342 'while']: r#151
[#342 '{']: r#151
[#342 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#151
[#343 '&']: r#152
[#343 '(']: r#152
[#343 '*']: r#152
[#343 ';']: r#152
[#343 '_']: r#152
[#343 'break']: r#152
[#343 'const']: r#152
[#343 'const_assert']: r#152
[#343 'continue']: r#152
[#343 'continuing']: r#152
[#343 'discard']: r#152
[#343 'for']: r#152
[#343 'if']: r#152
[#343 'let']: r#152
[#343 'loop']: r#152
[#343 'return']: r#152
[#343 'switch']: r#152
[#343 'var']: r#152
[#343 'while']: r#152
[#343 '{']: r#152
[#343 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#152
[#344 '&']: r#153
[#344 '(']: r#153
[#344 '*']: r#153
[#344 ';']: r#153
[#344 '_']: r#153
[#344 'break']: r#153
[#344 'const']: r#153
[#344 'const_assert']: r#153
[#344 'continue']: r#153
[#344 'continuing']: r#153
[#344 'discard']: r#153
[#344 'for']: r#153
[#344 'if']: r#153
[#344 'let']: r#153
[#344 'loop']: r#153
[#344 'return']: r#153
[#344 'switch']: r#153
[#344 'var']: r#153
[#344 'while']: r#153
[#344 '{']: r#153
[#344 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#153
[#346 '&']: r#154
[#346 '(']: r#154
[#346 '*']: r#154
[#346 ';']: r#154
[#346 '@']: r#154
[#346 '_']: r#154
[#346 'break']: r#154
[#346 'case']: r#154
[#346 'const']: r#154
[#346 'const_assert']: r#154
[#346 'continue']: r#154
[#346 'continuing']: r#154
[#346 'default']: r#154
[#346 'discard']: r#154
[#346 'else']: r#154
[#346 'fn']: r#154
[#346 'for']: r#154
[#346 'if']: r#154
[#346 'let']: r#154
[#346 'loop']: r#154
[#346 'override']: r#154
[#346 'return']: r#154
[#346 'struct']: r#154
[#346 'switch']: r#154
[#346 'type']: r#154
[#346 'var']: r#154
[#346 'while']: r#154
[#346 '{']: r#154
[#346 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#154
[#346 EndOfText]: r#154
[#347 ',']: s#386
[#348 ',']: s#382
[#349 ',']: r#155
[#350 ',']: s#351
[#351 '!']: s#62
[#351 '&']: s#65
[#351 '(']: s#75
[#351 '*']: s#64
[#351 '-']: s#61
[#351 'false']: s#82
[#351 'true']: s#81
[#351 '~']: s#63
[#351 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#351 /0[fh]/]: s#86
[#351 /0[iu]?/]: s#83
[#351 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#351 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#351 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#351 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#351 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#351 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#351 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#351 /[1-9][0-9]*[fh]/]: s#87
[#351 /[1-9][0-9]*[iu]?/]: s#84
[#352 '%']: r#156
[#352 ')']: r#156
[#352 '*']: r#156
[#352 '+']: r#156
[#352 ',']: r#156
[#352 '-']: r#156
[#352 '.']: r#156
[#352 '/']: r#156
[#352 ':']: r#156
[#352 '[']: r#156
[#352 '{']: r#156
[#353 '.']: s#131
[#353 '[']: s#130
[#354 '%']: r#157
[#354 '%=']: r#157
[#354 '&=']: r#157
[#354 ')']: r#157
[#354 '*']: r#157
[#354 '*=']: r#157
[#354 '+']: r#157
[#354 '+=']: r#157
[#354 ',']: r#157
[#354 '-']: r#157
[#354 '-=']: r#157
[#354 '/']: r#157
[#354 '/=']: r#157
[#354 ':']: r#157
[#354 '<<=']: r#157
[#354 '=']: r#157
[#354 '>>=']: r#157
[#354 '^=']: r#157
[#354 '{']: r#157
[#354 '|=']: r#157
[#355 '%']: r#158
[#355 '%=']: r#158
[#355 '&=']: r#158
[#355 ')']: r#158
[#355 '*']: r#158
[#355 '*=']: r#158
[#355 '+']: r#158
[#355 '+=']: r#158
[#355 ',']: r#158
[#355 '-']: r#158
[#355 '-=']: r#158
[#355 '/']: r#158
[#355 '/=']: r#158
[#355 ':']: r#158
[#355 '<<=']: r#158
[#355 '=']: r#158
[#355 '>>=']: r#158
[#355 '^=']: r#158
[#355 '{']: r#158
[#355 '|=']: r#158
[#356 '%']: r#159
[#356 '%=']: r#159
[#356 '&=']: r#159
[#356 ')']: r#159
[#356 '*']: r#159
[#356 '*=']: r#159
[#356 '+']: r#159
[#356 '+=']: r#159
[#356 ',']: r#159
[#356 '-']: r#159
[#356 '-=']: r#159
[#356 '/']: r#159
[#356 '/=']: r#159
[#356 ':']: r#159
[#356 '<<=']: r#159
[#356 '=']: r#159
[#356 '>>=']: r#159
[#356 '^=']: r#159
[#356 '{']: r#159
[#356 '|=']: r#159
[#357 '%']: r#160
[#357 '%=']: r#160
[#357 '&=']: r#160
[#357 ')']: r#160
[#357 '*']: r#160
[#357 '*=']: r#160
[#357 '+']: r#160
[#357 '+=']: r#160
[#357 ',']: r#160
[#357 '-']: r#160
[#357 '-=']: r#160
[#357 '/']: r#160
[#357 '/=']: r#160
[#357 ':']: r#160
[#357 '<<=']: r#160
[#357 '=']: r#160
[#357 '>>=']: r#160
[#357 '^=']: r#160
[#357 '{']: r#160
[#357 '|=']: r#160
[#358 '@']: r#161
[#358 'fn']: r#161
[#358 'var']: r#161
[#359 '!']: s#62
[#359 '&']: s#65
[#359 '(']: s#75
[#359 '*']: s#64
[#359 '-']: s#61
[#359 'false']: s#82
[#359 'true']: s#81
[#359 '~']: s#63
[#359 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#359 /0[fh]/]: s#86
[#359 /0[iu]?/]: s#83
[#359 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#359 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#359 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#359 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#359 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#359 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#359 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#359 /[1-9][0-9]*[fh]/]: s#87
[#359 /[1-9][0-9]*[iu]?/]: s#84
[#360 ')']: s#375
[#361 '@']: r#162
[#361 'fn']: r#162
[#361 'var']: r#162
[#363 '@']: r#163
[#363 'fn']: r#163
[#363 'var']: r#163
[#364 '@']: r#164
[#364 'fn']: r#164
[#364 'var']: r#164
[#365 'center']: s#372
[#365 'centroid']: s#373
[#365 'sample']: s#374
[#366 '@']: r#165
[#366 'fn']: r#165
[#366 'var']: r#165
[#367 '@']: r#166
[#367 'fn']: r#166
[#367 'var']: r#166
[#368 '@']: r#167
[#368 'fn']: r#167
[#368 'var']: r#167
[#369 '@']: r#168
[#369 'fn']: r#168
[#369 'var']: r#168
[#370 '@']: r#169
[#370 'fn']: r#169
[#370 'var']: r#169
[#371 ',']: s#362
[#372 ')']: r#170
[#372 ',']: r#170
[#373 ')']: r#171
[#373 ',']: r#171
[#374 ')']: r#172
[#374 ',']: r#172
[#375 '@']: r#173
[#375 'fn']: r#173
[#375 'var']: r#173
[#376 ',']: s#460
[#377 '%']: r#174
[#377 '%=']: r#174
[#377 '&=']: r#174
[#377 ')']: r#174
[#377 '*']: r#174
[#377 '*=']: r#174
[#377 '+']: r#174
[#377 '+=']: r#174
[#377 ',']: r#174
[#377 '-']: r#174
[#377 '-=']: r#174
[#377 '/']: r#174
[#377 '/=']: r#174
[#377 ':']: r#174
[#377 '<<=']: r#174
[#377 '=']: r#174
[#377 '>>=']: r#174
[#377 '^=']: r#174
[#377 '{']: r#174
[#377 '|=']: r#174
[#378 '%']: r#175
[#378 '%=']: r#175
[#378 '&=']: r#175
[#378 ')']: r#175
[#378 '*']: r#175
[#378 '*=']: r#175
[#378 '+']: r#175
[#378 '+=']: r#175
[#378 ',']: r#175
[#378 '-']: r#175
[#378 '-=']: r#175
[#378 '/']: r#175
[#378 '/=']: r#175
[#378 ':']: r#175
[#378 '<<=']: r#175
[#378 '=']: r#175
[#378 '>>=']: r#175
[#378 '^=']: r#175
[#378 '{']: r#175
[#378 '|=']: r#175
[#379 ',']: r#176
[#380 ',']: r#177
[#383 ',']: s#458
[#384 ',']: r#178
[#385 ',']: s#386
[#386 '(']: s#75
[#386 'false']: s#82
[#386 'true']: s#81
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#386 /0[fh]/]: s#86
[#386 /0[iu]?/]: s#83
[#386 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#386 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#386 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#386 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#386 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#386 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#386 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#386 /[1-9][0-9]*[fh]/]: s#87
[#386 /[1-9][0-9]*[iu]?/]: s#84
[#387 '!']: s#62
[#387 '&']: s#65
[#387 '(']: s#75
[#387 '*']: s#64
[#387 '-']: s#61
[#387 'false']: s#82
[#387 'true']: s#81
[#387 '~']: s#63
[#387 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#387 /0[fh]/]: s#86
[#387 /0[iu]?/]: s#83
[#387 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#387 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#387 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#387 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#387 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#387 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#387 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#387 /[1-9][0-9]*[fh]/]: s#87
[#387 /[1-9][0-9]*[iu]?/]: s#84
[#388 '&']: r#179
[#388 '(']: r#179
[#388 '*']: r#179
[#388 ';']: r#179
[#388 '_']: r#179
[#388 'break']: r#179
[#388 'const']: r#179
[#388 'const_assert']: r#179
[#388 'continue']: r#179
[#388 'continuing']: r#179
[#388 'discard']: r#179
[#388 'else']: r#179
[#388 'for']: r#179
[#388 'if']: r#179
[#388 'let']: r#179
[#388 'loop']: r#179
[#388 'return']: r#179
[#388 'switch']: r#179
[#388 'var']: r#179
[#388 'while']: r#179
[#388 '{']: r#179
[#388 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#179
[#389 '&']: r#180
[#389 '(']: r#180
[#389 '*']: r#180
[#389 ';']: r#180
[#389 '_']: r#180
[#389 'break']: r#180
[#389 'const']: r#180
[#389 'const_assert']: r#180
[#389 'continue']: r#180
[#389 'continuing']: r#180
[#389 'discard']: r#180
[#389 'for']: r#180
[#389 'if']: r#180
[#389 'let']: r#180
[#389 'loop']: r#180
[#389 'return']: r#180
[#389 'switch']: r#180
[#389 'var']: r#180
[#389 'while']: r#180
[#389 '{']: r#180
[#389 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#180
[#390 '&']: r#181
[#390 '(']: r#181
[#390 '*']: r#181
[#390 ';']: r#181
[#390 '_']: r#181
[#390 'break']: r#181
[#390 'const']: r#181
[#390 'const_assert']: r#181
[#390 'continue']: r#181
[#390 'continuing']: r#181
[#390 'discard']: r#181
[#390 'for']: r#181
[#390 'if']: r#181
[#390 'let']: r#181
[#390 'loop']: r#181
[#390 'return']: r#181
[#390 'switch']: r#181
[#390 'var']: r#181
[#390 'while']: r#181
[#390 '{']: r#181
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#181
[#391 '{']: s#123
[#392 'case']: s#451
[#392 'default']: s#452
[#393 'continuing']: s#445
[#394 'continuing']: r#182
[#395 '&']: s#263
[#395 '(']: s#264
[#395 '*']: s#262
[#395 ';']: s#227
[#395 '_']: s#260
[#395 'break']: s#252
[#395 'const']: s#251
[#395 'const_assert']: s#25
[#395 'continue']: s#253
[#395 'discard']: s#238
[#395 'for']: s#246
[#395 'if']: s#257
[#395 'let']: s#250
[#395 'loop']: s#245
[#395 'return']: s#242
[#395 'switch']: s#244
[#395 'var']: s#102
[#395 'while']: s#247
[#395 '{']: s#123
[#395 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#396 ')']: s#441
[#397 ';']: s#440
[#402 '&']: r#183
[#402 '(']: r#183
[#402 '*']: r#183
[#402 ';']: r#183
[#402 '_']: r#183
[#402 'break']: r#183
[#402 'const']: r#183
[#402 'const_assert']: r#183
[#402 'continue']: r#183
[#402 'continuing']: r#183
[#402 'discard']: r#183
[#402 'for']: r#183
[#402 'if']: r#183
[#402 'let']: r#183
[#402 'loop']: r#183
[#402 'return']: r#183
[#402 'switch']: r#183
[#402 'var']: r#183
[#402 'while']: r#183
[#402 '{']: r#183
[#402 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#183
[#404 '!']: s#62
[#404 '&']: s#65
[#404 '(']: s#75
[#404 '*']: s#64
[#404 '-']: s#61
[#404 'false']: s#82
[#404 'true']: s#81
[#404 '~']: s#63
[#404 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#404 /0[fh]/]: s#86
[#404 /0[iu]?/]: s#83
[#404 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#404 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#404 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#404 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#404 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#404 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#404 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#404 /[1-9][0-9]*[fh]/]: s#87
[#404 /[1-9][0-9]*[iu]?/]: s#84
[#405 '!']: s#62
[#405 '&']: s#65
[#405 '(']: s#75
[#405 '*']: s#64
[#405 '-']: s#61
[#405 'false']: s#82
[#405 'true']: s#81
[#405 '~']: s#63
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#405 /0[fh]/]: s#86
[#405 /0[iu]?/]: s#83
[#405 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#405 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#405 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#405 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#405 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#405 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#405 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#405 /[1-9][0-9]*[fh]/]: s#87
[#405 /[1-9][0-9]*[iu]?/]: s#84
[#406 '&']: r#184
[#406 '(']: r#184
[#406 '*']: r#184
[#406 ';']: r#184
[#406 '_']: r#184
[#406 'break']: r#184
[#406 'const']: r#184
[#406 'const_assert']: r#184
[#406 'continue']: r#184
[#406 'continuing']: r#184
[#406 'discard']: r#184
[#406 'else']: r#184
[#406 'for']: r#184
[#406 'if']: r#184
[#406 'let']: r#184
[#406 'loop']: r#184
[#406 'return']: r#184
[#406 'switch']: r#184
[#406 'var']: r#184
[#406 'while']: r#184
[#406 '{']: r#184
[#406 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#184
[#409 '%=']: r#185
[#409 '&=']: r#185
[#409 '*=']: r#185
[#409 '+=']: r#185
[#409 '-=']: r#185
[#409 '.']: r#185
[#409 '/=']: r#185
[#409 '<<=']: r#185
[#409 '=']: r#185
[#409 '>>=']: r#185
[#409 '[']: r#185
[#409 '^=']: r#185
[#409 '|=']: r#185
[#411 ':']: s#437
[#412 ',']: s#436
[#413 ',']: r#186
[#414 ',']: s#415
[#415 '@']: s#30
[#416 '->']: s#432
[#417 ',']: r#187
[#418 ',']: r#188
[#419 '}']: s#430
[#421 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#422 '(']: s#75
[#422 'false']: s#82
[#422 'true']: s#81
[#422 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#422 /0[fh]/]: s#86
[#422 /0[iu]?/]: s#83
[#422 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#422 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#422 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#422 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#422 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#422 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#422 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#422 /[1-9][0-9]*[fh]/]: s#87
[#422 /[1-9][0-9]*[iu]?/]: s#84
[#427 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#189
[#428 ',']: s#386
[#429 ',']: r#190
[#430 ';']: r#191
[#430 '@']: r#191
[#430 'const']: r#191
[#430 'const_assert']: r#191
[#430 'fn']: r#191
[#430 'override']: r#191
[#430 'struct']: r#191
[#430 'type']: r#191
[#430 'var']: r#191
[#430 EndOfText]: r#191
[#431 '{']: r#192
[#432 '@']: s#30
[#433 ',']: r#193
[#434 ',']: r#194
[#437 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#440 '!']: s#62
[#440 '&']: s#65
[#440 '(']: s#75
[#440 '*']: s#64
[#440 '-']: s#61
[#440 'false']: s#82
[#440 'true']: s#81
[#440 '~']: s#63
[#440 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#440 /0[fh]/]: s#86
[#440 /0[iu]?/]: s#83
[#440 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#440 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#440 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#440 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#440 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#440 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#440 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#440 /[1-9][0-9]*[fh]/]: s#87
[#440 /[1-9][0-9]*[iu]?/]: s#84
[#441 '{']: s#123
[#442 'continuing']: r#195
[#443 '}']: s#475
[#445 '{']: s#474
[#446 '}']: s#472
[#448 'case']: s#451
[#448 'default']: s#452
[#449 'case']: r#196
[#449 'default']: r#196
[#450 'case']: r#197
[#450 'default']: r#197
[#451 '!']: s#62
[#451 '&']: s#65
[#451 '(']: s#75
[#451 '*']: s#64
[#451 '-']: s#61
[#451 'default']: s#469
[#451 'false']: s#82
[#451 'true']: s#81
[#451 '~']: s#63
[#451 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#451 /0[fh]/]: s#86
[#451 /0[iu]?/]: s#83
[#451 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#451 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#451 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#451 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#451 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#451 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#451 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#451 /[1-9][0-9]*[fh]/]: s#87
[#451 /[1-9][0-9]*[iu]?/]: s#84
[#452 ':']: s#466
[#453 '&']: r#198
[#453 '(']: r#198
[#453 '*']: r#198
[#453 ';']: r#198
[#453 '_']: r#198
[#453 'break']: r#198
[#453 'const']: r#198
[#453 'const_assert']: r#198
[#453 'continue']: r#198
[#453 'continuing']: r#198
[#453 'discard']: r#198
[#453 'for']: r#198
[#453 'if']: r#198
[#453 'let']: r#198
[#453 'loop']: r#198
[#453 'return']: r#198
[#453 'switch']: r#198
[#453 'var']: r#198
[#453 'while']: r#198
[#453 '{']: r#198
[#453 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#198
[#454 '{']: s#123
[#455 ',']: r#199
[#456 ',']: r#200
[#457 '>']: s#463
[#459 '@']: r#201
[#459 'fn']: r#201
[#459 'var']: r#201
[#460 '!']: s#62
[#460 '&']: s#65
[#460 '(']: s#75
[#460 '*']: s#64
[#460 '-']: s#61
[#460 'false']: s#82
[#460 'true']: s#81
[#460 '~']: s#63
[#460 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#460 /0[fh]/]: s#86
[#460 /0[iu]?/]: s#83
[#460 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#460 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#460 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#460 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#460 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#460 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#460 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#460 /[1-9][0-9]*[fh]/]: s#87
[#460 /[1-9][0-9]*[iu]?/]: s#84
[#461 '@']: r#202
[#461 'fn']: r#202
[#461 'var']: r#202
[#462 ',']: s#362
[#463 '%']: r#203
[#463 '(']: r#203
[#463 ')']: r#203
[#463 '*']: r#203
[#463 '+']: r#203
[#463 ',']: r#203
[#463 '-']: r#203
[#463 '.']: r#203
[#463 '/']: r#203
[#463 ':']: r#203
[#463 '[']: r#203
[#463 '{']: r#203
[#464 '&']: r#204
[#464 '(']: r#204
[#464 '*']: r#204
[#464 ';']: r#204
[#464 '_']: r#204
[#464 'break']: r#204
[#464 'const']: r#204
[#464 'const_assert']: r#204
[#464 'continue']: r#204
[#464 'continuing']: r#204
[#464 'discard']: r#204
[#464 'else']: r#204
[#464 'for']: r#204
[#464 'if']: r#204
[#464 'let']: r#204
[#464 'loop']: r#204
[#464 'return']: r#204
[#464 'switch']: r#204
[#464 'var']: r#204
[#464 'while']: r#204
[#464 '{']: r#204
[#464 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#204
[#465 '{']: s#123
[#466 '{']: r#205
[#467 ':']: s#496
[#468 ',']: s#494
[#469 ',']: r#206
[#469 ':']: r#206
[#469 '{']: r#206
[#470 ',']: r#207
[#470 ':']: r#207
[#470 '{']: r#207
[#472 '&']: r#208
[#472 '(']: r#208
[#472 '*']: r#208
[#472 ';']: r#208
[#472 '_']: r#208
[#472 'break']: r#208
[#472 'const']: r#208
[#472 'const_assert']: r#208
[#472 'continue']: r#208
[#472 'continuing']: r#208
[#472 'discard']: r#208
[#472 'for']: r#208
[#472 'if']: r#208
[#472 'let']: r#208
[#472 'loop']: r#208
[#472 'return']: r#208
[#472 'switch']: r#208
[#472 'var']: r#208
[#472 'while']: r#208
[#472 '{']: r#208
[#472 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#208
[#474 '&']: s#263
[#474 '(']: s#264
[#474 '*']: s#262
[#474 ';']: s#227
[#474 '_']: s#260
[#474 'break']: s#252
[#474 'const']: s#251
[#474 'const_assert']: s#25
[#474 'continue']: s#253
[#474 'discard']: s#238
[#474 'for']: s#246
[#474 'if']: s#257
[#474 'let']: s#250
[#474 'loop']: s#245
[#474 'return']: s#242
[#474 'switch']: s#244
[#474 'var']: s#102
[#474 'while']: s#247
[#474 '{']: s#123
[#474 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#475 '&']: r#209
[#475 '(']: r#209
[#475 '*']: r#209
[#475 ';']: r#209
[#475 '_']: r#209
[#475 'break']: r#209
[#475 'const']: r#209
[#475 'const_assert']: r#209
[#475 'continue']: r#209
[#475 'continuing']: r#209
[#475 'discard']: r#209
[#475 'for']: r#209
[#475 'if']: r#209
[#475 'let']: r#209
[#475 'loop']: r#209
[#475 'return']: r#209
[#475 'switch']: r#209
[#475 'var']: r#209
[#475 'while']: r#209
[#475 '{']: r#209
[#475 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#209
[#476 '&']: r#210
[#476 '(']: r#210
[#476 '*']: r#210
[#476 ';']: r#210
[#476 '_']: r#210
[#476 'break']: r#210
[#476 'const']: r#210
[#476 'const_assert']: r#210
[#476 'continue']: r#210
[#476 'continuing']: r#210
[#476 'discard']: r#210
[#476 'for']: r#210
[#476 'if']: r#210
[#476 'let']: r#210
[#476 'loop']: r#210
[#476 'return']: r#210
[#476 'switch']: r#210
[#476 'var']: r#210
[#476 'while']: r#210
[#476 '{']: r#210
[#476 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#210
[#477 ';']: s#487
[#479 ',']: r#211
[#480 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#482 '@']: s#30
[#483 ',']: s#458
[#484 '>']: s#512
[#486 '{']: r#212
[#487 '&']: s#263
[#487 '(']: s#264
[#487 '*']: s#262
[#487 '_']: s#260
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#488 'break']: s#507
[#489 'break']: r#213
[#490 '&']: s#263
[#490 '(']: s#264
[#490 '*']: s#262
[#490 ';']: s#227
[#490 '_']: s#260
[#490 'break']: s#252
[#490 'const']: s#251
[#490 'const_assert']: s#25
[#490 'continue']: s#253
[#490 'discard']: s#238
[#490 'for']: s#246
[#490 'if']: s#257
[#490 'let']: s#250
[#490 'loop']: s#245
[#490 'return']: s#242
[#490 'switch']: s#244
[#490 'var']: s#102
[#490 'while']: s#247
[#490 '{']: s#123
[#490 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#491 ',']: s#503
[#492 ',']: r#214
[#492 ':']: r#214
[#492 '{']: r#214
[#493 ',']: s#494
[#494 '!']: s#62
[#494 '&']: s#65
[#494 '(']: s#75
[#494 '*']: s#64
[#494 '-']: s#61
[#494 'default']: s#469
[#494 'false']: s#82
[#494 'true']: s#81
[#494 '~']: s#63
[#494 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#494 /0[fh]/]: s#86
[#494 /0[iu]?/]: s#83
[#494 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#494 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#494 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#494 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#494 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#494 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#494 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#494 /[1-9][0-9]*[fh]/]: s#87
[#494 /[1-9][0-9]*[iu]?/]: s#84
[#495 '{']: s#123
[#496 '{']: r#215
[#497 'case']: r#216
[#497 'default']: r#216
[#498 '@']: r#217
[#498 'fn']: r#217
[#498 'var']: r#217
[#499 'case']: r#218
[#499 'default']: r#218
[#500 ',']: r#219
[#500 ':']: r#219
[#500 '{']: r#219
[#501 ',']: r#220
[#501 ':']: r#220
[#501 '{']: r#220
[#502 ':']: r#221
[#502 '{']: r#221
[#503 ':']: r#222
[#503 '{']: r#222
[#504 'break']: r#223
[#505 '}']: s#514
[#507 'if']: s#513
[#512 ',']: r#224
[#512 '=']: r#224
[#512 '{']: r#224
[#513 '!']: s#62
[#513 '&']: s#65
[#513 '(']: s#75
[#513 '*']: s#64
[#513 '-']: s#61
[#513 'false']: s#82
[#513 'true']: s#81
[#513 '~']: s#63
[#513 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#76
[#513 /0[fh]/]: s#86
[#513 /0[iu]?/]: s#83
[#513 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#91
[#513 /0[xX][0-9a-fA-F]+[iu]?/]: s#85
[#513 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#93
[#513 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#92
[#513 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#88
[#513 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#90
[#513 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#89
[#513 /[1-9][0-9]*[fh]/]: s#87
[#513 /[1-9][0-9]*[iu]?/]: s#84
[#515 ';']: s#516

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #29
[#2 const_assert_statement]: #18
[#2 function_decl]: #17
[#2 function_decl/0.0]: #24
[#2 function_decl/0.0/0]: #28
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #21
[#2 global_constant_decl/1.0/0]: #27
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #19
[#2 global_variable_decl/0.0/0]: #26
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#11 attribute]: #29
[#11 const_assert_statement]: #18
[#11 function_decl]: #17
[#11 function_decl/0.0]: #24
[#11 function_decl/0.0/0]: #28
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #21
[#11 global_constant_decl/1.0/0]: #27
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #19
[#11 global_variable_decl/0.0/0]: #26
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #107
[#11 type_alias_decl]: #15
[#19 variable_decl]: #101
[#20 ident]: #100
[#20 optionally_typed_ident]: #99
[#22 ident]: #97
[#23 ident]: #96
[#24 function_header]: #94
[#25 additive_expression]: #57
[#25 binary_and_expression]: #54
[#25 binary_or_expression]: #55
[#25 binary_xor_expression]: #56
[#25 bitwise_expression]: #52
[#25 bool_literal]: #74
[#25 call_expression]: #68
[#25 callable]: #67
[#25 decimal_float_literal]: #79
[#25 decimal_int_literal]: #77
[#25 expression]: #48
[#25 float_literal]: #73
[#25 hex_float_literal]: #80
[#25 hex_int_literal]: #78
[#25 ident]: #71
[#25 int_literal]: #72
[#25 literal]: #69
[#25 multiplicative_expression]: #59
[#25 paren_expression]: #70
[#25 primary_expression]: #66
[#25 relational_expression]: #49
[#25 shift_expression]: #53
[#25 short_circuit_and_expression]: #51
[#25 short_circuit_or_expression]: #50
[#25 singular_expression]: #60
[#25 unary_expression]: #58
[#29 attribute]: #29
[#29 function_decl/0.0/0]: #47
[#29 global_constant_decl/1.0/0]: #46
[#29 global_variable_decl/0.0/0]: #45
[#57 additive_operator]: #143
[#59 multiplicative_operator]: #137
[#61 bool_literal]: #74
[#61 call_expression]: #68
[#61 callable]: #67
[#61 decimal_float_literal]: #79
[#61 decimal_int_literal]: #77
[#61 float_literal]: #73
[#61 hex_float_literal]: #80
[#61 hex_int_literal]: #78
[#61 ident]: #71
[#61 int_literal]: #72
[#61 literal]: #69
[#61 paren_expression]: #70
[#61 primary_expression]: #66
[#61 singular_expression]: #60
[#61 unary_expression]: #136
[#62 bool_literal]: #74
[#62 call_expression]: #68
[#62 callable]: #67
[#62 decimal_float_literal]: #79
[#62 decimal_int_literal]: #77
[#62 float_literal]: #73
[#62 hex_float_literal]: #80
[#62 hex_int_literal]: #78
[#62 ident]: #71
[#62 int_literal]: #72
[#62 literal]: #69
[#62 paren_expression]: #70
[#62 primary_expression]: #66
[#62 singular_expression]: #60
[#62 unary_expression]: #135
[#63 bool_literal]: #74
[#63 call_expression]: #68
[#63 callable]: #67
[#63 decimal_float_literal]: #79
[#63 decimal_int_literal]: #77
[#63 float_literal]: #73
[#63 hex_float_literal]: #80
[#63 hex_int_literal]: #78
[#63 ident]: #71
[#63 int_literal]: #72
[#63 literal]: #69
[#63 paren_expression]: #70
[#63 primary_expression]: #66
[#63 singular_expression]: #60
[#63 unary_expression]: #134
[#64 bool_literal]: #74
[#64 call_expression]: #68
[#64 callable]: #67
[#64 decimal_float_literal]: #79
[#64 decimal_int_literal]: #77
[#64 float_literal]: #73
[#64 hex_float_literal]: #80
[#64 hex_int_literal]: #78
[#64 ident]: #71
[#64 int_literal]: #72
[#64 literal]: #69
[#64 paren_expression]: #70
[#64 primary_expression]: #66
[#64 singular_expression]: #60
[#64 unary_expression]: #133
[#65 bool_literal]: #74
[#65 call_expression]: #68
[#65 callable]: #67
[#65 decimal_float_literal]: #79
[#65 decimal_int_literal]: #77
[#65 float_literal]: #73
[#65 hex_float_literal]: #80
[#65 hex_int_literal]: #78
[#65 ident]: #71
[#65 int_literal]: #72
[#65 literal]: #69
[#65 paren_expression]: #70
[#65 primary_expression]: #66
[#65 singular_expression]: #60
[#65 unary_expression]: #132
[#66 component_or_swizzle_specifier]: #129
[#66 singular_expression/0.1]: #128
[#67 argument_expression_list]: #126
[#75 additive_expression]: #57
[#75 binary_and_expression]: #54
[#75 binary_or_expression]: #55
[#75 binary_xor_expression]: #56
[#75 bitwise_expression]: #52
[#75 bool_literal]: #74
[#75 call_expression]: #68
[#75 callable]: #67
[#75 decimal_float_literal]: #79
[#75 decimal_int_literal]: #77
[#75 expression]: #124
[#75 float_literal]: #73
[#75 hex_float_literal]: #80
[#75 hex_int_literal]: #78
[#75 ident]: #71
[#75 int_literal]: #72
[#75 literal]: #69
[#75 multiplicative_expression]: #59
[#75 paren_expression]: #70
[#75 primary_expression]: #66
[#75 relational_expression]: #49
[#75 shift_expression]: #53
[#75 short_circuit_and_expression]: #51
[#75 short_circuit_or_expression]: #50
[#75 singular_expression]: #60
[#75 unary_expression]: #58
[#94 compound_statement]: #122
[#95 ident]: #121
[#96 struct_body_decl]: #119
[#98 ident]: #100
[#98 optionally_typed_ident]: #117
[#100 optionally_typed_ident/0.1]: #114
[#101 global_variable_decl/0.2]: #112
[#102 variable_decl/0.1]: #109
[#102 variable_qualifier]: #110
[#109 ident]: #100
[#109 optionally_typed_ident]: #283
[#111 address_space]: #277
[#113 additive_expression]: #57
[#113 binary_and_expression]: #54
[#113 binary_or_expression]: #55
[#113 binary_xor_expression]: #56
[#113 bitwise_expression]: #52
[#113 bool_literal]: #74
[#113 call_expression]: #68
[#113 callable]: #67
[#113 decimal_float_literal]: #79
[#113 decimal_int_literal]: #77
[#113 expression]: #276
[#113 float_literal]: #73
[#113 hex_float_literal]: #80
[#113 hex_int_literal]: #78
[#113 ident]: #71
[#113 int_literal]: #72
[#113 literal]: #69
[#113 multiplicative_expression]: #59
[#113 paren_expression]: #70
[#113 primary_expression]: #66
[#113 relational_expression]: #49
[#113 shift_expression]: #53
[#113 short_circuit_and_expression]: #51
[#113 short_circuit_or_expression]: #50
[#113 singular_expression]: #60
[#113 unary_expression]: #58
[#115 ident]: #271
[#115 type_specifier]: #275
[#116 additive_expression]: #57
[#116 binary_and_expression]: #54
[#116 binary_or_expression]: #55
[#116 binary_xor_expression]: #56
[#116 bitwise_expression]: #52
[#116 bool_literal]: #74
[#116 call_expression]: #68
[#116 callable]: #67
[#116 decimal_float_literal]: #79
[#116 decimal_int_literal]: #77
[#116 expression]: #274
[#116 float_literal]: #73
[#116 hex_float_literal]: #80
[#116 hex_int_literal]: #78
[#116 ident]: #71
[#116 int_literal]: #72
[#116 literal]: #69
[#116 multiplicative_expression]: #59
[#116 paren_expression]: #70
[#116 primary_expression]: #66
[#116 relational_expression]: #49
[#116 shift_expression]: #53
[#116 short_circuit_and_expression]: #51
[#116 short_circuit_or_expression]: #50
[#116 singular_expression]: #60
[#116 unary_expression]: #58
[#117 global_constant_decl/1.3]: #272
[#118 ident]: #271
[#118 type_specifier]: #270
[#120 attribute]: #269
[#120 struct_member]: #266
[#120 struct_member/0.0]: #267
[#120 struct_member/0.0/0]: #268
[#123 assignment_statement]: #254
[#123 break_statement]: #236
[#123 callable]: #248
[#123 compound_statement]: #240
[#123 compound_statement/0.1]: #224
[#123 compound_statement/0.1/0]: #225
[#123 const_assert_statement]: #241
[#123 continue_statement]: #237
[#123 core_lhs_expression]: #261
[#123 decrement_statement]: #256
[#123 for_statement]: #232
[#123 func_call_statement]: #234
[#123 ident]: #258
[#123 if_clause]: #243
[#123 if_statement]: #229
[#123 increment_statement]: #255
[#123 lhs_expression]: #259
[#123 loop_statement]: #231
[#123 return_statement]: #228
[#123 statement]: #226
[#123 switch_statement]: #230
[#123 variable_decl]: #249
[#123 variable_statement]: #235
[#123 variable_updating_statement]: #239
[#123 while_statement]: #233
[#127 additive_expression]: #57
[#127 argument_expression_list/0.1]: #219
[#127 binary_and_expression]: #54
[#127 binary_or_expression]: #55
[#127 binary_xor_expression]: #56
[#127 bitwise_expression]: #52
[#127 bool_literal]: #74
[#127 call_expression]: #68
[#127 callable]: #67
[#127 decimal_float_literal]: #79
[#127 decimal_int_literal]: #77
[#127 expression]: #221
[#127 expression_comma_list]: #220
[#127 float_literal]: #73
[#127 hex_float_literal]: #80
[#127 hex_int_literal]: #78
[#127 ident]: #71
[#127 int_literal]: #72
[#127 literal]: #69
[#127 multiplicative_expression]: #59
[#127 paren_expression]: #70
[#127 primary_expression]: #66
[#127 relational_expression]: #49
[#127 shift_expression]: #53
[#127 short_circuit_and_expression]: #51
[#127 short_circuit_or_expression]: #50
[#127 singular_expression]: #60
[#127 unary_expression]: #58
[#130 additive_expression]: #57
[#130 binary_and_expression]: #54
[#130 binary_or_expression]: #55
[#130 binary_xor_expression]: #56
[#130 bitwise_expression]: #52
[#130 bool_literal]: #74
[#130 call_expression]: #68
[#130 callable]: #67
[#130 decimal_float_literal]: #79
[#130 decimal_int_literal]: #77
[#130 expression]: #218
[#130 float_literal]: #73
[#130 hex_float_literal]: #80
[#130 hex_int_literal]: #78
[#130 ident]: #71
[#130 int_literal]: #72
[#130 literal]: #69
[#130 multiplicative_expression]: #59
[#130 paren_expression]: #70
[#130 primary_expression]: #66
[#130 relational_expression]: #49
[#130 shift_expression]: #53
[#130 short_circuit_and_expression]: #51
[#130 short_circuit_or_expression]: #50
[#130 singular_expression]: #60
[#130 unary_expression]: #58
[#131 member_ident]: #207
[#131 swizzle_name]: #208
[#137 bool_literal]: #74
[#137 call_expression]: #68
[#137 callable]: #67
[#137 decimal_float_literal]: #79
[#137 decimal_int_literal]: #77
[#137 float_literal]: #73
[#137 hex_float_literal]: #80
[#137 hex_int_literal]: #78
[#137 ident]: #71
[#137 int_literal]: #72
[#137 literal]: #69
[#137 paren_expression]: #70
[#137 primary_expression]: #66
[#137 singular_expression]: #60
[#137 unary_expression]: #206
[#141 bool_literal]: #74
[#141 call_expression]: #68
[#141 callable]: #67
[#141 decimal_float_literal]: #79
[#141 decimal_int_literal]: #77
[#141 float_literal]: #73
[#141 hex_float_literal]: #80
[#141 hex_int_literal]: #78
[#141 ident]: #71
[#141 int_literal]: #72
[#141 literal]: #69
[#141 paren_expression]: #70
[#141 primary_expression]: #66
[#141 singular_expression]: #60
[#141 unary_expression]: #205
[#142 bool_literal]: #74
[#142 call_expression]: #68
[#142 callable]: #67
[#142 decimal_float_literal]: #79
[#142 decimal_int_literal]: #77
[#142 float_literal]: #73
[#142 hex_float_literal]: #80
[#142 hex_int_literal]: #78
[#142 ident]: #71
[#142 int_literal]: #72
[#142 literal]: #69
[#142 paren_expression]: #70
[#142 primary_expression]: #66
[#142 singular_expression]: #60
[#142 unary_expression]: #204
[#143 bool_literal]: #74
[#143 call_expression]: #68
[#143 callable]: #67
[#143 decimal_float_literal]: #79
[#143 decimal_int_literal]: #77
[#143 float_literal]: #73
[#143 hex_float_literal]: #80
[#143 hex_int_literal]: #78
[#143 ident]: #71
[#143 int_literal]: #72
[#143 literal]: #69
[#143 multiplicative_expression]: #202
[#143 paren_expression]: #70
[#143 primary_expression]: #66
[#143 singular_expression]: #60
[#143 unary_expression]: #203
[#146 bool_literal]: #74
[#146 call_expression]: #68
[#146 callable]: #67
[#146 decimal_float_literal]: #79
[#146 decimal_int_literal]: #77
[#146 float_literal]: #73
[#146 hex_float_literal]: #80
[#146 hex_int_literal]: #78
[#146 ident]: #71
[#146 int_literal]: #72
[#146 literal]: #69
[#146 paren_expression]: #70
[#146 primary_expression]: #66
[#146 singular_expression]: #60
[#146 unary_expression]: #201
[#147 bool_literal]: #74
[#147 call_expression]: #68
[#147 callable]: #67
[#147 decimal_float_literal]: #79
[#147 decimal_int_literal]: #77
[#147 float_literal]: #73
[#147 hex_float_literal]: #80
[#147 hex_int_literal]: #78
[#147 ident]: #71
[#147 int_literal]: #72
[#147 literal]: #69
[#147 paren_expression]: #70
[#147 primary_expression]: #66
[#147 singular_expression]: #60
[#147 unary_expression]: #200
[#148 bool_literal]: #74
[#148 call_expression]: #68
[#148 callable]: #67
[#148 decimal_float_literal]: #79
[#148 decimal_int_literal]: #77
[#148 float_literal]: #73
[#148 hex_float_literal]: #80
[#148 hex_int_literal]: #78
[#148 ident]: #71
[#148 int_literal]: #72
[#148 literal]: #69
[#148 paren_expression]: #70
[#148 primary_expression]: #66
[#148 singular_expression]: #60
[#148 unary_expression]: #199
[#149 additive_expression]: #57
[#149 bool_literal]: #74
[#149 call_expression]: #68
[#149 callable]: #67
[#149 decimal_float_literal]: #79
[#149 decimal_int_literal]: #77
[#149 float_literal]: #73
[#149 hex_float_literal]: #80
[#149 hex_int_literal]: #78
[#149 ident]: #71
[#149 int_literal]: #72
[#149 literal]: #69
[#149 multiplicative_expression]: #59
[#149 paren_expression]: #70
[#149 primary_expression]: #66
[#149 shift_expression]: #198
[#149 singular_expression]: #60
[#149 unary_expression]: #191
[#150 additive_expression]: #57
[#150 bool_literal]: #74
[#150 call_expression]: #68
[#150 callable]: #67
[#150 decimal_float_literal]: #79
[#150 decimal_int_literal]: #77
[#150 float_literal]: #73
[#150 hex_float_literal]: #80
[#150 hex_int_literal]: #78
[#150 ident]: #71
[#150 int_literal]: #72
[#150 literal]: #69
[#150 multiplicative_expression]: #59
[#150 paren_expression]: #70
[#150 primary_expression]: #66
[#150 shift_expression]: #197
[#150 singular_expression]: #60
[#150 unary_expression]: #191
[#151 additive_expression]: #57
[#151 bool_literal]: #74
[#151 call_expression]: #68
[#151 callable]: #67
[#151 decimal_float_literal]: #79
[#151 decimal_int_literal]: #77
[#151 float_literal]: #73
[#151 hex_float_literal]: #80
[#151 hex_int_literal]: #78
[#151 ident]: #71
[#151 int_literal]: #72
[#151 literal]: #69
[#151 multiplicative_expression]: #59
[#151 paren_expression]: #70
[#151 primary_expression]: #66
[#151 shift_expression]: #196
[#151 singular_expression]: #60
[#151 unary_expression]: #191
[#152 additive_expression]: #57
[#152 bool_literal]: #74
[#152 call_expression]: #68
[#152 callable]: #67
[#152 decimal_float_literal]: #79
[#152 decimal_int_literal]: #77
[#152 float_literal]: #73
[#152 hex_float_literal]: #80
[#152 hex_int_literal]: #78
[#152 ident]: #71
[#152 int_literal]: #72
[#152 literal]: #69
[#152 multiplicative_expression]: #59
[#152 paren_expression]: #70
[#152 primary_expression]: #66
[#152 shift_expression]: #195
[#152 singular_expression]: #60
[#152 unary_expression]: #191
[#153 additive_expression]: #57
[#153 bool_literal]: #74
[#153 call_expression]: #68
[#153 callable]: #67
[#153 decimal_float_literal]: #79
[#153 decimal_int_literal]: #77
[#153 float_literal]: #73
[#153 hex_float_literal]: #80
[#153 hex_int_literal]: #78
[#153 ident]: #71
[#153 int_literal]: #72
[#153 literal]: #69
[#153 multiplicative_expression]: #59
[#153 paren_expression]: #70
[#153 primary_expression]: #66
[#153 shift_expression]: #194
[#153 singular_expression]: #60
[#153 unary_expression]: #191
[#154 additive_expression]: #57
[#154 bool_literal]: #74
[#154 call_expression]: #68
[#154 callable]: #67
[#154 decimal_float_literal]: #79
[#154 decimal_int_literal]: #77
[#154 float_literal]: #73
[#154 hex_float_literal]: #80
[#154 hex_int_literal]: #78
[#154 ident]: #71
[#154 int_literal]: #72
[#154 literal]: #69
[#154 multiplicative_expression]: #59
[#154 paren_expression]: #70
[#154 primary_expression]: #66
[#154 shift_expression]: #193
[#154 singular_expression]: #60
[#154 unary_expression]: #191
[#155 additive_expression]: #57
[#155 bool_literal]: #74
[#155 call_expression]: #68
[#155 callable]: #67
[#155 decimal_float_literal]: #79
[#155 decimal_int_literal]: #77
[#155 float_literal]: #73
[#155 hex_float_literal]: #80
[#155 hex_int_literal]: #78
[#155 ident]: #71
[#155 int_literal]: #72
[#155 literal]: #69
[#155 multiplicative_expression]: #59
[#155 paren_expression]: #70
[#155 primary_expression]: #66
[#155 relational_expression]: #192
[#155 shift_expression]: #53
[#155 singular_expression]: #60
[#155 unary_expression]: #191
[#156 additive_expression]: #57
[#156 bool_literal]: #74
[#156 call_expression]: #68
[#156 callable]: #67
[#156 decimal_float_literal]: #79
[#156 decimal_int_literal]: #77
[#156 float_literal]: #73
[#156 hex_float_literal]: #80
[#156 hex_int_literal]: #78
[#156 ident]: #71
[#156 int_literal]: #72
[#156 literal]: #69
[#156 multiplicative_expression]: #59
[#156 paren_expression]: #70
[#156 primary_expression]: #66
[#156 relational_expression]: #190
[#156 shift_expression]: #53
[#156 singular_expression]: #60
[#156 unary_expression]: #191
[#157 additive_expression]: #57
[#157 binary_and_expression]: #54
[#157 binary_or_expression]: #55
[#157 binary_xor_expression]: #56
[#157 bitwise_expression]: #52
[#157 bool_literal]: #74
[#157 call_expression]: #68
[#157 callable]: #67
[#157 decimal_float_literal]: #79
[#157 decimal_int_literal]: #77
[#157 expression]: #189
[#157 float_literal]: #73
[#157 hex_float_literal]: #80
[#157 hex_int_literal]: #78
[#157 ident]: #71
[#157 int_literal]: #72
[#157 literal]: #69
[#157 multiplicative_expression]: #59
[#157 paren_expression]: #70
[#157 primary_expression]: #66
[#157 relational_expression]: #49
[#157 shift_expression]: #53
[#157 short_circuit_and_expression]: #51
[#157 short_circuit_or_expression]: #50
[#157 singular_expression]: #60
[#157 unary_expression]: #58
[#158 additive_expression]: #57
[#158 binary_and_expression]: #54
[#158 binary_or_expression]: #55
[#158 binary_xor_expression]: #56
[#158 bitwise_expression]: #52
[#158 bool_literal]: #74
[#158 call_expression]: #68
[#158 callable]: #67
[#158 decimal_float_literal]: #79
[#158 decimal_int_literal]: #77
[#158 expression]: #188
[#158 float_literal]: #73
[#158 hex_float_literal]: #80
[#158 hex_int_literal]: #78
[#158 ident]: #71
[#158 int_literal]: #72
[#158 literal]: #69
[#158 multiplicative_expression]: #59
[#158 paren_expression]: #70
[#158 primary_expression]: #66
[#158 relational_expression]: #49
[#158 shift_expression]: #53
[#158 short_circuit_and_expression]: #51
[#158 short_circuit_or_expression]: #50
[#158 singular_expression]: #60
[#158 unary_expression]: #58
[#159 additive_expression]: #57
[#159 binary_and_expression]: #54
[#159 binary_or_expression]: #55
[#159 binary_xor_expression]: #56
[#159 bitwise_expression]: #52
[#159 bool_literal]: #74
[#159 call_expression]: #68
[#159 callable]: #67
[#159 decimal_float_literal]: #79
[#159 decimal_int_literal]: #77
[#159 expression]: #187
[#159 float_literal]: #73
[#159 hex_float_literal]: #80
[#159 hex_int_literal]: #78
[#159 ident]: #71
[#159 int_literal]: #72
[#159 literal]: #69
[#159 multiplicative_expression]: #59
[#159 paren_expression]: #70
[#159 primary_expression]: #66
[#159 relational_expression]: #49
[#159 shift_expression]: #53
[#159 short_circuit_and_expression]: #51
[#159 short_circuit_or_expression]: #50
[#159 singular_expression]: #60
[#159 unary_expression]: #58
[#160 interpolation_type_name]: #183
[#161 additive_expression]: #57
[#161 binary_and_expression]: #54
[#161 binary_or_expression]: #55
[#161 binary_xor_expression]: #56
[#161 bitwise_expression]: #52
[#161 bool_literal]: #74
[#161 call_expression]: #68
[#161 callable]: #67
[#161 decimal_float_literal]: #79
[#161 decimal_int_literal]: #77
[#161 expression]: #182
[#161 float_literal]: #73
[#161 hex_float_literal]: #80
[#161 hex_int_literal]: #78
[#161 ident]: #71
[#161 int_literal]: #72
[#161 literal]: #69
[#161 multiplicative_expression]: #59
[#161 paren_expression]: #70
[#161 primary_expression]: #66
[#161 relational_expression]: #49
[#161 shift_expression]: #53
[#161 short_circuit_and_expression]: #51
[#161 short_circuit_or_expression]: #50
[#161 singular_expression]: #60
[#161 unary_expression]: #58
[#162 additive_expression]: #57
[#162 binary_and_expression]: #54
[#162 binary_or_expression]: #55
[#162 binary_xor_expression]: #56
[#162 bitwise_expression]: #52
[#162 bool_literal]: #74
[#162 call_expression]: #68
[#162 callable]: #67
[#162 decimal_float_literal]: #79
[#162 decimal_int_literal]: #77
[#162 expression]: #181
[#162 float_literal]: #73
[#162 hex_float_literal]: #80
[#162 hex_int_literal]: #78
[#162 ident]: #71
[#162 int_literal]: #72
[#162 literal]: #69
[#162 multiplicative_expression]: #59
[#162 paren_expression]: #70
[#162 primary_expression]: #66
[#162 relational_expression]: #49
[#162 shift_expression]: #53
[#162 short_circuit_and_expression]: #51
[#162 short_circuit_or_expression]: #50
[#162 singular_expression]: #60
[#162 unary_expression]: #58
[#163 builtin_value_name]: #168
[#164 additive_expression]: #57
[#164 binary_and_expression]: #54
[#164 binary_or_expression]: #55
[#164 binary_xor_expression]: #56
[#164 bitwise_expression]: #52
[#164 bool_literal]: #74
[#164 call_expression]: #68
[#164 callable]: #67
[#164 decimal_float_literal]: #79
[#164 decimal_int_literal]: #77
[#164 expression]: #167
[#164 float_literal]: #73
[#164 hex_float_literal]: #80
[#164 hex_int_literal]: #78
[#164 ident]: #71
[#164 int_literal]: #72
[#164 literal]: #69
[#164 multiplicative_expression]: #59
[#164 paren_expression]: #70
[#164 primary_expression]: #66
[#164 relational_expression]: #49
[#164 shift_expression]: #53
[#164 short_circuit_and_expression]: #51
[#164 short_circuit_or_expression]: #50
[#164 singular_expression]: #60
[#164 unary_expression]: #58
[#165 additive_expression]: #57
[#165 binary_and_expression]: #54
[#165 binary_or_expression]: #55
[#165 binary_xor_expression]: #56
[#165 bitwise_expression]: #52
[#165 bool_literal]: #74
[#165 call_expression]: #68
[#165 callable]: #67
[#165 decimal_float_literal]: #79
[#165 decimal_int_literal]: #77
[#165 expression]: #166
[#165 float_literal]: #73
[#165 hex_float_literal]: #80
[#165 hex_int_literal]: #78
[#165 ident]: #71
[#165 int_literal]: #72
[#165 literal]: #69
[#165 multiplicative_expression]: #59
[#165 paren_expression]: #70
[#165 primary_expression]: #66
[#165 relational_expression]: #49
[#165 shift_expression]: #53
[#165 short_circuit_and_expression]: #51
[#165 short_circuit_or_expression]: #50
[#165 singular_expression]: #60
[#165 unary_expression]: #58
[#166 attrib_end]: #370
[#166 attrib_end/0.0]: #360
[#167 attrib_end]: #369
[#167 attrib_end/0.0]: #360
[#168 attrib_end]: #368
[#168 attrib_end/0.0]: #360
[#181 attrib_end]: #367
[#181 attrib_end/0.0]: #360
[#182 attrib_end]: #366
[#182 attrib_end/0.0]: #360
[#183 attrib_end]: #364
[#183 attrib_end/0.0]: #360
[#187 attrib_end]: #363
[#187 attrib_end/0.0]: #360
[#188 attrib_end]: #361
[#188 attrib_end/0.0]: #360
[#189 attrib_end]: #358
[#189 attrib_end/0.0]: #360
[#202 multiplicative_operator]: #137
[#207 component_or_swizzle_specifier]: #357
[#207 component_or_swizzle_specifier/1.2]: #356
[#208 component_or_swizzle_specifier]: #355
[#208 component_or_swizzle_specifier/2.2]: #354
[#221 expression_comma_list/0.1]: #348
[#221 expression_comma_list/0.1/0]: #349
[#221 expression_comma_list/0.1/0/0.0]: #350
[#222 bool_literal]: #74
[#222 call_expression]: #68
[#222 callable]: #67
[#222 decimal_float_literal]: #79
[#222 decimal_int_literal]: #77
[#222 float_literal]: #73
[#222 hex_float_literal]: #80
[#222 hex_int_literal]: #78
[#222 ident]: #71
[#222 int_literal]: #72
[#222 literal]: #69
[#222 paren_expression]: #70
[#222 primary_expression]: #347
[#226 assignment_statement]: #254
[#226 break_statement]: #236
[#226 callable]: #248
[#226 compound_statement]: #240
[#226 compound_statement/0.1/0]: #345
[#226 const_assert_statement]: #241
[#226 continue_statement]: #237
[#226 core_lhs_expression]: #261
[#226 decrement_statement]: #256
[#226 for_statement]: #232
[#226 func_call_statement]: #234
[#226 ident]: #258
[#226 if_clause]: #243
[#226 if_statement]: #229
[#226 increment_statement]: #255
[#226 lhs_expression]: #259
[#226 loop_statement]: #231
[#226 return_statement]: #228
[#226 statement]: #226
[#226 switch_statement]: #230
[#226 variable_decl]: #249
[#226 variable_statement]: #235
[#226 variable_updating_statement]: #239
[#226 while_statement]: #233
[#242 additive_expression]: #57
[#242 binary_and_expression]: #54
[#242 binary_or_expression]: #55
[#242 binary_xor_expression]: #56
[#242 bitwise_expression]: #52
[#242 bool_literal]: #74
[#242 call_expression]: #68
[#242 callable]: #67
[#242 decimal_float_literal]: #79
[#242 decimal_int_literal]: #77
[#242 expression]: #336
[#242 float_literal]: #73
[#242 hex_float_literal]: #80
[#242 hex_int_literal]: #78
[#242 ident]: #71
[#242 int_literal]: #72
[#242 literal]: #69
[#242 multiplicative_expression]: #59
[#242 paren_expression]: #70
[#242 primary_expression]: #66
[#242 relational_expression]: #49
[#242 return_statement/0.1]: #335
[#242 shift_expression]: #53
[#242 short_circuit_and_expression]: #51
[#242 short_circuit_or_expression]: #50
[#242 singular_expression]: #60
[#242 unary_expression]: #58
[#243 else_if_clause]: #333
[#243 if_statement/0.1]: #331
[#243 if_statement/0.1/0]: #332
[#244 additive_expression]: #57
[#244 binary_and_expression]: #54
[#244 binary_or_expression]: #55
[#244 binary_xor_expression]: #56
[#244 bitwise_expression]: #52
[#244 bool_literal]: #74
[#244 call_expression]: #68
[#244 callable]: #67
[#244 decimal_float_literal]: #79
[#244 decimal_int_literal]: #77
[#244 expression]: #330
[#244 float_literal]: #73
[#244 hex_float_literal]: #80
[#244 hex_int_literal]: #78
[#244 ident]: #71
[#244 int_literal]: #72
[#244 literal]: #69
[#244 multiplicative_expression]: #59
[#244 paren_expression]: #70
[#244 primary_expression]: #66
[#244 relational_expression]: #49
[#244 shift_expression]: #53
[#244 short_circuit_and_expression]: #51
[#244 short_circuit_or_expression]: #50
[#244 singular_expression]: #60
[#244 unary_expression]: #58
[#247 additive_expression]: #57
[#247 binary_and_expression]: #54
[#247 binary_or_expression]: #55
[#247 binary_xor_expression]: #56
[#247 bitwise_expression]: #52
[#247 bool_literal]: #74
[#247 call_expression]: #68
[#247 callable]: #67
[#247 decimal_float_literal]: #79
[#247 decimal_int_literal]: #77
[#247 expression]: #327
[#247 float_literal]: #73
[#247 hex_float_literal]: #80
[#247 hex_int_literal]: #78
[#247 ident]: #71
[#247 int_literal]: #72
[#247 literal]: #69
[#247 multiplicative_expression]: #59
[#247 paren_expression]: #70
[#247 primary_expression]: #66
[#247 relational_expression]: #49
[#247 shift_expression]: #53
[#247 short_circuit_and_expression]: #51
[#247 short_circuit_or_expression]: #50
[#247 singular_expression]: #60
[#247 unary_expression]: #58
[#248 argument_expression_list]: #326
[#250 ident]: #100
[#250 optionally_typed_ident]: #324
[#251 ident]: #100
[#251 optionally_typed_ident]: #323
[#257 additive_expression]: #57
[#257 binary_and_expression]: #54
[#257 binary_or_expression]: #55
[#257 binary_xor_expression]: #56
[#257 bitwise_expression]: #52
[#257 bool_literal]: #74
[#257 call_expression]: #68
[#257 callable]: #67
[#257 decimal_float_literal]: #79
[#257 decimal_int_literal]: #77
[#257 expression]: #322
[#257 float_literal]: #73
[#257 hex_float_literal]: #80
[#257 hex_int_literal]: #78
[#257 ident]: #71
[#257 int_literal]: #72
[#257 literal]: #69
[#257 multiplicative_expression]: #59
[#257 paren_expression]: #70
[#257 primary_expression]: #66
[#257 relational_expression]: #49
[#257 shift_expression]: #53
[#257 short_circuit_and_expression]: #51
[#257 short_circuit_or_expression]: #50
[#257 singular_expression]: #60
[#257 unary_expression]: #58
[#259 assignment_statement/0.1]: #307
[#259 compound_assignment_operator]: #311
[#261 component_or_swizzle_specifier]: #305
[#261 lhs_expression/0.1]: #304
[#262 core_lhs_expression]: #261
[#262 ident]: #301
[#262 lhs_expression]: #303
[#263 core_lhs_expression]: #261
[#263 ident]: #301
[#263 lhs_expression]: #302
[#264 core_lhs_expression]: #261
[#264 ident]: #301
[#264 lhs_expression]: #300
[#265 attribute]: #299
[#265 function_header/0.3]: #294
[#265 param]: #296
[#265 param/0.0]: #297
[#265 param/0.0/0]: #298
[#265 param_list]: #295
[#266 struct_body_decl/0.2]: #290
[#266 struct_body_decl/0.2/0]: #291
[#266 struct_body_decl/0.2/0/0.0]: #292
[#267 member_ident]: #289
[#269 attribute]: #269
[#269 struct_member/0.0/0]: #288
[#273 additive_expression]: #57
[#273 binary_and_expression]: #54
[#273 binary_or_expression]: #55
[#273 binary_xor_expression]: #56
[#273 bitwise_expression]: #52
[#273 bool_literal]: #74
[#273 call_expression]: #68
[#273 callable]: #67
[#273 decimal_float_literal]: #79
[#273 decimal_int_literal]: #77
[#273 expression]: #286
[#273 float_literal]: #73
[#273 hex_float_literal]: #80
[#273 hex_int_literal]: #78
[#273 ident]: #71
[#273 int_literal]: #72
[#273 literal]: #69
[#273 multiplicative_expression]: #59
[#273 paren_expression]: #70
[#273 primary_expression]: #66
[#273 relational_expression]: #49
[#273 shift_expression]: #53
[#273 short_circuit_and_expression]: #51
[#273 short_circuit_or_expression]: #50
[#273 singular_expression]: #60
[#273 unary_expression]: #58
[#277 variable_qualifier/0.2]: #284
[#285 access_mode]: #423
[#290 struct_body_decl/0.3]: #419
[#292 struct_body_decl/0.2/0]: #418
[#292 struct_body_decl/0.2/0/0.0]: #292
[#293 attribute]: #269
[#293 struct_member]: #417
[#293 struct_member/0.0]: #267
[#293 struct_member/0.0/0]: #268
[#296 param_list/0.1]: #412
[#296 param_list/0.1/0]: #413
[#296 param_list/0.1/0/0.0]: #414
[#297 ident]: #411
[#299 attribute]: #299
[#299 param/0.0/0]: #410
[#306 additive_expression]: #57
[#306 binary_and_expression]: #54
[#306 binary_or_expression]: #55
[#306 binary_xor_expression]: #56
[#306 bitwise_expression]: #52
[#306 bool_literal]: #74
[#306 call_expression]: #68
[#306 callable]: #67
[#306 decimal_float_literal]: #79
[#306 decimal_int_literal]: #77
[#306 expression]: #408
[#306 float_literal]: #73
[#306 hex_float_literal]: #80
[#306 hex_int_literal]: #78
[#306 ident]: #71
[#306 int_literal]: #72
[#306 literal]: #69
[#306 multiplicative_expression]: #59
[#306 paren_expression]: #70
[#306 primary_expression]: #66
[#306 relational_expression]: #49
[#306 shift_expression]: #53
[#306 short_circuit_and_expression]: #51
[#306 short_circuit_or_expression]: #50
[#306 singular_expression]: #60
[#306 unary_expression]: #58
[#307 additive_expression]: #57
[#307 binary_and_expression]: #54
[#307 binary_or_expression]: #55
[#307 binary_xor_expression]: #56
[#307 bitwise_expression]: #52
[#307 bool_literal]: #74
[#307 call_expression]: #68
[#307 callable]: #67
[#307 decimal_float_literal]: #79
[#307 decimal_int_literal]: #77
[#307 expression]: #407
[#307 float_literal]: #73
[#307 hex_float_literal]: #80
[#307 hex_int_literal]: #78
[#307 ident]: #71
[#307 int_literal]: #72
[#307 literal]: #69
[#307 multiplicative_expression]: #59
[#307 paren_expression]: #70
[#307 primary_expression]: #66
[#307 relational_expression]: #49
[#307 shift_expression]: #53
[#307 short_circuit_and_expression]: #51
[#307 short_circuit_or_expression]: #50
[#307 singular_expression]: #60
[#307 unary_expression]: #58
[#322 compound_statement]: #406
[#325 additive_expression]: #57
[#325 binary_and_expression]: #54
[#325 binary_or_expression]: #55
[#325 binary_xor_expression]: #56
[#325 bitwise_expression]: #52
[#325 bool_literal]: #74
[#325 call_expression]: #68
[#325 callable]: #67
[#325 decimal_float_literal]: #79
[#325 decimal_int_literal]: #77
[#325 expression]: #403
[#325 float_literal]: #73
[#325 hex_float_literal]: #80
[#325 hex_int_literal]: #78
[#325 ident]: #71
[#325 int_literal]: #72
[#325 literal]: #69
[#325 multiplicative_expression]: #59
[#325 paren_expression]: #70
[#325 primary_expression]: #66
[#325 relational_expression]: #49
[#325 shift_expression]: #53
[#325 short_circuit_and_expression]: #51
[#325 short_circuit_or_expression]: #50
[#325 singular_expression]: #60
[#325 unary_expression]: #58
[#327 compound_statement]: #402
[#328 assignment_statement]: #254
[#328 callable]: #248
[#328 core_lhs_expression]: #261
[#328 decrement_statement]: #256
[#328 for_header]: #396
[#328 for_header/0.0]: #397
[#328 for_init]: #398
[#328 func_call_statement]: #401
[#328 ident]: #258
[#328 increment_statement]: #255
[#328 lhs_expression]: #259
[#328 variable_decl]: #249
[#328 variable_statement]: #399
[#328 variable_updating_statement]: #400
[#329 assignment_statement]: #254
[#329 break_statement]: #236
[#329 callable]: #248
[#329 compound_statement]: #240
[#329 const_assert_statement]: #241
[#329 continue_statement]: #237
[#329 core_lhs_expression]: #261
[#329 decrement_statement]: #256
[#329 for_statement]: #232
[#329 func_call_statement]: #234
[#329 ident]: #258
[#329 if_clause]: #243
[#329 if_statement]: #229
[#329 increment_statement]: #255
[#329 lhs_expression]: #259
[#329 loop_statement]: #231
[#329 loop_statement/0.2]: #393
[#329 loop_statement/0.2/0]: #394
[#329 return_statement]: #228
[#329 statement]: #395
[#329 switch_statement]: #230
[#329 variable_decl]: #249
[#329 variable_statement]: #235
[#329 variable_updating_statement]: #239
[#329 while_statement]: #233
[#331 else_clause]: #390
[#331 if_statement/0.2]: #389
[#333 else_if_clause]: #333
[#333 if_statement/0.1/0]: #388
[#347 callable/1.4]: #383
[#347 callable/1.4/0]: #384
[#347 callable/1.4/0/0.0]: #385
[#348 expression_comma_list/0.2]: #381
[#350 expression_comma_list/0.1/0]: #380
[#350 expression_comma_list/0.1/0/0.0]: #350
[#351 additive_expression]: #57
[#351 binary_and_expression]: #54
[#351 binary_or_expression]: #55
[#351 binary_xor_expression]: #56
[#351 bitwise_expression]: #52
[#351 bool_literal]: #74
[#351 call_expression]: #68
[#351 callable]: #67
[#351 decimal_float_literal]: #79
[#351 decimal_int_literal]: #77
[#351 expression]: #379
[#351 float_literal]: #73
[#351 hex_float_literal]: #80
[#351 hex_int_literal]: #78
[#351 ident]: #71
[#351 int_literal]: #72
[#351 literal]: #69
[#351 multiplicative_expression]: #59
[#351 paren_expression]: #70
[#351 primary_expression]: #66
[#351 relational_expression]: #49
[#351 shift_expression]: #53
[#351 short_circuit_and_expression]: #51
[#351 short_circuit_or_expression]: #50
[#351 singular_expression]: #60
[#351 unary_expression]: #58
[#353 component_or_swizzle_specifier]: #378
[#353 component_or_swizzle_specifier/0.3]: #377
[#359 additive_expression]: #57
[#359 binary_and_expression]: #54
[#359 binary_or_expression]: #55
[#359 binary_xor_expression]: #56
[#359 bitwise_expression]: #52
[#359 bool_literal]: #74
[#359 call_expression]: #68
[#359 callable]: #67
[#359 decimal_float_literal]: #79
[#359 decimal_int_literal]: #77
[#359 expression]: #376
[#359 float_literal]: #73
[#359 hex_float_literal]: #80
[#359 hex_int_literal]: #78
[#359 ident]: #71
[#359 int_literal]: #72
[#359 literal]: #69
[#359 multiplicative_expression]: #59
[#359 paren_expression]: #70
[#359 primary_expression]: #66
[#359 relational_expression]: #49
[#359 shift_expression]: #53
[#359 short_circuit_and_expression]: #51
[#359 short_circuit_or_expression]: #50
[#359 singular_expression]: #60
[#359 unary_expression]: #58
[#365 interpolation_sample_name]: #371
[#371 attrib_end]: #461
[#371 attrib_end/0.0]: #360
[#376 attrib_end]: #459
[#376 attrib_end/0.0]: #360
[#383 callable/1.5]: #457
[#385 callable/1.4/0]: #456
[#385 callable/1.4/0/0.0]: #385
[#386 bool_literal]: #74
[#386 call_expression]: #68
[#386 callable]: #67
[#386 decimal_float_literal]: #79
[#386 decimal_int_literal]: #77
[#386 float_literal]: #73
[#386 hex_float_literal]: #80
[#386 hex_int_literal]: #78
[#386 ident]: #71
[#386 int_literal]: #72
[#386 literal]: #69
[#386 paren_expression]: #70
[#386 primary_expression]: #455
[#387 additive_expression]: #57
[#387 binary_and_expression]: #54
[#387 binary_or_expression]: #55
[#387 binary_xor_expression]: #56
[#387 bitwise_expression]: #52
[#387 bool_literal]: #74
[#387 call_expression]: #68
[#387 callable]: #67
[#387 decimal_float_literal]: #79
[#387 decimal_int_literal]: #77
[#387 expression]: #454
[#387 float_literal]: #73
[#387 hex_float_literal]: #80
[#387 hex_int_literal]: #78
[#387 ident]: #71
[#387 int_literal]: #72
[#387 literal]: #69
[#387 multiplicative_expression]: #59
[#387 paren_expression]: #70
[#387 primary_expression]: #66
[#387 relational_expression]: #49
[#387 shift_expression]: #53
[#387 short_circuit_and_expression]: #51
[#387 short_circuit_or_expression]: #50
[#387 singular_expression]: #60
[#387 unary_expression]: #58
[#391 compound_statement]: #453
[#392 case_clause]: #449
[#392 default_alone_clause]: #450
[#392 switch_body]: #448
[#392 switch_statement/0.3]: #446
[#392 switch_statement/0.3/0]: #447
[#393 continuing_statement]: #444
[#393 loop_statement/0.3]: #443
[#395 assignment_statement]: #254
[#395 break_statement]: #236
[#395 callable]: #248
[#395 compound_statement]: #240
[#395 const_assert_statement]: #241
[#395 continue_statement]: #237
[#395 core_lhs_expression]: #261
[#395 decrement_statement]: #256
[#395 for_statement]: #232
[#395 func_call_statement]: #234
[#395 ident]: #258
[#395 if_clause]: #243
[#395 if_statement]: #229
[#395 increment_statement]: #255
[#395 lhs_expression]: #259
[#395 loop_statement]: #231
[#395 loop_statement/0.2/0]: #442
[#395 return_statement]: #228
[#395 statement]: #395
[#395 switch_statement]: #230
[#395 variable_decl]: #249
[#395 variable_statement]: #235
[#395 variable_updating_statement]: #239
[#395 while_statement]: #233
[#404 additive_expression]: #57
[#404 binary_and_expression]: #54
[#404 binary_or_expression]: #55
[#404 binary_xor_expression]: #56
[#404 bitwise_expression]: #52
[#404 bool_literal]: #74
[#404 call_expression]: #68
[#404 callable]: #67
[#404 decimal_float_literal]: #79
[#404 decimal_int_literal]: #77
[#404 expression]: #439
[#404 float_literal]: #73
[#404 hex_float_literal]: #80
[#404 hex_int_literal]: #78
[#404 ident]: #71
[#404 int_literal]: #72
[#404 literal]: #69
[#404 multiplicative_expression]: #59
[#404 paren_expression]: #70
[#404 primary_expression]: #66
[#404 relational_expression]: #49
[#404 shift_expression]: #53
[#404 short_circuit_and_expression]: #51
[#404 short_circuit_or_expression]: #50
[#404 singular_expression]: #60
[#404 unary_expression]: #58
[#405 additive_expression]: #57
[#405 binary_and_expression]: #54
[#405 binary_or_expression]: #55
[#405 binary_xor_expression]: #56
[#405 bitwise_expression]: #52
[#405 bool_literal]: #74
[#405 call_expression]: #68
[#405 callable]: #67
[#405 decimal_float_literal]: #79
[#405 decimal_int_literal]: #77
[#405 expression]: #438
[#405 float_literal]: #73
[#405 hex_float_literal]: #80
[#405 hex_int_literal]: #78
[#405 ident]: #71
[#405 int_literal]: #72
[#405 literal]: #69
[#405 multiplicative_expression]: #59
[#405 paren_expression]: #70
[#405 primary_expression]: #66
[#405 relational_expression]: #49
[#405 shift_expression]: #53
[#405 short_circuit_and_expression]: #51
[#405 short_circuit_or_expression]: #50
[#405 singular_expression]: #60
[#405 unary_expression]: #58
[#412 param_list/0.2]: #435
[#414 param_list/0.1/0]: #434
[#414 param_list/0.1/0/0.0]: #414
[#415 attribute]: #299
[#415 param]: #433
[#415 param/0.0]: #297
[#415 param/0.0/0]: #298
[#416 function_header/0.5]: #431
[#421 ident]: #271
[#421 type_specifier]: #429
[#422 bool_literal]: #74
[#422 call_expression]: #68
[#422 callable]: #67
[#422 decimal_float_literal]: #79
[#422 decimal_int_literal]: #77
[#422 float_literal]: #73
[#422 hex_float_literal]: #80
[#422 hex_int_literal]: #78
[#422 ident]: #71
[#422 int_literal]: #72
[#422 literal]: #69
[#422 paren_expression]: #70
[#422 primary_expression]: #428
[#428 callable/1.4]: #483
[#428 callable/1.4/0]: #384
[#428 callable/1.4/0/0.0]: #385
[#432 attribute]: #482
[#432 function_header/0.5/0.1]: #480
[#432 function_header/0.5/0.1/0]: #481
[#437 ident]: #271
[#437 type_specifier]: #479
[#440 additive_expression]: #57
[#440 binary_and_expression]: #54
[#440 binary_or_expression]: #55
[#440 binary_xor_expression]: #56
[#440 bitwise_expression]: #52
[#440 bool_literal]: #74
[#440 call_expression]: #68
[#440 callable]: #67
[#440 decimal_float_literal]: #79
[#440 decimal_int_literal]: #77
[#440 expression]: #478
[#440 float_literal]: #73
[#440 for_header/0.2]: #477
[#440 hex_float_literal]: #80
[#440 hex_int_literal]: #78
[#440 ident]: #71
[#440 int_literal]: #72
[#440 literal]: #69
[#440 multiplicative_expression]: #59
[#440 paren_expression]: #70
[#440 primary_expression]: #66
[#440 relational_expression]: #49
[#440 shift_expression]: #53
[#440 short_circuit_and_expression]: #51
[#440 short_circuit_or_expression]: #50
[#440 singular_expression]: #60
[#440 unary_expression]: #58
[#441 compound_statement]: #476
[#445 continuing_compound_statement]: #473
[#448 case_clause]: #449
[#448 default_alone_clause]: #450
[#448 switch_body]: #448
[#448 switch_statement/0.3/0]: #471
[#451 additive_expression]: #57
[#451 binary_and_expression]: #54
[#451 binary_or_expression]: #55
[#451 binary_xor_expression]: #56
[#451 bitwise_expression]: #52
[#451 bool_literal]: #74
[#451 call_expression]: #68
[#451 callable]: #67
[#451 case_selector]: #468
[#451 case_selectors]: #467
[#451 decimal_float_literal]: #79
[#451 decimal_int_literal]: #77
[#451 expression]: #470
[#451 float_literal]: #73
[#451 hex_float_literal]: #80
[#451 hex_int_literal]: #78
[#451 ident]: #71
[#451 int_literal]: #72
[#451 literal]: #69
[#451 multiplicative_expression]: #59
[#451 paren_expression]: #70
[#451 primary_expression]: #66
[#451 relational_expression]: #49
[#451 shift_expression]: #53
[#451 short_circuit_and_expression]: #51
[#451 short_circuit_or_expression]: #50
[#451 singular_expression]: #60
[#451 unary_expression]: #58
[#452 default_alone_clause/0.1]: #465
[#454 compound_statement]: #464
[#460 additive_expression]: #57
[#460 binary_and_expression]: #54
[#460 binary_or_expression]: #55
[#460 binary_xor_expression]: #56
[#460 bitwise_expression]: #52
[#460 bool_literal]: #74
[#460 call_expression]: #68
[#460 callable]: #67
[#460 decimal_float_literal]: #79
[#460 decimal_int_literal]: #77
[#460 expression]: #462
[#460 float_literal]: #73
[#460 hex_float_literal]: #80
[#460 hex_int_literal]: #78
[#460 ident]: #71
[#460 int_literal]: #72
[#460 literal]: #69
[#460 multiplicative_expression]: #59
[#460 paren_expression]: #70
[#460 primary_expression]: #66
[#460 relational_expression]: #49
[#460 shift_expression]: #53
[#460 short_circuit_and_expression]: #51
[#460 short_circuit_or_expression]: #50
[#460 singular_expression]: #60
[#460 unary_expression]: #58
[#462 attrib_end]: #498
[#462 attrib_end/0.0]: #360
[#465 compound_statement]: #497
[#467 case_clause/0.2]: #495
[#468 case_selectors/0.1]: #491
[#468 case_selectors/0.1/0]: #492
[#468 case_selectors/0.1/0/0.0]: #493
[#474 assignment_statement]: #254
[#474 break_statement]: #236
[#474 callable]: #248
[#474 compound_statement]: #240
[#474 const_assert_statement]: #241
[#474 continue_statement]: #237
[#474 continuing_compound_statement/0.1]: #488
[#474 continuing_compound_statement/0.1/0]: #489
[#474 core_lhs_expression]: #261
[#474 decrement_statement]: #256
[#474 for_statement]: #232
[#474 func_call_statement]: #234
[#474 ident]: #258
[#474 if_clause]: #243
[#474 if_statement]: #229
[#474 increment_statement]: #255
[#474 lhs_expression]: #259
[#474 loop_statement]: #231
[#474 return_statement]: #228
[#474 statement]: #490
[#474 switch_statement]: #230
[#474 variable_decl]: #249
[#474 variable_statement]: #235
[#474 variable_updating_statement]: #239
[#474 while_statement]: #233
[#480 ident]: #271
[#480 type_specifier]: #486
[#482 attribute]: #482
[#482 function_header/0.5/0.1/0]: #485
[#483 callable/1.5]: #484
[#487 assignment_statement]: #254
[#487 callable]: #248
[#487 core_lhs_expression]: #261
[#487 decrement_statement]: #256
[#487 for_header/0.4]: #508
[#487 for_update]: #509
[#487 func_call_statement]: #511
[#487 ident]: #258
[#487 increment_statement]: #255
[#487 lhs_expression]: #259
[#487 variable_updating_statement]: #510
[#488 break_if_statement]: #506
[#488 continuing_compound_statement/0.2]: #505
[#490 assignment_statement]: #254
[#490 break_statement]: #236
[#490 callable]: #248
[#490 compound_statement]: #240
[#490 const_assert_statement]: #241
[#490 continue_statement]: #237
[#490 continuing_compound_statement/0.1/0]: #504
[#490 core_lhs_expression]: #261
[#490 decrement_statement]: #256
[#490 for_statement]: #232
[#490 func_call_statement]: #234
[#490 ident]: #258
[#490 if_clause]: #243
[#490 if_statement]: #229
[#490 increment_statement]: #255
[#490 lhs_expression]: #259
[#490 loop_statement]: #231
[#490 return_statement]: #228
[#490 statement]: #490
[#490 switch_statement]: #230
[#490 variable_decl]: #249
[#490 variable_statement]: #235
[#490 variable_updating_statement]: #239
[#490 while_statement]: #233
[#491 case_selectors/0.2]: #502
[#493 case_selectors/0.1/0]: #501
[#493 case_selectors/0.1/0/0.0]: #493
[#494 additive_expression]: #57
[#494 binary_and_expression]: #54
[#494 binary_or_expression]: #55
[#494 binary_xor_expression]: #56
[#494 bitwise_expression]: #52
[#494 bool_literal]: #74
[#494 call_expression]: #68
[#494 callable]: #67
[#494 case_selector]: #500
[#494 decimal_float_literal]: #79
[#494 decimal_int_literal]: #77
[#494 expression]: #470
[#494 float_literal]: #73
[#494 hex_float_literal]: #80
[#494 hex_int_literal]: #78
[#494 ident]: #71
[#494 int_literal]: #72
[#494 literal]: #69
[#494 multiplicative_expression]: #59
[#494 paren_expression]: #70
[#494 primary_expression]: #66
[#494 relational_expression]: #49
[#494 shift_expression]: #53
[#494 short_circuit_and_expression]: #51
[#494 short_circuit_or_expression]: #50
[#494 singular_expression]: #60
[#494 unary_expression]: #58
[#495 compound_statement]: #499
[#513 additive_expression]: #57
[#513 binary_and_expression]: #54
[#513 binary_or_expression]: #55
[#513 binary_xor_expression]: #56
[#513 bitwise_expression]: #52
[#513 bool_literal]: #74
[#513 call_expression]: #68
[#513 callable]: #67
[#513 decimal_float_literal]: #79
[#513 decimal_int_literal]: #77
[#513 expression]: #515
[#513 float_literal]: #73
[#513 hex_float_literal]: #80
[#513 hex_int_literal]: #78
[#513 ident]: #71
[#513 int_literal]: #72
[#513 literal]: #69
[#513 multiplicative_expression]: #59
[#513 paren_expression]: #70
[#513 primary_expression]: #66
[#513 relational_expression]: #49
[#513 shift_expression]: #53
[#513 short_circuit_and_expression]: #51
[#513 short_circuit_or_expression]: #50
[#513 singular_expression]: #60
[#513 unary_expression]: #58
