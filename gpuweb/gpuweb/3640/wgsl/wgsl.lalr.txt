=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   minus
 | plus
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
and:'&'
and_and:'&&'
and_equal:'&='
argument_expression_list:
   paren_left expression_comma_list ? paren_right
array:'array'
array_type_specifier:
   'array' less_than type_specifier ( comma element_count_expression )? greater_than
arrow:'->'
assignment_statement:
   lhs_expression ( equal | compound_assignment_operator ) expression
 | underscore equal expression
atomic:'atomic'
attr:'@'
attrib_end:
   comma ? paren_right
attribute:
   attr 'align' paren_left expression attrib_end
 | attr 'binding' paren_left expression attrib_end
 | attr 'builtin' paren_left builtin_value_name attrib_end
 | attr 'compute'
 | attr 'const'
 | attr 'fragment'
 | attr 'group' paren_left expression attrib_end
 | attr 'id' paren_left expression attrib_end
 | attr 'interpolate' paren_left interpolation_type_name attrib_end
 | attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end
 | attr 'invariant'
 | attr 'location' paren_left expression attrib_end
 | attr 'size' paren_left expression attrib_end
 | attr 'vertex'
 | attr 'workgroup_size' paren_left expression attrib_end
 | attr 'workgroup_size' paren_left expression comma expression attrib_end
 | attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end
bang:'!'
binary_and_expression:
   binary_and_expression and unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression or unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression xor unary_expression
 | unary_expression
bitcast:'bitcast'
bitwise_expression:
   binary_and_expression and unary_expression
 | binary_or_expression or unary_expression
 | binary_xor_expression xor unary_expression
bool:'bool'
bool_literal:
   'false'
 | 'true'
brace_left:'{'
brace_right:'}'
bracket_left:'['
bracket_right:']'
break:'break'
break_if_statement:
   'break' 'if' expression semicolon
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case:'case'
case_clause:
   'case' case_selectors colon ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( comma case_selector ) * ? comma ?
case_selectors/0.1/0/0.0:
   comma case_selector
colon:':'
comma:','
component_or_swizzle_specifier:
   bracket_left expression bracket_right component_or_swizzle_specifier ?
 | period member_ident component_or_swizzle_specifier ?
 | period swizzle_name component_or_swizzle_specifier ?
compound_assignment_operator:
   and_equal
 | division_equal
 | minus_equal
 | modulo_equal
 | or_equal
 | plus_equal
 | shift_left_equal
 | shift_right_equal
 | times_equal
 | xor_equal
compound_statement:
   brace_left statement * ? brace_right
const:'const'
continue:'continue'
continue_statement:'continue'
continuing:'continuing'
continuing_compound_statement:
   brace_left statement * ? break_if_statement ? brace_right
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   ident
 | paren_left lhs_expression paren_right
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression minus_minus
default:'default'
default_alone_clause:
   'default' colon ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
discard:'discard'
division_equal:'/='
element_count_expression:
   additive_expression
 | bitwise_expression
else:'else'
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable:'enable'
enable_directive:
   'enable' extension_name semicolon
equal:'='
equal_equal:'=='
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression and_and relational_expression
 | short_circuit_or_expression or_or relational_expression
expression_comma_list:
   expression ( comma expression ) * ? comma ?
expression_comma_list/0.1/0/0.0:
   comma expression
extension_name:
   'bgra8unorm_storage'
 | 'f16'
false:'false'
float16:'f16'
float32:'f32'
float_literal:
   decimal_float_literal
 | hex_float_literal
fn:'fn'
for:'for'
for_header:
   for_init ? semicolon expression ? semicolon for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' paren_left for_header paren_right compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
forward_slash:'/'
func_call_statement:
   ident argument_expression_list
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident paren_left param_list ? paren_right ( arrow attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident equal expression
 | attribute * ? 'override' optionally_typed_ident ( equal expression )?
global_decl:
   function_decl
 | global_constant_decl semicolon
 | global_variable_decl semicolon
 | semicolon
 | static_assert_statement semicolon
 | struct_decl
 | type_alias_decl semicolon
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( equal expression )?
greater_than:'>'
greater_than_equal:'>='
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if:'if'
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression plus_plus
int32:'i32'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
less_than:'<'
less_than_equal:'<='
let:'let'
lhs_expression:
   and lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
 | star lhs_expression
literal:
   bool_literal
 | float_literal
 | int_literal
loop:'loop'
loop_statement:
   'loop' brace_left statement * ? continuing_statement ? brace_right
mat2x2:'mat2x2'
mat2x3:'mat2x3'
mat2x4:'mat2x4'
mat3x2:'mat3x2'
mat3x3:'mat3x3'
mat3x4:'mat3x4'
mat4x2:'mat4x2'
mat4x3:'mat4x3'
mat4x4:'mat4x4'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
minus:'-'
minus_equal:'-='
minus_minus:'--'
modulo:'%'
modulo_equal:'%='
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   forward_slash
 | modulo
 | star
multisampled_texture_type:'texture_multisampled_2d'
not_equal:'!='
optionally_typed_ident:
   ident ( colon type_specifier )?
or:'|'
or_equal:'|='
or_or:'||'
override:'override'
param:
   attribute * ? ident colon type_specifier
param_list:
   param ( comma param ) * ? comma ?
param_list/0.1/0/0.0:
   comma param
paren_expression:
   paren_left expression paren_right
paren_left:'('
paren_right:')'
period:'.'
plus:'+'
plus_equal:'+='
plus_plus:'++'
pointer:'ptr'
primary_expression:
   'bitcast' less_than type_specifier greater_than paren_expression
 | callable argument_expression_list
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression equal_equal shift_expression
 | shift_expression greater_than shift_expression
 | shift_expression greater_than_equal shift_expression
 | shift_expression less_than shift_expression
 | shift_expression less_than_equal shift_expression
 | shift_expression not_equal shift_expression
return:'return'
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler:'sampler'
sampler_comparison:'sampler_comparison'
sampler_type:
   'sampler'
 | 'sampler_comparison'
semicolon:';'
shift_expression:
   additive_expression
 | unary_expression shift_left unary_expression
 | unary_expression shift_right unary_expression
shift_left:'<<'
shift_left_equal:'<<='
shift_right:'>>'
shift_right_equal:'>>='
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression or_or relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
star:'*'
statement:
   'discard' semicolon
 | break_statement semicolon
 | compound_statement
 | continue_statement semicolon
 | for_statement
 | func_call_statement semicolon
 | if_statement
 | loop_statement
 | return_statement semicolon
 | semicolon
 | static_assert_statement semicolon
 | switch_statement
 | variable_statement semicolon
 | variable_updating_statement semicolon
 | while_statement
static_assert:'static_assert'
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct:'struct'
struct_body_decl:
   brace_left struct_member ( comma struct_member ) * ? comma ? brace_right
struct_body_decl/0.2/0/0.0:
   comma struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident colon type_specifier
switch:'switch'
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression brace_left ( switch_body * ) brace_right
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_1d:'texture_1d'
texture_2d:'texture_2d'
texture_2d_array:'texture_2d_array'
texture_3d:'texture_3d'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type less_than type_specifier greater_than
 | sampled_texture_type less_than type_specifier greater_than
 | sampler_type
 | storage_texture_type less_than texel_format comma access_mode greater_than
texture_cube:'texture_cube'
texture_cube_array:'texture_cube_array'
texture_depth_2d:'texture_depth_2d'
texture_depth_2d_array:'texture_depth_2d_array'
texture_depth_cube:'texture_depth_cube'
texture_depth_cube_array:'texture_depth_cube_array'
texture_depth_multisampled_2d:'texture_depth_multisampled_2d'
texture_multisampled_2d:'texture_multisampled_2d'
texture_storage_1d:'texture_storage_1d'
texture_storage_2d:'texture_storage_2d'
texture_storage_2d_array:'texture_storage_2d_array'
texture_storage_3d:'texture_storage_3d'
tilde:'~'
times_equal:'*='
translation_unit:
   global_directive * ? global_decl * ?
true:'true'
type:'type'
type_alias_decl:
   'type' ident equal type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' less_than type_specifier greater_than
 | 'bool'
 | array_type_specifier
 | float16
 | float32
 | int32
 | mat_prefix less_than type_specifier greater_than
 | pointer less_than address_space comma type_specifier ( comma access_mode )? greater_than
 | texture_and_sampler_types
 | uint32
 | vec_prefix less_than type_specifier greater_than
uint32:'u32'
unary_expression:
   and unary_expression
 | bang unary_expression
 | minus unary_expression
 | singular_expression
 | star unary_expression
 | tilde unary_expression
underscore:'_'
var:'var'
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   less_than address_space ( comma access_mode )? greater_than
variable_statement:
   'const' optionally_typed_ident equal expression
 | 'let' optionally_typed_ident equal expression
 | variable_decl
 | variable_decl equal expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec2:'vec2'
vec3:'vec3'
vec4:'vec4'
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while:'while'
while_statement:
   'while' expression compound_statement
xor:'^'
xor_equal:'^='
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_specifier : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'bgra8unorm_storage' : {';'}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
extension_name -> 'bgra8unorm_storage' · : {';'}

#9
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#10
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#11
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#12
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_specifier : {';'}

#13
global_decl -> semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_variable_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> global_constant_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> type_alias_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> struct_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> function_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#19
global_decl -> static_assert_statement · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#20
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' '_' 'array' 'atomic' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'static_assert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/ EndOfText}

#21
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}

#22
global_constant_decl -> 'const' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#23
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#24
type_alias_decl -> 'type' · ident equal type_specifier : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#25
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#26
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#27
static_assert_statement -> 'static_assert' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#28
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#29
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#30
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#31
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#32
attribute -> attr · 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#33
attr -> '@' · : {'const'}

#34
attribute -> attr 'align' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#35
attribute -> attr 'binding' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#36
attribute -> attr 'builtin' · paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {}

#37
attribute -> attr 'const' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#38
attribute -> attr 'group' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#39
attribute -> attr 'id' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#40
attribute -> attr 'interpolate' · paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'interpolate' · paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {}

#41
attribute -> attr 'invariant' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#42
attribute -> attr 'location' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#43
attribute -> attr 'size' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#44
attribute -> attr 'workgroup_size' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' · paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' · paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#45
attribute -> attr 'vertex' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#46
attribute -> attr 'fragment' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#47
attribute -> attr 'compute' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#48
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#49
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#50
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#51
static_assert_statement -> 'static_assert' expression · : {';'}

#52
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#53
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#54
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#55
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#56
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#57
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#58
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#59
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#60
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_operator -> · minus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · plus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#61
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#62
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · forward_slash : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · modulo : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · star : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#63
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#64
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#65
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#66
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#67
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#68
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#69
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
period -> · '.' : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#70
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#71
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#72
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#73
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#74
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#75
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#76
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#77
primary_expression -> literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#78
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#79
primary_expression -> 'bitcast' · less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#80
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#81
callable -> type_specifier_without_ident · : {'('}

#82
callable -> vec_prefix · : {'('}
type_specifier_without_ident -> vec_prefix · less_than type_specifier greater_than : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#83
callable -> mat_prefix · : {'('}
type_specifier_without_ident -> mat_prefix · less_than type_specifier greater_than : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#84
array_type_specifier -> 'array' · less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
callable -> 'array' · : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#85
literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#87
literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#88
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#89
type_specifier_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_specifier_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_specifier_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_specifier_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#93
type_specifier_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#94
type_specifier_without_ident -> pointer · less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#95
type_specifier_without_ident -> array_type_specifier · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#96
type_specifier_without_ident -> 'atomic' · less_than type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#97
type_specifier_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#98
vec_prefix -> 'vec2' · : {'(' '<'}

#99
vec_prefix -> 'vec3' · : {'(' '<'}

#100
vec_prefix -> 'vec4' · : {'(' '<'}

#101
mat_prefix -> 'mat2x2' · : {'(' '<'}

#102
mat_prefix -> 'mat2x3' · : {'(' '<'}

#103
mat_prefix -> 'mat2x4' · : {'(' '<'}

#104
mat_prefix -> 'mat3x2' · : {'(' '<'}

#105
mat_prefix -> 'mat3x3' · : {'(' '<'}

#106
mat_prefix -> 'mat3x4' · : {'(' '<'}

#107
mat_prefix -> 'mat4x2' · : {'(' '<'}

#108
mat_prefix -> 'mat4x3' · : {'(' '<'}

#109
mat_prefix -> 'mat4x4' · : {'(' '<'}

#110
int_literal -> decimal_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
int_literal -> hex_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#115
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#116
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' '_' 'array' 'atomic' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/}

#117
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#118
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#119
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#120
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#121
pointer -> 'ptr' · : {'<'}

#122
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#124
texture_and_sampler_types -> sampled_texture_type · less_than type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#125
texture_and_sampler_types -> multisampled_texture_type · less_than type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#126
texture_and_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#127
decimal_int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#128
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#129
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#130
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#131
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#132
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#133
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#134
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#135
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#136
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#137
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#138
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#139
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#140
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#141
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#142
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#143
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#144
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#145
sampled_texture_type -> 'texture_1d' · : {'<'}

#146
sampled_texture_type -> 'texture_2d' · : {'<'}

#147
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#148
sampled_texture_type -> 'texture_3d' · : {'<'}

#149
sampled_texture_type -> 'texture_cube' · : {'<'}

#150
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#151
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#152
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#153
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#154
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#155
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#156
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#157
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#158
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#159
type_alias_decl -> 'type' ident · equal type_specifier : {';'}
equal -> · '=' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#160
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#161
global_constant_decl -> 'const' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#162
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {';' '='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
optionally_typed_ident/0.1 -> · colon type_specifier : {';' '='}

#163
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
global_variable_decl/0.2 -> · equal expression : {';'}

#164
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {';' '='}
less_than -> · '<' : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#165
global_decl -> static_assert_statement semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#166
global_decl -> type_alias_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#167
global_decl -> global_constant_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#168
global_decl -> global_variable_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#169
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#170
global_directive -> 'enable' extension_name semicolon · : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#171
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#172
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#173
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#174
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#175
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#176
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#177
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#178
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {';' '='}

#179
optionally_typed_ident/0.1 -> colon · type_specifier : {';' '='}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {';' '='}
depth_texture_type -> · 'texture_depth_2d' : {';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {';' '='}
depth_texture_type -> · 'texture_depth_cube' : {';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';' '='}
float16 -> · 'f16' : {';' '='}
float32 -> · 'f32' : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';' '='}
int32 -> · 'i32' : {';' '='}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';' '='}
sampler_type -> · 'sampler_comparison' : {';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';' '='}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {';' '='}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {';' '='}
texture_and_sampler_types -> · sampler_type : {';' '='}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';' '='}
type_specifier -> · ident : {';' '='}
type_specifier -> · type_specifier_without_ident : {';' '='}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {';' '='}
type_specifier_without_ident -> · 'bool' : {';' '='}
type_specifier_without_ident -> · array_type_specifier : {';' '='}
type_specifier_without_ident -> · float16 : {';' '='}
type_specifier_without_ident -> · float32 : {';' '='}
type_specifier_without_ident -> · int32 : {';' '='}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {';' '='}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {';' '='}
type_specifier_without_ident -> · texture_and_sampler_types : {';' '='}
type_specifier_without_ident -> · uint32 : {';' '='}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {';' '='}
uint32 -> · 'u32' : {';' '='}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#180
colon -> ':' · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' '{'}

#181
global_constant_decl -> 'const' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#182
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
global_constant_decl/1.3 -> · equal expression : {';'}

#183
type_alias_decl -> 'type' ident equal · type_specifier : {';'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {';'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_specifier -> · ident : {';'}
type_specifier -> · type_specifier_without_ident : {';'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {';'}
type_specifier_without_ident -> · 'bool' : {';'}
type_specifier_without_ident -> · array_type_specifier : {';'}
type_specifier_without_ident -> · float16 : {';'}
type_specifier_without_ident -> · float32 : {';'}
type_specifier_without_ident -> · int32 : {';'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {';'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {';'}
type_specifier_without_ident -> · texture_and_sampler_types : {';'}
type_specifier_without_ident -> · uint32 : {';'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {';'}
uint32 -> · 'u32' : {';'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#184
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#185
struct_body_decl -> brace_left · struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#186
brace_left -> '{' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#187
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#188
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#189
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#190
texture_and_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'bgra8unorm' : {','}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#191
texture_and_sampler_types -> multisampled_texture_type less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#192
texture_and_sampler_types -> sampled_texture_type less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#193
type_specifier_without_ident -> 'atomic' less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#194
type_specifier_without_ident -> pointer less_than · address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#195
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#196
array_type_specifier -> 'array' less_than · type_specifier array_type_specifier/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · float16 : {',' '>'}
type_specifier_without_ident -> · float32 : {',' '>'}
type_specifier_without_ident -> · int32 : {',' '>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · uint32 : {',' '>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {',' '>'}
uint32 -> · 'u32' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#197
type_specifier_without_ident -> mat_prefix less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#198
type_specifier_without_ident -> vec_prefix less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#199
primary_expression -> 'bitcast' less_than · type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#200
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#201
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
argument_expression_list/0.1 -> · expression_comma_list : {')'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#202
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#203
singular_expression/0.1 -> component_or_swizzle_specifier · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#204
component_or_swizzle_specifier -> bracket_left · expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#205
component_or_swizzle_specifier -> period · member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> period · swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#206
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#207
period -> '.' · : {}

#208
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#209
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#210
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#211
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#212
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#213
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#214
multiplicative_operator -> star · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#215
multiplicative_operator -> forward_slash · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#216
multiplicative_operator -> modulo · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#217
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#218
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#219
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#220
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#221
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#222
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#223
additive_expression -> additive_expression additive_operator · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#224
additive_operator -> plus · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#225
additive_operator -> minus · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#226
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#227
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#228
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#229
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#230
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#231
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · hex_int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#232
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#233
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#234
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#235
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#236
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#237
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#238
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/}

#239
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#240
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#241
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#242
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#243
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#244
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#245
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#246
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#247
attribute -> attr 'workgroup_size' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left · expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left · expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#248
attribute -> attr 'size' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#249
attribute -> attr 'location' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#250
attribute -> attr 'interpolate' paren_left · interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'interpolate' paren_left · interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#251
attribute -> attr 'id' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#252
attribute -> attr 'group' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#253
attribute -> attr 'builtin' paren_left · builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#254
attribute -> attr 'binding' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#255
attribute -> attr 'align' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#256
attribute -> attr 'align' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#257
attribute -> attr 'binding' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#258
attribute -> attr 'builtin' paren_left builtin_value_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#259
builtin_value_name -> 'vertex_index' · : {')' ','}

#260
builtin_value_name -> 'instance_index' · : {')' ','}

#261
builtin_value_name -> 'position' · : {')' ','}

#262
builtin_value_name -> 'front_facing' · : {')' ','}

#263
builtin_value_name -> 'frag_depth' · : {')' ','}

#264
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#265
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#266
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#267
builtin_value_name -> 'workgroup_id' · : {')' ','}

#268
builtin_value_name -> 'num_workgroups' · : {')' ','}

#269
builtin_value_name -> 'sample_index' · : {')' ','}

#270
builtin_value_name -> 'sample_mask' · : {')' ','}

#271
attribute -> attr 'group' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#272
attribute -> attr 'id' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#273
attribute -> attr 'interpolate' paren_left interpolation_type_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'interpolate' paren_left interpolation_type_name · comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#274
interpolation_type_name -> 'perspective' · : {')' ','}

#275
interpolation_type_name -> 'linear' · : {')' ','}

#276
interpolation_type_name -> 'flat' · : {')' ','}

#277
attribute -> attr 'location' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#278
attribute -> attr 'size' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#279
attribute -> attr 'workgroup_size' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression · comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression · comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#280
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#281
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#282
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#283
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#284
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#285
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#286
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#287
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#288
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#289
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#290
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#291
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#292
additive_expression -> additive_expression additive_operator multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · forward_slash : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · modulo : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · star : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#293
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#294
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#295
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#296
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#297
component_or_swizzle_specifier -> period member_ident · component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
period -> · '.' : {}

#298
component_or_swizzle_specifier -> period swizzle_name · component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
period -> · '.' : {}

#299
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#300
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#301
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#302
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#303
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#304
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#305
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#306
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#307
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#308
component_or_swizzle_specifier -> bracket_left expression · bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#309
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#310
argument_expression_list/0.1 -> expression_comma_list · : {')'}

#311
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {')'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · comma expression : {')' ','}

#312
primary_expression -> 'bitcast' less_than type_specifier · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#313
type_specifier -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#314
type_specifier -> type_specifier_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#315
type_specifier_without_ident -> vec_prefix · less_than type_specifier greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#316
type_specifier_without_ident -> mat_prefix · less_than type_specifier greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#317
array_type_specifier -> 'array' · less_than type_specifier array_type_specifier/0.3 greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#318
type_specifier_without_ident -> vec_prefix less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#319
type_specifier_without_ident -> mat_prefix less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#320
array_type_specifier -> 'array' less_than type_specifier · array_type_specifier/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#321
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#322
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' '{' '|' '|=' '||'}

#323
type_specifier_without_ident -> pointer less_than address_space · comma type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#324
address_space -> 'function' · : {',' '>'}

#325
address_space -> 'private' · : {',' '>'}

#326
address_space -> 'workgroup' · : {',' '>'}

#327
address_space -> 'uniform' · : {',' '>'}

#328
address_space -> 'storage' · : {',' '>'}

#329
type_specifier_without_ident -> 'atomic' less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#330
texture_and_sampler_types -> sampled_texture_type less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#331
texture_and_sampler_types -> multisampled_texture_type less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#332
texture_and_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#333
texel_format -> 'rgba8unorm' · : {','}

#334
texel_format -> 'rgba8snorm' · : {','}

#335
texel_format -> 'rgba8uint' · : {','}

#336
texel_format -> 'rgba8sint' · : {','}

#337
texel_format -> 'rgba16uint' · : {','}

#338
texel_format -> 'rgba16sint' · : {','}

#339
texel_format -> 'rgba16float' · : {','}

#340
texel_format -> 'r32uint' · : {','}

#341
texel_format -> 'r32sint' · : {','}

#342
texel_format -> 'r32float' · : {','}

#343
texel_format -> 'rg32uint' · : {','}

#344
texel_format -> 'rg32sint' · : {','}

#345
texel_format -> 'rg32float' · : {','}

#346
texel_format -> 'rgba32uint' · : {','}

#347
texel_format -> 'rgba32sint' · : {','}

#348
texel_format -> 'rgba32float' · : {','}

#349
texel_format -> 'bgra8unorm' · : {','}

#350
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#351
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#352
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
statement -> semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#354
statement -> return_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#355
statement -> if_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
statement -> switch_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#357
statement -> loop_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#358
statement -> for_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#359
statement -> while_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#360
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
statement -> variable_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#362
statement -> break_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#363
statement -> continue_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#364
statement -> 'discard' · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#365
statement -> variable_updating_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#366
statement -> compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#368
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#369
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#370
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#371
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#372
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' '_' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#373
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#374
core_lhs_expression -> ident · : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#375
variable_statement -> variable_decl · : {';'}
variable_statement -> variable_decl · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#376
variable_statement -> 'let' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#377
variable_statement -> 'const' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#378
break_statement -> 'break' · : {';'}

#379
continue_statement -> 'continue' · : {';'}

#380
variable_updating_statement -> assignment_statement · : {')' ';'}

#381
variable_updating_statement -> increment_statement · : {')' ';'}

#382
variable_updating_statement -> decrement_statement · : {')' ';'}

#383
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#384
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#385
assignment_statement -> underscore · equal expression : {')' ';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#386
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {}

#387
lhs_expression -> star · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · and lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#388
lhs_expression -> and · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · and lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#389
underscore -> '_' · : {'='}

#390
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
core_lhs_expression -> · ident : {')' '.' '['}
core_lhs_expression -> · paren_left lhs_expression paren_right : {')' '.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' '.' '['}
lhs_expression -> · and lhs_expression : {')'}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {')'}
lhs_expression -> · star lhs_expression : {')'}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#391
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 ident colon type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {')'}

#392
struct_body_decl -> brace_left struct_member · struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · comma struct_member : {',' '}'}

#393
struct_member -> struct_member/0.0 · member_ident colon type_specifier : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#394
struct_member/0.0 -> struct_member/0.0/0 · : {}

#395
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#396
type_alias_decl -> 'type' ident equal type_specifier · : {';'}

#397
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {';'}

#398
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#399
global_constant_decl -> 'const' optionally_typed_ident equal expression · : {';'}

#400
optionally_typed_ident/0.1 -> colon type_specifier · : {';' '='}

#401
global_variable_decl/0.2 -> equal expression · : {';'}

#402
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#403
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {';' '='}

#404
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#405
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#406
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/}

#407
global_constant_decl/1.3 -> equal expression · : {';'}

#408
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#409
struct_member -> struct_member/0.0 member_ident · colon type_specifier : {',' '}'}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#410
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 · struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#411
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {',' '}'}

#412
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {',' '}'}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · comma struct_member : {',' '}'}

#413
struct_body_decl/0.2/0/0.0 -> comma · struct_member : {',' '}'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#414
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#415
function_header/0.3 -> param_list · : {')'}

#416
param_list -> param · param_list/0.1 param_list/0.2 : {')'}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1 -> · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · comma param : {')' ','}

#417
param -> param/0.0 · ident colon type_specifier : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#418
param/0.0 -> param/0.0/0 · : {}

#419
param/0.0/0 -> attribute · param/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
param/0.0/0 -> · attribute param/0.0/0 : {}

#420
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#421
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#422
lhs_expression -> and lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#423
lhs_expression -> star lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#424
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#425
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#426
assignment_statement -> underscore equal · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#427
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#428
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#429
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#430
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#431
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#432
plus_plus -> '++' · : {')' ';'}

#433
minus_minus -> '--' · : {')' ';'}

#434
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#435
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#436
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#437
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#438
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#439
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#440
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#441
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#442
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#443
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#444
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#445
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#446
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#447
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#448
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#449
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#450
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#451
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#452
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#453
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#454
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#455
variable_statement -> 'const' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#456
variable_statement -> 'let' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#457
variable_statement -> variable_decl equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#458
func_call_statement -> ident argument_expression_list · : {')' ';'}

#459
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#460
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · variable_statement : {';'}
for_init -> · variable_updating_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}

#461
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#462
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#463
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#464
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#465
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#466
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#467
return_statement -> 'return' return_statement/0.1 · : {';'}

#468
return_statement/0.1 -> expression · : {';'}

#469
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#470
statement -> variable_updating_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#471
statement -> 'discard' semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#472
statement -> continue_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#473
statement -> break_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#474
statement -> variable_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#475
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#476
statement -> return_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#477
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#478
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#479
brace_right -> '}' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#480
texture_and_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#481
texture_and_sampler_types -> multisampled_texture_type less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#482
texture_and_sampler_types -> sampled_texture_type less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#483
type_specifier_without_ident -> 'atomic' less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#484
type_specifier_without_ident -> pointer less_than address_space comma · type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · float16 : {',' '>'}
type_specifier_without_ident -> · float32 : {',' '>'}
type_specifier_without_ident -> · int32 : {',' '>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · uint32 : {',' '>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {',' '>'}
uint32 -> · 'u32' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#485
array_type_specifier -> 'array' less_than type_specifier array_type_specifier/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#486
array_type_specifier/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · hex_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#487
type_specifier_without_ident -> mat_prefix less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#488
type_specifier_without_ident -> vec_prefix less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#489
primary_expression -> 'bitcast' less_than type_specifier greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#490
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {')'}
comma -> · ',' : {')'}
expression_comma_list/0.2 -> · comma : {')'}

#491
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {')' ','}

#492
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {')' ','}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {')' ','}
expression_comma_list/0.1/0/0.0 -> · comma expression : {')' ','}

#493
expression_comma_list/0.1/0/0.0 -> comma · expression : {')' ','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#494
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#495
component_or_swizzle_specifier -> bracket_left expression bracket_right · component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
period -> · '.' : {}

#496
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#497
component_or_swizzle_specifier -> period swizzle_name component_or_swizzle_specifier/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#498
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#499
component_or_swizzle_specifier -> period member_ident component_or_swizzle_specifier/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#500
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#501
attribute -> attr 'workgroup_size' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#502
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#503
attrib_end -> attrib_end/0.0 · paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_right -> · ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#504
attribute -> attr 'size' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#505
attrib_end/0.0 -> comma · : {')'}

#506
attribute -> attr 'location' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#507
attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#508
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'interpolate' paren_left interpolation_type_name comma · interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#509
attribute -> attr 'id' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#510
attribute -> attr 'group' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#511
attribute -> attr 'builtin' paren_left builtin_value_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#512
attribute -> attr 'binding' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#513
attribute -> attr 'align' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#514
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#515
interpolation_sample_name -> 'center' · : {')' ','}

#516
interpolation_sample_name -> 'centroid' · : {')' ','}

#517
interpolation_sample_name -> 'sample' · : {')' ','}

#518
attrib_end -> attrib_end/0.0 paren_right · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#519
attribute -> attr 'workgroup_size' paren_left expression comma expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression comma expression · comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#520
component_or_swizzle_specifier -> bracket_left expression bracket_right component_or_swizzle_specifier/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#521
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#522
expression_comma_list/0.1/0/0.0 -> comma expression · : {')' ','}

#523
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {')' ','}

#524
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {')'}

#525
expression_comma_list/0.2 -> comma · : {')'}

#526
primary_expression -> 'bitcast' less_than type_specifier greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#527
array_type_specifier/0.3 -> comma element_count_expression · : {'>'}

#528
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
additive_operator -> · minus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · plus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#529
element_count_expression -> bitwise_expression · : {'>'}

#530
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#531
array_type_specifier -> 'array' less_than type_specifier array_type_specifier/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#532
type_specifier_without_ident -> pointer less_than address_space comma type_specifier · type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_specifier_without_ident/7.5 -> · comma access_mode : {'>'}

#533
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#534
access_mode -> 'read' · : {'>'}

#535
access_mode -> 'write' · : {'>'}

#536
access_mode -> 'read_write' · : {'>'}

#537
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#538
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#539
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#540
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#541
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#542
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#543
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#544
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#545
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#546
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#547
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#548
for_header/0.0 -> for_init · : {';'}

#549
for_init -> variable_statement · : {';'}

#550
for_init -> variable_updating_statement · : {';'}

#551
for_init -> func_call_statement · : {';'}

#552
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#553
variable_statement -> variable_decl equal expression · : {';'}

#554
variable_statement -> 'let' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#555
variable_statement -> 'const' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#556
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#557
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#558
assignment_statement -> underscore equal expression · : {')' ';'}

#559
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#560
param/0.0/0 -> attribute param/0.0/0 · : {}

#561
param -> param/0.0 ident · colon type_specifier : {')' ','}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#562
param_list -> param param_list/0.1 · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#563
param_list/0.1 -> param_list/0.1/0 · : {')' ','}

#564
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {')' ','}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · comma param : {')' ','}

#565
param_list/0.1/0/0.0 -> comma · param : {')' ','}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
param -> · param/0.0 ident colon type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#566
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_specifier : {'{'}

#567
struct_body_decl/0.2/0/0.0 -> comma struct_member · : {',' '}'}

#568
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {',' '}'}

#569
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 · brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#570
struct_body_decl/0.3 -> comma · : {'}'}

#571
struct_member -> struct_member/0.0 member_ident colon · type_specifier : {',' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
float16 -> · 'f16' : {',' '}'}
float32 -> · 'f32' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
int32 -> · 'i32' : {',' '}'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '}'}
type_specifier -> · ident : {',' '}'}
type_specifier -> · type_specifier_without_ident : {',' '}'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {',' '}'}
type_specifier_without_ident -> · 'bool' : {',' '}'}
type_specifier_without_ident -> · array_type_specifier : {',' '}'}
type_specifier_without_ident -> · float16 : {',' '}'}
type_specifier_without_ident -> · float32 : {',' '}'}
type_specifier_without_ident -> · int32 : {',' '}'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {',' '}'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {',' '}'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '}'}
type_specifier_without_ident -> · uint32 : {',' '}'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {',' '}'}
uint32 -> · 'u32' : {',' '}'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#572
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#573
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#574
struct_member -> struct_member/0.0 member_ident colon type_specifier · : {',' '}'}

#575
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#576
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#577
function_header/0.5 -> arrow · function_header/0.5/0.1 type_specifier : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#578
arrow -> '->' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#579
param_list/0.1/0/0.0 -> comma param · : {')' ','}

#580
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {')' ','}

#581
param_list -> param param_list/0.1 param_list/0.2 · : {')'}

#582
param_list/0.2 -> comma · : {')'}

#583
param -> param/0.0 ident colon · type_specifier : {')' ','}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {')' ','}
depth_texture_type -> · 'texture_depth_2d' : {')' ','}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ','}
depth_texture_type -> · 'texture_depth_cube' : {')' ','}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ','}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ','}
float16 -> · 'f16' : {')' ','}
float32 -> · 'f32' : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
int32 -> · 'i32' : {')' ','}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ','}
sampler_type -> · 'sampler_comparison' : {')' ','}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ','}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {')' ','}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {')' ','}
texture_and_sampler_types -> · sampler_type : {')' ','}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ','}
type_specifier -> · ident : {')' ','}
type_specifier -> · type_specifier_without_ident : {')' ','}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {')' ','}
type_specifier_without_ident -> · 'bool' : {')' ','}
type_specifier_without_ident -> · array_type_specifier : {')' ','}
type_specifier_without_ident -> · float16 : {')' ','}
type_specifier_without_ident -> · float32 : {')' ','}
type_specifier_without_ident -> · int32 : {')' ','}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {')' ','}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {')' ','}
type_specifier_without_ident -> · texture_and_sampler_types : {')' ','}
type_specifier_without_ident -> · uint32 : {')' ','}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {')' ','}
uint32 -> · 'u32' : {')' ','}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#584
variable_statement -> 'const' optionally_typed_ident equal expression · : {';'}

#585
variable_statement -> 'let' optionally_typed_ident equal expression · : {';'}

#586
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#587
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#588
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#589
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#590
loop_statement/0.3 -> continuing_statement · : {'}'}

#591
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#592
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#593
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#594
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#595
switch_body -> case_clause · : {'case' 'default' '}'}

#596
switch_body -> default_alone_clause · : {'case' 'default' '}'}

#597
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#598
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
default_alone_clause/0.1 -> · colon : {'{'}

#599
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#600
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#601
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#602
type_specifier_without_ident -> pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#603
type_specifier_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#604
attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#605
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma expression comma · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#606
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#607
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#608
type_specifier_without_ident/7.5 -> comma access_mode · : {'>'}

#609
type_specifier_without_ident -> pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#610
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#611
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'case' 'default' '}'}

#612
default_alone_clause/0.1 -> colon · : {'{'}

#613
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> · colon : {'{'}
colon -> · ':' : {'{'}

#614
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma case_selector : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#615
case_selector -> 'default' · : {',' ':' '{'}

#616
case_selector -> expression · : {',' ':' '{'}

#617
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#618
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#619
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#620
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#621
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#622
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#623
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#624
for_header/0.2 -> expression · : {';'}

#625
param -> param/0.0 ident colon type_specifier · : {')' ','}

#626
function_header/0.5 -> arrow function_header/0.5/0.1 · type_specifier : {'{'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'{'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'{'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'{'}
texture_and_sampler_types -> · sampler_type : {'{'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_specifier -> · ident : {'{'}
type_specifier -> · type_specifier_without_ident : {'{'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'{'}
type_specifier_without_ident -> · 'bool' : {'{'}
type_specifier_without_ident -> · array_type_specifier : {'{'}
type_specifier_without_ident -> · float16 : {'{'}
type_specifier_without_ident -> · float32 : {'{'}
type_specifier_without_ident -> · int32 : {'{'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'{'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'{'}
type_specifier_without_ident -> · texture_and_sampler_types : {'{'}
type_specifier_without_ident -> · uint32 : {'{'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'{'}
uint32 -> · 'u32' : {'{'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#627
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#628
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#629
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#630
function_header/0.5 -> arrow function_header/0.5/0.1 type_specifier · : {'{'}

#631
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
assignment_statement -> · underscore equal expression : {')'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · variable_updating_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
underscore -> · '_' : {'='}
variable_updating_statement -> · assignment_statement : {')'}
variable_updating_statement -> · decrement_statement : {')'}
variable_updating_statement -> · increment_statement : {')'}

#632
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#633
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#634
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#635
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#636
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#637
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma case_selector : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#638
case_selectors/0.1/0/0.0 -> comma · case_selector : {',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#639
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'case' 'default' '}'}

#640
case_clause/0.2 -> colon · : {'{'}

#641
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default' '}'}

#642
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#643
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default' '}'}

#644
case_selectors/0.1/0/0.0 -> comma case_selector · : {',' ':' '{'}

#645
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#646
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#647
case_selectors/0.2 -> comma · : {':' '{'}

#648
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#649
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#650
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#651
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#652
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#653
for_header/0.4 -> for_update · : {')'}

#654
for_update -> variable_updating_statement · : {')'}

#655
for_update -> func_call_statement · : {')'}

#656
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#657
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#658
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#659
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 extension_name -> 'bgra8unorm_storage' ·
r#3 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#4 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#5 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#6 global_decl -> semicolon ·
r#7 global_decl -> struct_decl ·
r#8 global_decl -> function_decl ·
r#9 semicolon -> ';' ·
r#10 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#11 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#12 function_decl/0.0 -> function_decl/0.0/0 ·
r#13 attr -> '@' ·
r#14 attribute -> attr 'const' ·
r#15 attribute -> attr 'invariant' ·
r#16 attribute -> attr 'vertex' ·
r#17 attribute -> attr 'fragment' ·
r#18 attribute -> attr 'compute' ·
r#19 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#20 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#21 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#22 static_assert_statement -> 'static_assert' expression ·
r#23 expression -> relational_expression ·
r#24 short_circuit_or_expression -> relational_expression ·
r#25 short_circuit_and_expression -> relational_expression ·
r#26 expression -> bitwise_expression ·
r#27 relational_expression -> shift_expression ·
r#28 shift_expression -> additive_expression ·
r#29 binary_and_expression -> unary_expression ·
r#30 binary_or_expression -> unary_expression ·
r#31 binary_xor_expression -> unary_expression ·
r#32 multiplicative_expression -> unary_expression ·
r#33 additive_expression -> multiplicative_expression ·
r#34 unary_expression -> singular_expression ·
r#35 minus -> '-' ·
r#36 bang -> '!' ·
r#37 tilde -> '~' ·
r#38 star -> '*' ·
r#39 and -> '&' ·
r#40 primary_expression -> ident ·
r#41 callable -> ident ·
r#42 primary_expression -> literal ·
r#43 primary_expression -> paren_expression ·
r#44 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#45 callable -> type_specifier_without_ident ·
r#46 callable -> vec_prefix ·
r#47 callable -> mat_prefix ·
r#48 callable -> 'array' ·
r#49 literal -> int_literal ·
r#50 literal -> float_literal ·
r#51 literal -> bool_literal ·
r#52 type_specifier_without_ident -> 'bool' ·
r#53 type_specifier_without_ident -> float32 ·
r#54 type_specifier_without_ident -> float16 ·
r#55 type_specifier_without_ident -> int32 ·
r#56 type_specifier_without_ident -> uint32 ·
r#57 type_specifier_without_ident -> array_type_specifier ·
r#58 type_specifier_without_ident -> texture_and_sampler_types ·
r#59 vec_prefix -> 'vec2' ·
r#60 vec_prefix -> 'vec3' ·
r#61 vec_prefix -> 'vec4' ·
r#62 mat_prefix -> 'mat2x2' ·
r#63 mat_prefix -> 'mat2x3' ·
r#64 mat_prefix -> 'mat2x4' ·
r#65 mat_prefix -> 'mat3x2' ·
r#66 mat_prefix -> 'mat3x3' ·
r#67 mat_prefix -> 'mat3x4' ·
r#68 mat_prefix -> 'mat4x2' ·
r#69 mat_prefix -> 'mat4x3' ·
r#70 mat_prefix -> 'mat4x4' ·
r#71 int_literal -> decimal_int_literal ·
r#72 int_literal -> hex_int_literal ·
r#73 float_literal -> decimal_float_literal ·
r#74 float_literal -> hex_float_literal ·
r#75 bool_literal -> 'true' ·
r#76 bool_literal -> 'false' ·
r#77 paren_left -> '(' ·
r#78 float32 -> 'f32' ·
r#79 float16 -> 'f16' ·
r#80 int32 -> 'i32' ·
r#81 uint32 -> 'u32' ·
r#82 pointer -> 'ptr' ·
r#83 texture_and_sampler_types -> sampler_type ·
r#84 texture_and_sampler_types -> depth_texture_type ·
r#85 decimal_int_literal -> /0[iu]?/ ·
r#86 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#87 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#88 decimal_float_literal -> /0[fh]/ ·
r#89 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#90 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#91 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#92 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#93 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#94 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#95 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#96 sampler_type -> 'sampler' ·
r#97 sampler_type -> 'sampler_comparison' ·
r#98 depth_texture_type -> 'texture_depth_2d' ·
r#99 depth_texture_type -> 'texture_depth_2d_array' ·
r#100 depth_texture_type -> 'texture_depth_cube' ·
r#101 depth_texture_type -> 'texture_depth_cube_array' ·
r#102 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#103 sampled_texture_type -> 'texture_1d' ·
r#104 sampled_texture_type -> 'texture_2d' ·
r#105 sampled_texture_type -> 'texture_2d_array' ·
r#106 sampled_texture_type -> 'texture_3d' ·
r#107 sampled_texture_type -> 'texture_cube' ·
r#108 sampled_texture_type -> 'texture_cube_array' ·
r#109 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#110 storage_texture_type -> 'texture_storage_1d' ·
r#111 storage_texture_type -> 'texture_storage_2d' ·
r#112 storage_texture_type -> 'texture_storage_2d_array' ·
r#113 storage_texture_type -> 'texture_storage_3d' ·
r#114 global_decl -> static_assert_statement semicolon ·
r#115 global_decl -> type_alias_decl semicolon ·
r#116 global_decl -> global_constant_decl semicolon ·
r#117 global_decl -> global_variable_decl semicolon ·
r#118 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#119 global_directive -> 'enable' extension_name semicolon ·
r#120 variable_decl/0.1 -> variable_qualifier ·
r#121 less_than -> '<' ·
r#122 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#123 equal -> '=' ·
r#124 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#125 colon -> ':' ·
r#126 struct_decl -> 'struct' ident struct_body_decl ·
r#127 brace_left -> '{' ·
r#128 function_decl -> function_decl/0.0 function_header compound_statement ·
r#129 primary_expression -> callable argument_expression_list ·
r#130 singular_expression -> primary_expression singular_expression/0.1 ·
r#131 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#132 bracket_left -> '[' ·
r#133 unary_expression -> and unary_expression ·
r#134 unary_expression -> star unary_expression ·
r#135 unary_expression -> tilde unary_expression ·
r#136 unary_expression -> bang unary_expression ·
r#137 unary_expression -> minus unary_expression ·
r#138 multiplicative_operator -> star ·
r#139 multiplicative_operator -> forward_slash ·
r#140 multiplicative_operator -> modulo ·
r#141 forward_slash -> '/' ·
r#142 modulo -> '%' ·
r#143 shift_left -> '<<' ·
r#144 shift_right -> '>>' ·
r#145 additive_operator -> plus ·
r#146 additive_operator -> minus ·
r#147 plus -> '+' ·
r#148 xor -> '^' ·
r#149 or -> '|' ·
r#150 greater_than -> '>' ·
r#151 less_than_equal -> '<=' ·
r#152 greater_than_equal -> '>=' ·
r#153 equal_equal -> '==' ·
r#154 not_equal -> '!=' ·
r#155 and_and -> '&&' ·
r#156 or_or -> '||' ·
r#157 builtin_value_name -> 'vertex_index' ·
r#158 builtin_value_name -> 'instance_index' ·
r#159 builtin_value_name -> 'position' ·
r#160 builtin_value_name -> 'front_facing' ·
r#161 builtin_value_name -> 'frag_depth' ·
r#162 builtin_value_name -> 'local_invocation_id' ·
r#163 builtin_value_name -> 'local_invocation_index' ·
r#164 builtin_value_name -> 'global_invocation_id' ·
r#165 builtin_value_name -> 'workgroup_id' ·
r#166 builtin_value_name -> 'num_workgroups' ·
r#167 builtin_value_name -> 'sample_index' ·
r#168 builtin_value_name -> 'sample_mask' ·
r#169 interpolation_type_name -> 'perspective' ·
r#170 interpolation_type_name -> 'linear' ·
r#171 interpolation_type_name -> 'flat' ·
r#172 expression -> short_circuit_or_expression or_or relational_expression ·
r#173 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#174 expression -> short_circuit_and_expression and_and relational_expression ·
r#175 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#176 relational_expression -> shift_expression not_equal shift_expression ·
r#177 relational_expression -> shift_expression equal_equal shift_expression ·
r#178 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#179 relational_expression -> shift_expression less_than_equal shift_expression ·
r#180 relational_expression -> shift_expression greater_than shift_expression ·
r#181 relational_expression -> shift_expression less_than shift_expression ·
r#182 bitwise_expression -> binary_and_expression and unary_expression ·
r#183 binary_and_expression -> binary_and_expression and unary_expression ·
r#184 bitwise_expression -> binary_or_expression or unary_expression ·
r#185 binary_or_expression -> binary_or_expression or unary_expression ·
r#186 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#187 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#188 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#189 shift_expression -> unary_expression shift_right unary_expression ·
r#190 shift_expression -> unary_expression shift_left unary_expression ·
r#191 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#192 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#193 swizzle_name -> '/[rgba]/' ·
r#194 swizzle_name -> '/[rgba][rgba]/' ·
r#195 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#196 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#197 swizzle_name -> '/[xyzw]/' ·
r#198 swizzle_name -> '/[xyzw][xyzw]/' ·
r#199 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#200 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#201 argument_expression_list/0.1 -> expression_comma_list ·
r#202 type_specifier -> ident ·
r#203 type_specifier -> type_specifier_without_ident ·
r#204 paren_expression -> paren_left expression paren_right ·
r#205 paren_right -> ')' ·
r#206 address_space -> 'function' ·
r#207 address_space -> 'private' ·
r#208 address_space -> 'workgroup' ·
r#209 address_space -> 'uniform' ·
r#210 address_space -> 'storage' ·
r#211 texel_format -> 'rgba8unorm' ·
r#212 texel_format -> 'rgba8snorm' ·
r#213 texel_format -> 'rgba8uint' ·
r#214 texel_format -> 'rgba8sint' ·
r#215 texel_format -> 'rgba16uint' ·
r#216 texel_format -> 'rgba16sint' ·
r#217 texel_format -> 'rgba16float' ·
r#218 texel_format -> 'r32uint' ·
r#219 texel_format -> 'r32sint' ·
r#220 texel_format -> 'r32float' ·
r#221 texel_format -> 'rg32uint' ·
r#222 texel_format -> 'rg32sint' ·
r#223 texel_format -> 'rg32float' ·
r#224 texel_format -> 'rgba32uint' ·
r#225 texel_format -> 'rgba32sint' ·
r#226 texel_format -> 'rgba32float' ·
r#227 texel_format -> 'bgra8unorm' ·
r#228 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#229 statement -> semicolon ·
r#230 statement -> if_statement ·
r#231 statement -> switch_statement ·
r#232 statement -> loop_statement ·
r#233 statement -> for_statement ·
r#234 statement -> while_statement ·
r#235 statement -> compound_statement ·
r#236 core_lhs_expression -> ident ·
r#237 variable_statement -> variable_decl ·
r#238 break_statement -> 'break' ·
r#239 continue_statement -> 'continue' ·
r#240 variable_updating_statement -> assignment_statement ·
r#241 variable_updating_statement -> increment_statement ·
r#242 variable_updating_statement -> decrement_statement ·
r#243 underscore -> '_' ·
r#244 type_alias_decl -> 'type' ident equal type_specifier ·
r#245 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ·
r#246 global_constant_decl -> 'const' optionally_typed_ident equal expression ·
r#247 optionally_typed_ident/0.1 -> colon type_specifier ·
r#248 global_variable_decl/0.2 -> equal expression ·
r#249 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#250 comma -> ',' ·
r#251 global_constant_decl/1.3 -> equal expression ·
r#252 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#253 function_header/0.3 -> param_list ·
r#254 lhs_expression -> and lhs_expression ·
r#255 lhs_expression -> star lhs_expression ·
r#256 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#257 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#258 increment_statement -> lhs_expression plus_plus ·
r#259 decrement_statement -> lhs_expression minus_minus ·
r#260 assignment_statement/0.1 -> equal ·
r#261 assignment_statement/0.1 -> compound_assignment_operator ·
r#262 plus_plus -> '++' ·
r#263 minus_minus -> '--' ·
r#264 compound_assignment_operator -> plus_equal ·
r#265 compound_assignment_operator -> minus_equal ·
r#266 compound_assignment_operator -> times_equal ·
r#267 compound_assignment_operator -> division_equal ·
r#268 compound_assignment_operator -> modulo_equal ·
r#269 compound_assignment_operator -> and_equal ·
r#270 compound_assignment_operator -> or_equal ·
r#271 compound_assignment_operator -> xor_equal ·
r#272 compound_assignment_operator -> shift_right_equal ·
r#273 compound_assignment_operator -> shift_left_equal ·
r#274 plus_equal -> '+=' ·
r#275 minus_equal -> '-=' ·
r#276 times_equal -> '*=' ·
r#277 division_equal -> '/=' ·
r#278 modulo_equal -> '%=' ·
r#279 and_equal -> '&=' ·
r#280 or_equal -> '|=' ·
r#281 xor_equal -> '^=' ·
r#282 shift_right_equal -> '>>=' ·
r#283 shift_left_equal -> '<<=' ·
r#284 func_call_statement -> ident argument_expression_list ·
r#285 if_statement/0.1 -> if_statement/0.1/0 ·
r#286 return_statement -> 'return' return_statement/0.1 ·
r#287 return_statement/0.1 -> expression ·
r#288 statement -> static_assert_statement semicolon ·
r#289 statement -> variable_updating_statement semicolon ·
r#290 statement -> 'discard' semicolon ·
r#291 statement -> continue_statement semicolon ·
r#292 statement -> break_statement semicolon ·
r#293 statement -> variable_statement semicolon ·
r#294 statement -> func_call_statement semicolon ·
r#295 statement -> return_statement semicolon ·
r#296 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#297 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#298 brace_right -> '}' ·
r#299 texture_and_sampler_types -> multisampled_texture_type less_than type_specifier greater_than ·
r#300 texture_and_sampler_types -> sampled_texture_type less_than type_specifier greater_than ·
r#301 type_specifier_without_ident -> 'atomic' less_than type_specifier greater_than ·
r#302 type_specifier_without_ident -> mat_prefix less_than type_specifier greater_than ·
r#303 type_specifier_without_ident -> vec_prefix less_than type_specifier greater_than ·
r#304 expression_comma_list/0.1 -> expression_comma_list/0.1/0 ·
r#305 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#306 bracket_right -> ']' ·
r#307 component_or_swizzle_specifier -> period swizzle_name component_or_swizzle_specifier/2.2 ·
r#308 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#309 component_or_swizzle_specifier -> period member_ident component_or_swizzle_specifier/1.2 ·
r#310 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#311 attribute -> attr 'workgroup_size' paren_left expression attrib_end ·
r#312 attrib_end/0.0 -> comma ·
r#313 attribute -> attr 'size' paren_left expression attrib_end ·
r#314 attribute -> attr 'location' paren_left expression attrib_end ·
r#315 attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end ·
r#316 attribute -> attr 'id' paren_left expression attrib_end ·
r#317 attribute -> attr 'group' paren_left expression attrib_end ·
r#318 attribute -> attr 'builtin' paren_left builtin_value_name attrib_end ·
r#319 attribute -> attr 'binding' paren_left expression attrib_end ·
r#320 attribute -> attr 'align' paren_left expression attrib_end ·
r#321 interpolation_sample_name -> 'center' ·
r#322 interpolation_sample_name -> 'centroid' ·
r#323 interpolation_sample_name -> 'sample' ·
r#324 attrib_end -> attrib_end/0.0 paren_right ·
r#325 component_or_swizzle_specifier -> bracket_left expression bracket_right component_or_swizzle_specifier/0.3 ·
r#326 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#327 expression_comma_list/0.1/0/0.0 -> comma expression ·
r#328 expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 ·
r#329 expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 ·
r#330 expression_comma_list/0.2 -> comma ·
r#331 primary_expression -> 'bitcast' less_than type_specifier greater_than paren_expression ·
r#332 array_type_specifier/0.3 -> comma element_count_expression ·
r#333 element_count_expression -> additive_expression ·
r#334 element_count_expression -> bitwise_expression ·
r#335 array_type_specifier -> 'array' less_than type_specifier array_type_specifier/0.3 greater_than ·
r#336 access_mode -> 'read' ·
r#337 access_mode -> 'write' ·
r#338 access_mode -> 'read_write' ·
r#339 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#340 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#341 if_statement/0.2 -> else_clause ·
r#342 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#343 for_header/0.0 -> for_init ·
r#344 for_init -> variable_statement ·
r#345 for_init -> variable_updating_statement ·
r#346 for_init -> func_call_statement ·
r#347 while_statement -> 'while' expression compound_statement ·
r#348 variable_statement -> variable_decl equal expression ·
r#349 if_clause -> 'if' expression compound_statement ·
r#350 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#351 assignment_statement -> underscore equal expression ·
r#352 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#353 param_list/0.1 -> param_list/0.1/0 ·
r#354 struct_body_decl/0.2/0/0.0 -> comma struct_member ·
r#355 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#356 struct_body_decl/0.3 -> comma ·
r#357 variable_qualifier/0.2 -> comma access_mode ·
r#358 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#359 struct_member -> struct_member/0.0 member_ident colon type_specifier ·
r#360 struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right ·
r#361 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#362 arrow -> '->' ·
r#363 param_list/0.1/0/0.0 -> comma param ·
r#364 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#365 param_list -> param param_list/0.1 param_list/0.2 ·
r#366 param_list/0.2 -> comma ·
r#367 variable_statement -> 'const' optionally_typed_ident equal expression ·
r#368 variable_statement -> 'let' optionally_typed_ident equal expression ·
r#369 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#370 loop_statement/0.3 -> continuing_statement ·
r#371 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#372 switch_body -> case_clause ·
r#373 switch_body -> default_alone_clause ·
r#374 else_clause -> 'else' compound_statement ·
r#375 texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#376 attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end ·
r#377 attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end ·
r#378 type_specifier_without_ident/7.5 -> comma access_mode ·
r#379 type_specifier_without_ident -> pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than ·
r#380 else_if_clause -> 'else' 'if' expression compound_statement ·
r#381 default_alone_clause/0.1 -> colon ·
r#382 case_selector -> 'default' ·
r#383 case_selector -> expression ·
r#384 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#385 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#386 continuing_statement -> 'continuing' continuing_compound_statement ·
r#387 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#388 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#389 for_header/0.2 -> expression ·
r#390 param -> param/0.0 ident colon type_specifier ·
r#391 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#392 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#393 function_header/0.5 -> arrow function_header/0.5/0.1 type_specifier ·
r#394 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#395 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#396 case_clause/0.2 -> colon ·
r#397 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#398 attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end ·
r#399 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#400 case_selectors/0.1/0/0.0 -> comma case_selector ·
r#401 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#402 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#403 case_selectors/0.2 -> comma ·
r#404 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#405 continuing_compound_statement/0.2 -> break_if_statement ·
r#406 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#407 for_header/0.4 -> for_update ·
r#408 for_update -> variable_updating_statement ·
r#409 for_update -> func_call_statement ·
r#410 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#411 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#20
[#2 '@']: s#33
[#2 'const']: s#22
[#2 'static_assert']: s#27
[#2 'struct']: s#25
[#2 'type']: s#24
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'static_assert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'bgra8unorm_storage']: s#8
[#5 'f16']: s#7
[#6 ';']: s#20
[#7 ';']: r#1
[#8 ';']: r#2
[#9 ';']: r#3
[#9 '@']: r#3
[#9 'const']: r#3
[#9 'fn']: r#3
[#9 'override']: r#3
[#9 'static_assert']: r#3
[#9 'struct']: r#3
[#9 'type']: r#3
[#9 'var']: r#3
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 EndOfText]: r#5
[#12 ';']: s#20
[#12 '@']: s#33
[#12 'const']: s#22
[#12 'static_assert']: s#27
[#12 'struct']: s#25
[#12 'type']: s#24
[#13 ';']: r#6
[#13 '@']: r#6
[#13 'const']: r#6
[#13 'fn']: r#6
[#13 'override']: r#6
[#13 'static_assert']: r#6
[#13 'struct']: r#6
[#13 'type']: r#6
[#13 'var']: r#6
[#13 EndOfText]: r#6
[#14 ';']: s#20
[#15 ';']: s#20
[#16 ';']: s#20
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'const']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'static_assert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: r#8
[#18 '@']: r#8
[#18 'const']: r#8
[#18 'fn']: r#8
[#18 'override']: r#8
[#18 'static_assert']: r#8
[#18 'struct']: r#8
[#18 'type']: r#8
[#18 'var']: r#8
[#18 EndOfText]: r#8
[#19 ';']: s#20
[#20 '!']: r#9
[#20 '&']: r#9
[#20 '(']: r#9
[#20 ')']: r#9
[#20 '*']: r#9
[#20 '-']: r#9
[#20 ';']: r#9
[#20 '@']: r#9
[#20 '_']: r#9
[#20 'array']: r#9
[#20 'atomic']: r#9
[#20 'bitcast']: r#9
[#20 'bool']: r#9
[#20 'break']: r#9
[#20 'const']: r#9
[#20 'continue']: r#9
[#20 'continuing']: r#9
[#20 'discard']: r#9
[#20 'enable']: r#9
[#20 'f16']: r#9
[#20 'f32']: r#9
[#20 'false']: r#9
[#20 'fn']: r#9
[#20 'for']: r#9
[#20 'i32']: r#9
[#20 'if']: r#9
[#20 'let']: r#9
[#20 'loop']: r#9
[#20 'mat2x2']: r#9
[#20 'mat2x3']: r#9
[#20 'mat2x4']: r#9
[#20 'mat3x2']: r#9
[#20 'mat3x3']: r#9
[#20 'mat3x4']: r#9
[#20 'mat4x2']: r#9
[#20 'mat4x3']: r#9
[#20 'mat4x4']: r#9
[#20 'override']: r#9
[#20 'ptr']: r#9
[#20 'return']: r#9
[#20 'sampler']: r#9
[#20 'sampler_comparison']: r#9
[#20 'static_assert']: r#9
[#20 'struct']: r#9
[#20 'switch']: r#9
[#20 'texture_1d']: r#9
[#20 'texture_2d']: r#9
[#20 'texture_2d_array']: r#9
[#20 'texture_3d']: r#9
[#20 'texture_cube']: r#9
[#20 'texture_cube_array']: r#9
[#20 'texture_depth_2d']: r#9
[#20 'texture_depth_2d_array']: r#9
[#20 'texture_depth_cube']: r#9
[#20 'texture_depth_cube_array']: r#9
[#20 'texture_depth_multisampled_2d']: r#9
[#20 'texture_multisampled_2d']: r#9
[#20 'texture_storage_1d']: r#9
[#20 'texture_storage_2d']: r#9
[#20 'texture_storage_2d_array']: r#9
[#20 'texture_storage_3d']: r#9
[#20 'true']: r#9
[#20 'type']: r#9
[#20 'u32']: r#9
[#20 'var']: r#9
[#20 'vec2']: r#9
[#20 'vec3']: r#9
[#20 'vec4']: r#9
[#20 'while']: r#9
[#20 '{']: r#9
[#20 '}']: r#9
[#20 '~']: r#9
[#20 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#9
[#20 /0[xX][0-9a-fA-F]+[iu]?/]: r#9
[#20 EndOfText]: r#9
[#21 'var']: s#164
[#22 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#23 'override']: s#160
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#26 'fn']: s#157
[#27 '!']: s#71
[#27 '&']: s#74
[#27 '(']: s#116
[#27 '*']: s#73
[#27 '-']: s#70
[#27 'array']: s#84
[#27 'atomic']: s#96
[#27 'bitcast']: s#79
[#27 'bool']: s#89
[#27 'f16']: s#118
[#27 'f32']: s#117
[#27 'false']: s#115
[#27 'i32']: s#119
[#27 'mat2x2']: s#101
[#27 'mat2x3']: s#102
[#27 'mat2x4']: s#103
[#27 'mat3x2']: s#104
[#27 'mat3x3']: s#105
[#27 'mat3x4']: s#106
[#27 'mat4x2']: s#107
[#27 'mat4x3']: s#108
[#27 'mat4x4']: s#109
[#27 'ptr']: s#121
[#27 'sampler']: s#138
[#27 'sampler_comparison']: s#139
[#27 'texture_1d']: s#145
[#27 'texture_2d']: s#146
[#27 'texture_2d_array']: s#147
[#27 'texture_3d']: s#148
[#27 'texture_cube']: s#149
[#27 'texture_cube_array']: s#150
[#27 'texture_depth_2d']: s#140
[#27 'texture_depth_2d_array']: s#141
[#27 'texture_depth_cube']: s#142
[#27 'texture_depth_cube_array']: s#143
[#27 'texture_depth_multisampled_2d']: s#144
[#27 'texture_multisampled_2d']: s#151
[#27 'texture_storage_1d']: s#152
[#27 'texture_storage_2d']: s#153
[#27 'texture_storage_2d_array']: s#154
[#27 'texture_storage_3d']: s#155
[#27 'true']: s#114
[#27 'u32']: s#120
[#27 'vec2']: s#98
[#27 'vec3']: s#99
[#27 'vec4']: s#100
[#27 '~']: s#72
[#27 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#27 /0[fh]/]: s#130
[#27 /0[iu]?/]: s#127
[#27 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#27 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#27 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#27 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#27 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#27 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#27 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#27 /[1-9][0-9]*[fh]/]: s#131
[#27 /[1-9][0-9]*[iu]?/]: s#128
[#28 'var']: r#10
[#29 'override']: r#11
[#30 'fn']: r#12
[#31 '@']: s#33
[#32 'align']: s#34
[#32 'binding']: s#35
[#32 'builtin']: s#36
[#32 'compute']: s#47
[#32 'const']: s#37
[#32 'fragment']: s#46
[#32 'group']: s#38
[#32 'id']: s#39
[#32 'interpolate']: s#40
[#32 'invariant']: s#41
[#32 'location']: s#42
[#32 'size']: s#43
[#32 'vertex']: s#45
[#32 'workgroup_size']: s#44
[#33 'const']: r#13
[#34 '(']: s#116
[#35 '(']: s#116
[#36 '(']: s#116
[#37 '@']: r#14
[#37 'array']: r#14
[#37 'atomic']: r#14
[#37 'bool']: r#14
[#37 'f16']: r#14
[#37 'f32']: r#14
[#37 'fn']: r#14
[#37 'i32']: r#14
[#37 'mat2x2']: r#14
[#37 'mat2x3']: r#14
[#37 'mat2x4']: r#14
[#37 'mat3x2']: r#14
[#37 'mat3x3']: r#14
[#37 'mat3x4']: r#14
[#37 'mat4x2']: r#14
[#37 'mat4x3']: r#14
[#37 'mat4x4']: r#14
[#37 'override']: r#14
[#37 'ptr']: r#14
[#37 'sampler']: r#14
[#37 'sampler_comparison']: r#14
[#37 'texture_1d']: r#14
[#37 'texture_2d']: r#14
[#37 'texture_2d_array']: r#14
[#37 'texture_3d']: r#14
[#37 'texture_cube']: r#14
[#37 'texture_cube_array']: r#14
[#37 'texture_depth_2d']: r#14
[#37 'texture_depth_2d_array']: r#14
[#37 'texture_depth_cube']: r#14
[#37 'texture_depth_cube_array']: r#14
[#37 'texture_depth_multisampled_2d']: r#14
[#37 'texture_multisampled_2d']: r#14
[#37 'texture_storage_1d']: r#14
[#37 'texture_storage_2d']: r#14
[#37 'texture_storage_2d_array']: r#14
[#37 'texture_storage_3d']: r#14
[#37 'u32']: r#14
[#37 'var']: r#14
[#37 'vec2']: r#14
[#37 'vec3']: r#14
[#37 'vec4']: r#14
[#38 '(']: s#116
[#39 '(']: s#116
[#40 '(']: s#116
[#41 '@']: r#15
[#41 'array']: r#15
[#41 'atomic']: r#15
[#41 'bool']: r#15
[#41 'f16']: r#15
[#41 'f32']: r#15
[#41 'fn']: r#15
[#41 'i32']: r#15
[#41 'mat2x2']: r#15
[#41 'mat2x3']: r#15
[#41 'mat2x4']: r#15
[#41 'mat3x2']: r#15
[#41 'mat3x3']: r#15
[#41 'mat3x4']: r#15
[#41 'mat4x2']: r#15
[#41 'mat4x3']: r#15
[#41 'mat4x4']: r#15
[#41 'override']: r#15
[#41 'ptr']: r#15
[#41 'sampler']: r#15
[#41 'sampler_comparison']: r#15
[#41 'texture_1d']: r#15
[#41 'texture_2d']: r#15
[#41 'texture_2d_array']: r#15
[#41 'texture_3d']: r#15
[#41 'texture_cube']: r#15
[#41 'texture_cube_array']: r#15
[#41 'texture_depth_2d']: r#15
[#41 'texture_depth_2d_array']: r#15
[#41 'texture_depth_cube']: r#15
[#41 'texture_depth_cube_array']: r#15
[#41 'texture_depth_multisampled_2d']: r#15
[#41 'texture_multisampled_2d']: r#15
[#41 'texture_storage_1d']: r#15
[#41 'texture_storage_2d']: r#15
[#41 'texture_storage_2d_array']: r#15
[#41 'texture_storage_3d']: r#15
[#41 'u32']: r#15
[#41 'var']: r#15
[#41 'vec2']: r#15
[#41 'vec3']: r#15
[#41 'vec4']: r#15
[#42 '(']: s#116
[#43 '(']: s#116
[#44 '(']: s#116
[#45 '@']: r#16
[#45 'array']: r#16
[#45 'atomic']: r#16
[#45 'bool']: r#16
[#45 'f16']: r#16
[#45 'f32']: r#16
[#45 'fn']: r#16
[#45 'i32']: r#16
[#45 'mat2x2']: r#16
[#45 'mat2x3']: r#16
[#45 'mat2x4']: r#16
[#45 'mat3x2']: r#16
[#45 'mat3x3']: r#16
[#45 'mat3x4']: r#16
[#45 'mat4x2']: r#16
[#45 'mat4x3']: r#16
[#45 'mat4x4']: r#16
[#45 'override']: r#16
[#45 'ptr']: r#16
[#45 'sampler']: r#16
[#45 'sampler_comparison']: r#16
[#45 'texture_1d']: r#16
[#45 'texture_2d']: r#16
[#45 'texture_2d_array']: r#16
[#45 'texture_3d']: r#16
[#45 'texture_cube']: r#16
[#45 'texture_cube_array']: r#16
[#45 'texture_depth_2d']: r#16
[#45 'texture_depth_2d_array']: r#16
[#45 'texture_depth_cube']: r#16
[#45 'texture_depth_cube_array']: r#16
[#45 'texture_depth_multisampled_2d']: r#16
[#45 'texture_multisampled_2d']: r#16
[#45 'texture_storage_1d']: r#16
[#45 'texture_storage_2d']: r#16
[#45 'texture_storage_2d_array']: r#16
[#45 'texture_storage_3d']: r#16
[#45 'u32']: r#16
[#45 'var']: r#16
[#45 'vec2']: r#16
[#45 'vec3']: r#16
[#45 'vec4']: r#16
[#46 '@']: r#17
[#46 'array']: r#17
[#46 'atomic']: r#17
[#46 'bool']: r#17
[#46 'f16']: r#17
[#46 'f32']: r#17
[#46 'fn']: r#17
[#46 'i32']: r#17
[#46 'mat2x2']: r#17
[#46 'mat2x3']: r#17
[#46 'mat2x4']: r#17
[#46 'mat3x2']: r#17
[#46 'mat3x3']: r#17
[#46 'mat3x4']: r#17
[#46 'mat4x2']: r#17
[#46 'mat4x3']: r#17
[#46 'mat4x4']: r#17
[#46 'override']: r#17
[#46 'ptr']: r#17
[#46 'sampler']: r#17
[#46 'sampler_comparison']: r#17
[#46 'texture_1d']: r#17
[#46 'texture_2d']: r#17
[#46 'texture_2d_array']: r#17
[#46 'texture_3d']: r#17
[#46 'texture_cube']: r#17
[#46 'texture_cube_array']: r#17
[#46 'texture_depth_2d']: r#17
[#46 'texture_depth_2d_array']: r#17
[#46 'texture_depth_cube']: r#17
[#46 'texture_depth_cube_array']: r#17
[#46 'texture_depth_multisampled_2d']: r#17
[#46 'texture_multisampled_2d']: r#17
[#46 'texture_storage_1d']: r#17
[#46 'texture_storage_2d']: r#17
[#46 'texture_storage_2d_array']: r#17
[#46 'texture_storage_3d']: r#17
[#46 'u32']: r#17
[#46 'var']: r#17
[#46 'vec2']: r#17
[#46 'vec3']: r#17
[#46 'vec4']: r#17
[#47 '@']: r#18
[#47 'array']: r#18
[#47 'atomic']: r#18
[#47 'bool']: r#18
[#47 'f16']: r#18
[#47 'f32']: r#18
[#47 'fn']: r#18
[#47 'i32']: r#18
[#47 'mat2x2']: r#18
[#47 'mat2x3']: r#18
[#47 'mat2x4']: r#18
[#47 'mat3x2']: r#18
[#47 'mat3x3']: r#18
[#47 'mat3x4']: r#18
[#47 'mat4x2']: r#18
[#47 'mat4x3']: r#18
[#47 'mat4x4']: r#18
[#47 'override']: r#18
[#47 'ptr']: r#18
[#47 'sampler']: r#18
[#47 'sampler_comparison']: r#18
[#47 'texture_1d']: r#18
[#47 'texture_2d']: r#18
[#47 'texture_2d_array']: r#18
[#47 'texture_3d']: r#18
[#47 'texture_cube']: r#18
[#47 'texture_cube_array']: r#18
[#47 'texture_depth_2d']: r#18
[#47 'texture_depth_2d_array']: r#18
[#47 'texture_depth_cube']: r#18
[#47 'texture_depth_cube_array']: r#18
[#47 'texture_depth_multisampled_2d']: r#18
[#47 'texture_multisampled_2d']: r#18
[#47 'texture_storage_1d']: r#18
[#47 'texture_storage_2d']: r#18
[#47 'texture_storage_2d_array']: r#18
[#47 'texture_storage_3d']: r#18
[#47 'u32']: r#18
[#47 'var']: r#18
[#47 'vec2']: r#18
[#47 'vec3']: r#18
[#47 'vec4']: r#18
[#48 'var']: r#19
[#49 'override']: r#20
[#50 'fn']: r#21
[#51 ';']: r#22
[#52 '&&']: r#25
[#52 ')']: r#23
[#52 ',']: r#23
[#52 ':']: r#23
[#52 ';']: r#23
[#52 ']']: r#23
[#52 '{']: r#23
[#52 '||']: r#24
[#53 '||']: s#246
[#54 '&&']: s#244
[#55 ')']: r#26
[#55 ',']: r#26
[#55 ':']: r#26
[#55 ';']: r#26
[#55 ']']: r#26
[#55 '{']: r#26
[#56 '!=']: s#242
[#56 '&&']: r#27
[#56 ')']: r#27
[#56 ',']: r#27
[#56 ':']: r#27
[#56 ';']: r#27
[#56 '<']: s#174
[#56 '<=']: s#239
[#56 '==']: s#241
[#56 '>']: s#238
[#56 '>=']: s#240
[#56 ']']: r#27
[#56 '{']: r#27
[#56 '||']: r#27
[#57 '&']: s#74
[#58 '|']: s#230
[#59 '^']: s#228
[#60 '!=']: r#28
[#60 '&&']: r#28
[#60 ')']: r#28
[#60 '+']: s#226
[#60 ',']: r#28
[#60 '-']: s#70
[#60 ':']: r#28
[#60 ';']: r#28
[#60 '<']: r#28
[#60 '<=']: r#28
[#60 '==']: r#28
[#60 '>']: r#28
[#60 '>=']: r#28
[#60 ']']: r#28
[#60 '{']: r#28
[#60 '||']: r#28
[#61 '!=']: r#32
[#61 '%']: r#32
[#61 '&&']: r#32
[#61 '&']: r#29
[#61 ')']: r#32
[#61 '*']: r#32
[#61 '+']: r#32
[#61 ',']: r#32
[#61 '-']: r#32
[#61 '/']: r#32
[#61 ':']: r#32
[#61 ';']: r#32
[#61 '<']: r#32
[#61 '<<']: s#221
[#61 '<=']: r#32
[#61 '==']: r#32
[#61 '>']: r#32
[#61 '>=']: r#32
[#61 '>>']: s#222
[#61 ']']: r#32
[#61 '^']: r#31
[#61 '{']: r#32
[#61 '|']: r#30
[#61 '||']: r#32
[#62 '!=']: r#33
[#62 '%']: s#218
[#62 '&&']: r#33
[#62 ')']: r#33
[#62 '*']: s#73
[#62 '+']: r#33
[#62 ',']: r#33
[#62 '-']: r#33
[#62 '/']: s#217
[#62 ':']: r#33
[#62 ';']: r#33
[#62 '<']: r#33
[#62 '<=']: r#33
[#62 '==']: r#33
[#62 '>']: r#33
[#62 '>=']: r#33
[#62 ']']: r#33
[#62 '{']: r#33
[#62 '||']: r#33
[#63 '!=']: r#34
[#63 '%']: r#34
[#63 '&&']: r#34
[#63 '&']: r#34
[#63 ')']: r#34
[#63 '*']: r#34
[#63 '+']: r#34
[#63 ',']: r#34
[#63 '-']: r#34
[#63 '/']: r#34
[#63 ':']: r#34
[#63 ';']: r#34
[#63 '<']: r#34
[#63 '<<']: r#34
[#63 '<=']: r#34
[#63 '==']: r#34
[#63 '>']: r#34
[#63 '>=']: r#34
[#63 '>>']: r#34
[#63 ']']: r#34
[#63 '^']: r#34
[#63 '{']: r#34
[#63 '|']: r#34
[#63 '||']: r#34
[#64 '!']: s#71
[#64 '&']: s#74
[#64 '(']: s#116
[#64 '*']: s#73
[#64 '-']: s#70
[#64 'array']: s#84
[#64 'atomic']: s#96
[#64 'bitcast']: s#79
[#64 'bool']: s#89
[#64 'f16']: s#118
[#64 'f32']: s#117
[#64 'false']: s#115
[#64 'i32']: s#119
[#64 'mat2x2']: s#101
[#64 'mat2x3']: s#102
[#64 'mat2x4']: s#103
[#64 'mat3x2']: s#104
[#64 'mat3x3']: s#105
[#64 'mat3x4']: s#106
[#64 'mat4x2']: s#107
[#64 'mat4x3']: s#108
[#64 'mat4x4']: s#109
[#64 'ptr']: s#121
[#64 'sampler']: s#138
[#64 'sampler_comparison']: s#139
[#64 'texture_1d']: s#145
[#64 'texture_2d']: s#146
[#64 'texture_2d_array']: s#147
[#64 'texture_3d']: s#148
[#64 'texture_cube']: s#149
[#64 'texture_cube_array']: s#150
[#64 'texture_depth_2d']: s#140
[#64 'texture_depth_2d_array']: s#141
[#64 'texture_depth_cube']: s#142
[#64 'texture_depth_cube_array']: s#143
[#64 'texture_depth_multisampled_2d']: s#144
[#64 'texture_multisampled_2d']: s#151
[#64 'texture_storage_1d']: s#152
[#64 'texture_storage_2d']: s#153
[#64 'texture_storage_2d_array']: s#154
[#64 'texture_storage_3d']: s#155
[#64 'true']: s#114
[#64 'u32']: s#120
[#64 'vec2']: s#98
[#64 'vec3']: s#99
[#64 'vec4']: s#100
[#64 '~']: s#72
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#64 /0[fh]/]: s#130
[#64 /0[iu]?/]: s#127
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#64 /[1-9][0-9]*[fh]/]: s#131
[#64 /[1-9][0-9]*[iu]?/]: s#128
[#65 '!']: s#71
[#65 '&']: s#74
[#65 '(']: s#116
[#65 '*']: s#73
[#65 '-']: s#70
[#65 'array']: s#84
[#65 'atomic']: s#96
[#65 'bitcast']: s#79
[#65 'bool']: s#89
[#65 'f16']: s#118
[#65 'f32']: s#117
[#65 'false']: s#115
[#65 'i32']: s#119
[#65 'mat2x2']: s#101
[#65 'mat2x3']: s#102
[#65 'mat2x4']: s#103
[#65 'mat3x2']: s#104
[#65 'mat3x3']: s#105
[#65 'mat3x4']: s#106
[#65 'mat4x2']: s#107
[#65 'mat4x3']: s#108
[#65 'mat4x4']: s#109
[#65 'ptr']: s#121
[#65 'sampler']: s#138
[#65 'sampler_comparison']: s#139
[#65 'texture_1d']: s#145
[#65 'texture_2d']: s#146
[#65 'texture_2d_array']: s#147
[#65 'texture_3d']: s#148
[#65 'texture_cube']: s#149
[#65 'texture_cube_array']: s#150
[#65 'texture_depth_2d']: s#140
[#65 'texture_depth_2d_array']: s#141
[#65 'texture_depth_cube']: s#142
[#65 'texture_depth_cube_array']: s#143
[#65 'texture_depth_multisampled_2d']: s#144
[#65 'texture_multisampled_2d']: s#151
[#65 'texture_storage_1d']: s#152
[#65 'texture_storage_2d']: s#153
[#65 'texture_storage_2d_array']: s#154
[#65 'texture_storage_3d']: s#155
[#65 'true']: s#114
[#65 'u32']: s#120
[#65 'vec2']: s#98
[#65 'vec3']: s#99
[#65 'vec4']: s#100
[#65 '~']: s#72
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#65 /0[fh]/]: s#130
[#65 /0[iu]?/]: s#127
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#65 /[1-9][0-9]*[fh]/]: s#131
[#65 /[1-9][0-9]*[iu]?/]: s#128
[#66 '!']: s#71
[#66 '&']: s#74
[#66 '(']: s#116
[#66 '*']: s#73
[#66 '-']: s#70
[#66 'array']: s#84
[#66 'atomic']: s#96
[#66 'bitcast']: s#79
[#66 'bool']: s#89
[#66 'f16']: s#118
[#66 'f32']: s#117
[#66 'false']: s#115
[#66 'i32']: s#119
[#66 'mat2x2']: s#101
[#66 'mat2x3']: s#102
[#66 'mat2x4']: s#103
[#66 'mat3x2']: s#104
[#66 'mat3x3']: s#105
[#66 'mat3x4']: s#106
[#66 'mat4x2']: s#107
[#66 'mat4x3']: s#108
[#66 'mat4x4']: s#109
[#66 'ptr']: s#121
[#66 'sampler']: s#138
[#66 'sampler_comparison']: s#139
[#66 'texture_1d']: s#145
[#66 'texture_2d']: s#146
[#66 'texture_2d_array']: s#147
[#66 'texture_3d']: s#148
[#66 'texture_cube']: s#149
[#66 'texture_cube_array']: s#150
[#66 'texture_depth_2d']: s#140
[#66 'texture_depth_2d_array']: s#141
[#66 'texture_depth_cube']: s#142
[#66 'texture_depth_cube_array']: s#143
[#66 'texture_depth_multisampled_2d']: s#144
[#66 'texture_multisampled_2d']: s#151
[#66 'texture_storage_1d']: s#152
[#66 'texture_storage_2d']: s#153
[#66 'texture_storage_2d_array']: s#154
[#66 'texture_storage_3d']: s#155
[#66 'true']: s#114
[#66 'u32']: s#120
[#66 'vec2']: s#98
[#66 'vec3']: s#99
[#66 'vec4']: s#100
[#66 '~']: s#72
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#66 /0[fh]/]: s#130
[#66 /0[iu]?/]: s#127
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#66 /[1-9][0-9]*[fh]/]: s#131
[#66 /[1-9][0-9]*[iu]?/]: s#128
[#67 '!']: s#71
[#67 '&']: s#74
[#67 '(']: s#116
[#67 '*']: s#73
[#67 '-']: s#70
[#67 'array']: s#84
[#67 'atomic']: s#96
[#67 'bitcast']: s#79
[#67 'bool']: s#89
[#67 'f16']: s#118
[#67 'f32']: s#117
[#67 'false']: s#115
[#67 'i32']: s#119
[#67 'mat2x2']: s#101
[#67 'mat2x3']: s#102
[#67 'mat2x4']: s#103
[#67 'mat3x2']: s#104
[#67 'mat3x3']: s#105
[#67 'mat3x4']: s#106
[#67 'mat4x2']: s#107
[#67 'mat4x3']: s#108
[#67 'mat4x4']: s#109
[#67 'ptr']: s#121
[#67 'sampler']: s#138
[#67 'sampler_comparison']: s#139
[#67 'texture_1d']: s#145
[#67 'texture_2d']: s#146
[#67 'texture_2d_array']: s#147
[#67 'texture_3d']: s#148
[#67 'texture_cube']: s#149
[#67 'texture_cube_array']: s#150
[#67 'texture_depth_2d']: s#140
[#67 'texture_depth_2d_array']: s#141
[#67 'texture_depth_cube']: s#142
[#67 'texture_depth_cube_array']: s#143
[#67 'texture_depth_multisampled_2d']: s#144
[#67 'texture_multisampled_2d']: s#151
[#67 'texture_storage_1d']: s#152
[#67 'texture_storage_2d']: s#153
[#67 'texture_storage_2d_array']: s#154
[#67 'texture_storage_3d']: s#155
[#67 'true']: s#114
[#67 'u32']: s#120
[#67 'vec2']: s#98
[#67 'vec3']: s#99
[#67 'vec4']: s#100
[#67 '~']: s#72
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#67 /0[fh]/]: s#130
[#67 /0[iu]?/]: s#127
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#67 /[1-9][0-9]*[fh]/]: s#131
[#67 /[1-9][0-9]*[iu]?/]: s#128
[#68 '!']: s#71
[#68 '&']: s#74
[#68 '(']: s#116
[#68 '*']: s#73
[#68 '-']: s#70
[#68 'array']: s#84
[#68 'atomic']: s#96
[#68 'bitcast']: s#79
[#68 'bool']: s#89
[#68 'f16']: s#118
[#68 'f32']: s#117
[#68 'false']: s#115
[#68 'i32']: s#119
[#68 'mat2x2']: s#101
[#68 'mat2x3']: s#102
[#68 'mat2x4']: s#103
[#68 'mat3x2']: s#104
[#68 'mat3x3']: s#105
[#68 'mat3x4']: s#106
[#68 'mat4x2']: s#107
[#68 'mat4x3']: s#108
[#68 'mat4x4']: s#109
[#68 'ptr']: s#121
[#68 'sampler']: s#138
[#68 'sampler_comparison']: s#139
[#68 'texture_1d']: s#145
[#68 'texture_2d']: s#146
[#68 'texture_2d_array']: s#147
[#68 'texture_3d']: s#148
[#68 'texture_cube']: s#149
[#68 'texture_cube_array']: s#150
[#68 'texture_depth_2d']: s#140
[#68 'texture_depth_2d_array']: s#141
[#68 'texture_depth_cube']: s#142
[#68 'texture_depth_cube_array']: s#143
[#68 'texture_depth_multisampled_2d']: s#144
[#68 'texture_multisampled_2d']: s#151
[#68 'texture_storage_1d']: s#152
[#68 'texture_storage_2d']: s#153
[#68 'texture_storage_2d_array']: s#154
[#68 'texture_storage_3d']: s#155
[#68 'true']: s#114
[#68 'u32']: s#120
[#68 'vec2']: s#98
[#68 'vec3']: s#99
[#68 'vec4']: s#100
[#68 '~']: s#72
[#68 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#68 /0[fh]/]: s#130
[#68 /0[iu]?/]: s#127
[#68 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#68 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#68 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#68 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#68 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#68 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#68 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#68 /[1-9][0-9]*[fh]/]: s#131
[#68 /[1-9][0-9]*[iu]?/]: s#128
[#69 '.']: s#207
[#69 '[']: s#206
[#70 '!']: r#35
[#70 '&']: r#35
[#70 '(']: r#35
[#70 '*']: r#35
[#70 '-']: r#35
[#70 'array']: r#35
[#70 'atomic']: r#35
[#70 'bitcast']: r#35
[#70 'bool']: r#35
[#70 'f16']: r#35
[#70 'f32']: r#35
[#70 'false']: r#35
[#70 'i32']: r#35
[#70 'mat2x2']: r#35
[#70 'mat2x3']: r#35
[#70 'mat2x4']: r#35
[#70 'mat3x2']: r#35
[#70 'mat3x3']: r#35
[#70 'mat3x4']: r#35
[#70 'mat4x2']: r#35
[#70 'mat4x3']: r#35
[#70 'mat4x4']: r#35
[#70 'ptr']: r#35
[#70 'sampler']: r#35
[#70 'sampler_comparison']: r#35
[#70 'texture_1d']: r#35
[#70 'texture_2d']: r#35
[#70 'texture_2d_array']: r#35
[#70 'texture_3d']: r#35
[#70 'texture_cube']: r#35
[#70 'texture_cube_array']: r#35
[#70 'texture_depth_2d']: r#35
[#70 'texture_depth_2d_array']: r#35
[#70 'texture_depth_cube']: r#35
[#70 'texture_depth_cube_array']: r#35
[#70 'texture_depth_multisampled_2d']: r#35
[#70 'texture_multisampled_2d']: r#35
[#70 'texture_storage_1d']: r#35
[#70 'texture_storage_2d']: r#35
[#70 'texture_storage_2d_array']: r#35
[#70 'texture_storage_3d']: r#35
[#70 'true']: r#35
[#70 'u32']: r#35
[#70 'vec2']: r#35
[#70 'vec3']: r#35
[#70 'vec4']: r#35
[#70 '~']: r#35
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: r#35
[#71 '!']: r#36
[#71 '&']: r#36
[#71 '(']: r#36
[#71 '*']: r#36
[#71 '-']: r#36
[#71 'array']: r#36
[#71 'atomic']: r#36
[#71 'bitcast']: r#36
[#71 'bool']: r#36
[#71 'f16']: r#36
[#71 'f32']: r#36
[#71 'false']: r#36
[#71 'i32']: r#36
[#71 'mat2x2']: r#36
[#71 'mat2x3']: r#36
[#71 'mat2x4']: r#36
[#71 'mat3x2']: r#36
[#71 'mat3x3']: r#36
[#71 'mat3x4']: r#36
[#71 'mat4x2']: r#36
[#71 'mat4x3']: r#36
[#71 'mat4x4']: r#36
[#71 'ptr']: r#36
[#71 'sampler']: r#36
[#71 'sampler_comparison']: r#36
[#71 'texture_1d']: r#36
[#71 'texture_2d']: r#36
[#71 'texture_2d_array']: r#36
[#71 'texture_3d']: r#36
[#71 'texture_cube']: r#36
[#71 'texture_cube_array']: r#36
[#71 'texture_depth_2d']: r#36
[#71 'texture_depth_2d_array']: r#36
[#71 'texture_depth_cube']: r#36
[#71 'texture_depth_cube_array']: r#36
[#71 'texture_depth_multisampled_2d']: r#36
[#71 'texture_multisampled_2d']: r#36
[#71 'texture_storage_1d']: r#36
[#71 'texture_storage_2d']: r#36
[#71 'texture_storage_2d_array']: r#36
[#71 'texture_storage_3d']: r#36
[#71 'true']: r#36
[#71 'u32']: r#36
[#71 'vec2']: r#36
[#71 'vec3']: r#36
[#71 'vec4']: r#36
[#71 '~']: r#36
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: r#36
[#72 '!']: r#37
[#72 '&']: r#37
[#72 '(']: r#37
[#72 '*']: r#37
[#72 '-']: r#37
[#72 'array']: r#37
[#72 'atomic']: r#37
[#72 'bitcast']: r#37
[#72 'bool']: r#37
[#72 'f16']: r#37
[#72 'f32']: r#37
[#72 'false']: r#37
[#72 'i32']: r#37
[#72 'mat2x2']: r#37
[#72 'mat2x3']: r#37
[#72 'mat2x4']: r#37
[#72 'mat3x2']: r#37
[#72 'mat3x3']: r#37
[#72 'mat3x4']: r#37
[#72 'mat4x2']: r#37
[#72 'mat4x3']: r#37
[#72 'mat4x4']: r#37
[#72 'ptr']: r#37
[#72 'sampler']: r#37
[#72 'sampler_comparison']: r#37
[#72 'texture_1d']: r#37
[#72 'texture_2d']: r#37
[#72 'texture_2d_array']: r#37
[#72 'texture_3d']: r#37
[#72 'texture_cube']: r#37
[#72 'texture_cube_array']: r#37
[#72 'texture_depth_2d']: r#37
[#72 'texture_depth_2d_array']: r#37
[#72 'texture_depth_cube']: r#37
[#72 'texture_depth_cube_array']: r#37
[#72 'texture_depth_multisampled_2d']: r#37
[#72 'texture_multisampled_2d']: r#37
[#72 'texture_storage_1d']: r#37
[#72 'texture_storage_2d']: r#37
[#72 'texture_storage_2d_array']: r#37
[#72 'texture_storage_3d']: r#37
[#72 'true']: r#37
[#72 'u32']: r#37
[#72 'vec2']: r#37
[#72 'vec3']: r#37
[#72 'vec4']: r#37
[#72 '~']: r#37
[#72 /0[xX][0-9a-fA-F]+[iu]?/]: r#37
[#73 '!']: r#38
[#73 '&']: r#38
[#73 '(']: r#38
[#73 '*']: r#38
[#73 '-']: r#38
[#73 'array']: r#38
[#73 'atomic']: r#38
[#73 'bitcast']: r#38
[#73 'bool']: r#38
[#73 'f16']: r#38
[#73 'f32']: r#38
[#73 'false']: r#38
[#73 'i32']: r#38
[#73 'mat2x2']: r#38
[#73 'mat2x3']: r#38
[#73 'mat2x4']: r#38
[#73 'mat3x2']: r#38
[#73 'mat3x3']: r#38
[#73 'mat3x4']: r#38
[#73 'mat4x2']: r#38
[#73 'mat4x3']: r#38
[#73 'mat4x4']: r#38
[#73 'ptr']: r#38
[#73 'sampler']: r#38
[#73 'sampler_comparison']: r#38
[#73 'texture_1d']: r#38
[#73 'texture_2d']: r#38
[#73 'texture_2d_array']: r#38
[#73 'texture_3d']: r#38
[#73 'texture_cube']: r#38
[#73 'texture_cube_array']: r#38
[#73 'texture_depth_2d']: r#38
[#73 'texture_depth_2d_array']: r#38
[#73 'texture_depth_cube']: r#38
[#73 'texture_depth_cube_array']: r#38
[#73 'texture_depth_multisampled_2d']: r#38
[#73 'texture_multisampled_2d']: r#38
[#73 'texture_storage_1d']: r#38
[#73 'texture_storage_2d']: r#38
[#73 'texture_storage_2d_array']: r#38
[#73 'texture_storage_3d']: r#38
[#73 'true']: r#38
[#73 'u32']: r#38
[#73 'vec2']: r#38
[#73 'vec3']: r#38
[#73 'vec4']: r#38
[#73 '~']: r#38
[#73 /0[xX][0-9a-fA-F]+[iu]?/]: r#38
[#74 '!']: r#39
[#74 '&']: r#39
[#74 '(']: r#39
[#74 '*']: r#39
[#74 '-']: r#39
[#74 'array']: r#39
[#74 'atomic']: r#39
[#74 'bitcast']: r#39
[#74 'bool']: r#39
[#74 'f16']: r#39
[#74 'f32']: r#39
[#74 'false']: r#39
[#74 'i32']: r#39
[#74 'mat2x2']: r#39
[#74 'mat2x3']: r#39
[#74 'mat2x4']: r#39
[#74 'mat3x2']: r#39
[#74 'mat3x3']: r#39
[#74 'mat3x4']: r#39
[#74 'mat4x2']: r#39
[#74 'mat4x3']: r#39
[#74 'mat4x4']: r#39
[#74 'ptr']: r#39
[#74 'sampler']: r#39
[#74 'sampler_comparison']: r#39
[#74 'texture_1d']: r#39
[#74 'texture_2d']: r#39
[#74 'texture_2d_array']: r#39
[#74 'texture_3d']: r#39
[#74 'texture_cube']: r#39
[#74 'texture_cube_array']: r#39
[#74 'texture_depth_2d']: r#39
[#74 'texture_depth_2d_array']: r#39
[#74 'texture_depth_cube']: r#39
[#74 'texture_depth_cube_array']: r#39
[#74 'texture_depth_multisampled_2d']: r#39
[#74 'texture_multisampled_2d']: r#39
[#74 'texture_storage_1d']: r#39
[#74 'texture_storage_2d']: r#39
[#74 'texture_storage_2d_array']: r#39
[#74 'texture_storage_3d']: r#39
[#74 'true']: r#39
[#74 'u32']: r#39
[#74 'vec2']: r#39
[#74 'vec3']: r#39
[#74 'vec4']: r#39
[#74 '~']: r#39
[#74 /0[xX][0-9a-fA-F]+[iu]?/]: r#39
[#75 '!=']: r#40
[#75 '%']: r#40
[#75 '&&']: r#40
[#75 '&']: r#40
[#75 '(']: r#41
[#75 ')']: r#40
[#75 '*']: r#40
[#75 '+']: r#40
[#75 ',']: r#40
[#75 '-']: r#40
[#75 '.']: r#40
[#75 '/']: r#40
[#75 ':']: r#40
[#75 ';']: r#40
[#75 '<']: r#40
[#75 '<<']: r#40
[#75 '<=']: r#40
[#75 '==']: r#40
[#75 '>']: r#40
[#75 '>=']: r#40
[#75 '>>']: r#40
[#75 '[']: r#40
[#75 ']']: r#40
[#75 '^']: r#40
[#75 '{']: r#40
[#75 '|']: r#40
[#75 '||']: r#40
[#76 '(']: s#116
[#77 '!=']: r#42
[#77 '%']: r#42
[#77 '&&']: r#42
[#77 '&']: r#42
[#77 ')']: r#42
[#77 '*']: r#42
[#77 '+']: r#42
[#77 ',']: r#42
[#77 '-']: r#42
[#77 '.']: r#42
[#77 '/']: r#42
[#77 ':']: r#42
[#77 ';']: r#42
[#77 '<']: r#42
[#77 '<<']: r#42
[#77 '<=']: r#42
[#77 '==']: r#42
[#77 '>']: r#42
[#77 '>=']: r#42
[#77 '>>']: r#42
[#77 '[']: r#42
[#77 ']']: r#42
[#77 '^']: r#42
[#77 '{']: r#42
[#77 '|']: r#42
[#77 '||']: r#42
[#78 '!=']: r#43
[#78 '%']: r#43
[#78 '&&']: r#43
[#78 '&']: r#43
[#78 ')']: r#43
[#78 '*']: r#43
[#78 '+']: r#43
[#78 ',']: r#43
[#78 '-']: r#43
[#78 '.']: r#43
[#78 '/']: r#43
[#78 ':']: r#43
[#78 ';']: r#43
[#78 '<']: r#43
[#78 '<<']: r#43
[#78 '<=']: r#43
[#78 '==']: r#43
[#78 '>']: r#43
[#78 '>=']: r#43
[#78 '>>']: r#43
[#78 '[']: r#43
[#78 ']']: r#43
[#78 '^']: r#43
[#78 '{']: r#43
[#78 '|']: r#43
[#78 '||']: r#43
[#79 '<']: s#174
[#80 '!=']: r#44
[#80 '%']: r#44
[#80 '%=']: r#44
[#80 '&&']: r#44
[#80 '&']: r#44
[#80 '&=']: r#44
[#80 '(']: r#44
[#80 ')']: r#44
[#80 '*']: r#44
[#80 '*=']: r#44
[#80 '+']: r#44
[#80 '++']: r#44
[#80 '+=']: r#44
[#80 ',']: r#44
[#80 '-']: r#44
[#80 '--']: r#44
[#80 '-=']: r#44
[#80 '.']: r#44
[#80 '/']: r#44
[#80 '/=']: r#44
[#80 ':']: r#44
[#80 ';']: r#44
[#80 '<']: r#44
[#80 '<<']: r#44
[#80 '<<=']: r#44
[#80 '<=']: r#44
[#80 '=']: r#44
[#80 '==']: r#44
[#80 '>']: r#44
[#80 '>=']: r#44
[#80 '>>']: r#44
[#80 '>>=']: r#44
[#80 '[']: r#44
[#80 ']']: r#44
[#80 '^']: r#44
[#80 '^=']: r#44
[#80 '{']: r#44
[#80 '|']: r#44
[#80 '|=']: r#44
[#80 '||']: r#44
[#80 '}']: r#44
[#81 '(']: r#45
[#82 '(']: r#46
[#82 '<']: s#174
[#83 '(']: r#47
[#83 '<']: s#174
[#84 '(']: r#48
[#84 '<']: s#174
[#85 '!=']: r#49
[#85 '%']: r#49
[#85 '&&']: r#49
[#85 '&']: r#49
[#85 ')']: r#49
[#85 '*']: r#49
[#85 '+']: r#49
[#85 ',']: r#49
[#85 '-']: r#49
[#85 '.']: r#49
[#85 '/']: r#49
[#85 ':']: r#49
[#85 ';']: r#49
[#85 '<']: r#49
[#85 '<<']: r#49
[#85 '<=']: r#49
[#85 '==']: r#49
[#85 '>']: r#49
[#85 '>=']: r#49
[#85 '>>']: r#49
[#85 '[']: r#49
[#85 ']']: r#49
[#85 '^']: r#49
[#85 '{']: r#49
[#85 '|']: r#49
[#85 '||']: r#49
[#86 '!=']: r#50
[#86 '%']: r#50
[#86 '&&']: r#50
[#86 '&']: r#50
[#86 ')']: r#50
[#86 '*']: r#50
[#86 '+']: r#50
[#86 ',']: r#50
[#86 '-']: r#50
[#86 '.']: r#50
[#86 '/']: r#50
[#86 ':']: r#50
[#86 ';']: r#50
[#86 '<']: r#50
[#86 '<<']: r#50
[#86 '<=']: r#50
[#86 '==']: r#50
[#86 '>']: r#50
[#86 '>=']: r#50
[#86 '>>']: r#50
[#86 '[']: r#50
[#86 ']']: r#50
[#86 '^']: r#50
[#86 '{']: r#50
[#86 '|']: r#50
[#86 '||']: r#50
[#87 '!=']: r#51
[#87 '%']: r#51
[#87 '&&']: r#51
[#87 '&']: r#51
[#87 ')']: r#51
[#87 '*']: r#51
[#87 '+']: r#51
[#87 ',']: r#51
[#87 '-']: r#51
[#87 '.']: r#51
[#87 '/']: r#51
[#87 ':']: r#51
[#87 ';']: r#51
[#87 '<']: r#51
[#87 '<<']: r#51
[#87 '<=']: r#51
[#87 '==']: r#51
[#87 '>']: r#51
[#87 '>=']: r#51
[#87 '>>']: r#51
[#87 '[']: r#51
[#87 ']']: r#51
[#87 '^']: r#51
[#87 '{']: r#51
[#87 '|']: r#51
[#87 '||']: r#51
[#88 '!']: s#71
[#88 '&']: s#74
[#88 '(']: s#116
[#88 '*']: s#73
[#88 '-']: s#70
[#88 'array']: s#84
[#88 'atomic']: s#96
[#88 'bitcast']: s#79
[#88 'bool']: s#89
[#88 'f16']: s#118
[#88 'f32']: s#117
[#88 'false']: s#115
[#88 'i32']: s#119
[#88 'mat2x2']: s#101
[#88 'mat2x3']: s#102
[#88 'mat2x4']: s#103
[#88 'mat3x2']: s#104
[#88 'mat3x3']: s#105
[#88 'mat3x4']: s#106
[#88 'mat4x2']: s#107
[#88 'mat4x3']: s#108
[#88 'mat4x4']: s#109
[#88 'ptr']: s#121
[#88 'sampler']: s#138
[#88 'sampler_comparison']: s#139
[#88 'texture_1d']: s#145
[#88 'texture_2d']: s#146
[#88 'texture_2d_array']: s#147
[#88 'texture_3d']: s#148
[#88 'texture_cube']: s#149
[#88 'texture_cube_array']: s#150
[#88 'texture_depth_2d']: s#140
[#88 'texture_depth_2d_array']: s#141
[#88 'texture_depth_cube']: s#142
[#88 'texture_depth_cube_array']: s#143
[#88 'texture_depth_multisampled_2d']: s#144
[#88 'texture_multisampled_2d']: s#151
[#88 'texture_storage_1d']: s#152
[#88 'texture_storage_2d']: s#153
[#88 'texture_storage_2d_array']: s#154
[#88 'texture_storage_3d']: s#155
[#88 'true']: s#114
[#88 'u32']: s#120
[#88 'vec2']: s#98
[#88 'vec3']: s#99
[#88 'vec4']: s#100
[#88 '~']: s#72
[#88 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#88 /0[fh]/]: s#130
[#88 /0[iu]?/]: s#127
[#88 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#88 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#88 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#88 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#88 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#88 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#88 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#88 /[1-9][0-9]*[fh]/]: s#131
[#88 /[1-9][0-9]*[iu]?/]: s#128
[#89 '(']: r#52
[#89 ')']: r#52
[#89 ',']: r#52
[#89 ';']: r#52
[#89 '=']: r#52
[#89 '>']: r#52
[#89 '{']: r#52
[#89 '}']: r#52
[#90 '(']: r#53
[#90 ')']: r#53
[#90 ',']: r#53
[#90 ';']: r#53
[#90 '=']: r#53
[#90 '>']: r#53
[#90 '{']: r#53
[#90 '}']: r#53
[#91 '(']: r#54
[#91 ')']: r#54
[#91 ',']: r#54
[#91 ';']: r#54
[#91 '=']: r#54
[#91 '>']: r#54
[#91 '{']: r#54
[#91 '}']: r#54
[#92 '(']: r#55
[#92 ')']: r#55
[#92 ',']: r#55
[#92 ';']: r#55
[#92 '=']: r#55
[#92 '>']: r#55
[#92 '{']: r#55
[#92 '}']: r#55
[#93 '(']: r#56
[#93 ')']: r#56
[#93 ',']: r#56
[#93 ';']: r#56
[#93 '=']: r#56
[#93 '>']: r#56
[#93 '{']: r#56
[#93 '}']: r#56
[#94 '<']: s#174
[#95 '(']: r#57
[#95 ')']: r#57
[#95 ',']: r#57
[#95 ';']: r#57
[#95 '=']: r#57
[#95 '>']: r#57
[#95 '{']: r#57
[#95 '}']: r#57
[#96 '<']: s#174
[#97 '(']: r#58
[#97 ')']: r#58
[#97 ',']: r#58
[#97 ';']: r#58
[#97 '=']: r#58
[#97 '>']: r#58
[#97 '{']: r#58
[#97 '}']: r#58
[#98 '(']: r#59
[#98 '<']: r#59
[#99 '(']: r#60
[#99 '<']: r#60
[#100 '(']: r#61
[#100 '<']: r#61
[#101 '(']: r#62
[#101 '<']: r#62
[#102 '(']: r#63
[#102 '<']: r#63
[#103 '(']: r#64
[#103 '<']: r#64
[#104 '(']: r#65
[#104 '<']: r#65
[#105 '(']: r#66
[#105 '<']: r#66
[#106 '(']: r#67
[#106 '<']: r#67
[#107 '(']: r#68
[#107 '<']: r#68
[#108 '(']: r#69
[#108 '<']: r#69
[#109 '(']: r#70
[#109 '<']: r#70
[#110 '!=']: r#71
[#110 '%']: r#71
[#110 '&&']: r#71
[#110 '&']: r#71
[#110 ')']: r#71
[#110 '*']: r#71
[#110 '+']: r#71
[#110 ',']: r#71
[#110 '-']: r#71
[#110 '.']: r#71
[#110 '/']: r#71
[#110 ':']: r#71
[#110 ';']: r#71
[#110 '<']: r#71
[#110 '<<']: r#71
[#110 '<=']: r#71
[#110 '==']: r#71
[#110 '>']: r#71
[#110 '>=']: r#71
[#110 '>>']: r#71
[#110 '[']: r#71
[#110 ']']: r#71
[#110 '^']: r#71
[#110 '{']: r#71
[#110 '|']: r#71
[#110 '||']: r#71
[#111 '!=']: r#72
[#111 '%']: r#72
[#111 '&&']: r#72
[#111 '&']: r#72
[#111 ')']: r#72
[#111 '*']: r#72
[#111 '+']: r#72
[#111 ',']: r#72
[#111 '-']: r#72
[#111 '.']: r#72
[#111 '/']: r#72
[#111 ':']: r#72
[#111 ';']: r#72
[#111 '<']: r#72
[#111 '<<']: r#72
[#111 '<=']: r#72
[#111 '==']: r#72
[#111 '>']: r#72
[#111 '>=']: r#72
[#111 '>>']: r#72
[#111 '[']: r#72
[#111 ']']: r#72
[#111 '^']: r#72
[#111 '{']: r#72
[#111 '|']: r#72
[#111 '||']: r#72
[#112 '!=']: r#73
[#112 '%']: r#73
[#112 '&&']: r#73
[#112 '&']: r#73
[#112 ')']: r#73
[#112 '*']: r#73
[#112 '+']: r#73
[#112 ',']: r#73
[#112 '-']: r#73
[#112 '.']: r#73
[#112 '/']: r#73
[#112 ':']: r#73
[#112 ';']: r#73
[#112 '<']: r#73
[#112 '<<']: r#73
[#112 '<=']: r#73
[#112 '==']: r#73
[#112 '>']: r#73
[#112 '>=']: r#73
[#112 '>>']: r#73
[#112 '[']: r#73
[#112 ']']: r#73
[#112 '^']: r#73
[#112 '{']: r#73
[#112 '|']: r#73
[#112 '||']: r#73
[#113 '!=']: r#74
[#113 '%']: r#74
[#113 '&&']: r#74
[#113 '&']: r#74
[#113 ')']: r#74
[#113 '*']: r#74
[#113 '+']: r#74
[#113 ',']: r#74
[#113 '-']: r#74
[#113 '.']: r#74
[#113 '/']: r#74
[#113 ':']: r#74
[#113 ';']: r#74
[#113 '<']: r#74
[#113 '<<']: r#74
[#113 '<=']: r#74
[#113 '==']: r#74
[#113 '>']: r#74
[#113 '>=']: r#74
[#113 '>>']: r#74
[#113 '[']: r#74
[#113 ']']: r#74
[#113 '^']: r#74
[#113 '{']: r#74
[#113 '|']: r#74
[#113 '||']: r#74
[#114 '!=']: r#75
[#114 '%']: r#75
[#114 '&&']: r#75
[#114 '&']: r#75
[#114 ')']: r#75
[#114 '*']: r#75
[#114 '+']: r#75
[#114 ',']: r#75
[#114 '-']: r#75
[#114 '.']: r#75
[#114 '/']: r#75
[#114 ':']: r#75
[#114 ';']: r#75
[#114 '<']: r#75
[#114 '<<']: r#75
[#114 '<=']: r#75
[#114 '==']: r#75
[#114 '>']: r#75
[#114 '>=']: r#75
[#114 '>>']: r#75
[#114 '[']: r#75
[#114 ']']: r#75
[#114 '^']: r#75
[#114 '{']: r#75
[#114 '|']: r#75
[#114 '||']: r#75
[#115 '!=']: r#76
[#115 '%']: r#76
[#115 '&&']: r#76
[#115 '&']: r#76
[#115 ')']: r#76
[#115 '*']: r#76
[#115 '+']: r#76
[#115 ',']: r#76
[#115 '-']: r#76
[#115 '.']: r#76
[#115 '/']: r#76
[#115 ':']: r#76
[#115 ';']: r#76
[#115 '<']: r#76
[#115 '<<']: r#76
[#115 '<=']: r#76
[#115 '==']: r#76
[#115 '>']: r#76
[#115 '>=']: r#76
[#115 '>>']: r#76
[#115 '[']: r#76
[#115 ']']: r#76
[#115 '^']: r#76
[#115 '{']: r#76
[#115 '|']: r#76
[#115 '||']: r#76
[#116 '!']: r#77
[#116 '&']: r#77
[#116 '(']: r#77
[#116 ')']: r#77
[#116 '*']: r#77
[#116 '-']: r#77
[#116 ';']: r#77
[#116 '@']: r#77
[#116 '_']: r#77
[#116 'array']: r#77
[#116 'atomic']: r#77
[#116 'bitcast']: r#77
[#116 'bool']: r#77
[#116 'const']: r#77
[#116 'f16']: r#77
[#116 'f32']: r#77
[#116 'false']: r#77
[#116 'i32']: r#77
[#116 'let']: r#77
[#116 'mat2x2']: r#77
[#116 'mat2x3']: r#77
[#116 'mat2x4']: r#77
[#116 'mat3x2']: r#77
[#116 'mat3x3']: r#77
[#116 'mat3x4']: r#77
[#116 'mat4x2']: r#77
[#116 'mat4x3']: r#77
[#116 'mat4x4']: r#77
[#116 'ptr']: r#77
[#116 'sampler']: r#77
[#116 'sampler_comparison']: r#77
[#116 'texture_1d']: r#77
[#116 'texture_2d']: r#77
[#116 'texture_2d_array']: r#77
[#116 'texture_3d']: r#77
[#116 'texture_cube']: r#77
[#116 'texture_cube_array']: r#77
[#116 'texture_depth_2d']: r#77
[#116 'texture_depth_2d_array']: r#77
[#116 'texture_depth_cube']: r#77
[#116 'texture_depth_cube_array']: r#77
[#116 'texture_depth_multisampled_2d']: r#77
[#116 'texture_multisampled_2d']: r#77
[#116 'texture_storage_1d']: r#77
[#116 'texture_storage_2d']: r#77
[#116 'texture_storage_2d_array']: r#77
[#116 'texture_storage_3d']: r#77
[#116 'true']: r#77
[#116 'u32']: r#77
[#116 'var']: r#77
[#116 'vec2']: r#77
[#116 'vec3']: r#77
[#116 'vec4']: r#77
[#116 '~']: r#77
[#116 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#77
[#116 /0[xX][0-9a-fA-F]+[iu]?/]: r#77
[#117 '(']: r#78
[#117 ')']: r#78
[#117 ',']: r#78
[#117 ';']: r#78
[#117 '=']: r#78
[#117 '>']: r#78
[#117 '{']: r#78
[#117 '}']: r#78
[#118 '(']: r#79
[#118 ')']: r#79
[#118 ',']: r#79
[#118 ';']: r#79
[#118 '=']: r#79
[#118 '>']: r#79
[#118 '{']: r#79
[#118 '}']: r#79
[#119 '(']: r#80
[#119 ')']: r#80
[#119 ',']: r#80
[#119 ';']: r#80
[#119 '=']: r#80
[#119 '>']: r#80
[#119 '{']: r#80
[#119 '}']: r#80
[#120 '(']: r#81
[#120 ')']: r#81
[#120 ',']: r#81
[#120 ';']: r#81
[#120 '=']: r#81
[#120 '>']: r#81
[#120 '{']: r#81
[#120 '}']: r#81
[#121 '<']: r#82
[#122 '(']: r#83
[#122 ')']: r#83
[#122 ',']: r#83
[#122 ';']: r#83
[#122 '=']: r#83
[#122 '>']: r#83
[#122 '{']: r#83
[#122 '}']: r#83
[#123 '(']: r#84
[#123 ')']: r#84
[#123 ',']: r#84
[#123 ';']: r#84
[#123 '=']: r#84
[#123 '>']: r#84
[#123 '{']: r#84
[#123 '}']: r#84
[#124 '<']: s#174
[#125 '<']: s#174
[#126 '<']: s#174
[#127 '!=']: r#85
[#127 '%']: r#85
[#127 '&&']: r#85
[#127 '&']: r#85
[#127 ')']: r#85
[#127 '*']: r#85
[#127 '+']: r#85
[#127 ',']: r#85
[#127 '-']: r#85
[#127 '.']: r#85
[#127 '/']: r#85
[#127 ':']: r#85
[#127 ';']: r#85
[#127 '<']: r#85
[#127 '<<']: r#85
[#127 '<=']: r#85
[#127 '==']: r#85
[#127 '>']: r#85
[#127 '>=']: r#85
[#127 '>>']: r#85
[#127 '[']: r#85
[#127 ']']: r#85
[#127 '^']: r#85
[#127 '{']: r#85
[#127 '|']: r#85
[#127 '||']: r#85
[#128 '!=']: r#86
[#128 '%']: r#86
[#128 '&&']: r#86
[#128 '&']: r#86
[#128 ')']: r#86
[#128 '*']: r#86
[#128 '+']: r#86
[#128 ',']: r#86
[#128 '-']: r#86
[#128 '.']: r#86
[#128 '/']: r#86
[#128 ':']: r#86
[#128 ';']: r#86
[#128 '<']: r#86
[#128 '<<']: r#86
[#128 '<=']: r#86
[#128 '==']: r#86
[#128 '>']: r#86
[#128 '>=']: r#86
[#128 '>>']: r#86
[#128 '[']: r#86
[#128 ']']: r#86
[#128 '^']: r#86
[#128 '{']: r#86
[#128 '|']: r#86
[#128 '||']: r#86
[#129 '!=']: r#87
[#129 '%']: r#87
[#129 '&&']: r#87
[#129 '&']: r#87
[#129 ')']: r#87
[#129 '*']: r#87
[#129 '+']: r#87
[#129 ',']: r#87
[#129 '-']: r#87
[#129 '.']: r#87
[#129 '/']: r#87
[#129 ':']: r#87
[#129 ';']: r#87
[#129 '<']: r#87
[#129 '<<']: r#87
[#129 '<=']: r#87
[#129 '==']: r#87
[#129 '>']: r#87
[#129 '>=']: r#87
[#129 '>>']: r#87
[#129 '[']: r#87
[#129 ']']: r#87
[#129 '^']: r#87
[#129 '{']: r#87
[#129 '|']: r#87
[#129 '||']: r#87
[#130 '!=']: r#88
[#130 '%']: r#88
[#130 '&&']: r#88
[#130 '&']: r#88
[#130 ')']: r#88
[#130 '*']: r#88
[#130 '+']: r#88
[#130 ',']: r#88
[#130 '-']: r#88
[#130 '.']: r#88
[#130 '/']: r#88
[#130 ':']: r#88
[#130 ';']: r#88
[#130 '<']: r#88
[#130 '<<']: r#88
[#130 '<=']: r#88
[#130 '==']: r#88
[#130 '>']: r#88
[#130 '>=']: r#88
[#130 '>>']: r#88
[#130 '[']: r#88
[#130 ']']: r#88
[#130 '^']: r#88
[#130 '{']: r#88
[#130 '|']: r#88
[#130 '||']: r#88
[#131 '!=']: r#89
[#131 '%']: r#89
[#131 '&&']: r#89
[#131 '&']: r#89
[#131 ')']: r#89
[#131 '*']: r#89
[#131 '+']: r#89
[#131 ',']: r#89
[#131 '-']: r#89
[#131 '.']: r#89
[#131 '/']: r#89
[#131 ':']: r#89
[#131 ';']: r#89
[#131 '<']: r#89
[#131 '<<']: r#89
[#131 '<=']: r#89
[#131 '==']: r#89
[#131 '>']: r#89
[#131 '>=']: r#89
[#131 '>>']: r#89
[#131 '[']: r#89
[#131 ']']: r#89
[#131 '^']: r#89
[#131 '{']: r#89
[#131 '|']: r#89
[#131 '||']: r#89
[#132 '!=']: r#90
[#132 '%']: r#90
[#132 '&&']: r#90
[#132 '&']: r#90
[#132 ')']: r#90
[#132 '*']: r#90
[#132 '+']: r#90
[#132 ',']: r#90
[#132 '-']: r#90
[#132 '.']: r#90
[#132 '/']: r#90
[#132 ':']: r#90
[#132 ';']: r#90
[#132 '<']: r#90
[#132 '<<']: r#90
[#132 '<=']: r#90
[#132 '==']: r#90
[#132 '>']: r#90
[#132 '>=']: r#90
[#132 '>>']: r#90
[#132 '[']: r#90
[#132 ']']: r#90
[#132 '^']: r#90
[#132 '{']: r#90
[#132 '|']: r#90
[#132 '||']: r#90
[#133 '!=']: r#91
[#133 '%']: r#91
[#133 '&&']: r#91
[#133 '&']: r#91
[#133 ')']: r#91
[#133 '*']: r#91
[#133 '+']: r#91
[#133 ',']: r#91
[#133 '-']: r#91
[#133 '.']: r#91
[#133 '/']: r#91
[#133 ':']: r#91
[#133 ';']: r#91
[#133 '<']: r#91
[#133 '<<']: r#91
[#133 '<=']: r#91
[#133 '==']: r#91
[#133 '>']: r#91
[#133 '>=']: r#91
[#133 '>>']: r#91
[#133 '[']: r#91
[#133 ']']: r#91
[#133 '^']: r#91
[#133 '{']: r#91
[#133 '|']: r#91
[#133 '||']: r#91
[#134 '!=']: r#92
[#134 '%']: r#92
[#134 '&&']: r#92
[#134 '&']: r#92
[#134 ')']: r#92
[#134 '*']: r#92
[#134 '+']: r#92
[#134 ',']: r#92
[#134 '-']: r#92
[#134 '.']: r#92
[#134 '/']: r#92
[#134 ':']: r#92
[#134 ';']: r#92
[#134 '<']: r#92
[#134 '<<']: r#92
[#134 '<=']: r#92
[#134 '==']: r#92
[#134 '>']: r#92
[#134 '>=']: r#92
[#134 '>>']: r#92
[#134 '[']: r#92
[#134 ']']: r#92
[#134 '^']: r#92
[#134 '{']: r#92
[#134 '|']: r#92
[#134 '||']: r#92
[#135 '!=']: r#93
[#135 '%']: r#93
[#135 '&&']: r#93
[#135 '&']: r#93
[#135 ')']: r#93
[#135 '*']: r#93
[#135 '+']: r#93
[#135 ',']: r#93
[#135 '-']: r#93
[#135 '.']: r#93
[#135 '/']: r#93
[#135 ':']: r#93
[#135 ';']: r#93
[#135 '<']: r#93
[#135 '<<']: r#93
[#135 '<=']: r#93
[#135 '==']: r#93
[#135 '>']: r#93
[#135 '>=']: r#93
[#135 '>>']: r#93
[#135 '[']: r#93
[#135 ']']: r#93
[#135 '^']: r#93
[#135 '{']: r#93
[#135 '|']: r#93
[#135 '||']: r#93
[#136 '!=']: r#94
[#136 '%']: r#94
[#136 '&&']: r#94
[#136 '&']: r#94
[#136 ')']: r#94
[#136 '*']: r#94
[#136 '+']: r#94
[#136 ',']: r#94
[#136 '-']: r#94
[#136 '.']: r#94
[#136 '/']: r#94
[#136 ':']: r#94
[#136 ';']: r#94
[#136 '<']: r#94
[#136 '<<']: r#94
[#136 '<=']: r#94
[#136 '==']: r#94
[#136 '>']: r#94
[#136 '>=']: r#94
[#136 '>>']: r#94
[#136 '[']: r#94
[#136 ']']: r#94
[#136 '^']: r#94
[#136 '{']: r#94
[#136 '|']: r#94
[#136 '||']: r#94
[#137 '!=']: r#95
[#137 '%']: r#95
[#137 '&&']: r#95
[#137 '&']: r#95
[#137 ')']: r#95
[#137 '*']: r#95
[#137 '+']: r#95
[#137 ',']: r#95
[#137 '-']: r#95
[#137 '.']: r#95
[#137 '/']: r#95
[#137 ':']: r#95
[#137 ';']: r#95
[#137 '<']: r#95
[#137 '<<']: r#95
[#137 '<=']: r#95
[#137 '==']: r#95
[#137 '>']: r#95
[#137 '>=']: r#95
[#137 '>>']: r#95
[#137 '[']: r#95
[#137 ']']: r#95
[#137 '^']: r#95
[#137 '{']: r#95
[#137 '|']: r#95
[#137 '||']: r#95
[#138 '(']: r#96
[#138 ')']: r#96
[#138 ',']: r#96
[#138 ';']: r#96
[#138 '=']: r#96
[#138 '>']: r#96
[#138 '{']: r#96
[#138 '}']: r#96
[#139 '(']: r#97
[#139 ')']: r#97
[#139 ',']: r#97
[#139 ';']: r#97
[#139 '=']: r#97
[#139 '>']: r#97
[#139 '{']: r#97
[#139 '}']: r#97
[#140 '(']: r#98
[#140 ')']: r#98
[#140 ',']: r#98
[#140 ';']: r#98
[#140 '=']: r#98
[#140 '>']: r#98
[#140 '{']: r#98
[#140 '}']: r#98
[#141 '(']: r#99
[#141 ')']: r#99
[#141 ',']: r#99
[#141 ';']: r#99
[#141 '=']: r#99
[#141 '>']: r#99
[#141 '{']: r#99
[#141 '}']: r#99
[#142 '(']: r#100
[#142 ')']: r#100
[#142 ',']: r#100
[#142 ';']: r#100
[#142 '=']: r#100
[#142 '>']: r#100
[#142 '{']: r#100
[#142 '}']: r#100
[#143 '(']: r#101
[#143 ')']: r#101
[#143 ',']: r#101
[#143 ';']: r#101
[#143 '=']: r#101
[#143 '>']: r#101
[#143 '{']: r#101
[#143 '}']: r#101
[#144 '(']: r#102
[#144 ')']: r#102
[#144 ',']: r#102
[#144 ';']: r#102
[#144 '=']: r#102
[#144 '>']: r#102
[#144 '{']: r#102
[#144 '}']: r#102
[#145 '<']: r#103
[#146 '<']: r#104
[#147 '<']: r#105
[#148 '<']: r#106
[#149 '<']: r#107
[#150 '<']: r#108
[#151 '<']: r#109
[#152 '<']: r#110
[#153 '<']: r#111
[#154 '<']: r#112
[#155 '<']: r#113
[#156 '{']: s#186
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#158 '{']: s#186
[#159 '=']: s#177
[#160 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#161 '=']: s#177
[#162 ':']: s#180
[#163 '=']: s#177
[#164 '<']: s#174
[#165 ';']: r#114
[#165 '@']: r#114
[#165 'const']: r#114
[#165 'fn']: r#114
[#165 'override']: r#114
[#165 'static_assert']: r#114
[#165 'struct']: r#114
[#165 'type']: r#114
[#165 'var']: r#114
[#165 EndOfText]: r#114
[#166 ';']: r#115
[#166 '@']: r#115
[#166 'const']: r#115
[#166 'fn']: r#115
[#166 'override']: r#115
[#166 'static_assert']: r#115
[#166 'struct']: r#115
[#166 'type']: r#115
[#166 'var']: r#115
[#166 EndOfText]: r#115
[#167 ';']: r#116
[#167 '@']: r#116
[#167 'const']: r#116
[#167 'fn']: r#116
[#167 'override']: r#116
[#167 'static_assert']: r#116
[#167 'struct']: r#116
[#167 'type']: r#116
[#167 'var']: r#116
[#167 EndOfText]: r#116
[#168 ';']: r#117
[#168 '@']: r#117
[#168 'const']: r#117
[#168 'fn']: r#117
[#168 'override']: r#117
[#168 'static_assert']: r#117
[#168 'struct']: r#117
[#168 'type']: r#117
[#168 'var']: r#117
[#168 EndOfText]: r#117
[#169 EndOfText]: r#118
[#170 ';']: r#119
[#170 '@']: r#119
[#170 'const']: r#119
[#170 'enable']: r#119
[#170 'fn']: r#119
[#170 'override']: r#119
[#170 'static_assert']: r#119
[#170 'struct']: r#119
[#170 'type']: r#119
[#170 'var']: r#119
[#170 EndOfText]: r#119
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#172 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#120
[#173 'function']: s#324
[#173 'private']: s#325
[#173 'storage']: s#328
[#173 'uniform']: s#327
[#173 'workgroup']: s#326
[#174 '!']: r#121
[#174 '&']: r#121
[#174 '(']: r#121
[#174 '*']: r#121
[#174 '-']: r#121
[#174 'array']: r#121
[#174 'atomic']: r#121
[#174 'bitcast']: r#121
[#174 'bool']: r#121
[#174 'f16']: r#121
[#174 'f32']: r#121
[#174 'false']: r#121
[#174 'i32']: r#121
[#174 'mat2x2']: r#121
[#174 'mat2x3']: r#121
[#174 'mat2x4']: r#121
[#174 'mat3x2']: r#121
[#174 'mat3x3']: r#121
[#174 'mat3x4']: r#121
[#174 'mat4x2']: r#121
[#174 'mat4x3']: r#121
[#174 'mat4x4']: r#121
[#174 'ptr']: r#121
[#174 'sampler']: r#121
[#174 'sampler_comparison']: r#121
[#174 'texture_1d']: r#121
[#174 'texture_2d']: r#121
[#174 'texture_2d_array']: r#121
[#174 'texture_3d']: r#121
[#174 'texture_cube']: r#121
[#174 'texture_cube_array']: r#121
[#174 'texture_depth_2d']: r#121
[#174 'texture_depth_2d_array']: r#121
[#174 'texture_depth_cube']: r#121
[#174 'texture_depth_cube_array']: r#121
[#174 'texture_depth_multisampled_2d']: r#121
[#174 'texture_multisampled_2d']: r#121
[#174 'texture_storage_1d']: r#121
[#174 'texture_storage_2d']: r#121
[#174 'texture_storage_2d_array']: r#121
[#174 'texture_storage_3d']: r#121
[#174 'true']: r#121
[#174 'u32']: r#121
[#174 'vec2']: r#121
[#174 'vec3']: r#121
[#174 'vec4']: r#121
[#174 '~']: r#121
[#174 /0[xX][0-9a-fA-F]+[iu]?/]: r#121
[#175 ';']: r#122
[#176 '!']: s#71
[#176 '&']: s#74
[#176 '(']: s#116
[#176 '*']: s#73
[#176 '-']: s#70
[#176 'array']: s#84
[#176 'atomic']: s#96
[#176 'bitcast']: s#79
[#176 'bool']: s#89
[#176 'f16']: s#118
[#176 'f32']: s#117
[#176 'false']: s#115
[#176 'i32']: s#119
[#176 'mat2x2']: s#101
[#176 'mat2x3']: s#102
[#176 'mat2x4']: s#103
[#176 'mat3x2']: s#104
[#176 'mat3x3']: s#105
[#176 'mat3x4']: s#106
[#176 'mat4x2']: s#107
[#176 'mat4x3']: s#108
[#176 'mat4x4']: s#109
[#176 'ptr']: s#121
[#176 'sampler']: s#138
[#176 'sampler_comparison']: s#139
[#176 'texture_1d']: s#145
[#176 'texture_2d']: s#146
[#176 'texture_2d_array']: s#147
[#176 'texture_3d']: s#148
[#176 'texture_cube']: s#149
[#176 'texture_cube_array']: s#150
[#176 'texture_depth_2d']: s#140
[#176 'texture_depth_2d_array']: s#141
[#176 'texture_depth_cube']: s#142
[#176 'texture_depth_cube_array']: s#143
[#176 'texture_depth_multisampled_2d']: s#144
[#176 'texture_multisampled_2d']: s#151
[#176 'texture_storage_1d']: s#152
[#176 'texture_storage_2d']: s#153
[#176 'texture_storage_2d_array']: s#154
[#176 'texture_storage_3d']: s#155
[#176 'true']: s#114
[#176 'u32']: s#120
[#176 'vec2']: s#98
[#176 'vec3']: s#99
[#176 'vec4']: s#100
[#176 '~']: s#72
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#176 /0[fh]/]: s#130
[#176 /0[iu]?/]: s#127
[#176 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#176 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#176 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#176 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#176 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#176 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#176 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#176 /[1-9][0-9]*[fh]/]: s#131
[#176 /[1-9][0-9]*[iu]?/]: s#128
[#177 '!']: r#123
[#177 '&']: r#123
[#177 '(']: r#123
[#177 '*']: r#123
[#177 '-']: r#123
[#177 'array']: r#123
[#177 'atomic']: r#123
[#177 'bitcast']: r#123
[#177 'bool']: r#123
[#177 'f16']: r#123
[#177 'f32']: r#123
[#177 'false']: r#123
[#177 'i32']: r#123
[#177 'mat2x2']: r#123
[#177 'mat2x3']: r#123
[#177 'mat2x4']: r#123
[#177 'mat3x2']: r#123
[#177 'mat3x3']: r#123
[#177 'mat3x4']: r#123
[#177 'mat4x2']: r#123
[#177 'mat4x3']: r#123
[#177 'mat4x4']: r#123
[#177 'ptr']: r#123
[#177 'sampler']: r#123
[#177 'sampler_comparison']: r#123
[#177 'texture_1d']: r#123
[#177 'texture_2d']: r#123
[#177 'texture_2d_array']: r#123
[#177 'texture_3d']: r#123
[#177 'texture_cube']: r#123
[#177 'texture_cube_array']: r#123
[#177 'texture_depth_2d']: r#123
[#177 'texture_depth_2d_array']: r#123
[#177 'texture_depth_cube']: r#123
[#177 'texture_depth_cube_array']: r#123
[#177 'texture_depth_multisampled_2d']: r#123
[#177 'texture_multisampled_2d']: r#123
[#177 'texture_storage_1d']: r#123
[#177 'texture_storage_2d']: r#123
[#177 'texture_storage_2d_array']: r#123
[#177 'texture_storage_3d']: r#123
[#177 'true']: r#123
[#177 'u32']: r#123
[#177 'vec2']: r#123
[#177 'vec3']: r#123
[#177 'vec4']: r#123
[#177 '~']: r#123
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: r#123
[#178 ';']: r#124
[#178 '=']: r#124
[#179 'array']: s#317
[#179 'atomic']: s#96
[#179 'bool']: s#89
[#179 'f16']: s#118
[#179 'f32']: s#117
[#179 'i32']: s#119
[#179 'mat2x2']: s#101
[#179 'mat2x3']: s#102
[#179 'mat2x4']: s#103
[#179 'mat3x2']: s#104
[#179 'mat3x3']: s#105
[#179 'mat3x4']: s#106
[#179 'mat4x2']: s#107
[#179 'mat4x3']: s#108
[#179 'mat4x4']: s#109
[#179 'ptr']: s#121
[#179 'sampler']: s#138
[#179 'sampler_comparison']: s#139
[#179 'texture_1d']: s#145
[#179 'texture_2d']: s#146
[#179 'texture_2d_array']: s#147
[#179 'texture_3d']: s#148
[#179 'texture_cube']: s#149
[#179 'texture_cube_array']: s#150
[#179 'texture_depth_2d']: s#140
[#179 'texture_depth_2d_array']: s#141
[#179 'texture_depth_cube']: s#142
[#179 'texture_depth_cube_array']: s#143
[#179 'texture_depth_multisampled_2d']: s#144
[#179 'texture_multisampled_2d']: s#151
[#179 'texture_storage_1d']: s#152
[#179 'texture_storage_2d']: s#153
[#179 'texture_storage_2d_array']: s#154
[#179 'texture_storage_3d']: s#155
[#179 'u32']: s#120
[#179 'vec2']: s#98
[#179 'vec3']: s#99
[#179 'vec4']: s#100
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#180 'array']: r#125
[#180 'atomic']: r#125
[#180 'bool']: r#125
[#180 'f16']: r#125
[#180 'f32']: r#125
[#180 'i32']: r#125
[#180 'mat2x2']: r#125
[#180 'mat2x3']: r#125
[#180 'mat2x4']: r#125
[#180 'mat3x2']: r#125
[#180 'mat3x3']: r#125
[#180 'mat3x4']: r#125
[#180 'mat4x2']: r#125
[#180 'mat4x3']: r#125
[#180 'mat4x4']: r#125
[#180 'ptr']: r#125
[#180 'sampler']: r#125
[#180 'sampler_comparison']: r#125
[#180 'texture_1d']: r#125
[#180 'texture_2d']: r#125
[#180 'texture_2d_array']: r#125
[#180 'texture_3d']: r#125
[#180 'texture_cube']: r#125
[#180 'texture_cube_array']: r#125
[#180 'texture_depth_2d']: r#125
[#180 'texture_depth_2d_array']: r#125
[#180 'texture_depth_cube']: r#125
[#180 'texture_depth_cube_array']: r#125
[#180 'texture_depth_multisampled_2d']: r#125
[#180 'texture_multisampled_2d']: r#125
[#180 'texture_storage_1d']: r#125
[#180 'texture_storage_2d']: r#125
[#180 'texture_storage_2d_array']: r#125
[#180 'texture_storage_3d']: r#125
[#180 'u32']: r#125
[#180 'vec2']: r#125
[#180 'vec3']: r#125
[#180 'vec4']: r#125
[#180 '{']: r#125
[#181 '!']: s#71
[#181 '&']: s#74
[#181 '(']: s#116
[#181 '*']: s#73
[#181 '-']: s#70
[#181 'array']: s#84
[#181 'atomic']: s#96
[#181 'bitcast']: s#79
[#181 'bool']: s#89
[#181 'f16']: s#118
[#181 'f32']: s#117
[#181 'false']: s#115
[#181 'i32']: s#119
[#181 'mat2x2']: s#101
[#181 'mat2x3']: s#102
[#181 'mat2x4']: s#103
[#181 'mat3x2']: s#104
[#181 'mat3x3']: s#105
[#181 'mat3x4']: s#106
[#181 'mat4x2']: s#107
[#181 'mat4x3']: s#108
[#181 'mat4x4']: s#109
[#181 'ptr']: s#121
[#181 'sampler']: s#138
[#181 'sampler_comparison']: s#139
[#181 'texture_1d']: s#145
[#181 'texture_2d']: s#146
[#181 'texture_2d_array']: s#147
[#181 'texture_3d']: s#148
[#181 'texture_cube']: s#149
[#181 'texture_cube_array']: s#150
[#181 'texture_depth_2d']: s#140
[#181 'texture_depth_2d_array']: s#141
[#181 'texture_depth_cube']: s#142
[#181 'texture_depth_cube_array']: s#143
[#181 'texture_depth_multisampled_2d']: s#144
[#181 'texture_multisampled_2d']: s#151
[#181 'texture_storage_1d']: s#152
[#181 'texture_storage_2d']: s#153
[#181 'texture_storage_2d_array']: s#154
[#181 'texture_storage_3d']: s#155
[#181 'true']: s#114
[#181 'u32']: s#120
[#181 'vec2']: s#98
[#181 'vec3']: s#99
[#181 'vec4']: s#100
[#181 '~']: s#72
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#181 /0[fh]/]: s#130
[#181 /0[iu]?/]: s#127
[#181 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#181 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#181 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#181 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#181 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#181 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#181 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#181 /[1-9][0-9]*[fh]/]: s#131
[#181 /[1-9][0-9]*[iu]?/]: s#128
[#182 '=']: s#177
[#183 'array']: s#317
[#183 'atomic']: s#96
[#183 'bool']: s#89
[#183 'f16']: s#118
[#183 'f32']: s#117
[#183 'i32']: s#119
[#183 'mat2x2']: s#101
[#183 'mat2x3']: s#102
[#183 'mat2x4']: s#103
[#183 'mat3x2']: s#104
[#183 'mat3x3']: s#105
[#183 'mat3x4']: s#106
[#183 'mat4x2']: s#107
[#183 'mat4x3']: s#108
[#183 'mat4x4']: s#109
[#183 'ptr']: s#121
[#183 'sampler']: s#138
[#183 'sampler_comparison']: s#139
[#183 'texture_1d']: s#145
[#183 'texture_2d']: s#146
[#183 'texture_2d_array']: s#147
[#183 'texture_3d']: s#148
[#183 'texture_cube']: s#149
[#183 'texture_cube_array']: s#150
[#183 'texture_depth_2d']: s#140
[#183 'texture_depth_2d_array']: s#141
[#183 'texture_depth_cube']: s#142
[#183 'texture_depth_cube_array']: s#143
[#183 'texture_depth_multisampled_2d']: s#144
[#183 'texture_multisampled_2d']: s#151
[#183 'texture_storage_1d']: s#152
[#183 'texture_storage_2d']: s#153
[#183 'texture_storage_2d_array']: s#154
[#183 'texture_storage_3d']: s#155
[#183 'u32']: s#120
[#183 'vec2']: s#98
[#183 'vec3']: s#99
[#183 'vec4']: s#100
[#183 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#184 ';']: r#126
[#184 '@']: r#126
[#184 'const']: r#126
[#184 'fn']: r#126
[#184 'override']: r#126
[#184 'static_assert']: r#126
[#184 'struct']: r#126
[#184 'type']: r#126
[#184 'var']: r#126
[#184 EndOfText]: r#126
[#185 '@']: s#33
[#186 '&']: r#127
[#186 '(']: r#127
[#186 '*']: r#127
[#186 ';']: r#127
[#186 '@']: r#127
[#186 '_']: r#127
[#186 'break']: r#127
[#186 'case']: r#127
[#186 'const']: r#127
[#186 'continue']: r#127
[#186 'continuing']: r#127
[#186 'default']: r#127
[#186 'discard']: r#127
[#186 'for']: r#127
[#186 'if']: r#127
[#186 'let']: r#127
[#186 'loop']: r#127
[#186 'return']: r#127
[#186 'static_assert']: r#127
[#186 'switch']: r#127
[#186 'var']: r#127
[#186 'while']: r#127
[#186 '{']: r#127
[#186 '}']: r#127
[#186 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#127
[#187 '(']: s#116
[#188 ';']: r#128
[#188 '@']: r#128
[#188 'const']: r#128
[#188 'fn']: r#128
[#188 'override']: r#128
[#188 'static_assert']: r#128
[#188 'struct']: r#128
[#188 'type']: r#128
[#188 'var']: r#128
[#188 EndOfText]: r#128
[#189 '&']: s#74
[#189 '(']: s#116
[#189 '*']: s#73
[#189 ';']: s#20
[#189 '_']: s#389
[#189 'break']: s#378
[#189 'const']: s#377
[#189 'continue']: s#379
[#189 'discard']: s#364
[#189 'for']: s#372
[#189 'if']: s#383
[#189 'let']: s#376
[#189 'loop']: s#371
[#189 'return']: s#368
[#189 'static_assert']: s#27
[#189 'switch']: s#370
[#189 'var']: s#164
[#189 'while']: s#373
[#189 '{']: s#186
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#190 'bgra8unorm']: s#349
[#190 'r32float']: s#342
[#190 'r32sint']: s#341
[#190 'r32uint']: s#340
[#190 'rg32float']: s#345
[#190 'rg32sint']: s#344
[#190 'rg32uint']: s#343
[#190 'rgba16float']: s#339
[#190 'rgba16sint']: s#338
[#190 'rgba16uint']: s#337
[#190 'rgba32float']: s#348
[#190 'rgba32sint']: s#347
[#190 'rgba32uint']: s#346
[#190 'rgba8sint']: s#336
[#190 'rgba8snorm']: s#334
[#190 'rgba8uint']: s#335
[#190 'rgba8unorm']: s#333
[#191 'array']: s#317
[#191 'atomic']: s#96
[#191 'bool']: s#89
[#191 'f16']: s#118
[#191 'f32']: s#117
[#191 'i32']: s#119
[#191 'mat2x2']: s#101
[#191 'mat2x3']: s#102
[#191 'mat2x4']: s#103
[#191 'mat3x2']: s#104
[#191 'mat3x3']: s#105
[#191 'mat3x4']: s#106
[#191 'mat4x2']: s#107
[#191 'mat4x3']: s#108
[#191 'mat4x4']: s#109
[#191 'ptr']: s#121
[#191 'sampler']: s#138
[#191 'sampler_comparison']: s#139
[#191 'texture_1d']: s#145
[#191 'texture_2d']: s#146
[#191 'texture_2d_array']: s#147
[#191 'texture_3d']: s#148
[#191 'texture_cube']: s#149
[#191 'texture_cube_array']: s#150
[#191 'texture_depth_2d']: s#140
[#191 'texture_depth_2d_array']: s#141
[#191 'texture_depth_cube']: s#142
[#191 'texture_depth_cube_array']: s#143
[#191 'texture_depth_multisampled_2d']: s#144
[#191 'texture_multisampled_2d']: s#151
[#191 'texture_storage_1d']: s#152
[#191 'texture_storage_2d']: s#153
[#191 'texture_storage_2d_array']: s#154
[#191 'texture_storage_3d']: s#155
[#191 'u32']: s#120
[#191 'vec2']: s#98
[#191 'vec3']: s#99
[#191 'vec4']: s#100
[#191 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#192 'array']: s#317
[#192 'atomic']: s#96
[#192 'bool']: s#89
[#192 'f16']: s#118
[#192 'f32']: s#117
[#192 'i32']: s#119
[#192 'mat2x2']: s#101
[#192 'mat2x3']: s#102
[#192 'mat2x4']: s#103
[#192 'mat3x2']: s#104
[#192 'mat3x3']: s#105
[#192 'mat3x4']: s#106
[#192 'mat4x2']: s#107
[#192 'mat4x3']: s#108
[#192 'mat4x4']: s#109
[#192 'ptr']: s#121
[#192 'sampler']: s#138
[#192 'sampler_comparison']: s#139
[#192 'texture_1d']: s#145
[#192 'texture_2d']: s#146
[#192 'texture_2d_array']: s#147
[#192 'texture_3d']: s#148
[#192 'texture_cube']: s#149
[#192 'texture_cube_array']: s#150
[#192 'texture_depth_2d']: s#140
[#192 'texture_depth_2d_array']: s#141
[#192 'texture_depth_cube']: s#142
[#192 'texture_depth_cube_array']: s#143
[#192 'texture_depth_multisampled_2d']: s#144
[#192 'texture_multisampled_2d']: s#151
[#192 'texture_storage_1d']: s#152
[#192 'texture_storage_2d']: s#153
[#192 'texture_storage_2d_array']: s#154
[#192 'texture_storage_3d']: s#155
[#192 'u32']: s#120
[#192 'vec2']: s#98
[#192 'vec3']: s#99
[#192 'vec4']: s#100
[#192 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#193 'array']: s#317
[#193 'atomic']: s#96
[#193 'bool']: s#89
[#193 'f16']: s#118
[#193 'f32']: s#117
[#193 'i32']: s#119
[#193 'mat2x2']: s#101
[#193 'mat2x3']: s#102
[#193 'mat2x4']: s#103
[#193 'mat3x2']: s#104
[#193 'mat3x3']: s#105
[#193 'mat3x4']: s#106
[#193 'mat4x2']: s#107
[#193 'mat4x3']: s#108
[#193 'mat4x4']: s#109
[#193 'ptr']: s#121
[#193 'sampler']: s#138
[#193 'sampler_comparison']: s#139
[#193 'texture_1d']: s#145
[#193 'texture_2d']: s#146
[#193 'texture_2d_array']: s#147
[#193 'texture_3d']: s#148
[#193 'texture_cube']: s#149
[#193 'texture_cube_array']: s#150
[#193 'texture_depth_2d']: s#140
[#193 'texture_depth_2d_array']: s#141
[#193 'texture_depth_cube']: s#142
[#193 'texture_depth_cube_array']: s#143
[#193 'texture_depth_multisampled_2d']: s#144
[#193 'texture_multisampled_2d']: s#151
[#193 'texture_storage_1d']: s#152
[#193 'texture_storage_2d']: s#153
[#193 'texture_storage_2d_array']: s#154
[#193 'texture_storage_3d']: s#155
[#193 'u32']: s#120
[#193 'vec2']: s#98
[#193 'vec3']: s#99
[#193 'vec4']: s#100
[#193 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#194 'function']: s#324
[#194 'private']: s#325
[#194 'storage']: s#328
[#194 'uniform']: s#327
[#194 'workgroup']: s#326
[#195 ')']: s#322
[#196 'array']: s#317
[#196 'atomic']: s#96
[#196 'bool']: s#89
[#196 'f16']: s#118
[#196 'f32']: s#117
[#196 'i32']: s#119
[#196 'mat2x2']: s#101
[#196 'mat2x3']: s#102
[#196 'mat2x4']: s#103
[#196 'mat3x2']: s#104
[#196 'mat3x3']: s#105
[#196 'mat3x4']: s#106
[#196 'mat4x2']: s#107
[#196 'mat4x3']: s#108
[#196 'mat4x4']: s#109
[#196 'ptr']: s#121
[#196 'sampler']: s#138
[#196 'sampler_comparison']: s#139
[#196 'texture_1d']: s#145
[#196 'texture_2d']: s#146
[#196 'texture_2d_array']: s#147
[#196 'texture_3d']: s#148
[#196 'texture_cube']: s#149
[#196 'texture_cube_array']: s#150
[#196 'texture_depth_2d']: s#140
[#196 'texture_depth_2d_array']: s#141
[#196 'texture_depth_cube']: s#142
[#196 'texture_depth_cube_array']: s#143
[#196 'texture_depth_multisampled_2d']: s#144
[#196 'texture_multisampled_2d']: s#151
[#196 'texture_storage_1d']: s#152
[#196 'texture_storage_2d']: s#153
[#196 'texture_storage_2d_array']: s#154
[#196 'texture_storage_3d']: s#155
[#196 'u32']: s#120
[#196 'vec2']: s#98
[#196 'vec3']: s#99
[#196 'vec4']: s#100
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#197 'array']: s#317
[#197 'atomic']: s#96
[#197 'bool']: s#89
[#197 'f16']: s#118
[#197 'f32']: s#117
[#197 'i32']: s#119
[#197 'mat2x2']: s#101
[#197 'mat2x3']: s#102
[#197 'mat2x4']: s#103
[#197 'mat3x2']: s#104
[#197 'mat3x3']: s#105
[#197 'mat3x4']: s#106
[#197 'mat4x2']: s#107
[#197 'mat4x3']: s#108
[#197 'mat4x4']: s#109
[#197 'ptr']: s#121
[#197 'sampler']: s#138
[#197 'sampler_comparison']: s#139
[#197 'texture_1d']: s#145
[#197 'texture_2d']: s#146
[#197 'texture_2d_array']: s#147
[#197 'texture_3d']: s#148
[#197 'texture_cube']: s#149
[#197 'texture_cube_array']: s#150
[#197 'texture_depth_2d']: s#140
[#197 'texture_depth_2d_array']: s#141
[#197 'texture_depth_cube']: s#142
[#197 'texture_depth_cube_array']: s#143
[#197 'texture_depth_multisampled_2d']: s#144
[#197 'texture_multisampled_2d']: s#151
[#197 'texture_storage_1d']: s#152
[#197 'texture_storage_2d']: s#153
[#197 'texture_storage_2d_array']: s#154
[#197 'texture_storage_3d']: s#155
[#197 'u32']: s#120
[#197 'vec2']: s#98
[#197 'vec3']: s#99
[#197 'vec4']: s#100
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#198 'array']: s#317
[#198 'atomic']: s#96
[#198 'bool']: s#89
[#198 'f16']: s#118
[#198 'f32']: s#117
[#198 'i32']: s#119
[#198 'mat2x2']: s#101
[#198 'mat2x3']: s#102
[#198 'mat2x4']: s#103
[#198 'mat3x2']: s#104
[#198 'mat3x3']: s#105
[#198 'mat3x4']: s#106
[#198 'mat4x2']: s#107
[#198 'mat4x3']: s#108
[#198 'mat4x4']: s#109
[#198 'ptr']: s#121
[#198 'sampler']: s#138
[#198 'sampler_comparison']: s#139
[#198 'texture_1d']: s#145
[#198 'texture_2d']: s#146
[#198 'texture_2d_array']: s#147
[#198 'texture_3d']: s#148
[#198 'texture_cube']: s#149
[#198 'texture_cube_array']: s#150
[#198 'texture_depth_2d']: s#140
[#198 'texture_depth_2d_array']: s#141
[#198 'texture_depth_cube']: s#142
[#198 'texture_depth_cube_array']: s#143
[#198 'texture_depth_multisampled_2d']: s#144
[#198 'texture_multisampled_2d']: s#151
[#198 'texture_storage_1d']: s#152
[#198 'texture_storage_2d']: s#153
[#198 'texture_storage_2d_array']: s#154
[#198 'texture_storage_3d']: s#155
[#198 'u32']: s#120
[#198 'vec2']: s#98
[#198 'vec3']: s#99
[#198 'vec4']: s#100
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#199 'array']: s#317
[#199 'atomic']: s#96
[#199 'bool']: s#89
[#199 'f16']: s#118
[#199 'f32']: s#117
[#199 'i32']: s#119
[#199 'mat2x2']: s#101
[#199 'mat2x3']: s#102
[#199 'mat2x4']: s#103
[#199 'mat3x2']: s#104
[#199 'mat3x3']: s#105
[#199 'mat3x4']: s#106
[#199 'mat4x2']: s#107
[#199 'mat4x3']: s#108
[#199 'mat4x4']: s#109
[#199 'ptr']: s#121
[#199 'sampler']: s#138
[#199 'sampler_comparison']: s#139
[#199 'texture_1d']: s#145
[#199 'texture_2d']: s#146
[#199 'texture_2d_array']: s#147
[#199 'texture_3d']: s#148
[#199 'texture_cube']: s#149
[#199 'texture_cube_array']: s#150
[#199 'texture_depth_2d']: s#140
[#199 'texture_depth_2d_array']: s#141
[#199 'texture_depth_cube']: s#142
[#199 'texture_depth_cube_array']: s#143
[#199 'texture_depth_multisampled_2d']: s#144
[#199 'texture_multisampled_2d']: s#151
[#199 'texture_storage_1d']: s#152
[#199 'texture_storage_2d']: s#153
[#199 'texture_storage_2d_array']: s#154
[#199 'texture_storage_3d']: s#155
[#199 'u32']: s#120
[#199 'vec2']: s#98
[#199 'vec3']: s#99
[#199 'vec4']: s#100
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#200 '!=']: r#129
[#200 '%']: r#129
[#200 '&&']: r#129
[#200 '&']: r#129
[#200 ')']: r#129
[#200 '*']: r#129
[#200 '+']: r#129
[#200 ',']: r#129
[#200 '-']: r#129
[#200 '.']: r#129
[#200 '/']: r#129
[#200 ':']: r#129
[#200 ';']: r#129
[#200 '<']: r#129
[#200 '<<']: r#129
[#200 '<=']: r#129
[#200 '==']: r#129
[#200 '>']: r#129
[#200 '>=']: r#129
[#200 '>>']: r#129
[#200 '[']: r#129
[#200 ']']: r#129
[#200 '^']: r#129
[#200 '{']: r#129
[#200 '|']: r#129
[#200 '||']: r#129
[#201 '!']: s#71
[#201 '&']: s#74
[#201 '(']: s#116
[#201 '*']: s#73
[#201 '-']: s#70
[#201 'array']: s#84
[#201 'atomic']: s#96
[#201 'bitcast']: s#79
[#201 'bool']: s#89
[#201 'f16']: s#118
[#201 'f32']: s#117
[#201 'false']: s#115
[#201 'i32']: s#119
[#201 'mat2x2']: s#101
[#201 'mat2x3']: s#102
[#201 'mat2x4']: s#103
[#201 'mat3x2']: s#104
[#201 'mat3x3']: s#105
[#201 'mat3x4']: s#106
[#201 'mat4x2']: s#107
[#201 'mat4x3']: s#108
[#201 'mat4x4']: s#109
[#201 'ptr']: s#121
[#201 'sampler']: s#138
[#201 'sampler_comparison']: s#139
[#201 'texture_1d']: s#145
[#201 'texture_2d']: s#146
[#201 'texture_2d_array']: s#147
[#201 'texture_3d']: s#148
[#201 'texture_cube']: s#149
[#201 'texture_cube_array']: s#150
[#201 'texture_depth_2d']: s#140
[#201 'texture_depth_2d_array']: s#141
[#201 'texture_depth_cube']: s#142
[#201 'texture_depth_cube_array']: s#143
[#201 'texture_depth_multisampled_2d']: s#144
[#201 'texture_multisampled_2d']: s#151
[#201 'texture_storage_1d']: s#152
[#201 'texture_storage_2d']: s#153
[#201 'texture_storage_2d_array']: s#154
[#201 'texture_storage_3d']: s#155
[#201 'true']: s#114
[#201 'u32']: s#120
[#201 'vec2']: s#98
[#201 'vec3']: s#99
[#201 'vec4']: s#100
[#201 '~']: s#72
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#201 /0[fh]/]: s#130
[#201 /0[iu]?/]: s#127
[#201 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#201 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#201 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#201 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#201 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#201 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#201 /[1-9][0-9]*[fh]/]: s#131
[#201 /[1-9][0-9]*[iu]?/]: s#128
[#202 '!=']: r#130
[#202 '%']: r#130
[#202 '&&']: r#130
[#202 '&']: r#130
[#202 ')']: r#130
[#202 '*']: r#130
[#202 '+']: r#130
[#202 ',']: r#130
[#202 '-']: r#130
[#202 '/']: r#130
[#202 ':']: r#130
[#202 ';']: r#130
[#202 '<']: r#130
[#202 '<<']: r#130
[#202 '<=']: r#130
[#202 '==']: r#130
[#202 '>']: r#130
[#202 '>=']: r#130
[#202 '>>']: r#130
[#202 ']']: r#130
[#202 '^']: r#130
[#202 '{']: r#130
[#202 '|']: r#130
[#202 '||']: r#130
[#203 '!=']: r#131
[#203 '%']: r#131
[#203 '&&']: r#131
[#203 '&']: r#131
[#203 ')']: r#131
[#203 '*']: r#131
[#203 '+']: r#131
[#203 ',']: r#131
[#203 '-']: r#131
[#203 '/']: r#131
[#203 ':']: r#131
[#203 ';']: r#131
[#203 '<']: r#131
[#203 '<<']: r#131
[#203 '<=']: r#131
[#203 '==']: r#131
[#203 '>']: r#131
[#203 '>=']: r#131
[#203 '>>']: r#131
[#203 ']']: r#131
[#203 '^']: r#131
[#203 '{']: r#131
[#203 '|']: r#131
[#203 '||']: r#131
[#204 '!']: s#71
[#204 '&']: s#74
[#204 '(']: s#116
[#204 '*']: s#73
[#204 '-']: s#70
[#204 'array']: s#84
[#204 'atomic']: s#96
[#204 'bitcast']: s#79
[#204 'bool']: s#89
[#204 'f16']: s#118
[#204 'f32']: s#117
[#204 'false']: s#115
[#204 'i32']: s#119
[#204 'mat2x2']: s#101
[#204 'mat2x3']: s#102
[#204 'mat2x4']: s#103
[#204 'mat3x2']: s#104
[#204 'mat3x3']: s#105
[#204 'mat3x4']: s#106
[#204 'mat4x2']: s#107
[#204 'mat4x3']: s#108
[#204 'mat4x4']: s#109
[#204 'ptr']: s#121
[#204 'sampler']: s#138
[#204 'sampler_comparison']: s#139
[#204 'texture_1d']: s#145
[#204 'texture_2d']: s#146
[#204 'texture_2d_array']: s#147
[#204 'texture_3d']: s#148
[#204 'texture_cube']: s#149
[#204 'texture_cube_array']: s#150
[#204 'texture_depth_2d']: s#140
[#204 'texture_depth_2d_array']: s#141
[#204 'texture_depth_cube']: s#142
[#204 'texture_depth_cube_array']: s#143
[#204 'texture_depth_multisampled_2d']: s#144
[#204 'texture_multisampled_2d']: s#151
[#204 'texture_storage_1d']: s#152
[#204 'texture_storage_2d']: s#153
[#204 'texture_storage_2d_array']: s#154
[#204 'texture_storage_3d']: s#155
[#204 'true']: s#114
[#204 'u32']: s#120
[#204 'vec2']: s#98
[#204 'vec3']: s#99
[#204 'vec4']: s#100
[#204 '~']: s#72
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#204 /0[fh]/]: s#130
[#204 /0[iu]?/]: s#127
[#204 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#204 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#204 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#204 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#204 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#204 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#204 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#204 /[1-9][0-9]*[fh]/]: s#131
[#204 /[1-9][0-9]*[iu]?/]: s#128
[#205 '/[rgba]/']: s#300
[#205 '/[rgba][rgba]/']: s#301
[#205 '/[rgba][rgba][rgba]/']: s#302
[#205 '/[rgba][rgba][rgba][rgba]/']: s#303
[#205 '/[xyzw]/']: s#304
[#205 '/[xyzw][xyzw]/']: s#305
[#205 '/[xyzw][xyzw][xyzw]/']: s#306
[#205 '/[xyzw][xyzw][xyzw][xyzw]/']: s#307
[#205 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#299
[#206 '!']: r#132
[#206 '&']: r#132
[#206 '(']: r#132
[#206 '*']: r#132
[#206 '-']: r#132
[#206 'array']: r#132
[#206 'atomic']: r#132
[#206 'bitcast']: r#132
[#206 'bool']: r#132
[#206 'f16']: r#132
[#206 'f32']: r#132
[#206 'false']: r#132
[#206 'i32']: r#132
[#206 'mat2x2']: r#132
[#206 'mat2x3']: r#132
[#206 'mat2x4']: r#132
[#206 'mat3x2']: r#132
[#206 'mat3x3']: r#132
[#206 'mat3x4']: r#132
[#206 'mat4x2']: r#132
[#206 'mat4x3']: r#132
[#206 'mat4x4']: r#132
[#206 'ptr']: r#132
[#206 'sampler']: r#132
[#206 'sampler_comparison']: r#132
[#206 'texture_1d']: r#132
[#206 'texture_2d']: r#132
[#206 'texture_2d_array']: r#132
[#206 'texture_3d']: r#132
[#206 'texture_cube']: r#132
[#206 'texture_cube_array']: r#132
[#206 'texture_depth_2d']: r#132
[#206 'texture_depth_2d_array']: r#132
[#206 'texture_depth_cube']: r#132
[#206 'texture_depth_cube_array']: r#132
[#206 'texture_depth_multisampled_2d']: r#132
[#206 'texture_multisampled_2d']: r#132
[#206 'texture_storage_1d']: r#132
[#206 'texture_storage_2d']: r#132
[#206 'texture_storage_2d_array']: r#132
[#206 'texture_storage_3d']: r#132
[#206 'true']: r#132
[#206 'u32']: r#132
[#206 'vec2']: r#132
[#206 'vec3']: r#132
[#206 'vec4']: r#132
[#206 '~']: r#132
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: r#132
[#208 '!=']: r#133
[#208 '%']: r#133
[#208 '&&']: r#133
[#208 '&']: r#133
[#208 ')']: r#133
[#208 '*']: r#133
[#208 '+']: r#133
[#208 ',']: r#133
[#208 '-']: r#133
[#208 '/']: r#133
[#208 ':']: r#133
[#208 ';']: r#133
[#208 '<']: r#133
[#208 '<<']: r#133
[#208 '<=']: r#133
[#208 '==']: r#133
[#208 '>']: r#133
[#208 '>=']: r#133
[#208 '>>']: r#133
[#208 ']']: r#133
[#208 '^']: r#133
[#208 '{']: r#133
[#208 '|']: r#133
[#208 '||']: r#133
[#209 '!=']: r#134
[#209 '%']: r#134
[#209 '&&']: r#134
[#209 '&']: r#134
[#209 ')']: r#134
[#209 '*']: r#134
[#209 '+']: r#134
[#209 ',']: r#134
[#209 '-']: r#134
[#209 '/']: r#134
[#209 ':']: r#134
[#209 ';']: r#134
[#209 '<']: r#134
[#209 '<<']: r#134
[#209 '<=']: r#134
[#209 '==']: r#134
[#209 '>']: r#134
[#209 '>=']: r#134
[#209 '>>']: r#134
[#209 ']']: r#134
[#209 '^']: r#134
[#209 '{']: r#134
[#209 '|']: r#134
[#209 '||']: r#134
[#210 '!=']: r#135
[#210 '%']: r#135
[#210 '&&']: r#135
[#210 '&']: r#135
[#210 ')']: r#135
[#210 '*']: r#135
[#210 '+']: r#135
[#210 ',']: r#135
[#210 '-']: r#135
[#210 '/']: r#135
[#210 ':']: r#135
[#210 ';']: r#135
[#210 '<']: r#135
[#210 '<<']: r#135
[#210 '<=']: r#135
[#210 '==']: r#135
[#210 '>']: r#135
[#210 '>=']: r#135
[#210 '>>']: r#135
[#210 ']']: r#135
[#210 '^']: r#135
[#210 '{']: r#135
[#210 '|']: r#135
[#210 '||']: r#135
[#211 '!=']: r#136
[#211 '%']: r#136
[#211 '&&']: r#136
[#211 '&']: r#136
[#211 ')']: r#136
[#211 '*']: r#136
[#211 '+']: r#136
[#211 ',']: r#136
[#211 '-']: r#136
[#211 '/']: r#136
[#211 ':']: r#136
[#211 ';']: r#136
[#211 '<']: r#136
[#211 '<<']: r#136
[#211 '<=']: r#136
[#211 '==']: r#136
[#211 '>']: r#136
[#211 '>=']: r#136
[#211 '>>']: r#136
[#211 ']']: r#136
[#211 '^']: r#136
[#211 '{']: r#136
[#211 '|']: r#136
[#211 '||']: r#136
[#212 '!=']: r#137
[#212 '%']: r#137
[#212 '&&']: r#137
[#212 '&']: r#137
[#212 ')']: r#137
[#212 '*']: r#137
[#212 '+']: r#137
[#212 ',']: r#137
[#212 '-']: r#137
[#212 '/']: r#137
[#212 ':']: r#137
[#212 ';']: r#137
[#212 '<']: r#137
[#212 '<<']: r#137
[#212 '<=']: r#137
[#212 '==']: r#137
[#212 '>']: r#137
[#212 '>=']: r#137
[#212 '>>']: r#137
[#212 ']']: r#137
[#212 '^']: r#137
[#212 '{']: r#137
[#212 '|']: r#137
[#212 '||']: r#137
[#213 '!']: s#71
[#213 '&']: s#74
[#213 '(']: s#116
[#213 '*']: s#73
[#213 '-']: s#70
[#213 'array']: s#84
[#213 'atomic']: s#96
[#213 'bitcast']: s#79
[#213 'bool']: s#89
[#213 'f16']: s#118
[#213 'f32']: s#117
[#213 'false']: s#115
[#213 'i32']: s#119
[#213 'mat2x2']: s#101
[#213 'mat2x3']: s#102
[#213 'mat2x4']: s#103
[#213 'mat3x2']: s#104
[#213 'mat3x3']: s#105
[#213 'mat3x4']: s#106
[#213 'mat4x2']: s#107
[#213 'mat4x3']: s#108
[#213 'mat4x4']: s#109
[#213 'ptr']: s#121
[#213 'sampler']: s#138
[#213 'sampler_comparison']: s#139
[#213 'texture_1d']: s#145
[#213 'texture_2d']: s#146
[#213 'texture_2d_array']: s#147
[#213 'texture_3d']: s#148
[#213 'texture_cube']: s#149
[#213 'texture_cube_array']: s#150
[#213 'texture_depth_2d']: s#140
[#213 'texture_depth_2d_array']: s#141
[#213 'texture_depth_cube']: s#142
[#213 'texture_depth_cube_array']: s#143
[#213 'texture_depth_multisampled_2d']: s#144
[#213 'texture_multisampled_2d']: s#151
[#213 'texture_storage_1d']: s#152
[#213 'texture_storage_2d']: s#153
[#213 'texture_storage_2d_array']: s#154
[#213 'texture_storage_3d']: s#155
[#213 'true']: s#114
[#213 'u32']: s#120
[#213 'vec2']: s#98
[#213 'vec3']: s#99
[#213 'vec4']: s#100
[#213 '~']: s#72
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#213 /0[fh]/]: s#130
[#213 /0[iu]?/]: s#127
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#213 /[1-9][0-9]*[fh]/]: s#131
[#213 /[1-9][0-9]*[iu]?/]: s#128
[#214 '!']: r#138
[#214 '&']: r#138
[#214 '(']: r#138
[#214 '*']: r#138
[#214 '-']: r#138
[#214 'array']: r#138
[#214 'atomic']: r#138
[#214 'bitcast']: r#138
[#214 'bool']: r#138
[#214 'f16']: r#138
[#214 'f32']: r#138
[#214 'false']: r#138
[#214 'i32']: r#138
[#214 'mat2x2']: r#138
[#214 'mat2x3']: r#138
[#214 'mat2x4']: r#138
[#214 'mat3x2']: r#138
[#214 'mat3x3']: r#138
[#214 'mat3x4']: r#138
[#214 'mat4x2']: r#138
[#214 'mat4x3']: r#138
[#214 'mat4x4']: r#138
[#214 'ptr']: r#138
[#214 'sampler']: r#138
[#214 'sampler_comparison']: r#138
[#214 'texture_1d']: r#138
[#214 'texture_2d']: r#138
[#214 'texture_2d_array']: r#138
[#214 'texture_3d']: r#138
[#214 'texture_cube']: r#138
[#214 'texture_cube_array']: r#138
[#214 'texture_depth_2d']: r#138
[#214 'texture_depth_2d_array']: r#138
[#214 'texture_depth_cube']: r#138
[#214 'texture_depth_cube_array']: r#138
[#214 'texture_depth_multisampled_2d']: r#138
[#214 'texture_multisampled_2d']: r#138
[#214 'texture_storage_1d']: r#138
[#214 'texture_storage_2d']: r#138
[#214 'texture_storage_2d_array']: r#138
[#214 'texture_storage_3d']: r#138
[#214 'true']: r#138
[#214 'u32']: r#138
[#214 'vec2']: r#138
[#214 'vec3']: r#138
[#214 'vec4']: r#138
[#214 '~']: r#138
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: r#138
[#215 '!']: r#139
[#215 '&']: r#139
[#215 '(']: r#139
[#215 '*']: r#139
[#215 '-']: r#139
[#215 'array']: r#139
[#215 'atomic']: r#139
[#215 'bitcast']: r#139
[#215 'bool']: r#139
[#215 'f16']: r#139
[#215 'f32']: r#139
[#215 'false']: r#139
[#215 'i32']: r#139
[#215 'mat2x2']: r#139
[#215 'mat2x3']: r#139
[#215 'mat2x4']: r#139
[#215 'mat3x2']: r#139
[#215 'mat3x3']: r#139
[#215 'mat3x4']: r#139
[#215 'mat4x2']: r#139
[#215 'mat4x3']: r#139
[#215 'mat4x4']: r#139
[#215 'ptr']: r#139
[#215 'sampler']: r#139
[#215 'sampler_comparison']: r#139
[#215 'texture_1d']: r#139
[#215 'texture_2d']: r#139
[#215 'texture_2d_array']: r#139
[#215 'texture_3d']: r#139
[#215 'texture_cube']: r#139
[#215 'texture_cube_array']: r#139
[#215 'texture_depth_2d']: r#139
[#215 'texture_depth_2d_array']: r#139
[#215 'texture_depth_cube']: r#139
[#215 'texture_depth_cube_array']: r#139
[#215 'texture_depth_multisampled_2d']: r#139
[#215 'texture_multisampled_2d']: r#139
[#215 'texture_storage_1d']: r#139
[#215 'texture_storage_2d']: r#139
[#215 'texture_storage_2d_array']: r#139
[#215 'texture_storage_3d']: r#139
[#215 'true']: r#139
[#215 'u32']: r#139
[#215 'vec2']: r#139
[#215 'vec3']: r#139
[#215 'vec4']: r#139
[#215 '~']: r#139
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: r#139
[#216 '!']: r#140
[#216 '&']: r#140
[#216 '(']: r#140
[#216 '*']: r#140
[#216 '-']: r#140
[#216 'array']: r#140
[#216 'atomic']: r#140
[#216 'bitcast']: r#140
[#216 'bool']: r#140
[#216 'f16']: r#140
[#216 'f32']: r#140
[#216 'false']: r#140
[#216 'i32']: r#140
[#216 'mat2x2']: r#140
[#216 'mat2x3']: r#140
[#216 'mat2x4']: r#140
[#216 'mat3x2']: r#140
[#216 'mat3x3']: r#140
[#216 'mat3x4']: r#140
[#216 'mat4x2']: r#140
[#216 'mat4x3']: r#140
[#216 'mat4x4']: r#140
[#216 'ptr']: r#140
[#216 'sampler']: r#140
[#216 'sampler_comparison']: r#140
[#216 'texture_1d']: r#140
[#216 'texture_2d']: r#140
[#216 'texture_2d_array']: r#140
[#216 'texture_3d']: r#140
[#216 'texture_cube']: r#140
[#216 'texture_cube_array']: r#140
[#216 'texture_depth_2d']: r#140
[#216 'texture_depth_2d_array']: r#140
[#216 'texture_depth_cube']: r#140
[#216 'texture_depth_cube_array']: r#140
[#216 'texture_depth_multisampled_2d']: r#140
[#216 'texture_multisampled_2d']: r#140
[#216 'texture_storage_1d']: r#140
[#216 'texture_storage_2d']: r#140
[#216 'texture_storage_2d_array']: r#140
[#216 'texture_storage_3d']: r#140
[#216 'true']: r#140
[#216 'u32']: r#140
[#216 'vec2']: r#140
[#216 'vec3']: r#140
[#216 'vec4']: r#140
[#216 '~']: r#140
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: r#140
[#217 '!']: r#141
[#217 '&']: r#141
[#217 '(']: r#141
[#217 '*']: r#141
[#217 '-']: r#141
[#217 'array']: r#141
[#217 'atomic']: r#141
[#217 'bitcast']: r#141
[#217 'bool']: r#141
[#217 'f16']: r#141
[#217 'f32']: r#141
[#217 'false']: r#141
[#217 'i32']: r#141
[#217 'mat2x2']: r#141
[#217 'mat2x3']: r#141
[#217 'mat2x4']: r#141
[#217 'mat3x2']: r#141
[#217 'mat3x3']: r#141
[#217 'mat3x4']: r#141
[#217 'mat4x2']: r#141
[#217 'mat4x3']: r#141
[#217 'mat4x4']: r#141
[#217 'ptr']: r#141
[#217 'sampler']: r#141
[#217 'sampler_comparison']: r#141
[#217 'texture_1d']: r#141
[#217 'texture_2d']: r#141
[#217 'texture_2d_array']: r#141
[#217 'texture_3d']: r#141
[#217 'texture_cube']: r#141
[#217 'texture_cube_array']: r#141
[#217 'texture_depth_2d']: r#141
[#217 'texture_depth_2d_array']: r#141
[#217 'texture_depth_cube']: r#141
[#217 'texture_depth_cube_array']: r#141
[#217 'texture_depth_multisampled_2d']: r#141
[#217 'texture_multisampled_2d']: r#141
[#217 'texture_storage_1d']: r#141
[#217 'texture_storage_2d']: r#141
[#217 'texture_storage_2d_array']: r#141
[#217 'texture_storage_3d']: r#141
[#217 'true']: r#141
[#217 'u32']: r#141
[#217 'vec2']: r#141
[#217 'vec3']: r#141
[#217 'vec4']: r#141
[#217 '~']: r#141
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: r#141
[#218 '!']: r#142
[#218 '&']: r#142
[#218 '(']: r#142
[#218 '*']: r#142
[#218 '-']: r#142
[#218 'array']: r#142
[#218 'atomic']: r#142
[#218 'bitcast']: r#142
[#218 'bool']: r#142
[#218 'f16']: r#142
[#218 'f32']: r#142
[#218 'false']: r#142
[#218 'i32']: r#142
[#218 'mat2x2']: r#142
[#218 'mat2x3']: r#142
[#218 'mat2x4']: r#142
[#218 'mat3x2']: r#142
[#218 'mat3x3']: r#142
[#218 'mat3x4']: r#142
[#218 'mat4x2']: r#142
[#218 'mat4x3']: r#142
[#218 'mat4x4']: r#142
[#218 'ptr']: r#142
[#218 'sampler']: r#142
[#218 'sampler_comparison']: r#142
[#218 'texture_1d']: r#142
[#218 'texture_2d']: r#142
[#218 'texture_2d_array']: r#142
[#218 'texture_3d']: r#142
[#218 'texture_cube']: r#142
[#218 'texture_cube_array']: r#142
[#218 'texture_depth_2d']: r#142
[#218 'texture_depth_2d_array']: r#142
[#218 'texture_depth_cube']: r#142
[#218 'texture_depth_cube_array']: r#142
[#218 'texture_depth_multisampled_2d']: r#142
[#218 'texture_multisampled_2d']: r#142
[#218 'texture_storage_1d']: r#142
[#218 'texture_storage_2d']: r#142
[#218 'texture_storage_2d_array']: r#142
[#218 'texture_storage_3d']: r#142
[#218 'true']: r#142
[#218 'u32']: r#142
[#218 'vec2']: r#142
[#218 'vec3']: r#142
[#218 'vec4']: r#142
[#218 '~']: r#142
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: r#142
[#219 '!']: s#71
[#219 '&']: s#74
[#219 '(']: s#116
[#219 '*']: s#73
[#219 '-']: s#70
[#219 'array']: s#84
[#219 'atomic']: s#96
[#219 'bitcast']: s#79
[#219 'bool']: s#89
[#219 'f16']: s#118
[#219 'f32']: s#117
[#219 'false']: s#115
[#219 'i32']: s#119
[#219 'mat2x2']: s#101
[#219 'mat2x3']: s#102
[#219 'mat2x4']: s#103
[#219 'mat3x2']: s#104
[#219 'mat3x3']: s#105
[#219 'mat3x4']: s#106
[#219 'mat4x2']: s#107
[#219 'mat4x3']: s#108
[#219 'mat4x4']: s#109
[#219 'ptr']: s#121
[#219 'sampler']: s#138
[#219 'sampler_comparison']: s#139
[#219 'texture_1d']: s#145
[#219 'texture_2d']: s#146
[#219 'texture_2d_array']: s#147
[#219 'texture_3d']: s#148
[#219 'texture_cube']: s#149
[#219 'texture_cube_array']: s#150
[#219 'texture_depth_2d']: s#140
[#219 'texture_depth_2d_array']: s#141
[#219 'texture_depth_cube']: s#142
[#219 'texture_depth_cube_array']: s#143
[#219 'texture_depth_multisampled_2d']: s#144
[#219 'texture_multisampled_2d']: s#151
[#219 'texture_storage_1d']: s#152
[#219 'texture_storage_2d']: s#153
[#219 'texture_storage_2d_array']: s#154
[#219 'texture_storage_3d']: s#155
[#219 'true']: s#114
[#219 'u32']: s#120
[#219 'vec2']: s#98
[#219 'vec3']: s#99
[#219 'vec4']: s#100
[#219 '~']: s#72
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#219 /0[fh]/]: s#130
[#219 /0[iu]?/]: s#127
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#219 /[1-9][0-9]*[fh]/]: s#131
[#219 /[1-9][0-9]*[iu]?/]: s#128
[#220 '!']: s#71
[#220 '&']: s#74
[#220 '(']: s#116
[#220 '*']: s#73
[#220 '-']: s#70
[#220 'array']: s#84
[#220 'atomic']: s#96
[#220 'bitcast']: s#79
[#220 'bool']: s#89
[#220 'f16']: s#118
[#220 'f32']: s#117
[#220 'false']: s#115
[#220 'i32']: s#119
[#220 'mat2x2']: s#101
[#220 'mat2x3']: s#102
[#220 'mat2x4']: s#103
[#220 'mat3x2']: s#104
[#220 'mat3x3']: s#105
[#220 'mat3x4']: s#106
[#220 'mat4x2']: s#107
[#220 'mat4x3']: s#108
[#220 'mat4x4']: s#109
[#220 'ptr']: s#121
[#220 'sampler']: s#138
[#220 'sampler_comparison']: s#139
[#220 'texture_1d']: s#145
[#220 'texture_2d']: s#146
[#220 'texture_2d_array']: s#147
[#220 'texture_3d']: s#148
[#220 'texture_cube']: s#149
[#220 'texture_cube_array']: s#150
[#220 'texture_depth_2d']: s#140
[#220 'texture_depth_2d_array']: s#141
[#220 'texture_depth_cube']: s#142
[#220 'texture_depth_cube_array']: s#143
[#220 'texture_depth_multisampled_2d']: s#144
[#220 'texture_multisampled_2d']: s#151
[#220 'texture_storage_1d']: s#152
[#220 'texture_storage_2d']: s#153
[#220 'texture_storage_2d_array']: s#154
[#220 'texture_storage_3d']: s#155
[#220 'true']: s#114
[#220 'u32']: s#120
[#220 'vec2']: s#98
[#220 'vec3']: s#99
[#220 'vec4']: s#100
[#220 '~']: s#72
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#220 /0[fh]/]: s#130
[#220 /0[iu]?/]: s#127
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#220 /[1-9][0-9]*[fh]/]: s#131
[#220 /[1-9][0-9]*[iu]?/]: s#128
[#221 '!']: r#143
[#221 '&']: r#143
[#221 '(']: r#143
[#221 '*']: r#143
[#221 '-']: r#143
[#221 'array']: r#143
[#221 'atomic']: r#143
[#221 'bitcast']: r#143
[#221 'bool']: r#143
[#221 'f16']: r#143
[#221 'f32']: r#143
[#221 'false']: r#143
[#221 'i32']: r#143
[#221 'mat2x2']: r#143
[#221 'mat2x3']: r#143
[#221 'mat2x4']: r#143
[#221 'mat3x2']: r#143
[#221 'mat3x3']: r#143
[#221 'mat3x4']: r#143
[#221 'mat4x2']: r#143
[#221 'mat4x3']: r#143
[#221 'mat4x4']: r#143
[#221 'ptr']: r#143
[#221 'sampler']: r#143
[#221 'sampler_comparison']: r#143
[#221 'texture_1d']: r#143
[#221 'texture_2d']: r#143
[#221 'texture_2d_array']: r#143
[#221 'texture_3d']: r#143
[#221 'texture_cube']: r#143
[#221 'texture_cube_array']: r#143
[#221 'texture_depth_2d']: r#143
[#221 'texture_depth_2d_array']: r#143
[#221 'texture_depth_cube']: r#143
[#221 'texture_depth_cube_array']: r#143
[#221 'texture_depth_multisampled_2d']: r#143
[#221 'texture_multisampled_2d']: r#143
[#221 'texture_storage_1d']: r#143
[#221 'texture_storage_2d']: r#143
[#221 'texture_storage_2d_array']: r#143
[#221 'texture_storage_3d']: r#143
[#221 'true']: r#143
[#221 'u32']: r#143
[#221 'vec2']: r#143
[#221 'vec3']: r#143
[#221 'vec4']: r#143
[#221 '~']: r#143
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: r#143
[#222 '!']: r#144
[#222 '&']: r#144
[#222 '(']: r#144
[#222 '*']: r#144
[#222 '-']: r#144
[#222 'array']: r#144
[#222 'atomic']: r#144
[#222 'bitcast']: r#144
[#222 'bool']: r#144
[#222 'f16']: r#144
[#222 'f32']: r#144
[#222 'false']: r#144
[#222 'i32']: r#144
[#222 'mat2x2']: r#144
[#222 'mat2x3']: r#144
[#222 'mat2x4']: r#144
[#222 'mat3x2']: r#144
[#222 'mat3x3']: r#144
[#222 'mat3x4']: r#144
[#222 'mat4x2']: r#144
[#222 'mat4x3']: r#144
[#222 'mat4x4']: r#144
[#222 'ptr']: r#144
[#222 'sampler']: r#144
[#222 'sampler_comparison']: r#144
[#222 'texture_1d']: r#144
[#222 'texture_2d']: r#144
[#222 'texture_2d_array']: r#144
[#222 'texture_3d']: r#144
[#222 'texture_cube']: r#144
[#222 'texture_cube_array']: r#144
[#222 'texture_depth_2d']: r#144
[#222 'texture_depth_2d_array']: r#144
[#222 'texture_depth_cube']: r#144
[#222 'texture_depth_cube_array']: r#144
[#222 'texture_depth_multisampled_2d']: r#144
[#222 'texture_multisampled_2d']: r#144
[#222 'texture_storage_1d']: r#144
[#222 'texture_storage_2d']: r#144
[#222 'texture_storage_2d_array']: r#144
[#222 'texture_storage_3d']: r#144
[#222 'true']: r#144
[#222 'u32']: r#144
[#222 'vec2']: r#144
[#222 'vec3']: r#144
[#222 'vec4']: r#144
[#222 '~']: r#144
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: r#144
[#223 '!']: s#71
[#223 '&']: s#74
[#223 '(']: s#116
[#223 '*']: s#73
[#223 '-']: s#70
[#223 'array']: s#84
[#223 'atomic']: s#96
[#223 'bitcast']: s#79
[#223 'bool']: s#89
[#223 'f16']: s#118
[#223 'f32']: s#117
[#223 'false']: s#115
[#223 'i32']: s#119
[#223 'mat2x2']: s#101
[#223 'mat2x3']: s#102
[#223 'mat2x4']: s#103
[#223 'mat3x2']: s#104
[#223 'mat3x3']: s#105
[#223 'mat3x4']: s#106
[#223 'mat4x2']: s#107
[#223 'mat4x3']: s#108
[#223 'mat4x4']: s#109
[#223 'ptr']: s#121
[#223 'sampler']: s#138
[#223 'sampler_comparison']: s#139
[#223 'texture_1d']: s#145
[#223 'texture_2d']: s#146
[#223 'texture_2d_array']: s#147
[#223 'texture_3d']: s#148
[#223 'texture_cube']: s#149
[#223 'texture_cube_array']: s#150
[#223 'texture_depth_2d']: s#140
[#223 'texture_depth_2d_array']: s#141
[#223 'texture_depth_cube']: s#142
[#223 'texture_depth_cube_array']: s#143
[#223 'texture_depth_multisampled_2d']: s#144
[#223 'texture_multisampled_2d']: s#151
[#223 'texture_storage_1d']: s#152
[#223 'texture_storage_2d']: s#153
[#223 'texture_storage_2d_array']: s#154
[#223 'texture_storage_3d']: s#155
[#223 'true']: s#114
[#223 'u32']: s#120
[#223 'vec2']: s#98
[#223 'vec3']: s#99
[#223 'vec4']: s#100
[#223 '~']: s#72
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#223 /0[fh]/]: s#130
[#223 /0[iu]?/]: s#127
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#223 /[1-9][0-9]*[fh]/]: s#131
[#223 /[1-9][0-9]*[iu]?/]: s#128
[#224 '!']: r#145
[#224 '&']: r#145
[#224 '(']: r#145
[#224 '*']: r#145
[#224 '-']: r#145
[#224 'array']: r#145
[#224 'atomic']: r#145
[#224 'bitcast']: r#145
[#224 'bool']: r#145
[#224 'f16']: r#145
[#224 'f32']: r#145
[#224 'false']: r#145
[#224 'i32']: r#145
[#224 'mat2x2']: r#145
[#224 'mat2x3']: r#145
[#224 'mat2x4']: r#145
[#224 'mat3x2']: r#145
[#224 'mat3x3']: r#145
[#224 'mat3x4']: r#145
[#224 'mat4x2']: r#145
[#224 'mat4x3']: r#145
[#224 'mat4x4']: r#145
[#224 'ptr']: r#145
[#224 'sampler']: r#145
[#224 'sampler_comparison']: r#145
[#224 'texture_1d']: r#145
[#224 'texture_2d']: r#145
[#224 'texture_2d_array']: r#145
[#224 'texture_3d']: r#145
[#224 'texture_cube']: r#145
[#224 'texture_cube_array']: r#145
[#224 'texture_depth_2d']: r#145
[#224 'texture_depth_2d_array']: r#145
[#224 'texture_depth_cube']: r#145
[#224 'texture_depth_cube_array']: r#145
[#224 'texture_depth_multisampled_2d']: r#145
[#224 'texture_multisampled_2d']: r#145
[#224 'texture_storage_1d']: r#145
[#224 'texture_storage_2d']: r#145
[#224 'texture_storage_2d_array']: r#145
[#224 'texture_storage_3d']: r#145
[#224 'true']: r#145
[#224 'u32']: r#145
[#224 'vec2']: r#145
[#224 'vec3']: r#145
[#224 'vec4']: r#145
[#224 '~']: r#145
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: r#145
[#225 '!']: r#146
[#225 '&']: r#146
[#225 '(']: r#146
[#225 '*']: r#146
[#225 '-']: r#146
[#225 'array']: r#146
[#225 'atomic']: r#146
[#225 'bitcast']: r#146
[#225 'bool']: r#146
[#225 'f16']: r#146
[#225 'f32']: r#146
[#225 'false']: r#146
[#225 'i32']: r#146
[#225 'mat2x2']: r#146
[#225 'mat2x3']: r#146
[#225 'mat2x4']: r#146
[#225 'mat3x2']: r#146
[#225 'mat3x3']: r#146
[#225 'mat3x4']: r#146
[#225 'mat4x2']: r#146
[#225 'mat4x3']: r#146
[#225 'mat4x4']: r#146
[#225 'ptr']: r#146
[#225 'sampler']: r#146
[#225 'sampler_comparison']: r#146
[#225 'texture_1d']: r#146
[#225 'texture_2d']: r#146
[#225 'texture_2d_array']: r#146
[#225 'texture_3d']: r#146
[#225 'texture_cube']: r#146
[#225 'texture_cube_array']: r#146
[#225 'texture_depth_2d']: r#146
[#225 'texture_depth_2d_array']: r#146
[#225 'texture_depth_cube']: r#146
[#225 'texture_depth_cube_array']: r#146
[#225 'texture_depth_multisampled_2d']: r#146
[#225 'texture_multisampled_2d']: r#146
[#225 'texture_storage_1d']: r#146
[#225 'texture_storage_2d']: r#146
[#225 'texture_storage_2d_array']: r#146
[#225 'texture_storage_3d']: r#146
[#225 'true']: r#146
[#225 'u32']: r#146
[#225 'vec2']: r#146
[#225 'vec3']: r#146
[#225 'vec4']: r#146
[#225 '~']: r#146
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: r#146
[#226 '!']: r#147
[#226 '&']: r#147
[#226 '(']: r#147
[#226 '*']: r#147
[#226 '-']: r#147
[#226 'array']: r#147
[#226 'atomic']: r#147
[#226 'bitcast']: r#147
[#226 'bool']: r#147
[#226 'f16']: r#147
[#226 'f32']: r#147
[#226 'false']: r#147
[#226 'i32']: r#147
[#226 'mat2x2']: r#147
[#226 'mat2x3']: r#147
[#226 'mat2x4']: r#147
[#226 'mat3x2']: r#147
[#226 'mat3x3']: r#147
[#226 'mat3x4']: r#147
[#226 'mat4x2']: r#147
[#226 'mat4x3']: r#147
[#226 'mat4x4']: r#147
[#226 'ptr']: r#147
[#226 'sampler']: r#147
[#226 'sampler_comparison']: r#147
[#226 'texture_1d']: r#147
[#226 'texture_2d']: r#147
[#226 'texture_2d_array']: r#147
[#226 'texture_3d']: r#147
[#226 'texture_cube']: r#147
[#226 'texture_cube_array']: r#147
[#226 'texture_depth_2d']: r#147
[#226 'texture_depth_2d_array']: r#147
[#226 'texture_depth_cube']: r#147
[#226 'texture_depth_cube_array']: r#147
[#226 'texture_depth_multisampled_2d']: r#147
[#226 'texture_multisampled_2d']: r#147
[#226 'texture_storage_1d']: r#147
[#226 'texture_storage_2d']: r#147
[#226 'texture_storage_2d_array']: r#147
[#226 'texture_storage_3d']: r#147
[#226 'true']: r#147
[#226 'u32']: r#147
[#226 'vec2']: r#147
[#226 'vec3']: r#147
[#226 'vec4']: r#147
[#226 '~']: r#147
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: r#147
[#227 '!']: s#71
[#227 '&']: s#74
[#227 '(']: s#116
[#227 '*']: s#73
[#227 '-']: s#70
[#227 'array']: s#84
[#227 'atomic']: s#96
[#227 'bitcast']: s#79
[#227 'bool']: s#89
[#227 'f16']: s#118
[#227 'f32']: s#117
[#227 'false']: s#115
[#227 'i32']: s#119
[#227 'mat2x2']: s#101
[#227 'mat2x3']: s#102
[#227 'mat2x4']: s#103
[#227 'mat3x2']: s#104
[#227 'mat3x3']: s#105
[#227 'mat3x4']: s#106
[#227 'mat4x2']: s#107
[#227 'mat4x3']: s#108
[#227 'mat4x4']: s#109
[#227 'ptr']: s#121
[#227 'sampler']: s#138
[#227 'sampler_comparison']: s#139
[#227 'texture_1d']: s#145
[#227 'texture_2d']: s#146
[#227 'texture_2d_array']: s#147
[#227 'texture_3d']: s#148
[#227 'texture_cube']: s#149
[#227 'texture_cube_array']: s#150
[#227 'texture_depth_2d']: s#140
[#227 'texture_depth_2d_array']: s#141
[#227 'texture_depth_cube']: s#142
[#227 'texture_depth_cube_array']: s#143
[#227 'texture_depth_multisampled_2d']: s#144
[#227 'texture_multisampled_2d']: s#151
[#227 'texture_storage_1d']: s#152
[#227 'texture_storage_2d']: s#153
[#227 'texture_storage_2d_array']: s#154
[#227 'texture_storage_3d']: s#155
[#227 'true']: s#114
[#227 'u32']: s#120
[#227 'vec2']: s#98
[#227 'vec3']: s#99
[#227 'vec4']: s#100
[#227 '~']: s#72
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#227 /0[fh]/]: s#130
[#227 /0[iu]?/]: s#127
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#227 /[1-9][0-9]*[fh]/]: s#131
[#227 /[1-9][0-9]*[iu]?/]: s#128
[#228 '!']: r#148
[#228 '&']: r#148
[#228 '(']: r#148
[#228 '*']: r#148
[#228 '-']: r#148
[#228 'array']: r#148
[#228 'atomic']: r#148
[#228 'bitcast']: r#148
[#228 'bool']: r#148
[#228 'f16']: r#148
[#228 'f32']: r#148
[#228 'false']: r#148
[#228 'i32']: r#148
[#228 'mat2x2']: r#148
[#228 'mat2x3']: r#148
[#228 'mat2x4']: r#148
[#228 'mat3x2']: r#148
[#228 'mat3x3']: r#148
[#228 'mat3x4']: r#148
[#228 'mat4x2']: r#148
[#228 'mat4x3']: r#148
[#228 'mat4x4']: r#148
[#228 'ptr']: r#148
[#228 'sampler']: r#148
[#228 'sampler_comparison']: r#148
[#228 'texture_1d']: r#148
[#228 'texture_2d']: r#148
[#228 'texture_2d_array']: r#148
[#228 'texture_3d']: r#148
[#228 'texture_cube']: r#148
[#228 'texture_cube_array']: r#148
[#228 'texture_depth_2d']: r#148
[#228 'texture_depth_2d_array']: r#148
[#228 'texture_depth_cube']: r#148
[#228 'texture_depth_cube_array']: r#148
[#228 'texture_depth_multisampled_2d']: r#148
[#228 'texture_multisampled_2d']: r#148
[#228 'texture_storage_1d']: r#148
[#228 'texture_storage_2d']: r#148
[#228 'texture_storage_2d_array']: r#148
[#228 'texture_storage_3d']: r#148
[#228 'true']: r#148
[#228 'u32']: r#148
[#228 'vec2']: r#148
[#228 'vec3']: r#148
[#228 'vec4']: r#148
[#228 '~']: r#148
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: r#148
[#229 '!']: s#71
[#229 '&']: s#74
[#229 '(']: s#116
[#229 '*']: s#73
[#229 '-']: s#70
[#229 'array']: s#84
[#229 'atomic']: s#96
[#229 'bitcast']: s#79
[#229 'bool']: s#89
[#229 'f16']: s#118
[#229 'f32']: s#117
[#229 'false']: s#115
[#229 'i32']: s#119
[#229 'mat2x2']: s#101
[#229 'mat2x3']: s#102
[#229 'mat2x4']: s#103
[#229 'mat3x2']: s#104
[#229 'mat3x3']: s#105
[#229 'mat3x4']: s#106
[#229 'mat4x2']: s#107
[#229 'mat4x3']: s#108
[#229 'mat4x4']: s#109
[#229 'ptr']: s#121
[#229 'sampler']: s#138
[#229 'sampler_comparison']: s#139
[#229 'texture_1d']: s#145
[#229 'texture_2d']: s#146
[#229 'texture_2d_array']: s#147
[#229 'texture_3d']: s#148
[#229 'texture_cube']: s#149
[#229 'texture_cube_array']: s#150
[#229 'texture_depth_2d']: s#140
[#229 'texture_depth_2d_array']: s#141
[#229 'texture_depth_cube']: s#142
[#229 'texture_depth_cube_array']: s#143
[#229 'texture_depth_multisampled_2d']: s#144
[#229 'texture_multisampled_2d']: s#151
[#229 'texture_storage_1d']: s#152
[#229 'texture_storage_2d']: s#153
[#229 'texture_storage_2d_array']: s#154
[#229 'texture_storage_3d']: s#155
[#229 'true']: s#114
[#229 'u32']: s#120
[#229 'vec2']: s#98
[#229 'vec3']: s#99
[#229 'vec4']: s#100
[#229 '~']: s#72
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#229 /0[fh]/]: s#130
[#229 /0[iu]?/]: s#127
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#229 /[1-9][0-9]*[fh]/]: s#131
[#229 /[1-9][0-9]*[iu]?/]: s#128
[#230 '!']: r#149
[#230 '&']: r#149
[#230 '(']: r#149
[#230 '*']: r#149
[#230 '-']: r#149
[#230 'array']: r#149
[#230 'atomic']: r#149
[#230 'bitcast']: r#149
[#230 'bool']: r#149
[#230 'f16']: r#149
[#230 'f32']: r#149
[#230 'false']: r#149
[#230 'i32']: r#149
[#230 'mat2x2']: r#149
[#230 'mat2x3']: r#149
[#230 'mat2x4']: r#149
[#230 'mat3x2']: r#149
[#230 'mat3x3']: r#149
[#230 'mat3x4']: r#149
[#230 'mat4x2']: r#149
[#230 'mat4x3']: r#149
[#230 'mat4x4']: r#149
[#230 'ptr']: r#149
[#230 'sampler']: r#149
[#230 'sampler_comparison']: r#149
[#230 'texture_1d']: r#149
[#230 'texture_2d']: r#149
[#230 'texture_2d_array']: r#149
[#230 'texture_3d']: r#149
[#230 'texture_cube']: r#149
[#230 'texture_cube_array']: r#149
[#230 'texture_depth_2d']: r#149
[#230 'texture_depth_2d_array']: r#149
[#230 'texture_depth_cube']: r#149
[#230 'texture_depth_cube_array']: r#149
[#230 'texture_depth_multisampled_2d']: r#149
[#230 'texture_multisampled_2d']: r#149
[#230 'texture_storage_1d']: r#149
[#230 'texture_storage_2d']: r#149
[#230 'texture_storage_2d_array']: r#149
[#230 'texture_storage_3d']: r#149
[#230 'true']: r#149
[#230 'u32']: r#149
[#230 'vec2']: r#149
[#230 'vec3']: r#149
[#230 'vec4']: r#149
[#230 '~']: r#149
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: r#149
[#231 '!']: s#71
[#231 '&']: s#74
[#231 '(']: s#116
[#231 '*']: s#73
[#231 '-']: s#70
[#231 'array']: s#84
[#231 'atomic']: s#96
[#231 'bitcast']: s#79
[#231 'bool']: s#89
[#231 'f16']: s#118
[#231 'f32']: s#117
[#231 'false']: s#115
[#231 'i32']: s#119
[#231 'mat2x2']: s#101
[#231 'mat2x3']: s#102
[#231 'mat2x4']: s#103
[#231 'mat3x2']: s#104
[#231 'mat3x3']: s#105
[#231 'mat3x4']: s#106
[#231 'mat4x2']: s#107
[#231 'mat4x3']: s#108
[#231 'mat4x4']: s#109
[#231 'ptr']: s#121
[#231 'sampler']: s#138
[#231 'sampler_comparison']: s#139
[#231 'texture_1d']: s#145
[#231 'texture_2d']: s#146
[#231 'texture_2d_array']: s#147
[#231 'texture_3d']: s#148
[#231 'texture_cube']: s#149
[#231 'texture_cube_array']: s#150
[#231 'texture_depth_2d']: s#140
[#231 'texture_depth_2d_array']: s#141
[#231 'texture_depth_cube']: s#142
[#231 'texture_depth_cube_array']: s#143
[#231 'texture_depth_multisampled_2d']: s#144
[#231 'texture_multisampled_2d']: s#151
[#231 'texture_storage_1d']: s#152
[#231 'texture_storage_2d']: s#153
[#231 'texture_storage_2d_array']: s#154
[#231 'texture_storage_3d']: s#155
[#231 'true']: s#114
[#231 'u32']: s#120
[#231 'vec2']: s#98
[#231 'vec3']: s#99
[#231 'vec4']: s#100
[#231 '~']: s#72
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#231 /0[fh]/]: s#130
[#231 /0[iu]?/]: s#127
[#231 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#231 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#231 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#231 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#231 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#231 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#231 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#231 /[1-9][0-9]*[fh]/]: s#131
[#231 /[1-9][0-9]*[iu]?/]: s#128
[#232 '!']: s#71
[#232 '&']: s#74
[#232 '(']: s#116
[#232 '*']: s#73
[#232 '-']: s#70
[#232 'array']: s#84
[#232 'atomic']: s#96
[#232 'bitcast']: s#79
[#232 'bool']: s#89
[#232 'f16']: s#118
[#232 'f32']: s#117
[#232 'false']: s#115
[#232 'i32']: s#119
[#232 'mat2x2']: s#101
[#232 'mat2x3']: s#102
[#232 'mat2x4']: s#103
[#232 'mat3x2']: s#104
[#232 'mat3x3']: s#105
[#232 'mat3x4']: s#106
[#232 'mat4x2']: s#107
[#232 'mat4x3']: s#108
[#232 'mat4x4']: s#109
[#232 'ptr']: s#121
[#232 'sampler']: s#138
[#232 'sampler_comparison']: s#139
[#232 'texture_1d']: s#145
[#232 'texture_2d']: s#146
[#232 'texture_2d_array']: s#147
[#232 'texture_3d']: s#148
[#232 'texture_cube']: s#149
[#232 'texture_cube_array']: s#150
[#232 'texture_depth_2d']: s#140
[#232 'texture_depth_2d_array']: s#141
[#232 'texture_depth_cube']: s#142
[#232 'texture_depth_cube_array']: s#143
[#232 'texture_depth_multisampled_2d']: s#144
[#232 'texture_multisampled_2d']: s#151
[#232 'texture_storage_1d']: s#152
[#232 'texture_storage_2d']: s#153
[#232 'texture_storage_2d_array']: s#154
[#232 'texture_storage_3d']: s#155
[#232 'true']: s#114
[#232 'u32']: s#120
[#232 'vec2']: s#98
[#232 'vec3']: s#99
[#232 'vec4']: s#100
[#232 '~']: s#72
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#232 /0[fh]/]: s#130
[#232 /0[iu]?/]: s#127
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#232 /[1-9][0-9]*[fh]/]: s#131
[#232 /[1-9][0-9]*[iu]?/]: s#128
[#233 '!']: s#71
[#233 '&']: s#74
[#233 '(']: s#116
[#233 '*']: s#73
[#233 '-']: s#70
[#233 'array']: s#84
[#233 'atomic']: s#96
[#233 'bitcast']: s#79
[#233 'bool']: s#89
[#233 'f16']: s#118
[#233 'f32']: s#117
[#233 'false']: s#115
[#233 'i32']: s#119
[#233 'mat2x2']: s#101
[#233 'mat2x3']: s#102
[#233 'mat2x4']: s#103
[#233 'mat3x2']: s#104
[#233 'mat3x3']: s#105
[#233 'mat3x4']: s#106
[#233 'mat4x2']: s#107
[#233 'mat4x3']: s#108
[#233 'mat4x4']: s#109
[#233 'ptr']: s#121
[#233 'sampler']: s#138
[#233 'sampler_comparison']: s#139
[#233 'texture_1d']: s#145
[#233 'texture_2d']: s#146
[#233 'texture_2d_array']: s#147
[#233 'texture_3d']: s#148
[#233 'texture_cube']: s#149
[#233 'texture_cube_array']: s#150
[#233 'texture_depth_2d']: s#140
[#233 'texture_depth_2d_array']: s#141
[#233 'texture_depth_cube']: s#142
[#233 'texture_depth_cube_array']: s#143
[#233 'texture_depth_multisampled_2d']: s#144
[#233 'texture_multisampled_2d']: s#151
[#233 'texture_storage_1d']: s#152
[#233 'texture_storage_2d']: s#153
[#233 'texture_storage_2d_array']: s#154
[#233 'texture_storage_3d']: s#155
[#233 'true']: s#114
[#233 'u32']: s#120
[#233 'vec2']: s#98
[#233 'vec3']: s#99
[#233 'vec4']: s#100
[#233 '~']: s#72
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#233 /0[fh]/]: s#130
[#233 /0[iu]?/]: s#127
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#233 /[1-9][0-9]*[fh]/]: s#131
[#233 /[1-9][0-9]*[iu]?/]: s#128
[#234 '!']: s#71
[#234 '&']: s#74
[#234 '(']: s#116
[#234 '*']: s#73
[#234 '-']: s#70
[#234 'array']: s#84
[#234 'atomic']: s#96
[#234 'bitcast']: s#79
[#234 'bool']: s#89
[#234 'f16']: s#118
[#234 'f32']: s#117
[#234 'false']: s#115
[#234 'i32']: s#119
[#234 'mat2x2']: s#101
[#234 'mat2x3']: s#102
[#234 'mat2x4']: s#103
[#234 'mat3x2']: s#104
[#234 'mat3x3']: s#105
[#234 'mat3x4']: s#106
[#234 'mat4x2']: s#107
[#234 'mat4x3']: s#108
[#234 'mat4x4']: s#109
[#234 'ptr']: s#121
[#234 'sampler']: s#138
[#234 'sampler_comparison']: s#139
[#234 'texture_1d']: s#145
[#234 'texture_2d']: s#146
[#234 'texture_2d_array']: s#147
[#234 'texture_3d']: s#148
[#234 'texture_cube']: s#149
[#234 'texture_cube_array']: s#150
[#234 'texture_depth_2d']: s#140
[#234 'texture_depth_2d_array']: s#141
[#234 'texture_depth_cube']: s#142
[#234 'texture_depth_cube_array']: s#143
[#234 'texture_depth_multisampled_2d']: s#144
[#234 'texture_multisampled_2d']: s#151
[#234 'texture_storage_1d']: s#152
[#234 'texture_storage_2d']: s#153
[#234 'texture_storage_2d_array']: s#154
[#234 'texture_storage_3d']: s#155
[#234 'true']: s#114
[#234 'u32']: s#120
[#234 'vec2']: s#98
[#234 'vec3']: s#99
[#234 'vec4']: s#100
[#234 '~']: s#72
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#234 /0[fh]/]: s#130
[#234 /0[iu]?/]: s#127
[#234 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#234 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#234 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#234 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#234 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#234 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#234 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#234 /[1-9][0-9]*[fh]/]: s#131
[#234 /[1-9][0-9]*[iu]?/]: s#128
[#235 '!']: s#71
[#235 '&']: s#74
[#235 '(']: s#116
[#235 '*']: s#73
[#235 '-']: s#70
[#235 'array']: s#84
[#235 'atomic']: s#96
[#235 'bitcast']: s#79
[#235 'bool']: s#89
[#235 'f16']: s#118
[#235 'f32']: s#117
[#235 'false']: s#115
[#235 'i32']: s#119
[#235 'mat2x2']: s#101
[#235 'mat2x3']: s#102
[#235 'mat2x4']: s#103
[#235 'mat3x2']: s#104
[#235 'mat3x3']: s#105
[#235 'mat3x4']: s#106
[#235 'mat4x2']: s#107
[#235 'mat4x3']: s#108
[#235 'mat4x4']: s#109
[#235 'ptr']: s#121
[#235 'sampler']: s#138
[#235 'sampler_comparison']: s#139
[#235 'texture_1d']: s#145
[#235 'texture_2d']: s#146
[#235 'texture_2d_array']: s#147
[#235 'texture_3d']: s#148
[#235 'texture_cube']: s#149
[#235 'texture_cube_array']: s#150
[#235 'texture_depth_2d']: s#140
[#235 'texture_depth_2d_array']: s#141
[#235 'texture_depth_cube']: s#142
[#235 'texture_depth_cube_array']: s#143
[#235 'texture_depth_multisampled_2d']: s#144
[#235 'texture_multisampled_2d']: s#151
[#235 'texture_storage_1d']: s#152
[#235 'texture_storage_2d']: s#153
[#235 'texture_storage_2d_array']: s#154
[#235 'texture_storage_3d']: s#155
[#235 'true']: s#114
[#235 'u32']: s#120
[#235 'vec2']: s#98
[#235 'vec3']: s#99
[#235 'vec4']: s#100
[#235 '~']: s#72
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#235 /0[fh]/]: s#130
[#235 /0[iu]?/]: s#127
[#235 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#235 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#235 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#235 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#235 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#235 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#235 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#235 /[1-9][0-9]*[fh]/]: s#131
[#235 /[1-9][0-9]*[iu]?/]: s#128
[#236 '!']: s#71
[#236 '&']: s#74
[#236 '(']: s#116
[#236 '*']: s#73
[#236 '-']: s#70
[#236 'array']: s#84
[#236 'atomic']: s#96
[#236 'bitcast']: s#79
[#236 'bool']: s#89
[#236 'f16']: s#118
[#236 'f32']: s#117
[#236 'false']: s#115
[#236 'i32']: s#119
[#236 'mat2x2']: s#101
[#236 'mat2x3']: s#102
[#236 'mat2x4']: s#103
[#236 'mat3x2']: s#104
[#236 'mat3x3']: s#105
[#236 'mat3x4']: s#106
[#236 'mat4x2']: s#107
[#236 'mat4x3']: s#108
[#236 'mat4x4']: s#109
[#236 'ptr']: s#121
[#236 'sampler']: s#138
[#236 'sampler_comparison']: s#139
[#236 'texture_1d']: s#145
[#236 'texture_2d']: s#146
[#236 'texture_2d_array']: s#147
[#236 'texture_3d']: s#148
[#236 'texture_cube']: s#149
[#236 'texture_cube_array']: s#150
[#236 'texture_depth_2d']: s#140
[#236 'texture_depth_2d_array']: s#141
[#236 'texture_depth_cube']: s#142
[#236 'texture_depth_cube_array']: s#143
[#236 'texture_depth_multisampled_2d']: s#144
[#236 'texture_multisampled_2d']: s#151
[#236 'texture_storage_1d']: s#152
[#236 'texture_storage_2d']: s#153
[#236 'texture_storage_2d_array']: s#154
[#236 'texture_storage_3d']: s#155
[#236 'true']: s#114
[#236 'u32']: s#120
[#236 'vec2']: s#98
[#236 'vec3']: s#99
[#236 'vec4']: s#100
[#236 '~']: s#72
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#236 /0[fh]/]: s#130
[#236 /0[iu]?/]: s#127
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#236 /[1-9][0-9]*[fh]/]: s#131
[#236 /[1-9][0-9]*[iu]?/]: s#128
[#237 '!']: s#71
[#237 '&']: s#74
[#237 '(']: s#116
[#237 '*']: s#73
[#237 '-']: s#70
[#237 'array']: s#84
[#237 'atomic']: s#96
[#237 'bitcast']: s#79
[#237 'bool']: s#89
[#237 'f16']: s#118
[#237 'f32']: s#117
[#237 'false']: s#115
[#237 'i32']: s#119
[#237 'mat2x2']: s#101
[#237 'mat2x3']: s#102
[#237 'mat2x4']: s#103
[#237 'mat3x2']: s#104
[#237 'mat3x3']: s#105
[#237 'mat3x4']: s#106
[#237 'mat4x2']: s#107
[#237 'mat4x3']: s#108
[#237 'mat4x4']: s#109
[#237 'ptr']: s#121
[#237 'sampler']: s#138
[#237 'sampler_comparison']: s#139
[#237 'texture_1d']: s#145
[#237 'texture_2d']: s#146
[#237 'texture_2d_array']: s#147
[#237 'texture_3d']: s#148
[#237 'texture_cube']: s#149
[#237 'texture_cube_array']: s#150
[#237 'texture_depth_2d']: s#140
[#237 'texture_depth_2d_array']: s#141
[#237 'texture_depth_cube']: s#142
[#237 'texture_depth_cube_array']: s#143
[#237 'texture_depth_multisampled_2d']: s#144
[#237 'texture_multisampled_2d']: s#151
[#237 'texture_storage_1d']: s#152
[#237 'texture_storage_2d']: s#153
[#237 'texture_storage_2d_array']: s#154
[#237 'texture_storage_3d']: s#155
[#237 'true']: s#114
[#237 'u32']: s#120
[#237 'vec2']: s#98
[#237 'vec3']: s#99
[#237 'vec4']: s#100
[#237 '~']: s#72
[#237 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#237 /0[fh]/]: s#130
[#237 /0[iu]?/]: s#127
[#237 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#237 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#237 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#237 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#237 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#237 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#237 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#237 /[1-9][0-9]*[fh]/]: s#131
[#237 /[1-9][0-9]*[iu]?/]: s#128
[#238 '!']: r#150
[#238 '&']: r#150
[#238 '(']: r#150
[#238 ')']: r#150
[#238 '*']: r#150
[#238 ',']: r#150
[#238 '-']: r#150
[#238 ';']: r#150
[#238 '=']: r#150
[#238 '>']: r#150
[#238 'array']: r#150
[#238 'atomic']: r#150
[#238 'bitcast']: r#150
[#238 'bool']: r#150
[#238 'f16']: r#150
[#238 'f32']: r#150
[#238 'false']: r#150
[#238 'i32']: r#150
[#238 'mat2x2']: r#150
[#238 'mat2x3']: r#150
[#238 'mat2x4']: r#150
[#238 'mat3x2']: r#150
[#238 'mat3x3']: r#150
[#238 'mat3x4']: r#150
[#238 'mat4x2']: r#150
[#238 'mat4x3']: r#150
[#238 'mat4x4']: r#150
[#238 'ptr']: r#150
[#238 'sampler']: r#150
[#238 'sampler_comparison']: r#150
[#238 'texture_1d']: r#150
[#238 'texture_2d']: r#150
[#238 'texture_2d_array']: r#150
[#238 'texture_3d']: r#150
[#238 'texture_cube']: r#150
[#238 'texture_cube_array']: r#150
[#238 'texture_depth_2d']: r#150
[#238 'texture_depth_2d_array']: r#150
[#238 'texture_depth_cube']: r#150
[#238 'texture_depth_cube_array']: r#150
[#238 'texture_depth_multisampled_2d']: r#150
[#238 'texture_multisampled_2d']: r#150
[#238 'texture_storage_1d']: r#150
[#238 'texture_storage_2d']: r#150
[#238 'texture_storage_2d_array']: r#150
[#238 'texture_storage_3d']: r#150
[#238 'true']: r#150
[#238 'u32']: r#150
[#238 'vec2']: r#150
[#238 'vec3']: r#150
[#238 'vec4']: r#150
[#238 '{']: r#150
[#238 '}']: r#150
[#238 '~']: r#150
[#238 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#150
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: r#150
[#239 '!']: r#151
[#239 '&']: r#151
[#239 '(']: r#151
[#239 '*']: r#151
[#239 '-']: r#151
[#239 'array']: r#151
[#239 'atomic']: r#151
[#239 'bitcast']: r#151
[#239 'bool']: r#151
[#239 'f16']: r#151
[#239 'f32']: r#151
[#239 'false']: r#151
[#239 'i32']: r#151
[#239 'mat2x2']: r#151
[#239 'mat2x3']: r#151
[#239 'mat2x4']: r#151
[#239 'mat3x2']: r#151
[#239 'mat3x3']: r#151
[#239 'mat3x4']: r#151
[#239 'mat4x2']: r#151
[#239 'mat4x3']: r#151
[#239 'mat4x4']: r#151
[#239 'ptr']: r#151
[#239 'sampler']: r#151
[#239 'sampler_comparison']: r#151
[#239 'texture_1d']: r#151
[#239 'texture_2d']: r#151
[#239 'texture_2d_array']: r#151
[#239 'texture_3d']: r#151
[#239 'texture_cube']: r#151
[#239 'texture_cube_array']: r#151
[#239 'texture_depth_2d']: r#151
[#239 'texture_depth_2d_array']: r#151
[#239 'texture_depth_cube']: r#151
[#239 'texture_depth_cube_array']: r#151
[#239 'texture_depth_multisampled_2d']: r#151
[#239 'texture_multisampled_2d']: r#151
[#239 'texture_storage_1d']: r#151
[#239 'texture_storage_2d']: r#151
[#239 'texture_storage_2d_array']: r#151
[#239 'texture_storage_3d']: r#151
[#239 'true']: r#151
[#239 'u32']: r#151
[#239 'vec2']: r#151
[#239 'vec3']: r#151
[#239 'vec4']: r#151
[#239 '~']: r#151
[#239 /0[xX][0-9a-fA-F]+[iu]?/]: r#151
[#240 '!']: r#152
[#240 '&']: r#152
[#240 '(']: r#152
[#240 '*']: r#152
[#240 '-']: r#152
[#240 'array']: r#152
[#240 'atomic']: r#152
[#240 'bitcast']: r#152
[#240 'bool']: r#152
[#240 'f16']: r#152
[#240 'f32']: r#152
[#240 'false']: r#152
[#240 'i32']: r#152
[#240 'mat2x2']: r#152
[#240 'mat2x3']: r#152
[#240 'mat2x4']: r#152
[#240 'mat3x2']: r#152
[#240 'mat3x3']: r#152
[#240 'mat3x4']: r#152
[#240 'mat4x2']: r#152
[#240 'mat4x3']: r#152
[#240 'mat4x4']: r#152
[#240 'ptr']: r#152
[#240 'sampler']: r#152
[#240 'sampler_comparison']: r#152
[#240 'texture_1d']: r#152
[#240 'texture_2d']: r#152
[#240 'texture_2d_array']: r#152
[#240 'texture_3d']: r#152
[#240 'texture_cube']: r#152
[#240 'texture_cube_array']: r#152
[#240 'texture_depth_2d']: r#152
[#240 'texture_depth_2d_array']: r#152
[#240 'texture_depth_cube']: r#152
[#240 'texture_depth_cube_array']: r#152
[#240 'texture_depth_multisampled_2d']: r#152
[#240 'texture_multisampled_2d']: r#152
[#240 'texture_storage_1d']: r#152
[#240 'texture_storage_2d']: r#152
[#240 'texture_storage_2d_array']: r#152
[#240 'texture_storage_3d']: r#152
[#240 'true']: r#152
[#240 'u32']: r#152
[#240 'vec2']: r#152
[#240 'vec3']: r#152
[#240 'vec4']: r#152
[#240 '~']: r#152
[#240 /0[xX][0-9a-fA-F]+[iu]?/]: r#152
[#241 '!']: r#153
[#241 '&']: r#153
[#241 '(']: r#153
[#241 '*']: r#153
[#241 '-']: r#153
[#241 'array']: r#153
[#241 'atomic']: r#153
[#241 'bitcast']: r#153
[#241 'bool']: r#153
[#241 'f16']: r#153
[#241 'f32']: r#153
[#241 'false']: r#153
[#241 'i32']: r#153
[#241 'mat2x2']: r#153
[#241 'mat2x3']: r#153
[#241 'mat2x4']: r#153
[#241 'mat3x2']: r#153
[#241 'mat3x3']: r#153
[#241 'mat3x4']: r#153
[#241 'mat4x2']: r#153
[#241 'mat4x3']: r#153
[#241 'mat4x4']: r#153
[#241 'ptr']: r#153
[#241 'sampler']: r#153
[#241 'sampler_comparison']: r#153
[#241 'texture_1d']: r#153
[#241 'texture_2d']: r#153
[#241 'texture_2d_array']: r#153
[#241 'texture_3d']: r#153
[#241 'texture_cube']: r#153
[#241 'texture_cube_array']: r#153
[#241 'texture_depth_2d']: r#153
[#241 'texture_depth_2d_array']: r#153
[#241 'texture_depth_cube']: r#153
[#241 'texture_depth_cube_array']: r#153
[#241 'texture_depth_multisampled_2d']: r#153
[#241 'texture_multisampled_2d']: r#153
[#241 'texture_storage_1d']: r#153
[#241 'texture_storage_2d']: r#153
[#241 'texture_storage_2d_array']: r#153
[#241 'texture_storage_3d']: r#153
[#241 'true']: r#153
[#241 'u32']: r#153
[#241 'vec2']: r#153
[#241 'vec3']: r#153
[#241 'vec4']: r#153
[#241 '~']: r#153
[#241 /0[xX][0-9a-fA-F]+[iu]?/]: r#153
[#242 '!']: r#154
[#242 '&']: r#154
[#242 '(']: r#154
[#242 '*']: r#154
[#242 '-']: r#154
[#242 'array']: r#154
[#242 'atomic']: r#154
[#242 'bitcast']: r#154
[#242 'bool']: r#154
[#242 'f16']: r#154
[#242 'f32']: r#154
[#242 'false']: r#154
[#242 'i32']: r#154
[#242 'mat2x2']: r#154
[#242 'mat2x3']: r#154
[#242 'mat2x4']: r#154
[#242 'mat3x2']: r#154
[#242 'mat3x3']: r#154
[#242 'mat3x4']: r#154
[#242 'mat4x2']: r#154
[#242 'mat4x3']: r#154
[#242 'mat4x4']: r#154
[#242 'ptr']: r#154
[#242 'sampler']: r#154
[#242 'sampler_comparison']: r#154
[#242 'texture_1d']: r#154
[#242 'texture_2d']: r#154
[#242 'texture_2d_array']: r#154
[#242 'texture_3d']: r#154
[#242 'texture_cube']: r#154
[#242 'texture_cube_array']: r#154
[#242 'texture_depth_2d']: r#154
[#242 'texture_depth_2d_array']: r#154
[#242 'texture_depth_cube']: r#154
[#242 'texture_depth_cube_array']: r#154
[#242 'texture_depth_multisampled_2d']: r#154
[#242 'texture_multisampled_2d']: r#154
[#242 'texture_storage_1d']: r#154
[#242 'texture_storage_2d']: r#154
[#242 'texture_storage_2d_array']: r#154
[#242 'texture_storage_3d']: r#154
[#242 'true']: r#154
[#242 'u32']: r#154
[#242 'vec2']: r#154
[#242 'vec3']: r#154
[#242 'vec4']: r#154
[#242 '~']: r#154
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: r#154
[#243 '!']: s#71
[#243 '&']: s#74
[#243 '(']: s#116
[#243 '*']: s#73
[#243 '-']: s#70
[#243 'array']: s#84
[#243 'atomic']: s#96
[#243 'bitcast']: s#79
[#243 'bool']: s#89
[#243 'f16']: s#118
[#243 'f32']: s#117
[#243 'false']: s#115
[#243 'i32']: s#119
[#243 'mat2x2']: s#101
[#243 'mat2x3']: s#102
[#243 'mat2x4']: s#103
[#243 'mat3x2']: s#104
[#243 'mat3x3']: s#105
[#243 'mat3x4']: s#106
[#243 'mat4x2']: s#107
[#243 'mat4x3']: s#108
[#243 'mat4x4']: s#109
[#243 'ptr']: s#121
[#243 'sampler']: s#138
[#243 'sampler_comparison']: s#139
[#243 'texture_1d']: s#145
[#243 'texture_2d']: s#146
[#243 'texture_2d_array']: s#147
[#243 'texture_3d']: s#148
[#243 'texture_cube']: s#149
[#243 'texture_cube_array']: s#150
[#243 'texture_depth_2d']: s#140
[#243 'texture_depth_2d_array']: s#141
[#243 'texture_depth_cube']: s#142
[#243 'texture_depth_cube_array']: s#143
[#243 'texture_depth_multisampled_2d']: s#144
[#243 'texture_multisampled_2d']: s#151
[#243 'texture_storage_1d']: s#152
[#243 'texture_storage_2d']: s#153
[#243 'texture_storage_2d_array']: s#154
[#243 'texture_storage_3d']: s#155
[#243 'true']: s#114
[#243 'u32']: s#120
[#243 'vec2']: s#98
[#243 'vec3']: s#99
[#243 'vec4']: s#100
[#243 '~']: s#72
[#243 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#243 /0[fh]/]: s#130
[#243 /0[iu]?/]: s#127
[#243 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#243 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#243 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#243 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#243 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#243 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#243 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#243 /[1-9][0-9]*[fh]/]: s#131
[#243 /[1-9][0-9]*[iu]?/]: s#128
[#244 '!']: r#155
[#244 '&']: r#155
[#244 '(']: r#155
[#244 '*']: r#155
[#244 '-']: r#155
[#244 'array']: r#155
[#244 'atomic']: r#155
[#244 'bitcast']: r#155
[#244 'bool']: r#155
[#244 'f16']: r#155
[#244 'f32']: r#155
[#244 'false']: r#155
[#244 'i32']: r#155
[#244 'mat2x2']: r#155
[#244 'mat2x3']: r#155
[#244 'mat2x4']: r#155
[#244 'mat3x2']: r#155
[#244 'mat3x3']: r#155
[#244 'mat3x4']: r#155
[#244 'mat4x2']: r#155
[#244 'mat4x3']: r#155
[#244 'mat4x4']: r#155
[#244 'ptr']: r#155
[#244 'sampler']: r#155
[#244 'sampler_comparison']: r#155
[#244 'texture_1d']: r#155
[#244 'texture_2d']: r#155
[#244 'texture_2d_array']: r#155
[#244 'texture_3d']: r#155
[#244 'texture_cube']: r#155
[#244 'texture_cube_array']: r#155
[#244 'texture_depth_2d']: r#155
[#244 'texture_depth_2d_array']: r#155
[#244 'texture_depth_cube']: r#155
[#244 'texture_depth_cube_array']: r#155
[#244 'texture_depth_multisampled_2d']: r#155
[#244 'texture_multisampled_2d']: r#155
[#244 'texture_storage_1d']: r#155
[#244 'texture_storage_2d']: r#155
[#244 'texture_storage_2d_array']: r#155
[#244 'texture_storage_3d']: r#155
[#244 'true']: r#155
[#244 'u32']: r#155
[#244 'vec2']: r#155
[#244 'vec3']: r#155
[#244 'vec4']: r#155
[#244 '~']: r#155
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: r#155
[#245 '!']: s#71
[#245 '&']: s#74
[#245 '(']: s#116
[#245 '*']: s#73
[#245 '-']: s#70
[#245 'array']: s#84
[#245 'atomic']: s#96
[#245 'bitcast']: s#79
[#245 'bool']: s#89
[#245 'f16']: s#118
[#245 'f32']: s#117
[#245 'false']: s#115
[#245 'i32']: s#119
[#245 'mat2x2']: s#101
[#245 'mat2x3']: s#102
[#245 'mat2x4']: s#103
[#245 'mat3x2']: s#104
[#245 'mat3x3']: s#105
[#245 'mat3x4']: s#106
[#245 'mat4x2']: s#107
[#245 'mat4x3']: s#108
[#245 'mat4x4']: s#109
[#245 'ptr']: s#121
[#245 'sampler']: s#138
[#245 'sampler_comparison']: s#139
[#245 'texture_1d']: s#145
[#245 'texture_2d']: s#146
[#245 'texture_2d_array']: s#147
[#245 'texture_3d']: s#148
[#245 'texture_cube']: s#149
[#245 'texture_cube_array']: s#150
[#245 'texture_depth_2d']: s#140
[#245 'texture_depth_2d_array']: s#141
[#245 'texture_depth_cube']: s#142
[#245 'texture_depth_cube_array']: s#143
[#245 'texture_depth_multisampled_2d']: s#144
[#245 'texture_multisampled_2d']: s#151
[#245 'texture_storage_1d']: s#152
[#245 'texture_storage_2d']: s#153
[#245 'texture_storage_2d_array']: s#154
[#245 'texture_storage_3d']: s#155
[#245 'true']: s#114
[#245 'u32']: s#120
[#245 'vec2']: s#98
[#245 'vec3']: s#99
[#245 'vec4']: s#100
[#245 '~']: s#72
[#245 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#245 /0[fh]/]: s#130
[#245 /0[iu]?/]: s#127
[#245 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#245 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#245 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#245 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#245 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#245 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#245 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#245 /[1-9][0-9]*[fh]/]: s#131
[#245 /[1-9][0-9]*[iu]?/]: s#128
[#246 '!']: r#156
[#246 '&']: r#156
[#246 '(']: r#156
[#246 '*']: r#156
[#246 '-']: r#156
[#246 'array']: r#156
[#246 'atomic']: r#156
[#246 'bitcast']: r#156
[#246 'bool']: r#156
[#246 'f16']: r#156
[#246 'f32']: r#156
[#246 'false']: r#156
[#246 'i32']: r#156
[#246 'mat2x2']: r#156
[#246 'mat2x3']: r#156
[#246 'mat2x4']: r#156
[#246 'mat3x2']: r#156
[#246 'mat3x3']: r#156
[#246 'mat3x4']: r#156
[#246 'mat4x2']: r#156
[#246 'mat4x3']: r#156
[#246 'mat4x4']: r#156
[#246 'ptr']: r#156
[#246 'sampler']: r#156
[#246 'sampler_comparison']: r#156
[#246 'texture_1d']: r#156
[#246 'texture_2d']: r#156
[#246 'texture_2d_array']: r#156
[#246 'texture_3d']: r#156
[#246 'texture_cube']: r#156
[#246 'texture_cube_array']: r#156
[#246 'texture_depth_2d']: r#156
[#246 'texture_depth_2d_array']: r#156
[#246 'texture_depth_cube']: r#156
[#246 'texture_depth_cube_array']: r#156
[#246 'texture_depth_multisampled_2d']: r#156
[#246 'texture_multisampled_2d']: r#156
[#246 'texture_storage_1d']: r#156
[#246 'texture_storage_2d']: r#156
[#246 'texture_storage_2d_array']: r#156
[#246 'texture_storage_3d']: r#156
[#246 'true']: r#156
[#246 'u32']: r#156
[#246 'vec2']: r#156
[#246 'vec3']: r#156
[#246 'vec4']: r#156
[#246 '~']: r#156
[#246 /0[xX][0-9a-fA-F]+[iu]?/]: r#156
[#247 '!']: s#71
[#247 '&']: s#74
[#247 '(']: s#116
[#247 '*']: s#73
[#247 '-']: s#70
[#247 'array']: s#84
[#247 'atomic']: s#96
[#247 'bitcast']: s#79
[#247 'bool']: s#89
[#247 'f16']: s#118
[#247 'f32']: s#117
[#247 'false']: s#115
[#247 'i32']: s#119
[#247 'mat2x2']: s#101
[#247 'mat2x3']: s#102
[#247 'mat2x4']: s#103
[#247 'mat3x2']: s#104
[#247 'mat3x3']: s#105
[#247 'mat3x4']: s#106
[#247 'mat4x2']: s#107
[#247 'mat4x3']: s#108
[#247 'mat4x4']: s#109
[#247 'ptr']: s#121
[#247 'sampler']: s#138
[#247 'sampler_comparison']: s#139
[#247 'texture_1d']: s#145
[#247 'texture_2d']: s#146
[#247 'texture_2d_array']: s#147
[#247 'texture_3d']: s#148
[#247 'texture_cube']: s#149
[#247 'texture_cube_array']: s#150
[#247 'texture_depth_2d']: s#140
[#247 'texture_depth_2d_array']: s#141
[#247 'texture_depth_cube']: s#142
[#247 'texture_depth_cube_array']: s#143
[#247 'texture_depth_multisampled_2d']: s#144
[#247 'texture_multisampled_2d']: s#151
[#247 'texture_storage_1d']: s#152
[#247 'texture_storage_2d']: s#153
[#247 'texture_storage_2d_array']: s#154
[#247 'texture_storage_3d']: s#155
[#247 'true']: s#114
[#247 'u32']: s#120
[#247 'vec2']: s#98
[#247 'vec3']: s#99
[#247 'vec4']: s#100
[#247 '~']: s#72
[#247 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#247 /0[fh]/]: s#130
[#247 /0[iu]?/]: s#127
[#247 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#247 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#247 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#247 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#247 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#247 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#247 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#247 /[1-9][0-9]*[fh]/]: s#131
[#247 /[1-9][0-9]*[iu]?/]: s#128
[#248 '!']: s#71
[#248 '&']: s#74
[#248 '(']: s#116
[#248 '*']: s#73
[#248 '-']: s#70
[#248 'array']: s#84
[#248 'atomic']: s#96
[#248 'bitcast']: s#79
[#248 'bool']: s#89
[#248 'f16']: s#118
[#248 'f32']: s#117
[#248 'false']: s#115
[#248 'i32']: s#119
[#248 'mat2x2']: s#101
[#248 'mat2x3']: s#102
[#248 'mat2x4']: s#103
[#248 'mat3x2']: s#104
[#248 'mat3x3']: s#105
[#248 'mat3x4']: s#106
[#248 'mat4x2']: s#107
[#248 'mat4x3']: s#108
[#248 'mat4x4']: s#109
[#248 'ptr']: s#121
[#248 'sampler']: s#138
[#248 'sampler_comparison']: s#139
[#248 'texture_1d']: s#145
[#248 'texture_2d']: s#146
[#248 'texture_2d_array']: s#147
[#248 'texture_3d']: s#148
[#248 'texture_cube']: s#149
[#248 'texture_cube_array']: s#150
[#248 'texture_depth_2d']: s#140
[#248 'texture_depth_2d_array']: s#141
[#248 'texture_depth_cube']: s#142
[#248 'texture_depth_cube_array']: s#143
[#248 'texture_depth_multisampled_2d']: s#144
[#248 'texture_multisampled_2d']: s#151
[#248 'texture_storage_1d']: s#152
[#248 'texture_storage_2d']: s#153
[#248 'texture_storage_2d_array']: s#154
[#248 'texture_storage_3d']: s#155
[#248 'true']: s#114
[#248 'u32']: s#120
[#248 'vec2']: s#98
[#248 'vec3']: s#99
[#248 'vec4']: s#100
[#248 '~']: s#72
[#248 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#248 /0[fh]/]: s#130
[#248 /0[iu]?/]: s#127
[#248 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#248 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#248 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#248 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#248 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#248 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#248 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#248 /[1-9][0-9]*[fh]/]: s#131
[#248 /[1-9][0-9]*[iu]?/]: s#128
[#249 '!']: s#71
[#249 '&']: s#74
[#249 '(']: s#116
[#249 '*']: s#73
[#249 '-']: s#70
[#249 'array']: s#84
[#249 'atomic']: s#96
[#249 'bitcast']: s#79
[#249 'bool']: s#89
[#249 'f16']: s#118
[#249 'f32']: s#117
[#249 'false']: s#115
[#249 'i32']: s#119
[#249 'mat2x2']: s#101
[#249 'mat2x3']: s#102
[#249 'mat2x4']: s#103
[#249 'mat3x2']: s#104
[#249 'mat3x3']: s#105
[#249 'mat3x4']: s#106
[#249 'mat4x2']: s#107
[#249 'mat4x3']: s#108
[#249 'mat4x4']: s#109
[#249 'ptr']: s#121
[#249 'sampler']: s#138
[#249 'sampler_comparison']: s#139
[#249 'texture_1d']: s#145
[#249 'texture_2d']: s#146
[#249 'texture_2d_array']: s#147
[#249 'texture_3d']: s#148
[#249 'texture_cube']: s#149
[#249 'texture_cube_array']: s#150
[#249 'texture_depth_2d']: s#140
[#249 'texture_depth_2d_array']: s#141
[#249 'texture_depth_cube']: s#142
[#249 'texture_depth_cube_array']: s#143
[#249 'texture_depth_multisampled_2d']: s#144
[#249 'texture_multisampled_2d']: s#151
[#249 'texture_storage_1d']: s#152
[#249 'texture_storage_2d']: s#153
[#249 'texture_storage_2d_array']: s#154
[#249 'texture_storage_3d']: s#155
[#249 'true']: s#114
[#249 'u32']: s#120
[#249 'vec2']: s#98
[#249 'vec3']: s#99
[#249 'vec4']: s#100
[#249 '~']: s#72
[#249 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#249 /0[fh]/]: s#130
[#249 /0[iu]?/]: s#127
[#249 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#249 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#249 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#249 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#249 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#249 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#249 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#249 /[1-9][0-9]*[fh]/]: s#131
[#249 /[1-9][0-9]*[iu]?/]: s#128
[#250 'flat']: s#276
[#250 'linear']: s#275
[#250 'perspective']: s#274
[#251 '!']: s#71
[#251 '&']: s#74
[#251 '(']: s#116
[#251 '*']: s#73
[#251 '-']: s#70
[#251 'array']: s#84
[#251 'atomic']: s#96
[#251 'bitcast']: s#79
[#251 'bool']: s#89
[#251 'f16']: s#118
[#251 'f32']: s#117
[#251 'false']: s#115
[#251 'i32']: s#119
[#251 'mat2x2']: s#101
[#251 'mat2x3']: s#102
[#251 'mat2x4']: s#103
[#251 'mat3x2']: s#104
[#251 'mat3x3']: s#105
[#251 'mat3x4']: s#106
[#251 'mat4x2']: s#107
[#251 'mat4x3']: s#108
[#251 'mat4x4']: s#109
[#251 'ptr']: s#121
[#251 'sampler']: s#138
[#251 'sampler_comparison']: s#139
[#251 'texture_1d']: s#145
[#251 'texture_2d']: s#146
[#251 'texture_2d_array']: s#147
[#251 'texture_3d']: s#148
[#251 'texture_cube']: s#149
[#251 'texture_cube_array']: s#150
[#251 'texture_depth_2d']: s#140
[#251 'texture_depth_2d_array']: s#141
[#251 'texture_depth_cube']: s#142
[#251 'texture_depth_cube_array']: s#143
[#251 'texture_depth_multisampled_2d']: s#144
[#251 'texture_multisampled_2d']: s#151
[#251 'texture_storage_1d']: s#152
[#251 'texture_storage_2d']: s#153
[#251 'texture_storage_2d_array']: s#154
[#251 'texture_storage_3d']: s#155
[#251 'true']: s#114
[#251 'u32']: s#120
[#251 'vec2']: s#98
[#251 'vec3']: s#99
[#251 'vec4']: s#100
[#251 '~']: s#72
[#251 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#251 /0[fh]/]: s#130
[#251 /0[iu]?/]: s#127
[#251 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#251 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#251 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#251 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#251 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#251 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#251 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#251 /[1-9][0-9]*[fh]/]: s#131
[#251 /[1-9][0-9]*[iu]?/]: s#128
[#252 '!']: s#71
[#252 '&']: s#74
[#252 '(']: s#116
[#252 '*']: s#73
[#252 '-']: s#70
[#252 'array']: s#84
[#252 'atomic']: s#96
[#252 'bitcast']: s#79
[#252 'bool']: s#89
[#252 'f16']: s#118
[#252 'f32']: s#117
[#252 'false']: s#115
[#252 'i32']: s#119
[#252 'mat2x2']: s#101
[#252 'mat2x3']: s#102
[#252 'mat2x4']: s#103
[#252 'mat3x2']: s#104
[#252 'mat3x3']: s#105
[#252 'mat3x4']: s#106
[#252 'mat4x2']: s#107
[#252 'mat4x3']: s#108
[#252 'mat4x4']: s#109
[#252 'ptr']: s#121
[#252 'sampler']: s#138
[#252 'sampler_comparison']: s#139
[#252 'texture_1d']: s#145
[#252 'texture_2d']: s#146
[#252 'texture_2d_array']: s#147
[#252 'texture_3d']: s#148
[#252 'texture_cube']: s#149
[#252 'texture_cube_array']: s#150
[#252 'texture_depth_2d']: s#140
[#252 'texture_depth_2d_array']: s#141
[#252 'texture_depth_cube']: s#142
[#252 'texture_depth_cube_array']: s#143
[#252 'texture_depth_multisampled_2d']: s#144
[#252 'texture_multisampled_2d']: s#151
[#252 'texture_storage_1d']: s#152
[#252 'texture_storage_2d']: s#153
[#252 'texture_storage_2d_array']: s#154
[#252 'texture_storage_3d']: s#155
[#252 'true']: s#114
[#252 'u32']: s#120
[#252 'vec2']: s#98
[#252 'vec3']: s#99
[#252 'vec4']: s#100
[#252 '~']: s#72
[#252 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#252 /0[fh]/]: s#130
[#252 /0[iu]?/]: s#127
[#252 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#252 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#252 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#252 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#252 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#252 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#252 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#252 /[1-9][0-9]*[fh]/]: s#131
[#252 /[1-9][0-9]*[iu]?/]: s#128
[#253 'frag_depth']: s#263
[#253 'front_facing']: s#262
[#253 'global_invocation_id']: s#266
[#253 'instance_index']: s#260
[#253 'local_invocation_id']: s#264
[#253 'local_invocation_index']: s#265
[#253 'num_workgroups']: s#268
[#253 'position']: s#261
[#253 'sample_index']: s#269
[#253 'sample_mask']: s#270
[#253 'vertex_index']: s#259
[#253 'workgroup_id']: s#267
[#254 '!']: s#71
[#254 '&']: s#74
[#254 '(']: s#116
[#254 '*']: s#73
[#254 '-']: s#70
[#254 'array']: s#84
[#254 'atomic']: s#96
[#254 'bitcast']: s#79
[#254 'bool']: s#89
[#254 'f16']: s#118
[#254 'f32']: s#117
[#254 'false']: s#115
[#254 'i32']: s#119
[#254 'mat2x2']: s#101
[#254 'mat2x3']: s#102
[#254 'mat2x4']: s#103
[#254 'mat3x2']: s#104
[#254 'mat3x3']: s#105
[#254 'mat3x4']: s#106
[#254 'mat4x2']: s#107
[#254 'mat4x3']: s#108
[#254 'mat4x4']: s#109
[#254 'ptr']: s#121
[#254 'sampler']: s#138
[#254 'sampler_comparison']: s#139
[#254 'texture_1d']: s#145
[#254 'texture_2d']: s#146
[#254 'texture_2d_array']: s#147
[#254 'texture_3d']: s#148
[#254 'texture_cube']: s#149
[#254 'texture_cube_array']: s#150
[#254 'texture_depth_2d']: s#140
[#254 'texture_depth_2d_array']: s#141
[#254 'texture_depth_cube']: s#142
[#254 'texture_depth_cube_array']: s#143
[#254 'texture_depth_multisampled_2d']: s#144
[#254 'texture_multisampled_2d']: s#151
[#254 'texture_storage_1d']: s#152
[#254 'texture_storage_2d']: s#153
[#254 'texture_storage_2d_array']: s#154
[#254 'texture_storage_3d']: s#155
[#254 'true']: s#114
[#254 'u32']: s#120
[#254 'vec2']: s#98
[#254 'vec3']: s#99
[#254 'vec4']: s#100
[#254 '~']: s#72
[#254 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#254 /0[fh]/]: s#130
[#254 /0[iu]?/]: s#127
[#254 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#254 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#254 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#254 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#254 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#254 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#254 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#254 /[1-9][0-9]*[fh]/]: s#131
[#254 /[1-9][0-9]*[iu]?/]: s#128
[#255 '!']: s#71
[#255 '&']: s#74
[#255 '(']: s#116
[#255 '*']: s#73
[#255 '-']: s#70
[#255 'array']: s#84
[#255 'atomic']: s#96
[#255 'bitcast']: s#79
[#255 'bool']: s#89
[#255 'f16']: s#118
[#255 'f32']: s#117
[#255 'false']: s#115
[#255 'i32']: s#119
[#255 'mat2x2']: s#101
[#255 'mat2x3']: s#102
[#255 'mat2x4']: s#103
[#255 'mat3x2']: s#104
[#255 'mat3x3']: s#105
[#255 'mat3x4']: s#106
[#255 'mat4x2']: s#107
[#255 'mat4x3']: s#108
[#255 'mat4x4']: s#109
[#255 'ptr']: s#121
[#255 'sampler']: s#138
[#255 'sampler_comparison']: s#139
[#255 'texture_1d']: s#145
[#255 'texture_2d']: s#146
[#255 'texture_2d_array']: s#147
[#255 'texture_3d']: s#148
[#255 'texture_cube']: s#149
[#255 'texture_cube_array']: s#150
[#255 'texture_depth_2d']: s#140
[#255 'texture_depth_2d_array']: s#141
[#255 'texture_depth_cube']: s#142
[#255 'texture_depth_cube_array']: s#143
[#255 'texture_depth_multisampled_2d']: s#144
[#255 'texture_multisampled_2d']: s#151
[#255 'texture_storage_1d']: s#152
[#255 'texture_storage_2d']: s#153
[#255 'texture_storage_2d_array']: s#154
[#255 'texture_storage_3d']: s#155
[#255 'true']: s#114
[#255 'u32']: s#120
[#255 'vec2']: s#98
[#255 'vec3']: s#99
[#255 'vec4']: s#100
[#255 '~']: s#72
[#255 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#255 /0[fh]/]: s#130
[#255 /0[iu]?/]: s#127
[#255 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#255 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#255 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#255 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#255 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#255 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#255 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#255 /[1-9][0-9]*[fh]/]: s#131
[#255 /[1-9][0-9]*[iu]?/]: s#128
[#256 ',']: s#406
[#257 ',']: s#406
[#258 ',']: s#406
[#259 ')']: r#157
[#259 ',']: r#157
[#260 ')']: r#158
[#260 ',']: r#158
[#261 ')']: r#159
[#261 ',']: r#159
[#262 ')']: r#160
[#262 ',']: r#160
[#263 ')']: r#161
[#263 ',']: r#161
[#264 ')']: r#162
[#264 ',']: r#162
[#265 ')']: r#163
[#265 ',']: r#163
[#266 ')']: r#164
[#266 ',']: r#164
[#267 ')']: r#165
[#267 ',']: r#165
[#268 ')']: r#166
[#268 ',']: r#166
[#269 ')']: r#167
[#269 ',']: r#167
[#270 ')']: r#168
[#270 ',']: r#168
[#271 ',']: s#406
[#272 ',']: s#406
[#273 ',']: s#406
[#274 ')']: r#169
[#274 ',']: r#169
[#275 ')']: r#170
[#275 ',']: r#170
[#276 ')']: r#171
[#276 ',']: r#171
[#277 ',']: s#406
[#278 ',']: s#406
[#279 ',']: s#406
[#280 ')']: r#172
[#280 ',']: r#172
[#280 ':']: r#172
[#280 ';']: r#172
[#280 ']']: r#172
[#280 '{']: r#172
[#280 '||']: r#173
[#281 '!=']: r#32
[#281 '%']: r#32
[#281 '&&']: r#32
[#281 ')']: r#32
[#281 '*']: r#32
[#281 '+']: r#32
[#281 ',']: r#32
[#281 '-']: r#32
[#281 '/']: r#32
[#281 ':']: r#32
[#281 ';']: r#32
[#281 '<']: r#32
[#281 '<<']: s#221
[#281 '<=']: r#32
[#281 '==']: r#32
[#281 '>']: r#32
[#281 '>=']: r#32
[#281 '>>']: s#222
[#281 ']']: r#32
[#281 '{']: r#32
[#281 '||']: r#32
[#282 '&&']: r#175
[#282 ')']: r#174
[#282 ',']: r#174
[#282 ':']: r#174
[#282 ';']: r#174
[#282 ']']: r#174
[#282 '{']: r#174
[#283 '&&']: r#176
[#283 ')']: r#176
[#283 ',']: r#176
[#283 ':']: r#176
[#283 ';']: r#176
[#283 ']']: r#176
[#283 '{']: r#176
[#283 '||']: r#176
[#284 '&&']: r#177
[#284 ')']: r#177
[#284 ',']: r#177
[#284 ':']: r#177
[#284 ';']: r#177
[#284 ']']: r#177
[#284 '{']: r#177
[#284 '||']: r#177
[#285 '&&']: r#178
[#285 ')']: r#178
[#285 ',']: r#178
[#285 ':']: r#178
[#285 ';']: r#178
[#285 ']']: r#178
[#285 '{']: r#178
[#285 '||']: r#178
[#286 '&&']: r#179
[#286 ')']: r#179
[#286 ',']: r#179
[#286 ':']: r#179
[#286 ';']: r#179
[#286 ']']: r#179
[#286 '{']: r#179
[#286 '||']: r#179
[#287 '&&']: r#180
[#287 ')']: r#180
[#287 ',']: r#180
[#287 ':']: r#180
[#287 ';']: r#180
[#287 ']']: r#180
[#287 '{']: r#180
[#287 '||']: r#180
[#288 '&&']: r#181
[#288 ')']: r#181
[#288 ',']: r#181
[#288 ':']: r#181
[#288 ';']: r#181
[#288 ']']: r#181
[#288 '{']: r#181
[#288 '||']: r#181
[#289 '&']: r#183
[#289 ')']: r#182
[#289 ',']: r#182
[#289 ':']: r#182
[#289 ';']: r#182
[#289 '>']: r#182
[#289 ']']: r#182
[#289 '{']: r#182
[#290 ')']: r#184
[#290 ',']: r#184
[#290 ':']: r#184
[#290 ';']: r#184
[#290 '>']: r#184
[#290 ']']: r#184
[#290 '{']: r#184
[#290 '|']: r#185
[#291 ')']: r#186
[#291 ',']: r#186
[#291 ':']: r#186
[#291 ';']: r#186
[#291 '>']: r#186
[#291 ']']: r#186
[#291 '^']: r#187
[#291 '{']: r#186
[#292 '!=']: r#188
[#292 '%']: s#218
[#292 '&&']: r#188
[#292 ')']: r#188
[#292 '*']: s#73
[#292 '+']: r#188
[#292 ',']: r#188
[#292 '-']: r#188
[#292 '/']: s#217
[#292 ':']: r#188
[#292 ';']: r#188
[#292 '<']: r#188
[#292 '<=']: r#188
[#292 '==']: r#188
[#292 '>']: r#188
[#292 '>=']: r#188
[#292 ']']: r#188
[#292 '{']: r#188
[#292 '||']: r#188
[#293 '!=']: r#32
[#293 '%']: r#32
[#293 '&&']: r#32
[#293 ')']: r#32
[#293 '*']: r#32
[#293 '+']: r#32
[#293 ',']: r#32
[#293 '-']: r#32
[#293 '/']: r#32
[#293 ':']: r#32
[#293 ';']: r#32
[#293 '<']: r#32
[#293 '<=']: r#32
[#293 '==']: r#32
[#293 '>']: r#32
[#293 '>=']: r#32
[#293 ']']: r#32
[#293 '{']: r#32
[#293 '||']: r#32
[#294 '!=']: r#189
[#294 '&&']: r#189
[#294 ')']: r#189
[#294 ',']: r#189
[#294 ':']: r#189
[#294 ';']: r#189
[#294 '<']: r#189
[#294 '<=']: r#189
[#294 '==']: r#189
[#294 '>']: r#189
[#294 '>=']: r#189
[#294 ']']: r#189
[#294 '{']: r#189
[#294 '||']: r#189
[#295 '!=']: r#190
[#295 '&&']: r#190
[#295 ')']: r#190
[#295 ',']: r#190
[#295 ':']: r#190
[#295 ';']: r#190
[#295 '<']: r#190
[#295 '<=']: r#190
[#295 '==']: r#190
[#295 '>']: r#190
[#295 '>=']: r#190
[#295 ']']: r#190
[#295 '{']: r#190
[#295 '||']: r#190
[#296 '!=']: r#191
[#296 '%']: r#191
[#296 '&&']: r#191
[#296 ')']: r#191
[#296 '*']: r#191
[#296 '+']: r#191
[#296 ',']: r#191
[#296 '-']: r#191
[#296 '/']: r#191
[#296 ':']: r#191
[#296 ';']: r#191
[#296 '<']: r#191
[#296 '<=']: r#191
[#296 '==']: r#191
[#296 '>']: r#191
[#296 '>=']: r#191
[#296 ']']: r#191
[#296 '{']: r#191
[#296 '||']: r#191
[#297 '.']: s#207
[#297 '[']: s#206
[#298 '.']: s#207
[#298 '[']: s#206
[#299 '!=']: r#192
[#299 '%']: r#192
[#299 '%=']: r#192
[#299 '&&']: r#192
[#299 '&']: r#192
[#299 '&=']: r#192
[#299 ')']: r#192
[#299 '*']: r#192
[#299 '*=']: r#192
[#299 '+']: r#192
[#299 '++']: r#192
[#299 '+=']: r#192
[#299 ',']: r#192
[#299 '-']: r#192
[#299 '--']: r#192
[#299 '-=']: r#192
[#299 '.']: r#192
[#299 '/']: r#192
[#299 '/=']: r#192
[#299 ':']: r#192
[#299 ';']: r#192
[#299 '<']: r#192
[#299 '<<']: r#192
[#299 '<<=']: r#192
[#299 '<=']: r#192
[#299 '=']: r#192
[#299 '==']: r#192
[#299 '>']: r#192
[#299 '>=']: r#192
[#299 '>>']: r#192
[#299 '>>=']: r#192
[#299 '[']: r#192
[#299 ']']: r#192
[#299 '^']: r#192
[#299 '^=']: r#192
[#299 '{']: r#192
[#299 '|']: r#192
[#299 '|=']: r#192
[#299 '||']: r#192
[#300 '!=']: r#193
[#300 '%']: r#193
[#300 '%=']: r#193
[#300 '&&']: r#193
[#300 '&']: r#193
[#300 '&=']: r#193
[#300 ')']: r#193
[#300 '*']: r#193
[#300 '*=']: r#193
[#300 '+']: r#193
[#300 '++']: r#193
[#300 '+=']: r#193
[#300 ',']: r#193
[#300 '-']: r#193
[#300 '--']: r#193
[#300 '-=']: r#193
[#300 '.']: r#193
[#300 '/']: r#193
[#300 '/=']: r#193
[#300 ':']: r#193
[#300 ';']: r#193
[#300 '<']: r#193
[#300 '<<']: r#193
[#300 '<<=']: r#193
[#300 '<=']: r#193
[#300 '=']: r#193
[#300 '==']: r#193
[#300 '>']: r#193
[#300 '>=']: r#193
[#300 '>>']: r#193
[#300 '>>=']: r#193
[#300 '[']: r#193
[#300 ']']: r#193
[#300 '^']: r#193
[#300 '^=']: r#193
[#300 '{']: r#193
[#300 '|']: r#193
[#300 '|=']: r#193
[#300 '||']: r#193
[#301 '!=']: r#194
[#301 '%']: r#194
[#301 '%=']: r#194
[#301 '&&']: r#194
[#301 '&']: r#194
[#301 '&=']: r#194
[#301 ')']: r#194
[#301 '*']: r#194
[#301 '*=']: r#194
[#301 '+']: r#194
[#301 '++']: r#194
[#301 '+=']: r#194
[#301 ',']: r#194
[#301 '-']: r#194
[#301 '--']: r#194
[#301 '-=']: r#194
[#301 '.']: r#194
[#301 '/']: r#194
[#301 '/=']: r#194
[#301 ':']: r#194
[#301 ';']: r#194
[#301 '<']: r#194
[#301 '<<']: r#194
[#301 '<<=']: r#194
[#301 '<=']: r#194
[#301 '=']: r#194
[#301 '==']: r#194
[#301 '>']: r#194
[#301 '>=']: r#194
[#301 '>>']: r#194
[#301 '>>=']: r#194
[#301 '[']: r#194
[#301 ']']: r#194
[#301 '^']: r#194
[#301 '^=']: r#194
[#301 '{']: r#194
[#301 '|']: r#194
[#301 '|=']: r#194
[#301 '||']: r#194
[#302 '!=']: r#195
[#302 '%']: r#195
[#302 '%=']: r#195
[#302 '&&']: r#195
[#302 '&']: r#195
[#302 '&=']: r#195
[#302 ')']: r#195
[#302 '*']: r#195
[#302 '*=']: r#195
[#302 '+']: r#195
[#302 '++']: r#195
[#302 '+=']: r#195
[#302 ',']: r#195
[#302 '-']: r#195
[#302 '--']: r#195
[#302 '-=']: r#195
[#302 '.']: r#195
[#302 '/']: r#195
[#302 '/=']: r#195
[#302 ':']: r#195
[#302 ';']: r#195
[#302 '<']: r#195
[#302 '<<']: r#195
[#302 '<<=']: r#195
[#302 '<=']: r#195
[#302 '=']: r#195
[#302 '==']: r#195
[#302 '>']: r#195
[#302 '>=']: r#195
[#302 '>>']: r#195
[#302 '>>=']: r#195
[#302 '[']: r#195
[#302 ']']: r#195
[#302 '^']: r#195
[#302 '^=']: r#195
[#302 '{']: r#195
[#302 '|']: r#195
[#302 '|=']: r#195
[#302 '||']: r#195
[#303 '!=']: r#196
[#303 '%']: r#196
[#303 '%=']: r#196
[#303 '&&']: r#196
[#303 '&']: r#196
[#303 '&=']: r#196
[#303 ')']: r#196
[#303 '*']: r#196
[#303 '*=']: r#196
[#303 '+']: r#196
[#303 '++']: r#196
[#303 '+=']: r#196
[#303 ',']: r#196
[#303 '-']: r#196
[#303 '--']: r#196
[#303 '-=']: r#196
[#303 '.']: r#196
[#303 '/']: r#196
[#303 '/=']: r#196
[#303 ':']: r#196
[#303 ';']: r#196
[#303 '<']: r#196
[#303 '<<']: r#196
[#303 '<<=']: r#196
[#303 '<=']: r#196
[#303 '=']: r#196
[#303 '==']: r#196
[#303 '>']: r#196
[#303 '>=']: r#196
[#303 '>>']: r#196
[#303 '>>=']: r#196
[#303 '[']: r#196
[#303 ']']: r#196
[#303 '^']: r#196
[#303 '^=']: r#196
[#303 '{']: r#196
[#303 '|']: r#196
[#303 '|=']: r#196
[#303 '||']: r#196
[#304 '!=']: r#197
[#304 '%']: r#197
[#304 '%=']: r#197
[#304 '&&']: r#197
[#304 '&']: r#197
[#304 '&=']: r#197
[#304 ')']: r#197
[#304 '*']: r#197
[#304 '*=']: r#197
[#304 '+']: r#197
[#304 '++']: r#197
[#304 '+=']: r#197
[#304 ',']: r#197
[#304 '-']: r#197
[#304 '--']: r#197
[#304 '-=']: r#197
[#304 '.']: r#197
[#304 '/']: r#197
[#304 '/=']: r#197
[#304 ':']: r#197
[#304 ';']: r#197
[#304 '<']: r#197
[#304 '<<']: r#197
[#304 '<<=']: r#197
[#304 '<=']: r#197
[#304 '=']: r#197
[#304 '==']: r#197
[#304 '>']: r#197
[#304 '>=']: r#197
[#304 '>>']: r#197
[#304 '>>=']: r#197
[#304 '[']: r#197
[#304 ']']: r#197
[#304 '^']: r#197
[#304 '^=']: r#197
[#304 '{']: r#197
[#304 '|']: r#197
[#304 '|=']: r#197
[#304 '||']: r#197
[#305 '!=']: r#198
[#305 '%']: r#198
[#305 '%=']: r#198
[#305 '&&']: r#198
[#305 '&']: r#198
[#305 '&=']: r#198
[#305 ')']: r#198
[#305 '*']: r#198
[#305 '*=']: r#198
[#305 '+']: r#198
[#305 '++']: r#198
[#305 '+=']: r#198
[#305 ',']: r#198
[#305 '-']: r#198
[#305 '--']: r#198
[#305 '-=']: r#198
[#305 '.']: r#198
[#305 '/']: r#198
[#305 '/=']: r#198
[#305 ':']: r#198
[#305 ';']: r#198
[#305 '<']: r#198
[#305 '<<']: r#198
[#305 '<<=']: r#198
[#305 '<=']: r#198
[#305 '=']: r#198
[#305 '==']: r#198
[#305 '>']: r#198
[#305 '>=']: r#198
[#305 '>>']: r#198
[#305 '>>=']: r#198
[#305 '[']: r#198
[#305 ']']: r#198
[#305 '^']: r#198
[#305 '^=']: r#198
[#305 '{']: r#198
[#305 '|']: r#198
[#305 '|=']: r#198
[#305 '||']: r#198
[#306 '!=']: r#199
[#306 '%']: r#199
[#306 '%=']: r#199
[#306 '&&']: r#199
[#306 '&']: r#199
[#306 '&=']: r#199
[#306 ')']: r#199
[#306 '*']: r#199
[#306 '*=']: r#199
[#306 '+']: r#199
[#306 '++']: r#199
[#306 '+=']: r#199
[#306 ',']: r#199
[#306 '-']: r#199
[#306 '--']: r#199
[#306 '-=']: r#199
[#306 '.']: r#199
[#306 '/']: r#199
[#306 '/=']: r#199
[#306 ':']: r#199
[#306 ';']: r#199
[#306 '<']: r#199
[#306 '<<']: r#199
[#306 '<<=']: r#199
[#306 '<=']: r#199
[#306 '=']: r#199
[#306 '==']: r#199
[#306 '>']: r#199
[#306 '>=']: r#199
[#306 '>>']: r#199
[#306 '>>=']: r#199
[#306 '[']: r#199
[#306 ']']: r#199
[#306 '^']: r#199
[#306 '^=']: r#199
[#306 '{']: r#199
[#306 '|']: r#199
[#306 '|=']: r#199
[#306 '||']: r#199
[#307 '!=']: r#200
[#307 '%']: r#200
[#307 '%=']: r#200
[#307 '&&']: r#200
[#307 '&']: r#200
[#307 '&=']: r#200
[#307 ')']: r#200
[#307 '*']: r#200
[#307 '*=']: r#200
[#307 '+']: r#200
[#307 '++']: r#200
[#307 '+=']: r#200
[#307 ',']: r#200
[#307 '-']: r#200
[#307 '--']: r#200
[#307 '-=']: r#200
[#307 '.']: r#200
[#307 '/']: r#200
[#307 '/=']: r#200
[#307 ':']: r#200
[#307 ';']: r#200
[#307 '<']: r#200
[#307 '<<']: r#200
[#307 '<<=']: r#200
[#307 '<=']: r#200
[#307 '=']: r#200
[#307 '==']: r#200
[#307 '>']: r#200
[#307 '>=']: r#200
[#307 '>>']: r#200
[#307 '>>=']: r#200
[#307 '[']: r#200
[#307 ']']: r#200
[#307 '^']: r#200
[#307 '^=']: r#200
[#307 '{']: r#200
[#307 '|']: r#200
[#307 '|=']: r#200
[#307 '||']: r#200
[#308 ']']: s#496
[#309 ')']: s#322
[#310 ')']: r#201
[#311 ',']: s#406
[#312 '>']: s#238
[#313 ')']: r#202
[#313 ',']: r#202
[#313 ';']: r#202
[#313 '=']: r#202
[#313 '>']: r#202
[#313 '{']: r#202
[#313 '}']: r#202
[#314 ')']: r#203
[#314 ',']: r#203
[#314 ';']: r#203
[#314 '=']: r#203
[#314 '>']: r#203
[#314 '{']: r#203
[#314 '}']: r#203
[#315 '<']: s#174
[#316 '<']: s#174
[#317 '<']: s#174
[#318 '>']: s#238
[#319 '>']: s#238
[#320 ',']: s#406
[#321 '!=']: r#204
[#321 '%']: r#204
[#321 '&&']: r#204
[#321 '&']: r#204
[#321 ')']: r#204
[#321 '*']: r#204
[#321 '+']: r#204
[#321 ',']: r#204
[#321 '-']: r#204
[#321 '.']: r#204
[#321 '/']: r#204
[#321 ':']: r#204
[#321 ';']: r#204
[#321 '<']: r#204
[#321 '<<']: r#204
[#321 '<=']: r#204
[#321 '==']: r#204
[#321 '>']: r#204
[#321 '>=']: r#204
[#321 '>>']: r#204
[#321 '[']: r#204
[#321 ']']: r#204
[#321 '^']: r#204
[#321 '{']: r#204
[#321 '|']: r#204
[#321 '||']: r#204
[#322 '!=']: r#205
[#322 '%']: r#205
[#322 '%=']: r#205
[#322 '&&']: r#205
[#322 '&']: r#205
[#322 '&=']: r#205
[#322 ')']: r#205
[#322 '*']: r#205
[#322 '*=']: r#205
[#322 '+']: r#205
[#322 '++']: r#205
[#322 '+=']: r#205
[#322 ',']: r#205
[#322 '-']: r#205
[#322 '--']: r#205
[#322 '-=']: r#205
[#322 '->']: r#205
[#322 '.']: r#205
[#322 '/']: r#205
[#322 '/=']: r#205
[#322 ':']: r#205
[#322 ';']: r#205
[#322 '<']: r#205
[#322 '<<']: r#205
[#322 '<<=']: r#205
[#322 '<=']: r#205
[#322 '=']: r#205
[#322 '==']: r#205
[#322 '>']: r#205
[#322 '>=']: r#205
[#322 '>>']: r#205
[#322 '>>=']: r#205
[#322 '@']: r#205
[#322 '[']: r#205
[#322 ']']: r#205
[#322 '^']: r#205
[#322 '^=']: r#205
[#322 'array']: r#205
[#322 'atomic']: r#205
[#322 'bool']: r#205
[#322 'f16']: r#205
[#322 'f32']: r#205
[#322 'fn']: r#205
[#322 'i32']: r#205
[#322 'mat2x2']: r#205
[#322 'mat2x3']: r#205
[#322 'mat2x4']: r#205
[#322 'mat3x2']: r#205
[#322 'mat3x3']: r#205
[#322 'mat3x4']: r#205
[#322 'mat4x2']: r#205
[#322 'mat4x3']: r#205
[#322 'mat4x4']: r#205
[#322 'override']: r#205
[#322 'ptr']: r#205
[#322 'sampler']: r#205
[#322 'sampler_comparison']: r#205
[#322 'texture_1d']: r#205
[#322 'texture_2d']: r#205
[#322 'texture_2d_array']: r#205
[#322 'texture_3d']: r#205
[#322 'texture_cube']: r#205
[#322 'texture_cube_array']: r#205
[#322 'texture_depth_2d']: r#205
[#322 'texture_depth_2d_array']: r#205
[#322 'texture_depth_cube']: r#205
[#322 'texture_depth_cube_array']: r#205
[#322 'texture_depth_multisampled_2d']: r#205
[#322 'texture_multisampled_2d']: r#205
[#322 'texture_storage_1d']: r#205
[#322 'texture_storage_2d']: r#205
[#322 'texture_storage_2d_array']: r#205
[#322 'texture_storage_3d']: r#205
[#322 'u32']: r#205
[#322 'var']: r#205
[#322 'vec2']: r#205
[#322 'vec3']: r#205
[#322 'vec4']: r#205
[#322 '{']: r#205
[#322 '|']: r#205
[#322 '|=']: r#205
[#322 '||']: r#205
[#323 ',']: s#406
[#324 ',']: r#206
[#324 '>']: r#206
[#325 ',']: r#207
[#325 '>']: r#207
[#326 ',']: r#208
[#326 '>']: r#208
[#327 ',']: r#209
[#327 '>']: r#209
[#328 ',']: r#210
[#328 '>']: r#210
[#329 '>']: s#238
[#330 '>']: s#238
[#331 '>']: s#238
[#332 ',']: s#406
[#333 ',']: r#211
[#334 ',']: r#212
[#335 ',']: r#213
[#336 ',']: r#214
[#337 ',']: r#215
[#338 ',']: r#216
[#339 ',']: r#217
[#340 ',']: r#218
[#341 ',']: r#219
[#342 ',']: r#220
[#343 ',']: r#221
[#344 ',']: r#222
[#345 ',']: r#223
[#346 ',']: r#224
[#347 ',']: r#225
[#348 ',']: r#226
[#349 ',']: r#227
[#350 '}']: s#479
[#351 '}']: r#228
[#352 '&']: s#74
[#352 '(']: s#116
[#352 '*']: s#73
[#352 ';']: s#20
[#352 '_']: s#389
[#352 'break']: s#378
[#352 'const']: s#377
[#352 'continue']: s#379
[#352 'discard']: s#364
[#352 'for']: s#372
[#352 'if']: s#383
[#352 'let']: s#376
[#352 'loop']: s#371
[#352 'return']: s#368
[#352 'static_assert']: s#27
[#352 'switch']: s#370
[#352 'var']: s#164
[#352 'while']: s#373
[#352 '{']: s#186
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#353 '&']: r#229
[#353 '(']: r#229
[#353 '*']: r#229
[#353 ';']: r#229
[#353 '_']: r#229
[#353 'break']: r#229
[#353 'const']: r#229
[#353 'continue']: r#229
[#353 'continuing']: r#229
[#353 'discard']: r#229
[#353 'for']: r#229
[#353 'if']: r#229
[#353 'let']: r#229
[#353 'loop']: r#229
[#353 'return']: r#229
[#353 'static_assert']: r#229
[#353 'switch']: r#229
[#353 'var']: r#229
[#353 'while']: r#229
[#353 '{']: r#229
[#353 '}']: r#229
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#229
[#354 ';']: s#20
[#355 '&']: r#230
[#355 '(']: r#230
[#355 '*']: r#230
[#355 ';']: r#230
[#355 '_']: r#230
[#355 'break']: r#230
[#355 'const']: r#230
[#355 'continue']: r#230
[#355 'continuing']: r#230
[#355 'discard']: r#230
[#355 'for']: r#230
[#355 'if']: r#230
[#355 'let']: r#230
[#355 'loop']: r#230
[#355 'return']: r#230
[#355 'static_assert']: r#230
[#355 'switch']: r#230
[#355 'var']: r#230
[#355 'while']: r#230
[#355 '{']: r#230
[#355 '}']: r#230
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#230
[#356 '&']: r#231
[#356 '(']: r#231
[#356 '*']: r#231
[#356 ';']: r#231
[#356 '_']: r#231
[#356 'break']: r#231
[#356 'const']: r#231
[#356 'continue']: r#231
[#356 'continuing']: r#231
[#356 'discard']: r#231
[#356 'for']: r#231
[#356 'if']: r#231
[#356 'let']: r#231
[#356 'loop']: r#231
[#356 'return']: r#231
[#356 'static_assert']: r#231
[#356 'switch']: r#231
[#356 'var']: r#231
[#356 'while']: r#231
[#356 '{']: r#231
[#356 '}']: r#231
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#231
[#357 '&']: r#232
[#357 '(']: r#232
[#357 '*']: r#232
[#357 ';']: r#232
[#357 '_']: r#232
[#357 'break']: r#232
[#357 'const']: r#232
[#357 'continue']: r#232
[#357 'continuing']: r#232
[#357 'discard']: r#232
[#357 'for']: r#232
[#357 'if']: r#232
[#357 'let']: r#232
[#357 'loop']: r#232
[#357 'return']: r#232
[#357 'static_assert']: r#232
[#357 'switch']: r#232
[#357 'var']: r#232
[#357 'while']: r#232
[#357 '{']: r#232
[#357 '}']: r#232
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#232
[#358 '&']: r#233
[#358 '(']: r#233
[#358 '*']: r#233
[#358 ';']: r#233
[#358 '_']: r#233
[#358 'break']: r#233
[#358 'const']: r#233
[#358 'continue']: r#233
[#358 'continuing']: r#233
[#358 'discard']: r#233
[#358 'for']: r#233
[#358 'if']: r#233
[#358 'let']: r#233
[#358 'loop']: r#233
[#358 'return']: r#233
[#358 'static_assert']: r#233
[#358 'switch']: r#233
[#358 'var']: r#233
[#358 'while']: r#233
[#358 '{']: r#233
[#358 '}']: r#233
[#358 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#233
[#359 '&']: r#234
[#359 '(']: r#234
[#359 '*']: r#234
[#359 ';']: r#234
[#359 '_']: r#234
[#359 'break']: r#234
[#359 'const']: r#234
[#359 'continue']: r#234
[#359 'continuing']: r#234
[#359 'discard']: r#234
[#359 'for']: r#234
[#359 'if']: r#234
[#359 'let']: r#234
[#359 'loop']: r#234
[#359 'return']: r#234
[#359 'static_assert']: r#234
[#359 'switch']: r#234
[#359 'var']: r#234
[#359 'while']: r#234
[#359 '{']: r#234
[#359 '}']: r#234
[#359 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#234
[#360 ';']: s#20
[#361 ';']: s#20
[#362 ';']: s#20
[#363 ';']: s#20
[#364 ';']: s#20
[#365 ';']: s#20
[#366 '&']: r#235
[#366 '(']: r#235
[#366 '*']: r#235
[#366 ';']: r#235
[#366 '_']: r#235
[#366 'break']: r#235
[#366 'const']: r#235
[#366 'continue']: r#235
[#366 'continuing']: r#235
[#366 'discard']: r#235
[#366 'for']: r#235
[#366 'if']: r#235
[#366 'let']: r#235
[#366 'loop']: r#235
[#366 'return']: r#235
[#366 'static_assert']: r#235
[#366 'switch']: r#235
[#366 'var']: r#235
[#366 'while']: r#235
[#366 '{']: r#235
[#366 '}']: r#235
[#366 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#235
[#367 ';']: s#20
[#368 '!']: s#71
[#368 '&']: s#74
[#368 '(']: s#116
[#368 '*']: s#73
[#368 '-']: s#70
[#368 'array']: s#84
[#368 'atomic']: s#96
[#368 'bitcast']: s#79
[#368 'bool']: s#89
[#368 'f16']: s#118
[#368 'f32']: s#117
[#368 'false']: s#115
[#368 'i32']: s#119
[#368 'mat2x2']: s#101
[#368 'mat2x3']: s#102
[#368 'mat2x4']: s#103
[#368 'mat3x2']: s#104
[#368 'mat3x3']: s#105
[#368 'mat3x4']: s#106
[#368 'mat4x2']: s#107
[#368 'mat4x3']: s#108
[#368 'mat4x4']: s#109
[#368 'ptr']: s#121
[#368 'sampler']: s#138
[#368 'sampler_comparison']: s#139
[#368 'texture_1d']: s#145
[#368 'texture_2d']: s#146
[#368 'texture_2d_array']: s#147
[#368 'texture_3d']: s#148
[#368 'texture_cube']: s#149
[#368 'texture_cube_array']: s#150
[#368 'texture_depth_2d']: s#140
[#368 'texture_depth_2d_array']: s#141
[#368 'texture_depth_cube']: s#142
[#368 'texture_depth_cube_array']: s#143
[#368 'texture_depth_multisampled_2d']: s#144
[#368 'texture_multisampled_2d']: s#151
[#368 'texture_storage_1d']: s#152
[#368 'texture_storage_2d']: s#153
[#368 'texture_storage_2d_array']: s#154
[#368 'texture_storage_3d']: s#155
[#368 'true']: s#114
[#368 'u32']: s#120
[#368 'vec2']: s#98
[#368 'vec3']: s#99
[#368 'vec4']: s#100
[#368 '~']: s#72
[#368 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#368 /0[fh]/]: s#130
[#368 /0[iu]?/]: s#127
[#368 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#368 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#368 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#368 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#368 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#368 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#368 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#368 /[1-9][0-9]*[fh]/]: s#131
[#368 /[1-9][0-9]*[iu]?/]: s#128
[#369 'else']: s#466
[#370 '!']: s#71
[#370 '&']: s#74
[#370 '(']: s#116
[#370 '*']: s#73
[#370 '-']: s#70
[#370 'array']: s#84
[#370 'atomic']: s#96
[#370 'bitcast']: s#79
[#370 'bool']: s#89
[#370 'f16']: s#118
[#370 'f32']: s#117
[#370 'false']: s#115
[#370 'i32']: s#119
[#370 'mat2x2']: s#101
[#370 'mat2x3']: s#102
[#370 'mat2x4']: s#103
[#370 'mat3x2']: s#104
[#370 'mat3x3']: s#105
[#370 'mat3x4']: s#106
[#370 'mat4x2']: s#107
[#370 'mat4x3']: s#108
[#370 'mat4x4']: s#109
[#370 'ptr']: s#121
[#370 'sampler']: s#138
[#370 'sampler_comparison']: s#139
[#370 'texture_1d']: s#145
[#370 'texture_2d']: s#146
[#370 'texture_2d_array']: s#147
[#370 'texture_3d']: s#148
[#370 'texture_cube']: s#149
[#370 'texture_cube_array']: s#150
[#370 'texture_depth_2d']: s#140
[#370 'texture_depth_2d_array']: s#141
[#370 'texture_depth_cube']: s#142
[#370 'texture_depth_cube_array']: s#143
[#370 'texture_depth_multisampled_2d']: s#144
[#370 'texture_multisampled_2d']: s#151
[#370 'texture_storage_1d']: s#152
[#370 'texture_storage_2d']: s#153
[#370 'texture_storage_2d_array']: s#154
[#370 'texture_storage_3d']: s#155
[#370 'true']: s#114
[#370 'u32']: s#120
[#370 'vec2']: s#98
[#370 'vec3']: s#99
[#370 'vec4']: s#100
[#370 '~']: s#72
[#370 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#370 /0[fh]/]: s#130
[#370 /0[iu]?/]: s#127
[#370 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#370 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#370 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#370 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#370 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#370 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#370 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#370 /[1-9][0-9]*[fh]/]: s#131
[#370 /[1-9][0-9]*[iu]?/]: s#128
[#371 '{']: s#186
[#372 '(']: s#116
[#373 '!']: s#71
[#373 '&']: s#74
[#373 '(']: s#116
[#373 '*']: s#73
[#373 '-']: s#70
[#373 'array']: s#84
[#373 'atomic']: s#96
[#373 'bitcast']: s#79
[#373 'bool']: s#89
[#373 'f16']: s#118
[#373 'f32']: s#117
[#373 'false']: s#115
[#373 'i32']: s#119
[#373 'mat2x2']: s#101
[#373 'mat2x3']: s#102
[#373 'mat2x4']: s#103
[#373 'mat3x2']: s#104
[#373 'mat3x3']: s#105
[#373 'mat3x4']: s#106
[#373 'mat4x2']: s#107
[#373 'mat4x3']: s#108
[#373 'mat4x4']: s#109
[#373 'ptr']: s#121
[#373 'sampler']: s#138
[#373 'sampler_comparison']: s#139
[#373 'texture_1d']: s#145
[#373 'texture_2d']: s#146
[#373 'texture_2d_array']: s#147
[#373 'texture_3d']: s#148
[#373 'texture_cube']: s#149
[#373 'texture_cube_array']: s#150
[#373 'texture_depth_2d']: s#140
[#373 'texture_depth_2d_array']: s#141
[#373 'texture_depth_cube']: s#142
[#373 'texture_depth_cube_array']: s#143
[#373 'texture_depth_multisampled_2d']: s#144
[#373 'texture_multisampled_2d']: s#151
[#373 'texture_storage_1d']: s#152
[#373 'texture_storage_2d']: s#153
[#373 'texture_storage_2d_array']: s#154
[#373 'texture_storage_3d']: s#155
[#373 'true']: s#114
[#373 'u32']: s#120
[#373 'vec2']: s#98
[#373 'vec3']: s#99
[#373 'vec4']: s#100
[#373 '~']: s#72
[#373 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#373 /0[fh]/]: s#130
[#373 /0[iu]?/]: s#127
[#373 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#373 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#373 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#373 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#373 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#373 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#373 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#373 /[1-9][0-9]*[fh]/]: s#131
[#373 /[1-9][0-9]*[iu]?/]: s#128
[#374 '%=']: r#236
[#374 '&=']: r#236
[#374 '(']: s#116
[#374 '*=']: r#236
[#374 '++']: r#236
[#374 '+=']: r#236
[#374 '--']: r#236
[#374 '-=']: r#236
[#374 '.']: r#236
[#374 '/=']: r#236
[#374 '<<=']: r#236
[#374 '=']: r#236
[#374 '>>=']: r#236
[#374 '[']: r#236
[#374 '^=']: r#236
[#374 '|=']: r#236
[#375 ';']: r#237
[#375 '=']: s#177
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#377 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#378 ';']: r#238
[#379 ';']: r#239
[#380 ')']: r#240
[#380 ';']: r#240
[#381 ')']: r#241
[#381 ';']: r#241
[#382 ')']: r#242
[#382 ';']: r#242
[#383 '!']: s#71
[#383 '&']: s#74
[#383 '(']: s#116
[#383 '*']: s#73
[#383 '-']: s#70
[#383 'array']: s#84
[#383 'atomic']: s#96
[#383 'bitcast']: s#79
[#383 'bool']: s#89
[#383 'f16']: s#118
[#383 'f32']: s#117
[#383 'false']: s#115
[#383 'i32']: s#119
[#383 'mat2x2']: s#101
[#383 'mat2x3']: s#102
[#383 'mat2x4']: s#103
[#383 'mat3x2']: s#104
[#383 'mat3x3']: s#105
[#383 'mat3x4']: s#106
[#383 'mat4x2']: s#107
[#383 'mat4x3']: s#108
[#383 'mat4x4']: s#109
[#383 'ptr']: s#121
[#383 'sampler']: s#138
[#383 'sampler_comparison']: s#139
[#383 'texture_1d']: s#145
[#383 'texture_2d']: s#146
[#383 'texture_2d_array']: s#147
[#383 'texture_3d']: s#148
[#383 'texture_cube']: s#149
[#383 'texture_cube_array']: s#150
[#383 'texture_depth_2d']: s#140
[#383 'texture_depth_2d_array']: s#141
[#383 'texture_depth_cube']: s#142
[#383 'texture_depth_cube_array']: s#143
[#383 'texture_depth_multisampled_2d']: s#144
[#383 'texture_multisampled_2d']: s#151
[#383 'texture_storage_1d']: s#152
[#383 'texture_storage_2d']: s#153
[#383 'texture_storage_2d_array']: s#154
[#383 'texture_storage_3d']: s#155
[#383 'true']: s#114
[#383 'u32']: s#120
[#383 'vec2']: s#98
[#383 'vec3']: s#99
[#383 'vec4']: s#100
[#383 '~']: s#72
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#383 /0[fh]/]: s#130
[#383 /0[iu]?/]: s#127
[#383 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#383 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#383 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#383 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#383 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#383 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#383 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#383 /[1-9][0-9]*[fh]/]: s#131
[#383 /[1-9][0-9]*[iu]?/]: s#128
[#384 '%=']: s#448
[#384 '&=']: s#449
[#384 '*=']: s#446
[#384 '++']: s#432
[#384 '+=']: s#444
[#384 '--']: s#433
[#384 '-=']: s#445
[#384 '/=']: s#447
[#384 '<<=']: s#453
[#384 '=']: s#177
[#384 '>>=']: s#452
[#384 '^=']: s#451
[#384 '|=']: s#450
[#385 '=']: s#177
[#386 '.']: s#207
[#386 '[']: s#206
[#387 '&']: s#74
[#387 '(']: s#116
[#387 '*']: s#73
[#387 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#388 '&']: s#74
[#388 '(']: s#116
[#388 '*']: s#73
[#388 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#389 '=']: r#243
[#390 '&']: s#74
[#390 '(']: s#116
[#390 '*']: s#73
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#391 '@']: s#33
[#392 ',']: s#406
[#393 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#299
[#395 '@']: s#33
[#396 ';']: r#244
[#397 ';']: r#245
[#398 '!']: s#71
[#398 '&']: s#74
[#398 '(']: s#116
[#398 '*']: s#73
[#398 '-']: s#70
[#398 'array']: s#84
[#398 'atomic']: s#96
[#398 'bitcast']: s#79
[#398 'bool']: s#89
[#398 'f16']: s#118
[#398 'f32']: s#117
[#398 'false']: s#115
[#398 'i32']: s#119
[#398 'mat2x2']: s#101
[#398 'mat2x3']: s#102
[#398 'mat2x4']: s#103
[#398 'mat3x2']: s#104
[#398 'mat3x3']: s#105
[#398 'mat3x4']: s#106
[#398 'mat4x2']: s#107
[#398 'mat4x3']: s#108
[#398 'mat4x4']: s#109
[#398 'ptr']: s#121
[#398 'sampler']: s#138
[#398 'sampler_comparison']: s#139
[#398 'texture_1d']: s#145
[#398 'texture_2d']: s#146
[#398 'texture_2d_array']: s#147
[#398 'texture_3d']: s#148
[#398 'texture_cube']: s#149
[#398 'texture_cube_array']: s#150
[#398 'texture_depth_2d']: s#140
[#398 'texture_depth_2d_array']: s#141
[#398 'texture_depth_cube']: s#142
[#398 'texture_depth_cube_array']: s#143
[#398 'texture_depth_multisampled_2d']: s#144
[#398 'texture_multisampled_2d']: s#151
[#398 'texture_storage_1d']: s#152
[#398 'texture_storage_2d']: s#153
[#398 'texture_storage_2d_array']: s#154
[#398 'texture_storage_3d']: s#155
[#398 'true']: s#114
[#398 'u32']: s#120
[#398 'vec2']: s#98
[#398 'vec3']: s#99
[#398 'vec4']: s#100
[#398 '~']: s#72
[#398 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#398 /0[fh]/]: s#130
[#398 /0[iu]?/]: s#127
[#398 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#398 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#398 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#398 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#398 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#398 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#398 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#398 /[1-9][0-9]*[fh]/]: s#131
[#398 /[1-9][0-9]*[iu]?/]: s#128
[#399 ';']: r#246
[#400 ';']: r#247
[#400 '=']: r#247
[#401 ';']: r#248
[#402 ',']: s#406
[#403 ';']: r#249
[#403 '=']: r#249
[#404 '>']: s#238
[#405 'read']: s#534
[#405 'read_write']: s#536
[#405 'write']: s#535
[#406 '!']: r#250
[#406 '&']: r#250
[#406 '(']: r#250
[#406 ')']: r#250
[#406 '*']: r#250
[#406 '-']: r#250
[#406 ':']: r#250
[#406 '@']: r#250
[#406 'array']: r#250
[#406 'atomic']: r#250
[#406 'bitcast']: r#250
[#406 'bool']: r#250
[#406 'default']: r#250
[#406 'f16']: r#250
[#406 'f32']: r#250
[#406 'false']: r#250
[#406 'i32']: r#250
[#406 'mat2x2']: r#250
[#406 'mat2x3']: r#250
[#406 'mat2x4']: r#250
[#406 'mat3x2']: r#250
[#406 'mat3x3']: r#250
[#406 'mat3x4']: r#250
[#406 'mat4x2']: r#250
[#406 'mat4x3']: r#250
[#406 'mat4x4']: r#250
[#406 'ptr']: r#250
[#406 'sampler']: r#250
[#406 'sampler_comparison']: r#250
[#406 'texture_1d']: r#250
[#406 'texture_2d']: r#250
[#406 'texture_2d_array']: r#250
[#406 'texture_3d']: r#250
[#406 'texture_cube']: r#250
[#406 'texture_cube_array']: r#250
[#406 'texture_depth_2d']: r#250
[#406 'texture_depth_2d_array']: r#250
[#406 'texture_depth_cube']: r#250
[#406 'texture_depth_cube_array']: r#250
[#406 'texture_depth_multisampled_2d']: r#250
[#406 'texture_multisampled_2d']: r#250
[#406 'texture_storage_1d']: r#250
[#406 'texture_storage_2d']: r#250
[#406 'texture_storage_2d_array']: r#250
[#406 'texture_storage_3d']: r#250
[#406 'true']: r#250
[#406 'u32']: r#250
[#406 'vec2']: r#250
[#406 'vec3']: r#250
[#406 'vec4']: r#250
[#406 '{']: r#250
[#406 '}']: r#250
[#406 '~']: r#250
[#406 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#250
[#406 /0[xX][0-9a-fA-F]+[iu]?/]: r#250
[#407 ';']: r#251
[#409 ':']: s#180
[#410 ',']: s#406
[#411 ',']: r#252
[#411 '}']: r#252
[#412 ',']: s#406
[#413 '@']: s#33
[#414 ')']: s#322
[#415 ')']: r#253
[#416 ',']: s#406
[#417 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#419 '@']: s#33
[#420 ')']: s#322
[#421 '%=']: r#236
[#421 '&=']: r#236
[#421 ')']: r#236
[#421 '*=']: r#236
[#421 '++']: r#236
[#421 '+=']: r#236
[#421 '--']: r#236
[#421 '-=']: r#236
[#421 '.']: r#236
[#421 '/=']: r#236
[#421 '<<=']: r#236
[#421 '=']: r#236
[#421 '>>=']: r#236
[#421 '[']: r#236
[#421 '^=']: r#236
[#421 '|=']: r#236
[#422 '%=']: r#254
[#422 '&=']: r#254
[#422 ')']: r#254
[#422 '*=']: r#254
[#422 '++']: r#254
[#422 '+=']: r#254
[#422 '--']: r#254
[#422 '-=']: r#254
[#422 '/=']: r#254
[#422 '<<=']: r#254
[#422 '=']: r#254
[#422 '>>=']: r#254
[#422 '^=']: r#254
[#422 '|=']: r#254
[#423 '%=']: r#255
[#423 '&=']: r#255
[#423 ')']: r#255
[#423 '*=']: r#255
[#423 '++']: r#255
[#423 '+=']: r#255
[#423 '--']: r#255
[#423 '-=']: r#255
[#423 '/=']: r#255
[#423 '<<=']: r#255
[#423 '=']: r#255
[#423 '>>=']: r#255
[#423 '^=']: r#255
[#423 '|=']: r#255
[#424 '%=']: r#256
[#424 '&=']: r#256
[#424 ')']: r#256
[#424 '*=']: r#256
[#424 '++']: r#256
[#424 '+=']: r#256
[#424 '--']: r#256
[#424 '-=']: r#256
[#424 '/=']: r#256
[#424 '<<=']: r#256
[#424 '=']: r#256
[#424 '>>=']: r#256
[#424 '^=']: r#256
[#424 '|=']: r#256
[#425 '%=']: r#257
[#425 '&=']: r#257
[#425 ')']: r#257
[#425 '*=']: r#257
[#425 '++']: r#257
[#425 '+=']: r#257
[#425 '--']: r#257
[#425 '-=']: r#257
[#425 '/=']: r#257
[#425 '<<=']: r#257
[#425 '=']: r#257
[#425 '>>=']: r#257
[#425 '^=']: r#257
[#425 '|=']: r#257
[#426 '!']: s#71
[#426 '&']: s#74
[#426 '(']: s#116
[#426 '*']: s#73
[#426 '-']: s#70
[#426 'array']: s#84
[#426 'atomic']: s#96
[#426 'bitcast']: s#79
[#426 'bool']: s#89
[#426 'f16']: s#118
[#426 'f32']: s#117
[#426 'false']: s#115
[#426 'i32']: s#119
[#426 'mat2x2']: s#101
[#426 'mat2x3']: s#102
[#426 'mat2x4']: s#103
[#426 'mat3x2']: s#104
[#426 'mat3x3']: s#105
[#426 'mat3x4']: s#106
[#426 'mat4x2']: s#107
[#426 'mat4x3']: s#108
[#426 'mat4x4']: s#109
[#426 'ptr']: s#121
[#426 'sampler']: s#138
[#426 'sampler_comparison']: s#139
[#426 'texture_1d']: s#145
[#426 'texture_2d']: s#146
[#426 'texture_2d_array']: s#147
[#426 'texture_3d']: s#148
[#426 'texture_cube']: s#149
[#426 'texture_cube_array']: s#150
[#426 'texture_depth_2d']: s#140
[#426 'texture_depth_2d_array']: s#141
[#426 'texture_depth_cube']: s#142
[#426 'texture_depth_cube_array']: s#143
[#426 'texture_depth_multisampled_2d']: s#144
[#426 'texture_multisampled_2d']: s#151
[#426 'texture_storage_1d']: s#152
[#426 'texture_storage_2d']: s#153
[#426 'texture_storage_2d_array']: s#154
[#426 'texture_storage_3d']: s#155
[#426 'true']: s#114
[#426 'u32']: s#120
[#426 'vec2']: s#98
[#426 'vec3']: s#99
[#426 'vec4']: s#100
[#426 '~']: s#72
[#426 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#426 /0[fh]/]: s#130
[#426 /0[iu]?/]: s#127
[#426 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#426 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#426 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#426 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#426 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#426 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#426 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#426 /[1-9][0-9]*[fh]/]: s#131
[#426 /[1-9][0-9]*[iu]?/]: s#128
[#427 '!']: s#71
[#427 '&']: s#74
[#427 '(']: s#116
[#427 '*']: s#73
[#427 '-']: s#70
[#427 'array']: s#84
[#427 'atomic']: s#96
[#427 'bitcast']: s#79
[#427 'bool']: s#89
[#427 'f16']: s#118
[#427 'f32']: s#117
[#427 'false']: s#115
[#427 'i32']: s#119
[#427 'mat2x2']: s#101
[#427 'mat2x3']: s#102
[#427 'mat2x4']: s#103
[#427 'mat3x2']: s#104
[#427 'mat3x3']: s#105
[#427 'mat3x4']: s#106
[#427 'mat4x2']: s#107
[#427 'mat4x3']: s#108
[#427 'mat4x4']: s#109
[#427 'ptr']: s#121
[#427 'sampler']: s#138
[#427 'sampler_comparison']: s#139
[#427 'texture_1d']: s#145
[#427 'texture_2d']: s#146
[#427 'texture_2d_array']: s#147
[#427 'texture_3d']: s#148
[#427 'texture_cube']: s#149
[#427 'texture_cube_array']: s#150
[#427 'texture_depth_2d']: s#140
[#427 'texture_depth_2d_array']: s#141
[#427 'texture_depth_cube']: s#142
[#427 'texture_depth_cube_array']: s#143
[#427 'texture_depth_multisampled_2d']: s#144
[#427 'texture_multisampled_2d']: s#151
[#427 'texture_storage_1d']: s#152
[#427 'texture_storage_2d']: s#153
[#427 'texture_storage_2d_array']: s#154
[#427 'texture_storage_3d']: s#155
[#427 'true']: s#114
[#427 'u32']: s#120
[#427 'vec2']: s#98
[#427 'vec3']: s#99
[#427 'vec4']: s#100
[#427 '~']: s#72
[#427 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#427 /0[fh]/]: s#130
[#427 /0[iu]?/]: s#127
[#427 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#427 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#427 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#427 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#427 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#427 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#427 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#427 /[1-9][0-9]*[fh]/]: s#131
[#427 /[1-9][0-9]*[iu]?/]: s#128
[#428 ')']: r#258
[#428 ';']: r#258
[#429 ')']: r#259
[#429 ';']: r#259
[#430 '!']: r#260
[#430 '&']: r#260
[#430 '(']: r#260
[#430 '*']: r#260
[#430 '-']: r#260
[#430 'array']: r#260
[#430 'atomic']: r#260
[#430 'bitcast']: r#260
[#430 'bool']: r#260
[#430 'f16']: r#260
[#430 'f32']: r#260
[#430 'false']: r#260
[#430 'i32']: r#260
[#430 'mat2x2']: r#260
[#430 'mat2x3']: r#260
[#430 'mat2x4']: r#260
[#430 'mat3x2']: r#260
[#430 'mat3x3']: r#260
[#430 'mat3x4']: r#260
[#430 'mat4x2']: r#260
[#430 'mat4x3']: r#260
[#430 'mat4x4']: r#260
[#430 'ptr']: r#260
[#430 'sampler']: r#260
[#430 'sampler_comparison']: r#260
[#430 'texture_1d']: r#260
[#430 'texture_2d']: r#260
[#430 'texture_2d_array']: r#260
[#430 'texture_3d']: r#260
[#430 'texture_cube']: r#260
[#430 'texture_cube_array']: r#260
[#430 'texture_depth_2d']: r#260
[#430 'texture_depth_2d_array']: r#260
[#430 'texture_depth_cube']: r#260
[#430 'texture_depth_cube_array']: r#260
[#430 'texture_depth_multisampled_2d']: r#260
[#430 'texture_multisampled_2d']: r#260
[#430 'texture_storage_1d']: r#260
[#430 'texture_storage_2d']: r#260
[#430 'texture_storage_2d_array']: r#260
[#430 'texture_storage_3d']: r#260
[#430 'true']: r#260
[#430 'u32']: r#260
[#430 'vec2']: r#260
[#430 'vec3']: r#260
[#430 'vec4']: r#260
[#430 '~']: r#260
[#430 /0[xX][0-9a-fA-F]+[iu]?/]: r#260
[#431 '!']: r#261
[#431 '&']: r#261
[#431 '(']: r#261
[#431 '*']: r#261
[#431 '-']: r#261
[#431 'array']: r#261
[#431 'atomic']: r#261
[#431 'bitcast']: r#261
[#431 'bool']: r#261
[#431 'f16']: r#261
[#431 'f32']: r#261
[#431 'false']: r#261
[#431 'i32']: r#261
[#431 'mat2x2']: r#261
[#431 'mat2x3']: r#261
[#431 'mat2x4']: r#261
[#431 'mat3x2']: r#261
[#431 'mat3x3']: r#261
[#431 'mat3x4']: r#261
[#431 'mat4x2']: r#261
[#431 'mat4x3']: r#261
[#431 'mat4x4']: r#261
[#431 'ptr']: r#261
[#431 'sampler']: r#261
[#431 'sampler_comparison']: r#261
[#431 'texture_1d']: r#261
[#431 'texture_2d']: r#261
[#431 'texture_2d_array']: r#261
[#431 'texture_3d']: r#261
[#431 'texture_cube']: r#261
[#431 'texture_cube_array']: r#261
[#431 'texture_depth_2d']: r#261
[#431 'texture_depth_2d_array']: r#261
[#431 'texture_depth_cube']: r#261
[#431 'texture_depth_cube_array']: r#261
[#431 'texture_depth_multisampled_2d']: r#261
[#431 'texture_multisampled_2d']: r#261
[#431 'texture_storage_1d']: r#261
[#431 'texture_storage_2d']: r#261
[#431 'texture_storage_2d_array']: r#261
[#431 'texture_storage_3d']: r#261
[#431 'true']: r#261
[#431 'u32']: r#261
[#431 'vec2']: r#261
[#431 'vec3']: r#261
[#431 'vec4']: r#261
[#431 '~']: r#261
[#431 /0[xX][0-9a-fA-F]+[iu]?/]: r#261
[#432 ')']: r#262
[#432 ';']: r#262
[#433 ')']: r#263
[#433 ';']: r#263
[#434 '!']: r#264
[#434 '&']: r#264
[#434 '(']: r#264
[#434 '*']: r#264
[#434 '-']: r#264
[#434 'array']: r#264
[#434 'atomic']: r#264
[#434 'bitcast']: r#264
[#434 'bool']: r#264
[#434 'f16']: r#264
[#434 'f32']: r#264
[#434 'false']: r#264
[#434 'i32']: r#264
[#434 'mat2x2']: r#264
[#434 'mat2x3']: r#264
[#434 'mat2x4']: r#264
[#434 'mat3x2']: r#264
[#434 'mat3x3']: r#264
[#434 'mat3x4']: r#264
[#434 'mat4x2']: r#264
[#434 'mat4x3']: r#264
[#434 'mat4x4']: r#264
[#434 'ptr']: r#264
[#434 'sampler']: r#264
[#434 'sampler_comparison']: r#264
[#434 'texture_1d']: r#264
[#434 'texture_2d']: r#264
[#434 'texture_2d_array']: r#264
[#434 'texture_3d']: r#264
[#434 'texture_cube']: r#264
[#434 'texture_cube_array']: r#264
[#434 'texture_depth_2d']: r#264
[#434 'texture_depth_2d_array']: r#264
[#434 'texture_depth_cube']: r#264
[#434 'texture_depth_cube_array']: r#264
[#434 'texture_depth_multisampled_2d']: r#264
[#434 'texture_multisampled_2d']: r#264
[#434 'texture_storage_1d']: r#264
[#434 'texture_storage_2d']: r#264
[#434 'texture_storage_2d_array']: r#264
[#434 'texture_storage_3d']: r#264
[#434 'true']: r#264
[#434 'u32']: r#264
[#434 'vec2']: r#264
[#434 'vec3']: r#264
[#434 'vec4']: r#264
[#434 '~']: r#264
[#434 /0[xX][0-9a-fA-F]+[iu]?/]: r#264
[#435 '!']: r#265
[#435 '&']: r#265
[#435 '(']: r#265
[#435 '*']: r#265
[#435 '-']: r#265
[#435 'array']: r#265
[#435 'atomic']: r#265
[#435 'bitcast']: r#265
[#435 'bool']: r#265
[#435 'f16']: r#265
[#435 'f32']: r#265
[#435 'false']: r#265
[#435 'i32']: r#265
[#435 'mat2x2']: r#265
[#435 'mat2x3']: r#265
[#435 'mat2x4']: r#265
[#435 'mat3x2']: r#265
[#435 'mat3x3']: r#265
[#435 'mat3x4']: r#265
[#435 'mat4x2']: r#265
[#435 'mat4x3']: r#265
[#435 'mat4x4']: r#265
[#435 'ptr']: r#265
[#435 'sampler']: r#265
[#435 'sampler_comparison']: r#265
[#435 'texture_1d']: r#265
[#435 'texture_2d']: r#265
[#435 'texture_2d_array']: r#265
[#435 'texture_3d']: r#265
[#435 'texture_cube']: r#265
[#435 'texture_cube_array']: r#265
[#435 'texture_depth_2d']: r#265
[#435 'texture_depth_2d_array']: r#265
[#435 'texture_depth_cube']: r#265
[#435 'texture_depth_cube_array']: r#265
[#435 'texture_depth_multisampled_2d']: r#265
[#435 'texture_multisampled_2d']: r#265
[#435 'texture_storage_1d']: r#265
[#435 'texture_storage_2d']: r#265
[#435 'texture_storage_2d_array']: r#265
[#435 'texture_storage_3d']: r#265
[#435 'true']: r#265
[#435 'u32']: r#265
[#435 'vec2']: r#265
[#435 'vec3']: r#265
[#435 'vec4']: r#265
[#435 '~']: r#265
[#435 /0[xX][0-9a-fA-F]+[iu]?/]: r#265
[#436 '!']: r#266
[#436 '&']: r#266
[#436 '(']: r#266
[#436 '*']: r#266
[#436 '-']: r#266
[#436 'array']: r#266
[#436 'atomic']: r#266
[#436 'bitcast']: r#266
[#436 'bool']: r#266
[#436 'f16']: r#266
[#436 'f32']: r#266
[#436 'false']: r#266
[#436 'i32']: r#266
[#436 'mat2x2']: r#266
[#436 'mat2x3']: r#266
[#436 'mat2x4']: r#266
[#436 'mat3x2']: r#266
[#436 'mat3x3']: r#266
[#436 'mat3x4']: r#266
[#436 'mat4x2']: r#266
[#436 'mat4x3']: r#266
[#436 'mat4x4']: r#266
[#436 'ptr']: r#266
[#436 'sampler']: r#266
[#436 'sampler_comparison']: r#266
[#436 'texture_1d']: r#266
[#436 'texture_2d']: r#266
[#436 'texture_2d_array']: r#266
[#436 'texture_3d']: r#266
[#436 'texture_cube']: r#266
[#436 'texture_cube_array']: r#266
[#436 'texture_depth_2d']: r#266
[#436 'texture_depth_2d_array']: r#266
[#436 'texture_depth_cube']: r#266
[#436 'texture_depth_cube_array']: r#266
[#436 'texture_depth_multisampled_2d']: r#266
[#436 'texture_multisampled_2d']: r#266
[#436 'texture_storage_1d']: r#266
[#436 'texture_storage_2d']: r#266
[#436 'texture_storage_2d_array']: r#266
[#436 'texture_storage_3d']: r#266
[#436 'true']: r#266
[#436 'u32']: r#266
[#436 'vec2']: r#266
[#436 'vec3']: r#266
[#436 'vec4']: r#266
[#436 '~']: r#266
[#436 /0[xX][0-9a-fA-F]+[iu]?/]: r#266
[#437 '!']: r#267
[#437 '&']: r#267
[#437 '(']: r#267
[#437 '*']: r#267
[#437 '-']: r#267
[#437 'array']: r#267
[#437 'atomic']: r#267
[#437 'bitcast']: r#267
[#437 'bool']: r#267
[#437 'f16']: r#267
[#437 'f32']: r#267
[#437 'false']: r#267
[#437 'i32']: r#267
[#437 'mat2x2']: r#267
[#437 'mat2x3']: r#267
[#437 'mat2x4']: r#267
[#437 'mat3x2']: r#267
[#437 'mat3x3']: r#267
[#437 'mat3x4']: r#267
[#437 'mat4x2']: r#267
[#437 'mat4x3']: r#267
[#437 'mat4x4']: r#267
[#437 'ptr']: r#267
[#437 'sampler']: r#267
[#437 'sampler_comparison']: r#267
[#437 'texture_1d']: r#267
[#437 'texture_2d']: r#267
[#437 'texture_2d_array']: r#267
[#437 'texture_3d']: r#267
[#437 'texture_cube']: r#267
[#437 'texture_cube_array']: r#267
[#437 'texture_depth_2d']: r#267
[#437 'texture_depth_2d_array']: r#267
[#437 'texture_depth_cube']: r#267
[#437 'texture_depth_cube_array']: r#267
[#437 'texture_depth_multisampled_2d']: r#267
[#437 'texture_multisampled_2d']: r#267
[#437 'texture_storage_1d']: r#267
[#437 'texture_storage_2d']: r#267
[#437 'texture_storage_2d_array']: r#267
[#437 'texture_storage_3d']: r#267
[#437 'true']: r#267
[#437 'u32']: r#267
[#437 'vec2']: r#267
[#437 'vec3']: r#267
[#437 'vec4']: r#267
[#437 '~']: r#267
[#437 /0[xX][0-9a-fA-F]+[iu]?/]: r#267
[#438 '!']: r#268
[#438 '&']: r#268
[#438 '(']: r#268
[#438 '*']: r#268
[#438 '-']: r#268
[#438 'array']: r#268
[#438 'atomic']: r#268
[#438 'bitcast']: r#268
[#438 'bool']: r#268
[#438 'f16']: r#268
[#438 'f32']: r#268
[#438 'false']: r#268
[#438 'i32']: r#268
[#438 'mat2x2']: r#268
[#438 'mat2x3']: r#268
[#438 'mat2x4']: r#268
[#438 'mat3x2']: r#268
[#438 'mat3x3']: r#268
[#438 'mat3x4']: r#268
[#438 'mat4x2']: r#268
[#438 'mat4x3']: r#268
[#438 'mat4x4']: r#268
[#438 'ptr']: r#268
[#438 'sampler']: r#268
[#438 'sampler_comparison']: r#268
[#438 'texture_1d']: r#268
[#438 'texture_2d']: r#268
[#438 'texture_2d_array']: r#268
[#438 'texture_3d']: r#268
[#438 'texture_cube']: r#268
[#438 'texture_cube_array']: r#268
[#438 'texture_depth_2d']: r#268
[#438 'texture_depth_2d_array']: r#268
[#438 'texture_depth_cube']: r#268
[#438 'texture_depth_cube_array']: r#268
[#438 'texture_depth_multisampled_2d']: r#268
[#438 'texture_multisampled_2d']: r#268
[#438 'texture_storage_1d']: r#268
[#438 'texture_storage_2d']: r#268
[#438 'texture_storage_2d_array']: r#268
[#438 'texture_storage_3d']: r#268
[#438 'true']: r#268
[#438 'u32']: r#268
[#438 'vec2']: r#268
[#438 'vec3']: r#268
[#438 'vec4']: r#268
[#438 '~']: r#268
[#438 /0[xX][0-9a-fA-F]+[iu]?/]: r#268
[#439 '!']: r#269
[#439 '&']: r#269
[#439 '(']: r#269
[#439 '*']: r#269
[#439 '-']: r#269
[#439 'array']: r#269
[#439 'atomic']: r#269
[#439 'bitcast']: r#269
[#439 'bool']: r#269
[#439 'f16']: r#269
[#439 'f32']: r#269
[#439 'false']: r#269
[#439 'i32']: r#269
[#439 'mat2x2']: r#269
[#439 'mat2x3']: r#269
[#439 'mat2x4']: r#269
[#439 'mat3x2']: r#269
[#439 'mat3x3']: r#269
[#439 'mat3x4']: r#269
[#439 'mat4x2']: r#269
[#439 'mat4x3']: r#269
[#439 'mat4x4']: r#269
[#439 'ptr']: r#269
[#439 'sampler']: r#269
[#439 'sampler_comparison']: r#269
[#439 'texture_1d']: r#269
[#439 'texture_2d']: r#269
[#439 'texture_2d_array']: r#269
[#439 'texture_3d']: r#269
[#439 'texture_cube']: r#269
[#439 'texture_cube_array']: r#269
[#439 'texture_depth_2d']: r#269
[#439 'texture_depth_2d_array']: r#269
[#439 'texture_depth_cube']: r#269
[#439 'texture_depth_cube_array']: r#269
[#439 'texture_depth_multisampled_2d']: r#269
[#439 'texture_multisampled_2d']: r#269
[#439 'texture_storage_1d']: r#269
[#439 'texture_storage_2d']: r#269
[#439 'texture_storage_2d_array']: r#269
[#439 'texture_storage_3d']: r#269
[#439 'true']: r#269
[#439 'u32']: r#269
[#439 'vec2']: r#269
[#439 'vec3']: r#269
[#439 'vec4']: r#269
[#439 '~']: r#269
[#439 /0[xX][0-9a-fA-F]+[iu]?/]: r#269
[#440 '!']: r#270
[#440 '&']: r#270
[#440 '(']: r#270
[#440 '*']: r#270
[#440 '-']: r#270
[#440 'array']: r#270
[#440 'atomic']: r#270
[#440 'bitcast']: r#270
[#440 'bool']: r#270
[#440 'f16']: r#270
[#440 'f32']: r#270
[#440 'false']: r#270
[#440 'i32']: r#270
[#440 'mat2x2']: r#270
[#440 'mat2x3']: r#270
[#440 'mat2x4']: r#270
[#440 'mat3x2']: r#270
[#440 'mat3x3']: r#270
[#440 'mat3x4']: r#270
[#440 'mat4x2']: r#270
[#440 'mat4x3']: r#270
[#440 'mat4x4']: r#270
[#440 'ptr']: r#270
[#440 'sampler']: r#270
[#440 'sampler_comparison']: r#270
[#440 'texture_1d']: r#270
[#440 'texture_2d']: r#270
[#440 'texture_2d_array']: r#270
[#440 'texture_3d']: r#270
[#440 'texture_cube']: r#270
[#440 'texture_cube_array']: r#270
[#440 'texture_depth_2d']: r#270
[#440 'texture_depth_2d_array']: r#270
[#440 'texture_depth_cube']: r#270
[#440 'texture_depth_cube_array']: r#270
[#440 'texture_depth_multisampled_2d']: r#270
[#440 'texture_multisampled_2d']: r#270
[#440 'texture_storage_1d']: r#270
[#440 'texture_storage_2d']: r#270
[#440 'texture_storage_2d_array']: r#270
[#440 'texture_storage_3d']: r#270
[#440 'true']: r#270
[#440 'u32']: r#270
[#440 'vec2']: r#270
[#440 'vec3']: r#270
[#440 'vec4']: r#270
[#440 '~']: r#270
[#440 /0[xX][0-9a-fA-F]+[iu]?/]: r#270
[#441 '!']: r#271
[#441 '&']: r#271
[#441 '(']: r#271
[#441 '*']: r#271
[#441 '-']: r#271
[#441 'array']: r#271
[#441 'atomic']: r#271
[#441 'bitcast']: r#271
[#441 'bool']: r#271
[#441 'f16']: r#271
[#441 'f32']: r#271
[#441 'false']: r#271
[#441 'i32']: r#271
[#441 'mat2x2']: r#271
[#441 'mat2x3']: r#271
[#441 'mat2x4']: r#271
[#441 'mat3x2']: r#271
[#441 'mat3x3']: r#271
[#441 'mat3x4']: r#271
[#441 'mat4x2']: r#271
[#441 'mat4x3']: r#271
[#441 'mat4x4']: r#271
[#441 'ptr']: r#271
[#441 'sampler']: r#271
[#441 'sampler_comparison']: r#271
[#441 'texture_1d']: r#271
[#441 'texture_2d']: r#271
[#441 'texture_2d_array']: r#271
[#441 'texture_3d']: r#271
[#441 'texture_cube']: r#271
[#441 'texture_cube_array']: r#271
[#441 'texture_depth_2d']: r#271
[#441 'texture_depth_2d_array']: r#271
[#441 'texture_depth_cube']: r#271
[#441 'texture_depth_cube_array']: r#271
[#441 'texture_depth_multisampled_2d']: r#271
[#441 'texture_multisampled_2d']: r#271
[#441 'texture_storage_1d']: r#271
[#441 'texture_storage_2d']: r#271
[#441 'texture_storage_2d_array']: r#271
[#441 'texture_storage_3d']: r#271
[#441 'true']: r#271
[#441 'u32']: r#271
[#441 'vec2']: r#271
[#441 'vec3']: r#271
[#441 'vec4']: r#271
[#441 '~']: r#271
[#441 /0[xX][0-9a-fA-F]+[iu]?/]: r#271
[#442 '!']: r#272
[#442 '&']: r#272
[#442 '(']: r#272
[#442 '*']: r#272
[#442 '-']: r#272
[#442 'array']: r#272
[#442 'atomic']: r#272
[#442 'bitcast']: r#272
[#442 'bool']: r#272
[#442 'f16']: r#272
[#442 'f32']: r#272
[#442 'false']: r#272
[#442 'i32']: r#272
[#442 'mat2x2']: r#272
[#442 'mat2x3']: r#272
[#442 'mat2x4']: r#272
[#442 'mat3x2']: r#272
[#442 'mat3x3']: r#272
[#442 'mat3x4']: r#272
[#442 'mat4x2']: r#272
[#442 'mat4x3']: r#272
[#442 'mat4x4']: r#272
[#442 'ptr']: r#272
[#442 'sampler']: r#272
[#442 'sampler_comparison']: r#272
[#442 'texture_1d']: r#272
[#442 'texture_2d']: r#272
[#442 'texture_2d_array']: r#272
[#442 'texture_3d']: r#272
[#442 'texture_cube']: r#272
[#442 'texture_cube_array']: r#272
[#442 'texture_depth_2d']: r#272
[#442 'texture_depth_2d_array']: r#272
[#442 'texture_depth_cube']: r#272
[#442 'texture_depth_cube_array']: r#272
[#442 'texture_depth_multisampled_2d']: r#272
[#442 'texture_multisampled_2d']: r#272
[#442 'texture_storage_1d']: r#272
[#442 'texture_storage_2d']: r#272
[#442 'texture_storage_2d_array']: r#272
[#442 'texture_storage_3d']: r#272
[#442 'true']: r#272
[#442 'u32']: r#272
[#442 'vec2']: r#272
[#442 'vec3']: r#272
[#442 'vec4']: r#272
[#442 '~']: r#272
[#442 /0[xX][0-9a-fA-F]+[iu]?/]: r#272
[#443 '!']: r#273
[#443 '&']: r#273
[#443 '(']: r#273
[#443 '*']: r#273
[#443 '-']: r#273
[#443 'array']: r#273
[#443 'atomic']: r#273
[#443 'bitcast']: r#273
[#443 'bool']: r#273
[#443 'f16']: r#273
[#443 'f32']: r#273
[#443 'false']: r#273
[#443 'i32']: r#273
[#443 'mat2x2']: r#273
[#443 'mat2x3']: r#273
[#443 'mat2x4']: r#273
[#443 'mat3x2']: r#273
[#443 'mat3x3']: r#273
[#443 'mat3x4']: r#273
[#443 'mat4x2']: r#273
[#443 'mat4x3']: r#273
[#443 'mat4x4']: r#273
[#443 'ptr']: r#273
[#443 'sampler']: r#273
[#443 'sampler_comparison']: r#273
[#443 'texture_1d']: r#273
[#443 'texture_2d']: r#273
[#443 'texture_2d_array']: r#273
[#443 'texture_3d']: r#273
[#443 'texture_cube']: r#273
[#443 'texture_cube_array']: r#273
[#443 'texture_depth_2d']: r#273
[#443 'texture_depth_2d_array']: r#273
[#443 'texture_depth_cube']: r#273
[#443 'texture_depth_cube_array']: r#273
[#443 'texture_depth_multisampled_2d']: r#273
[#443 'texture_multisampled_2d']: r#273
[#443 'texture_storage_1d']: r#273
[#443 'texture_storage_2d']: r#273
[#443 'texture_storage_2d_array']: r#273
[#443 'texture_storage_3d']: r#273
[#443 'true']: r#273
[#443 'u32']: r#273
[#443 'vec2']: r#273
[#443 'vec3']: r#273
[#443 'vec4']: r#273
[#443 '~']: r#273
[#443 /0[xX][0-9a-fA-F]+[iu]?/]: r#273
[#444 '!']: r#274
[#444 '&']: r#274
[#444 '(']: r#274
[#444 '*']: r#274
[#444 '-']: r#274
[#444 'array']: r#274
[#444 'atomic']: r#274
[#444 'bitcast']: r#274
[#444 'bool']: r#274
[#444 'f16']: r#274
[#444 'f32']: r#274
[#444 'false']: r#274
[#444 'i32']: r#274
[#444 'mat2x2']: r#274
[#444 'mat2x3']: r#274
[#444 'mat2x4']: r#274
[#444 'mat3x2']: r#274
[#444 'mat3x3']: r#274
[#444 'mat3x4']: r#274
[#444 'mat4x2']: r#274
[#444 'mat4x3']: r#274
[#444 'mat4x4']: r#274
[#444 'ptr']: r#274
[#444 'sampler']: r#274
[#444 'sampler_comparison']: r#274
[#444 'texture_1d']: r#274
[#444 'texture_2d']: r#274
[#444 'texture_2d_array']: r#274
[#444 'texture_3d']: r#274
[#444 'texture_cube']: r#274
[#444 'texture_cube_array']: r#274
[#444 'texture_depth_2d']: r#274
[#444 'texture_depth_2d_array']: r#274
[#444 'texture_depth_cube']: r#274
[#444 'texture_depth_cube_array']: r#274
[#444 'texture_depth_multisampled_2d']: r#274
[#444 'texture_multisampled_2d']: r#274
[#444 'texture_storage_1d']: r#274
[#444 'texture_storage_2d']: r#274
[#444 'texture_storage_2d_array']: r#274
[#444 'texture_storage_3d']: r#274
[#444 'true']: r#274
[#444 'u32']: r#274
[#444 'vec2']: r#274
[#444 'vec3']: r#274
[#444 'vec4']: r#274
[#444 '~']: r#274
[#444 /0[xX][0-9a-fA-F]+[iu]?/]: r#274
[#445 '!']: r#275
[#445 '&']: r#275
[#445 '(']: r#275
[#445 '*']: r#275
[#445 '-']: r#275
[#445 'array']: r#275
[#445 'atomic']: r#275
[#445 'bitcast']: r#275
[#445 'bool']: r#275
[#445 'f16']: r#275
[#445 'f32']: r#275
[#445 'false']: r#275
[#445 'i32']: r#275
[#445 'mat2x2']: r#275
[#445 'mat2x3']: r#275
[#445 'mat2x4']: r#275
[#445 'mat3x2']: r#275
[#445 'mat3x3']: r#275
[#445 'mat3x4']: r#275
[#445 'mat4x2']: r#275
[#445 'mat4x3']: r#275
[#445 'mat4x4']: r#275
[#445 'ptr']: r#275
[#445 'sampler']: r#275
[#445 'sampler_comparison']: r#275
[#445 'texture_1d']: r#275
[#445 'texture_2d']: r#275
[#445 'texture_2d_array']: r#275
[#445 'texture_3d']: r#275
[#445 'texture_cube']: r#275
[#445 'texture_cube_array']: r#275
[#445 'texture_depth_2d']: r#275
[#445 'texture_depth_2d_array']: r#275
[#445 'texture_depth_cube']: r#275
[#445 'texture_depth_cube_array']: r#275
[#445 'texture_depth_multisampled_2d']: r#275
[#445 'texture_multisampled_2d']: r#275
[#445 'texture_storage_1d']: r#275
[#445 'texture_storage_2d']: r#275
[#445 'texture_storage_2d_array']: r#275
[#445 'texture_storage_3d']: r#275
[#445 'true']: r#275
[#445 'u32']: r#275
[#445 'vec2']: r#275
[#445 'vec3']: r#275
[#445 'vec4']: r#275
[#445 '~']: r#275
[#445 /0[xX][0-9a-fA-F]+[iu]?/]: r#275
[#446 '!']: r#276
[#446 '&']: r#276
[#446 '(']: r#276
[#446 '*']: r#276
[#446 '-']: r#276
[#446 'array']: r#276
[#446 'atomic']: r#276
[#446 'bitcast']: r#276
[#446 'bool']: r#276
[#446 'f16']: r#276
[#446 'f32']: r#276
[#446 'false']: r#276
[#446 'i32']: r#276
[#446 'mat2x2']: r#276
[#446 'mat2x3']: r#276
[#446 'mat2x4']: r#276
[#446 'mat3x2']: r#276
[#446 'mat3x3']: r#276
[#446 'mat3x4']: r#276
[#446 'mat4x2']: r#276
[#446 'mat4x3']: r#276
[#446 'mat4x4']: r#276
[#446 'ptr']: r#276
[#446 'sampler']: r#276
[#446 'sampler_comparison']: r#276
[#446 'texture_1d']: r#276
[#446 'texture_2d']: r#276
[#446 'texture_2d_array']: r#276
[#446 'texture_3d']: r#276
[#446 'texture_cube']: r#276
[#446 'texture_cube_array']: r#276
[#446 'texture_depth_2d']: r#276
[#446 'texture_depth_2d_array']: r#276
[#446 'texture_depth_cube']: r#276
[#446 'texture_depth_cube_array']: r#276
[#446 'texture_depth_multisampled_2d']: r#276
[#446 'texture_multisampled_2d']: r#276
[#446 'texture_storage_1d']: r#276
[#446 'texture_storage_2d']: r#276
[#446 'texture_storage_2d_array']: r#276
[#446 'texture_storage_3d']: r#276
[#446 'true']: r#276
[#446 'u32']: r#276
[#446 'vec2']: r#276
[#446 'vec3']: r#276
[#446 'vec4']: r#276
[#446 '~']: r#276
[#446 /0[xX][0-9a-fA-F]+[iu]?/]: r#276
[#447 '!']: r#277
[#447 '&']: r#277
[#447 '(']: r#277
[#447 '*']: r#277
[#447 '-']: r#277
[#447 'array']: r#277
[#447 'atomic']: r#277
[#447 'bitcast']: r#277
[#447 'bool']: r#277
[#447 'f16']: r#277
[#447 'f32']: r#277
[#447 'false']: r#277
[#447 'i32']: r#277
[#447 'mat2x2']: r#277
[#447 'mat2x3']: r#277
[#447 'mat2x4']: r#277
[#447 'mat3x2']: r#277
[#447 'mat3x3']: r#277
[#447 'mat3x4']: r#277
[#447 'mat4x2']: r#277
[#447 'mat4x3']: r#277
[#447 'mat4x4']: r#277
[#447 'ptr']: r#277
[#447 'sampler']: r#277
[#447 'sampler_comparison']: r#277
[#447 'texture_1d']: r#277
[#447 'texture_2d']: r#277
[#447 'texture_2d_array']: r#277
[#447 'texture_3d']: r#277
[#447 'texture_cube']: r#277
[#447 'texture_cube_array']: r#277
[#447 'texture_depth_2d']: r#277
[#447 'texture_depth_2d_array']: r#277
[#447 'texture_depth_cube']: r#277
[#447 'texture_depth_cube_array']: r#277
[#447 'texture_depth_multisampled_2d']: r#277
[#447 'texture_multisampled_2d']: r#277
[#447 'texture_storage_1d']: r#277
[#447 'texture_storage_2d']: r#277
[#447 'texture_storage_2d_array']: r#277
[#447 'texture_storage_3d']: r#277
[#447 'true']: r#277
[#447 'u32']: r#277
[#447 'vec2']: r#277
[#447 'vec3']: r#277
[#447 'vec4']: r#277
[#447 '~']: r#277
[#447 /0[xX][0-9a-fA-F]+[iu]?/]: r#277
[#448 '!']: r#278
[#448 '&']: r#278
[#448 '(']: r#278
[#448 '*']: r#278
[#448 '-']: r#278
[#448 'array']: r#278
[#448 'atomic']: r#278
[#448 'bitcast']: r#278
[#448 'bool']: r#278
[#448 'f16']: r#278
[#448 'f32']: r#278
[#448 'false']: r#278
[#448 'i32']: r#278
[#448 'mat2x2']: r#278
[#448 'mat2x3']: r#278
[#448 'mat2x4']: r#278
[#448 'mat3x2']: r#278
[#448 'mat3x3']: r#278
[#448 'mat3x4']: r#278
[#448 'mat4x2']: r#278
[#448 'mat4x3']: r#278
[#448 'mat4x4']: r#278
[#448 'ptr']: r#278
[#448 'sampler']: r#278
[#448 'sampler_comparison']: r#278
[#448 'texture_1d']: r#278
[#448 'texture_2d']: r#278
[#448 'texture_2d_array']: r#278
[#448 'texture_3d']: r#278
[#448 'texture_cube']: r#278
[#448 'texture_cube_array']: r#278
[#448 'texture_depth_2d']: r#278
[#448 'texture_depth_2d_array']: r#278
[#448 'texture_depth_cube']: r#278
[#448 'texture_depth_cube_array']: r#278
[#448 'texture_depth_multisampled_2d']: r#278
[#448 'texture_multisampled_2d']: r#278
[#448 'texture_storage_1d']: r#278
[#448 'texture_storage_2d']: r#278
[#448 'texture_storage_2d_array']: r#278
[#448 'texture_storage_3d']: r#278
[#448 'true']: r#278
[#448 'u32']: r#278
[#448 'vec2']: r#278
[#448 'vec3']: r#278
[#448 'vec4']: r#278
[#448 '~']: r#278
[#448 /0[xX][0-9a-fA-F]+[iu]?/]: r#278
[#449 '!']: r#279
[#449 '&']: r#279
[#449 '(']: r#279
[#449 '*']: r#279
[#449 '-']: r#279
[#449 'array']: r#279
[#449 'atomic']: r#279
[#449 'bitcast']: r#279
[#449 'bool']: r#279
[#449 'f16']: r#279
[#449 'f32']: r#279
[#449 'false']: r#279
[#449 'i32']: r#279
[#449 'mat2x2']: r#279
[#449 'mat2x3']: r#279
[#449 'mat2x4']: r#279
[#449 'mat3x2']: r#279
[#449 'mat3x3']: r#279
[#449 'mat3x4']: r#279
[#449 'mat4x2']: r#279
[#449 'mat4x3']: r#279
[#449 'mat4x4']: r#279
[#449 'ptr']: r#279
[#449 'sampler']: r#279
[#449 'sampler_comparison']: r#279
[#449 'texture_1d']: r#279
[#449 'texture_2d']: r#279
[#449 'texture_2d_array']: r#279
[#449 'texture_3d']: r#279
[#449 'texture_cube']: r#279
[#449 'texture_cube_array']: r#279
[#449 'texture_depth_2d']: r#279
[#449 'texture_depth_2d_array']: r#279
[#449 'texture_depth_cube']: r#279
[#449 'texture_depth_cube_array']: r#279
[#449 'texture_depth_multisampled_2d']: r#279
[#449 'texture_multisampled_2d']: r#279
[#449 'texture_storage_1d']: r#279
[#449 'texture_storage_2d']: r#279
[#449 'texture_storage_2d_array']: r#279
[#449 'texture_storage_3d']: r#279
[#449 'true']: r#279
[#449 'u32']: r#279
[#449 'vec2']: r#279
[#449 'vec3']: r#279
[#449 'vec4']: r#279
[#449 '~']: r#279
[#449 /0[xX][0-9a-fA-F]+[iu]?/]: r#279
[#450 '!']: r#280
[#450 '&']: r#280
[#450 '(']: r#280
[#450 '*']: r#280
[#450 '-']: r#280
[#450 'array']: r#280
[#450 'atomic']: r#280
[#450 'bitcast']: r#280
[#450 'bool']: r#280
[#450 'f16']: r#280
[#450 'f32']: r#280
[#450 'false']: r#280
[#450 'i32']: r#280
[#450 'mat2x2']: r#280
[#450 'mat2x3']: r#280
[#450 'mat2x4']: r#280
[#450 'mat3x2']: r#280
[#450 'mat3x3']: r#280
[#450 'mat3x4']: r#280
[#450 'mat4x2']: r#280
[#450 'mat4x3']: r#280
[#450 'mat4x4']: r#280
[#450 'ptr']: r#280
[#450 'sampler']: r#280
[#450 'sampler_comparison']: r#280
[#450 'texture_1d']: r#280
[#450 'texture_2d']: r#280
[#450 'texture_2d_array']: r#280
[#450 'texture_3d']: r#280
[#450 'texture_cube']: r#280
[#450 'texture_cube_array']: r#280
[#450 'texture_depth_2d']: r#280
[#450 'texture_depth_2d_array']: r#280
[#450 'texture_depth_cube']: r#280
[#450 'texture_depth_cube_array']: r#280
[#450 'texture_depth_multisampled_2d']: r#280
[#450 'texture_multisampled_2d']: r#280
[#450 'texture_storage_1d']: r#280
[#450 'texture_storage_2d']: r#280
[#450 'texture_storage_2d_array']: r#280
[#450 'texture_storage_3d']: r#280
[#450 'true']: r#280
[#450 'u32']: r#280
[#450 'vec2']: r#280
[#450 'vec3']: r#280
[#450 'vec4']: r#280
[#450 '~']: r#280
[#450 /0[xX][0-9a-fA-F]+[iu]?/]: r#280
[#451 '!']: r#281
[#451 '&']: r#281
[#451 '(']: r#281
[#451 '*']: r#281
[#451 '-']: r#281
[#451 'array']: r#281
[#451 'atomic']: r#281
[#451 'bitcast']: r#281
[#451 'bool']: r#281
[#451 'f16']: r#281
[#451 'f32']: r#281
[#451 'false']: r#281
[#451 'i32']: r#281
[#451 'mat2x2']: r#281
[#451 'mat2x3']: r#281
[#451 'mat2x4']: r#281
[#451 'mat3x2']: r#281
[#451 'mat3x3']: r#281
[#451 'mat3x4']: r#281
[#451 'mat4x2']: r#281
[#451 'mat4x3']: r#281
[#451 'mat4x4']: r#281
[#451 'ptr']: r#281
[#451 'sampler']: r#281
[#451 'sampler_comparison']: r#281
[#451 'texture_1d']: r#281
[#451 'texture_2d']: r#281
[#451 'texture_2d_array']: r#281
[#451 'texture_3d']: r#281
[#451 'texture_cube']: r#281
[#451 'texture_cube_array']: r#281
[#451 'texture_depth_2d']: r#281
[#451 'texture_depth_2d_array']: r#281
[#451 'texture_depth_cube']: r#281
[#451 'texture_depth_cube_array']: r#281
[#451 'texture_depth_multisampled_2d']: r#281
[#451 'texture_multisampled_2d']: r#281
[#451 'texture_storage_1d']: r#281
[#451 'texture_storage_2d']: r#281
[#451 'texture_storage_2d_array']: r#281
[#451 'texture_storage_3d']: r#281
[#451 'true']: r#281
[#451 'u32']: r#281
[#451 'vec2']: r#281
[#451 'vec3']: r#281
[#451 'vec4']: r#281
[#451 '~']: r#281
[#451 /0[xX][0-9a-fA-F]+[iu]?/]: r#281
[#452 '!']: r#282
[#452 '&']: r#282
[#452 '(']: r#282
[#452 '*']: r#282
[#452 '-']: r#282
[#452 'array']: r#282
[#452 'atomic']: r#282
[#452 'bitcast']: r#282
[#452 'bool']: r#282
[#452 'f16']: r#282
[#452 'f32']: r#282
[#452 'false']: r#282
[#452 'i32']: r#282
[#452 'mat2x2']: r#282
[#452 'mat2x3']: r#282
[#452 'mat2x4']: r#282
[#452 'mat3x2']: r#282
[#452 'mat3x3']: r#282
[#452 'mat3x4']: r#282
[#452 'mat4x2']: r#282
[#452 'mat4x3']: r#282
[#452 'mat4x4']: r#282
[#452 'ptr']: r#282
[#452 'sampler']: r#282
[#452 'sampler_comparison']: r#282
[#452 'texture_1d']: r#282
[#452 'texture_2d']: r#282
[#452 'texture_2d_array']: r#282
[#452 'texture_3d']: r#282
[#452 'texture_cube']: r#282
[#452 'texture_cube_array']: r#282
[#452 'texture_depth_2d']: r#282
[#452 'texture_depth_2d_array']: r#282
[#452 'texture_depth_cube']: r#282
[#452 'texture_depth_cube_array']: r#282
[#452 'texture_depth_multisampled_2d']: r#282
[#452 'texture_multisampled_2d']: r#282
[#452 'texture_storage_1d']: r#282
[#452 'texture_storage_2d']: r#282
[#452 'texture_storage_2d_array']: r#282
[#452 'texture_storage_3d']: r#282
[#452 'true']: r#282
[#452 'u32']: r#282
[#452 'vec2']: r#282
[#452 'vec3']: r#282
[#452 'vec4']: r#282
[#452 '~']: r#282
[#452 /0[xX][0-9a-fA-F]+[iu]?/]: r#282
[#453 '!']: r#283
[#453 '&']: r#283
[#453 '(']: r#283
[#453 '*']: r#283
[#453 '-']: r#283
[#453 'array']: r#283
[#453 'atomic']: r#283
[#453 'bitcast']: r#283
[#453 'bool']: r#283
[#453 'f16']: r#283
[#453 'f32']: r#283
[#453 'false']: r#283
[#453 'i32']: r#283
[#453 'mat2x2']: r#283
[#453 'mat2x3']: r#283
[#453 'mat2x4']: r#283
[#453 'mat3x2']: r#283
[#453 'mat3x3']: r#283
[#453 'mat3x4']: r#283
[#453 'mat4x2']: r#283
[#453 'mat4x3']: r#283
[#453 'mat4x4']: r#283
[#453 'ptr']: r#283
[#453 'sampler']: r#283
[#453 'sampler_comparison']: r#283
[#453 'texture_1d']: r#283
[#453 'texture_2d']: r#283
[#453 'texture_2d_array']: r#283
[#453 'texture_3d']: r#283
[#453 'texture_cube']: r#283
[#453 'texture_cube_array']: r#283
[#453 'texture_depth_2d']: r#283
[#453 'texture_depth_2d_array']: r#283
[#453 'texture_depth_cube']: r#283
[#453 'texture_depth_cube_array']: r#283
[#453 'texture_depth_multisampled_2d']: r#283
[#453 'texture_multisampled_2d']: r#283
[#453 'texture_storage_1d']: r#283
[#453 'texture_storage_2d']: r#283
[#453 'texture_storage_2d_array']: r#283
[#453 'texture_storage_3d']: r#283
[#453 'true']: r#283
[#453 'u32']: r#283
[#453 'vec2']: r#283
[#453 'vec3']: r#283
[#453 'vec4']: r#283
[#453 '~']: r#283
[#453 /0[xX][0-9a-fA-F]+[iu]?/]: r#283
[#454 '{']: s#186
[#455 '=']: s#177
[#456 '=']: s#177
[#457 '!']: s#71
[#457 '&']: s#74
[#457 '(']: s#116
[#457 '*']: s#73
[#457 '-']: s#70
[#457 'array']: s#84
[#457 'atomic']: s#96
[#457 'bitcast']: s#79
[#457 'bool']: s#89
[#457 'f16']: s#118
[#457 'f32']: s#117
[#457 'false']: s#115
[#457 'i32']: s#119
[#457 'mat2x2']: s#101
[#457 'mat2x3']: s#102
[#457 'mat2x4']: s#103
[#457 'mat3x2']: s#104
[#457 'mat3x3']: s#105
[#457 'mat3x4']: s#106
[#457 'mat4x2']: s#107
[#457 'mat4x3']: s#108
[#457 'mat4x4']: s#109
[#457 'ptr']: s#121
[#457 'sampler']: s#138
[#457 'sampler_comparison']: s#139
[#457 'texture_1d']: s#145
[#457 'texture_2d']: s#146
[#457 'texture_2d_array']: s#147
[#457 'texture_3d']: s#148
[#457 'texture_cube']: s#149
[#457 'texture_cube_array']: s#150
[#457 'texture_depth_2d']: s#140
[#457 'texture_depth_2d_array']: s#141
[#457 'texture_depth_cube']: s#142
[#457 'texture_depth_cube_array']: s#143
[#457 'texture_depth_multisampled_2d']: s#144
[#457 'texture_multisampled_2d']: s#151
[#457 'texture_storage_1d']: s#152
[#457 'texture_storage_2d']: s#153
[#457 'texture_storage_2d_array']: s#154
[#457 'texture_storage_3d']: s#155
[#457 'true']: s#114
[#457 'u32']: s#120
[#457 'vec2']: s#98
[#457 'vec3']: s#99
[#457 'vec4']: s#100
[#457 '~']: s#72
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#457 /0[fh]/]: s#130
[#457 /0[iu]?/]: s#127
[#457 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#457 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#457 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#457 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#457 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#457 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#457 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#457 /[1-9][0-9]*[fh]/]: s#131
[#457 /[1-9][0-9]*[iu]?/]: s#128
[#458 ')']: r#284
[#458 ';']: r#284
[#459 '{']: s#186
[#460 '&']: s#74
[#460 '(']: s#116
[#460 '*']: s#73
[#460 '_']: s#389
[#460 'const']: s#377
[#460 'let']: s#376
[#460 'var']: s#164
[#460 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#461 '&']: s#74
[#461 '(']: s#116
[#461 '*']: s#73
[#461 ';']: s#20
[#461 '_']: s#389
[#461 'break']: s#378
[#461 'const']: s#377
[#461 'continue']: s#379
[#461 'discard']: s#364
[#461 'for']: s#372
[#461 'if']: s#383
[#461 'let']: s#376
[#461 'loop']: s#371
[#461 'return']: s#368
[#461 'static_assert']: s#27
[#461 'switch']: s#370
[#461 'var']: s#164
[#461 'while']: s#373
[#461 '{']: s#186
[#461 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#462 '{']: s#186
[#463 'else']: s#541
[#464 '&']: r#285
[#464 '(']: r#285
[#464 '*']: r#285
[#464 ';']: r#285
[#464 '_']: r#285
[#464 'break']: r#285
[#464 'const']: r#285
[#464 'continue']: r#285
[#464 'continuing']: r#285
[#464 'discard']: r#285
[#464 'else']: r#285
[#464 'for']: r#285
[#464 'if']: r#285
[#464 'let']: r#285
[#464 'loop']: r#285
[#464 'return']: r#285
[#464 'static_assert']: r#285
[#464 'switch']: r#285
[#464 'var']: r#285
[#464 'while']: r#285
[#464 '{']: r#285
[#464 '}']: r#285
[#464 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#285
[#465 'else']: s#466
[#466 'if']: s#537
[#467 ';']: r#286
[#468 ';']: r#287
[#469 '&']: r#288
[#469 '(']: r#288
[#469 '*']: r#288
[#469 ';']: r#288
[#469 '_']: r#288
[#469 'break']: r#288
[#469 'const']: r#288
[#469 'continue']: r#288
[#469 'continuing']: r#288
[#469 'discard']: r#288
[#469 'for']: r#288
[#469 'if']: r#288
[#469 'let']: r#288
[#469 'loop']: r#288
[#469 'return']: r#288
[#469 'static_assert']: r#288
[#469 'switch']: r#288
[#469 'var']: r#288
[#469 'while']: r#288
[#469 '{']: r#288
[#469 '}']: r#288
[#469 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#288
[#470 '&']: r#289
[#470 '(']: r#289
[#470 '*']: r#289
[#470 ';']: r#289
[#470 '_']: r#289
[#470 'break']: r#289
[#470 'const']: r#289
[#470 'continue']: r#289
[#470 'continuing']: r#289
[#470 'discard']: r#289
[#470 'for']: r#289
[#470 'if']: r#289
[#470 'let']: r#289
[#470 'loop']: r#289
[#470 'return']: r#289
[#470 'static_assert']: r#289
[#470 'switch']: r#289
[#470 'var']: r#289
[#470 'while']: r#289
[#470 '{']: r#289
[#470 '}']: r#289
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#471 '&']: r#290
[#471 '(']: r#290
[#471 '*']: r#290
[#471 ';']: r#290
[#471 '_']: r#290
[#471 'break']: r#290
[#471 'const']: r#290
[#471 'continue']: r#290
[#471 'continuing']: r#290
[#471 'discard']: r#290
[#471 'for']: r#290
[#471 'if']: r#290
[#471 'let']: r#290
[#471 'loop']: r#290
[#471 'return']: r#290
[#471 'static_assert']: r#290
[#471 'switch']: r#290
[#471 'var']: r#290
[#471 'while']: r#290
[#471 '{']: r#290
[#471 '}']: r#290
[#471 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#290
[#472 '&']: r#291
[#472 '(']: r#291
[#472 '*']: r#291
[#472 ';']: r#291
[#472 '_']: r#291
[#472 'break']: r#291
[#472 'const']: r#291
[#472 'continue']: r#291
[#472 'continuing']: r#291
[#472 'discard']: r#291
[#472 'for']: r#291
[#472 'if']: r#291
[#472 'let']: r#291
[#472 'loop']: r#291
[#472 'return']: r#291
[#472 'static_assert']: r#291
[#472 'switch']: r#291
[#472 'var']: r#291
[#472 'while']: r#291
[#472 '{']: r#291
[#472 '}']: r#291
[#472 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#473 '&']: r#292
[#473 '(']: r#292
[#473 '*']: r#292
[#473 ';']: r#292
[#473 '_']: r#292
[#473 'break']: r#292
[#473 'const']: r#292
[#473 'continue']: r#292
[#473 'continuing']: r#292
[#473 'discard']: r#292
[#473 'for']: r#292
[#473 'if']: r#292
[#473 'let']: r#292
[#473 'loop']: r#292
[#473 'return']: r#292
[#473 'static_assert']: r#292
[#473 'switch']: r#292
[#473 'var']: r#292
[#473 'while']: r#292
[#473 '{']: r#292
[#473 '}']: r#292
[#473 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#474 '&']: r#293
[#474 '(']: r#293
[#474 '*']: r#293
[#474 ';']: r#293
[#474 '_']: r#293
[#474 'break']: r#293
[#474 'const']: r#293
[#474 'continue']: r#293
[#474 'continuing']: r#293
[#474 'discard']: r#293
[#474 'for']: r#293
[#474 'if']: r#293
[#474 'let']: r#293
[#474 'loop']: r#293
[#474 'return']: r#293
[#474 'static_assert']: r#293
[#474 'switch']: r#293
[#474 'var']: r#293
[#474 'while']: r#293
[#474 '{']: r#293
[#474 '}']: r#293
[#474 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#293
[#475 '&']: r#294
[#475 '(']: r#294
[#475 '*']: r#294
[#475 ';']: r#294
[#475 '_']: r#294
[#475 'break']: r#294
[#475 'const']: r#294
[#475 'continue']: r#294
[#475 'continuing']: r#294
[#475 'discard']: r#294
[#475 'for']: r#294
[#475 'if']: r#294
[#475 'let']: r#294
[#475 'loop']: r#294
[#475 'return']: r#294
[#475 'static_assert']: r#294
[#475 'switch']: r#294
[#475 'var']: r#294
[#475 'while']: r#294
[#475 '{']: r#294
[#475 '}']: r#294
[#475 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#476 '&']: r#295
[#476 '(']: r#295
[#476 '*']: r#295
[#476 ';']: r#295
[#476 '_']: r#295
[#476 'break']: r#295
[#476 'const']: r#295
[#476 'continue']: r#295
[#476 'continuing']: r#295
[#476 'discard']: r#295
[#476 'for']: r#295
[#476 'if']: r#295
[#476 'let']: r#295
[#476 'loop']: r#295
[#476 'return']: r#295
[#476 'static_assert']: r#295
[#476 'switch']: r#295
[#476 'var']: r#295
[#476 'while']: r#295
[#476 '{']: r#295
[#476 '}']: r#295
[#476 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#477 '}']: r#296
[#478 '&']: r#297
[#478 '(']: r#297
[#478 '*']: r#297
[#478 ';']: r#297
[#478 '@']: r#297
[#478 '_']: r#297
[#478 'break']: r#297
[#478 'case']: r#297
[#478 'const']: r#297
[#478 'continue']: r#297
[#478 'continuing']: r#297
[#478 'default']: r#297
[#478 'discard']: r#297
[#478 'else']: r#297
[#478 'fn']: r#297
[#478 'for']: r#297
[#478 'if']: r#297
[#478 'let']: r#297
[#478 'loop']: r#297
[#478 'override']: r#297
[#478 'return']: r#297
[#478 'static_assert']: r#297
[#478 'struct']: r#297
[#478 'switch']: r#297
[#478 'type']: r#297
[#478 'var']: r#297
[#478 'while']: r#297
[#478 '{']: r#297
[#478 '}']: r#297
[#478 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#297
[#478 EndOfText]: r#297
[#479 '&']: r#298
[#479 '(']: r#298
[#479 '*']: r#298
[#479 ';']: r#298
[#479 '@']: r#298
[#479 '_']: r#298
[#479 'break']: r#298
[#479 'case']: r#298
[#479 'const']: r#298
[#479 'continue']: r#298
[#479 'continuing']: r#298
[#479 'default']: r#298
[#479 'discard']: r#298
[#479 'else']: r#298
[#479 'fn']: r#298
[#479 'for']: r#298
[#479 'if']: r#298
[#479 'let']: r#298
[#479 'loop']: r#298
[#479 'override']: r#298
[#479 'return']: r#298
[#479 'static_assert']: r#298
[#479 'struct']: r#298
[#479 'switch']: r#298
[#479 'type']: r#298
[#479 'var']: r#298
[#479 'while']: r#298
[#479 '{']: r#298
[#479 '}']: r#298
[#479 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#298
[#479 EndOfText]: r#298
[#480 'read']: s#534
[#480 'read_write']: s#536
[#480 'write']: s#535
[#481 '(']: r#299
[#481 ')']: r#299
[#481 ',']: r#299
[#481 ';']: r#299
[#481 '=']: r#299
[#481 '>']: r#299
[#481 '{']: r#299
[#481 '}']: r#299
[#482 '(']: r#300
[#482 ')']: r#300
[#482 ',']: r#300
[#482 ';']: r#300
[#482 '=']: r#300
[#482 '>']: r#300
[#482 '{']: r#300
[#482 '}']: r#300
[#483 '(']: r#301
[#483 ')']: r#301
[#483 ',']: r#301
[#483 ';']: r#301
[#483 '=']: r#301
[#483 '>']: r#301
[#483 '{']: r#301
[#483 '}']: r#301
[#484 'array']: s#317
[#484 'atomic']: s#96
[#484 'bool']: s#89
[#484 'f16']: s#118
[#484 'f32']: s#117
[#484 'i32']: s#119
[#484 'mat2x2']: s#101
[#484 'mat2x3']: s#102
[#484 'mat2x4']: s#103
[#484 'mat3x2']: s#104
[#484 'mat3x3']: s#105
[#484 'mat3x4']: s#106
[#484 'mat4x2']: s#107
[#484 'mat4x3']: s#108
[#484 'mat4x4']: s#109
[#484 'ptr']: s#121
[#484 'sampler']: s#138
[#484 'sampler_comparison']: s#139
[#484 'texture_1d']: s#145
[#484 'texture_2d']: s#146
[#484 'texture_2d_array']: s#147
[#484 'texture_3d']: s#148
[#484 'texture_cube']: s#149
[#484 'texture_cube_array']: s#150
[#484 'texture_depth_2d']: s#140
[#484 'texture_depth_2d_array']: s#141
[#484 'texture_depth_cube']: s#142
[#484 'texture_depth_cube_array']: s#143
[#484 'texture_depth_multisampled_2d']: s#144
[#484 'texture_multisampled_2d']: s#151
[#484 'texture_storage_1d']: s#152
[#484 'texture_storage_2d']: s#153
[#484 'texture_storage_2d_array']: s#154
[#484 'texture_storage_3d']: s#155
[#484 'u32']: s#120
[#484 'vec2']: s#98
[#484 'vec3']: s#99
[#484 'vec4']: s#100
[#484 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#485 '>']: s#238
[#486 '!']: s#71
[#486 '&']: s#74
[#486 '(']: s#116
[#486 '*']: s#73
[#486 '-']: s#70
[#486 'array']: s#84
[#486 'atomic']: s#96
[#486 'bitcast']: s#79
[#486 'bool']: s#89
[#486 'f16']: s#118
[#486 'f32']: s#117
[#486 'false']: s#115
[#486 'i32']: s#119
[#486 'mat2x2']: s#101
[#486 'mat2x3']: s#102
[#486 'mat2x4']: s#103
[#486 'mat3x2']: s#104
[#486 'mat3x3']: s#105
[#486 'mat3x4']: s#106
[#486 'mat4x2']: s#107
[#486 'mat4x3']: s#108
[#486 'mat4x4']: s#109
[#486 'ptr']: s#121
[#486 'sampler']: s#138
[#486 'sampler_comparison']: s#139
[#486 'texture_1d']: s#145
[#486 'texture_2d']: s#146
[#486 'texture_2d_array']: s#147
[#486 'texture_3d']: s#148
[#486 'texture_cube']: s#149
[#486 'texture_cube_array']: s#150
[#486 'texture_depth_2d']: s#140
[#486 'texture_depth_2d_array']: s#141
[#486 'texture_depth_cube']: s#142
[#486 'texture_depth_cube_array']: s#143
[#486 'texture_depth_multisampled_2d']: s#144
[#486 'texture_multisampled_2d']: s#151
[#486 'texture_storage_1d']: s#152
[#486 'texture_storage_2d']: s#153
[#486 'texture_storage_2d_array']: s#154
[#486 'texture_storage_3d']: s#155
[#486 'true']: s#114
[#486 'u32']: s#120
[#486 'vec2']: s#98
[#486 'vec3']: s#99
[#486 'vec4']: s#100
[#486 '~']: s#72
[#486 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#486 /0[fh]/]: s#130
[#486 /0[iu]?/]: s#127
[#486 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#486 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#486 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#486 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#486 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#486 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#486 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#486 /[1-9][0-9]*[fh]/]: s#131
[#486 /[1-9][0-9]*[iu]?/]: s#128
[#487 '(']: r#302
[#487 ')']: r#302
[#487 ',']: r#302
[#487 ';']: r#302
[#487 '=']: r#302
[#487 '>']: r#302
[#487 '{']: r#302
[#487 '}']: r#302
[#488 '(']: r#303
[#488 ')']: r#303
[#488 ',']: r#303
[#488 ';']: r#303
[#488 '=']: r#303
[#488 '>']: r#303
[#488 '{']: r#303
[#488 '}']: r#303
[#489 '(']: s#116
[#490 ',']: s#406
[#491 ')']: r#304
[#491 ',']: r#304
[#492 ',']: s#406
[#493 '!']: s#71
[#493 '&']: s#74
[#493 '(']: s#116
[#493 '*']: s#73
[#493 '-']: s#70
[#493 'array']: s#84
[#493 'atomic']: s#96
[#493 'bitcast']: s#79
[#493 'bool']: s#89
[#493 'f16']: s#118
[#493 'f32']: s#117
[#493 'false']: s#115
[#493 'i32']: s#119
[#493 'mat2x2']: s#101
[#493 'mat2x3']: s#102
[#493 'mat2x4']: s#103
[#493 'mat3x2']: s#104
[#493 'mat3x3']: s#105
[#493 'mat3x4']: s#106
[#493 'mat4x2']: s#107
[#493 'mat4x3']: s#108
[#493 'mat4x4']: s#109
[#493 'ptr']: s#121
[#493 'sampler']: s#138
[#493 'sampler_comparison']: s#139
[#493 'texture_1d']: s#145
[#493 'texture_2d']: s#146
[#493 'texture_2d_array']: s#147
[#493 'texture_3d']: s#148
[#493 'texture_cube']: s#149
[#493 'texture_cube_array']: s#150
[#493 'texture_depth_2d']: s#140
[#493 'texture_depth_2d_array']: s#141
[#493 'texture_depth_cube']: s#142
[#493 'texture_depth_cube_array']: s#143
[#493 'texture_depth_multisampled_2d']: s#144
[#493 'texture_multisampled_2d']: s#151
[#493 'texture_storage_1d']: s#152
[#493 'texture_storage_2d']: s#153
[#493 'texture_storage_2d_array']: s#154
[#493 'texture_storage_3d']: s#155
[#493 'true']: s#114
[#493 'u32']: s#120
[#493 'vec2']: s#98
[#493 'vec3']: s#99
[#493 'vec4']: s#100
[#493 '~']: s#72
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#493 /0[fh]/]: s#130
[#493 /0[iu]?/]: s#127
[#493 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#493 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#493 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#493 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#493 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#493 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#493 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#493 /[1-9][0-9]*[fh]/]: s#131
[#493 /[1-9][0-9]*[iu]?/]: s#128
[#494 '!=']: r#305
[#494 '%']: r#305
[#494 '&&']: r#305
[#494 '&']: r#305
[#494 ')']: r#305
[#494 '*']: r#305
[#494 '+']: r#305
[#494 ',']: r#305
[#494 '-']: r#305
[#494 '.']: r#305
[#494 '/']: r#305
[#494 ':']: r#305
[#494 ';']: r#305
[#494 '<']: r#305
[#494 '<<']: r#305
[#494 '<=']: r#305
[#494 '==']: r#305
[#494 '>']: r#305
[#494 '>=']: r#305
[#494 '>>']: r#305
[#494 '[']: r#305
[#494 ']']: r#305
[#494 '^']: r#305
[#494 '{']: r#305
[#494 '|']: r#305
[#494 '||']: r#305
[#495 '.']: s#207
[#495 '[']: s#206
[#496 '!=']: r#306
[#496 '%']: r#306
[#496 '%=']: r#306
[#496 '&&']: r#306
[#496 '&']: r#306
[#496 '&=']: r#306
[#496 ')']: r#306
[#496 '*']: r#306
[#496 '*=']: r#306
[#496 '+']: r#306
[#496 '++']: r#306
[#496 '+=']: r#306
[#496 ',']: r#306
[#496 '-']: r#306
[#496 '--']: r#306
[#496 '-=']: r#306
[#496 '.']: r#306
[#496 '/']: r#306
[#496 '/=']: r#306
[#496 ':']: r#306
[#496 ';']: r#306
[#496 '<']: r#306
[#496 '<<']: r#306
[#496 '<<=']: r#306
[#496 '<=']: r#306
[#496 '=']: r#306
[#496 '==']: r#306
[#496 '>']: r#306
[#496 '>=']: r#306
[#496 '>>']: r#306
[#496 '>>=']: r#306
[#496 '[']: r#306
[#496 ']']: r#306
[#496 '^']: r#306
[#496 '^=']: r#306
[#496 '{']: r#306
[#496 '|']: r#306
[#496 '|=']: r#306
[#496 '||']: r#306
[#497 '!=']: r#307
[#497 '%']: r#307
[#497 '%=']: r#307
[#497 '&&']: r#307
[#497 '&']: r#307
[#497 '&=']: r#307
[#497 ')']: r#307
[#497 '*']: r#307
[#497 '*=']: r#307
[#497 '+']: r#307
[#497 '++']: r#307
[#497 '+=']: r#307
[#497 ',']: r#307
[#497 '-']: r#307
[#497 '--']: r#307
[#497 '-=']: r#307
[#497 '/']: r#307
[#497 '/=']: r#307
[#497 ':']: r#307
[#497 ';']: r#307
[#497 '<']: r#307
[#497 '<<']: r#307
[#497 '<<=']: r#307
[#497 '<=']: r#307
[#497 '=']: r#307
[#497 '==']: r#307
[#497 '>']: r#307
[#497 '>=']: r#307
[#497 '>>']: r#307
[#497 '>>=']: r#307
[#497 ']']: r#307
[#497 '^']: r#307
[#497 '^=']: r#307
[#497 '{']: r#307
[#497 '|']: r#307
[#497 '|=']: r#307
[#497 '||']: r#307
[#498 '!=']: r#308
[#498 '%']: r#308
[#498 '%=']: r#308
[#498 '&&']: r#308
[#498 '&']: r#308
[#498 '&=']: r#308
[#498 ')']: r#308
[#498 '*']: r#308
[#498 '*=']: r#308
[#498 '+']: r#308
[#498 '++']: r#308
[#498 '+=']: r#308
[#498 ',']: r#308
[#498 '-']: r#308
[#498 '--']: r#308
[#498 '-=']: r#308
[#498 '/']: r#308
[#498 '/=']: r#308
[#498 ':']: r#308
[#498 ';']: r#308
[#498 '<']: r#308
[#498 '<<']: r#308
[#498 '<<=']: r#308
[#498 '<=']: r#308
[#498 '=']: r#308
[#498 '==']: r#308
[#498 '>']: r#308
[#498 '>=']: r#308
[#498 '>>']: r#308
[#498 '>>=']: r#308
[#498 ']']: r#308
[#498 '^']: r#308
[#498 '^=']: r#308
[#498 '{']: r#308
[#498 '|']: r#308
[#498 '|=']: r#308
[#498 '||']: r#308
[#499 '!=']: r#309
[#499 '%']: r#309
[#499 '%=']: r#309
[#499 '&&']: r#309
[#499 '&']: r#309
[#499 '&=']: r#309
[#499 ')']: r#309
[#499 '*']: r#309
[#499 '*=']: r#309
[#499 '+']: r#309
[#499 '++']: r#309
[#499 '+=']: r#309
[#499 ',']: r#309
[#499 '-']: r#309
[#499 '--']: r#309
[#499 '-=']: r#309
[#499 '/']: r#309
[#499 '/=']: r#309
[#499 ':']: r#309
[#499 ';']: r#309
[#499 '<']: r#309
[#499 '<<']: r#309
[#499 '<<=']: r#309
[#499 '<=']: r#309
[#499 '=']: r#309
[#499 '==']: r#309
[#499 '>']: r#309
[#499 '>=']: r#309
[#499 '>>']: r#309
[#499 '>>=']: r#309
[#499 ']']: r#309
[#499 '^']: r#309
[#499 '^=']: r#309
[#499 '{']: r#309
[#499 '|']: r#309
[#499 '|=']: r#309
[#499 '||']: r#309
[#500 '!=']: r#310
[#500 '%']: r#310
[#500 '%=']: r#310
[#500 '&&']: r#310
[#500 '&']: r#310
[#500 '&=']: r#310
[#500 ')']: r#310
[#500 '*']: r#310
[#500 '*=']: r#310
[#500 '+']: r#310
[#500 '++']: r#310
[#500 '+=']: r#310
[#500 ',']: r#310
[#500 '-']: r#310
[#500 '--']: r#310
[#500 '-=']: r#310
[#500 '/']: r#310
[#500 '/=']: r#310
[#500 ':']: r#310
[#500 ';']: r#310
[#500 '<']: r#310
[#500 '<<']: r#310
[#500 '<<=']: r#310
[#500 '<=']: r#310
[#500 '=']: r#310
[#500 '==']: r#310
[#500 '>']: r#310
[#500 '>=']: r#310
[#500 '>>']: r#310
[#500 '>>=']: r#310
[#500 ']']: r#310
[#500 '^']: r#310
[#500 '^=']: r#310
[#500 '{']: r#310
[#500 '|']: r#310
[#500 '|=']: r#310
[#500 '||']: r#310
[#501 '@']: r#311
[#501 'array']: r#311
[#501 'atomic']: r#311
[#501 'bool']: r#311
[#501 'f16']: r#311
[#501 'f32']: r#311
[#501 'fn']: r#311
[#501 'i32']: r#311
[#501 'mat2x2']: r#311
[#501 'mat2x3']: r#311
[#501 'mat2x4']: r#311
[#501 'mat3x2']: r#311
[#501 'mat3x3']: r#311
[#501 'mat3x4']: r#311
[#501 'mat4x2']: r#311
[#501 'mat4x3']: r#311
[#501 'mat4x4']: r#311
[#501 'override']: r#311
[#501 'ptr']: r#311
[#501 'sampler']: r#311
[#501 'sampler_comparison']: r#311
[#501 'texture_1d']: r#311
[#501 'texture_2d']: r#311
[#501 'texture_2d_array']: r#311
[#501 'texture_3d']: r#311
[#501 'texture_cube']: r#311
[#501 'texture_cube_array']: r#311
[#501 'texture_depth_2d']: r#311
[#501 'texture_depth_2d_array']: r#311
[#501 'texture_depth_cube']: r#311
[#501 'texture_depth_cube_array']: r#311
[#501 'texture_depth_multisampled_2d']: r#311
[#501 'texture_multisampled_2d']: r#311
[#501 'texture_storage_1d']: r#311
[#501 'texture_storage_2d']: r#311
[#501 'texture_storage_2d_array']: r#311
[#501 'texture_storage_3d']: r#311
[#501 'u32']: r#311
[#501 'var']: r#311
[#501 'vec2']: r#311
[#501 'vec3']: r#311
[#501 'vec4']: r#311
[#502 '!']: s#71
[#502 '&']: s#74
[#502 '(']: s#116
[#502 ')']: r#312
[#502 '*']: s#73
[#502 '-']: s#70
[#502 'array']: s#84
[#502 'atomic']: s#96
[#502 'bitcast']: s#79
[#502 'bool']: s#89
[#502 'f16']: s#118
[#502 'f32']: s#117
[#502 'false']: s#115
[#502 'i32']: s#119
[#502 'mat2x2']: s#101
[#502 'mat2x3']: s#102
[#502 'mat2x4']: s#103
[#502 'mat3x2']: s#104
[#502 'mat3x3']: s#105
[#502 'mat3x4']: s#106
[#502 'mat4x2']: s#107
[#502 'mat4x3']: s#108
[#502 'mat4x4']: s#109
[#502 'ptr']: s#121
[#502 'sampler']: s#138
[#502 'sampler_comparison']: s#139
[#502 'texture_1d']: s#145
[#502 'texture_2d']: s#146
[#502 'texture_2d_array']: s#147
[#502 'texture_3d']: s#148
[#502 'texture_cube']: s#149
[#502 'texture_cube_array']: s#150
[#502 'texture_depth_2d']: s#140
[#502 'texture_depth_2d_array']: s#141
[#502 'texture_depth_cube']: s#142
[#502 'texture_depth_cube_array']: s#143
[#502 'texture_depth_multisampled_2d']: s#144
[#502 'texture_multisampled_2d']: s#151
[#502 'texture_storage_1d']: s#152
[#502 'texture_storage_2d']: s#153
[#502 'texture_storage_2d_array']: s#154
[#502 'texture_storage_3d']: s#155
[#502 'true']: s#114
[#502 'u32']: s#120
[#502 'vec2']: s#98
[#502 'vec3']: s#99
[#502 'vec4']: s#100
[#502 '~']: s#72
[#502 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#502 /0[fh]/]: s#130
[#502 /0[iu]?/]: s#127
[#502 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#502 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#502 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#502 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#502 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#502 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#502 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#502 /[1-9][0-9]*[fh]/]: s#131
[#502 /[1-9][0-9]*[iu]?/]: s#128
[#503 ')']: s#322
[#504 '@']: r#313
[#504 'array']: r#313
[#504 'atomic']: r#313
[#504 'bool']: r#313
[#504 'f16']: r#313
[#504 'f32']: r#313
[#504 'fn']: r#313
[#504 'i32']: r#313
[#504 'mat2x2']: r#313
[#504 'mat2x3']: r#313
[#504 'mat2x4']: r#313
[#504 'mat3x2']: r#313
[#504 'mat3x3']: r#313
[#504 'mat3x4']: r#313
[#504 'mat4x2']: r#313
[#504 'mat4x3']: r#313
[#504 'mat4x4']: r#313
[#504 'override']: r#313
[#504 'ptr']: r#313
[#504 'sampler']: r#313
[#504 'sampler_comparison']: r#313
[#504 'texture_1d']: r#313
[#504 'texture_2d']: r#313
[#504 'texture_2d_array']: r#313
[#504 'texture_3d']: r#313
[#504 'texture_cube']: r#313
[#504 'texture_cube_array']: r#313
[#504 'texture_depth_2d']: r#313
[#504 'texture_depth_2d_array']: r#313
[#504 'texture_depth_cube']: r#313
[#504 'texture_depth_cube_array']: r#313
[#504 'texture_depth_multisampled_2d']: r#313
[#504 'texture_multisampled_2d']: r#313
[#504 'texture_storage_1d']: r#313
[#504 'texture_storage_2d']: r#313
[#504 'texture_storage_2d_array']: r#313
[#504 'texture_storage_3d']: r#313
[#504 'u32']: r#313
[#504 'var']: r#313
[#504 'vec2']: r#313
[#504 'vec3']: r#313
[#504 'vec4']: r#313
[#505 ')']: r#312
[#506 '@']: r#314
[#506 'array']: r#314
[#506 'atomic']: r#314
[#506 'bool']: r#314
[#506 'f16']: r#314
[#506 'f32']: r#314
[#506 'fn']: r#314
[#506 'i32']: r#314
[#506 'mat2x2']: r#314
[#506 'mat2x3']: r#314
[#506 'mat2x4']: r#314
[#506 'mat3x2']: r#314
[#506 'mat3x3']: r#314
[#506 'mat3x4']: r#314
[#506 'mat4x2']: r#314
[#506 'mat4x3']: r#314
[#506 'mat4x4']: r#314
[#506 'override']: r#314
[#506 'ptr']: r#314
[#506 'sampler']: r#314
[#506 'sampler_comparison']: r#314
[#506 'texture_1d']: r#314
[#506 'texture_2d']: r#314
[#506 'texture_2d_array']: r#314
[#506 'texture_3d']: r#314
[#506 'texture_cube']: r#314
[#506 'texture_cube_array']: r#314
[#506 'texture_depth_2d']: r#314
[#506 'texture_depth_2d_array']: r#314
[#506 'texture_depth_cube']: r#314
[#506 'texture_depth_cube_array']: r#314
[#506 'texture_depth_multisampled_2d']: r#314
[#506 'texture_multisampled_2d']: r#314
[#506 'texture_storage_1d']: r#314
[#506 'texture_storage_2d']: r#314
[#506 'texture_storage_2d_array']: r#314
[#506 'texture_storage_3d']: r#314
[#506 'u32']: r#314
[#506 'var']: r#314
[#506 'vec2']: r#314
[#506 'vec3']: r#314
[#506 'vec4']: r#314
[#507 '@']: r#315
[#507 'array']: r#315
[#507 'atomic']: r#315
[#507 'bool']: r#315
[#507 'f16']: r#315
[#507 'f32']: r#315
[#507 'fn']: r#315
[#507 'i32']: r#315
[#507 'mat2x2']: r#315
[#507 'mat2x3']: r#315
[#507 'mat2x4']: r#315
[#507 'mat3x2']: r#315
[#507 'mat3x3']: r#315
[#507 'mat3x4']: r#315
[#507 'mat4x2']: r#315
[#507 'mat4x3']: r#315
[#507 'mat4x4']: r#315
[#507 'override']: r#315
[#507 'ptr']: r#315
[#507 'sampler']: r#315
[#507 'sampler_comparison']: r#315
[#507 'texture_1d']: r#315
[#507 'texture_2d']: r#315
[#507 'texture_2d_array']: r#315
[#507 'texture_3d']: r#315
[#507 'texture_cube']: r#315
[#507 'texture_cube_array']: r#315
[#507 'texture_depth_2d']: r#315
[#507 'texture_depth_2d_array']: r#315
[#507 'texture_depth_cube']: r#315
[#507 'texture_depth_cube_array']: r#315
[#507 'texture_depth_multisampled_2d']: r#315
[#507 'texture_multisampled_2d']: r#315
[#507 'texture_storage_1d']: r#315
[#507 'texture_storage_2d']: r#315
[#507 'texture_storage_2d_array']: r#315
[#507 'texture_storage_3d']: r#315
[#507 'u32']: r#315
[#507 'var']: r#315
[#507 'vec2']: r#315
[#507 'vec3']: r#315
[#507 'vec4']: r#315
[#508 ')']: r#312
[#508 'center']: s#515
[#508 'centroid']: s#516
[#508 'sample']: s#517
[#509 '@']: r#316
[#509 'array']: r#316
[#509 'atomic']: r#316
[#509 'bool']: r#316
[#509 'f16']: r#316
[#509 'f32']: r#316
[#509 'fn']: r#316
[#509 'i32']: r#316
[#509 'mat2x2']: r#316
[#509 'mat2x3']: r#316
[#509 'mat2x4']: r#316
[#509 'mat3x2']: r#316
[#509 'mat3x3']: r#316
[#509 'mat3x4']: r#316
[#509 'mat4x2']: r#316
[#509 'mat4x3']: r#316
[#509 'mat4x4']: r#316
[#509 'override']: r#316
[#509 'ptr']: r#316
[#509 'sampler']: r#316
[#509 'sampler_comparison']: r#316
[#509 'texture_1d']: r#316
[#509 'texture_2d']: r#316
[#509 'texture_2d_array']: r#316
[#509 'texture_3d']: r#316
[#509 'texture_cube']: r#316
[#509 'texture_cube_array']: r#316
[#509 'texture_depth_2d']: r#316
[#509 'texture_depth_2d_array']: r#316
[#509 'texture_depth_cube']: r#316
[#509 'texture_depth_cube_array']: r#316
[#509 'texture_depth_multisampled_2d']: r#316
[#509 'texture_multisampled_2d']: r#316
[#509 'texture_storage_1d']: r#316
[#509 'texture_storage_2d']: r#316
[#509 'texture_storage_2d_array']: r#316
[#509 'texture_storage_3d']: r#316
[#509 'u32']: r#316
[#509 'var']: r#316
[#509 'vec2']: r#316
[#509 'vec3']: r#316
[#509 'vec4']: r#316
[#510 '@']: r#317
[#510 'array']: r#317
[#510 'atomic']: r#317
[#510 'bool']: r#317
[#510 'f16']: r#317
[#510 'f32']: r#317
[#510 'fn']: r#317
[#510 'i32']: r#317
[#510 'mat2x2']: r#317
[#510 'mat2x3']: r#317
[#510 'mat2x4']: r#317
[#510 'mat3x2']: r#317
[#510 'mat3x3']: r#317
[#510 'mat3x4']: r#317
[#510 'mat4x2']: r#317
[#510 'mat4x3']: r#317
[#510 'mat4x4']: r#317
[#510 'override']: r#317
[#510 'ptr']: r#317
[#510 'sampler']: r#317
[#510 'sampler_comparison']: r#317
[#510 'texture_1d']: r#317
[#510 'texture_2d']: r#317
[#510 'texture_2d_array']: r#317
[#510 'texture_3d']: r#317
[#510 'texture_cube']: r#317
[#510 'texture_cube_array']: r#317
[#510 'texture_depth_2d']: r#317
[#510 'texture_depth_2d_array']: r#317
[#510 'texture_depth_cube']: r#317
[#510 'texture_depth_cube_array']: r#317
[#510 'texture_depth_multisampled_2d']: r#317
[#510 'texture_multisampled_2d']: r#317
[#510 'texture_storage_1d']: r#317
[#510 'texture_storage_2d']: r#317
[#510 'texture_storage_2d_array']: r#317
[#510 'texture_storage_3d']: r#317
[#510 'u32']: r#317
[#510 'var']: r#317
[#510 'vec2']: r#317
[#510 'vec3']: r#317
[#510 'vec4']: r#317
[#511 '@']: r#318
[#511 'array']: r#318
[#511 'atomic']: r#318
[#511 'bool']: r#318
[#511 'f16']: r#318
[#511 'f32']: r#318
[#511 'fn']: r#318
[#511 'i32']: r#318
[#511 'mat2x2']: r#318
[#511 'mat2x3']: r#318
[#511 'mat2x4']: r#318
[#511 'mat3x2']: r#318
[#511 'mat3x3']: r#318
[#511 'mat3x4']: r#318
[#511 'mat4x2']: r#318
[#511 'mat4x3']: r#318
[#511 'mat4x4']: r#318
[#511 'override']: r#318
[#511 'ptr']: r#318
[#511 'sampler']: r#318
[#511 'sampler_comparison']: r#318
[#511 'texture_1d']: r#318
[#511 'texture_2d']: r#318
[#511 'texture_2d_array']: r#318
[#511 'texture_3d']: r#318
[#511 'texture_cube']: r#318
[#511 'texture_cube_array']: r#318
[#511 'texture_depth_2d']: r#318
[#511 'texture_depth_2d_array']: r#318
[#511 'texture_depth_cube']: r#318
[#511 'texture_depth_cube_array']: r#318
[#511 'texture_depth_multisampled_2d']: r#318
[#511 'texture_multisampled_2d']: r#318
[#511 'texture_storage_1d']: r#318
[#511 'texture_storage_2d']: r#318
[#511 'texture_storage_2d_array']: r#318
[#511 'texture_storage_3d']: r#318
[#511 'u32']: r#318
[#511 'var']: r#318
[#511 'vec2']: r#318
[#511 'vec3']: r#318
[#511 'vec4']: r#318
[#512 '@']: r#319
[#512 'array']: r#319
[#512 'atomic']: r#319
[#512 'bool']: r#319
[#512 'f16']: r#319
[#512 'f32']: r#319
[#512 'fn']: r#319
[#512 'i32']: r#319
[#512 'mat2x2']: r#319
[#512 'mat2x3']: r#319
[#512 'mat2x4']: r#319
[#512 'mat3x2']: r#319
[#512 'mat3x3']: r#319
[#512 'mat3x4']: r#319
[#512 'mat4x2']: r#319
[#512 'mat4x3']: r#319
[#512 'mat4x4']: r#319
[#512 'override']: r#319
[#512 'ptr']: r#319
[#512 'sampler']: r#319
[#512 'sampler_comparison']: r#319
[#512 'texture_1d']: r#319
[#512 'texture_2d']: r#319
[#512 'texture_2d_array']: r#319
[#512 'texture_3d']: r#319
[#512 'texture_cube']: r#319
[#512 'texture_cube_array']: r#319
[#512 'texture_depth_2d']: r#319
[#512 'texture_depth_2d_array']: r#319
[#512 'texture_depth_cube']: r#319
[#512 'texture_depth_cube_array']: r#319
[#512 'texture_depth_multisampled_2d']: r#319
[#512 'texture_multisampled_2d']: r#319
[#512 'texture_storage_1d']: r#319
[#512 'texture_storage_2d']: r#319
[#512 'texture_storage_2d_array']: r#319
[#512 'texture_storage_3d']: r#319
[#512 'u32']: r#319
[#512 'var']: r#319
[#512 'vec2']: r#319
[#512 'vec3']: r#319
[#512 'vec4']: r#319
[#513 '@']: r#320
[#513 'array']: r#320
[#513 'atomic']: r#320
[#513 'bool']: r#320
[#513 'f16']: r#320
[#513 'f32']: r#320
[#513 'fn']: r#320
[#513 'i32']: r#320
[#513 'mat2x2']: r#320
[#513 'mat2x3']: r#320
[#513 'mat2x4']: r#320
[#513 'mat3x2']: r#320
[#513 'mat3x3']: r#320
[#513 'mat3x4']: r#320
[#513 'mat4x2']: r#320
[#513 'mat4x3']: r#320
[#513 'mat4x4']: r#320
[#513 'override']: r#320
[#513 'ptr']: r#320
[#513 'sampler']: r#320
[#513 'sampler_comparison']: r#320
[#513 'texture_1d']: r#320
[#513 'texture_2d']: r#320
[#513 'texture_2d_array']: r#320
[#513 'texture_3d']: r#320
[#513 'texture_cube']: r#320
[#513 'texture_cube_array']: r#320
[#513 'texture_depth_2d']: r#320
[#513 'texture_depth_2d_array']: r#320
[#513 'texture_depth_cube']: r#320
[#513 'texture_depth_cube_array']: r#320
[#513 'texture_depth_multisampled_2d']: r#320
[#513 'texture_multisampled_2d']: r#320
[#513 'texture_storage_1d']: r#320
[#513 'texture_storage_2d']: r#320
[#513 'texture_storage_2d_array']: r#320
[#513 'texture_storage_3d']: r#320
[#513 'u32']: r#320
[#513 'var']: r#320
[#513 'vec2']: r#320
[#513 'vec3']: r#320
[#513 'vec4']: r#320
[#514 ',']: s#406
[#515 ')']: r#321
[#515 ',']: r#321
[#516 ')']: r#322
[#516 ',']: r#322
[#517 ')']: r#323
[#517 ',']: r#323
[#518 '@']: r#324
[#518 'array']: r#324
[#518 'atomic']: r#324
[#518 'bool']: r#324
[#518 'f16']: r#324
[#518 'f32']: r#324
[#518 'fn']: r#324
[#518 'i32']: r#324
[#518 'mat2x2']: r#324
[#518 'mat2x3']: r#324
[#518 'mat2x4']: r#324
[#518 'mat3x2']: r#324
[#518 'mat3x3']: r#324
[#518 'mat3x4']: r#324
[#518 'mat4x2']: r#324
[#518 'mat4x3']: r#324
[#518 'mat4x4']: r#324
[#518 'override']: r#324
[#518 'ptr']: r#324
[#518 'sampler']: r#324
[#518 'sampler_comparison']: r#324
[#518 'texture_1d']: r#324
[#518 'texture_2d']: r#324
[#518 'texture_2d_array']: r#324
[#518 'texture_3d']: r#324
[#518 'texture_cube']: r#324
[#518 'texture_cube_array']: r#324
[#518 'texture_depth_2d']: r#324
[#518 'texture_depth_2d_array']: r#324
[#518 'texture_depth_cube']: r#324
[#518 'texture_depth_cube_array']: r#324
[#518 'texture_depth_multisampled_2d']: r#324
[#518 'texture_multisampled_2d']: r#324
[#518 'texture_storage_1d']: r#324
[#518 'texture_storage_2d']: r#324
[#518 'texture_storage_2d_array']: r#324
[#518 'texture_storage_3d']: r#324
[#518 'u32']: r#324
[#518 'var']: r#324
[#518 'vec2']: r#324
[#518 'vec3']: r#324
[#518 'vec4']: r#324
[#519 ',']: s#406
[#520 '!=']: r#325
[#520 '%']: r#325
[#520 '%=']: r#325
[#520 '&&']: r#325
[#520 '&']: r#325
[#520 '&=']: r#325
[#520 ')']: r#325
[#520 '*']: r#325
[#520 '*=']: r#325
[#520 '+']: r#325
[#520 '++']: r#325
[#520 '+=']: r#325
[#520 ',']: r#325
[#520 '-']: r#325
[#520 '--']: r#325
[#520 '-=']: r#325
[#520 '/']: r#325
[#520 '/=']: r#325
[#520 ':']: r#325
[#520 ';']: r#325
[#520 '<']: r#325
[#520 '<<']: r#325
[#520 '<<=']: r#325
[#520 '<=']: r#325
[#520 '=']: r#325
[#520 '==']: r#325
[#520 '>']: r#325
[#520 '>=']: r#325
[#520 '>>']: r#325
[#520 '>>=']: r#325
[#520 ']']: r#325
[#520 '^']: r#325
[#520 '^=']: r#325
[#520 '{']: r#325
[#520 '|']: r#325
[#520 '|=']: r#325
[#520 '||']: r#325
[#521 '!=']: r#326
[#521 '%']: r#326
[#521 '%=']: r#326
[#521 '&&']: r#326
[#521 '&']: r#326
[#521 '&=']: r#326
[#521 ')']: r#326
[#521 '*']: r#326
[#521 '*=']: r#326
[#521 '+']: r#326
[#521 '++']: r#326
[#521 '+=']: r#326
[#521 ',']: r#326
[#521 '-']: r#326
[#521 '--']: r#326
[#521 '-=']: r#326
[#521 '/']: r#326
[#521 '/=']: r#326
[#521 ':']: r#326
[#521 ';']: r#326
[#521 '<']: r#326
[#521 '<<']: r#326
[#521 '<<=']: r#326
[#521 '<=']: r#326
[#521 '=']: r#326
[#521 '==']: r#326
[#521 '>']: r#326
[#521 '>=']: r#326
[#521 '>>']: r#326
[#521 '>>=']: r#326
[#521 ']']: r#326
[#521 '^']: r#326
[#521 '^=']: r#326
[#521 '{']: r#326
[#521 '|']: r#326
[#521 '|=']: r#326
[#521 '||']: r#326
[#522 ')']: r#327
[#522 ',']: r#327
[#523 ')']: r#328
[#523 ',']: r#328
[#524 ')']: r#329
[#525 ')']: r#330
[#526 '!=']: r#331
[#526 '%']: r#331
[#526 '&&']: r#331
[#526 '&']: r#331
[#526 ')']: r#331
[#526 '*']: r#331
[#526 '+']: r#331
[#526 ',']: r#331
[#526 '-']: r#331
[#526 '.']: r#331
[#526 '/']: r#331
[#526 ':']: r#331
[#526 ';']: r#331
[#526 '<']: r#331
[#526 '<<']: r#331
[#526 '<=']: r#331
[#526 '==']: r#331
[#526 '>']: r#331
[#526 '>=']: r#331
[#526 '>>']: r#331
[#526 '[']: r#331
[#526 ']']: r#331
[#526 '^']: r#331
[#526 '{']: r#331
[#526 '|']: r#331
[#526 '||']: r#331
[#527 '>']: r#332
[#528 '+']: s#226
[#528 '-']: s#70
[#528 '>']: r#333
[#529 '>']: r#334
[#530 '%']: r#32
[#530 '&']: r#29
[#530 '*']: r#32
[#530 '+']: r#32
[#530 '-']: r#32
[#530 '/']: r#32
[#530 '>']: r#32
[#530 '^']: r#31
[#530 '|']: r#30
[#531 '(']: r#335
[#531 ')']: r#335
[#531 ',']: r#335
[#531 ';']: r#335
[#531 '=']: r#335
[#531 '>']: r#335
[#531 '{']: r#335
[#531 '}']: r#335
[#532 ',']: s#406
[#533 '>']: s#238
[#534 '>']: r#336
[#535 '>']: r#337
[#536 '>']: r#338
[#537 '!']: s#71
[#537 '&']: s#74
[#537 '(']: s#116
[#537 '*']: s#73
[#537 '-']: s#70
[#537 'array']: s#84
[#537 'atomic']: s#96
[#537 'bitcast']: s#79
[#537 'bool']: s#89
[#537 'f16']: s#118
[#537 'f32']: s#117
[#537 'false']: s#115
[#537 'i32']: s#119
[#537 'mat2x2']: s#101
[#537 'mat2x3']: s#102
[#537 'mat2x4']: s#103
[#537 'mat3x2']: s#104
[#537 'mat3x3']: s#105
[#537 'mat3x4']: s#106
[#537 'mat4x2']: s#107
[#537 'mat4x3']: s#108
[#537 'mat4x4']: s#109
[#537 'ptr']: s#121
[#537 'sampler']: s#138
[#537 'sampler_comparison']: s#139
[#537 'texture_1d']: s#145
[#537 'texture_2d']: s#146
[#537 'texture_2d_array']: s#147
[#537 'texture_3d']: s#148
[#537 'texture_cube']: s#149
[#537 'texture_cube_array']: s#150
[#537 'texture_depth_2d']: s#140
[#537 'texture_depth_2d_array']: s#141
[#537 'texture_depth_cube']: s#142
[#537 'texture_depth_cube_array']: s#143
[#537 'texture_depth_multisampled_2d']: s#144
[#537 'texture_multisampled_2d']: s#151
[#537 'texture_storage_1d']: s#152
[#537 'texture_storage_2d']: s#153
[#537 'texture_storage_2d_array']: s#154
[#537 'texture_storage_3d']: s#155
[#537 'true']: s#114
[#537 'u32']: s#120
[#537 'vec2']: s#98
[#537 'vec3']: s#99
[#537 'vec4']: s#100
[#537 '~']: s#72
[#537 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#537 /0[fh]/]: s#130
[#537 /0[iu]?/]: s#127
[#537 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#537 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#537 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#537 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#537 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#537 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#537 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#537 /[1-9][0-9]*[fh]/]: s#131
[#537 /[1-9][0-9]*[iu]?/]: s#128
[#538 '&']: r#339
[#538 '(']: r#339
[#538 '*']: r#339
[#538 ';']: r#339
[#538 '_']: r#339
[#538 'break']: r#339
[#538 'const']: r#339
[#538 'continue']: r#339
[#538 'continuing']: r#339
[#538 'discard']: r#339
[#538 'else']: r#339
[#538 'for']: r#339
[#538 'if']: r#339
[#538 'let']: r#339
[#538 'loop']: r#339
[#538 'return']: r#339
[#538 'static_assert']: r#339
[#538 'switch']: r#339
[#538 'var']: r#339
[#538 'while']: r#339
[#538 '{']: r#339
[#538 '}']: r#339
[#538 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#339
[#539 '&']: r#340
[#539 '(']: r#340
[#539 '*']: r#340
[#539 ';']: r#340
[#539 '_']: r#340
[#539 'break']: r#340
[#539 'const']: r#340
[#539 'continue']: r#340
[#539 'continuing']: r#340
[#539 'discard']: r#340
[#539 'for']: r#340
[#539 'if']: r#340
[#539 'let']: r#340
[#539 'loop']: r#340
[#539 'return']: r#340
[#539 'static_assert']: r#340
[#539 'switch']: r#340
[#539 'var']: r#340
[#539 'while']: r#340
[#539 '{']: r#340
[#539 '}']: r#340
[#539 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#340
[#540 '&']: r#341
[#540 '(']: r#341
[#540 '*']: r#341
[#540 ';']: r#341
[#540 '_']: r#341
[#540 'break']: r#341
[#540 'const']: r#341
[#540 'continue']: r#341
[#540 'continuing']: r#341
[#540 'discard']: r#341
[#540 'for']: r#341
[#540 'if']: r#341
[#540 'let']: r#341
[#540 'loop']: r#341
[#540 'return']: r#341
[#540 'static_assert']: r#341
[#540 'switch']: r#341
[#540 'var']: r#341
[#540 'while']: r#341
[#540 '{']: r#341
[#540 '}']: r#341
[#540 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#341
[#541 '{']: s#186
[#542 'case']: s#597
[#542 'default']: s#598
[#543 'continuing']: s#591
[#544 'continuing']: r#342
[#544 '}']: r#342
[#545 '&']: s#74
[#545 '(']: s#116
[#545 '*']: s#73
[#545 ';']: s#20
[#545 '_']: s#389
[#545 'break']: s#378
[#545 'const']: s#377
[#545 'continue']: s#379
[#545 'discard']: s#364
[#545 'for']: s#372
[#545 'if']: s#383
[#545 'let']: s#376
[#545 'loop']: s#371
[#545 'return']: s#368
[#545 'static_assert']: s#27
[#545 'switch']: s#370
[#545 'var']: s#164
[#545 'while']: s#373
[#545 '{']: s#186
[#545 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#546 ')']: s#322
[#547 ';']: s#20
[#548 ';']: r#343
[#549 ';']: r#344
[#550 ';']: r#345
[#551 ';']: r#346
[#552 '&']: r#347
[#552 '(']: r#347
[#552 '*']: r#347
[#552 ';']: r#347
[#552 '_']: r#347
[#552 'break']: r#347
[#552 'const']: r#347
[#552 'continue']: r#347
[#552 'continuing']: r#347
[#552 'discard']: r#347
[#552 'for']: r#347
[#552 'if']: r#347
[#552 'let']: r#347
[#552 'loop']: r#347
[#552 'return']: r#347
[#552 'static_assert']: r#347
[#552 'switch']: r#347
[#552 'var']: r#347
[#552 'while']: r#347
[#552 '{']: r#347
[#552 '}']: r#347
[#552 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#347
[#553 ';']: r#348
[#554 '!']: s#71
[#554 '&']: s#74
[#554 '(']: s#116
[#554 '*']: s#73
[#554 '-']: s#70
[#554 'array']: s#84
[#554 'atomic']: s#96
[#554 'bitcast']: s#79
[#554 'bool']: s#89
[#554 'f16']: s#118
[#554 'f32']: s#117
[#554 'false']: s#115
[#554 'i32']: s#119
[#554 'mat2x2']: s#101
[#554 'mat2x3']: s#102
[#554 'mat2x4']: s#103
[#554 'mat3x2']: s#104
[#554 'mat3x3']: s#105
[#554 'mat3x4']: s#106
[#554 'mat4x2']: s#107
[#554 'mat4x3']: s#108
[#554 'mat4x4']: s#109
[#554 'ptr']: s#121
[#554 'sampler']: s#138
[#554 'sampler_comparison']: s#139
[#554 'texture_1d']: s#145
[#554 'texture_2d']: s#146
[#554 'texture_2d_array']: s#147
[#554 'texture_3d']: s#148
[#554 'texture_cube']: s#149
[#554 'texture_cube_array']: s#150
[#554 'texture_depth_2d']: s#140
[#554 'texture_depth_2d_array']: s#141
[#554 'texture_depth_cube']: s#142
[#554 'texture_depth_cube_array']: s#143
[#554 'texture_depth_multisampled_2d']: s#144
[#554 'texture_multisampled_2d']: s#151
[#554 'texture_storage_1d']: s#152
[#554 'texture_storage_2d']: s#153
[#554 'texture_storage_2d_array']: s#154
[#554 'texture_storage_3d']: s#155
[#554 'true']: s#114
[#554 'u32']: s#120
[#554 'vec2']: s#98
[#554 'vec3']: s#99
[#554 'vec4']: s#100
[#554 '~']: s#72
[#554 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#554 /0[fh]/]: s#130
[#554 /0[iu]?/]: s#127
[#554 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#554 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#554 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#554 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#554 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#554 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#554 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#554 /[1-9][0-9]*[fh]/]: s#131
[#554 /[1-9][0-9]*[iu]?/]: s#128
[#555 '!']: s#71
[#555 '&']: s#74
[#555 '(']: s#116
[#555 '*']: s#73
[#555 '-']: s#70
[#555 'array']: s#84
[#555 'atomic']: s#96
[#555 'bitcast']: s#79
[#555 'bool']: s#89
[#555 'f16']: s#118
[#555 'f32']: s#117
[#555 'false']: s#115
[#555 'i32']: s#119
[#555 'mat2x2']: s#101
[#555 'mat2x3']: s#102
[#555 'mat2x4']: s#103
[#555 'mat3x2']: s#104
[#555 'mat3x3']: s#105
[#555 'mat3x4']: s#106
[#555 'mat4x2']: s#107
[#555 'mat4x3']: s#108
[#555 'mat4x4']: s#109
[#555 'ptr']: s#121
[#555 'sampler']: s#138
[#555 'sampler_comparison']: s#139
[#555 'texture_1d']: s#145
[#555 'texture_2d']: s#146
[#555 'texture_2d_array']: s#147
[#555 'texture_3d']: s#148
[#555 'texture_cube']: s#149
[#555 'texture_cube_array']: s#150
[#555 'texture_depth_2d']: s#140
[#555 'texture_depth_2d_array']: s#141
[#555 'texture_depth_cube']: s#142
[#555 'texture_depth_cube_array']: s#143
[#555 'texture_depth_multisampled_2d']: s#144
[#555 'texture_multisampled_2d']: s#151
[#555 'texture_storage_1d']: s#152
[#555 'texture_storage_2d']: s#153
[#555 'texture_storage_2d_array']: s#154
[#555 'texture_storage_3d']: s#155
[#555 'true']: s#114
[#555 'u32']: s#120
[#555 'vec2']: s#98
[#555 'vec3']: s#99
[#555 'vec4']: s#100
[#555 '~']: s#72
[#555 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#555 /0[fh]/]: s#130
[#555 /0[iu]?/]: s#127
[#555 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#555 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#555 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#555 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#555 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#555 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#555 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#555 /[1-9][0-9]*[fh]/]: s#131
[#555 /[1-9][0-9]*[iu]?/]: s#128
[#556 '&']: r#349
[#556 '(']: r#349
[#556 '*']: r#349
[#556 ';']: r#349
[#556 '_']: r#349
[#556 'break']: r#349
[#556 'const']: r#349
[#556 'continue']: r#349
[#556 'continuing']: r#349
[#556 'discard']: r#349
[#556 'else']: r#349
[#556 'for']: r#349
[#556 'if']: r#349
[#556 'let']: r#349
[#556 'loop']: r#349
[#556 'return']: r#349
[#556 'static_assert']: r#349
[#556 'switch']: r#349
[#556 'var']: r#349
[#556 'while']: r#349
[#556 '{']: r#349
[#556 '}']: r#349
[#556 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#349
[#557 ')']: r#350
[#557 ';']: r#350
[#558 ')']: r#351
[#558 ';']: r#351
[#559 '%=']: r#352
[#559 '&=']: r#352
[#559 ')']: r#352
[#559 '*=']: r#352
[#559 '++']: r#352
[#559 '+=']: r#352
[#559 '--']: r#352
[#559 '-=']: r#352
[#559 '.']: r#352
[#559 '/=']: r#352
[#559 '<<=']: r#352
[#559 '=']: r#352
[#559 '>>=']: r#352
[#559 '[']: r#352
[#559 '^=']: r#352
[#559 '|=']: r#352
[#561 ':']: s#180
[#562 ',']: s#406
[#563 ')']: r#353
[#563 ',']: r#353
[#564 ',']: s#406
[#565 '@']: s#33
[#566 '->']: s#578
[#567 ',']: r#354
[#567 '}']: r#354
[#568 ',']: r#355
[#568 '}']: r#355
[#569 '}']: s#479
[#570 '}']: r#356
[#571 'array']: s#317
[#571 'atomic']: s#96
[#571 'bool']: s#89
[#571 'f16']: s#118
[#571 'f32']: s#117
[#571 'i32']: s#119
[#571 'mat2x2']: s#101
[#571 'mat2x3']: s#102
[#571 'mat2x4']: s#103
[#571 'mat3x2']: s#104
[#571 'mat3x3']: s#105
[#571 'mat3x4']: s#106
[#571 'mat4x2']: s#107
[#571 'mat4x3']: s#108
[#571 'mat4x4']: s#109
[#571 'ptr']: s#121
[#571 'sampler']: s#138
[#571 'sampler_comparison']: s#139
[#571 'texture_1d']: s#145
[#571 'texture_2d']: s#146
[#571 'texture_2d_array']: s#147
[#571 'texture_3d']: s#148
[#571 'texture_cube']: s#149
[#571 'texture_cube_array']: s#150
[#571 'texture_depth_2d']: s#140
[#571 'texture_depth_2d_array']: s#141
[#571 'texture_depth_cube']: s#142
[#571 'texture_depth_cube_array']: s#143
[#571 'texture_depth_multisampled_2d']: s#144
[#571 'texture_multisampled_2d']: s#151
[#571 'texture_storage_1d']: s#152
[#571 'texture_storage_2d']: s#153
[#571 'texture_storage_2d_array']: s#154
[#571 'texture_storage_3d']: s#155
[#571 'u32']: s#120
[#571 'vec2']: s#98
[#571 'vec3']: s#99
[#571 'vec4']: s#100
[#571 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#572 '>']: r#357
[#573 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#358
[#574 ',']: r#359
[#574 '}']: r#359
[#575 ';']: r#360
[#575 '@']: r#360
[#575 'const']: r#360
[#575 'fn']: r#360
[#575 'override']: r#360
[#575 'static_assert']: r#360
[#575 'struct']: r#360
[#575 'type']: r#360
[#575 'var']: r#360
[#575 EndOfText]: r#360
[#576 '{']: r#361
[#577 '@']: s#33
[#578 '@']: r#362
[#578 'array']: r#362
[#578 'atomic']: r#362
[#578 'bool']: r#362
[#578 'f16']: r#362
[#578 'f32']: r#362
[#578 'i32']: r#362
[#578 'mat2x2']: r#362
[#578 'mat2x3']: r#362
[#578 'mat2x4']: r#362
[#578 'mat3x2']: r#362
[#578 'mat3x3']: r#362
[#578 'mat3x4']: r#362
[#578 'mat4x2']: r#362
[#578 'mat4x3']: r#362
[#578 'mat4x4']: r#362
[#578 'ptr']: r#362
[#578 'sampler']: r#362
[#578 'sampler_comparison']: r#362
[#578 'texture_1d']: r#362
[#578 'texture_2d']: r#362
[#578 'texture_2d_array']: r#362
[#578 'texture_3d']: r#362
[#578 'texture_cube']: r#362
[#578 'texture_cube_array']: r#362
[#578 'texture_depth_2d']: r#362
[#578 'texture_depth_2d_array']: r#362
[#578 'texture_depth_cube']: r#362
[#578 'texture_depth_cube_array']: r#362
[#578 'texture_depth_multisampled_2d']: r#362
[#578 'texture_multisampled_2d']: r#362
[#578 'texture_storage_1d']: r#362
[#578 'texture_storage_2d']: r#362
[#578 'texture_storage_2d_array']: r#362
[#578 'texture_storage_3d']: r#362
[#578 'u32']: r#362
[#578 'vec2']: r#362
[#578 'vec3']: r#362
[#578 'vec4']: r#362
[#579 ')']: r#363
[#579 ',']: r#363
[#580 ')']: r#364
[#580 ',']: r#364
[#581 ')']: r#365
[#582 ')']: r#366
[#583 'array']: s#317
[#583 'atomic']: s#96
[#583 'bool']: s#89
[#583 'f16']: s#118
[#583 'f32']: s#117
[#583 'i32']: s#119
[#583 'mat2x2']: s#101
[#583 'mat2x3']: s#102
[#583 'mat2x4']: s#103
[#583 'mat3x2']: s#104
[#583 'mat3x3']: s#105
[#583 'mat3x4']: s#106
[#583 'mat4x2']: s#107
[#583 'mat4x3']: s#108
[#583 'mat4x4']: s#109
[#583 'ptr']: s#121
[#583 'sampler']: s#138
[#583 'sampler_comparison']: s#139
[#583 'texture_1d']: s#145
[#583 'texture_2d']: s#146
[#583 'texture_2d_array']: s#147
[#583 'texture_3d']: s#148
[#583 'texture_cube']: s#149
[#583 'texture_cube_array']: s#150
[#583 'texture_depth_2d']: s#140
[#583 'texture_depth_2d_array']: s#141
[#583 'texture_depth_cube']: s#142
[#583 'texture_depth_cube_array']: s#143
[#583 'texture_depth_multisampled_2d']: s#144
[#583 'texture_multisampled_2d']: s#151
[#583 'texture_storage_1d']: s#152
[#583 'texture_storage_2d']: s#153
[#583 'texture_storage_2d_array']: s#154
[#583 'texture_storage_3d']: s#155
[#583 'u32']: s#120
[#583 'vec2']: s#98
[#583 'vec3']: s#99
[#583 'vec4']: s#100
[#583 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#584 ';']: r#367
[#585 ';']: r#368
[#586 '!']: s#71
[#586 '&']: s#74
[#586 '(']: s#116
[#586 '*']: s#73
[#586 '-']: s#70
[#586 'array']: s#84
[#586 'atomic']: s#96
[#586 'bitcast']: s#79
[#586 'bool']: s#89
[#586 'f16']: s#118
[#586 'f32']: s#117
[#586 'false']: s#115
[#586 'i32']: s#119
[#586 'mat2x2']: s#101
[#586 'mat2x3']: s#102
[#586 'mat2x4']: s#103
[#586 'mat3x2']: s#104
[#586 'mat3x3']: s#105
[#586 'mat3x4']: s#106
[#586 'mat4x2']: s#107
[#586 'mat4x3']: s#108
[#586 'mat4x4']: s#109
[#586 'ptr']: s#121
[#586 'sampler']: s#138
[#586 'sampler_comparison']: s#139
[#586 'texture_1d']: s#145
[#586 'texture_2d']: s#146
[#586 'texture_2d_array']: s#147
[#586 'texture_3d']: s#148
[#586 'texture_cube']: s#149
[#586 'texture_cube_array']: s#150
[#586 'texture_depth_2d']: s#140
[#586 'texture_depth_2d_array']: s#141
[#586 'texture_depth_cube']: s#142
[#586 'texture_depth_cube_array']: s#143
[#586 'texture_depth_multisampled_2d']: s#144
[#586 'texture_multisampled_2d']: s#151
[#586 'texture_storage_1d']: s#152
[#586 'texture_storage_2d']: s#153
[#586 'texture_storage_2d_array']: s#154
[#586 'texture_storage_3d']: s#155
[#586 'true']: s#114
[#586 'u32']: s#120
[#586 'vec2']: s#98
[#586 'vec3']: s#99
[#586 'vec4']: s#100
[#586 '~']: s#72
[#586 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#586 /0[fh]/]: s#130
[#586 /0[iu]?/]: s#127
[#586 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#586 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#586 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#586 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#586 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#586 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#586 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#586 /[1-9][0-9]*[fh]/]: s#131
[#586 /[1-9][0-9]*[iu]?/]: s#128
[#587 '{']: s#186
[#588 'continuing']: r#369
[#588 '}']: r#369
[#589 '}']: s#479
[#590 '}']: r#370
[#591 '{']: s#186
[#592 '}']: s#479
[#593 '}']: r#371
[#594 'case']: s#597
[#594 'default']: s#598
[#595 'case']: r#372
[#595 'default']: r#372
[#595 '}']: r#372
[#596 'case']: r#373
[#596 'default']: r#373
[#596 '}']: r#373
[#597 '!']: s#71
[#597 '&']: s#74
[#597 '(']: s#116
[#597 '*']: s#73
[#597 '-']: s#70
[#597 'array']: s#84
[#597 'atomic']: s#96
[#597 'bitcast']: s#79
[#597 'bool']: s#89
[#597 'default']: s#615
[#597 'f16']: s#118
[#597 'f32']: s#117
[#597 'false']: s#115
[#597 'i32']: s#119
[#597 'mat2x2']: s#101
[#597 'mat2x3']: s#102
[#597 'mat2x4']: s#103
[#597 'mat3x2']: s#104
[#597 'mat3x3']: s#105
[#597 'mat3x4']: s#106
[#597 'mat4x2']: s#107
[#597 'mat4x3']: s#108
[#597 'mat4x4']: s#109
[#597 'ptr']: s#121
[#597 'sampler']: s#138
[#597 'sampler_comparison']: s#139
[#597 'texture_1d']: s#145
[#597 'texture_2d']: s#146
[#597 'texture_2d_array']: s#147
[#597 'texture_3d']: s#148
[#597 'texture_cube']: s#149
[#597 'texture_cube_array']: s#150
[#597 'texture_depth_2d']: s#140
[#597 'texture_depth_2d_array']: s#141
[#597 'texture_depth_cube']: s#142
[#597 'texture_depth_cube_array']: s#143
[#597 'texture_depth_multisampled_2d']: s#144
[#597 'texture_multisampled_2d']: s#151
[#597 'texture_storage_1d']: s#152
[#597 'texture_storage_2d']: s#153
[#597 'texture_storage_2d_array']: s#154
[#597 'texture_storage_3d']: s#155
[#597 'true']: s#114
[#597 'u32']: s#120
[#597 'vec2']: s#98
[#597 'vec3']: s#99
[#597 'vec4']: s#100
[#597 '~']: s#72
[#597 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#597 /0[fh]/]: s#130
[#597 /0[iu]?/]: s#127
[#597 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#597 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#597 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#597 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#597 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#597 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#597 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#597 /[1-9][0-9]*[fh]/]: s#131
[#597 /[1-9][0-9]*[iu]?/]: s#128
[#598 ':']: s#180
[#599 '&']: r#374
[#599 '(']: r#374
[#599 '*']: r#374
[#599 ';']: r#374
[#599 '_']: r#374
[#599 'break']: r#374
[#599 'const']: r#374
[#599 'continue']: r#374
[#599 'continuing']: r#374
[#599 'discard']: r#374
[#599 'for']: r#374
[#599 'if']: r#374
[#599 'let']: r#374
[#599 'loop']: r#374
[#599 'return']: r#374
[#599 'static_assert']: r#374
[#599 'switch']: r#374
[#599 'var']: r#374
[#599 'while']: r#374
[#599 '{']: r#374
[#599 '}']: r#374
[#599 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#374
[#600 '{']: s#186
[#601 '(']: r#375
[#601 ')']: r#375
[#601 ',']: r#375
[#601 ';']: r#375
[#601 '=']: r#375
[#601 '>']: r#375
[#601 '{']: r#375
[#601 '}']: r#375
[#602 '>']: s#238
[#603 'read']: s#534
[#603 'read_write']: s#536
[#603 'write']: s#535
[#604 '@']: r#376
[#604 'array']: r#376
[#604 'atomic']: r#376
[#604 'bool']: r#376
[#604 'f16']: r#376
[#604 'f32']: r#376
[#604 'fn']: r#376
[#604 'i32']: r#376
[#604 'mat2x2']: r#376
[#604 'mat2x3']: r#376
[#604 'mat2x4']: r#376
[#604 'mat3x2']: r#376
[#604 'mat3x3']: r#376
[#604 'mat3x4']: r#376
[#604 'mat4x2']: r#376
[#604 'mat4x3']: r#376
[#604 'mat4x4']: r#376
[#604 'override']: r#376
[#604 'ptr']: r#376
[#604 'sampler']: r#376
[#604 'sampler_comparison']: r#376
[#604 'texture_1d']: r#376
[#604 'texture_2d']: r#376
[#604 'texture_2d_array']: r#376
[#604 'texture_3d']: r#376
[#604 'texture_cube']: r#376
[#604 'texture_cube_array']: r#376
[#604 'texture_depth_2d']: r#376
[#604 'texture_depth_2d_array']: r#376
[#604 'texture_depth_cube']: r#376
[#604 'texture_depth_cube_array']: r#376
[#604 'texture_depth_multisampled_2d']: r#376
[#604 'texture_multisampled_2d']: r#376
[#604 'texture_storage_1d']: r#376
[#604 'texture_storage_2d']: r#376
[#604 'texture_storage_2d_array']: r#376
[#604 'texture_storage_3d']: r#376
[#604 'u32']: r#376
[#604 'var']: r#376
[#604 'vec2']: r#376
[#604 'vec3']: r#376
[#604 'vec4']: r#376
[#605 '!']: s#71
[#605 '&']: s#74
[#605 '(']: s#116
[#605 ')']: r#312
[#605 '*']: s#73
[#605 '-']: s#70
[#605 'array']: s#84
[#605 'atomic']: s#96
[#605 'bitcast']: s#79
[#605 'bool']: s#89
[#605 'f16']: s#118
[#605 'f32']: s#117
[#605 'false']: s#115
[#605 'i32']: s#119
[#605 'mat2x2']: s#101
[#605 'mat2x3']: s#102
[#605 'mat2x4']: s#103
[#605 'mat3x2']: s#104
[#605 'mat3x3']: s#105
[#605 'mat3x4']: s#106
[#605 'mat4x2']: s#107
[#605 'mat4x3']: s#108
[#605 'mat4x4']: s#109
[#605 'ptr']: s#121
[#605 'sampler']: s#138
[#605 'sampler_comparison']: s#139
[#605 'texture_1d']: s#145
[#605 'texture_2d']: s#146
[#605 'texture_2d_array']: s#147
[#605 'texture_3d']: s#148
[#605 'texture_cube']: s#149
[#605 'texture_cube_array']: s#150
[#605 'texture_depth_2d']: s#140
[#605 'texture_depth_2d_array']: s#141
[#605 'texture_depth_cube']: s#142
[#605 'texture_depth_cube_array']: s#143
[#605 'texture_depth_multisampled_2d']: s#144
[#605 'texture_multisampled_2d']: s#151
[#605 'texture_storage_1d']: s#152
[#605 'texture_storage_2d']: s#153
[#605 'texture_storage_2d_array']: s#154
[#605 'texture_storage_3d']: s#155
[#605 'true']: s#114
[#605 'u32']: s#120
[#605 'vec2']: s#98
[#605 'vec3']: s#99
[#605 'vec4']: s#100
[#605 '~']: s#72
[#605 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#605 /0[fh]/]: s#130
[#605 /0[iu]?/]: s#127
[#605 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#605 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#605 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#605 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#605 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#605 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#605 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#605 /[1-9][0-9]*[fh]/]: s#131
[#605 /[1-9][0-9]*[iu]?/]: s#128
[#606 '@']: r#377
[#606 'array']: r#377
[#606 'atomic']: r#377
[#606 'bool']: r#377
[#606 'f16']: r#377
[#606 'f32']: r#377
[#606 'fn']: r#377
[#606 'i32']: r#377
[#606 'mat2x2']: r#377
[#606 'mat2x3']: r#377
[#606 'mat2x4']: r#377
[#606 'mat3x2']: r#377
[#606 'mat3x3']: r#377
[#606 'mat3x4']: r#377
[#606 'mat4x2']: r#377
[#606 'mat4x3']: r#377
[#606 'mat4x4']: r#377
[#606 'override']: r#377
[#606 'ptr']: r#377
[#606 'sampler']: r#377
[#606 'sampler_comparison']: r#377
[#606 'texture_1d']: r#377
[#606 'texture_2d']: r#377
[#606 'texture_2d_array']: r#377
[#606 'texture_3d']: r#377
[#606 'texture_cube']: r#377
[#606 'texture_cube_array']: r#377
[#606 'texture_depth_2d']: r#377
[#606 'texture_depth_2d_array']: r#377
[#606 'texture_depth_cube']: r#377
[#606 'texture_depth_cube_array']: r#377
[#606 'texture_depth_multisampled_2d']: r#377
[#606 'texture_multisampled_2d']: r#377
[#606 'texture_storage_1d']: r#377
[#606 'texture_storage_2d']: r#377
[#606 'texture_storage_2d_array']: r#377
[#606 'texture_storage_3d']: r#377
[#606 'u32']: r#377
[#606 'var']: r#377
[#606 'vec2']: r#377
[#606 'vec3']: r#377
[#606 'vec4']: r#377
[#607 ',']: s#406
[#608 '>']: r#378
[#609 '(']: r#379
[#609 ')']: r#379
[#609 ',']: r#379
[#609 ';']: r#379
[#609 '=']: r#379
[#609 '>']: r#379
[#609 '{']: r#379
[#609 '}']: r#379
[#610 '&']: r#380
[#610 '(']: r#380
[#610 '*']: r#380
[#610 ';']: r#380
[#610 '_']: r#380
[#610 'break']: r#380
[#610 'const']: r#380
[#610 'continue']: r#380
[#610 'continuing']: r#380
[#610 'discard']: r#380
[#610 'else']: r#380
[#610 'for']: r#380
[#610 'if']: r#380
[#610 'let']: r#380
[#610 'loop']: r#380
[#610 'return']: r#380
[#610 'static_assert']: r#380
[#610 'switch']: r#380
[#610 'var']: r#380
[#610 'while']: r#380
[#610 '{']: r#380
[#610 '}']: r#380
[#610 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#380
[#611 '{']: s#186
[#612 '{']: r#381
[#613 ':']: s#180
[#614 ',']: s#406
[#615 ',']: r#382
[#615 ':']: r#382
[#615 '{']: r#382
[#616 ',']: r#383
[#616 ':']: r#383
[#616 '{']: r#383
[#617 '}']: r#384
[#618 '&']: r#385
[#618 '(']: r#385
[#618 '*']: r#385
[#618 ';']: r#385
[#618 '_']: r#385
[#618 'break']: r#385
[#618 'const']: r#385
[#618 'continue']: r#385
[#618 'continuing']: r#385
[#618 'discard']: r#385
[#618 'for']: r#385
[#618 'if']: r#385
[#618 'let']: r#385
[#618 'loop']: r#385
[#618 'return']: r#385
[#618 'static_assert']: r#385
[#618 'switch']: r#385
[#618 'var']: r#385
[#618 'while']: r#385
[#618 '{']: r#385
[#618 '}']: r#385
[#618 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#385
[#619 '}']: r#386
[#620 '&']: s#74
[#620 '(']: s#116
[#620 '*']: s#73
[#620 ';']: s#20
[#620 '_']: s#389
[#620 'break']: s#378
[#620 'const']: s#377
[#620 'continue']: s#379
[#620 'discard']: s#364
[#620 'for']: s#372
[#620 'if']: s#383
[#620 'let']: s#376
[#620 'loop']: s#371
[#620 'return']: s#368
[#620 'static_assert']: s#27
[#620 'switch']: s#370
[#620 'var']: s#164
[#620 'while']: s#373
[#620 '{']: s#186
[#620 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#621 '&']: r#387
[#621 '(']: r#387
[#621 '*']: r#387
[#621 ';']: r#387
[#621 '_']: r#387
[#621 'break']: r#387
[#621 'const']: r#387
[#621 'continue']: r#387
[#621 'continuing']: r#387
[#621 'discard']: r#387
[#621 'for']: r#387
[#621 'if']: r#387
[#621 'let']: r#387
[#621 'loop']: r#387
[#621 'return']: r#387
[#621 'static_assert']: r#387
[#621 'switch']: r#387
[#621 'var']: r#387
[#621 'while']: r#387
[#621 '{']: r#387
[#621 '}']: r#387
[#621 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#387
[#622 '&']: r#388
[#622 '(']: r#388
[#622 '*']: r#388
[#622 ';']: r#388
[#622 '_']: r#388
[#622 'break']: r#388
[#622 'const']: r#388
[#622 'continue']: r#388
[#622 'continuing']: r#388
[#622 'discard']: r#388
[#622 'for']: r#388
[#622 'if']: r#388
[#622 'let']: r#388
[#622 'loop']: r#388
[#622 'return']: r#388
[#622 'static_assert']: r#388
[#622 'switch']: r#388
[#622 'var']: r#388
[#622 'while']: r#388
[#622 '{']: r#388
[#622 '}']: r#388
[#622 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#388
[#623 ';']: s#20
[#624 ';']: r#389
[#625 ')']: r#390
[#625 ',']: r#390
[#626 'array']: s#317
[#626 'atomic']: s#96
[#626 'bool']: s#89
[#626 'f16']: s#118
[#626 'f32']: s#117
[#626 'i32']: s#119
[#626 'mat2x2']: s#101
[#626 'mat2x3']: s#102
[#626 'mat2x4']: s#103
[#626 'mat3x2']: s#104
[#626 'mat3x3']: s#105
[#626 'mat3x4']: s#106
[#626 'mat4x2']: s#107
[#626 'mat4x3']: s#108
[#626 'mat4x4']: s#109
[#626 'ptr']: s#121
[#626 'sampler']: s#138
[#626 'sampler_comparison']: s#139
[#626 'texture_1d']: s#145
[#626 'texture_2d']: s#146
[#626 'texture_2d_array']: s#147
[#626 'texture_3d']: s#148
[#626 'texture_cube']: s#149
[#626 'texture_cube_array']: s#150
[#626 'texture_depth_2d']: s#140
[#626 'texture_depth_2d_array']: s#141
[#626 'texture_depth_cube']: s#142
[#626 'texture_depth_cube_array']: s#143
[#626 'texture_depth_multisampled_2d']: s#144
[#626 'texture_multisampled_2d']: s#151
[#626 'texture_storage_1d']: s#152
[#626 'texture_storage_2d']: s#153
[#626 'texture_storage_2d_array']: s#154
[#626 'texture_storage_3d']: s#155
[#626 'u32']: s#120
[#626 'vec2']: s#98
[#626 'vec3']: s#99
[#626 'vec4']: s#100
[#626 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#627 'array']: r#391
[#627 'atomic']: r#391
[#627 'bool']: r#391
[#627 'f16']: r#391
[#627 'f32']: r#391
[#627 'i32']: r#391
[#627 'mat2x2']: r#391
[#627 'mat2x3']: r#391
[#627 'mat2x4']: r#391
[#627 'mat3x2']: r#391
[#627 'mat3x3']: r#391
[#627 'mat3x4']: r#391
[#627 'mat4x2']: r#391
[#627 'mat4x3']: r#391
[#627 'mat4x4']: r#391
[#627 'ptr']: r#391
[#627 'sampler']: r#391
[#627 'sampler_comparison']: r#391
[#627 'texture_1d']: r#391
[#627 'texture_2d']: r#391
[#627 'texture_2d_array']: r#391
[#627 'texture_3d']: r#391
[#627 'texture_cube']: r#391
[#627 'texture_cube_array']: r#391
[#627 'texture_depth_2d']: r#391
[#627 'texture_depth_2d_array']: r#391
[#627 'texture_depth_cube']: r#391
[#627 'texture_depth_cube_array']: r#391
[#627 'texture_depth_multisampled_2d']: r#391
[#627 'texture_multisampled_2d']: r#391
[#627 'texture_storage_1d']: r#391
[#627 'texture_storage_2d']: r#391
[#627 'texture_storage_2d_array']: r#391
[#627 'texture_storage_3d']: r#391
[#627 'u32']: r#391
[#627 'vec2']: r#391
[#627 'vec3']: r#391
[#627 'vec4']: r#391
[#628 '@']: s#33
[#629 'array']: r#392
[#629 'atomic']: r#392
[#629 'bool']: r#392
[#629 'f16']: r#392
[#629 'f32']: r#392
[#629 'i32']: r#392
[#629 'mat2x2']: r#392
[#629 'mat2x3']: r#392
[#629 'mat2x4']: r#392
[#629 'mat3x2']: r#392
[#629 'mat3x3']: r#392
[#629 'mat3x4']: r#392
[#629 'mat4x2']: r#392
[#629 'mat4x3']: r#392
[#629 'mat4x4']: r#392
[#629 'ptr']: r#392
[#629 'sampler']: r#392
[#629 'sampler_comparison']: r#392
[#629 'texture_1d']: r#392
[#629 'texture_2d']: r#392
[#629 'texture_2d_array']: r#392
[#629 'texture_3d']: r#392
[#629 'texture_cube']: r#392
[#629 'texture_cube_array']: r#392
[#629 'texture_depth_2d']: r#392
[#629 'texture_depth_2d_array']: r#392
[#629 'texture_depth_cube']: r#392
[#629 'texture_depth_cube_array']: r#392
[#629 'texture_depth_multisampled_2d']: r#392
[#629 'texture_multisampled_2d']: r#392
[#629 'texture_storage_1d']: r#392
[#629 'texture_storage_2d']: r#392
[#629 'texture_storage_2d_array']: r#392
[#629 'texture_storage_3d']: r#392
[#629 'u32']: r#392
[#629 'vec2']: r#392
[#629 'vec3']: r#392
[#629 'vec4']: r#392
[#630 '{']: r#393
[#631 '&']: s#74
[#631 '(']: s#116
[#631 '*']: s#73
[#631 '_']: s#389
[#631 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#632 'break']: s#651
[#633 'break']: r#394
[#633 '}']: r#394
[#634 '&']: s#74
[#634 '(']: s#116
[#634 '*']: s#73
[#634 ';']: s#20
[#634 '_']: s#389
[#634 'break']: s#378
[#634 'const']: s#377
[#634 'continue']: s#379
[#634 'discard']: s#364
[#634 'for']: s#372
[#634 'if']: s#383
[#634 'let']: s#376
[#634 'loop']: s#371
[#634 'return']: s#368
[#634 'static_assert']: s#27
[#634 'switch']: s#370
[#634 'var']: s#164
[#634 'while']: s#373
[#634 '{']: s#186
[#634 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#635 ',']: s#406
[#636 ',']: r#395
[#636 ':']: r#395
[#636 '{']: r#395
[#637 ',']: s#406
[#638 '!']: s#71
[#638 '&']: s#74
[#638 '(']: s#116
[#638 '*']: s#73
[#638 '-']: s#70
[#638 'array']: s#84
[#638 'atomic']: s#96
[#638 'bitcast']: s#79
[#638 'bool']: s#89
[#638 'default']: s#615
[#638 'f16']: s#118
[#638 'f32']: s#117
[#638 'false']: s#115
[#638 'i32']: s#119
[#638 'mat2x2']: s#101
[#638 'mat2x3']: s#102
[#638 'mat2x4']: s#103
[#638 'mat3x2']: s#104
[#638 'mat3x3']: s#105
[#638 'mat3x4']: s#106
[#638 'mat4x2']: s#107
[#638 'mat4x3']: s#108
[#638 'mat4x4']: s#109
[#638 'ptr']: s#121
[#638 'sampler']: s#138
[#638 'sampler_comparison']: s#139
[#638 'texture_1d']: s#145
[#638 'texture_2d']: s#146
[#638 'texture_2d_array']: s#147
[#638 'texture_3d']: s#148
[#638 'texture_cube']: s#149
[#638 'texture_cube_array']: s#150
[#638 'texture_depth_2d']: s#140
[#638 'texture_depth_2d_array']: s#141
[#638 'texture_depth_cube']: s#142
[#638 'texture_depth_cube_array']: s#143
[#638 'texture_depth_multisampled_2d']: s#144
[#638 'texture_multisampled_2d']: s#151
[#638 'texture_storage_1d']: s#152
[#638 'texture_storage_2d']: s#153
[#638 'texture_storage_2d_array']: s#154
[#638 'texture_storage_3d']: s#155
[#638 'true']: s#114
[#638 'u32']: s#120
[#638 'vec2']: s#98
[#638 'vec3']: s#99
[#638 'vec4']: s#100
[#638 '~']: s#72
[#638 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#638 /0[fh]/]: s#130
[#638 /0[iu]?/]: s#127
[#638 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#638 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#638 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#638 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#638 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#638 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#638 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#638 /[1-9][0-9]*[fh]/]: s#131
[#638 /[1-9][0-9]*[iu]?/]: s#128
[#639 '{']: s#186
[#640 '{']: r#396
[#641 'case']: r#397
[#641 'default']: r#397
[#641 '}']: r#397
[#642 '@']: r#398
[#642 'array']: r#398
[#642 'atomic']: r#398
[#642 'bool']: r#398
[#642 'f16']: r#398
[#642 'f32']: r#398
[#642 'fn']: r#398
[#642 'i32']: r#398
[#642 'mat2x2']: r#398
[#642 'mat2x3']: r#398
[#642 'mat2x4']: r#398
[#642 'mat3x2']: r#398
[#642 'mat3x3']: r#398
[#642 'mat3x4']: r#398
[#642 'mat4x2']: r#398
[#642 'mat4x3']: r#398
[#642 'mat4x4']: r#398
[#642 'override']: r#398
[#642 'ptr']: r#398
[#642 'sampler']: r#398
[#642 'sampler_comparison']: r#398
[#642 'texture_1d']: r#398
[#642 'texture_2d']: r#398
[#642 'texture_2d_array']: r#398
[#642 'texture_3d']: r#398
[#642 'texture_cube']: r#398
[#642 'texture_cube_array']: r#398
[#642 'texture_depth_2d']: r#398
[#642 'texture_depth_2d_array']: r#398
[#642 'texture_depth_cube']: r#398
[#642 'texture_depth_cube_array']: r#398
[#642 'texture_depth_multisampled_2d']: r#398
[#642 'texture_multisampled_2d']: r#398
[#642 'texture_storage_1d']: r#398
[#642 'texture_storage_2d']: r#398
[#642 'texture_storage_2d_array']: r#398
[#642 'texture_storage_3d']: r#398
[#642 'u32']: r#398
[#642 'var']: r#398
[#642 'vec2']: r#398
[#642 'vec3']: r#398
[#642 'vec4']: r#398
[#643 'case']: r#399
[#643 'default']: r#399
[#643 '}']: r#399
[#644 ',']: r#400
[#644 ':']: r#400
[#644 '{']: r#400
[#645 ',']: r#401
[#645 ':']: r#401
[#645 '{']: r#401
[#646 ':']: r#402
[#646 '{']: r#402
[#647 ':']: r#403
[#647 '{']: r#403
[#648 'break']: r#404
[#648 '}']: r#404
[#649 '}']: s#479
[#650 '}']: r#405
[#651 'if']: s#656
[#652 ')']: r#406
[#653 ')']: r#407
[#654 ')']: r#408
[#655 ')']: r#409
[#656 '!']: s#71
[#656 '&']: s#74
[#656 '(']: s#116
[#656 '*']: s#73
[#656 '-']: s#70
[#656 'array']: s#84
[#656 'atomic']: s#96
[#656 'bitcast']: s#79
[#656 'bool']: s#89
[#656 'f16']: s#118
[#656 'f32']: s#117
[#656 'false']: s#115
[#656 'i32']: s#119
[#656 'mat2x2']: s#101
[#656 'mat2x3']: s#102
[#656 'mat2x4']: s#103
[#656 'mat3x2']: s#104
[#656 'mat3x3']: s#105
[#656 'mat3x4']: s#106
[#656 'mat4x2']: s#107
[#656 'mat4x3']: s#108
[#656 'mat4x4']: s#109
[#656 'ptr']: s#121
[#656 'sampler']: s#138
[#656 'sampler_comparison']: s#139
[#656 'texture_1d']: s#145
[#656 'texture_2d']: s#146
[#656 'texture_2d_array']: s#147
[#656 'texture_3d']: s#148
[#656 'texture_cube']: s#149
[#656 'texture_cube_array']: s#150
[#656 'texture_depth_2d']: s#140
[#656 'texture_depth_2d_array']: s#141
[#656 'texture_depth_cube']: s#142
[#656 'texture_depth_cube_array']: s#143
[#656 'texture_depth_multisampled_2d']: s#144
[#656 'texture_multisampled_2d']: s#151
[#656 'texture_storage_1d']: s#152
[#656 'texture_storage_2d']: s#153
[#656 'texture_storage_2d_array']: s#154
[#656 'texture_storage_3d']: s#155
[#656 'true']: s#114
[#656 'u32']: s#120
[#656 'vec2']: s#98
[#656 'vec3']: s#99
[#656 'vec4']: s#100
[#656 '~']: s#72
[#656 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#80
[#656 /0[fh]/]: s#130
[#656 /0[iu]?/]: s#127
[#656 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#656 /0[xX][0-9a-fA-F]+[iu]?/]: s#129
[#656 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#137
[#656 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#136
[#656 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#656 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#134
[#656 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#133
[#656 /[1-9][0-9]*[fh]/]: s#131
[#656 /[1-9][0-9]*[iu]?/]: s#128
[#657 '}']: r#410
[#658 ';']: s#20
[#659 '}']: r#411

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #32
[#2 attribute]: #31
[#2 function_decl]: #18
[#2 function_decl/0.0]: #26
[#2 function_decl/0.0/0]: #30
[#2 global_constant_decl]: #15
[#2 global_constant_decl/1.0]: #23
[#2 global_constant_decl/1.0/0]: #29
[#2 global_decl]: #12
[#2 global_variable_decl]: #14
[#2 global_variable_decl/0.0]: #21
[#2 global_variable_decl/0.0/0]: #28
[#2 semicolon]: #13
[#2 static_assert_statement]: #19
[#2 struct_decl]: #17
[#2 translation_unit/0.1]: #10
[#2 translation_unit/0.1/0]: #11
[#2 type_alias_decl]: #16
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #9
[#5 extension_name]: #6
[#6 semicolon]: #170
[#12 attr]: #32
[#12 attribute]: #31
[#12 function_decl]: #18
[#12 function_decl/0.0]: #26
[#12 function_decl/0.0/0]: #30
[#12 global_constant_decl]: #15
[#12 global_constant_decl/1.0]: #23
[#12 global_constant_decl/1.0/0]: #29
[#12 global_decl]: #12
[#12 global_variable_decl]: #14
[#12 global_variable_decl/0.0]: #21
[#12 global_variable_decl/0.0/0]: #28
[#12 semicolon]: #13
[#12 static_assert_statement]: #19
[#12 struct_decl]: #17
[#12 translation_unit/0.1/0]: #169
[#12 type_alias_decl]: #16
[#14 semicolon]: #168
[#15 semicolon]: #167
[#16 semicolon]: #166
[#19 semicolon]: #165
[#21 variable_decl]: #163
[#22 ident]: #162
[#22 optionally_typed_ident]: #161
[#24 ident]: #159
[#25 ident]: #158
[#26 function_header]: #156
[#27 additive_expression]: #60
[#27 and]: #68
[#27 array_type_specifier]: #95
[#27 bang]: #65
[#27 binary_and_expression]: #57
[#27 binary_or_expression]: #58
[#27 binary_xor_expression]: #59
[#27 bitwise_expression]: #55
[#27 bool_literal]: #87
[#27 callable]: #76
[#27 decimal_float_literal]: #112
[#27 decimal_int_literal]: #110
[#27 depth_texture_type]: #123
[#27 expression]: #51
[#27 float16]: #91
[#27 float32]: #90
[#27 float_literal]: #86
[#27 hex_float_literal]: #113
[#27 hex_int_literal]: #111
[#27 ident]: #75
[#27 int32]: #92
[#27 int_literal]: #85
[#27 literal]: #77
[#27 mat_prefix]: #83
[#27 minus]: #64
[#27 multiplicative_expression]: #62
[#27 multisampled_texture_type]: #125
[#27 paren_expression]: #78
[#27 paren_left]: #88
[#27 pointer]: #94
[#27 primary_expression]: #69
[#27 relational_expression]: #52
[#27 sampled_texture_type]: #124
[#27 sampler_type]: #122
[#27 shift_expression]: #56
[#27 short_circuit_and_expression]: #54
[#27 short_circuit_or_expression]: #53
[#27 singular_expression]: #63
[#27 star]: #67
[#27 storage_texture_type]: #126
[#27 texture_and_sampler_types]: #97
[#27 tilde]: #66
[#27 type_specifier_without_ident]: #81
[#27 uint32]: #93
[#27 unary_expression]: #61
[#27 vec_prefix]: #82
[#31 attr]: #32
[#31 attribute]: #31
[#31 function_decl/0.0/0]: #50
[#31 global_constant_decl/1.0/0]: #49
[#31 global_variable_decl/0.0/0]: #48
[#34 paren_left]: #255
[#35 paren_left]: #254
[#36 paren_left]: #253
[#38 paren_left]: #252
[#39 paren_left]: #251
[#40 paren_left]: #250
[#42 paren_left]: #249
[#43 paren_left]: #248
[#44 paren_left]: #247
[#53 or_or]: #245
[#54 and_and]: #243
[#56 equal_equal]: #236
[#56 greater_than]: #233
[#56 greater_than_equal]: #235
[#56 less_than]: #232
[#56 less_than_equal]: #234
[#56 not_equal]: #237
[#57 and]: #231
[#58 or]: #229
[#59 xor]: #227
[#60 additive_operator]: #223
[#60 minus]: #225
[#60 plus]: #224
[#61 shift_left]: #219
[#61 shift_right]: #220
[#62 forward_slash]: #215
[#62 modulo]: #216
[#62 multiplicative_operator]: #213
[#62 star]: #214
[#64 and]: #68
[#64 array_type_specifier]: #95
[#64 bang]: #65
[#64 bool_literal]: #87
[#64 callable]: #76
[#64 decimal_float_literal]: #112
[#64 decimal_int_literal]: #110
[#64 depth_texture_type]: #123
[#64 float16]: #91
[#64 float32]: #90
[#64 float_literal]: #86
[#64 hex_float_literal]: #113
[#64 hex_int_literal]: #111
[#64 ident]: #75
[#64 int32]: #92
[#64 int_literal]: #85
[#64 literal]: #77
[#64 mat_prefix]: #83
[#64 minus]: #64
[#64 multisampled_texture_type]: #125
[#64 paren_expression]: #78
[#64 paren_left]: #88
[#64 pointer]: #94
[#64 primary_expression]: #69
[#64 sampled_texture_type]: #124
[#64 sampler_type]: #122
[#64 singular_expression]: #63
[#64 star]: #67
[#64 storage_texture_type]: #126
[#64 texture_and_sampler_types]: #97
[#64 tilde]: #66
[#64 type_specifier_without_ident]: #81
[#64 uint32]: #93
[#64 unary_expression]: #212
[#64 vec_prefix]: #82
[#65 and]: #68
[#65 array_type_specifier]: #95
[#65 bang]: #65
[#65 bool_literal]: #87
[#65 callable]: #76
[#65 decimal_float_literal]: #112
[#65 decimal_int_literal]: #110
[#65 depth_texture_type]: #123
[#65 float16]: #91
[#65 float32]: #90
[#65 float_literal]: #86
[#65 hex_float_literal]: #113
[#65 hex_int_literal]: #111
[#65 ident]: #75
[#65 int32]: #92
[#65 int_literal]: #85
[#65 literal]: #77
[#65 mat_prefix]: #83
[#65 minus]: #64
[#65 multisampled_texture_type]: #125
[#65 paren_expression]: #78
[#65 paren_left]: #88
[#65 pointer]: #94
[#65 primary_expression]: #69
[#65 sampled_texture_type]: #124
[#65 sampler_type]: #122
[#65 singular_expression]: #63
[#65 star]: #67
[#65 storage_texture_type]: #126
[#65 texture_and_sampler_types]: #97
[#65 tilde]: #66
[#65 type_specifier_without_ident]: #81
[#65 uint32]: #93
[#65 unary_expression]: #211
[#65 vec_prefix]: #82
[#66 and]: #68
[#66 array_type_specifier]: #95
[#66 bang]: #65
[#66 bool_literal]: #87
[#66 callable]: #76
[#66 decimal_float_literal]: #112
[#66 decimal_int_literal]: #110
[#66 depth_texture_type]: #123
[#66 float16]: #91
[#66 float32]: #90
[#66 float_literal]: #86
[#66 hex_float_literal]: #113
[#66 hex_int_literal]: #111
[#66 ident]: #75
[#66 int32]: #92
[#66 int_literal]: #85
[#66 literal]: #77
[#66 mat_prefix]: #83
[#66 minus]: #64
[#66 multisampled_texture_type]: #125
[#66 paren_expression]: #78
[#66 paren_left]: #88
[#66 pointer]: #94
[#66 primary_expression]: #69
[#66 sampled_texture_type]: #124
[#66 sampler_type]: #122
[#66 singular_expression]: #63
[#66 star]: #67
[#66 storage_texture_type]: #126
[#66 texture_and_sampler_types]: #97
[#66 tilde]: #66
[#66 type_specifier_without_ident]: #81
[#66 uint32]: #93
[#66 unary_expression]: #210
[#66 vec_prefix]: #82
[#67 and]: #68
[#67 array_type_specifier]: #95
[#67 bang]: #65
[#67 bool_literal]: #87
[#67 callable]: #76
[#67 decimal_float_literal]: #112
[#67 decimal_int_literal]: #110
[#67 depth_texture_type]: #123
[#67 float16]: #91
[#67 float32]: #90
[#67 float_literal]: #86
[#67 hex_float_literal]: #113
[#67 hex_int_literal]: #111
[#67 ident]: #75
[#67 int32]: #92
[#67 int_literal]: #85
[#67 literal]: #77
[#67 mat_prefix]: #83
[#67 minus]: #64
[#67 multisampled_texture_type]: #125
[#67 paren_expression]: #78
[#67 paren_left]: #88
[#67 pointer]: #94
[#67 primary_expression]: #69
[#67 sampled_texture_type]: #124
[#67 sampler_type]: #122
[#67 singular_expression]: #63
[#67 star]: #67
[#67 storage_texture_type]: #126
[#67 texture_and_sampler_types]: #97
[#67 tilde]: #66
[#67 type_specifier_without_ident]: #81
[#67 uint32]: #93
[#67 unary_expression]: #209
[#67 vec_prefix]: #82
[#68 and]: #68
[#68 array_type_specifier]: #95
[#68 bang]: #65
[#68 bool_literal]: #87
[#68 callable]: #76
[#68 decimal_float_literal]: #112
[#68 decimal_int_literal]: #110
[#68 depth_texture_type]: #123
[#68 float16]: #91
[#68 float32]: #90
[#68 float_literal]: #86
[#68 hex_float_literal]: #113
[#68 hex_int_literal]: #111
[#68 ident]: #75
[#68 int32]: #92
[#68 int_literal]: #85
[#68 literal]: #77
[#68 mat_prefix]: #83
[#68 minus]: #64
[#68 multisampled_texture_type]: #125
[#68 paren_expression]: #78
[#68 paren_left]: #88
[#68 pointer]: #94
[#68 primary_expression]: #69
[#68 sampled_texture_type]: #124
[#68 sampler_type]: #122
[#68 singular_expression]: #63
[#68 star]: #67
[#68 storage_texture_type]: #126
[#68 texture_and_sampler_types]: #97
[#68 tilde]: #66
[#68 type_specifier_without_ident]: #81
[#68 uint32]: #93
[#68 unary_expression]: #208
[#68 vec_prefix]: #82
[#69 bracket_left]: #204
[#69 component_or_swizzle_specifier]: #203
[#69 period]: #205
[#69 singular_expression/0.1]: #202
[#76 argument_expression_list]: #200
[#76 paren_left]: #201
[#79 less_than]: #199
[#82 less_than]: #198
[#83 less_than]: #197
[#84 less_than]: #196
[#88 additive_expression]: #60
[#88 and]: #68
[#88 array_type_specifier]: #95
[#88 bang]: #65
[#88 binary_and_expression]: #57
[#88 binary_or_expression]: #58
[#88 binary_xor_expression]: #59
[#88 bitwise_expression]: #55
[#88 bool_literal]: #87
[#88 callable]: #76
[#88 decimal_float_literal]: #112
[#88 decimal_int_literal]: #110
[#88 depth_texture_type]: #123
[#88 expression]: #195
[#88 float16]: #91
[#88 float32]: #90
[#88 float_literal]: #86
[#88 hex_float_literal]: #113
[#88 hex_int_literal]: #111
[#88 ident]: #75
[#88 int32]: #92
[#88 int_literal]: #85
[#88 literal]: #77
[#88 mat_prefix]: #83
[#88 minus]: #64
[#88 multiplicative_expression]: #62
[#88 multisampled_texture_type]: #125
[#88 paren_expression]: #78
[#88 paren_left]: #88
[#88 pointer]: #94
[#88 primary_expression]: #69
[#88 relational_expression]: #52
[#88 sampled_texture_type]: #124
[#88 sampler_type]: #122
[#88 shift_expression]: #56
[#88 short_circuit_and_expression]: #54
[#88 short_circuit_or_expression]: #53
[#88 singular_expression]: #63
[#88 star]: #67
[#88 storage_texture_type]: #126
[#88 texture_and_sampler_types]: #97
[#88 tilde]: #66
[#88 type_specifier_without_ident]: #81
[#88 uint32]: #93
[#88 unary_expression]: #61
[#88 vec_prefix]: #82
[#94 less_than]: #194
[#96 less_than]: #193
[#124 less_than]: #192
[#125 less_than]: #191
[#126 less_than]: #190
[#156 brace_left]: #189
[#156 compound_statement]: #188
[#157 ident]: #187
[#158 brace_left]: #185
[#158 struct_body_decl]: #184
[#159 equal]: #183
[#160 ident]: #162
[#160 optionally_typed_ident]: #182
[#161 equal]: #181
[#162 colon]: #179
[#162 optionally_typed_ident/0.1]: #178
[#163 equal]: #176
[#163 global_variable_decl/0.2]: #175
[#164 less_than]: #173
[#164 variable_decl/0.1]: #171
[#164 variable_qualifier]: #172
[#171 ident]: #162
[#171 optionally_typed_ident]: #403
[#173 address_space]: #402
[#176 additive_expression]: #60
[#176 and]: #68
[#176 array_type_specifier]: #95
[#176 bang]: #65
[#176 binary_and_expression]: #57
[#176 binary_or_expression]: #58
[#176 binary_xor_expression]: #59
[#176 bitwise_expression]: #55
[#176 bool_literal]: #87
[#176 callable]: #76
[#176 decimal_float_literal]: #112
[#176 decimal_int_literal]: #110
[#176 depth_texture_type]: #123
[#176 expression]: #401
[#176 float16]: #91
[#176 float32]: #90
[#176 float_literal]: #86
[#176 hex_float_literal]: #113
[#176 hex_int_literal]: #111
[#176 ident]: #75
[#176 int32]: #92
[#176 int_literal]: #85
[#176 literal]: #77
[#176 mat_prefix]: #83
[#176 minus]: #64
[#176 multiplicative_expression]: #62
[#176 multisampled_texture_type]: #125
[#176 paren_expression]: #78
[#176 paren_left]: #88
[#176 pointer]: #94
[#176 primary_expression]: #69
[#176 relational_expression]: #52
[#176 sampled_texture_type]: #124
[#176 sampler_type]: #122
[#176 shift_expression]: #56
[#176 short_circuit_and_expression]: #54
[#176 short_circuit_or_expression]: #53
[#176 singular_expression]: #63
[#176 star]: #67
[#176 storage_texture_type]: #126
[#176 texture_and_sampler_types]: #97
[#176 tilde]: #66
[#176 type_specifier_without_ident]: #81
[#176 uint32]: #93
[#176 unary_expression]: #61
[#176 vec_prefix]: #82
[#179 array_type_specifier]: #95
[#179 depth_texture_type]: #123
[#179 float16]: #91
[#179 float32]: #90
[#179 ident]: #313
[#179 int32]: #92
[#179 mat_prefix]: #316
[#179 multisampled_texture_type]: #125
[#179 pointer]: #94
[#179 sampled_texture_type]: #124
[#179 sampler_type]: #122
[#179 storage_texture_type]: #126
[#179 texture_and_sampler_types]: #97
[#179 type_specifier]: #400
[#179 type_specifier_without_ident]: #314
[#179 uint32]: #93
[#179 vec_prefix]: #315
[#181 additive_expression]: #60
[#181 and]: #68
[#181 array_type_specifier]: #95
[#181 bang]: #65
[#181 binary_and_expression]: #57
[#181 binary_or_expression]: #58
[#181 binary_xor_expression]: #59
[#181 bitwise_expression]: #55
[#181 bool_literal]: #87
[#181 callable]: #76
[#181 decimal_float_literal]: #112
[#181 decimal_int_literal]: #110
[#181 depth_texture_type]: #123
[#181 expression]: #399
[#181 float16]: #91
[#181 float32]: #90
[#181 float_literal]: #86
[#181 hex_float_literal]: #113
[#181 hex_int_literal]: #111
[#181 ident]: #75
[#181 int32]: #92
[#181 int_literal]: #85
[#181 literal]: #77
[#181 mat_prefix]: #83
[#181 minus]: #64
[#181 multiplicative_expression]: #62
[#181 multisampled_texture_type]: #125
[#181 paren_expression]: #78
[#181 paren_left]: #88
[#181 pointer]: #94
[#181 primary_expression]: #69
[#181 relational_expression]: #52
[#181 sampled_texture_type]: #124
[#181 sampler_type]: #122
[#181 shift_expression]: #56
[#181 short_circuit_and_expression]: #54
[#181 short_circuit_or_expression]: #53
[#181 singular_expression]: #63
[#181 star]: #67
[#181 storage_texture_type]: #126
[#181 texture_and_sampler_types]: #97
[#181 tilde]: #66
[#181 type_specifier_without_ident]: #81
[#181 uint32]: #93
[#181 unary_expression]: #61
[#181 vec_prefix]: #82
[#182 equal]: #398
[#182 global_constant_decl/1.3]: #397
[#183 array_type_specifier]: #95
[#183 depth_texture_type]: #123
[#183 float16]: #91
[#183 float32]: #90
[#183 ident]: #313
[#183 int32]: #92
[#183 mat_prefix]: #316
[#183 multisampled_texture_type]: #125
[#183 pointer]: #94
[#183 sampled_texture_type]: #124
[#183 sampler_type]: #122
[#183 storage_texture_type]: #126
[#183 texture_and_sampler_types]: #97
[#183 type_specifier]: #396
[#183 type_specifier_without_ident]: #314
[#183 uint32]: #93
[#183 vec_prefix]: #315
[#185 attr]: #32
[#185 attribute]: #395
[#185 struct_member]: #392
[#185 struct_member/0.0]: #393
[#185 struct_member/0.0/0]: #394
[#187 paren_left]: #391
[#189 and]: #388
[#189 assignment_statement]: #380
[#189 brace_left]: #189
[#189 break_statement]: #362
[#189 compound_statement]: #366
[#189 compound_statement/0.1]: #350
[#189 compound_statement/0.1/0]: #351
[#189 continue_statement]: #363
[#189 core_lhs_expression]: #386
[#189 decrement_statement]: #382
[#189 for_statement]: #358
[#189 func_call_statement]: #360
[#189 ident]: #374
[#189 if_clause]: #369
[#189 if_statement]: #355
[#189 increment_statement]: #381
[#189 lhs_expression]: #384
[#189 loop_statement]: #357
[#189 paren_left]: #390
[#189 return_statement]: #354
[#189 semicolon]: #353
[#189 star]: #387
[#189 statement]: #352
[#189 static_assert_statement]: #367
[#189 switch_statement]: #356
[#189 underscore]: #385
[#189 variable_decl]: #375
[#189 variable_statement]: #361
[#189 variable_updating_statement]: #365
[#189 while_statement]: #359
[#190 texel_format]: #332
[#191 array_type_specifier]: #95
[#191 depth_texture_type]: #123
[#191 float16]: #91
[#191 float32]: #90
[#191 ident]: #313
[#191 int32]: #92
[#191 mat_prefix]: #316
[#191 multisampled_texture_type]: #125
[#191 pointer]: #94
[#191 sampled_texture_type]: #124
[#191 sampler_type]: #122
[#191 storage_texture_type]: #126
[#191 texture_and_sampler_types]: #97
[#191 type_specifier]: #331
[#191 type_specifier_without_ident]: #314
[#191 uint32]: #93
[#191 vec_prefix]: #315
[#192 array_type_specifier]: #95
[#192 depth_texture_type]: #123
[#192 float16]: #91
[#192 float32]: #90
[#192 ident]: #313
[#192 int32]: #92
[#192 mat_prefix]: #316
[#192 multisampled_texture_type]: #125
[#192 pointer]: #94
[#192 sampled_texture_type]: #124
[#192 sampler_type]: #122
[#192 storage_texture_type]: #126
[#192 texture_and_sampler_types]: #97
[#192 type_specifier]: #330
[#192 type_specifier_without_ident]: #314
[#192 uint32]: #93
[#192 vec_prefix]: #315
[#193 array_type_specifier]: #95
[#193 depth_texture_type]: #123
[#193 float16]: #91
[#193 float32]: #90
[#193 ident]: #313
[#193 int32]: #92
[#193 mat_prefix]: #316
[#193 multisampled_texture_type]: #125
[#193 pointer]: #94
[#193 sampled_texture_type]: #124
[#193 sampler_type]: #122
[#193 storage_texture_type]: #126
[#193 texture_and_sampler_types]: #97
[#193 type_specifier]: #329
[#193 type_specifier_without_ident]: #314
[#193 uint32]: #93
[#193 vec_prefix]: #315
[#194 address_space]: #323
[#195 paren_right]: #321
[#196 array_type_specifier]: #95
[#196 depth_texture_type]: #123
[#196 float16]: #91
[#196 float32]: #90
[#196 ident]: #313
[#196 int32]: #92
[#196 mat_prefix]: #316
[#196 multisampled_texture_type]: #125
[#196 pointer]: #94
[#196 sampled_texture_type]: #124
[#196 sampler_type]: #122
[#196 storage_texture_type]: #126
[#196 texture_and_sampler_types]: #97
[#196 type_specifier]: #320
[#196 type_specifier_without_ident]: #314
[#196 uint32]: #93
[#196 vec_prefix]: #315
[#197 array_type_specifier]: #95
[#197 depth_texture_type]: #123
[#197 float16]: #91
[#197 float32]: #90
[#197 ident]: #313
[#197 int32]: #92
[#197 mat_prefix]: #316
[#197 multisampled_texture_type]: #125
[#197 pointer]: #94
[#197 sampled_texture_type]: #124
[#197 sampler_type]: #122
[#197 storage_texture_type]: #126
[#197 texture_and_sampler_types]: #97
[#197 type_specifier]: #319
[#197 type_specifier_without_ident]: #314
[#197 uint32]: #93
[#197 vec_prefix]: #315
[#198 array_type_specifier]: #95
[#198 depth_texture_type]: #123
[#198 float16]: #91
[#198 float32]: #90
[#198 ident]: #313
[#198 int32]: #92
[#198 mat_prefix]: #316
[#198 multisampled_texture_type]: #125
[#198 pointer]: #94
[#198 sampled_texture_type]: #124
[#198 sampler_type]: #122
[#198 storage_texture_type]: #126
[#198 texture_and_sampler_types]: #97
[#198 type_specifier]: #318
[#198 type_specifier_without_ident]: #314
[#198 uint32]: #93
[#198 vec_prefix]: #315
[#199 array_type_specifier]: #95
[#199 depth_texture_type]: #123
[#199 float16]: #91
[#199 float32]: #90
[#199 ident]: #313
[#199 int32]: #92
[#199 mat_prefix]: #316
[#199 multisampled_texture_type]: #125
[#199 pointer]: #94
[#199 sampled_texture_type]: #124
[#199 sampler_type]: #122
[#199 storage_texture_type]: #126
[#199 texture_and_sampler_types]: #97
[#199 type_specifier]: #312
[#199 type_specifier_without_ident]: #314
[#199 uint32]: #93
[#199 vec_prefix]: #315
[#201 additive_expression]: #60
[#201 and]: #68
[#201 argument_expression_list/0.1]: #309
[#201 array_type_specifier]: #95
[#201 bang]: #65
[#201 binary_and_expression]: #57
[#201 binary_or_expression]: #58
[#201 binary_xor_expression]: #59
[#201 bitwise_expression]: #55
[#201 bool_literal]: #87
[#201 callable]: #76
[#201 decimal_float_literal]: #112
[#201 decimal_int_literal]: #110
[#201 depth_texture_type]: #123
[#201 expression]: #311
[#201 expression_comma_list]: #310
[#201 float16]: #91
[#201 float32]: #90
[#201 float_literal]: #86
[#201 hex_float_literal]: #113
[#201 hex_int_literal]: #111
[#201 ident]: #75
[#201 int32]: #92
[#201 int_literal]: #85
[#201 literal]: #77
[#201 mat_prefix]: #83
[#201 minus]: #64
[#201 multiplicative_expression]: #62
[#201 multisampled_texture_type]: #125
[#201 paren_expression]: #78
[#201 paren_left]: #88
[#201 pointer]: #94
[#201 primary_expression]: #69
[#201 relational_expression]: #52
[#201 sampled_texture_type]: #124
[#201 sampler_type]: #122
[#201 shift_expression]: #56
[#201 short_circuit_and_expression]: #54
[#201 short_circuit_or_expression]: #53
[#201 singular_expression]: #63
[#201 star]: #67
[#201 storage_texture_type]: #126
[#201 texture_and_sampler_types]: #97
[#201 tilde]: #66
[#201 type_specifier_without_ident]: #81
[#201 uint32]: #93
[#201 unary_expression]: #61
[#201 vec_prefix]: #82
[#204 additive_expression]: #60
[#204 and]: #68
[#204 array_type_specifier]: #95
[#204 bang]: #65
[#204 binary_and_expression]: #57
[#204 binary_or_expression]: #58
[#204 binary_xor_expression]: #59
[#204 bitwise_expression]: #55
[#204 bool_literal]: #87
[#204 callable]: #76
[#204 decimal_float_literal]: #112
[#204 decimal_int_literal]: #110
[#204 depth_texture_type]: #123
[#204 expression]: #308
[#204 float16]: #91
[#204 float32]: #90
[#204 float_literal]: #86
[#204 hex_float_literal]: #113
[#204 hex_int_literal]: #111
[#204 ident]: #75
[#204 int32]: #92
[#204 int_literal]: #85
[#204 literal]: #77
[#204 mat_prefix]: #83
[#204 minus]: #64
[#204 multiplicative_expression]: #62
[#204 multisampled_texture_type]: #125
[#204 paren_expression]: #78
[#204 paren_left]: #88
[#204 pointer]: #94
[#204 primary_expression]: #69
[#204 relational_expression]: #52
[#204 sampled_texture_type]: #124
[#204 sampler_type]: #122
[#204 shift_expression]: #56
[#204 short_circuit_and_expression]: #54
[#204 short_circuit_or_expression]: #53
[#204 singular_expression]: #63
[#204 star]: #67
[#204 storage_texture_type]: #126
[#204 texture_and_sampler_types]: #97
[#204 tilde]: #66
[#204 type_specifier_without_ident]: #81
[#204 uint32]: #93
[#204 unary_expression]: #61
[#204 vec_prefix]: #82
[#205 member_ident]: #297
[#205 swizzle_name]: #298
[#213 and]: #68
[#213 array_type_specifier]: #95
[#213 bang]: #65
[#213 bool_literal]: #87
[#213 callable]: #76
[#213 decimal_float_literal]: #112
[#213 decimal_int_literal]: #110
[#213 depth_texture_type]: #123
[#213 float16]: #91
[#213 float32]: #90
[#213 float_literal]: #86
[#213 hex_float_literal]: #113
[#213 hex_int_literal]: #111
[#213 ident]: #75
[#213 int32]: #92
[#213 int_literal]: #85
[#213 literal]: #77
[#213 mat_prefix]: #83
[#213 minus]: #64
[#213 multisampled_texture_type]: #125
[#213 paren_expression]: #78
[#213 paren_left]: #88
[#213 pointer]: #94
[#213 primary_expression]: #69
[#213 sampled_texture_type]: #124
[#213 sampler_type]: #122
[#213 singular_expression]: #63
[#213 star]: #67
[#213 storage_texture_type]: #126
[#213 texture_and_sampler_types]: #97
[#213 tilde]: #66
[#213 type_specifier_without_ident]: #81
[#213 uint32]: #93
[#213 unary_expression]: #296
[#213 vec_prefix]: #82
[#219 and]: #68
[#219 array_type_specifier]: #95
[#219 bang]: #65
[#219 bool_literal]: #87
[#219 callable]: #76
[#219 decimal_float_literal]: #112
[#219 decimal_int_literal]: #110
[#219 depth_texture_type]: #123
[#219 float16]: #91
[#219 float32]: #90
[#219 float_literal]: #86
[#219 hex_float_literal]: #113
[#219 hex_int_literal]: #111
[#219 ident]: #75
[#219 int32]: #92
[#219 int_literal]: #85
[#219 literal]: #77
[#219 mat_prefix]: #83
[#219 minus]: #64
[#219 multisampled_texture_type]: #125
[#219 paren_expression]: #78
[#219 paren_left]: #88
[#219 pointer]: #94
[#219 primary_expression]: #69
[#219 sampled_texture_type]: #124
[#219 sampler_type]: #122
[#219 singular_expression]: #63
[#219 star]: #67
[#219 storage_texture_type]: #126
[#219 texture_and_sampler_types]: #97
[#219 tilde]: #66
[#219 type_specifier_without_ident]: #81
[#219 uint32]: #93
[#219 unary_expression]: #295
[#219 vec_prefix]: #82
[#220 and]: #68
[#220 array_type_specifier]: #95
[#220 bang]: #65
[#220 bool_literal]: #87
[#220 callable]: #76
[#220 decimal_float_literal]: #112
[#220 decimal_int_literal]: #110
[#220 depth_texture_type]: #123
[#220 float16]: #91
[#220 float32]: #90
[#220 float_literal]: #86
[#220 hex_float_literal]: #113
[#220 hex_int_literal]: #111
[#220 ident]: #75
[#220 int32]: #92
[#220 int_literal]: #85
[#220 literal]: #77
[#220 mat_prefix]: #83
[#220 minus]: #64
[#220 multisampled_texture_type]: #125
[#220 paren_expression]: #78
[#220 paren_left]: #88
[#220 pointer]: #94
[#220 primary_expression]: #69
[#220 sampled_texture_type]: #124
[#220 sampler_type]: #122
[#220 singular_expression]: #63
[#220 star]: #67
[#220 storage_texture_type]: #126
[#220 texture_and_sampler_types]: #97
[#220 tilde]: #66
[#220 type_specifier_without_ident]: #81
[#220 uint32]: #93
[#220 unary_expression]: #294
[#220 vec_prefix]: #82
[#223 and]: #68
[#223 array_type_specifier]: #95
[#223 bang]: #65
[#223 bool_literal]: #87
[#223 callable]: #76
[#223 decimal_float_literal]: #112
[#223 decimal_int_literal]: #110
[#223 depth_texture_type]: #123
[#223 float16]: #91
[#223 float32]: #90
[#223 float_literal]: #86
[#223 hex_float_literal]: #113
[#223 hex_int_literal]: #111
[#223 ident]: #75
[#223 int32]: #92
[#223 int_literal]: #85
[#223 literal]: #77
[#223 mat_prefix]: #83
[#223 minus]: #64
[#223 multiplicative_expression]: #292
[#223 multisampled_texture_type]: #125
[#223 paren_expression]: #78
[#223 paren_left]: #88
[#223 pointer]: #94
[#223 primary_expression]: #69
[#223 sampled_texture_type]: #124
[#223 sampler_type]: #122
[#223 singular_expression]: #63
[#223 star]: #67
[#223 storage_texture_type]: #126
[#223 texture_and_sampler_types]: #97
[#223 tilde]: #66
[#223 type_specifier_without_ident]: #81
[#223 uint32]: #93
[#223 unary_expression]: #293
[#223 vec_prefix]: #82
[#227 and]: #68
[#227 array_type_specifier]: #95
[#227 bang]: #65
[#227 bool_literal]: #87
[#227 callable]: #76
[#227 decimal_float_literal]: #112
[#227 decimal_int_literal]: #110
[#227 depth_texture_type]: #123
[#227 float16]: #91
[#227 float32]: #90
[#227 float_literal]: #86
[#227 hex_float_literal]: #113
[#227 hex_int_literal]: #111
[#227 ident]: #75
[#227 int32]: #92
[#227 int_literal]: #85
[#227 literal]: #77
[#227 mat_prefix]: #83
[#227 minus]: #64
[#227 multisampled_texture_type]: #125
[#227 paren_expression]: #78
[#227 paren_left]: #88
[#227 pointer]: #94
[#227 primary_expression]: #69
[#227 sampled_texture_type]: #124
[#227 sampler_type]: #122
[#227 singular_expression]: #63
[#227 star]: #67
[#227 storage_texture_type]: #126
[#227 texture_and_sampler_types]: #97
[#227 tilde]: #66
[#227 type_specifier_without_ident]: #81
[#227 uint32]: #93
[#227 unary_expression]: #291
[#227 vec_prefix]: #82
[#229 and]: #68
[#229 array_type_specifier]: #95
[#229 bang]: #65
[#229 bool_literal]: #87
[#229 callable]: #76
[#229 decimal_float_literal]: #112
[#229 decimal_int_literal]: #110
[#229 depth_texture_type]: #123
[#229 float16]: #91
[#229 float32]: #90
[#229 float_literal]: #86
[#229 hex_float_literal]: #113
[#229 hex_int_literal]: #111
[#229 ident]: #75
[#229 int32]: #92
[#229 int_literal]: #85
[#229 literal]: #77
[#229 mat_prefix]: #83
[#229 minus]: #64
[#229 multisampled_texture_type]: #125
[#229 paren_expression]: #78
[#229 paren_left]: #88
[#229 pointer]: #94
[#229 primary_expression]: #69
[#229 sampled_texture_type]: #124
[#229 sampler_type]: #122
[#229 singular_expression]: #63
[#229 star]: #67
[#229 storage_texture_type]: #126
[#229 texture_and_sampler_types]: #97
[#229 tilde]: #66
[#229 type_specifier_without_ident]: #81
[#229 uint32]: #93
[#229 unary_expression]: #290
[#229 vec_prefix]: #82
[#231 and]: #68
[#231 array_type_specifier]: #95
[#231 bang]: #65
[#231 bool_literal]: #87
[#231 callable]: #76
[#231 decimal_float_literal]: #112
[#231 decimal_int_literal]: #110
[#231 depth_texture_type]: #123
[#231 float16]: #91
[#231 float32]: #90
[#231 float_literal]: #86
[#231 hex_float_literal]: #113
[#231 hex_int_literal]: #111
[#231 ident]: #75
[#231 int32]: #92
[#231 int_literal]: #85
[#231 literal]: #77
[#231 mat_prefix]: #83
[#231 minus]: #64
[#231 multisampled_texture_type]: #125
[#231 paren_expression]: #78
[#231 paren_left]: #88
[#231 pointer]: #94
[#231 primary_expression]: #69
[#231 sampled_texture_type]: #124
[#231 sampler_type]: #122
[#231 singular_expression]: #63
[#231 star]: #67
[#231 storage_texture_type]: #126
[#231 texture_and_sampler_types]: #97
[#231 tilde]: #66
[#231 type_specifier_without_ident]: #81
[#231 uint32]: #93
[#231 unary_expression]: #289
[#231 vec_prefix]: #82
[#232 additive_expression]: #60
[#232 and]: #68
[#232 array_type_specifier]: #95
[#232 bang]: #65
[#232 bool_literal]: #87
[#232 callable]: #76
[#232 decimal_float_literal]: #112
[#232 decimal_int_literal]: #110
[#232 depth_texture_type]: #123
[#232 float16]: #91
[#232 float32]: #90
[#232 float_literal]: #86
[#232 hex_float_literal]: #113
[#232 hex_int_literal]: #111
[#232 ident]: #75
[#232 int32]: #92
[#232 int_literal]: #85
[#232 literal]: #77
[#232 mat_prefix]: #83
[#232 minus]: #64
[#232 multiplicative_expression]: #62
[#232 multisampled_texture_type]: #125
[#232 paren_expression]: #78
[#232 paren_left]: #88
[#232 pointer]: #94
[#232 primary_expression]: #69
[#232 sampled_texture_type]: #124
[#232 sampler_type]: #122
[#232 shift_expression]: #288
[#232 singular_expression]: #63
[#232 star]: #67
[#232 storage_texture_type]: #126
[#232 texture_and_sampler_types]: #97
[#232 tilde]: #66
[#232 type_specifier_without_ident]: #81
[#232 uint32]: #93
[#232 unary_expression]: #281
[#232 vec_prefix]: #82
[#233 additive_expression]: #60
[#233 and]: #68
[#233 array_type_specifier]: #95
[#233 bang]: #65
[#233 bool_literal]: #87
[#233 callable]: #76
[#233 decimal_float_literal]: #112
[#233 decimal_int_literal]: #110
[#233 depth_texture_type]: #123
[#233 float16]: #91
[#233 float32]: #90
[#233 float_literal]: #86
[#233 hex_float_literal]: #113
[#233 hex_int_literal]: #111
[#233 ident]: #75
[#233 int32]: #92
[#233 int_literal]: #85
[#233 literal]: #77
[#233 mat_prefix]: #83
[#233 minus]: #64
[#233 multiplicative_expression]: #62
[#233 multisampled_texture_type]: #125
[#233 paren_expression]: #78
[#233 paren_left]: #88
[#233 pointer]: #94
[#233 primary_expression]: #69
[#233 sampled_texture_type]: #124
[#233 sampler_type]: #122
[#233 shift_expression]: #287
[#233 singular_expression]: #63
[#233 star]: #67
[#233 storage_texture_type]: #126
[#233 texture_and_sampler_types]: #97
[#233 tilde]: #66
[#233 type_specifier_without_ident]: #81
[#233 uint32]: #93
[#233 unary_expression]: #281
[#233 vec_prefix]: #82
[#234 additive_expression]: #60
[#234 and]: #68
[#234 array_type_specifier]: #95
[#234 bang]: #65
[#234 bool_literal]: #87
[#234 callable]: #76
[#234 decimal_float_literal]: #112
[#234 decimal_int_literal]: #110
[#234 depth_texture_type]: #123
[#234 float16]: #91
[#234 float32]: #90
[#234 float_literal]: #86
[#234 hex_float_literal]: #113
[#234 hex_int_literal]: #111
[#234 ident]: #75
[#234 int32]: #92
[#234 int_literal]: #85
[#234 literal]: #77
[#234 mat_prefix]: #83
[#234 minus]: #64
[#234 multiplicative_expression]: #62
[#234 multisampled_texture_type]: #125
[#234 paren_expression]: #78
[#234 paren_left]: #88
[#234 pointer]: #94
[#234 primary_expression]: #69
[#234 sampled_texture_type]: #124
[#234 sampler_type]: #122
[#234 shift_expression]: #286
[#234 singular_expression]: #63
[#234 star]: #67
[#234 storage_texture_type]: #126
[#234 texture_and_sampler_types]: #97
[#234 tilde]: #66
[#234 type_specifier_without_ident]: #81
[#234 uint32]: #93
[#234 unary_expression]: #281
[#234 vec_prefix]: #82
[#235 additive_expression]: #60
[#235 and]: #68
[#235 array_type_specifier]: #95
[#235 bang]: #65
[#235 bool_literal]: #87
[#235 callable]: #76
[#235 decimal_float_literal]: #112
[#235 decimal_int_literal]: #110
[#235 depth_texture_type]: #123
[#235 float16]: #91
[#235 float32]: #90
[#235 float_literal]: #86
[#235 hex_float_literal]: #113
[#235 hex_int_literal]: #111
[#235 ident]: #75
[#235 int32]: #92
[#235 int_literal]: #85
[#235 literal]: #77
[#235 mat_prefix]: #83
[#235 minus]: #64
[#235 multiplicative_expression]: #62
[#235 multisampled_texture_type]: #125
[#235 paren_expression]: #78
[#235 paren_left]: #88
[#235 pointer]: #94
[#235 primary_expression]: #69
[#235 sampled_texture_type]: #124
[#235 sampler_type]: #122
[#235 shift_expression]: #285
[#235 singular_expression]: #63
[#235 star]: #67
[#235 storage_texture_type]: #126
[#235 texture_and_sampler_types]: #97
[#235 tilde]: #66
[#235 type_specifier_without_ident]: #81
[#235 uint32]: #93
[#235 unary_expression]: #281
[#235 vec_prefix]: #82
[#236 additive_expression]: #60
[#236 and]: #68
[#236 array_type_specifier]: #95
[#236 bang]: #65
[#236 bool_literal]: #87
[#236 callable]: #76
[#236 decimal_float_literal]: #112
[#236 decimal_int_literal]: #110
[#236 depth_texture_type]: #123
[#236 float16]: #91
[#236 float32]: #90
[#236 float_literal]: #86
[#236 hex_float_literal]: #113
[#236 hex_int_literal]: #111
[#236 ident]: #75
[#236 int32]: #92
[#236 int_literal]: #85
[#236 literal]: #77
[#236 mat_prefix]: #83
[#236 minus]: #64
[#236 multiplicative_expression]: #62
[#236 multisampled_texture_type]: #125
[#236 paren_expression]: #78
[#236 paren_left]: #88
[#236 pointer]: #94
[#236 primary_expression]: #69
[#236 sampled_texture_type]: #124
[#236 sampler_type]: #122
[#236 shift_expression]: #284
[#236 singular_expression]: #63
[#236 star]: #67
[#236 storage_texture_type]: #126
[#236 texture_and_sampler_types]: #97
[#236 tilde]: #66
[#236 type_specifier_without_ident]: #81
[#236 uint32]: #93
[#236 unary_expression]: #281
[#236 vec_prefix]: #82
[#237 additive_expression]: #60
[#237 and]: #68
[#237 array_type_specifier]: #95
[#237 bang]: #65
[#237 bool_literal]: #87
[#237 callable]: #76
[#237 decimal_float_literal]: #112
[#237 decimal_int_literal]: #110
[#237 depth_texture_type]: #123
[#237 float16]: #91
[#237 float32]: #90
[#237 float_literal]: #86
[#237 hex_float_literal]: #113
[#237 hex_int_literal]: #111
[#237 ident]: #75
[#237 int32]: #92
[#237 int_literal]: #85
[#237 literal]: #77
[#237 mat_prefix]: #83
[#237 minus]: #64
[#237 multiplicative_expression]: #62
[#237 multisampled_texture_type]: #125
[#237 paren_expression]: #78
[#237 paren_left]: #88
[#237 pointer]: #94
[#237 primary_expression]: #69
[#237 sampled_texture_type]: #124
[#237 sampler_type]: #122
[#237 shift_expression]: #283
[#237 singular_expression]: #63
[#237 star]: #67
[#237 storage_texture_type]: #126
[#237 texture_and_sampler_types]: #97
[#237 tilde]: #66
[#237 type_specifier_without_ident]: #81
[#237 uint32]: #93
[#237 unary_expression]: #281
[#237 vec_prefix]: #82
[#243 additive_expression]: #60
[#243 and]: #68
[#243 array_type_specifier]: #95
[#243 bang]: #65
[#243 bool_literal]: #87
[#243 callable]: #76
[#243 decimal_float_literal]: #112
[#243 decimal_int_literal]: #110
[#243 depth_texture_type]: #123
[#243 float16]: #91
[#243 float32]: #90
[#243 float_literal]: #86
[#243 hex_float_literal]: #113
[#243 hex_int_literal]: #111
[#243 ident]: #75
[#243 int32]: #92
[#243 int_literal]: #85
[#243 literal]: #77
[#243 mat_prefix]: #83
[#243 minus]: #64
[#243 multiplicative_expression]: #62
[#243 multisampled_texture_type]: #125
[#243 paren_expression]: #78
[#243 paren_left]: #88
[#243 pointer]: #94
[#243 primary_expression]: #69
[#243 relational_expression]: #282
[#243 sampled_texture_type]: #124
[#243 sampler_type]: #122
[#243 shift_expression]: #56
[#243 singular_expression]: #63
[#243 star]: #67
[#243 storage_texture_type]: #126
[#243 texture_and_sampler_types]: #97
[#243 tilde]: #66
[#243 type_specifier_without_ident]: #81
[#243 uint32]: #93
[#243 unary_expression]: #281
[#243 vec_prefix]: #82
[#245 additive_expression]: #60
[#245 and]: #68
[#245 array_type_specifier]: #95
[#245 bang]: #65
[#245 bool_literal]: #87
[#245 callable]: #76
[#245 decimal_float_literal]: #112
[#245 decimal_int_literal]: #110
[#245 depth_texture_type]: #123
[#245 float16]: #91
[#245 float32]: #90
[#245 float_literal]: #86
[#245 hex_float_literal]: #113
[#245 hex_int_literal]: #111
[#245 ident]: #75
[#245 int32]: #92
[#245 int_literal]: #85
[#245 literal]: #77
[#245 mat_prefix]: #83
[#245 minus]: #64
[#245 multiplicative_expression]: #62
[#245 multisampled_texture_type]: #125
[#245 paren_expression]: #78
[#245 paren_left]: #88
[#245 pointer]: #94
[#245 primary_expression]: #69
[#245 relational_expression]: #280
[#245 sampled_texture_type]: #124
[#245 sampler_type]: #122
[#245 shift_expression]: #56
[#245 singular_expression]: #63
[#245 star]: #67
[#245 storage_texture_type]: #126
[#245 texture_and_sampler_types]: #97
[#245 tilde]: #66
[#245 type_specifier_without_ident]: #81
[#245 uint32]: #93
[#245 unary_expression]: #281
[#245 vec_prefix]: #82
[#247 additive_expression]: #60
[#247 and]: #68
[#247 array_type_specifier]: #95
[#247 bang]: #65
[#247 binary_and_expression]: #57
[#247 binary_or_expression]: #58
[#247 binary_xor_expression]: #59
[#247 bitwise_expression]: #55
[#247 bool_literal]: #87
[#247 callable]: #76
[#247 decimal_float_literal]: #112
[#247 decimal_int_literal]: #110
[#247 depth_texture_type]: #123
[#247 expression]: #279
[#247 float16]: #91
[#247 float32]: #90
[#247 float_literal]: #86
[#247 hex_float_literal]: #113
[#247 hex_int_literal]: #111
[#247 ident]: #75
[#247 int32]: #92
[#247 int_literal]: #85
[#247 literal]: #77
[#247 mat_prefix]: #83
[#247 minus]: #64
[#247 multiplicative_expression]: #62
[#247 multisampled_texture_type]: #125
[#247 paren_expression]: #78
[#247 paren_left]: #88
[#247 pointer]: #94
[#247 primary_expression]: #69
[#247 relational_expression]: #52
[#247 sampled_texture_type]: #124
[#247 sampler_type]: #122
[#247 shift_expression]: #56
[#247 short_circuit_and_expression]: #54
[#247 short_circuit_or_expression]: #53
[#247 singular_expression]: #63
[#247 star]: #67
[#247 storage_texture_type]: #126
[#247 texture_and_sampler_types]: #97
[#247 tilde]: #66
[#247 type_specifier_without_ident]: #81
[#247 uint32]: #93
[#247 unary_expression]: #61
[#247 vec_prefix]: #82
[#248 additive_expression]: #60
[#248 and]: #68
[#248 array_type_specifier]: #95
[#248 bang]: #65
[#248 binary_and_expression]: #57
[#248 binary_or_expression]: #58
[#248 binary_xor_expression]: #59
[#248 bitwise_expression]: #55
[#248 bool_literal]: #87
[#248 callable]: #76
[#248 decimal_float_literal]: #112
[#248 decimal_int_literal]: #110
[#248 depth_texture_type]: #123
[#248 expression]: #278
[#248 float16]: #91
[#248 float32]: #90
[#248 float_literal]: #86
[#248 hex_float_literal]: #113
[#248 hex_int_literal]: #111
[#248 ident]: #75
[#248 int32]: #92
[#248 int_literal]: #85
[#248 literal]: #77
[#248 mat_prefix]: #83
[#248 minus]: #64
[#248 multiplicative_expression]: #62
[#248 multisampled_texture_type]: #125
[#248 paren_expression]: #78
[#248 paren_left]: #88
[#248 pointer]: #94
[#248 primary_expression]: #69
[#248 relational_expression]: #52
[#248 sampled_texture_type]: #124
[#248 sampler_type]: #122
[#248 shift_expression]: #56
[#248 short_circuit_and_expression]: #54
[#248 short_circuit_or_expression]: #53
[#248 singular_expression]: #63
[#248 star]: #67
[#248 storage_texture_type]: #126
[#248 texture_and_sampler_types]: #97
[#248 tilde]: #66
[#248 type_specifier_without_ident]: #81
[#248 uint32]: #93
[#248 unary_expression]: #61
[#248 vec_prefix]: #82
[#249 additive_expression]: #60
[#249 and]: #68
[#249 array_type_specifier]: #95
[#249 bang]: #65
[#249 binary_and_expression]: #57
[#249 binary_or_expression]: #58
[#249 binary_xor_expression]: #59
[#249 bitwise_expression]: #55
[#249 bool_literal]: #87
[#249 callable]: #76
[#249 decimal_float_literal]: #112
[#249 decimal_int_literal]: #110
[#249 depth_texture_type]: #123
[#249 expression]: #277
[#249 float16]: #91
[#249 float32]: #90
[#249 float_literal]: #86
[#249 hex_float_literal]: #113
[#249 hex_int_literal]: #111
[#249 ident]: #75
[#249 int32]: #92
[#249 int_literal]: #85
[#249 literal]: #77
[#249 mat_prefix]: #83
[#249 minus]: #64
[#249 multiplicative_expression]: #62
[#249 multisampled_texture_type]: #125
[#249 paren_expression]: #78
[#249 paren_left]: #88
[#249 pointer]: #94
[#249 primary_expression]: #69
[#249 relational_expression]: #52
[#249 sampled_texture_type]: #124
[#249 sampler_type]: #122
[#249 shift_expression]: #56
[#249 short_circuit_and_expression]: #54
[#249 short_circuit_or_expression]: #53
[#249 singular_expression]: #63
[#249 star]: #67
[#249 storage_texture_type]: #126
[#249 texture_and_sampler_types]: #97
[#249 tilde]: #66
[#249 type_specifier_without_ident]: #81
[#249 uint32]: #93
[#249 unary_expression]: #61
[#249 vec_prefix]: #82
[#250 interpolation_type_name]: #273
[#251 additive_expression]: #60
[#251 and]: #68
[#251 array_type_specifier]: #95
[#251 bang]: #65
[#251 binary_and_expression]: #57
[#251 binary_or_expression]: #58
[#251 binary_xor_expression]: #59
[#251 bitwise_expression]: #55
[#251 bool_literal]: #87
[#251 callable]: #76
[#251 decimal_float_literal]: #112
[#251 decimal_int_literal]: #110
[#251 depth_texture_type]: #123
[#251 expression]: #272
[#251 float16]: #91
[#251 float32]: #90
[#251 float_literal]: #86
[#251 hex_float_literal]: #113
[#251 hex_int_literal]: #111
[#251 ident]: #75
[#251 int32]: #92
[#251 int_literal]: #85
[#251 literal]: #77
[#251 mat_prefix]: #83
[#251 minus]: #64
[#251 multiplicative_expression]: #62
[#251 multisampled_texture_type]: #125
[#251 paren_expression]: #78
[#251 paren_left]: #88
[#251 pointer]: #94
[#251 primary_expression]: #69
[#251 relational_expression]: #52
[#251 sampled_texture_type]: #124
[#251 sampler_type]: #122
[#251 shift_expression]: #56
[#251 short_circuit_and_expression]: #54
[#251 short_circuit_or_expression]: #53
[#251 singular_expression]: #63
[#251 star]: #67
[#251 storage_texture_type]: #126
[#251 texture_and_sampler_types]: #97
[#251 tilde]: #66
[#251 type_specifier_without_ident]: #81
[#251 uint32]: #93
[#251 unary_expression]: #61
[#251 vec_prefix]: #82
[#252 additive_expression]: #60
[#252 and]: #68
[#252 array_type_specifier]: #95
[#252 bang]: #65
[#252 binary_and_expression]: #57
[#252 binary_or_expression]: #58
[#252 binary_xor_expression]: #59
[#252 bitwise_expression]: #55
[#252 bool_literal]: #87
[#252 callable]: #76
[#252 decimal_float_literal]: #112
[#252 decimal_int_literal]: #110
[#252 depth_texture_type]: #123
[#252 expression]: #271
[#252 float16]: #91
[#252 float32]: #90
[#252 float_literal]: #86
[#252 hex_float_literal]: #113
[#252 hex_int_literal]: #111
[#252 ident]: #75
[#252 int32]: #92
[#252 int_literal]: #85
[#252 literal]: #77
[#252 mat_prefix]: #83
[#252 minus]: #64
[#252 multiplicative_expression]: #62
[#252 multisampled_texture_type]: #125
[#252 paren_expression]: #78
[#252 paren_left]: #88
[#252 pointer]: #94
[#252 primary_expression]: #69
[#252 relational_expression]: #52
[#252 sampled_texture_type]: #124
[#252 sampler_type]: #122
[#252 shift_expression]: #56
[#252 short_circuit_and_expression]: #54
[#252 short_circuit_or_expression]: #53
[#252 singular_expression]: #63
[#252 star]: #67
[#252 storage_texture_type]: #126
[#252 texture_and_sampler_types]: #97
[#252 tilde]: #66
[#252 type_specifier_without_ident]: #81
[#252 uint32]: #93
[#252 unary_expression]: #61
[#252 vec_prefix]: #82
[#253 builtin_value_name]: #258
[#254 additive_expression]: #60
[#254 and]: #68
[#254 array_type_specifier]: #95
[#254 bang]: #65
[#254 binary_and_expression]: #57
[#254 binary_or_expression]: #58
[#254 binary_xor_expression]: #59
[#254 bitwise_expression]: #55
[#254 bool_literal]: #87
[#254 callable]: #76
[#254 decimal_float_literal]: #112
[#254 decimal_int_literal]: #110
[#254 depth_texture_type]: #123
[#254 expression]: #257
[#254 float16]: #91
[#254 float32]: #90
[#254 float_literal]: #86
[#254 hex_float_literal]: #113
[#254 hex_int_literal]: #111
[#254 ident]: #75
[#254 int32]: #92
[#254 int_literal]: #85
[#254 literal]: #77
[#254 mat_prefix]: #83
[#254 minus]: #64
[#254 multiplicative_expression]: #62
[#254 multisampled_texture_type]: #125
[#254 paren_expression]: #78
[#254 paren_left]: #88
[#254 pointer]: #94
[#254 primary_expression]: #69
[#254 relational_expression]: #52
[#254 sampled_texture_type]: #124
[#254 sampler_type]: #122
[#254 shift_expression]: #56
[#254 short_circuit_and_expression]: #54
[#254 short_circuit_or_expression]: #53
[#254 singular_expression]: #63
[#254 star]: #67
[#254 storage_texture_type]: #126
[#254 texture_and_sampler_types]: #97
[#254 tilde]: #66
[#254 type_specifier_without_ident]: #81
[#254 uint32]: #93
[#254 unary_expression]: #61
[#254 vec_prefix]: #82
[#255 additive_expression]: #60
[#255 and]: #68
[#255 array_type_specifier]: #95
[#255 bang]: #65
[#255 binary_and_expression]: #57
[#255 binary_or_expression]: #58
[#255 binary_xor_expression]: #59
[#255 bitwise_expression]: #55
[#255 bool_literal]: #87
[#255 callable]: #76
[#255 decimal_float_literal]: #112
[#255 decimal_int_literal]: #110
[#255 depth_texture_type]: #123
[#255 expression]: #256
[#255 float16]: #91
[#255 float32]: #90
[#255 float_literal]: #86
[#255 hex_float_literal]: #113
[#255 hex_int_literal]: #111
[#255 ident]: #75
[#255 int32]: #92
[#255 int_literal]: #85
[#255 literal]: #77
[#255 mat_prefix]: #83
[#255 minus]: #64
[#255 multiplicative_expression]: #62
[#255 multisampled_texture_type]: #125
[#255 paren_expression]: #78
[#255 paren_left]: #88
[#255 pointer]: #94
[#255 primary_expression]: #69
[#255 relational_expression]: #52
[#255 sampled_texture_type]: #124
[#255 sampler_type]: #122
[#255 shift_expression]: #56
[#255 short_circuit_and_expression]: #54
[#255 short_circuit_or_expression]: #53
[#255 singular_expression]: #63
[#255 star]: #67
[#255 storage_texture_type]: #126
[#255 texture_and_sampler_types]: #97
[#255 tilde]: #66
[#255 type_specifier_without_ident]: #81
[#255 uint32]: #93
[#255 unary_expression]: #61
[#255 vec_prefix]: #82
[#256 attrib_end]: #513
[#256 attrib_end/0.0]: #503
[#256 comma]: #505
[#257 attrib_end]: #512
[#257 attrib_end/0.0]: #503
[#257 comma]: #505
[#258 attrib_end]: #511
[#258 attrib_end/0.0]: #503
[#258 comma]: #505
[#271 attrib_end]: #510
[#271 attrib_end/0.0]: #503
[#271 comma]: #505
[#272 attrib_end]: #509
[#272 attrib_end/0.0]: #503
[#272 comma]: #505
[#273 attrib_end]: #507
[#273 attrib_end/0.0]: #503
[#273 comma]: #508
[#277 attrib_end]: #506
[#277 attrib_end/0.0]: #503
[#277 comma]: #505
[#278 attrib_end]: #504
[#278 attrib_end/0.0]: #503
[#278 comma]: #505
[#279 attrib_end]: #501
[#279 attrib_end/0.0]: #503
[#279 comma]: #502
[#281 shift_left]: #219
[#281 shift_right]: #220
[#292 forward_slash]: #215
[#292 modulo]: #216
[#292 multiplicative_operator]: #213
[#292 star]: #214
[#297 bracket_left]: #204
[#297 component_or_swizzle_specifier]: #500
[#297 component_or_swizzle_specifier/1.2]: #499
[#297 period]: #205
[#298 bracket_left]: #204
[#298 component_or_swizzle_specifier]: #498
[#298 component_or_swizzle_specifier/2.2]: #497
[#298 period]: #205
[#308 bracket_right]: #495
[#309 paren_right]: #494
[#311 comma]: #493
[#311 expression_comma_list/0.1]: #490
[#311 expression_comma_list/0.1/0]: #491
[#311 expression_comma_list/0.1/0/0.0]: #492
[#312 greater_than]: #489
[#315 less_than]: #198
[#316 less_than]: #197
[#317 less_than]: #196
[#318 greater_than]: #488
[#319 greater_than]: #487
[#320 array_type_specifier/0.3]: #485
[#320 comma]: #486
[#323 comma]: #484
[#329 greater_than]: #483
[#330 greater_than]: #482
[#331 greater_than]: #481
[#332 comma]: #480
[#350 brace_right]: #478
[#352 and]: #388
[#352 assignment_statement]: #380
[#352 brace_left]: #189
[#352 break_statement]: #362
[#352 compound_statement]: #366
[#352 compound_statement/0.1/0]: #477
[#352 continue_statement]: #363
[#352 core_lhs_expression]: #386
[#352 decrement_statement]: #382
[#352 for_statement]: #358
[#352 func_call_statement]: #360
[#352 ident]: #374
[#352 if_clause]: #369
[#352 if_statement]: #355
[#352 increment_statement]: #381
[#352 lhs_expression]: #384
[#352 loop_statement]: #357
[#352 paren_left]: #390
[#352 return_statement]: #354
[#352 semicolon]: #353
[#352 star]: #387
[#352 statement]: #352
[#352 static_assert_statement]: #367
[#352 switch_statement]: #356
[#352 underscore]: #385
[#352 variable_decl]: #375
[#352 variable_statement]: #361
[#352 variable_updating_statement]: #365
[#352 while_statement]: #359
[#354 semicolon]: #476
[#360 semicolon]: #475
[#361 semicolon]: #474
[#362 semicolon]: #473
[#363 semicolon]: #472
[#364 semicolon]: #471
[#365 semicolon]: #470
[#367 semicolon]: #469
[#368 additive_expression]: #60
[#368 and]: #68
[#368 array_type_specifier]: #95
[#368 bang]: #65
[#368 binary_and_expression]: #57
[#368 binary_or_expression]: #58
[#368 binary_xor_expression]: #59
[#368 bitwise_expression]: #55
[#368 bool_literal]: #87
[#368 callable]: #76
[#368 decimal_float_literal]: #112
[#368 decimal_int_literal]: #110
[#368 depth_texture_type]: #123
[#368 expression]: #468
[#368 float16]: #91
[#368 float32]: #90
[#368 float_literal]: #86
[#368 hex_float_literal]: #113
[#368 hex_int_literal]: #111
[#368 ident]: #75
[#368 int32]: #92
[#368 int_literal]: #85
[#368 literal]: #77
[#368 mat_prefix]: #83
[#368 minus]: #64
[#368 multiplicative_expression]: #62
[#368 multisampled_texture_type]: #125
[#368 paren_expression]: #78
[#368 paren_left]: #88
[#368 pointer]: #94
[#368 primary_expression]: #69
[#368 relational_expression]: #52
[#368 return_statement/0.1]: #467
[#368 sampled_texture_type]: #124
[#368 sampler_type]: #122
[#368 shift_expression]: #56
[#368 short_circuit_and_expression]: #54
[#368 short_circuit_or_expression]: #53
[#368 singular_expression]: #63
[#368 star]: #67
[#368 storage_texture_type]: #126
[#368 texture_and_sampler_types]: #97
[#368 tilde]: #66
[#368 type_specifier_without_ident]: #81
[#368 uint32]: #93
[#368 unary_expression]: #61
[#368 vec_prefix]: #82
[#369 else_if_clause]: #465
[#369 if_statement/0.1]: #463
[#369 if_statement/0.1/0]: #464
[#370 additive_expression]: #60
[#370 and]: #68
[#370 array_type_specifier]: #95
[#370 bang]: #65
[#370 binary_and_expression]: #57
[#370 binary_or_expression]: #58
[#370 binary_xor_expression]: #59
[#370 bitwise_expression]: #55
[#370 bool_literal]: #87
[#370 callable]: #76
[#370 decimal_float_literal]: #112
[#370 decimal_int_literal]: #110
[#370 depth_texture_type]: #123
[#370 expression]: #462
[#370 float16]: #91
[#370 float32]: #90
[#370 float_literal]: #86
[#370 hex_float_literal]: #113
[#370 hex_int_literal]: #111
[#370 ident]: #75
[#370 int32]: #92
[#370 int_literal]: #85
[#370 literal]: #77
[#370 mat_prefix]: #83
[#370 minus]: #64
[#370 multiplicative_expression]: #62
[#370 multisampled_texture_type]: #125
[#370 paren_expression]: #78
[#370 paren_left]: #88
[#370 pointer]: #94
[#370 primary_expression]: #69
[#370 relational_expression]: #52
[#370 sampled_texture_type]: #124
[#370 sampler_type]: #122
[#370 shift_expression]: #56
[#370 short_circuit_and_expression]: #54
[#370 short_circuit_or_expression]: #53
[#370 singular_expression]: #63
[#370 star]: #67
[#370 storage_texture_type]: #126
[#370 texture_and_sampler_types]: #97
[#370 tilde]: #66
[#370 type_specifier_without_ident]: #81
[#370 uint32]: #93
[#370 unary_expression]: #61
[#370 vec_prefix]: #82
[#371 brace_left]: #461
[#372 paren_left]: #460
[#373 additive_expression]: #60
[#373 and]: #68
[#373 array_type_specifier]: #95
[#373 bang]: #65
[#373 binary_and_expression]: #57
[#373 binary_or_expression]: #58
[#373 binary_xor_expression]: #59
[#373 bitwise_expression]: #55
[#373 bool_literal]: #87
[#373 callable]: #76
[#373 decimal_float_literal]: #112
[#373 decimal_int_literal]: #110
[#373 depth_texture_type]: #123
[#373 expression]: #459
[#373 float16]: #91
[#373 float32]: #90
[#373 float_literal]: #86
[#373 hex_float_literal]: #113
[#373 hex_int_literal]: #111
[#373 ident]: #75
[#373 int32]: #92
[#373 int_literal]: #85
[#373 literal]: #77
[#373 mat_prefix]: #83
[#373 minus]: #64
[#373 multiplicative_expression]: #62
[#373 multisampled_texture_type]: #125
[#373 paren_expression]: #78
[#373 paren_left]: #88
[#373 pointer]: #94
[#373 primary_expression]: #69
[#373 relational_expression]: #52
[#373 sampled_texture_type]: #124
[#373 sampler_type]: #122
[#373 shift_expression]: #56
[#373 short_circuit_and_expression]: #54
[#373 short_circuit_or_expression]: #53
[#373 singular_expression]: #63
[#373 star]: #67
[#373 storage_texture_type]: #126
[#373 texture_and_sampler_types]: #97
[#373 tilde]: #66
[#373 type_specifier_without_ident]: #81
[#373 uint32]: #93
[#373 unary_expression]: #61
[#373 vec_prefix]: #82
[#374 argument_expression_list]: #458
[#374 paren_left]: #201
[#375 equal]: #457
[#376 ident]: #162
[#376 optionally_typed_ident]: #456
[#377 ident]: #162
[#377 optionally_typed_ident]: #455
[#383 additive_expression]: #60
[#383 and]: #68
[#383 array_type_specifier]: #95
[#383 bang]: #65
[#383 binary_and_expression]: #57
[#383 binary_or_expression]: #58
[#383 binary_xor_expression]: #59
[#383 bitwise_expression]: #55
[#383 bool_literal]: #87
[#383 callable]: #76
[#383 decimal_float_literal]: #112
[#383 decimal_int_literal]: #110
[#383 depth_texture_type]: #123
[#383 expression]: #454
[#383 float16]: #91
[#383 float32]: #90
[#383 float_literal]: #86
[#383 hex_float_literal]: #113
[#383 hex_int_literal]: #111
[#383 ident]: #75
[#383 int32]: #92
[#383 int_literal]: #85
[#383 literal]: #77
[#383 mat_prefix]: #83
[#383 minus]: #64
[#383 multiplicative_expression]: #62
[#383 multisampled_texture_type]: #125
[#383 paren_expression]: #78
[#383 paren_left]: #88
[#383 pointer]: #94
[#383 primary_expression]: #69
[#383 relational_expression]: #52
[#383 sampled_texture_type]: #124
[#383 sampler_type]: #122
[#383 shift_expression]: #56
[#383 short_circuit_and_expression]: #54
[#383 short_circuit_or_expression]: #53
[#383 singular_expression]: #63
[#383 star]: #67
[#383 storage_texture_type]: #126
[#383 texture_and_sampler_types]: #97
[#383 tilde]: #66
[#383 type_specifier_without_ident]: #81
[#383 uint32]: #93
[#383 unary_expression]: #61
[#383 vec_prefix]: #82
[#384 and_equal]: #439
[#384 assignment_statement/0.1]: #427
[#384 compound_assignment_operator]: #431
[#384 division_equal]: #437
[#384 equal]: #430
[#384 minus_equal]: #435
[#384 minus_minus]: #429
[#384 modulo_equal]: #438
[#384 or_equal]: #440
[#384 plus_equal]: #434
[#384 plus_plus]: #428
[#384 shift_left_equal]: #443
[#384 shift_right_equal]: #442
[#384 times_equal]: #436
[#384 xor_equal]: #441
[#385 equal]: #426
[#386 bracket_left]: #204
[#386 component_or_swizzle_specifier]: #425
[#386 lhs_expression/0.1]: #424
[#386 period]: #205
[#387 and]: #388
[#387 core_lhs_expression]: #386
[#387 ident]: #421
[#387 lhs_expression]: #423
[#387 paren_left]: #390
[#387 star]: #387
[#388 and]: #388
[#388 core_lhs_expression]: #386
[#388 ident]: #421
[#388 lhs_expression]: #422
[#388 paren_left]: #390
[#388 star]: #387
[#390 and]: #388
[#390 core_lhs_expression]: #386
[#390 ident]: #421
[#390 lhs_expression]: #420
[#390 paren_left]: #390
[#390 star]: #387
[#391 attr]: #32
[#391 attribute]: #419
[#391 function_header/0.3]: #414
[#391 param]: #416
[#391 param/0.0]: #417
[#391 param/0.0/0]: #418
[#391 param_list]: #415
[#392 comma]: #413
[#392 struct_body_decl/0.2]: #410
[#392 struct_body_decl/0.2/0]: #411
[#392 struct_body_decl/0.2/0/0.0]: #412
[#393 member_ident]: #409
[#395 attr]: #32
[#395 attribute]: #395
[#395 struct_member/0.0/0]: #408
[#398 additive_expression]: #60
[#398 and]: #68
[#398 array_type_specifier]: #95
[#398 bang]: #65
[#398 binary_and_expression]: #57
[#398 binary_or_expression]: #58
[#398 binary_xor_expression]: #59
[#398 bitwise_expression]: #55
[#398 bool_literal]: #87
[#398 callable]: #76
[#398 decimal_float_literal]: #112
[#398 decimal_int_literal]: #110
[#398 depth_texture_type]: #123
[#398 expression]: #407
[#398 float16]: #91
[#398 float32]: #90
[#398 float_literal]: #86
[#398 hex_float_literal]: #113
[#398 hex_int_literal]: #111
[#398 ident]: #75
[#398 int32]: #92
[#398 int_literal]: #85
[#398 literal]: #77
[#398 mat_prefix]: #83
[#398 minus]: #64
[#398 multiplicative_expression]: #62
[#398 multisampled_texture_type]: #125
[#398 paren_expression]: #78
[#398 paren_left]: #88
[#398 pointer]: #94
[#398 primary_expression]: #69
[#398 relational_expression]: #52
[#398 sampled_texture_type]: #124
[#398 sampler_type]: #122
[#398 shift_expression]: #56
[#398 short_circuit_and_expression]: #54
[#398 short_circuit_or_expression]: #53
[#398 singular_expression]: #63
[#398 star]: #67
[#398 storage_texture_type]: #126
[#398 texture_and_sampler_types]: #97
[#398 tilde]: #66
[#398 type_specifier_without_ident]: #81
[#398 uint32]: #93
[#398 unary_expression]: #61
[#398 vec_prefix]: #82
[#402 comma]: #405
[#402 variable_qualifier/0.2]: #404
[#404 greater_than]: #573
[#405 access_mode]: #572
[#409 colon]: #571
[#410 comma]: #570
[#410 struct_body_decl/0.3]: #569
[#412 comma]: #413
[#412 struct_body_decl/0.2/0]: #568
[#412 struct_body_decl/0.2/0/0.0]: #412
[#413 attr]: #32
[#413 attribute]: #395
[#413 struct_member]: #567
[#413 struct_member/0.0]: #393
[#413 struct_member/0.0/0]: #394
[#414 paren_right]: #566
[#416 comma]: #565
[#416 param_list/0.1]: #562
[#416 param_list/0.1/0]: #563
[#416 param_list/0.1/0/0.0]: #564
[#417 ident]: #561
[#419 attr]: #32
[#419 attribute]: #419
[#419 param/0.0/0]: #560
[#420 paren_right]: #559
[#426 additive_expression]: #60
[#426 and]: #68
[#426 array_type_specifier]: #95
[#426 bang]: #65
[#426 binary_and_expression]: #57
[#426 binary_or_expression]: #58
[#426 binary_xor_expression]: #59
[#426 bitwise_expression]: #55
[#426 bool_literal]: #87
[#426 callable]: #76
[#426 decimal_float_literal]: #112
[#426 decimal_int_literal]: #110
[#426 depth_texture_type]: #123
[#426 expression]: #558
[#426 float16]: #91
[#426 float32]: #90
[#426 float_literal]: #86
[#426 hex_float_literal]: #113
[#426 hex_int_literal]: #111
[#426 ident]: #75
[#426 int32]: #92
[#426 int_literal]: #85
[#426 literal]: #77
[#426 mat_prefix]: #83
[#426 minus]: #64
[#426 multiplicative_expression]: #62
[#426 multisampled_texture_type]: #125
[#426 paren_expression]: #78
[#426 paren_left]: #88
[#426 pointer]: #94
[#426 primary_expression]: #69
[#426 relational_expression]: #52
[#426 sampled_texture_type]: #124
[#426 sampler_type]: #122
[#426 shift_expression]: #56
[#426 short_circuit_and_expression]: #54
[#426 short_circuit_or_expression]: #53
[#426 singular_expression]: #63
[#426 star]: #67
[#426 storage_texture_type]: #126
[#426 texture_and_sampler_types]: #97
[#426 tilde]: #66
[#426 type_specifier_without_ident]: #81
[#426 uint32]: #93
[#426 unary_expression]: #61
[#426 vec_prefix]: #82
[#427 additive_expression]: #60
[#427 and]: #68
[#427 array_type_specifier]: #95
[#427 bang]: #65
[#427 binary_and_expression]: #57
[#427 binary_or_expression]: #58
[#427 binary_xor_expression]: #59
[#427 bitwise_expression]: #55
[#427 bool_literal]: #87
[#427 callable]: #76
[#427 decimal_float_literal]: #112
[#427 decimal_int_literal]: #110
[#427 depth_texture_type]: #123
[#427 expression]: #557
[#427 float16]: #91
[#427 float32]: #90
[#427 float_literal]: #86
[#427 hex_float_literal]: #113
[#427 hex_int_literal]: #111
[#427 ident]: #75
[#427 int32]: #92
[#427 int_literal]: #85
[#427 literal]: #77
[#427 mat_prefix]: #83
[#427 minus]: #64
[#427 multiplicative_expression]: #62
[#427 multisampled_texture_type]: #125
[#427 paren_expression]: #78
[#427 paren_left]: #88
[#427 pointer]: #94
[#427 primary_expression]: #69
[#427 relational_expression]: #52
[#427 sampled_texture_type]: #124
[#427 sampler_type]: #122
[#427 shift_expression]: #56
[#427 short_circuit_and_expression]: #54
[#427 short_circuit_or_expression]: #53
[#427 singular_expression]: #63
[#427 star]: #67
[#427 storage_texture_type]: #126
[#427 texture_and_sampler_types]: #97
[#427 tilde]: #66
[#427 type_specifier_without_ident]: #81
[#427 uint32]: #93
[#427 unary_expression]: #61
[#427 vec_prefix]: #82
[#454 brace_left]: #189
[#454 compound_statement]: #556
[#455 equal]: #555
[#456 equal]: #554
[#457 additive_expression]: #60
[#457 and]: #68
[#457 array_type_specifier]: #95
[#457 bang]: #65
[#457 binary_and_expression]: #57
[#457 binary_or_expression]: #58
[#457 binary_xor_expression]: #59
[#457 bitwise_expression]: #55
[#457 bool_literal]: #87
[#457 callable]: #76
[#457 decimal_float_literal]: #112
[#457 decimal_int_literal]: #110
[#457 depth_texture_type]: #123
[#457 expression]: #553
[#457 float16]: #91
[#457 float32]: #90
[#457 float_literal]: #86
[#457 hex_float_literal]: #113
[#457 hex_int_literal]: #111
[#457 ident]: #75
[#457 int32]: #92
[#457 int_literal]: #85
[#457 literal]: #77
[#457 mat_prefix]: #83
[#457 minus]: #64
[#457 multiplicative_expression]: #62
[#457 multisampled_texture_type]: #125
[#457 paren_expression]: #78
[#457 paren_left]: #88
[#457 pointer]: #94
[#457 primary_expression]: #69
[#457 relational_expression]: #52
[#457 sampled_texture_type]: #124
[#457 sampler_type]: #122
[#457 shift_expression]: #56
[#457 short_circuit_and_expression]: #54
[#457 short_circuit_or_expression]: #53
[#457 singular_expression]: #63
[#457 star]: #67
[#457 storage_texture_type]: #126
[#457 texture_and_sampler_types]: #97
[#457 tilde]: #66
[#457 type_specifier_without_ident]: #81
[#457 uint32]: #93
[#457 unary_expression]: #61
[#457 vec_prefix]: #82
[#459 brace_left]: #189
[#459 compound_statement]: #552
[#460 and]: #388
[#460 assignment_statement]: #380
[#460 core_lhs_expression]: #386
[#460 decrement_statement]: #382
[#460 for_header]: #546
[#460 for_header/0.0]: #547
[#460 for_init]: #548
[#460 func_call_statement]: #551
[#460 ident]: #374
[#460 increment_statement]: #381
[#460 lhs_expression]: #384
[#460 paren_left]: #390
[#460 star]: #387
[#460 underscore]: #385
[#460 variable_decl]: #375
[#460 variable_statement]: #549
[#460 variable_updating_statement]: #550
[#461 and]: #388
[#461 assignment_statement]: #380
[#461 brace_left]: #189
[#461 break_statement]: #362
[#461 compound_statement]: #366
[#461 continue_statement]: #363
[#461 core_lhs_expression]: #386
[#461 decrement_statement]: #382
[#461 for_statement]: #358
[#461 func_call_statement]: #360
[#461 ident]: #374
[#461 if_clause]: #369
[#461 if_statement]: #355
[#461 increment_statement]: #381
[#461 lhs_expression]: #384
[#461 loop_statement]: #357
[#461 loop_statement/0.2]: #543
[#461 loop_statement/0.2/0]: #544
[#461 paren_left]: #390
[#461 return_statement]: #354
[#461 semicolon]: #353
[#461 star]: #387
[#461 statement]: #545
[#461 static_assert_statement]: #367
[#461 switch_statement]: #356
[#461 underscore]: #385
[#461 variable_decl]: #375
[#461 variable_statement]: #361
[#461 variable_updating_statement]: #365
[#461 while_statement]: #359
[#462 brace_left]: #542
[#463 else_clause]: #540
[#463 if_statement/0.2]: #539
[#465 else_if_clause]: #465
[#465 if_statement/0.1/0]: #538
[#480 access_mode]: #533
[#484 array_type_specifier]: #95
[#484 depth_texture_type]: #123
[#484 float16]: #91
[#484 float32]: #90
[#484 ident]: #313
[#484 int32]: #92
[#484 mat_prefix]: #316
[#484 multisampled_texture_type]: #125
[#484 pointer]: #94
[#484 sampled_texture_type]: #124
[#484 sampler_type]: #122
[#484 storage_texture_type]: #126
[#484 texture_and_sampler_types]: #97
[#484 type_specifier]: #532
[#484 type_specifier_without_ident]: #314
[#484 uint32]: #93
[#484 vec_prefix]: #315
[#485 greater_than]: #531
[#486 additive_expression]: #528
[#486 and]: #68
[#486 array_type_specifier]: #95
[#486 bang]: #65
[#486 binary_and_expression]: #57
[#486 binary_or_expression]: #58
[#486 binary_xor_expression]: #59
[#486 bitwise_expression]: #529
[#486 bool_literal]: #87
[#486 callable]: #76
[#486 decimal_float_literal]: #112
[#486 decimal_int_literal]: #110
[#486 depth_texture_type]: #123
[#486 element_count_expression]: #527
[#486 float16]: #91
[#486 float32]: #90
[#486 float_literal]: #86
[#486 hex_float_literal]: #113
[#486 hex_int_literal]: #111
[#486 ident]: #75
[#486 int32]: #92
[#486 int_literal]: #85
[#486 literal]: #77
[#486 mat_prefix]: #83
[#486 minus]: #64
[#486 multiplicative_expression]: #62
[#486 multisampled_texture_type]: #125
[#486 paren_expression]: #78
[#486 paren_left]: #88
[#486 pointer]: #94
[#486 primary_expression]: #69
[#486 sampled_texture_type]: #124
[#486 sampler_type]: #122
[#486 singular_expression]: #63
[#486 star]: #67
[#486 storage_texture_type]: #126
[#486 texture_and_sampler_types]: #97
[#486 tilde]: #66
[#486 type_specifier_without_ident]: #81
[#486 uint32]: #93
[#486 unary_expression]: #530
[#486 vec_prefix]: #82
[#489 paren_expression]: #526
[#489 paren_left]: #88
[#490 comma]: #525
[#490 expression_comma_list/0.2]: #524
[#492 comma]: #493
[#492 expression_comma_list/0.1/0]: #523
[#492 expression_comma_list/0.1/0/0.0]: #492
[#493 additive_expression]: #60
[#493 and]: #68
[#493 array_type_specifier]: #95
[#493 bang]: #65
[#493 binary_and_expression]: #57
[#493 binary_or_expression]: #58
[#493 binary_xor_expression]: #59
[#493 bitwise_expression]: #55
[#493 bool_literal]: #87
[#493 callable]: #76
[#493 decimal_float_literal]: #112
[#493 decimal_int_literal]: #110
[#493 depth_texture_type]: #123
[#493 expression]: #522
[#493 float16]: #91
[#493 float32]: #90
[#493 float_literal]: #86
[#493 hex_float_literal]: #113
[#493 hex_int_literal]: #111
[#493 ident]: #75
[#493 int32]: #92
[#493 int_literal]: #85
[#493 literal]: #77
[#493 mat_prefix]: #83
[#493 minus]: #64
[#493 multiplicative_expression]: #62
[#493 multisampled_texture_type]: #125
[#493 paren_expression]: #78
[#493 paren_left]: #88
[#493 pointer]: #94
[#493 primary_expression]: #69
[#493 relational_expression]: #52
[#493 sampled_texture_type]: #124
[#493 sampler_type]: #122
[#493 shift_expression]: #56
[#493 short_circuit_and_expression]: #54
[#493 short_circuit_or_expression]: #53
[#493 singular_expression]: #63
[#493 star]: #67
[#493 storage_texture_type]: #126
[#493 texture_and_sampler_types]: #97
[#493 tilde]: #66
[#493 type_specifier_without_ident]: #81
[#493 uint32]: #93
[#493 unary_expression]: #61
[#493 vec_prefix]: #82
[#495 bracket_left]: #204
[#495 component_or_swizzle_specifier]: #521
[#495 component_or_swizzle_specifier/0.3]: #520
[#495 period]: #205
[#502 additive_expression]: #60
[#502 and]: #68
[#502 array_type_specifier]: #95
[#502 bang]: #65
[#502 binary_and_expression]: #57
[#502 binary_or_expression]: #58
[#502 binary_xor_expression]: #59
[#502 bitwise_expression]: #55
[#502 bool_literal]: #87
[#502 callable]: #76
[#502 decimal_float_literal]: #112
[#502 decimal_int_literal]: #110
[#502 depth_texture_type]: #123
[#502 expression]: #519
[#502 float16]: #91
[#502 float32]: #90
[#502 float_literal]: #86
[#502 hex_float_literal]: #113
[#502 hex_int_literal]: #111
[#502 ident]: #75
[#502 int32]: #92
[#502 int_literal]: #85
[#502 literal]: #77
[#502 mat_prefix]: #83
[#502 minus]: #64
[#502 multiplicative_expression]: #62
[#502 multisampled_texture_type]: #125
[#502 paren_expression]: #78
[#502 paren_left]: #88
[#502 pointer]: #94
[#502 primary_expression]: #69
[#502 relational_expression]: #52
[#502 sampled_texture_type]: #124
[#502 sampler_type]: #122
[#502 shift_expression]: #56
[#502 short_circuit_and_expression]: #54
[#502 short_circuit_or_expression]: #53
[#502 singular_expression]: #63
[#502 star]: #67
[#502 storage_texture_type]: #126
[#502 texture_and_sampler_types]: #97
[#502 tilde]: #66
[#502 type_specifier_without_ident]: #81
[#502 uint32]: #93
[#502 unary_expression]: #61
[#502 vec_prefix]: #82
[#503 paren_right]: #518
[#508 interpolation_sample_name]: #514
[#514 attrib_end]: #606
[#514 attrib_end/0.0]: #503
[#514 comma]: #505
[#519 attrib_end]: #604
[#519 attrib_end/0.0]: #503
[#519 comma]: #605
[#528 additive_operator]: #223
[#528 minus]: #225
[#528 plus]: #224
[#532 comma]: #603
[#532 type_specifier_without_ident/7.5]: #602
[#533 greater_than]: #601
[#537 additive_expression]: #60
[#537 and]: #68
[#537 array_type_specifier]: #95
[#537 bang]: #65
[#537 binary_and_expression]: #57
[#537 binary_or_expression]: #58
[#537 binary_xor_expression]: #59
[#537 bitwise_expression]: #55
[#537 bool_literal]: #87
[#537 callable]: #76
[#537 decimal_float_literal]: #112
[#537 decimal_int_literal]: #110
[#537 depth_texture_type]: #123
[#537 expression]: #600
[#537 float16]: #91
[#537 float32]: #90
[#537 float_literal]: #86
[#537 hex_float_literal]: #113
[#537 hex_int_literal]: #111
[#537 ident]: #75
[#537 int32]: #92
[#537 int_literal]: #85
[#537 literal]: #77
[#537 mat_prefix]: #83
[#537 minus]: #64
[#537 multiplicative_expression]: #62
[#537 multisampled_texture_type]: #125
[#537 paren_expression]: #78
[#537 paren_left]: #88
[#537 pointer]: #94
[#537 primary_expression]: #69
[#537 relational_expression]: #52
[#537 sampled_texture_type]: #124
[#537 sampler_type]: #122
[#537 shift_expression]: #56
[#537 short_circuit_and_expression]: #54
[#537 short_circuit_or_expression]: #53
[#537 singular_expression]: #63
[#537 star]: #67
[#537 storage_texture_type]: #126
[#537 texture_and_sampler_types]: #97
[#537 tilde]: #66
[#537 type_specifier_without_ident]: #81
[#537 uint32]: #93
[#537 unary_expression]: #61
[#537 vec_prefix]: #82
[#541 brace_left]: #189
[#541 compound_statement]: #599
[#542 case_clause]: #595
[#542 default_alone_clause]: #596
[#542 switch_body]: #594
[#542 switch_statement/0.3]: #592
[#542 switch_statement/0.3/0]: #593
[#543 continuing_statement]: #590
[#543 loop_statement/0.3]: #589
[#545 and]: #388
[#545 assignment_statement]: #380
[#545 brace_left]: #189
[#545 break_statement]: #362
[#545 compound_statement]: #366
[#545 continue_statement]: #363
[#545 core_lhs_expression]: #386
[#545 decrement_statement]: #382
[#545 for_statement]: #358
[#545 func_call_statement]: #360
[#545 ident]: #374
[#545 if_clause]: #369
[#545 if_statement]: #355
[#545 increment_statement]: #381
[#545 lhs_expression]: #384
[#545 loop_statement]: #357
[#545 loop_statement/0.2/0]: #588
[#545 paren_left]: #390
[#545 return_statement]: #354
[#545 semicolon]: #353
[#545 star]: #387
[#545 statement]: #545
[#545 static_assert_statement]: #367
[#545 switch_statement]: #356
[#545 underscore]: #385
[#545 variable_decl]: #375
[#545 variable_statement]: #361
[#545 variable_updating_statement]: #365
[#545 while_statement]: #359
[#546 paren_right]: #587
[#547 semicolon]: #586
[#554 additive_expression]: #60
[#554 and]: #68
[#554 array_type_specifier]: #95
[#554 bang]: #65
[#554 binary_and_expression]: #57
[#554 binary_or_expression]: #58
[#554 binary_xor_expression]: #59
[#554 bitwise_expression]: #55
[#554 bool_literal]: #87
[#554 callable]: #76
[#554 decimal_float_literal]: #112
[#554 decimal_int_literal]: #110
[#554 depth_texture_type]: #123
[#554 expression]: #585
[#554 float16]: #91
[#554 float32]: #90
[#554 float_literal]: #86
[#554 hex_float_literal]: #113
[#554 hex_int_literal]: #111
[#554 ident]: #75
[#554 int32]: #92
[#554 int_literal]: #85
[#554 literal]: #77
[#554 mat_prefix]: #83
[#554 minus]: #64
[#554 multiplicative_expression]: #62
[#554 multisampled_texture_type]: #125
[#554 paren_expression]: #78
[#554 paren_left]: #88
[#554 pointer]: #94
[#554 primary_expression]: #69
[#554 relational_expression]: #52
[#554 sampled_texture_type]: #124
[#554 sampler_type]: #122
[#554 shift_expression]: #56
[#554 short_circuit_and_expression]: #54
[#554 short_circuit_or_expression]: #53
[#554 singular_expression]: #63
[#554 star]: #67
[#554 storage_texture_type]: #126
[#554 texture_and_sampler_types]: #97
[#554 tilde]: #66
[#554 type_specifier_without_ident]: #81
[#554 uint32]: #93
[#554 unary_expression]: #61
[#554 vec_prefix]: #82
[#555 additive_expression]: #60
[#555 and]: #68
[#555 array_type_specifier]: #95
[#555 bang]: #65
[#555 binary_and_expression]: #57
[#555 binary_or_expression]: #58
[#555 binary_xor_expression]: #59
[#555 bitwise_expression]: #55
[#555 bool_literal]: #87
[#555 callable]: #76
[#555 decimal_float_literal]: #112
[#555 decimal_int_literal]: #110
[#555 depth_texture_type]: #123
[#555 expression]: #584
[#555 float16]: #91
[#555 float32]: #90
[#555 float_literal]: #86
[#555 hex_float_literal]: #113
[#555 hex_int_literal]: #111
[#555 ident]: #75
[#555 int32]: #92
[#555 int_literal]: #85
[#555 literal]: #77
[#555 mat_prefix]: #83
[#555 minus]: #64
[#555 multiplicative_expression]: #62
[#555 multisampled_texture_type]: #125
[#555 paren_expression]: #78
[#555 paren_left]: #88
[#555 pointer]: #94
[#555 primary_expression]: #69
[#555 relational_expression]: #52
[#555 sampled_texture_type]: #124
[#555 sampler_type]: #122
[#555 shift_expression]: #56
[#555 short_circuit_and_expression]: #54
[#555 short_circuit_or_expression]: #53
[#555 singular_expression]: #63
[#555 star]: #67
[#555 storage_texture_type]: #126
[#555 texture_and_sampler_types]: #97
[#555 tilde]: #66
[#555 type_specifier_without_ident]: #81
[#555 uint32]: #93
[#555 unary_expression]: #61
[#555 vec_prefix]: #82
[#561 colon]: #583
[#562 comma]: #582
[#562 param_list/0.2]: #581
[#564 comma]: #565
[#564 param_list/0.1/0]: #580
[#564 param_list/0.1/0/0.0]: #564
[#565 attr]: #32
[#565 attribute]: #419
[#565 param]: #579
[#565 param/0.0]: #417
[#565 param/0.0/0]: #418
[#566 arrow]: #577
[#566 function_header/0.5]: #576
[#569 brace_right]: #575
[#571 array_type_specifier]: #95
[#571 depth_texture_type]: #123
[#571 float16]: #91
[#571 float32]: #90
[#571 ident]: #313
[#571 int32]: #92
[#571 mat_prefix]: #316
[#571 multisampled_texture_type]: #125
[#571 pointer]: #94
[#571 sampled_texture_type]: #124
[#571 sampler_type]: #122
[#571 storage_texture_type]: #126
[#571 texture_and_sampler_types]: #97
[#571 type_specifier]: #574
[#571 type_specifier_without_ident]: #314
[#571 uint32]: #93
[#571 vec_prefix]: #315
[#577 attr]: #32
[#577 attribute]: #628
[#577 function_header/0.5/0.1]: #626
[#577 function_header/0.5/0.1/0]: #627
[#583 array_type_specifier]: #95
[#583 depth_texture_type]: #123
[#583 float16]: #91
[#583 float32]: #90
[#583 ident]: #313
[#583 int32]: #92
[#583 mat_prefix]: #316
[#583 multisampled_texture_type]: #125
[#583 pointer]: #94
[#583 sampled_texture_type]: #124
[#583 sampler_type]: #122
[#583 storage_texture_type]: #126
[#583 texture_and_sampler_types]: #97
[#583 type_specifier]: #625
[#583 type_specifier_without_ident]: #314
[#583 uint32]: #93
[#583 vec_prefix]: #315
[#586 additive_expression]: #60
[#586 and]: #68
[#586 array_type_specifier]: #95
[#586 bang]: #65
[#586 binary_and_expression]: #57
[#586 binary_or_expression]: #58
[#586 binary_xor_expression]: #59
[#586 bitwise_expression]: #55
[#586 bool_literal]: #87
[#586 callable]: #76
[#586 decimal_float_literal]: #112
[#586 decimal_int_literal]: #110
[#586 depth_texture_type]: #123
[#586 expression]: #624
[#586 float16]: #91
[#586 float32]: #90
[#586 float_literal]: #86
[#586 for_header/0.2]: #623
[#586 hex_float_literal]: #113
[#586 hex_int_literal]: #111
[#586 ident]: #75
[#586 int32]: #92
[#586 int_literal]: #85
[#586 literal]: #77
[#586 mat_prefix]: #83
[#586 minus]: #64
[#586 multiplicative_expression]: #62
[#586 multisampled_texture_type]: #125
[#586 paren_expression]: #78
[#586 paren_left]: #88
[#586 pointer]: #94
[#586 primary_expression]: #69
[#586 relational_expression]: #52
[#586 sampled_texture_type]: #124
[#586 sampler_type]: #122
[#586 shift_expression]: #56
[#586 short_circuit_and_expression]: #54
[#586 short_circuit_or_expression]: #53
[#586 singular_expression]: #63
[#586 star]: #67
[#586 storage_texture_type]: #126
[#586 texture_and_sampler_types]: #97
[#586 tilde]: #66
[#586 type_specifier_without_ident]: #81
[#586 uint32]: #93
[#586 unary_expression]: #61
[#586 vec_prefix]: #82
[#587 brace_left]: #189
[#587 compound_statement]: #622
[#589 brace_right]: #621
[#591 brace_left]: #620
[#591 continuing_compound_statement]: #619
[#592 brace_right]: #618
[#594 case_clause]: #595
[#594 default_alone_clause]: #596
[#594 switch_body]: #594
[#594 switch_statement/0.3/0]: #617
[#597 additive_expression]: #60
[#597 and]: #68
[#597 array_type_specifier]: #95
[#597 bang]: #65
[#597 binary_and_expression]: #57
[#597 binary_or_expression]: #58
[#597 binary_xor_expression]: #59
[#597 bitwise_expression]: #55
[#597 bool_literal]: #87
[#597 callable]: #76
[#597 case_selector]: #614
[#597 case_selectors]: #613
[#597 decimal_float_literal]: #112
[#597 decimal_int_literal]: #110
[#597 depth_texture_type]: #123
[#597 expression]: #616
[#597 float16]: #91
[#597 float32]: #90
[#597 float_literal]: #86
[#597 hex_float_literal]: #113
[#597 hex_int_literal]: #111
[#597 ident]: #75
[#597 int32]: #92
[#597 int_literal]: #85
[#597 literal]: #77
[#597 mat_prefix]: #83
[#597 minus]: #64
[#597 multiplicative_expression]: #62
[#597 multisampled_texture_type]: #125
[#597 paren_expression]: #78
[#597 paren_left]: #88
[#597 pointer]: #94
[#597 primary_expression]: #69
[#597 relational_expression]: #52
[#597 sampled_texture_type]: #124
[#597 sampler_type]: #122
[#597 shift_expression]: #56
[#597 short_circuit_and_expression]: #54
[#597 short_circuit_or_expression]: #53
[#597 singular_expression]: #63
[#597 star]: #67
[#597 storage_texture_type]: #126
[#597 texture_and_sampler_types]: #97
[#597 tilde]: #66
[#597 type_specifier_without_ident]: #81
[#597 uint32]: #93
[#597 unary_expression]: #61
[#597 vec_prefix]: #82
[#598 colon]: #612
[#598 default_alone_clause/0.1]: #611
[#600 brace_left]: #189
[#600 compound_statement]: #610
[#602 greater_than]: #609
[#603 access_mode]: #608
[#605 additive_expression]: #60
[#605 and]: #68
[#605 array_type_specifier]: #95
[#605 bang]: #65
[#605 binary_and_expression]: #57
[#605 binary_or_expression]: #58
[#605 binary_xor_expression]: #59
[#605 bitwise_expression]: #55
[#605 bool_literal]: #87
[#605 callable]: #76
[#605 decimal_float_literal]: #112
[#605 decimal_int_literal]: #110
[#605 depth_texture_type]: #123
[#605 expression]: #607
[#605 float16]: #91
[#605 float32]: #90
[#605 float_literal]: #86
[#605 hex_float_literal]: #113
[#605 hex_int_literal]: #111
[#605 ident]: #75
[#605 int32]: #92
[#605 int_literal]: #85
[#605 literal]: #77
[#605 mat_prefix]: #83
[#605 minus]: #64
[#605 multiplicative_expression]: #62
[#605 multisampled_texture_type]: #125
[#605 paren_expression]: #78
[#605 paren_left]: #88
[#605 pointer]: #94
[#605 primary_expression]: #69
[#605 relational_expression]: #52
[#605 sampled_texture_type]: #124
[#605 sampler_type]: #122
[#605 shift_expression]: #56
[#605 short_circuit_and_expression]: #54
[#605 short_circuit_or_expression]: #53
[#605 singular_expression]: #63
[#605 star]: #67
[#605 storage_texture_type]: #126
[#605 texture_and_sampler_types]: #97
[#605 tilde]: #66
[#605 type_specifier_without_ident]: #81
[#605 uint32]: #93
[#605 unary_expression]: #61
[#605 vec_prefix]: #82
[#607 attrib_end]: #642
[#607 attrib_end/0.0]: #503
[#607 comma]: #505
[#611 brace_left]: #189
[#611 compound_statement]: #641
[#613 case_clause/0.2]: #639
[#613 colon]: #640
[#614 case_selectors/0.1]: #635
[#614 case_selectors/0.1/0]: #636
[#614 case_selectors/0.1/0/0.0]: #637
[#614 comma]: #638
[#620 and]: #388
[#620 assignment_statement]: #380
[#620 brace_left]: #189
[#620 break_statement]: #362
[#620 compound_statement]: #366
[#620 continue_statement]: #363
[#620 continuing_compound_statement/0.1]: #632
[#620 continuing_compound_statement/0.1/0]: #633
[#620 core_lhs_expression]: #386
[#620 decrement_statement]: #382
[#620 for_statement]: #358
[#620 func_call_statement]: #360
[#620 ident]: #374
[#620 if_clause]: #369
[#620 if_statement]: #355
[#620 increment_statement]: #381
[#620 lhs_expression]: #384
[#620 loop_statement]: #357
[#620 paren_left]: #390
[#620 return_statement]: #354
[#620 semicolon]: #353
[#620 star]: #387
[#620 statement]: #634
[#620 static_assert_statement]: #367
[#620 switch_statement]: #356
[#620 underscore]: #385
[#620 variable_decl]: #375
[#620 variable_statement]: #361
[#620 variable_updating_statement]: #365
[#620 while_statement]: #359
[#623 semicolon]: #631
[#626 array_type_specifier]: #95
[#626 depth_texture_type]: #123
[#626 float16]: #91
[#626 float32]: #90
[#626 ident]: #313
[#626 int32]: #92
[#626 mat_prefix]: #316
[#626 multisampled_texture_type]: #125
[#626 pointer]: #94
[#626 sampled_texture_type]: #124
[#626 sampler_type]: #122
[#626 storage_texture_type]: #126
[#626 texture_and_sampler_types]: #97
[#626 type_specifier]: #630
[#626 type_specifier_without_ident]: #314
[#626 uint32]: #93
[#626 vec_prefix]: #315
[#628 attr]: #32
[#628 attribute]: #628
[#628 function_header/0.5/0.1/0]: #629
[#631 and]: #388
[#631 assignment_statement]: #380
[#631 core_lhs_expression]: #386
[#631 decrement_statement]: #382
[#631 for_header/0.4]: #652
[#631 for_update]: #653
[#631 func_call_statement]: #655
[#631 ident]: #374
[#631 increment_statement]: #381
[#631 lhs_expression]: #384
[#631 paren_left]: #390
[#631 star]: #387
[#631 underscore]: #385
[#631 variable_updating_statement]: #654
[#632 break_if_statement]: #650
[#632 continuing_compound_statement/0.2]: #649
[#634 and]: #388
[#634 assignment_statement]: #380
[#634 brace_left]: #189
[#634 break_statement]: #362
[#634 compound_statement]: #366
[#634 continue_statement]: #363
[#634 continuing_compound_statement/0.1/0]: #648
[#634 core_lhs_expression]: #386
[#634 decrement_statement]: #382
[#634 for_statement]: #358
[#634 func_call_statement]: #360
[#634 ident]: #374
[#634 if_clause]: #369
[#634 if_statement]: #355
[#634 increment_statement]: #381
[#634 lhs_expression]: #384
[#634 loop_statement]: #357
[#634 paren_left]: #390
[#634 return_statement]: #354
[#634 semicolon]: #353
[#634 star]: #387
[#634 statement]: #634
[#634 static_assert_statement]: #367
[#634 switch_statement]: #356
[#634 underscore]: #385
[#634 variable_decl]: #375
[#634 variable_statement]: #361
[#634 variable_updating_statement]: #365
[#634 while_statement]: #359
[#635 case_selectors/0.2]: #646
[#635 comma]: #647
[#637 case_selectors/0.1/0]: #645
[#637 case_selectors/0.1/0/0.0]: #637
[#637 comma]: #638
[#638 additive_expression]: #60
[#638 and]: #68
[#638 array_type_specifier]: #95
[#638 bang]: #65
[#638 binary_and_expression]: #57
[#638 binary_or_expression]: #58
[#638 binary_xor_expression]: #59
[#638 bitwise_expression]: #55
[#638 bool_literal]: #87
[#638 callable]: #76
[#638 case_selector]: #644
[#638 decimal_float_literal]: #112
[#638 decimal_int_literal]: #110
[#638 depth_texture_type]: #123
[#638 expression]: #616
[#638 float16]: #91
[#638 float32]: #90
[#638 float_literal]: #86
[#638 hex_float_literal]: #113
[#638 hex_int_literal]: #111
[#638 ident]: #75
[#638 int32]: #92
[#638 int_literal]: #85
[#638 literal]: #77
[#638 mat_prefix]: #83
[#638 minus]: #64
[#638 multiplicative_expression]: #62
[#638 multisampled_texture_type]: #125
[#638 paren_expression]: #78
[#638 paren_left]: #88
[#638 pointer]: #94
[#638 primary_expression]: #69
[#638 relational_expression]: #52
[#638 sampled_texture_type]: #124
[#638 sampler_type]: #122
[#638 shift_expression]: #56
[#638 short_circuit_and_expression]: #54
[#638 short_circuit_or_expression]: #53
[#638 singular_expression]: #63
[#638 star]: #67
[#638 storage_texture_type]: #126
[#638 texture_and_sampler_types]: #97
[#638 tilde]: #66
[#638 type_specifier_without_ident]: #81
[#638 uint32]: #93
[#638 unary_expression]: #61
[#638 vec_prefix]: #82
[#639 brace_left]: #189
[#639 compound_statement]: #643
[#649 brace_right]: #657
[#656 additive_expression]: #60
[#656 and]: #68
[#656 array_type_specifier]: #95
[#656 bang]: #65
[#656 binary_and_expression]: #57
[#656 binary_or_expression]: #58
[#656 binary_xor_expression]: #59
[#656 bitwise_expression]: #55
[#656 bool_literal]: #87
[#656 callable]: #76
[#656 decimal_float_literal]: #112
[#656 decimal_int_literal]: #110
[#656 depth_texture_type]: #123
[#656 expression]: #658
[#656 float16]: #91
[#656 float32]: #90
[#656 float_literal]: #86
[#656 hex_float_literal]: #113
[#656 hex_int_literal]: #111
[#656 ident]: #75
[#656 int32]: #92
[#656 int_literal]: #85
[#656 literal]: #77
[#656 mat_prefix]: #83
[#656 minus]: #64
[#656 multiplicative_expression]: #62
[#656 multisampled_texture_type]: #125
[#656 paren_expression]: #78
[#656 paren_left]: #88
[#656 pointer]: #94
[#656 primary_expression]: #69
[#656 relational_expression]: #52
[#656 sampled_texture_type]: #124
[#656 sampler_type]: #122
[#656 shift_expression]: #56
[#656 short_circuit_and_expression]: #54
[#656 short_circuit_or_expression]: #53
[#656 singular_expression]: #63
[#656 star]: #67
[#656 storage_texture_type]: #126
[#656 texture_and_sampler_types]: #97
[#656 tilde]: #66
[#656 type_specifier_without_ident]: #81
[#656 uint32]: #93
[#656 unary_expression]: #61
[#656 vec_prefix]: #82
[#658 semicolon]: #659
