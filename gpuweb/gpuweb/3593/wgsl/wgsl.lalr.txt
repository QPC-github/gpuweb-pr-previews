=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   minus
 | plus
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
and:'&'
and_and:'&&'
and_equal:'&='
argument_expression_list:
   paren_left ( expression ( comma expression ) * ? comma ? )? paren_right
argument_expression_list/0.1/0.1/0/0.0:
   comma expression
array:'array'
array_type_specifier:
   'array' less_than type_specifier ( comma element_count_expression )? greater_than
arrow:'->'
assignment_statement:
   lhs_expression ( equal | compound_assignment_operator ) expression
 | underscore equal expression
atomic:'atomic'
attr:'@'
attrib_end:
   comma ? paren_right
attribute:
   attr 'align' paren_left expression attrib_end
 | attr 'binding' paren_left expression attrib_end
 | attr 'builtin' paren_left builtin_value_name attrib_end
 | attr 'compute'
 | attr 'const'
 | attr 'fragment'
 | attr 'group' paren_left expression attrib_end
 | attr 'id' paren_left expression attrib_end
 | attr 'interpolate' paren_left interpolation_type_name attrib_end
 | attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end
 | attr 'invariant'
 | attr 'location' paren_left expression attrib_end
 | attr 'size' paren_left expression attrib_end
 | attr 'vertex'
 | attr 'workgroup_size' paren_left expression attrib_end
 | attr 'workgroup_size' paren_left expression comma expression attrib_end
 | attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end
bang:'!'
binary_and_expression:
   binary_and_expression and unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression or unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression xor unary_expression
 | unary_expression
bitcast:'bitcast'
bitwise_expression:
   binary_and_expression and unary_expression
 | binary_or_expression or unary_expression
 | binary_xor_expression xor unary_expression
bool:'bool'
bool_literal:
   'false'
 | 'true'
brace_left:'{'
brace_right:'}'
bracket_left:'['
bracket_right:']'
break:'break'
break_if_statement:
   'break' 'if' expression semicolon
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case:'case'
case_clause:
   'case' case_selectors colon ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( comma case_selector ) * ? comma ?
case_selectors/0.1/0/0.0:
   comma case_selector
colon:':'
comma:','
component_or_swizzle_specifier:
   bracket_left expression bracket_right component_or_swizzle_specifier ?
 | period member_ident component_or_swizzle_specifier ?
 | period swizzle_name component_or_swizzle_specifier ?
compound_assignment_operator:
   and_equal
 | division_equal
 | minus_equal
 | modulo_equal
 | or_equal
 | plus_equal
 | shift_left_equal
 | shift_right_equal
 | times_equal
 | xor_equal
compound_statement:
   brace_left statement * ? brace_right
const:'const'
continue:'continue'
continue_statement:'continue'
continuing:'continuing'
continuing_compound_statement:
   brace_left statement * ? break_if_statement ? brace_right
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   ident
 | paren_left lhs_expression paren_right
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression minus_minus
default:'default'
default_alone_clause:
   'default' colon ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
discard:'discard'
division_equal:'/='
element_count_expression:
   additive_expression
 | bitwise_expression
else:'else'
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable:'enable'
enable_directive:
   'enable' extension_name semicolon
equal:'='
equal_equal:'=='
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression and_and relational_expression
 | short_circuit_or_expression or_or relational_expression
extension_name:'f16'
false:'false'
float16:'f16'
float32:'f32'
float_literal:
   decimal_float_literal
 | hex_float_literal
fn:'fn'
for:'for'
for_header:
   for_init ? semicolon expression ? semicolon for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' paren_left for_header paren_right compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
forward_slash:'/'
func_call_statement:
   ident argument_expression_list
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident paren_left param_list ? paren_right ( arrow attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident equal expression
 | attribute * ? 'override' optionally_typed_ident ( equal expression )?
global_decl:
   function_decl
 | global_constant_decl semicolon
 | global_variable_decl semicolon
 | semicolon
 | static_assert_statement semicolon
 | struct_decl
 | type_alias_decl semicolon
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( equal expression )?
greater_than:'>'
greater_than_equal:'>='
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if:'if'
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression plus_plus
int32:'i32'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
less_than:'<'
less_than_equal:'<='
let:'let'
lhs_expression:
   and lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
 | star lhs_expression
literal:
   bool_literal
 | float_literal
 | int_literal
loop:'loop'
loop_statement:
   'loop' brace_left statement * ? continuing_statement ? brace_right
mat2x2:'mat2x2'
mat2x3:'mat2x3'
mat2x4:'mat2x4'
mat3x2:'mat3x2'
mat3x3:'mat3x3'
mat3x4:'mat3x4'
mat4x2:'mat4x2'
mat4x3:'mat4x3'
mat4x4:'mat4x4'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
minus:'-'
minus_equal:'-='
minus_minus:'--'
modulo:'%'
modulo_equal:'%='
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   forward_slash
 | modulo
 | star
multisampled_texture_type:'texture_multisampled_2d'
not_equal:'!='
optionally_typed_ident:
   ident ( colon type_specifier )?
or:'|'
or_equal:'|='
or_or:'||'
override:'override'
param:
   attribute * ? ident colon type_specifier
param_list:
   param ( comma param ) * ? comma ?
param_list/0.1/0/0.0:
   comma param
paren_expression:
   paren_left expression paren_right
paren_left:'('
paren_right:')'
period:'.'
plus:'+'
plus_equal:'+='
plus_plus:'++'
pointer:'ptr'
primary_expression:
   'bitcast' less_than type_specifier greater_than paren_expression
 | callable argument_expression_list
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression equal_equal shift_expression
 | shift_expression greater_than shift_expression
 | shift_expression greater_than_equal shift_expression
 | shift_expression less_than shift_expression
 | shift_expression less_than_equal shift_expression
 | shift_expression not_equal shift_expression
return:'return'
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler:'sampler'
sampler_comparison:'sampler_comparison'
sampler_type:
   'sampler'
 | 'sampler_comparison'
semicolon:';'
shift_expression:
   additive_expression
 | unary_expression shift_left unary_expression
 | unary_expression shift_right unary_expression
shift_left:'<<'
shift_left_equal:'<<='
shift_right:'>>'
shift_right_equal:'>>='
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression or_or relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
star:'*'
statement:
   'discard' semicolon
 | break_statement semicolon
 | compound_statement
 | continue_statement semicolon
 | for_statement
 | func_call_statement semicolon
 | if_statement
 | loop_statement
 | return_statement semicolon
 | semicolon
 | static_assert_statement semicolon
 | switch_statement
 | variable_statement semicolon
 | variable_updating_statement semicolon
 | while_statement
static_assert:'static_assert'
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct:'struct'
struct_body_decl:
   brace_left struct_member ( comma struct_member ) * ? comma ? brace_right
struct_body_decl/0.2/0/0.0:
   comma struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident colon type_specifier
switch:'switch'
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression brace_left ( switch_body * ) brace_right
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_1d:'texture_1d'
texture_2d:'texture_2d'
texture_2d_array:'texture_2d_array'
texture_3d:'texture_3d'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type less_than type_specifier greater_than
 | sampled_texture_type less_than type_specifier greater_than
 | sampler_type
 | storage_texture_type less_than texel_format comma access_mode greater_than
texture_cube:'texture_cube'
texture_cube_array:'texture_cube_array'
texture_depth_2d:'texture_depth_2d'
texture_depth_2d_array:'texture_depth_2d_array'
texture_depth_cube:'texture_depth_cube'
texture_depth_cube_array:'texture_depth_cube_array'
texture_depth_multisampled_2d:'texture_depth_multisampled_2d'
texture_multisampled_2d:'texture_multisampled_2d'
texture_storage_1d:'texture_storage_1d'
texture_storage_2d:'texture_storage_2d'
texture_storage_2d_array:'texture_storage_2d_array'
texture_storage_3d:'texture_storage_3d'
tilde:'~'
times_equal:'*='
translation_unit:
   global_directive * ? global_decl * ?
true:'true'
type:'type'
type_alias_decl:
   'type' ident equal type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' less_than type_specifier greater_than
 | 'bool'
 | array_type_specifier
 | float16
 | float32
 | int32
 | mat_prefix less_than type_specifier greater_than
 | pointer less_than address_space comma type_specifier ( comma access_mode )? greater_than
 | texture_and_sampler_types
 | uint32
 | vec_prefix less_than type_specifier greater_than
uint32:'u32'
unary_expression:
   and unary_expression
 | bang unary_expression
 | minus unary_expression
 | singular_expression
 | star unary_expression
 | tilde unary_expression
underscore:'_'
var:'var'
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   less_than address_space ( comma access_mode )? greater_than
variable_statement:
   'const' optionally_typed_ident equal expression
 | 'let' optionally_typed_ident equal expression
 | variable_decl
 | variable_decl equal expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec2:'vec2'
vec3:'vec3'
vec4:'vec4'
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while:'while'
while_statement:
   'while' expression compound_statement
xor:'^'
xor_equal:'^='
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_specifier : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' optionally_typed_ident equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_specifier : {';'}

#12
global_decl -> semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> static_assert_statement · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#19
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' '_' 'array' 'atomic' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'static_assert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/ EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}

#21
global_constant_decl -> 'const' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#22
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {';'}

#23
type_alias_decl -> 'type' · ident equal type_specifier : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#24
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#25
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#26
static_assert_statement -> 'static_assert' · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#27
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#28
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#29
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#30
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#31
attribute -> attr · 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr · 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#32
attr -> '@' · : {'const'}

#33
attribute -> attr 'align' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#34
attribute -> attr 'binding' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#35
attribute -> attr 'builtin' · paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {}

#36
attribute -> attr 'const' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#37
attribute -> attr 'group' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#38
attribute -> attr 'id' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#39
attribute -> attr 'interpolate' · paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'interpolate' · paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {}

#40
attribute -> attr 'invariant' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#41
attribute -> attr 'location' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#42
attribute -> attr 'size' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#43
attribute -> attr 'workgroup_size' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' · paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' · paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#44
attribute -> attr 'vertex' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#45
attribute -> attr 'fragment' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#46
attribute -> attr 'compute' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#47
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#48
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#49
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#50
static_assert_statement -> 'static_assert' expression · : {';'}

#51
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#52
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#53
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#54
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#55
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#56
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#57
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#58
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#59
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_operator -> · minus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · plus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#60
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#61
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · forward_slash : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · modulo : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · star : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#62
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#63
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#64
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#65
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#66
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#67
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#68
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
period -> · '.' : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#69
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#70
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#71
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#72
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#73
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#74
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#75
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#76
primary_expression -> literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#77
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#78
primary_expression -> 'bitcast' · less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#79
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#80
callable -> type_specifier_without_ident · : {'('}

#81
callable -> vec_prefix · : {'('}
type_specifier_without_ident -> vec_prefix · less_than type_specifier greater_than : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#82
callable -> mat_prefix · : {'('}
type_specifier_without_ident -> mat_prefix · less_than type_specifier greater_than : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#83
array_type_specifier -> 'array' · less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
callable -> 'array' · : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#84
literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#85
literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#87
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#88
type_specifier_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#89
type_specifier_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_specifier_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_specifier_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_specifier_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#93
type_specifier_without_ident -> pointer · less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#94
type_specifier_without_ident -> array_type_specifier · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#95
type_specifier_without_ident -> 'atomic' · less_than type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#96
type_specifier_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#97
vec_prefix -> 'vec2' · : {'(' '<'}

#98
vec_prefix -> 'vec3' · : {'(' '<'}

#99
vec_prefix -> 'vec4' · : {'(' '<'}

#100
mat_prefix -> 'mat2x2' · : {'(' '<'}

#101
mat_prefix -> 'mat2x3' · : {'(' '<'}

#102
mat_prefix -> 'mat2x4' · : {'(' '<'}

#103
mat_prefix -> 'mat3x2' · : {'(' '<'}

#104
mat_prefix -> 'mat3x3' · : {'(' '<'}

#105
mat_prefix -> 'mat3x4' · : {'(' '<'}

#106
mat_prefix -> 'mat4x2' · : {'(' '<'}

#107
mat_prefix -> 'mat4x3' · : {'(' '<'}

#108
mat_prefix -> 'mat4x4' · : {'(' '<'}

#109
int_literal -> decimal_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#110
int_literal -> hex_int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#115
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' '_' 'array' 'atomic' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/}

#116
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#117
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#118
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#119
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#120
pointer -> 'ptr' · : {'<'}

#121
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#122
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
texture_and_sampler_types -> sampled_texture_type · less_than type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#124
texture_and_sampler_types -> multisampled_texture_type · less_than type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#125
texture_and_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#126
decimal_int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#127
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#128
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#129
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#130
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#131
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#132
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#133
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#134
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#135
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#136
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#137
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#138
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#139
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#140
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#141
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#142
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#143
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#144
sampled_texture_type -> 'texture_1d' · : {'<'}

#145
sampled_texture_type -> 'texture_2d' · : {'<'}

#146
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#147
sampled_texture_type -> 'texture_3d' · : {'<'}

#148
sampled_texture_type -> 'texture_cube' · : {'<'}

#149
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#150
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#151
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#152
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#153
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#154
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#155
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#156
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#157
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#158
type_alias_decl -> 'type' ident · equal type_specifier : {';'}
equal -> · '=' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#159
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#160
global_constant_decl -> 'const' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#161
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {';' '='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
optionally_typed_ident/0.1 -> · colon type_specifier : {';' '='}

#162
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
global_variable_decl/0.2 -> · equal expression : {';'}

#163
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {';' '='}
less_than -> · '<' : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#164
global_decl -> static_assert_statement semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#165
global_decl -> type_alias_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#166
global_decl -> global_constant_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#167
global_decl -> global_variable_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#168
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#169
global_directive -> 'enable' extension_name semicolon · : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#170
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {';' '='}

#171
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#172
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#173
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#174
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#175
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#176
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#177
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {';' '='}

#178
optionally_typed_ident/0.1 -> colon · type_specifier : {';' '='}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {';' '='}
depth_texture_type -> · 'texture_depth_2d' : {';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {';' '='}
depth_texture_type -> · 'texture_depth_cube' : {';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';' '='}
float16 -> · 'f16' : {';' '='}
float32 -> · 'f32' : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';' '='}
int32 -> · 'i32' : {';' '='}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';' '='}
sampler_type -> · 'sampler_comparison' : {';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';' '='}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {';' '='}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {';' '='}
texture_and_sampler_types -> · sampler_type : {';' '='}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';' '='}
type_specifier -> · ident : {';' '='}
type_specifier -> · type_specifier_without_ident : {';' '='}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {';' '='}
type_specifier_without_ident -> · 'bool' : {';' '='}
type_specifier_without_ident -> · array_type_specifier : {';' '='}
type_specifier_without_ident -> · float16 : {';' '='}
type_specifier_without_ident -> · float32 : {';' '='}
type_specifier_without_ident -> · int32 : {';' '='}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {';' '='}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {';' '='}
type_specifier_without_ident -> · texture_and_sampler_types : {';' '='}
type_specifier_without_ident -> · uint32 : {';' '='}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {';' '='}
uint32 -> · 'u32' : {';' '='}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#179
colon -> ':' · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' '{'}

#180
global_constant_decl -> 'const' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#181
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
global_constant_decl/1.3 -> · equal expression : {';'}

#182
type_alias_decl -> 'type' ident equal · type_specifier : {';'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {';'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_specifier -> · ident : {';'}
type_specifier -> · type_specifier_without_ident : {';'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {';'}
type_specifier_without_ident -> · 'bool' : {';'}
type_specifier_without_ident -> · array_type_specifier : {';'}
type_specifier_without_ident -> · float16 : {';'}
type_specifier_without_ident -> · float32 : {';'}
type_specifier_without_ident -> · int32 : {';'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {';'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {';'}
type_specifier_without_ident -> · texture_and_sampler_types : {';'}
type_specifier_without_ident -> · uint32 : {';'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {';'}
uint32 -> · 'u32' : {';'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#183
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#184
struct_body_decl -> brace_left · struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#185
brace_left -> '{' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#186
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#187
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#188
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#189
texture_and_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#190
texture_and_sampler_types -> multisampled_texture_type less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#191
texture_and_sampler_types -> sampled_texture_type less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#192
type_specifier_without_ident -> 'atomic' less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#193
type_specifier_without_ident -> pointer less_than · address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#194
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#195
array_type_specifier -> 'array' less_than · type_specifier array_type_specifier/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · float16 : {',' '>'}
type_specifier_without_ident -> · float32 : {',' '>'}
type_specifier_without_ident -> · int32 : {',' '>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · uint32 : {',' '>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {',' '>'}
uint32 -> · 'u32' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#196
type_specifier_without_ident -> mat_prefix less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#197
type_specifier_without_ident -> vec_prefix less_than · type_specifier greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#198
primary_expression -> 'bitcast' less_than · type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_specifier -> · ident : {'>'}
type_specifier -> · type_specifier_without_ident : {'>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · 'bool' : {'>'}
type_specifier_without_ident -> · array_type_specifier : {'>'}
type_specifier_without_ident -> · float16 : {'>'}
type_specifier_without_ident -> · float32 : {'>'}
type_specifier_without_ident -> · int32 : {'>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'>'}
type_specifier_without_ident -> · texture_and_sampler_types : {'>'}
type_specifier_without_ident -> · uint32 : {'>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#199
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#200
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
argument_expression_list/0.1 -> · expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 : {')'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#201
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#202
singular_expression/0.1 -> component_or_swizzle_specifier · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#203
component_or_swizzle_specifier -> bracket_left · expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#204
component_or_swizzle_specifier -> period · member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> period · swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#205
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#206
period -> '.' · : {}

#207
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#208
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#209
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#210
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#211
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#212
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#213
multiplicative_operator -> star · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#214
multiplicative_operator -> forward_slash · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#215
multiplicative_operator -> modulo · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#216
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#217
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#218
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#219
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#220
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#221
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#222
additive_expression -> additive_expression additive_operator · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#223
additive_operator -> plus · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#224
additive_operator -> minus · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#225
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#226
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#227
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#228
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · hex_int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#229
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#230
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · hex_int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#231
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#232
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#233
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#234
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#235
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#236
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#237
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/}

#238
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#239
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#240
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#241
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#242
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#243
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#244
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · hex_int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#245
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#246
attribute -> attr 'workgroup_size' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left · expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left · expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#247
attribute -> attr 'size' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#248
attribute -> attr 'location' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#249
attribute -> attr 'interpolate' paren_left · interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'interpolate' paren_left · interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#250
attribute -> attr 'id' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#251
attribute -> attr 'group' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#252
attribute -> attr 'builtin' paren_left · builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#253
attribute -> attr 'binding' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#254
attribute -> attr 'align' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#255
attribute -> attr 'align' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#256
attribute -> attr 'binding' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#257
attribute -> attr 'builtin' paren_left builtin_value_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#258
builtin_value_name -> 'vertex_index' · : {')' ','}

#259
builtin_value_name -> 'instance_index' · : {')' ','}

#260
builtin_value_name -> 'position' · : {')' ','}

#261
builtin_value_name -> 'front_facing' · : {')' ','}

#262
builtin_value_name -> 'frag_depth' · : {')' ','}

#263
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#264
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#265
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#266
builtin_value_name -> 'workgroup_id' · : {')' ','}

#267
builtin_value_name -> 'num_workgroups' · : {')' ','}

#268
builtin_value_name -> 'sample_index' · : {')' ','}

#269
builtin_value_name -> 'sample_mask' · : {')' ','}

#270
attribute -> attr 'group' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#271
attribute -> attr 'id' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#272
attribute -> attr 'interpolate' paren_left interpolation_type_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'interpolate' paren_left interpolation_type_name · comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#273
interpolation_type_name -> 'perspective' · : {')' ','}

#274
interpolation_type_name -> 'linear' · : {')' ','}

#275
interpolation_type_name -> 'flat' · : {')' ','}

#276
attribute -> attr 'location' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#277
attribute -> attr 'size' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#278
attribute -> attr 'workgroup_size' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression · comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression · comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#279
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#280
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#281
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#282
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#283
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#284
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#285
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#286
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#287
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#288
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#289
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#290
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#291
additive_expression -> additive_expression additive_operator multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · forward_slash : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · modulo : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · star : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#292
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#293
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#294
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#295
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#296
component_or_swizzle_specifier -> period member_ident · component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
period -> · '.' : {}

#297
component_or_swizzle_specifier -> period swizzle_name · component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
period -> · '.' : {}

#298
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#299
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#300
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#301
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#302
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#303
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#304
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#305
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#306
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#307
component_or_swizzle_specifier -> bracket_left expression · bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#308
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#309
argument_expression_list/0.1 -> expression · argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.1 -> · argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0 -> · argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0/0.0 -> · comma expression : {')' ','}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#310
primary_expression -> 'bitcast' less_than type_specifier · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#311
type_specifier -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#312
type_specifier -> type_specifier_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#313
type_specifier_without_ident -> vec_prefix · less_than type_specifier greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#314
type_specifier_without_ident -> mat_prefix · less_than type_specifier greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#315
array_type_specifier -> 'array' · less_than type_specifier array_type_specifier/0.3 greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#316
type_specifier_without_ident -> vec_prefix less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#317
type_specifier_without_ident -> mat_prefix less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#318
array_type_specifier -> 'array' less_than type_specifier · array_type_specifier/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#319
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#320
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' '{' '|' '|=' '||'}

#321
type_specifier_without_ident -> pointer less_than address_space · comma type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#322
address_space -> 'function' · : {',' '>'}

#323
address_space -> 'private' · : {',' '>'}

#324
address_space -> 'workgroup' · : {',' '>'}

#325
address_space -> 'uniform' · : {',' '>'}

#326
address_space -> 'storage' · : {',' '>'}

#327
type_specifier_without_ident -> 'atomic' less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#328
texture_and_sampler_types -> sampled_texture_type less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#329
texture_and_sampler_types -> multisampled_texture_type less_than type_specifier · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#330
texture_and_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#331
texel_format -> 'rgba8unorm' · : {','}

#332
texel_format -> 'rgba8snorm' · : {','}

#333
texel_format -> 'rgba8uint' · : {','}

#334
texel_format -> 'rgba8sint' · : {','}

#335
texel_format -> 'rgba16uint' · : {','}

#336
texel_format -> 'rgba16sint' · : {','}

#337
texel_format -> 'rgba16float' · : {','}

#338
texel_format -> 'r32uint' · : {','}

#339
texel_format -> 'r32sint' · : {','}

#340
texel_format -> 'r32float' · : {','}

#341
texel_format -> 'rg32uint' · : {','}

#342
texel_format -> 'rg32sint' · : {','}

#343
texel_format -> 'rg32float' · : {','}

#344
texel_format -> 'rgba32uint' · : {','}

#345
texel_format -> 'rgba32sint' · : {','}

#346
texel_format -> 'rgba32float' · : {','}

#347
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#348
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#349
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#350
statement -> semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#351
statement -> return_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#352
statement -> if_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
statement -> switch_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#354
statement -> loop_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#355
statement -> for_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
statement -> while_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#357
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#358
statement -> variable_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#359
statement -> break_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#360
statement -> continue_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
statement -> 'discard' · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#362
statement -> variable_updating_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#363
statement -> compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#364
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#365
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#366
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#368
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#369
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' '_' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#370
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#371
core_lhs_expression -> ident · : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#372
variable_statement -> variable_decl · : {';'}
variable_statement -> variable_decl · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#373
variable_statement -> 'let' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#374
variable_statement -> 'const' · optionally_typed_ident equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {'='}

#375
break_statement -> 'break' · : {';'}

#376
continue_statement -> 'continue' · : {';'}

#377
variable_updating_statement -> assignment_statement · : {')' ';'}

#378
variable_updating_statement -> increment_statement · : {')' ';'}

#379
variable_updating_statement -> decrement_statement · : {')' ';'}

#380
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#381
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#382
assignment_statement -> underscore · equal expression : {')' ';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#383
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {}

#384
lhs_expression -> star · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · and lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#385
lhs_expression -> and · lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
lhs_expression -> · and lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#386
underscore -> '_' · : {'='}

#387
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
core_lhs_expression -> · ident : {')' '.' '['}
core_lhs_expression -> · paren_left lhs_expression paren_right : {')' '.' '['}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' '.' '['}
lhs_expression -> · and lhs_expression : {')'}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {')'}
lhs_expression -> · star lhs_expression : {')'}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#388
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 ident colon type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {')'}

#389
struct_body_decl -> brace_left struct_member · struct_body_decl/0.2 struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · comma struct_member : {',' '}'}

#390
struct_member -> struct_member/0.0 · member_ident colon type_specifier : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#391
struct_member/0.0 -> struct_member/0.0/0 · : {}

#392
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#393
type_alias_decl -> 'type' ident equal type_specifier · : {';'}

#394
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {';'}

#395
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#396
global_constant_decl -> 'const' optionally_typed_ident equal expression · : {';'}

#397
optionally_typed_ident/0.1 -> colon type_specifier · : {';' '='}

#398
global_variable_decl/0.2 -> equal expression · : {';'}

#399
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#400
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {';' '='}

#401
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#402
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#403
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ /0[xX][0-9a-fA-F]+[iu]?/}

#404
global_constant_decl/1.3 -> equal expression · : {';'}

#405
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#406
struct_member -> struct_member/0.0 member_ident · colon type_specifier : {',' '}'}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#407
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 · struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#408
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {',' '}'}

#409
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {',' '}'}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {',' '}'}
struct_body_decl/0.2/0/0.0 -> · comma struct_member : {',' '}'}

#410
struct_body_decl/0.2/0/0.0 -> comma · struct_member : {',' '}'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_specifier : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#411
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#412
function_header/0.3 -> param_list · : {')'}

#413
param_list -> param · param_list/0.1 param_list/0.2 : {')'}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1 -> · param_list/0.1/0 : {')' ','}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · comma param : {')' ','}

#414
param -> param/0.0 · ident colon type_specifier : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#415
param/0.0 -> param/0.0/0 · : {}

#416
param/0.0/0 -> attribute · param/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
param/0.0/0 -> · attribute param/0.0/0 : {}

#417
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#418
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#419
lhs_expression -> and lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#420
lhs_expression -> star lhs_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#421
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#422
lhs_expression/0.1 -> component_or_swizzle_specifier · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#423
assignment_statement -> underscore equal · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#424
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#425
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#426
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#427
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#428
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#429
plus_plus -> '++' · : {')' ';'}

#430
minus_minus -> '--' · : {')' ';'}

#431
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#432
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#433
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#434
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#435
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#436
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#437
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#438
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#439
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#440
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#441
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#442
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#443
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#444
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#445
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#446
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#447
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#448
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#449
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#450
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#451
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#452
variable_statement -> 'const' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#453
variable_statement -> 'let' optionally_typed_ident · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#454
variable_statement -> variable_decl equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#455
func_call_statement -> ident argument_expression_list · : {')' ';'}

#456
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#457
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · variable_statement : {';'}
for_init -> · variable_updating_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}

#458
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#459
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#460
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#461
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#462
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#463
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#464
return_statement -> 'return' return_statement/0.1 · : {';'}

#465
return_statement/0.1 -> expression · : {';'}

#466
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#467
statement -> variable_updating_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#468
statement -> 'discard' semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#469
statement -> continue_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#470
statement -> break_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#471
statement -> variable_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#472
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#473
statement -> return_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#474
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#475
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#476
brace_right -> '}' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#477
texture_and_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#478
texture_and_sampler_types -> multisampled_texture_type less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#479
texture_and_sampler_types -> sampled_texture_type less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#480
type_specifier_without_ident -> 'atomic' less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#481
type_specifier_without_ident -> pointer less_than address_space comma · type_specifier type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_specifier -> · ident : {',' '>'}
type_specifier -> · type_specifier_without_ident : {',' '>'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · 'bool' : {',' '>'}
type_specifier_without_ident -> · array_type_specifier : {',' '>'}
type_specifier_without_ident -> · float16 : {',' '>'}
type_specifier_without_ident -> · float32 : {',' '>'}
type_specifier_without_ident -> · int32 : {',' '>'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {',' '>'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {',' '>'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '>'}
type_specifier_without_ident -> · uint32 : {',' '>'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {',' '>'}
uint32 -> · 'u32' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#482
array_type_specifier -> 'array' less_than type_specifier array_type_specifier/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#483
array_type_specifier/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · hex_int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#484
type_specifier_without_ident -> mat_prefix less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#485
type_specifier_without_ident -> vec_prefix less_than type_specifier greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#486
primary_expression -> 'bitcast' less_than type_specifier greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#487
argument_expression_list/0.1 -> expression argument_expression_list/0.1/0.1 · argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.2 -> · comma : {')'}
comma -> · ',' : {')'}

#488
argument_expression_list/0.1/0.1 -> argument_expression_list/0.1/0.1/0 · : {')' ','}

#489
argument_expression_list/0.1/0.1/0 -> argument_expression_list/0.1/0.1/0/0.0 · argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0 -> · argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 : {')' ','}
argument_expression_list/0.1/0.1/0/0.0 -> · comma expression : {')' ','}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#490
argument_expression_list/0.1/0.1/0/0.0 -> comma · expression : {')' ','}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#491
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#492
component_or_swizzle_specifier -> bracket_left expression bracket_right · component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
component_or_swizzle_specifier -> · bracket_left expression bracket_right component_or_swizzle_specifier/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period member_ident component_or_swizzle_specifier/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier -> · period swizzle_name component_or_swizzle_specifier/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
period -> · '.' : {}

#493
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#494
component_or_swizzle_specifier -> period swizzle_name component_or_swizzle_specifier/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#495
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#496
component_or_swizzle_specifier -> period member_ident component_or_swizzle_specifier/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#497
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#498
attribute -> attr 'workgroup_size' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#499
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#500
attrib_end -> attrib_end/0.0 · paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
paren_right -> · ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#501
attribute -> attr 'size' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#502
attrib_end/0.0 -> comma · : {')'}

#503
attribute -> attr 'location' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#504
attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#505
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'interpolate' paren_left interpolation_type_name comma · interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#506
attribute -> attr 'id' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#507
attribute -> attr 'group' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#508
attribute -> attr 'builtin' paren_left builtin_value_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#509
attribute -> attr 'binding' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#510
attribute -> attr 'align' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#511
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#512
interpolation_sample_name -> 'center' · : {')' ','}

#513
interpolation_sample_name -> 'centroid' · : {')' ','}

#514
interpolation_sample_name -> 'sample' · : {')' ','}

#515
attrib_end -> attrib_end/0.0 paren_right · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#516
attribute -> attr 'workgroup_size' paren_left expression comma expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attribute -> attr 'workgroup_size' paren_left expression comma expression · comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#517
component_or_swizzle_specifier -> bracket_left expression bracket_right component_or_swizzle_specifier/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#518
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#519
argument_expression_list/0.1/0.1/0/0.0 -> comma expression · : {')' ','}

#520
argument_expression_list/0.1/0.1/0 -> argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 · : {')' ','}

#521
argument_expression_list/0.1 -> expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 · : {')'}

#522
argument_expression_list/0.1/0.2 -> comma · : {')'}

#523
primary_expression -> 'bitcast' less_than type_specifier greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#524
array_type_specifier/0.3 -> comma element_count_expression · : {'>'}

#525
additive_expression -> additive_expression · additive_operator multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
additive_operator -> · minus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · plus : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#526
element_count_expression -> bitwise_expression · : {'>'}

#527
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#528
array_type_specifier -> 'array' less_than type_specifier array_type_specifier/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#529
type_specifier_without_ident -> pointer less_than address_space comma type_specifier · type_specifier_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_specifier_without_ident/7.5 -> · comma access_mode : {'>'}

#530
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#531
access_mode -> 'read' · : {'>'}

#532
access_mode -> 'write' · : {'>'}

#533
access_mode -> 'read_write' · : {'>'}

#534
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#535
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#536
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#537
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#538
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#539
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#540
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#541
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#542
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#543
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#544
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#545
for_header/0.0 -> for_init · : {';'}

#546
for_init -> variable_statement · : {';'}

#547
for_init -> variable_updating_statement · : {';'}

#548
for_init -> func_call_statement · : {';'}

#549
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#550
variable_statement -> variable_decl equal expression · : {';'}

#551
variable_statement -> 'let' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#552
variable_statement -> 'const' optionally_typed_ident equal · expression : {';'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#553
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#554
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#555
assignment_statement -> underscore equal expression · : {')' ';'}

#556
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#557
param/0.0/0 -> attribute param/0.0/0 · : {}

#558
param -> param/0.0 ident · colon type_specifier : {')' ','}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#559
param_list -> param param_list/0.1 · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#560
param_list/0.1 -> param_list/0.1/0 · : {')' ','}

#561
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {')' ','}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {')' ','}
param_list/0.1/0/0.0 -> · comma param : {')' ','}

#562
param_list/0.1/0/0.0 -> comma · param : {')' ','}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
param -> · param/0.0 ident colon type_specifier : {')' ','}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#563
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_specifier : {'{'}

#564
struct_body_decl/0.2/0/0.0 -> comma struct_member · : {',' '}'}

#565
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {',' '}'}

#566
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 · brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#567
struct_body_decl/0.3 -> comma · : {'}'}

#568
struct_member -> struct_member/0.0 member_ident colon · type_specifier : {',' '}'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
float16 -> · 'f16' : {',' '}'}
float32 -> · 'f32' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
int32 -> · 'i32' : {',' '}'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '}'}
type_specifier -> · ident : {',' '}'}
type_specifier -> · type_specifier_without_ident : {',' '}'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {',' '}'}
type_specifier_without_ident -> · 'bool' : {',' '}'}
type_specifier_without_ident -> · array_type_specifier : {',' '}'}
type_specifier_without_ident -> · float16 : {',' '}'}
type_specifier_without_ident -> · float32 : {',' '}'}
type_specifier_without_ident -> · int32 : {',' '}'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {',' '}'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {',' '}'}
type_specifier_without_ident -> · texture_and_sampler_types : {',' '}'}
type_specifier_without_ident -> · uint32 : {',' '}'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {',' '}'}
uint32 -> · 'u32' : {',' '}'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#569
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#570
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#571
struct_member -> struct_member/0.0 member_ident colon type_specifier · : {',' '}'}

#572
struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#573
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#574
function_header/0.5 -> arrow · function_header/0.5/0.1 type_specifier : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#575
arrow -> '->' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#576
param_list/0.1/0/0.0 -> comma param · : {')' ','}

#577
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {')' ','}

#578
param_list -> param param_list/0.1 param_list/0.2 · : {')'}

#579
param_list/0.2 -> comma · : {')'}

#580
param -> param/0.0 ident colon · type_specifier : {')' ','}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {')' ','}
depth_texture_type -> · 'texture_depth_2d' : {')' ','}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ','}
depth_texture_type -> · 'texture_depth_cube' : {')' ','}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ','}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ','}
float16 -> · 'f16' : {')' ','}
float32 -> · 'f32' : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
int32 -> · 'i32' : {')' ','}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ','}
sampler_type -> · 'sampler_comparison' : {')' ','}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ','}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {')' ','}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {')' ','}
texture_and_sampler_types -> · sampler_type : {')' ','}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ','}
type_specifier -> · ident : {')' ','}
type_specifier -> · type_specifier_without_ident : {')' ','}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {')' ','}
type_specifier_without_ident -> · 'bool' : {')' ','}
type_specifier_without_ident -> · array_type_specifier : {')' ','}
type_specifier_without_ident -> · float16 : {')' ','}
type_specifier_without_ident -> · float32 : {')' ','}
type_specifier_without_ident -> · int32 : {')' ','}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {')' ','}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {')' ','}
type_specifier_without_ident -> · texture_and_sampler_types : {')' ','}
type_specifier_without_ident -> · uint32 : {')' ','}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {')' ','}
uint32 -> · 'u32' : {')' ','}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#581
variable_statement -> 'const' optionally_typed_ident equal expression · : {';'}

#582
variable_statement -> 'let' optionally_typed_ident equal expression · : {';'}

#583
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#584
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#585
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#586
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#587
loop_statement/0.3 -> continuing_statement · : {'}'}

#588
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#589
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#590
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#591
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
switch_body -> · case_clause : {'case' 'default' '}'}
switch_body -> · default_alone_clause : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#592
switch_body -> case_clause · : {'case' 'default' '}'}

#593
switch_body -> default_alone_clause · : {'case' 'default' '}'}

#594
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {':' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#595
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
default_alone_clause/0.1 -> · colon : {'{'}

#596
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#597
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#598
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#599
type_specifier_without_ident -> pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#600
type_specifier_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#601
attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#602
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma expression comma · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#603
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#604
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#605
type_specifier_without_ident/7.5 -> comma access_mode · : {'>'}

#606
type_specifier_without_ident -> pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#607
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#608
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'case' 'default' '}'}

#609
default_alone_clause/0.1 -> colon · : {'{'}

#610
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {'case' 'default' '}'}
case_clause/0.2 -> · colon : {'{'}
colon -> · ':' : {'{'}

#611
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma case_selector : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#612
case_selector -> 'default' · : {',' ':' '{'}

#613
case_selector -> expression · : {',' ':' '{'}

#614
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#615
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#616
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#617
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#618
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#619
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#620
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#621
for_header/0.2 -> expression · : {';'}

#622
param -> param/0.0 ident colon type_specifier · : {')' ','}

#623
function_header/0.5 -> arrow function_header/0.5/0.1 · type_specifier : {'{'}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'{'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'{'}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'{'}
texture_and_sampler_types -> · sampler_type : {'{'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_specifier -> · ident : {'{'}
type_specifier -> · type_specifier_without_ident : {'{'}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'{'}
type_specifier_without_ident -> · 'bool' : {'{'}
type_specifier_without_ident -> · array_type_specifier : {'{'}
type_specifier_without_ident -> · float16 : {'{'}
type_specifier_without_ident -> · float32 : {'{'}
type_specifier_without_ident -> · int32 : {'{'}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'{'}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'{'}
type_specifier_without_ident -> · texture_and_sampler_types : {'{'}
type_specifier_without_ident -> · uint32 : {'{'}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'{'}
uint32 -> · 'u32' : {'{'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#624
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#625
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#626
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#627
function_header/0.5 -> arrow function_header/0.5/0.1 type_specifier · : {'{'}

#628
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
assignment_statement -> · underscore equal expression : {')'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · variable_updating_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
underscore -> · '_' : {'='}
variable_updating_statement -> · assignment_statement : {')'}
variable_updating_statement -> · decrement_statement : {')'}
variable_updating_statement -> · increment_statement : {')'}

#629
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#630
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#631
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
core_lhs_expression -> · ident : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' '(' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · and lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression -> · star lhs_expression : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_updating_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {';' '='}
variable_statement -> · 'const' optionally_typed_ident equal expression : {';'}
variable_statement -> · 'let' optionally_typed_ident equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
variable_updating_statement -> · assignment_statement : {';'}
variable_updating_statement -> · decrement_statement : {';'}
variable_updating_statement -> · increment_statement : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#632
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#633
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#634
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma case_selector : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'default' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}

#635
case_selectors/0.1/0/0.0 -> comma · case_selector : {',' ':' '{'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selector -> · 'default' : {',' ':' '{'}
case_selector -> · expression : {',' ':' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#636
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'case' 'default' '}'}

#637
case_clause/0.2 -> colon · : {'{'}

#638
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {'case' 'default' '}'}

#639
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4'}

#640
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {'case' 'default' '}'}

#641
case_selectors/0.1/0/0.0 -> comma case_selector · : {',' ':' '{'}

#642
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#643
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#644
case_selectors/0.2 -> comma · : {':' '{'}

#645
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#646
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#647
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#648
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#649
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#650
for_header/0.4 -> for_update · : {')'}

#651
for_update -> variable_updating_statement · : {')'}

#652
for_update -> func_call_statement · : {')'}

#653
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
array_type_specifier -> · 'array' less_than type_specifier array_type_specifier/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_specifier_without_ident : {'('}
callable -> · vec_prefix : {'('}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · decimal_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · hex_int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_specifier greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_specifier greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~' /0[xX][0-9a-fA-F]+[iu]?/}
type_specifier_without_ident -> · 'atomic' less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · 'bool' : {'('}
type_specifier_without_ident -> · array_type_specifier : {'('}
type_specifier_without_ident -> · float16 : {'('}
type_specifier_without_ident -> · float32 : {'('}
type_specifier_without_ident -> · int32 : {'('}
type_specifier_without_ident -> · mat_prefix less_than type_specifier greater_than : {'('}
type_specifier_without_ident -> · pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than : {'('}
type_specifier_without_ident -> · texture_and_sampler_types : {'('}
type_specifier_without_ident -> · uint32 : {'('}
type_specifier_without_ident -> · vec_prefix less_than type_specifier greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#654
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#655
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#656
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#3 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#4 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#5 global_decl -> semicolon ·
r#6 global_decl -> struct_decl ·
r#7 global_decl -> function_decl ·
r#8 semicolon -> ';' ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attr -> '@' ·
r#13 attribute -> attr 'const' ·
r#14 attribute -> attr 'invariant' ·
r#15 attribute -> attr 'vertex' ·
r#16 attribute -> attr 'fragment' ·
r#17 attribute -> attr 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 static_assert_statement -> 'static_assert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 minus -> '-' ·
r#35 bang -> '!' ·
r#36 tilde -> '~' ·
r#37 star -> '*' ·
r#38 and -> '&' ·
r#39 primary_expression -> ident ·
r#40 callable -> ident ·
r#41 primary_expression -> literal ·
r#42 primary_expression -> paren_expression ·
r#43 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#44 callable -> type_specifier_without_ident ·
r#45 callable -> vec_prefix ·
r#46 callable -> mat_prefix ·
r#47 callable -> 'array' ·
r#48 literal -> int_literal ·
r#49 literal -> float_literal ·
r#50 literal -> bool_literal ·
r#51 type_specifier_without_ident -> 'bool' ·
r#52 type_specifier_without_ident -> float32 ·
r#53 type_specifier_without_ident -> float16 ·
r#54 type_specifier_without_ident -> int32 ·
r#55 type_specifier_without_ident -> uint32 ·
r#56 type_specifier_without_ident -> array_type_specifier ·
r#57 type_specifier_without_ident -> texture_and_sampler_types ·
r#58 vec_prefix -> 'vec2' ·
r#59 vec_prefix -> 'vec3' ·
r#60 vec_prefix -> 'vec4' ·
r#61 mat_prefix -> 'mat2x2' ·
r#62 mat_prefix -> 'mat2x3' ·
r#63 mat_prefix -> 'mat2x4' ·
r#64 mat_prefix -> 'mat3x2' ·
r#65 mat_prefix -> 'mat3x3' ·
r#66 mat_prefix -> 'mat3x4' ·
r#67 mat_prefix -> 'mat4x2' ·
r#68 mat_prefix -> 'mat4x3' ·
r#69 mat_prefix -> 'mat4x4' ·
r#70 int_literal -> decimal_int_literal ·
r#71 int_literal -> hex_int_literal ·
r#72 float_literal -> decimal_float_literal ·
r#73 float_literal -> hex_float_literal ·
r#74 bool_literal -> 'true' ·
r#75 bool_literal -> 'false' ·
r#76 paren_left -> '(' ·
r#77 float32 -> 'f32' ·
r#78 float16 -> 'f16' ·
r#79 int32 -> 'i32' ·
r#80 uint32 -> 'u32' ·
r#81 pointer -> 'ptr' ·
r#82 texture_and_sampler_types -> sampler_type ·
r#83 texture_and_sampler_types -> depth_texture_type ·
r#84 decimal_int_literal -> /0[iu]?/ ·
r#85 decimal_int_literal -> /[1-9][0-9]*[iu]?/ ·
r#86 hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#87 decimal_float_literal -> /0[fh]/ ·
r#88 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#89 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#90 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#91 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#92 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#93 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#94 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#95 sampler_type -> 'sampler' ·
r#96 sampler_type -> 'sampler_comparison' ·
r#97 depth_texture_type -> 'texture_depth_2d' ·
r#98 depth_texture_type -> 'texture_depth_2d_array' ·
r#99 depth_texture_type -> 'texture_depth_cube' ·
r#100 depth_texture_type -> 'texture_depth_cube_array' ·
r#101 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#102 sampled_texture_type -> 'texture_1d' ·
r#103 sampled_texture_type -> 'texture_2d' ·
r#104 sampled_texture_type -> 'texture_2d_array' ·
r#105 sampled_texture_type -> 'texture_3d' ·
r#106 sampled_texture_type -> 'texture_cube' ·
r#107 sampled_texture_type -> 'texture_cube_array' ·
r#108 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#109 storage_texture_type -> 'texture_storage_1d' ·
r#110 storage_texture_type -> 'texture_storage_2d' ·
r#111 storage_texture_type -> 'texture_storage_2d_array' ·
r#112 storage_texture_type -> 'texture_storage_3d' ·
r#113 global_decl -> static_assert_statement semicolon ·
r#114 global_decl -> type_alias_decl semicolon ·
r#115 global_decl -> global_constant_decl semicolon ·
r#116 global_decl -> global_variable_decl semicolon ·
r#117 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#118 global_directive -> 'enable' extension_name semicolon ·
r#119 variable_decl/0.1 -> variable_qualifier ·
r#120 less_than -> '<' ·
r#121 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#122 equal -> '=' ·
r#123 optionally_typed_ident -> ident optionally_typed_ident/0.1 ·
r#124 colon -> ':' ·
r#125 struct_decl -> 'struct' ident struct_body_decl ·
r#126 brace_left -> '{' ·
r#127 function_decl -> function_decl/0.0 function_header compound_statement ·
r#128 primary_expression -> callable argument_expression_list ·
r#129 singular_expression -> primary_expression singular_expression/0.1 ·
r#130 singular_expression/0.1 -> component_or_swizzle_specifier ·
r#131 bracket_left -> '[' ·
r#132 unary_expression -> and unary_expression ·
r#133 unary_expression -> star unary_expression ·
r#134 unary_expression -> tilde unary_expression ·
r#135 unary_expression -> bang unary_expression ·
r#136 unary_expression -> minus unary_expression ·
r#137 multiplicative_operator -> star ·
r#138 multiplicative_operator -> forward_slash ·
r#139 multiplicative_operator -> modulo ·
r#140 forward_slash -> '/' ·
r#141 modulo -> '%' ·
r#142 shift_left -> '<<' ·
r#143 shift_right -> '>>' ·
r#144 additive_operator -> plus ·
r#145 additive_operator -> minus ·
r#146 plus -> '+' ·
r#147 xor -> '^' ·
r#148 or -> '|' ·
r#149 greater_than -> '>' ·
r#150 less_than_equal -> '<=' ·
r#151 greater_than_equal -> '>=' ·
r#152 equal_equal -> '==' ·
r#153 not_equal -> '!=' ·
r#154 and_and -> '&&' ·
r#155 or_or -> '||' ·
r#156 builtin_value_name -> 'vertex_index' ·
r#157 builtin_value_name -> 'instance_index' ·
r#158 builtin_value_name -> 'position' ·
r#159 builtin_value_name -> 'front_facing' ·
r#160 builtin_value_name -> 'frag_depth' ·
r#161 builtin_value_name -> 'local_invocation_id' ·
r#162 builtin_value_name -> 'local_invocation_index' ·
r#163 builtin_value_name -> 'global_invocation_id' ·
r#164 builtin_value_name -> 'workgroup_id' ·
r#165 builtin_value_name -> 'num_workgroups' ·
r#166 builtin_value_name -> 'sample_index' ·
r#167 builtin_value_name -> 'sample_mask' ·
r#168 interpolation_type_name -> 'perspective' ·
r#169 interpolation_type_name -> 'linear' ·
r#170 interpolation_type_name -> 'flat' ·
r#171 expression -> short_circuit_or_expression or_or relational_expression ·
r#172 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#173 expression -> short_circuit_and_expression and_and relational_expression ·
r#174 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#175 relational_expression -> shift_expression not_equal shift_expression ·
r#176 relational_expression -> shift_expression equal_equal shift_expression ·
r#177 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#178 relational_expression -> shift_expression less_than_equal shift_expression ·
r#179 relational_expression -> shift_expression greater_than shift_expression ·
r#180 relational_expression -> shift_expression less_than shift_expression ·
r#181 bitwise_expression -> binary_and_expression and unary_expression ·
r#182 binary_and_expression -> binary_and_expression and unary_expression ·
r#183 bitwise_expression -> binary_or_expression or unary_expression ·
r#184 binary_or_expression -> binary_or_expression or unary_expression ·
r#185 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#186 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#187 additive_expression -> additive_expression additive_operator multiplicative_expression ·
r#188 shift_expression -> unary_expression shift_right unary_expression ·
r#189 shift_expression -> unary_expression shift_left unary_expression ·
r#190 multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression ·
r#191 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#192 swizzle_name -> '/[rgba]/' ·
r#193 swizzle_name -> '/[rgba][rgba]/' ·
r#194 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#195 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#196 swizzle_name -> '/[xyzw]/' ·
r#197 swizzle_name -> '/[xyzw][xyzw]/' ·
r#198 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#199 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#200 type_specifier -> ident ·
r#201 type_specifier -> type_specifier_without_ident ·
r#202 paren_expression -> paren_left expression paren_right ·
r#203 paren_right -> ')' ·
r#204 address_space -> 'function' ·
r#205 address_space -> 'private' ·
r#206 address_space -> 'workgroup' ·
r#207 address_space -> 'uniform' ·
r#208 address_space -> 'storage' ·
r#209 texel_format -> 'rgba8unorm' ·
r#210 texel_format -> 'rgba8snorm' ·
r#211 texel_format -> 'rgba8uint' ·
r#212 texel_format -> 'rgba8sint' ·
r#213 texel_format -> 'rgba16uint' ·
r#214 texel_format -> 'rgba16sint' ·
r#215 texel_format -> 'rgba16float' ·
r#216 texel_format -> 'r32uint' ·
r#217 texel_format -> 'r32sint' ·
r#218 texel_format -> 'r32float' ·
r#219 texel_format -> 'rg32uint' ·
r#220 texel_format -> 'rg32sint' ·
r#221 texel_format -> 'rg32float' ·
r#222 texel_format -> 'rgba32uint' ·
r#223 texel_format -> 'rgba32sint' ·
r#224 texel_format -> 'rgba32float' ·
r#225 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#226 statement -> semicolon ·
r#227 statement -> if_statement ·
r#228 statement -> switch_statement ·
r#229 statement -> loop_statement ·
r#230 statement -> for_statement ·
r#231 statement -> while_statement ·
r#232 statement -> compound_statement ·
r#233 core_lhs_expression -> ident ·
r#234 variable_statement -> variable_decl ·
r#235 break_statement -> 'break' ·
r#236 continue_statement -> 'continue' ·
r#237 variable_updating_statement -> assignment_statement ·
r#238 variable_updating_statement -> increment_statement ·
r#239 variable_updating_statement -> decrement_statement ·
r#240 underscore -> '_' ·
r#241 type_alias_decl -> 'type' ident equal type_specifier ·
r#242 global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 ·
r#243 global_constant_decl -> 'const' optionally_typed_ident equal expression ·
r#244 optionally_typed_ident/0.1 -> colon type_specifier ·
r#245 global_variable_decl/0.2 -> equal expression ·
r#246 variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident ·
r#247 comma -> ',' ·
r#248 global_constant_decl/1.3 -> equal expression ·
r#249 struct_body_decl/0.2 -> struct_body_decl/0.2/0 ·
r#250 function_header/0.3 -> param_list ·
r#251 lhs_expression -> and lhs_expression ·
r#252 lhs_expression -> star lhs_expression ·
r#253 lhs_expression -> core_lhs_expression lhs_expression/0.1 ·
r#254 lhs_expression/0.1 -> component_or_swizzle_specifier ·
r#255 increment_statement -> lhs_expression plus_plus ·
r#256 decrement_statement -> lhs_expression minus_minus ·
r#257 assignment_statement/0.1 -> equal ·
r#258 assignment_statement/0.1 -> compound_assignment_operator ·
r#259 plus_plus -> '++' ·
r#260 minus_minus -> '--' ·
r#261 compound_assignment_operator -> plus_equal ·
r#262 compound_assignment_operator -> minus_equal ·
r#263 compound_assignment_operator -> times_equal ·
r#264 compound_assignment_operator -> division_equal ·
r#265 compound_assignment_operator -> modulo_equal ·
r#266 compound_assignment_operator -> and_equal ·
r#267 compound_assignment_operator -> or_equal ·
r#268 compound_assignment_operator -> xor_equal ·
r#269 compound_assignment_operator -> shift_right_equal ·
r#270 compound_assignment_operator -> shift_left_equal ·
r#271 plus_equal -> '+=' ·
r#272 minus_equal -> '-=' ·
r#273 times_equal -> '*=' ·
r#274 division_equal -> '/=' ·
r#275 modulo_equal -> '%=' ·
r#276 and_equal -> '&=' ·
r#277 or_equal -> '|=' ·
r#278 xor_equal -> '^=' ·
r#279 shift_right_equal -> '>>=' ·
r#280 shift_left_equal -> '<<=' ·
r#281 func_call_statement -> ident argument_expression_list ·
r#282 if_statement/0.1 -> if_statement/0.1/0 ·
r#283 return_statement -> 'return' return_statement/0.1 ·
r#284 return_statement/0.1 -> expression ·
r#285 statement -> static_assert_statement semicolon ·
r#286 statement -> variable_updating_statement semicolon ·
r#287 statement -> 'discard' semicolon ·
r#288 statement -> continue_statement semicolon ·
r#289 statement -> break_statement semicolon ·
r#290 statement -> variable_statement semicolon ·
r#291 statement -> func_call_statement semicolon ·
r#292 statement -> return_statement semicolon ·
r#293 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#294 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#295 brace_right -> '}' ·
r#296 texture_and_sampler_types -> multisampled_texture_type less_than type_specifier greater_than ·
r#297 texture_and_sampler_types -> sampled_texture_type less_than type_specifier greater_than ·
r#298 type_specifier_without_ident -> 'atomic' less_than type_specifier greater_than ·
r#299 type_specifier_without_ident -> mat_prefix less_than type_specifier greater_than ·
r#300 type_specifier_without_ident -> vec_prefix less_than type_specifier greater_than ·
r#301 argument_expression_list/0.1/0.1 -> argument_expression_list/0.1/0.1/0 ·
r#302 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#303 bracket_right -> ']' ·
r#304 component_or_swizzle_specifier -> period swizzle_name component_or_swizzle_specifier/2.2 ·
r#305 component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier ·
r#306 component_or_swizzle_specifier -> period member_ident component_or_swizzle_specifier/1.2 ·
r#307 component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier ·
r#308 attribute -> attr 'workgroup_size' paren_left expression attrib_end ·
r#309 attrib_end/0.0 -> comma ·
r#310 attribute -> attr 'size' paren_left expression attrib_end ·
r#311 attribute -> attr 'location' paren_left expression attrib_end ·
r#312 attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end ·
r#313 attribute -> attr 'id' paren_left expression attrib_end ·
r#314 attribute -> attr 'group' paren_left expression attrib_end ·
r#315 attribute -> attr 'builtin' paren_left builtin_value_name attrib_end ·
r#316 attribute -> attr 'binding' paren_left expression attrib_end ·
r#317 attribute -> attr 'align' paren_left expression attrib_end ·
r#318 interpolation_sample_name -> 'center' ·
r#319 interpolation_sample_name -> 'centroid' ·
r#320 interpolation_sample_name -> 'sample' ·
r#321 attrib_end -> attrib_end/0.0 paren_right ·
r#322 component_or_swizzle_specifier -> bracket_left expression bracket_right component_or_swizzle_specifier/0.3 ·
r#323 component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier ·
r#324 argument_expression_list/0.1/0.1/0/0.0 -> comma expression ·
r#325 argument_expression_list/0.1/0.1/0 -> argument_expression_list/0.1/0.1/0/0.0 argument_expression_list/0.1/0.1/0 ·
r#326 argument_expression_list/0.1 -> expression argument_expression_list/0.1/0.1 argument_expression_list/0.1/0.2 ·
r#327 argument_expression_list/0.1/0.2 -> comma ·
r#328 primary_expression -> 'bitcast' less_than type_specifier greater_than paren_expression ·
r#329 array_type_specifier/0.3 -> comma element_count_expression ·
r#330 element_count_expression -> additive_expression ·
r#331 element_count_expression -> bitwise_expression ·
r#332 array_type_specifier -> 'array' less_than type_specifier array_type_specifier/0.3 greater_than ·
r#333 access_mode -> 'read' ·
r#334 access_mode -> 'write' ·
r#335 access_mode -> 'read_write' ·
r#336 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#337 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#338 if_statement/0.2 -> else_clause ·
r#339 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#340 for_header/0.0 -> for_init ·
r#341 for_init -> variable_statement ·
r#342 for_init -> variable_updating_statement ·
r#343 for_init -> func_call_statement ·
r#344 while_statement -> 'while' expression compound_statement ·
r#345 variable_statement -> variable_decl equal expression ·
r#346 if_clause -> 'if' expression compound_statement ·
r#347 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#348 assignment_statement -> underscore equal expression ·
r#349 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#350 param_list/0.1 -> param_list/0.1/0 ·
r#351 struct_body_decl/0.2/0/0.0 -> comma struct_member ·
r#352 struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 ·
r#353 struct_body_decl/0.3 -> comma ·
r#354 variable_qualifier/0.2 -> comma access_mode ·
r#355 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#356 struct_member -> struct_member/0.0 member_ident colon type_specifier ·
r#357 struct_body_decl -> brace_left struct_member struct_body_decl/0.2 struct_body_decl/0.3 brace_right ·
r#358 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#359 arrow -> '->' ·
r#360 param_list/0.1/0/0.0 -> comma param ·
r#361 param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 ·
r#362 param_list -> param param_list/0.1 param_list/0.2 ·
r#363 param_list/0.2 -> comma ·
r#364 variable_statement -> 'const' optionally_typed_ident equal expression ·
r#365 variable_statement -> 'let' optionally_typed_ident equal expression ·
r#366 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#367 loop_statement/0.3 -> continuing_statement ·
r#368 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#369 switch_body -> case_clause ·
r#370 switch_body -> default_alone_clause ·
r#371 else_clause -> 'else' compound_statement ·
r#372 texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#373 attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end ·
r#374 attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end ·
r#375 type_specifier_without_ident/7.5 -> comma access_mode ·
r#376 type_specifier_without_ident -> pointer less_than address_space comma type_specifier type_specifier_without_ident/7.5 greater_than ·
r#377 else_if_clause -> 'else' 'if' expression compound_statement ·
r#378 default_alone_clause/0.1 -> colon ·
r#379 case_selector -> 'default' ·
r#380 case_selector -> expression ·
r#381 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#382 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#383 continuing_statement -> 'continuing' continuing_compound_statement ·
r#384 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#385 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#386 for_header/0.2 -> expression ·
r#387 param -> param/0.0 ident colon type_specifier ·
r#388 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#389 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#390 function_header/0.5 -> arrow function_header/0.5/0.1 type_specifier ·
r#391 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#392 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#393 case_clause/0.2 -> colon ·
r#394 default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement ·
r#395 attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end ·
r#396 case_clause -> 'case' case_selectors case_clause/0.2 compound_statement ·
r#397 case_selectors/0.1/0/0.0 -> comma case_selector ·
r#398 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#399 case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 ·
r#400 case_selectors/0.2 -> comma ·
r#401 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#402 continuing_compound_statement/0.2 -> break_if_statement ·
r#403 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#404 for_header/0.4 -> for_update ·
r#405 for_update -> variable_updating_statement ·
r#406 for_update -> func_call_statement ·
r#407 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#408 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#19
[#2 '@']: s#32
[#2 'const']: s#21
[#2 'static_assert']: s#26
[#2 'struct']: s#24
[#2 'type']: s#23
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'static_assert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#19
[#7 ';']: r#1
[#8 ';']: r#2
[#8 '@']: r#2
[#8 'const']: r#2
[#8 'fn']: r#2
[#8 'override']: r#2
[#8 'static_assert']: r#2
[#8 'struct']: r#2
[#8 'type']: r#2
[#8 'var']: r#2
[#8 EndOfText]: r#2
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 ';']: s#19
[#11 '@']: s#32
[#11 'const']: s#21
[#11 'static_assert']: s#26
[#11 'struct']: s#24
[#11 'type']: s#23
[#12 ';']: r#5
[#12 '@']: r#5
[#12 'const']: r#5
[#12 'fn']: r#5
[#12 'override']: r#5
[#12 'static_assert']: r#5
[#12 'struct']: r#5
[#12 'type']: r#5
[#12 'var']: r#5
[#12 EndOfText]: r#5
[#13 ';']: s#19
[#14 ';']: s#19
[#15 ';']: s#19
[#16 ';']: r#6
[#16 '@']: r#6
[#16 'const']: r#6
[#16 'fn']: r#6
[#16 'override']: r#6
[#16 'static_assert']: r#6
[#16 'struct']: r#6
[#16 'type']: r#6
[#16 'var']: r#6
[#16 EndOfText]: r#6
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'const']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'static_assert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#19
[#19 '!']: r#8
[#19 '&']: r#8
[#19 '(']: r#8
[#19 ')']: r#8
[#19 '*']: r#8
[#19 '-']: r#8
[#19 ';']: r#8
[#19 '@']: r#8
[#19 '_']: r#8
[#19 'array']: r#8
[#19 'atomic']: r#8
[#19 'bitcast']: r#8
[#19 'bool']: r#8
[#19 'break']: r#8
[#19 'const']: r#8
[#19 'continue']: r#8
[#19 'continuing']: r#8
[#19 'discard']: r#8
[#19 'enable']: r#8
[#19 'f16']: r#8
[#19 'f32']: r#8
[#19 'false']: r#8
[#19 'fn']: r#8
[#19 'for']: r#8
[#19 'i32']: r#8
[#19 'if']: r#8
[#19 'let']: r#8
[#19 'loop']: r#8
[#19 'mat2x2']: r#8
[#19 'mat2x3']: r#8
[#19 'mat2x4']: r#8
[#19 'mat3x2']: r#8
[#19 'mat3x3']: r#8
[#19 'mat3x4']: r#8
[#19 'mat4x2']: r#8
[#19 'mat4x3']: r#8
[#19 'mat4x4']: r#8
[#19 'override']: r#8
[#19 'ptr']: r#8
[#19 'return']: r#8
[#19 'sampler']: r#8
[#19 'sampler_comparison']: r#8
[#19 'static_assert']: r#8
[#19 'struct']: r#8
[#19 'switch']: r#8
[#19 'texture_1d']: r#8
[#19 'texture_2d']: r#8
[#19 'texture_2d_array']: r#8
[#19 'texture_3d']: r#8
[#19 'texture_cube']: r#8
[#19 'texture_cube_array']: r#8
[#19 'texture_depth_2d']: r#8
[#19 'texture_depth_2d_array']: r#8
[#19 'texture_depth_cube']: r#8
[#19 'texture_depth_cube_array']: r#8
[#19 'texture_depth_multisampled_2d']: r#8
[#19 'texture_multisampled_2d']: r#8
[#19 'texture_storage_1d']: r#8
[#19 'texture_storage_2d']: r#8
[#19 'texture_storage_2d_array']: r#8
[#19 'texture_storage_3d']: r#8
[#19 'true']: r#8
[#19 'type']: r#8
[#19 'u32']: r#8
[#19 'var']: r#8
[#19 'vec2']: r#8
[#19 'vec3']: r#8
[#19 'vec4']: r#8
[#19 'while']: r#8
[#19 '{']: r#8
[#19 '}']: r#8
[#19 '~']: r#8
[#19 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#8
[#19 /0[xX][0-9a-fA-F]+[iu]?/]: r#8
[#19 EndOfText]: r#8
[#20 'var']: s#163
[#21 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#22 'override']: s#159
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#25 'fn']: s#156
[#26 '!']: s#70
[#26 '&']: s#73
[#26 '(']: s#115
[#26 '*']: s#72
[#26 '-']: s#69
[#26 'array']: s#83
[#26 'atomic']: s#95
[#26 'bitcast']: s#78
[#26 'bool']: s#88
[#26 'f16']: s#117
[#26 'f32']: s#116
[#26 'false']: s#114
[#26 'i32']: s#118
[#26 'mat2x2']: s#100
[#26 'mat2x3']: s#101
[#26 'mat2x4']: s#102
[#26 'mat3x2']: s#103
[#26 'mat3x3']: s#104
[#26 'mat3x4']: s#105
[#26 'mat4x2']: s#106
[#26 'mat4x3']: s#107
[#26 'mat4x4']: s#108
[#26 'ptr']: s#120
[#26 'sampler']: s#137
[#26 'sampler_comparison']: s#138
[#26 'texture_1d']: s#144
[#26 'texture_2d']: s#145
[#26 'texture_2d_array']: s#146
[#26 'texture_3d']: s#147
[#26 'texture_cube']: s#148
[#26 'texture_cube_array']: s#149
[#26 'texture_depth_2d']: s#139
[#26 'texture_depth_2d_array']: s#140
[#26 'texture_depth_cube']: s#141
[#26 'texture_depth_cube_array']: s#142
[#26 'texture_depth_multisampled_2d']: s#143
[#26 'texture_multisampled_2d']: s#150
[#26 'texture_storage_1d']: s#151
[#26 'texture_storage_2d']: s#152
[#26 'texture_storage_2d_array']: s#153
[#26 'texture_storage_3d']: s#154
[#26 'true']: s#113
[#26 'u32']: s#119
[#26 'vec2']: s#97
[#26 'vec3']: s#98
[#26 'vec4']: s#99
[#26 '~']: s#71
[#26 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#26 /0[fh]/]: s#129
[#26 /0[iu]?/]: s#126
[#26 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#26 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#26 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#26 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#26 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#26 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#26 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#26 /[1-9][0-9]*[fh]/]: s#130
[#26 /[1-9][0-9]*[iu]?/]: s#127
[#27 'var']: r#9
[#28 'override']: r#10
[#29 'fn']: r#11
[#30 '@']: s#32
[#31 'align']: s#33
[#31 'binding']: s#34
[#31 'builtin']: s#35
[#31 'compute']: s#46
[#31 'const']: s#36
[#31 'fragment']: s#45
[#31 'group']: s#37
[#31 'id']: s#38
[#31 'interpolate']: s#39
[#31 'invariant']: s#40
[#31 'location']: s#41
[#31 'size']: s#42
[#31 'vertex']: s#44
[#31 'workgroup_size']: s#43
[#32 'const']: r#12
[#33 '(']: s#115
[#34 '(']: s#115
[#35 '(']: s#115
[#36 '@']: r#13
[#36 'array']: r#13
[#36 'atomic']: r#13
[#36 'bool']: r#13
[#36 'f16']: r#13
[#36 'f32']: r#13
[#36 'fn']: r#13
[#36 'i32']: r#13
[#36 'mat2x2']: r#13
[#36 'mat2x3']: r#13
[#36 'mat2x4']: r#13
[#36 'mat3x2']: r#13
[#36 'mat3x3']: r#13
[#36 'mat3x4']: r#13
[#36 'mat4x2']: r#13
[#36 'mat4x3']: r#13
[#36 'mat4x4']: r#13
[#36 'override']: r#13
[#36 'ptr']: r#13
[#36 'sampler']: r#13
[#36 'sampler_comparison']: r#13
[#36 'texture_1d']: r#13
[#36 'texture_2d']: r#13
[#36 'texture_2d_array']: r#13
[#36 'texture_3d']: r#13
[#36 'texture_cube']: r#13
[#36 'texture_cube_array']: r#13
[#36 'texture_depth_2d']: r#13
[#36 'texture_depth_2d_array']: r#13
[#36 'texture_depth_cube']: r#13
[#36 'texture_depth_cube_array']: r#13
[#36 'texture_depth_multisampled_2d']: r#13
[#36 'texture_multisampled_2d']: r#13
[#36 'texture_storage_1d']: r#13
[#36 'texture_storage_2d']: r#13
[#36 'texture_storage_2d_array']: r#13
[#36 'texture_storage_3d']: r#13
[#36 'u32']: r#13
[#36 'var']: r#13
[#36 'vec2']: r#13
[#36 'vec3']: r#13
[#36 'vec4']: r#13
[#37 '(']: s#115
[#38 '(']: s#115
[#39 '(']: s#115
[#40 '@']: r#14
[#40 'array']: r#14
[#40 'atomic']: r#14
[#40 'bool']: r#14
[#40 'f16']: r#14
[#40 'f32']: r#14
[#40 'fn']: r#14
[#40 'i32']: r#14
[#40 'mat2x2']: r#14
[#40 'mat2x3']: r#14
[#40 'mat2x4']: r#14
[#40 'mat3x2']: r#14
[#40 'mat3x3']: r#14
[#40 'mat3x4']: r#14
[#40 'mat4x2']: r#14
[#40 'mat4x3']: r#14
[#40 'mat4x4']: r#14
[#40 'override']: r#14
[#40 'ptr']: r#14
[#40 'sampler']: r#14
[#40 'sampler_comparison']: r#14
[#40 'texture_1d']: r#14
[#40 'texture_2d']: r#14
[#40 'texture_2d_array']: r#14
[#40 'texture_3d']: r#14
[#40 'texture_cube']: r#14
[#40 'texture_cube_array']: r#14
[#40 'texture_depth_2d']: r#14
[#40 'texture_depth_2d_array']: r#14
[#40 'texture_depth_cube']: r#14
[#40 'texture_depth_cube_array']: r#14
[#40 'texture_depth_multisampled_2d']: r#14
[#40 'texture_multisampled_2d']: r#14
[#40 'texture_storage_1d']: r#14
[#40 'texture_storage_2d']: r#14
[#40 'texture_storage_2d_array']: r#14
[#40 'texture_storage_3d']: r#14
[#40 'u32']: r#14
[#40 'var']: r#14
[#40 'vec2']: r#14
[#40 'vec3']: r#14
[#40 'vec4']: r#14
[#41 '(']: s#115
[#42 '(']: s#115
[#43 '(']: s#115
[#44 '@']: r#15
[#44 'array']: r#15
[#44 'atomic']: r#15
[#44 'bool']: r#15
[#44 'f16']: r#15
[#44 'f32']: r#15
[#44 'fn']: r#15
[#44 'i32']: r#15
[#44 'mat2x2']: r#15
[#44 'mat2x3']: r#15
[#44 'mat2x4']: r#15
[#44 'mat3x2']: r#15
[#44 'mat3x3']: r#15
[#44 'mat3x4']: r#15
[#44 'mat4x2']: r#15
[#44 'mat4x3']: r#15
[#44 'mat4x4']: r#15
[#44 'override']: r#15
[#44 'ptr']: r#15
[#44 'sampler']: r#15
[#44 'sampler_comparison']: r#15
[#44 'texture_1d']: r#15
[#44 'texture_2d']: r#15
[#44 'texture_2d_array']: r#15
[#44 'texture_3d']: r#15
[#44 'texture_cube']: r#15
[#44 'texture_cube_array']: r#15
[#44 'texture_depth_2d']: r#15
[#44 'texture_depth_2d_array']: r#15
[#44 'texture_depth_cube']: r#15
[#44 'texture_depth_cube_array']: r#15
[#44 'texture_depth_multisampled_2d']: r#15
[#44 'texture_multisampled_2d']: r#15
[#44 'texture_storage_1d']: r#15
[#44 'texture_storage_2d']: r#15
[#44 'texture_storage_2d_array']: r#15
[#44 'texture_storage_3d']: r#15
[#44 'u32']: r#15
[#44 'var']: r#15
[#44 'vec2']: r#15
[#44 'vec3']: r#15
[#44 'vec4']: r#15
[#45 '@']: r#16
[#45 'array']: r#16
[#45 'atomic']: r#16
[#45 'bool']: r#16
[#45 'f16']: r#16
[#45 'f32']: r#16
[#45 'fn']: r#16
[#45 'i32']: r#16
[#45 'mat2x2']: r#16
[#45 'mat2x3']: r#16
[#45 'mat2x4']: r#16
[#45 'mat3x2']: r#16
[#45 'mat3x3']: r#16
[#45 'mat3x4']: r#16
[#45 'mat4x2']: r#16
[#45 'mat4x3']: r#16
[#45 'mat4x4']: r#16
[#45 'override']: r#16
[#45 'ptr']: r#16
[#45 'sampler']: r#16
[#45 'sampler_comparison']: r#16
[#45 'texture_1d']: r#16
[#45 'texture_2d']: r#16
[#45 'texture_2d_array']: r#16
[#45 'texture_3d']: r#16
[#45 'texture_cube']: r#16
[#45 'texture_cube_array']: r#16
[#45 'texture_depth_2d']: r#16
[#45 'texture_depth_2d_array']: r#16
[#45 'texture_depth_cube']: r#16
[#45 'texture_depth_cube_array']: r#16
[#45 'texture_depth_multisampled_2d']: r#16
[#45 'texture_multisampled_2d']: r#16
[#45 'texture_storage_1d']: r#16
[#45 'texture_storage_2d']: r#16
[#45 'texture_storage_2d_array']: r#16
[#45 'texture_storage_3d']: r#16
[#45 'u32']: r#16
[#45 'var']: r#16
[#45 'vec2']: r#16
[#45 'vec3']: r#16
[#45 'vec4']: r#16
[#46 '@']: r#17
[#46 'array']: r#17
[#46 'atomic']: r#17
[#46 'bool']: r#17
[#46 'f16']: r#17
[#46 'f32']: r#17
[#46 'fn']: r#17
[#46 'i32']: r#17
[#46 'mat2x2']: r#17
[#46 'mat2x3']: r#17
[#46 'mat2x4']: r#17
[#46 'mat3x2']: r#17
[#46 'mat3x3']: r#17
[#46 'mat3x4']: r#17
[#46 'mat4x2']: r#17
[#46 'mat4x3']: r#17
[#46 'mat4x4']: r#17
[#46 'override']: r#17
[#46 'ptr']: r#17
[#46 'sampler']: r#17
[#46 'sampler_comparison']: r#17
[#46 'texture_1d']: r#17
[#46 'texture_2d']: r#17
[#46 'texture_2d_array']: r#17
[#46 'texture_3d']: r#17
[#46 'texture_cube']: r#17
[#46 'texture_cube_array']: r#17
[#46 'texture_depth_2d']: r#17
[#46 'texture_depth_2d_array']: r#17
[#46 'texture_depth_cube']: r#17
[#46 'texture_depth_cube_array']: r#17
[#46 'texture_depth_multisampled_2d']: r#17
[#46 'texture_multisampled_2d']: r#17
[#46 'texture_storage_1d']: r#17
[#46 'texture_storage_2d']: r#17
[#46 'texture_storage_2d_array']: r#17
[#46 'texture_storage_3d']: r#17
[#46 'u32']: r#17
[#46 'var']: r#17
[#46 'vec2']: r#17
[#46 'vec3']: r#17
[#46 'vec4']: r#17
[#47 'var']: r#18
[#48 'override']: r#19
[#49 'fn']: r#20
[#50 ';']: r#21
[#51 '&&']: r#24
[#51 ')']: r#22
[#51 ',']: r#22
[#51 ':']: r#22
[#51 ';']: r#22
[#51 ']']: r#22
[#51 '{']: r#22
[#51 '||']: r#23
[#52 '||']: s#245
[#53 '&&']: s#243
[#54 ')']: r#25
[#54 ',']: r#25
[#54 ':']: r#25
[#54 ';']: r#25
[#54 ']']: r#25
[#54 '{']: r#25
[#55 '!=']: s#241
[#55 '&&']: r#26
[#55 ')']: r#26
[#55 ',']: r#26
[#55 ':']: r#26
[#55 ';']: r#26
[#55 '<']: s#173
[#55 '<=']: s#238
[#55 '==']: s#240
[#55 '>']: s#237
[#55 '>=']: s#239
[#55 ']']: r#26
[#55 '{']: r#26
[#55 '||']: r#26
[#56 '&']: s#73
[#57 '|']: s#229
[#58 '^']: s#227
[#59 '!=']: r#27
[#59 '&&']: r#27
[#59 ')']: r#27
[#59 '+']: s#225
[#59 ',']: r#27
[#59 '-']: s#69
[#59 ':']: r#27
[#59 ';']: r#27
[#59 '<']: r#27
[#59 '<=']: r#27
[#59 '==']: r#27
[#59 '>']: r#27
[#59 '>=']: r#27
[#59 ']']: r#27
[#59 '{']: r#27
[#59 '||']: r#27
[#60 '!=']: r#31
[#60 '%']: r#31
[#60 '&&']: r#31
[#60 '&']: r#28
[#60 ')']: r#31
[#60 '*']: r#31
[#60 '+']: r#31
[#60 ',']: r#31
[#60 '-']: r#31
[#60 '/']: r#31
[#60 ':']: r#31
[#60 ';']: r#31
[#60 '<']: r#31
[#60 '<<']: s#220
[#60 '<=']: r#31
[#60 '==']: r#31
[#60 '>']: r#31
[#60 '>=']: r#31
[#60 '>>']: s#221
[#60 ']']: r#31
[#60 '^']: r#30
[#60 '{']: r#31
[#60 '|']: r#29
[#60 '||']: r#31
[#61 '!=']: r#32
[#61 '%']: s#217
[#61 '&&']: r#32
[#61 ')']: r#32
[#61 '*']: s#72
[#61 '+']: r#32
[#61 ',']: r#32
[#61 '-']: r#32
[#61 '/']: s#216
[#61 ':']: r#32
[#61 ';']: r#32
[#61 '<']: r#32
[#61 '<=']: r#32
[#61 '==']: r#32
[#61 '>']: r#32
[#61 '>=']: r#32
[#61 ']']: r#32
[#61 '{']: r#32
[#61 '||']: r#32
[#62 '!=']: r#33
[#62 '%']: r#33
[#62 '&&']: r#33
[#62 '&']: r#33
[#62 ')']: r#33
[#62 '*']: r#33
[#62 '+']: r#33
[#62 ',']: r#33
[#62 '-']: r#33
[#62 '/']: r#33
[#62 ':']: r#33
[#62 ';']: r#33
[#62 '<']: r#33
[#62 '<<']: r#33
[#62 '<=']: r#33
[#62 '==']: r#33
[#62 '>']: r#33
[#62 '>=']: r#33
[#62 '>>']: r#33
[#62 ']']: r#33
[#62 '^']: r#33
[#62 '{']: r#33
[#62 '|']: r#33
[#62 '||']: r#33
[#63 '!']: s#70
[#63 '&']: s#73
[#63 '(']: s#115
[#63 '*']: s#72
[#63 '-']: s#69
[#63 'array']: s#83
[#63 'atomic']: s#95
[#63 'bitcast']: s#78
[#63 'bool']: s#88
[#63 'f16']: s#117
[#63 'f32']: s#116
[#63 'false']: s#114
[#63 'i32']: s#118
[#63 'mat2x2']: s#100
[#63 'mat2x3']: s#101
[#63 'mat2x4']: s#102
[#63 'mat3x2']: s#103
[#63 'mat3x3']: s#104
[#63 'mat3x4']: s#105
[#63 'mat4x2']: s#106
[#63 'mat4x3']: s#107
[#63 'mat4x4']: s#108
[#63 'ptr']: s#120
[#63 'sampler']: s#137
[#63 'sampler_comparison']: s#138
[#63 'texture_1d']: s#144
[#63 'texture_2d']: s#145
[#63 'texture_2d_array']: s#146
[#63 'texture_3d']: s#147
[#63 'texture_cube']: s#148
[#63 'texture_cube_array']: s#149
[#63 'texture_depth_2d']: s#139
[#63 'texture_depth_2d_array']: s#140
[#63 'texture_depth_cube']: s#141
[#63 'texture_depth_cube_array']: s#142
[#63 'texture_depth_multisampled_2d']: s#143
[#63 'texture_multisampled_2d']: s#150
[#63 'texture_storage_1d']: s#151
[#63 'texture_storage_2d']: s#152
[#63 'texture_storage_2d_array']: s#153
[#63 'texture_storage_3d']: s#154
[#63 'true']: s#113
[#63 'u32']: s#119
[#63 'vec2']: s#97
[#63 'vec3']: s#98
[#63 'vec4']: s#99
[#63 '~']: s#71
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#63 /0[fh]/]: s#129
[#63 /0[iu]?/]: s#126
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#63 /[1-9][0-9]*[fh]/]: s#130
[#63 /[1-9][0-9]*[iu]?/]: s#127
[#64 '!']: s#70
[#64 '&']: s#73
[#64 '(']: s#115
[#64 '*']: s#72
[#64 '-']: s#69
[#64 'array']: s#83
[#64 'atomic']: s#95
[#64 'bitcast']: s#78
[#64 'bool']: s#88
[#64 'f16']: s#117
[#64 'f32']: s#116
[#64 'false']: s#114
[#64 'i32']: s#118
[#64 'mat2x2']: s#100
[#64 'mat2x3']: s#101
[#64 'mat2x4']: s#102
[#64 'mat3x2']: s#103
[#64 'mat3x3']: s#104
[#64 'mat3x4']: s#105
[#64 'mat4x2']: s#106
[#64 'mat4x3']: s#107
[#64 'mat4x4']: s#108
[#64 'ptr']: s#120
[#64 'sampler']: s#137
[#64 'sampler_comparison']: s#138
[#64 'texture_1d']: s#144
[#64 'texture_2d']: s#145
[#64 'texture_2d_array']: s#146
[#64 'texture_3d']: s#147
[#64 'texture_cube']: s#148
[#64 'texture_cube_array']: s#149
[#64 'texture_depth_2d']: s#139
[#64 'texture_depth_2d_array']: s#140
[#64 'texture_depth_cube']: s#141
[#64 'texture_depth_cube_array']: s#142
[#64 'texture_depth_multisampled_2d']: s#143
[#64 'texture_multisampled_2d']: s#150
[#64 'texture_storage_1d']: s#151
[#64 'texture_storage_2d']: s#152
[#64 'texture_storage_2d_array']: s#153
[#64 'texture_storage_3d']: s#154
[#64 'true']: s#113
[#64 'u32']: s#119
[#64 'vec2']: s#97
[#64 'vec3']: s#98
[#64 'vec4']: s#99
[#64 '~']: s#71
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#64 /0[fh]/]: s#129
[#64 /0[iu]?/]: s#126
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#64 /[1-9][0-9]*[fh]/]: s#130
[#64 /[1-9][0-9]*[iu]?/]: s#127
[#65 '!']: s#70
[#65 '&']: s#73
[#65 '(']: s#115
[#65 '*']: s#72
[#65 '-']: s#69
[#65 'array']: s#83
[#65 'atomic']: s#95
[#65 'bitcast']: s#78
[#65 'bool']: s#88
[#65 'f16']: s#117
[#65 'f32']: s#116
[#65 'false']: s#114
[#65 'i32']: s#118
[#65 'mat2x2']: s#100
[#65 'mat2x3']: s#101
[#65 'mat2x4']: s#102
[#65 'mat3x2']: s#103
[#65 'mat3x3']: s#104
[#65 'mat3x4']: s#105
[#65 'mat4x2']: s#106
[#65 'mat4x3']: s#107
[#65 'mat4x4']: s#108
[#65 'ptr']: s#120
[#65 'sampler']: s#137
[#65 'sampler_comparison']: s#138
[#65 'texture_1d']: s#144
[#65 'texture_2d']: s#145
[#65 'texture_2d_array']: s#146
[#65 'texture_3d']: s#147
[#65 'texture_cube']: s#148
[#65 'texture_cube_array']: s#149
[#65 'texture_depth_2d']: s#139
[#65 'texture_depth_2d_array']: s#140
[#65 'texture_depth_cube']: s#141
[#65 'texture_depth_cube_array']: s#142
[#65 'texture_depth_multisampled_2d']: s#143
[#65 'texture_multisampled_2d']: s#150
[#65 'texture_storage_1d']: s#151
[#65 'texture_storage_2d']: s#152
[#65 'texture_storage_2d_array']: s#153
[#65 'texture_storage_3d']: s#154
[#65 'true']: s#113
[#65 'u32']: s#119
[#65 'vec2']: s#97
[#65 'vec3']: s#98
[#65 'vec4']: s#99
[#65 '~']: s#71
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#65 /0[fh]/]: s#129
[#65 /0[iu]?/]: s#126
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#65 /[1-9][0-9]*[fh]/]: s#130
[#65 /[1-9][0-9]*[iu]?/]: s#127
[#66 '!']: s#70
[#66 '&']: s#73
[#66 '(']: s#115
[#66 '*']: s#72
[#66 '-']: s#69
[#66 'array']: s#83
[#66 'atomic']: s#95
[#66 'bitcast']: s#78
[#66 'bool']: s#88
[#66 'f16']: s#117
[#66 'f32']: s#116
[#66 'false']: s#114
[#66 'i32']: s#118
[#66 'mat2x2']: s#100
[#66 'mat2x3']: s#101
[#66 'mat2x4']: s#102
[#66 'mat3x2']: s#103
[#66 'mat3x3']: s#104
[#66 'mat3x4']: s#105
[#66 'mat4x2']: s#106
[#66 'mat4x3']: s#107
[#66 'mat4x4']: s#108
[#66 'ptr']: s#120
[#66 'sampler']: s#137
[#66 'sampler_comparison']: s#138
[#66 'texture_1d']: s#144
[#66 'texture_2d']: s#145
[#66 'texture_2d_array']: s#146
[#66 'texture_3d']: s#147
[#66 'texture_cube']: s#148
[#66 'texture_cube_array']: s#149
[#66 'texture_depth_2d']: s#139
[#66 'texture_depth_2d_array']: s#140
[#66 'texture_depth_cube']: s#141
[#66 'texture_depth_cube_array']: s#142
[#66 'texture_depth_multisampled_2d']: s#143
[#66 'texture_multisampled_2d']: s#150
[#66 'texture_storage_1d']: s#151
[#66 'texture_storage_2d']: s#152
[#66 'texture_storage_2d_array']: s#153
[#66 'texture_storage_3d']: s#154
[#66 'true']: s#113
[#66 'u32']: s#119
[#66 'vec2']: s#97
[#66 'vec3']: s#98
[#66 'vec4']: s#99
[#66 '~']: s#71
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#66 /0[fh]/]: s#129
[#66 /0[iu]?/]: s#126
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#66 /[1-9][0-9]*[fh]/]: s#130
[#66 /[1-9][0-9]*[iu]?/]: s#127
[#67 '!']: s#70
[#67 '&']: s#73
[#67 '(']: s#115
[#67 '*']: s#72
[#67 '-']: s#69
[#67 'array']: s#83
[#67 'atomic']: s#95
[#67 'bitcast']: s#78
[#67 'bool']: s#88
[#67 'f16']: s#117
[#67 'f32']: s#116
[#67 'false']: s#114
[#67 'i32']: s#118
[#67 'mat2x2']: s#100
[#67 'mat2x3']: s#101
[#67 'mat2x4']: s#102
[#67 'mat3x2']: s#103
[#67 'mat3x3']: s#104
[#67 'mat3x4']: s#105
[#67 'mat4x2']: s#106
[#67 'mat4x3']: s#107
[#67 'mat4x4']: s#108
[#67 'ptr']: s#120
[#67 'sampler']: s#137
[#67 'sampler_comparison']: s#138
[#67 'texture_1d']: s#144
[#67 'texture_2d']: s#145
[#67 'texture_2d_array']: s#146
[#67 'texture_3d']: s#147
[#67 'texture_cube']: s#148
[#67 'texture_cube_array']: s#149
[#67 'texture_depth_2d']: s#139
[#67 'texture_depth_2d_array']: s#140
[#67 'texture_depth_cube']: s#141
[#67 'texture_depth_cube_array']: s#142
[#67 'texture_depth_multisampled_2d']: s#143
[#67 'texture_multisampled_2d']: s#150
[#67 'texture_storage_1d']: s#151
[#67 'texture_storage_2d']: s#152
[#67 'texture_storage_2d_array']: s#153
[#67 'texture_storage_3d']: s#154
[#67 'true']: s#113
[#67 'u32']: s#119
[#67 'vec2']: s#97
[#67 'vec3']: s#98
[#67 'vec4']: s#99
[#67 '~']: s#71
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#67 /0[fh]/]: s#129
[#67 /0[iu]?/]: s#126
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#67 /[1-9][0-9]*[fh]/]: s#130
[#67 /[1-9][0-9]*[iu]?/]: s#127
[#68 '.']: s#206
[#68 '[']: s#205
[#69 '!']: r#34
[#69 '&']: r#34
[#69 '(']: r#34
[#69 '*']: r#34
[#69 '-']: r#34
[#69 'array']: r#34
[#69 'atomic']: r#34
[#69 'bitcast']: r#34
[#69 'bool']: r#34
[#69 'f16']: r#34
[#69 'f32']: r#34
[#69 'false']: r#34
[#69 'i32']: r#34
[#69 'mat2x2']: r#34
[#69 'mat2x3']: r#34
[#69 'mat2x4']: r#34
[#69 'mat3x2']: r#34
[#69 'mat3x3']: r#34
[#69 'mat3x4']: r#34
[#69 'mat4x2']: r#34
[#69 'mat4x3']: r#34
[#69 'mat4x4']: r#34
[#69 'ptr']: r#34
[#69 'sampler']: r#34
[#69 'sampler_comparison']: r#34
[#69 'texture_1d']: r#34
[#69 'texture_2d']: r#34
[#69 'texture_2d_array']: r#34
[#69 'texture_3d']: r#34
[#69 'texture_cube']: r#34
[#69 'texture_cube_array']: r#34
[#69 'texture_depth_2d']: r#34
[#69 'texture_depth_2d_array']: r#34
[#69 'texture_depth_cube']: r#34
[#69 'texture_depth_cube_array']: r#34
[#69 'texture_depth_multisampled_2d']: r#34
[#69 'texture_multisampled_2d']: r#34
[#69 'texture_storage_1d']: r#34
[#69 'texture_storage_2d']: r#34
[#69 'texture_storage_2d_array']: r#34
[#69 'texture_storage_3d']: r#34
[#69 'true']: r#34
[#69 'u32']: r#34
[#69 'vec2']: r#34
[#69 'vec3']: r#34
[#69 'vec4']: r#34
[#69 '~']: r#34
[#69 /0[xX][0-9a-fA-F]+[iu]?/]: r#34
[#70 '!']: r#35
[#70 '&']: r#35
[#70 '(']: r#35
[#70 '*']: r#35
[#70 '-']: r#35
[#70 'array']: r#35
[#70 'atomic']: r#35
[#70 'bitcast']: r#35
[#70 'bool']: r#35
[#70 'f16']: r#35
[#70 'f32']: r#35
[#70 'false']: r#35
[#70 'i32']: r#35
[#70 'mat2x2']: r#35
[#70 'mat2x3']: r#35
[#70 'mat2x4']: r#35
[#70 'mat3x2']: r#35
[#70 'mat3x3']: r#35
[#70 'mat3x4']: r#35
[#70 'mat4x2']: r#35
[#70 'mat4x3']: r#35
[#70 'mat4x4']: r#35
[#70 'ptr']: r#35
[#70 'sampler']: r#35
[#70 'sampler_comparison']: r#35
[#70 'texture_1d']: r#35
[#70 'texture_2d']: r#35
[#70 'texture_2d_array']: r#35
[#70 'texture_3d']: r#35
[#70 'texture_cube']: r#35
[#70 'texture_cube_array']: r#35
[#70 'texture_depth_2d']: r#35
[#70 'texture_depth_2d_array']: r#35
[#70 'texture_depth_cube']: r#35
[#70 'texture_depth_cube_array']: r#35
[#70 'texture_depth_multisampled_2d']: r#35
[#70 'texture_multisampled_2d']: r#35
[#70 'texture_storage_1d']: r#35
[#70 'texture_storage_2d']: r#35
[#70 'texture_storage_2d_array']: r#35
[#70 'texture_storage_3d']: r#35
[#70 'true']: r#35
[#70 'u32']: r#35
[#70 'vec2']: r#35
[#70 'vec3']: r#35
[#70 'vec4']: r#35
[#70 '~']: r#35
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: r#35
[#71 '!']: r#36
[#71 '&']: r#36
[#71 '(']: r#36
[#71 '*']: r#36
[#71 '-']: r#36
[#71 'array']: r#36
[#71 'atomic']: r#36
[#71 'bitcast']: r#36
[#71 'bool']: r#36
[#71 'f16']: r#36
[#71 'f32']: r#36
[#71 'false']: r#36
[#71 'i32']: r#36
[#71 'mat2x2']: r#36
[#71 'mat2x3']: r#36
[#71 'mat2x4']: r#36
[#71 'mat3x2']: r#36
[#71 'mat3x3']: r#36
[#71 'mat3x4']: r#36
[#71 'mat4x2']: r#36
[#71 'mat4x3']: r#36
[#71 'mat4x4']: r#36
[#71 'ptr']: r#36
[#71 'sampler']: r#36
[#71 'sampler_comparison']: r#36
[#71 'texture_1d']: r#36
[#71 'texture_2d']: r#36
[#71 'texture_2d_array']: r#36
[#71 'texture_3d']: r#36
[#71 'texture_cube']: r#36
[#71 'texture_cube_array']: r#36
[#71 'texture_depth_2d']: r#36
[#71 'texture_depth_2d_array']: r#36
[#71 'texture_depth_cube']: r#36
[#71 'texture_depth_cube_array']: r#36
[#71 'texture_depth_multisampled_2d']: r#36
[#71 'texture_multisampled_2d']: r#36
[#71 'texture_storage_1d']: r#36
[#71 'texture_storage_2d']: r#36
[#71 'texture_storage_2d_array']: r#36
[#71 'texture_storage_3d']: r#36
[#71 'true']: r#36
[#71 'u32']: r#36
[#71 'vec2']: r#36
[#71 'vec3']: r#36
[#71 'vec4']: r#36
[#71 '~']: r#36
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: r#36
[#72 '!']: r#37
[#72 '&']: r#37
[#72 '(']: r#37
[#72 '*']: r#37
[#72 '-']: r#37
[#72 'array']: r#37
[#72 'atomic']: r#37
[#72 'bitcast']: r#37
[#72 'bool']: r#37
[#72 'f16']: r#37
[#72 'f32']: r#37
[#72 'false']: r#37
[#72 'i32']: r#37
[#72 'mat2x2']: r#37
[#72 'mat2x3']: r#37
[#72 'mat2x4']: r#37
[#72 'mat3x2']: r#37
[#72 'mat3x3']: r#37
[#72 'mat3x4']: r#37
[#72 'mat4x2']: r#37
[#72 'mat4x3']: r#37
[#72 'mat4x4']: r#37
[#72 'ptr']: r#37
[#72 'sampler']: r#37
[#72 'sampler_comparison']: r#37
[#72 'texture_1d']: r#37
[#72 'texture_2d']: r#37
[#72 'texture_2d_array']: r#37
[#72 'texture_3d']: r#37
[#72 'texture_cube']: r#37
[#72 'texture_cube_array']: r#37
[#72 'texture_depth_2d']: r#37
[#72 'texture_depth_2d_array']: r#37
[#72 'texture_depth_cube']: r#37
[#72 'texture_depth_cube_array']: r#37
[#72 'texture_depth_multisampled_2d']: r#37
[#72 'texture_multisampled_2d']: r#37
[#72 'texture_storage_1d']: r#37
[#72 'texture_storage_2d']: r#37
[#72 'texture_storage_2d_array']: r#37
[#72 'texture_storage_3d']: r#37
[#72 'true']: r#37
[#72 'u32']: r#37
[#72 'vec2']: r#37
[#72 'vec3']: r#37
[#72 'vec4']: r#37
[#72 '~']: r#37
[#72 /0[xX][0-9a-fA-F]+[iu]?/]: r#37
[#73 '!']: r#38
[#73 '&']: r#38
[#73 '(']: r#38
[#73 '*']: r#38
[#73 '-']: r#38
[#73 'array']: r#38
[#73 'atomic']: r#38
[#73 'bitcast']: r#38
[#73 'bool']: r#38
[#73 'f16']: r#38
[#73 'f32']: r#38
[#73 'false']: r#38
[#73 'i32']: r#38
[#73 'mat2x2']: r#38
[#73 'mat2x3']: r#38
[#73 'mat2x4']: r#38
[#73 'mat3x2']: r#38
[#73 'mat3x3']: r#38
[#73 'mat3x4']: r#38
[#73 'mat4x2']: r#38
[#73 'mat4x3']: r#38
[#73 'mat4x4']: r#38
[#73 'ptr']: r#38
[#73 'sampler']: r#38
[#73 'sampler_comparison']: r#38
[#73 'texture_1d']: r#38
[#73 'texture_2d']: r#38
[#73 'texture_2d_array']: r#38
[#73 'texture_3d']: r#38
[#73 'texture_cube']: r#38
[#73 'texture_cube_array']: r#38
[#73 'texture_depth_2d']: r#38
[#73 'texture_depth_2d_array']: r#38
[#73 'texture_depth_cube']: r#38
[#73 'texture_depth_cube_array']: r#38
[#73 'texture_depth_multisampled_2d']: r#38
[#73 'texture_multisampled_2d']: r#38
[#73 'texture_storage_1d']: r#38
[#73 'texture_storage_2d']: r#38
[#73 'texture_storage_2d_array']: r#38
[#73 'texture_storage_3d']: r#38
[#73 'true']: r#38
[#73 'u32']: r#38
[#73 'vec2']: r#38
[#73 'vec3']: r#38
[#73 'vec4']: r#38
[#73 '~']: r#38
[#73 /0[xX][0-9a-fA-F]+[iu]?/]: r#38
[#74 '!=']: r#39
[#74 '%']: r#39
[#74 '&&']: r#39
[#74 '&']: r#39
[#74 '(']: r#40
[#74 ')']: r#39
[#74 '*']: r#39
[#74 '+']: r#39
[#74 ',']: r#39
[#74 '-']: r#39
[#74 '.']: r#39
[#74 '/']: r#39
[#74 ':']: r#39
[#74 ';']: r#39
[#74 '<']: r#39
[#74 '<<']: r#39
[#74 '<=']: r#39
[#74 '==']: r#39
[#74 '>']: r#39
[#74 '>=']: r#39
[#74 '>>']: r#39
[#74 '[']: r#39
[#74 ']']: r#39
[#74 '^']: r#39
[#74 '{']: r#39
[#74 '|']: r#39
[#74 '||']: r#39
[#75 '(']: s#115
[#76 '!=']: r#41
[#76 '%']: r#41
[#76 '&&']: r#41
[#76 '&']: r#41
[#76 ')']: r#41
[#76 '*']: r#41
[#76 '+']: r#41
[#76 ',']: r#41
[#76 '-']: r#41
[#76 '.']: r#41
[#76 '/']: r#41
[#76 ':']: r#41
[#76 ';']: r#41
[#76 '<']: r#41
[#76 '<<']: r#41
[#76 '<=']: r#41
[#76 '==']: r#41
[#76 '>']: r#41
[#76 '>=']: r#41
[#76 '>>']: r#41
[#76 '[']: r#41
[#76 ']']: r#41
[#76 '^']: r#41
[#76 '{']: r#41
[#76 '|']: r#41
[#76 '||']: r#41
[#77 '!=']: r#42
[#77 '%']: r#42
[#77 '&&']: r#42
[#77 '&']: r#42
[#77 ')']: r#42
[#77 '*']: r#42
[#77 '+']: r#42
[#77 ',']: r#42
[#77 '-']: r#42
[#77 '.']: r#42
[#77 '/']: r#42
[#77 ':']: r#42
[#77 ';']: r#42
[#77 '<']: r#42
[#77 '<<']: r#42
[#77 '<=']: r#42
[#77 '==']: r#42
[#77 '>']: r#42
[#77 '>=']: r#42
[#77 '>>']: r#42
[#77 '[']: r#42
[#77 ']']: r#42
[#77 '^']: r#42
[#77 '{']: r#42
[#77 '|']: r#42
[#77 '||']: r#42
[#78 '<']: s#173
[#79 '!=']: r#43
[#79 '%']: r#43
[#79 '%=']: r#43
[#79 '&&']: r#43
[#79 '&']: r#43
[#79 '&=']: r#43
[#79 '(']: r#43
[#79 ')']: r#43
[#79 '*']: r#43
[#79 '*=']: r#43
[#79 '+']: r#43
[#79 '++']: r#43
[#79 '+=']: r#43
[#79 ',']: r#43
[#79 '-']: r#43
[#79 '--']: r#43
[#79 '-=']: r#43
[#79 '.']: r#43
[#79 '/']: r#43
[#79 '/=']: r#43
[#79 ':']: r#43
[#79 ';']: r#43
[#79 '<']: r#43
[#79 '<<']: r#43
[#79 '<<=']: r#43
[#79 '<=']: r#43
[#79 '=']: r#43
[#79 '==']: r#43
[#79 '>']: r#43
[#79 '>=']: r#43
[#79 '>>']: r#43
[#79 '>>=']: r#43
[#79 '[']: r#43
[#79 ']']: r#43
[#79 '^']: r#43
[#79 '^=']: r#43
[#79 '{']: r#43
[#79 '|']: r#43
[#79 '|=']: r#43
[#79 '||']: r#43
[#79 '}']: r#43
[#80 '(']: r#44
[#81 '(']: r#45
[#81 '<']: s#173
[#82 '(']: r#46
[#82 '<']: s#173
[#83 '(']: r#47
[#83 '<']: s#173
[#84 '!=']: r#48
[#84 '%']: r#48
[#84 '&&']: r#48
[#84 '&']: r#48
[#84 ')']: r#48
[#84 '*']: r#48
[#84 '+']: r#48
[#84 ',']: r#48
[#84 '-']: r#48
[#84 '.']: r#48
[#84 '/']: r#48
[#84 ':']: r#48
[#84 ';']: r#48
[#84 '<']: r#48
[#84 '<<']: r#48
[#84 '<=']: r#48
[#84 '==']: r#48
[#84 '>']: r#48
[#84 '>=']: r#48
[#84 '>>']: r#48
[#84 '[']: r#48
[#84 ']']: r#48
[#84 '^']: r#48
[#84 '{']: r#48
[#84 '|']: r#48
[#84 '||']: r#48
[#85 '!=']: r#49
[#85 '%']: r#49
[#85 '&&']: r#49
[#85 '&']: r#49
[#85 ')']: r#49
[#85 '*']: r#49
[#85 '+']: r#49
[#85 ',']: r#49
[#85 '-']: r#49
[#85 '.']: r#49
[#85 '/']: r#49
[#85 ':']: r#49
[#85 ';']: r#49
[#85 '<']: r#49
[#85 '<<']: r#49
[#85 '<=']: r#49
[#85 '==']: r#49
[#85 '>']: r#49
[#85 '>=']: r#49
[#85 '>>']: r#49
[#85 '[']: r#49
[#85 ']']: r#49
[#85 '^']: r#49
[#85 '{']: r#49
[#85 '|']: r#49
[#85 '||']: r#49
[#86 '!=']: r#50
[#86 '%']: r#50
[#86 '&&']: r#50
[#86 '&']: r#50
[#86 ')']: r#50
[#86 '*']: r#50
[#86 '+']: r#50
[#86 ',']: r#50
[#86 '-']: r#50
[#86 '.']: r#50
[#86 '/']: r#50
[#86 ':']: r#50
[#86 ';']: r#50
[#86 '<']: r#50
[#86 '<<']: r#50
[#86 '<=']: r#50
[#86 '==']: r#50
[#86 '>']: r#50
[#86 '>=']: r#50
[#86 '>>']: r#50
[#86 '[']: r#50
[#86 ']']: r#50
[#86 '^']: r#50
[#86 '{']: r#50
[#86 '|']: r#50
[#86 '||']: r#50
[#87 '!']: s#70
[#87 '&']: s#73
[#87 '(']: s#115
[#87 '*']: s#72
[#87 '-']: s#69
[#87 'array']: s#83
[#87 'atomic']: s#95
[#87 'bitcast']: s#78
[#87 'bool']: s#88
[#87 'f16']: s#117
[#87 'f32']: s#116
[#87 'false']: s#114
[#87 'i32']: s#118
[#87 'mat2x2']: s#100
[#87 'mat2x3']: s#101
[#87 'mat2x4']: s#102
[#87 'mat3x2']: s#103
[#87 'mat3x3']: s#104
[#87 'mat3x4']: s#105
[#87 'mat4x2']: s#106
[#87 'mat4x3']: s#107
[#87 'mat4x4']: s#108
[#87 'ptr']: s#120
[#87 'sampler']: s#137
[#87 'sampler_comparison']: s#138
[#87 'texture_1d']: s#144
[#87 'texture_2d']: s#145
[#87 'texture_2d_array']: s#146
[#87 'texture_3d']: s#147
[#87 'texture_cube']: s#148
[#87 'texture_cube_array']: s#149
[#87 'texture_depth_2d']: s#139
[#87 'texture_depth_2d_array']: s#140
[#87 'texture_depth_cube']: s#141
[#87 'texture_depth_cube_array']: s#142
[#87 'texture_depth_multisampled_2d']: s#143
[#87 'texture_multisampled_2d']: s#150
[#87 'texture_storage_1d']: s#151
[#87 'texture_storage_2d']: s#152
[#87 'texture_storage_2d_array']: s#153
[#87 'texture_storage_3d']: s#154
[#87 'true']: s#113
[#87 'u32']: s#119
[#87 'vec2']: s#97
[#87 'vec3']: s#98
[#87 'vec4']: s#99
[#87 '~']: s#71
[#87 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#87 /0[fh]/]: s#129
[#87 /0[iu]?/]: s#126
[#87 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#87 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#87 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#87 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#87 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#87 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#87 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#87 /[1-9][0-9]*[fh]/]: s#130
[#87 /[1-9][0-9]*[iu]?/]: s#127
[#88 '(']: r#51
[#88 ')']: r#51
[#88 ',']: r#51
[#88 ';']: r#51
[#88 '=']: r#51
[#88 '>']: r#51
[#88 '{']: r#51
[#88 '}']: r#51
[#89 '(']: r#52
[#89 ')']: r#52
[#89 ',']: r#52
[#89 ';']: r#52
[#89 '=']: r#52
[#89 '>']: r#52
[#89 '{']: r#52
[#89 '}']: r#52
[#90 '(']: r#53
[#90 ')']: r#53
[#90 ',']: r#53
[#90 ';']: r#53
[#90 '=']: r#53
[#90 '>']: r#53
[#90 '{']: r#53
[#90 '}']: r#53
[#91 '(']: r#54
[#91 ')']: r#54
[#91 ',']: r#54
[#91 ';']: r#54
[#91 '=']: r#54
[#91 '>']: r#54
[#91 '{']: r#54
[#91 '}']: r#54
[#92 '(']: r#55
[#92 ')']: r#55
[#92 ',']: r#55
[#92 ';']: r#55
[#92 '=']: r#55
[#92 '>']: r#55
[#92 '{']: r#55
[#92 '}']: r#55
[#93 '<']: s#173
[#94 '(']: r#56
[#94 ')']: r#56
[#94 ',']: r#56
[#94 ';']: r#56
[#94 '=']: r#56
[#94 '>']: r#56
[#94 '{']: r#56
[#94 '}']: r#56
[#95 '<']: s#173
[#96 '(']: r#57
[#96 ')']: r#57
[#96 ',']: r#57
[#96 ';']: r#57
[#96 '=']: r#57
[#96 '>']: r#57
[#96 '{']: r#57
[#96 '}']: r#57
[#97 '(']: r#58
[#97 '<']: r#58
[#98 '(']: r#59
[#98 '<']: r#59
[#99 '(']: r#60
[#99 '<']: r#60
[#100 '(']: r#61
[#100 '<']: r#61
[#101 '(']: r#62
[#101 '<']: r#62
[#102 '(']: r#63
[#102 '<']: r#63
[#103 '(']: r#64
[#103 '<']: r#64
[#104 '(']: r#65
[#104 '<']: r#65
[#105 '(']: r#66
[#105 '<']: r#66
[#106 '(']: r#67
[#106 '<']: r#67
[#107 '(']: r#68
[#107 '<']: r#68
[#108 '(']: r#69
[#108 '<']: r#69
[#109 '!=']: r#70
[#109 '%']: r#70
[#109 '&&']: r#70
[#109 '&']: r#70
[#109 ')']: r#70
[#109 '*']: r#70
[#109 '+']: r#70
[#109 ',']: r#70
[#109 '-']: r#70
[#109 '.']: r#70
[#109 '/']: r#70
[#109 ':']: r#70
[#109 ';']: r#70
[#109 '<']: r#70
[#109 '<<']: r#70
[#109 '<=']: r#70
[#109 '==']: r#70
[#109 '>']: r#70
[#109 '>=']: r#70
[#109 '>>']: r#70
[#109 '[']: r#70
[#109 ']']: r#70
[#109 '^']: r#70
[#109 '{']: r#70
[#109 '|']: r#70
[#109 '||']: r#70
[#110 '!=']: r#71
[#110 '%']: r#71
[#110 '&&']: r#71
[#110 '&']: r#71
[#110 ')']: r#71
[#110 '*']: r#71
[#110 '+']: r#71
[#110 ',']: r#71
[#110 '-']: r#71
[#110 '.']: r#71
[#110 '/']: r#71
[#110 ':']: r#71
[#110 ';']: r#71
[#110 '<']: r#71
[#110 '<<']: r#71
[#110 '<=']: r#71
[#110 '==']: r#71
[#110 '>']: r#71
[#110 '>=']: r#71
[#110 '>>']: r#71
[#110 '[']: r#71
[#110 ']']: r#71
[#110 '^']: r#71
[#110 '{']: r#71
[#110 '|']: r#71
[#110 '||']: r#71
[#111 '!=']: r#72
[#111 '%']: r#72
[#111 '&&']: r#72
[#111 '&']: r#72
[#111 ')']: r#72
[#111 '*']: r#72
[#111 '+']: r#72
[#111 ',']: r#72
[#111 '-']: r#72
[#111 '.']: r#72
[#111 '/']: r#72
[#111 ':']: r#72
[#111 ';']: r#72
[#111 '<']: r#72
[#111 '<<']: r#72
[#111 '<=']: r#72
[#111 '==']: r#72
[#111 '>']: r#72
[#111 '>=']: r#72
[#111 '>>']: r#72
[#111 '[']: r#72
[#111 ']']: r#72
[#111 '^']: r#72
[#111 '{']: r#72
[#111 '|']: r#72
[#111 '||']: r#72
[#112 '!=']: r#73
[#112 '%']: r#73
[#112 '&&']: r#73
[#112 '&']: r#73
[#112 ')']: r#73
[#112 '*']: r#73
[#112 '+']: r#73
[#112 ',']: r#73
[#112 '-']: r#73
[#112 '.']: r#73
[#112 '/']: r#73
[#112 ':']: r#73
[#112 ';']: r#73
[#112 '<']: r#73
[#112 '<<']: r#73
[#112 '<=']: r#73
[#112 '==']: r#73
[#112 '>']: r#73
[#112 '>=']: r#73
[#112 '>>']: r#73
[#112 '[']: r#73
[#112 ']']: r#73
[#112 '^']: r#73
[#112 '{']: r#73
[#112 '|']: r#73
[#112 '||']: r#73
[#113 '!=']: r#74
[#113 '%']: r#74
[#113 '&&']: r#74
[#113 '&']: r#74
[#113 ')']: r#74
[#113 '*']: r#74
[#113 '+']: r#74
[#113 ',']: r#74
[#113 '-']: r#74
[#113 '.']: r#74
[#113 '/']: r#74
[#113 ':']: r#74
[#113 ';']: r#74
[#113 '<']: r#74
[#113 '<<']: r#74
[#113 '<=']: r#74
[#113 '==']: r#74
[#113 '>']: r#74
[#113 '>=']: r#74
[#113 '>>']: r#74
[#113 '[']: r#74
[#113 ']']: r#74
[#113 '^']: r#74
[#113 '{']: r#74
[#113 '|']: r#74
[#113 '||']: r#74
[#114 '!=']: r#75
[#114 '%']: r#75
[#114 '&&']: r#75
[#114 '&']: r#75
[#114 ')']: r#75
[#114 '*']: r#75
[#114 '+']: r#75
[#114 ',']: r#75
[#114 '-']: r#75
[#114 '.']: r#75
[#114 '/']: r#75
[#114 ':']: r#75
[#114 ';']: r#75
[#114 '<']: r#75
[#114 '<<']: r#75
[#114 '<=']: r#75
[#114 '==']: r#75
[#114 '>']: r#75
[#114 '>=']: r#75
[#114 '>>']: r#75
[#114 '[']: r#75
[#114 ']']: r#75
[#114 '^']: r#75
[#114 '{']: r#75
[#114 '|']: r#75
[#114 '||']: r#75
[#115 '!']: r#76
[#115 '&']: r#76
[#115 '(']: r#76
[#115 ')']: r#76
[#115 '*']: r#76
[#115 '-']: r#76
[#115 ';']: r#76
[#115 '@']: r#76
[#115 '_']: r#76
[#115 'array']: r#76
[#115 'atomic']: r#76
[#115 'bitcast']: r#76
[#115 'bool']: r#76
[#115 'const']: r#76
[#115 'f16']: r#76
[#115 'f32']: r#76
[#115 'false']: r#76
[#115 'i32']: r#76
[#115 'let']: r#76
[#115 'mat2x2']: r#76
[#115 'mat2x3']: r#76
[#115 'mat2x4']: r#76
[#115 'mat3x2']: r#76
[#115 'mat3x3']: r#76
[#115 'mat3x4']: r#76
[#115 'mat4x2']: r#76
[#115 'mat4x3']: r#76
[#115 'mat4x4']: r#76
[#115 'ptr']: r#76
[#115 'sampler']: r#76
[#115 'sampler_comparison']: r#76
[#115 'texture_1d']: r#76
[#115 'texture_2d']: r#76
[#115 'texture_2d_array']: r#76
[#115 'texture_3d']: r#76
[#115 'texture_cube']: r#76
[#115 'texture_cube_array']: r#76
[#115 'texture_depth_2d']: r#76
[#115 'texture_depth_2d_array']: r#76
[#115 'texture_depth_cube']: r#76
[#115 'texture_depth_cube_array']: r#76
[#115 'texture_depth_multisampled_2d']: r#76
[#115 'texture_multisampled_2d']: r#76
[#115 'texture_storage_1d']: r#76
[#115 'texture_storage_2d']: r#76
[#115 'texture_storage_2d_array']: r#76
[#115 'texture_storage_3d']: r#76
[#115 'true']: r#76
[#115 'u32']: r#76
[#115 'var']: r#76
[#115 'vec2']: r#76
[#115 'vec3']: r#76
[#115 'vec4']: r#76
[#115 '~']: r#76
[#115 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#76
[#115 /0[xX][0-9a-fA-F]+[iu]?/]: r#76
[#116 '(']: r#77
[#116 ')']: r#77
[#116 ',']: r#77
[#116 ';']: r#77
[#116 '=']: r#77
[#116 '>']: r#77
[#116 '{']: r#77
[#116 '}']: r#77
[#117 '(']: r#78
[#117 ')']: r#78
[#117 ',']: r#78
[#117 ';']: r#78
[#117 '=']: r#78
[#117 '>']: r#78
[#117 '{']: r#78
[#117 '}']: r#78
[#118 '(']: r#79
[#118 ')']: r#79
[#118 ',']: r#79
[#118 ';']: r#79
[#118 '=']: r#79
[#118 '>']: r#79
[#118 '{']: r#79
[#118 '}']: r#79
[#119 '(']: r#80
[#119 ')']: r#80
[#119 ',']: r#80
[#119 ';']: r#80
[#119 '=']: r#80
[#119 '>']: r#80
[#119 '{']: r#80
[#119 '}']: r#80
[#120 '<']: r#81
[#121 '(']: r#82
[#121 ')']: r#82
[#121 ',']: r#82
[#121 ';']: r#82
[#121 '=']: r#82
[#121 '>']: r#82
[#121 '{']: r#82
[#121 '}']: r#82
[#122 '(']: r#83
[#122 ')']: r#83
[#122 ',']: r#83
[#122 ';']: r#83
[#122 '=']: r#83
[#122 '>']: r#83
[#122 '{']: r#83
[#122 '}']: r#83
[#123 '<']: s#173
[#124 '<']: s#173
[#125 '<']: s#173
[#126 '!=']: r#84
[#126 '%']: r#84
[#126 '&&']: r#84
[#126 '&']: r#84
[#126 ')']: r#84
[#126 '*']: r#84
[#126 '+']: r#84
[#126 ',']: r#84
[#126 '-']: r#84
[#126 '.']: r#84
[#126 '/']: r#84
[#126 ':']: r#84
[#126 ';']: r#84
[#126 '<']: r#84
[#126 '<<']: r#84
[#126 '<=']: r#84
[#126 '==']: r#84
[#126 '>']: r#84
[#126 '>=']: r#84
[#126 '>>']: r#84
[#126 '[']: r#84
[#126 ']']: r#84
[#126 '^']: r#84
[#126 '{']: r#84
[#126 '|']: r#84
[#126 '||']: r#84
[#127 '!=']: r#85
[#127 '%']: r#85
[#127 '&&']: r#85
[#127 '&']: r#85
[#127 ')']: r#85
[#127 '*']: r#85
[#127 '+']: r#85
[#127 ',']: r#85
[#127 '-']: r#85
[#127 '.']: r#85
[#127 '/']: r#85
[#127 ':']: r#85
[#127 ';']: r#85
[#127 '<']: r#85
[#127 '<<']: r#85
[#127 '<=']: r#85
[#127 '==']: r#85
[#127 '>']: r#85
[#127 '>=']: r#85
[#127 '>>']: r#85
[#127 '[']: r#85
[#127 ']']: r#85
[#127 '^']: r#85
[#127 '{']: r#85
[#127 '|']: r#85
[#127 '||']: r#85
[#128 '!=']: r#86
[#128 '%']: r#86
[#128 '&&']: r#86
[#128 '&']: r#86
[#128 ')']: r#86
[#128 '*']: r#86
[#128 '+']: r#86
[#128 ',']: r#86
[#128 '-']: r#86
[#128 '.']: r#86
[#128 '/']: r#86
[#128 ':']: r#86
[#128 ';']: r#86
[#128 '<']: r#86
[#128 '<<']: r#86
[#128 '<=']: r#86
[#128 '==']: r#86
[#128 '>']: r#86
[#128 '>=']: r#86
[#128 '>>']: r#86
[#128 '[']: r#86
[#128 ']']: r#86
[#128 '^']: r#86
[#128 '{']: r#86
[#128 '|']: r#86
[#128 '||']: r#86
[#129 '!=']: r#87
[#129 '%']: r#87
[#129 '&&']: r#87
[#129 '&']: r#87
[#129 ')']: r#87
[#129 '*']: r#87
[#129 '+']: r#87
[#129 ',']: r#87
[#129 '-']: r#87
[#129 '.']: r#87
[#129 '/']: r#87
[#129 ':']: r#87
[#129 ';']: r#87
[#129 '<']: r#87
[#129 '<<']: r#87
[#129 '<=']: r#87
[#129 '==']: r#87
[#129 '>']: r#87
[#129 '>=']: r#87
[#129 '>>']: r#87
[#129 '[']: r#87
[#129 ']']: r#87
[#129 '^']: r#87
[#129 '{']: r#87
[#129 '|']: r#87
[#129 '||']: r#87
[#130 '!=']: r#88
[#130 '%']: r#88
[#130 '&&']: r#88
[#130 '&']: r#88
[#130 ')']: r#88
[#130 '*']: r#88
[#130 '+']: r#88
[#130 ',']: r#88
[#130 '-']: r#88
[#130 '.']: r#88
[#130 '/']: r#88
[#130 ':']: r#88
[#130 ';']: r#88
[#130 '<']: r#88
[#130 '<<']: r#88
[#130 '<=']: r#88
[#130 '==']: r#88
[#130 '>']: r#88
[#130 '>=']: r#88
[#130 '>>']: r#88
[#130 '[']: r#88
[#130 ']']: r#88
[#130 '^']: r#88
[#130 '{']: r#88
[#130 '|']: r#88
[#130 '||']: r#88
[#131 '!=']: r#89
[#131 '%']: r#89
[#131 '&&']: r#89
[#131 '&']: r#89
[#131 ')']: r#89
[#131 '*']: r#89
[#131 '+']: r#89
[#131 ',']: r#89
[#131 '-']: r#89
[#131 '.']: r#89
[#131 '/']: r#89
[#131 ':']: r#89
[#131 ';']: r#89
[#131 '<']: r#89
[#131 '<<']: r#89
[#131 '<=']: r#89
[#131 '==']: r#89
[#131 '>']: r#89
[#131 '>=']: r#89
[#131 '>>']: r#89
[#131 '[']: r#89
[#131 ']']: r#89
[#131 '^']: r#89
[#131 '{']: r#89
[#131 '|']: r#89
[#131 '||']: r#89
[#132 '!=']: r#90
[#132 '%']: r#90
[#132 '&&']: r#90
[#132 '&']: r#90
[#132 ')']: r#90
[#132 '*']: r#90
[#132 '+']: r#90
[#132 ',']: r#90
[#132 '-']: r#90
[#132 '.']: r#90
[#132 '/']: r#90
[#132 ':']: r#90
[#132 ';']: r#90
[#132 '<']: r#90
[#132 '<<']: r#90
[#132 '<=']: r#90
[#132 '==']: r#90
[#132 '>']: r#90
[#132 '>=']: r#90
[#132 '>>']: r#90
[#132 '[']: r#90
[#132 ']']: r#90
[#132 '^']: r#90
[#132 '{']: r#90
[#132 '|']: r#90
[#132 '||']: r#90
[#133 '!=']: r#91
[#133 '%']: r#91
[#133 '&&']: r#91
[#133 '&']: r#91
[#133 ')']: r#91
[#133 '*']: r#91
[#133 '+']: r#91
[#133 ',']: r#91
[#133 '-']: r#91
[#133 '.']: r#91
[#133 '/']: r#91
[#133 ':']: r#91
[#133 ';']: r#91
[#133 '<']: r#91
[#133 '<<']: r#91
[#133 '<=']: r#91
[#133 '==']: r#91
[#133 '>']: r#91
[#133 '>=']: r#91
[#133 '>>']: r#91
[#133 '[']: r#91
[#133 ']']: r#91
[#133 '^']: r#91
[#133 '{']: r#91
[#133 '|']: r#91
[#133 '||']: r#91
[#134 '!=']: r#92
[#134 '%']: r#92
[#134 '&&']: r#92
[#134 '&']: r#92
[#134 ')']: r#92
[#134 '*']: r#92
[#134 '+']: r#92
[#134 ',']: r#92
[#134 '-']: r#92
[#134 '.']: r#92
[#134 '/']: r#92
[#134 ':']: r#92
[#134 ';']: r#92
[#134 '<']: r#92
[#134 '<<']: r#92
[#134 '<=']: r#92
[#134 '==']: r#92
[#134 '>']: r#92
[#134 '>=']: r#92
[#134 '>>']: r#92
[#134 '[']: r#92
[#134 ']']: r#92
[#134 '^']: r#92
[#134 '{']: r#92
[#134 '|']: r#92
[#134 '||']: r#92
[#135 '!=']: r#93
[#135 '%']: r#93
[#135 '&&']: r#93
[#135 '&']: r#93
[#135 ')']: r#93
[#135 '*']: r#93
[#135 '+']: r#93
[#135 ',']: r#93
[#135 '-']: r#93
[#135 '.']: r#93
[#135 '/']: r#93
[#135 ':']: r#93
[#135 ';']: r#93
[#135 '<']: r#93
[#135 '<<']: r#93
[#135 '<=']: r#93
[#135 '==']: r#93
[#135 '>']: r#93
[#135 '>=']: r#93
[#135 '>>']: r#93
[#135 '[']: r#93
[#135 ']']: r#93
[#135 '^']: r#93
[#135 '{']: r#93
[#135 '|']: r#93
[#135 '||']: r#93
[#136 '!=']: r#94
[#136 '%']: r#94
[#136 '&&']: r#94
[#136 '&']: r#94
[#136 ')']: r#94
[#136 '*']: r#94
[#136 '+']: r#94
[#136 ',']: r#94
[#136 '-']: r#94
[#136 '.']: r#94
[#136 '/']: r#94
[#136 ':']: r#94
[#136 ';']: r#94
[#136 '<']: r#94
[#136 '<<']: r#94
[#136 '<=']: r#94
[#136 '==']: r#94
[#136 '>']: r#94
[#136 '>=']: r#94
[#136 '>>']: r#94
[#136 '[']: r#94
[#136 ']']: r#94
[#136 '^']: r#94
[#136 '{']: r#94
[#136 '|']: r#94
[#136 '||']: r#94
[#137 '(']: r#95
[#137 ')']: r#95
[#137 ',']: r#95
[#137 ';']: r#95
[#137 '=']: r#95
[#137 '>']: r#95
[#137 '{']: r#95
[#137 '}']: r#95
[#138 '(']: r#96
[#138 ')']: r#96
[#138 ',']: r#96
[#138 ';']: r#96
[#138 '=']: r#96
[#138 '>']: r#96
[#138 '{']: r#96
[#138 '}']: r#96
[#139 '(']: r#97
[#139 ')']: r#97
[#139 ',']: r#97
[#139 ';']: r#97
[#139 '=']: r#97
[#139 '>']: r#97
[#139 '{']: r#97
[#139 '}']: r#97
[#140 '(']: r#98
[#140 ')']: r#98
[#140 ',']: r#98
[#140 ';']: r#98
[#140 '=']: r#98
[#140 '>']: r#98
[#140 '{']: r#98
[#140 '}']: r#98
[#141 '(']: r#99
[#141 ')']: r#99
[#141 ',']: r#99
[#141 ';']: r#99
[#141 '=']: r#99
[#141 '>']: r#99
[#141 '{']: r#99
[#141 '}']: r#99
[#142 '(']: r#100
[#142 ')']: r#100
[#142 ',']: r#100
[#142 ';']: r#100
[#142 '=']: r#100
[#142 '>']: r#100
[#142 '{']: r#100
[#142 '}']: r#100
[#143 '(']: r#101
[#143 ')']: r#101
[#143 ',']: r#101
[#143 ';']: r#101
[#143 '=']: r#101
[#143 '>']: r#101
[#143 '{']: r#101
[#143 '}']: r#101
[#144 '<']: r#102
[#145 '<']: r#103
[#146 '<']: r#104
[#147 '<']: r#105
[#148 '<']: r#106
[#149 '<']: r#107
[#150 '<']: r#108
[#151 '<']: r#109
[#152 '<']: r#110
[#153 '<']: r#111
[#154 '<']: r#112
[#155 '{']: s#185
[#156 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#157 '{']: s#185
[#158 '=']: s#176
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#160 '=']: s#176
[#161 ':']: s#179
[#162 '=']: s#176
[#163 '<']: s#173
[#164 ';']: r#113
[#164 '@']: r#113
[#164 'const']: r#113
[#164 'fn']: r#113
[#164 'override']: r#113
[#164 'static_assert']: r#113
[#164 'struct']: r#113
[#164 'type']: r#113
[#164 'var']: r#113
[#164 EndOfText]: r#113
[#165 ';']: r#114
[#165 '@']: r#114
[#165 'const']: r#114
[#165 'fn']: r#114
[#165 'override']: r#114
[#165 'static_assert']: r#114
[#165 'struct']: r#114
[#165 'type']: r#114
[#165 'var']: r#114
[#165 EndOfText]: r#114
[#166 ';']: r#115
[#166 '@']: r#115
[#166 'const']: r#115
[#166 'fn']: r#115
[#166 'override']: r#115
[#166 'static_assert']: r#115
[#166 'struct']: r#115
[#166 'type']: r#115
[#166 'var']: r#115
[#166 EndOfText]: r#115
[#167 ';']: r#116
[#167 '@']: r#116
[#167 'const']: r#116
[#167 'fn']: r#116
[#167 'override']: r#116
[#167 'static_assert']: r#116
[#167 'struct']: r#116
[#167 'type']: r#116
[#167 'var']: r#116
[#167 EndOfText]: r#116
[#168 EndOfText]: r#117
[#169 ';']: r#118
[#169 '@']: r#118
[#169 'const']: r#118
[#169 'enable']: r#118
[#169 'fn']: r#118
[#169 'override']: r#118
[#169 'static_assert']: r#118
[#169 'struct']: r#118
[#169 'type']: r#118
[#169 'var']: r#118
[#169 EndOfText]: r#118
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#119
[#172 'function']: s#322
[#172 'private']: s#323
[#172 'storage']: s#326
[#172 'uniform']: s#325
[#172 'workgroup']: s#324
[#173 '!']: r#120
[#173 '&']: r#120
[#173 '(']: r#120
[#173 '*']: r#120
[#173 '-']: r#120
[#173 'array']: r#120
[#173 'atomic']: r#120
[#173 'bitcast']: r#120
[#173 'bool']: r#120
[#173 'f16']: r#120
[#173 'f32']: r#120
[#173 'false']: r#120
[#173 'i32']: r#120
[#173 'mat2x2']: r#120
[#173 'mat2x3']: r#120
[#173 'mat2x4']: r#120
[#173 'mat3x2']: r#120
[#173 'mat3x3']: r#120
[#173 'mat3x4']: r#120
[#173 'mat4x2']: r#120
[#173 'mat4x3']: r#120
[#173 'mat4x4']: r#120
[#173 'ptr']: r#120
[#173 'sampler']: r#120
[#173 'sampler_comparison']: r#120
[#173 'texture_1d']: r#120
[#173 'texture_2d']: r#120
[#173 'texture_2d_array']: r#120
[#173 'texture_3d']: r#120
[#173 'texture_cube']: r#120
[#173 'texture_cube_array']: r#120
[#173 'texture_depth_2d']: r#120
[#173 'texture_depth_2d_array']: r#120
[#173 'texture_depth_cube']: r#120
[#173 'texture_depth_cube_array']: r#120
[#173 'texture_depth_multisampled_2d']: r#120
[#173 'texture_multisampled_2d']: r#120
[#173 'texture_storage_1d']: r#120
[#173 'texture_storage_2d']: r#120
[#173 'texture_storage_2d_array']: r#120
[#173 'texture_storage_3d']: r#120
[#173 'true']: r#120
[#173 'u32']: r#120
[#173 'vec2']: r#120
[#173 'vec3']: r#120
[#173 'vec4']: r#120
[#173 '~']: r#120
[#173 /0[xX][0-9a-fA-F]+[iu]?/]: r#120
[#174 ';']: r#121
[#175 '!']: s#70
[#175 '&']: s#73
[#175 '(']: s#115
[#175 '*']: s#72
[#175 '-']: s#69
[#175 'array']: s#83
[#175 'atomic']: s#95
[#175 'bitcast']: s#78
[#175 'bool']: s#88
[#175 'f16']: s#117
[#175 'f32']: s#116
[#175 'false']: s#114
[#175 'i32']: s#118
[#175 'mat2x2']: s#100
[#175 'mat2x3']: s#101
[#175 'mat2x4']: s#102
[#175 'mat3x2']: s#103
[#175 'mat3x3']: s#104
[#175 'mat3x4']: s#105
[#175 'mat4x2']: s#106
[#175 'mat4x3']: s#107
[#175 'mat4x4']: s#108
[#175 'ptr']: s#120
[#175 'sampler']: s#137
[#175 'sampler_comparison']: s#138
[#175 'texture_1d']: s#144
[#175 'texture_2d']: s#145
[#175 'texture_2d_array']: s#146
[#175 'texture_3d']: s#147
[#175 'texture_cube']: s#148
[#175 'texture_cube_array']: s#149
[#175 'texture_depth_2d']: s#139
[#175 'texture_depth_2d_array']: s#140
[#175 'texture_depth_cube']: s#141
[#175 'texture_depth_cube_array']: s#142
[#175 'texture_depth_multisampled_2d']: s#143
[#175 'texture_multisampled_2d']: s#150
[#175 'texture_storage_1d']: s#151
[#175 'texture_storage_2d']: s#152
[#175 'texture_storage_2d_array']: s#153
[#175 'texture_storage_3d']: s#154
[#175 'true']: s#113
[#175 'u32']: s#119
[#175 'vec2']: s#97
[#175 'vec3']: s#98
[#175 'vec4']: s#99
[#175 '~']: s#71
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#175 /0[fh]/]: s#129
[#175 /0[iu]?/]: s#126
[#175 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#175 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#175 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#175 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#175 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#175 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#175 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#175 /[1-9][0-9]*[fh]/]: s#130
[#175 /[1-9][0-9]*[iu]?/]: s#127
[#176 '!']: r#122
[#176 '&']: r#122
[#176 '(']: r#122
[#176 '*']: r#122
[#176 '-']: r#122
[#176 'array']: r#122
[#176 'atomic']: r#122
[#176 'bitcast']: r#122
[#176 'bool']: r#122
[#176 'f16']: r#122
[#176 'f32']: r#122
[#176 'false']: r#122
[#176 'i32']: r#122
[#176 'mat2x2']: r#122
[#176 'mat2x3']: r#122
[#176 'mat2x4']: r#122
[#176 'mat3x2']: r#122
[#176 'mat3x3']: r#122
[#176 'mat3x4']: r#122
[#176 'mat4x2']: r#122
[#176 'mat4x3']: r#122
[#176 'mat4x4']: r#122
[#176 'ptr']: r#122
[#176 'sampler']: r#122
[#176 'sampler_comparison']: r#122
[#176 'texture_1d']: r#122
[#176 'texture_2d']: r#122
[#176 'texture_2d_array']: r#122
[#176 'texture_3d']: r#122
[#176 'texture_cube']: r#122
[#176 'texture_cube_array']: r#122
[#176 'texture_depth_2d']: r#122
[#176 'texture_depth_2d_array']: r#122
[#176 'texture_depth_cube']: r#122
[#176 'texture_depth_cube_array']: r#122
[#176 'texture_depth_multisampled_2d']: r#122
[#176 'texture_multisampled_2d']: r#122
[#176 'texture_storage_1d']: r#122
[#176 'texture_storage_2d']: r#122
[#176 'texture_storage_2d_array']: r#122
[#176 'texture_storage_3d']: r#122
[#176 'true']: r#122
[#176 'u32']: r#122
[#176 'vec2']: r#122
[#176 'vec3']: r#122
[#176 'vec4']: r#122
[#176 '~']: r#122
[#176 /0[xX][0-9a-fA-F]+[iu]?/]: r#122
[#177 ';']: r#123
[#177 '=']: r#123
[#178 'array']: s#315
[#178 'atomic']: s#95
[#178 'bool']: s#88
[#178 'f16']: s#117
[#178 'f32']: s#116
[#178 'i32']: s#118
[#178 'mat2x2']: s#100
[#178 'mat2x3']: s#101
[#178 'mat2x4']: s#102
[#178 'mat3x2']: s#103
[#178 'mat3x3']: s#104
[#178 'mat3x4']: s#105
[#178 'mat4x2']: s#106
[#178 'mat4x3']: s#107
[#178 'mat4x4']: s#108
[#178 'ptr']: s#120
[#178 'sampler']: s#137
[#178 'sampler_comparison']: s#138
[#178 'texture_1d']: s#144
[#178 'texture_2d']: s#145
[#178 'texture_2d_array']: s#146
[#178 'texture_3d']: s#147
[#178 'texture_cube']: s#148
[#178 'texture_cube_array']: s#149
[#178 'texture_depth_2d']: s#139
[#178 'texture_depth_2d_array']: s#140
[#178 'texture_depth_cube']: s#141
[#178 'texture_depth_cube_array']: s#142
[#178 'texture_depth_multisampled_2d']: s#143
[#178 'texture_multisampled_2d']: s#150
[#178 'texture_storage_1d']: s#151
[#178 'texture_storage_2d']: s#152
[#178 'texture_storage_2d_array']: s#153
[#178 'texture_storage_3d']: s#154
[#178 'u32']: s#119
[#178 'vec2']: s#97
[#178 'vec3']: s#98
[#178 'vec4']: s#99
[#178 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#179 'array']: r#124
[#179 'atomic']: r#124
[#179 'bool']: r#124
[#179 'f16']: r#124
[#179 'f32']: r#124
[#179 'i32']: r#124
[#179 'mat2x2']: r#124
[#179 'mat2x3']: r#124
[#179 'mat2x4']: r#124
[#179 'mat3x2']: r#124
[#179 'mat3x3']: r#124
[#179 'mat3x4']: r#124
[#179 'mat4x2']: r#124
[#179 'mat4x3']: r#124
[#179 'mat4x4']: r#124
[#179 'ptr']: r#124
[#179 'sampler']: r#124
[#179 'sampler_comparison']: r#124
[#179 'texture_1d']: r#124
[#179 'texture_2d']: r#124
[#179 'texture_2d_array']: r#124
[#179 'texture_3d']: r#124
[#179 'texture_cube']: r#124
[#179 'texture_cube_array']: r#124
[#179 'texture_depth_2d']: r#124
[#179 'texture_depth_2d_array']: r#124
[#179 'texture_depth_cube']: r#124
[#179 'texture_depth_cube_array']: r#124
[#179 'texture_depth_multisampled_2d']: r#124
[#179 'texture_multisampled_2d']: r#124
[#179 'texture_storage_1d']: r#124
[#179 'texture_storage_2d']: r#124
[#179 'texture_storage_2d_array']: r#124
[#179 'texture_storage_3d']: r#124
[#179 'u32']: r#124
[#179 'vec2']: r#124
[#179 'vec3']: r#124
[#179 'vec4']: r#124
[#179 '{']: r#124
[#180 '!']: s#70
[#180 '&']: s#73
[#180 '(']: s#115
[#180 '*']: s#72
[#180 '-']: s#69
[#180 'array']: s#83
[#180 'atomic']: s#95
[#180 'bitcast']: s#78
[#180 'bool']: s#88
[#180 'f16']: s#117
[#180 'f32']: s#116
[#180 'false']: s#114
[#180 'i32']: s#118
[#180 'mat2x2']: s#100
[#180 'mat2x3']: s#101
[#180 'mat2x4']: s#102
[#180 'mat3x2']: s#103
[#180 'mat3x3']: s#104
[#180 'mat3x4']: s#105
[#180 'mat4x2']: s#106
[#180 'mat4x3']: s#107
[#180 'mat4x4']: s#108
[#180 'ptr']: s#120
[#180 'sampler']: s#137
[#180 'sampler_comparison']: s#138
[#180 'texture_1d']: s#144
[#180 'texture_2d']: s#145
[#180 'texture_2d_array']: s#146
[#180 'texture_3d']: s#147
[#180 'texture_cube']: s#148
[#180 'texture_cube_array']: s#149
[#180 'texture_depth_2d']: s#139
[#180 'texture_depth_2d_array']: s#140
[#180 'texture_depth_cube']: s#141
[#180 'texture_depth_cube_array']: s#142
[#180 'texture_depth_multisampled_2d']: s#143
[#180 'texture_multisampled_2d']: s#150
[#180 'texture_storage_1d']: s#151
[#180 'texture_storage_2d']: s#152
[#180 'texture_storage_2d_array']: s#153
[#180 'texture_storage_3d']: s#154
[#180 'true']: s#113
[#180 'u32']: s#119
[#180 'vec2']: s#97
[#180 'vec3']: s#98
[#180 'vec4']: s#99
[#180 '~']: s#71
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#180 /0[fh]/]: s#129
[#180 /0[iu]?/]: s#126
[#180 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#180 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#180 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#180 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#180 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#180 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#180 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#180 /[1-9][0-9]*[fh]/]: s#130
[#180 /[1-9][0-9]*[iu]?/]: s#127
[#181 '=']: s#176
[#182 'array']: s#315
[#182 'atomic']: s#95
[#182 'bool']: s#88
[#182 'f16']: s#117
[#182 'f32']: s#116
[#182 'i32']: s#118
[#182 'mat2x2']: s#100
[#182 'mat2x3']: s#101
[#182 'mat2x4']: s#102
[#182 'mat3x2']: s#103
[#182 'mat3x3']: s#104
[#182 'mat3x4']: s#105
[#182 'mat4x2']: s#106
[#182 'mat4x3']: s#107
[#182 'mat4x4']: s#108
[#182 'ptr']: s#120
[#182 'sampler']: s#137
[#182 'sampler_comparison']: s#138
[#182 'texture_1d']: s#144
[#182 'texture_2d']: s#145
[#182 'texture_2d_array']: s#146
[#182 'texture_3d']: s#147
[#182 'texture_cube']: s#148
[#182 'texture_cube_array']: s#149
[#182 'texture_depth_2d']: s#139
[#182 'texture_depth_2d_array']: s#140
[#182 'texture_depth_cube']: s#141
[#182 'texture_depth_cube_array']: s#142
[#182 'texture_depth_multisampled_2d']: s#143
[#182 'texture_multisampled_2d']: s#150
[#182 'texture_storage_1d']: s#151
[#182 'texture_storage_2d']: s#152
[#182 'texture_storage_2d_array']: s#153
[#182 'texture_storage_3d']: s#154
[#182 'u32']: s#119
[#182 'vec2']: s#97
[#182 'vec3']: s#98
[#182 'vec4']: s#99
[#182 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#183 ';']: r#125
[#183 '@']: r#125
[#183 'const']: r#125
[#183 'fn']: r#125
[#183 'override']: r#125
[#183 'static_assert']: r#125
[#183 'struct']: r#125
[#183 'type']: r#125
[#183 'var']: r#125
[#183 EndOfText]: r#125
[#184 '@']: s#32
[#185 '&']: r#126
[#185 '(']: r#126
[#185 '*']: r#126
[#185 ';']: r#126
[#185 '@']: r#126
[#185 '_']: r#126
[#185 'break']: r#126
[#185 'case']: r#126
[#185 'const']: r#126
[#185 'continue']: r#126
[#185 'continuing']: r#126
[#185 'default']: r#126
[#185 'discard']: r#126
[#185 'for']: r#126
[#185 'if']: r#126
[#185 'let']: r#126
[#185 'loop']: r#126
[#185 'return']: r#126
[#185 'static_assert']: r#126
[#185 'switch']: r#126
[#185 'var']: r#126
[#185 'while']: r#126
[#185 '{']: r#126
[#185 '}']: r#126
[#185 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#126
[#186 '(']: s#115
[#187 ';']: r#127
[#187 '@']: r#127
[#187 'const']: r#127
[#187 'fn']: r#127
[#187 'override']: r#127
[#187 'static_assert']: r#127
[#187 'struct']: r#127
[#187 'type']: r#127
[#187 'var']: r#127
[#187 EndOfText]: r#127
[#188 '&']: s#73
[#188 '(']: s#115
[#188 '*']: s#72
[#188 ';']: s#19
[#188 '_']: s#386
[#188 'break']: s#375
[#188 'const']: s#374
[#188 'continue']: s#376
[#188 'discard']: s#361
[#188 'for']: s#369
[#188 'if']: s#380
[#188 'let']: s#373
[#188 'loop']: s#368
[#188 'return']: s#365
[#188 'static_assert']: s#26
[#188 'switch']: s#367
[#188 'var']: s#163
[#188 'while']: s#370
[#188 '{']: s#185
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#189 'r32float']: s#340
[#189 'r32sint']: s#339
[#189 'r32uint']: s#338
[#189 'rg32float']: s#343
[#189 'rg32sint']: s#342
[#189 'rg32uint']: s#341
[#189 'rgba16float']: s#337
[#189 'rgba16sint']: s#336
[#189 'rgba16uint']: s#335
[#189 'rgba32float']: s#346
[#189 'rgba32sint']: s#345
[#189 'rgba32uint']: s#344
[#189 'rgba8sint']: s#334
[#189 'rgba8snorm']: s#332
[#189 'rgba8uint']: s#333
[#189 'rgba8unorm']: s#331
[#190 'array']: s#315
[#190 'atomic']: s#95
[#190 'bool']: s#88
[#190 'f16']: s#117
[#190 'f32']: s#116
[#190 'i32']: s#118
[#190 'mat2x2']: s#100
[#190 'mat2x3']: s#101
[#190 'mat2x4']: s#102
[#190 'mat3x2']: s#103
[#190 'mat3x3']: s#104
[#190 'mat3x4']: s#105
[#190 'mat4x2']: s#106
[#190 'mat4x3']: s#107
[#190 'mat4x4']: s#108
[#190 'ptr']: s#120
[#190 'sampler']: s#137
[#190 'sampler_comparison']: s#138
[#190 'texture_1d']: s#144
[#190 'texture_2d']: s#145
[#190 'texture_2d_array']: s#146
[#190 'texture_3d']: s#147
[#190 'texture_cube']: s#148
[#190 'texture_cube_array']: s#149
[#190 'texture_depth_2d']: s#139
[#190 'texture_depth_2d_array']: s#140
[#190 'texture_depth_cube']: s#141
[#190 'texture_depth_cube_array']: s#142
[#190 'texture_depth_multisampled_2d']: s#143
[#190 'texture_multisampled_2d']: s#150
[#190 'texture_storage_1d']: s#151
[#190 'texture_storage_2d']: s#152
[#190 'texture_storage_2d_array']: s#153
[#190 'texture_storage_3d']: s#154
[#190 'u32']: s#119
[#190 'vec2']: s#97
[#190 'vec3']: s#98
[#190 'vec4']: s#99
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#191 'array']: s#315
[#191 'atomic']: s#95
[#191 'bool']: s#88
[#191 'f16']: s#117
[#191 'f32']: s#116
[#191 'i32']: s#118
[#191 'mat2x2']: s#100
[#191 'mat2x3']: s#101
[#191 'mat2x4']: s#102
[#191 'mat3x2']: s#103
[#191 'mat3x3']: s#104
[#191 'mat3x4']: s#105
[#191 'mat4x2']: s#106
[#191 'mat4x3']: s#107
[#191 'mat4x4']: s#108
[#191 'ptr']: s#120
[#191 'sampler']: s#137
[#191 'sampler_comparison']: s#138
[#191 'texture_1d']: s#144
[#191 'texture_2d']: s#145
[#191 'texture_2d_array']: s#146
[#191 'texture_3d']: s#147
[#191 'texture_cube']: s#148
[#191 'texture_cube_array']: s#149
[#191 'texture_depth_2d']: s#139
[#191 'texture_depth_2d_array']: s#140
[#191 'texture_depth_cube']: s#141
[#191 'texture_depth_cube_array']: s#142
[#191 'texture_depth_multisampled_2d']: s#143
[#191 'texture_multisampled_2d']: s#150
[#191 'texture_storage_1d']: s#151
[#191 'texture_storage_2d']: s#152
[#191 'texture_storage_2d_array']: s#153
[#191 'texture_storage_3d']: s#154
[#191 'u32']: s#119
[#191 'vec2']: s#97
[#191 'vec3']: s#98
[#191 'vec4']: s#99
[#191 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#192 'array']: s#315
[#192 'atomic']: s#95
[#192 'bool']: s#88
[#192 'f16']: s#117
[#192 'f32']: s#116
[#192 'i32']: s#118
[#192 'mat2x2']: s#100
[#192 'mat2x3']: s#101
[#192 'mat2x4']: s#102
[#192 'mat3x2']: s#103
[#192 'mat3x3']: s#104
[#192 'mat3x4']: s#105
[#192 'mat4x2']: s#106
[#192 'mat4x3']: s#107
[#192 'mat4x4']: s#108
[#192 'ptr']: s#120
[#192 'sampler']: s#137
[#192 'sampler_comparison']: s#138
[#192 'texture_1d']: s#144
[#192 'texture_2d']: s#145
[#192 'texture_2d_array']: s#146
[#192 'texture_3d']: s#147
[#192 'texture_cube']: s#148
[#192 'texture_cube_array']: s#149
[#192 'texture_depth_2d']: s#139
[#192 'texture_depth_2d_array']: s#140
[#192 'texture_depth_cube']: s#141
[#192 'texture_depth_cube_array']: s#142
[#192 'texture_depth_multisampled_2d']: s#143
[#192 'texture_multisampled_2d']: s#150
[#192 'texture_storage_1d']: s#151
[#192 'texture_storage_2d']: s#152
[#192 'texture_storage_2d_array']: s#153
[#192 'texture_storage_3d']: s#154
[#192 'u32']: s#119
[#192 'vec2']: s#97
[#192 'vec3']: s#98
[#192 'vec4']: s#99
[#192 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#193 'function']: s#322
[#193 'private']: s#323
[#193 'storage']: s#326
[#193 'uniform']: s#325
[#193 'workgroup']: s#324
[#194 ')']: s#320
[#195 'array']: s#315
[#195 'atomic']: s#95
[#195 'bool']: s#88
[#195 'f16']: s#117
[#195 'f32']: s#116
[#195 'i32']: s#118
[#195 'mat2x2']: s#100
[#195 'mat2x3']: s#101
[#195 'mat2x4']: s#102
[#195 'mat3x2']: s#103
[#195 'mat3x3']: s#104
[#195 'mat3x4']: s#105
[#195 'mat4x2']: s#106
[#195 'mat4x3']: s#107
[#195 'mat4x4']: s#108
[#195 'ptr']: s#120
[#195 'sampler']: s#137
[#195 'sampler_comparison']: s#138
[#195 'texture_1d']: s#144
[#195 'texture_2d']: s#145
[#195 'texture_2d_array']: s#146
[#195 'texture_3d']: s#147
[#195 'texture_cube']: s#148
[#195 'texture_cube_array']: s#149
[#195 'texture_depth_2d']: s#139
[#195 'texture_depth_2d_array']: s#140
[#195 'texture_depth_cube']: s#141
[#195 'texture_depth_cube_array']: s#142
[#195 'texture_depth_multisampled_2d']: s#143
[#195 'texture_multisampled_2d']: s#150
[#195 'texture_storage_1d']: s#151
[#195 'texture_storage_2d']: s#152
[#195 'texture_storage_2d_array']: s#153
[#195 'texture_storage_3d']: s#154
[#195 'u32']: s#119
[#195 'vec2']: s#97
[#195 'vec3']: s#98
[#195 'vec4']: s#99
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#196 'array']: s#315
[#196 'atomic']: s#95
[#196 'bool']: s#88
[#196 'f16']: s#117
[#196 'f32']: s#116
[#196 'i32']: s#118
[#196 'mat2x2']: s#100
[#196 'mat2x3']: s#101
[#196 'mat2x4']: s#102
[#196 'mat3x2']: s#103
[#196 'mat3x3']: s#104
[#196 'mat3x4']: s#105
[#196 'mat4x2']: s#106
[#196 'mat4x3']: s#107
[#196 'mat4x4']: s#108
[#196 'ptr']: s#120
[#196 'sampler']: s#137
[#196 'sampler_comparison']: s#138
[#196 'texture_1d']: s#144
[#196 'texture_2d']: s#145
[#196 'texture_2d_array']: s#146
[#196 'texture_3d']: s#147
[#196 'texture_cube']: s#148
[#196 'texture_cube_array']: s#149
[#196 'texture_depth_2d']: s#139
[#196 'texture_depth_2d_array']: s#140
[#196 'texture_depth_cube']: s#141
[#196 'texture_depth_cube_array']: s#142
[#196 'texture_depth_multisampled_2d']: s#143
[#196 'texture_multisampled_2d']: s#150
[#196 'texture_storage_1d']: s#151
[#196 'texture_storage_2d']: s#152
[#196 'texture_storage_2d_array']: s#153
[#196 'texture_storage_3d']: s#154
[#196 'u32']: s#119
[#196 'vec2']: s#97
[#196 'vec3']: s#98
[#196 'vec4']: s#99
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#197 'array']: s#315
[#197 'atomic']: s#95
[#197 'bool']: s#88
[#197 'f16']: s#117
[#197 'f32']: s#116
[#197 'i32']: s#118
[#197 'mat2x2']: s#100
[#197 'mat2x3']: s#101
[#197 'mat2x4']: s#102
[#197 'mat3x2']: s#103
[#197 'mat3x3']: s#104
[#197 'mat3x4']: s#105
[#197 'mat4x2']: s#106
[#197 'mat4x3']: s#107
[#197 'mat4x4']: s#108
[#197 'ptr']: s#120
[#197 'sampler']: s#137
[#197 'sampler_comparison']: s#138
[#197 'texture_1d']: s#144
[#197 'texture_2d']: s#145
[#197 'texture_2d_array']: s#146
[#197 'texture_3d']: s#147
[#197 'texture_cube']: s#148
[#197 'texture_cube_array']: s#149
[#197 'texture_depth_2d']: s#139
[#197 'texture_depth_2d_array']: s#140
[#197 'texture_depth_cube']: s#141
[#197 'texture_depth_cube_array']: s#142
[#197 'texture_depth_multisampled_2d']: s#143
[#197 'texture_multisampled_2d']: s#150
[#197 'texture_storage_1d']: s#151
[#197 'texture_storage_2d']: s#152
[#197 'texture_storage_2d_array']: s#153
[#197 'texture_storage_3d']: s#154
[#197 'u32']: s#119
[#197 'vec2']: s#97
[#197 'vec3']: s#98
[#197 'vec4']: s#99
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#198 'array']: s#315
[#198 'atomic']: s#95
[#198 'bool']: s#88
[#198 'f16']: s#117
[#198 'f32']: s#116
[#198 'i32']: s#118
[#198 'mat2x2']: s#100
[#198 'mat2x3']: s#101
[#198 'mat2x4']: s#102
[#198 'mat3x2']: s#103
[#198 'mat3x3']: s#104
[#198 'mat3x4']: s#105
[#198 'mat4x2']: s#106
[#198 'mat4x3']: s#107
[#198 'mat4x4']: s#108
[#198 'ptr']: s#120
[#198 'sampler']: s#137
[#198 'sampler_comparison']: s#138
[#198 'texture_1d']: s#144
[#198 'texture_2d']: s#145
[#198 'texture_2d_array']: s#146
[#198 'texture_3d']: s#147
[#198 'texture_cube']: s#148
[#198 'texture_cube_array']: s#149
[#198 'texture_depth_2d']: s#139
[#198 'texture_depth_2d_array']: s#140
[#198 'texture_depth_cube']: s#141
[#198 'texture_depth_cube_array']: s#142
[#198 'texture_depth_multisampled_2d']: s#143
[#198 'texture_multisampled_2d']: s#150
[#198 'texture_storage_1d']: s#151
[#198 'texture_storage_2d']: s#152
[#198 'texture_storage_2d_array']: s#153
[#198 'texture_storage_3d']: s#154
[#198 'u32']: s#119
[#198 'vec2']: s#97
[#198 'vec3']: s#98
[#198 'vec4']: s#99
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#199 '!=']: r#128
[#199 '%']: r#128
[#199 '&&']: r#128
[#199 '&']: r#128
[#199 ')']: r#128
[#199 '*']: r#128
[#199 '+']: r#128
[#199 ',']: r#128
[#199 '-']: r#128
[#199 '.']: r#128
[#199 '/']: r#128
[#199 ':']: r#128
[#199 ';']: r#128
[#199 '<']: r#128
[#199 '<<']: r#128
[#199 '<=']: r#128
[#199 '==']: r#128
[#199 '>']: r#128
[#199 '>=']: r#128
[#199 '>>']: r#128
[#199 '[']: r#128
[#199 ']']: r#128
[#199 '^']: r#128
[#199 '{']: r#128
[#199 '|']: r#128
[#199 '||']: r#128
[#200 '!']: s#70
[#200 '&']: s#73
[#200 '(']: s#115
[#200 '*']: s#72
[#200 '-']: s#69
[#200 'array']: s#83
[#200 'atomic']: s#95
[#200 'bitcast']: s#78
[#200 'bool']: s#88
[#200 'f16']: s#117
[#200 'f32']: s#116
[#200 'false']: s#114
[#200 'i32']: s#118
[#200 'mat2x2']: s#100
[#200 'mat2x3']: s#101
[#200 'mat2x4']: s#102
[#200 'mat3x2']: s#103
[#200 'mat3x3']: s#104
[#200 'mat3x4']: s#105
[#200 'mat4x2']: s#106
[#200 'mat4x3']: s#107
[#200 'mat4x4']: s#108
[#200 'ptr']: s#120
[#200 'sampler']: s#137
[#200 'sampler_comparison']: s#138
[#200 'texture_1d']: s#144
[#200 'texture_2d']: s#145
[#200 'texture_2d_array']: s#146
[#200 'texture_3d']: s#147
[#200 'texture_cube']: s#148
[#200 'texture_cube_array']: s#149
[#200 'texture_depth_2d']: s#139
[#200 'texture_depth_2d_array']: s#140
[#200 'texture_depth_cube']: s#141
[#200 'texture_depth_cube_array']: s#142
[#200 'texture_depth_multisampled_2d']: s#143
[#200 'texture_multisampled_2d']: s#150
[#200 'texture_storage_1d']: s#151
[#200 'texture_storage_2d']: s#152
[#200 'texture_storage_2d_array']: s#153
[#200 'texture_storage_3d']: s#154
[#200 'true']: s#113
[#200 'u32']: s#119
[#200 'vec2']: s#97
[#200 'vec3']: s#98
[#200 'vec4']: s#99
[#200 '~']: s#71
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#200 /0[fh]/]: s#129
[#200 /0[iu]?/]: s#126
[#200 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#200 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#200 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#200 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#200 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#200 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#200 /[1-9][0-9]*[fh]/]: s#130
[#200 /[1-9][0-9]*[iu]?/]: s#127
[#201 '!=']: r#129
[#201 '%']: r#129
[#201 '&&']: r#129
[#201 '&']: r#129
[#201 ')']: r#129
[#201 '*']: r#129
[#201 '+']: r#129
[#201 ',']: r#129
[#201 '-']: r#129
[#201 '/']: r#129
[#201 ':']: r#129
[#201 ';']: r#129
[#201 '<']: r#129
[#201 '<<']: r#129
[#201 '<=']: r#129
[#201 '==']: r#129
[#201 '>']: r#129
[#201 '>=']: r#129
[#201 '>>']: r#129
[#201 ']']: r#129
[#201 '^']: r#129
[#201 '{']: r#129
[#201 '|']: r#129
[#201 '||']: r#129
[#202 '!=']: r#130
[#202 '%']: r#130
[#202 '&&']: r#130
[#202 '&']: r#130
[#202 ')']: r#130
[#202 '*']: r#130
[#202 '+']: r#130
[#202 ',']: r#130
[#202 '-']: r#130
[#202 '/']: r#130
[#202 ':']: r#130
[#202 ';']: r#130
[#202 '<']: r#130
[#202 '<<']: r#130
[#202 '<=']: r#130
[#202 '==']: r#130
[#202 '>']: r#130
[#202 '>=']: r#130
[#202 '>>']: r#130
[#202 ']']: r#130
[#202 '^']: r#130
[#202 '{']: r#130
[#202 '|']: r#130
[#202 '||']: r#130
[#203 '!']: s#70
[#203 '&']: s#73
[#203 '(']: s#115
[#203 '*']: s#72
[#203 '-']: s#69
[#203 'array']: s#83
[#203 'atomic']: s#95
[#203 'bitcast']: s#78
[#203 'bool']: s#88
[#203 'f16']: s#117
[#203 'f32']: s#116
[#203 'false']: s#114
[#203 'i32']: s#118
[#203 'mat2x2']: s#100
[#203 'mat2x3']: s#101
[#203 'mat2x4']: s#102
[#203 'mat3x2']: s#103
[#203 'mat3x3']: s#104
[#203 'mat3x4']: s#105
[#203 'mat4x2']: s#106
[#203 'mat4x3']: s#107
[#203 'mat4x4']: s#108
[#203 'ptr']: s#120
[#203 'sampler']: s#137
[#203 'sampler_comparison']: s#138
[#203 'texture_1d']: s#144
[#203 'texture_2d']: s#145
[#203 'texture_2d_array']: s#146
[#203 'texture_3d']: s#147
[#203 'texture_cube']: s#148
[#203 'texture_cube_array']: s#149
[#203 'texture_depth_2d']: s#139
[#203 'texture_depth_2d_array']: s#140
[#203 'texture_depth_cube']: s#141
[#203 'texture_depth_cube_array']: s#142
[#203 'texture_depth_multisampled_2d']: s#143
[#203 'texture_multisampled_2d']: s#150
[#203 'texture_storage_1d']: s#151
[#203 'texture_storage_2d']: s#152
[#203 'texture_storage_2d_array']: s#153
[#203 'texture_storage_3d']: s#154
[#203 'true']: s#113
[#203 'u32']: s#119
[#203 'vec2']: s#97
[#203 'vec3']: s#98
[#203 'vec4']: s#99
[#203 '~']: s#71
[#203 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#203 /0[fh]/]: s#129
[#203 /0[iu]?/]: s#126
[#203 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#203 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#203 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#203 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#203 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#203 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#203 /[1-9][0-9]*[fh]/]: s#130
[#203 /[1-9][0-9]*[iu]?/]: s#127
[#204 '/[rgba]/']: s#299
[#204 '/[rgba][rgba]/']: s#300
[#204 '/[rgba][rgba][rgba]/']: s#301
[#204 '/[rgba][rgba][rgba][rgba]/']: s#302
[#204 '/[xyzw]/']: s#303
[#204 '/[xyzw][xyzw]/']: s#304
[#204 '/[xyzw][xyzw][xyzw]/']: s#305
[#204 '/[xyzw][xyzw][xyzw][xyzw]/']: s#306
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#298
[#205 '!']: r#131
[#205 '&']: r#131
[#205 '(']: r#131
[#205 '*']: r#131
[#205 '-']: r#131
[#205 'array']: r#131
[#205 'atomic']: r#131
[#205 'bitcast']: r#131
[#205 'bool']: r#131
[#205 'f16']: r#131
[#205 'f32']: r#131
[#205 'false']: r#131
[#205 'i32']: r#131
[#205 'mat2x2']: r#131
[#205 'mat2x3']: r#131
[#205 'mat2x4']: r#131
[#205 'mat3x2']: r#131
[#205 'mat3x3']: r#131
[#205 'mat3x4']: r#131
[#205 'mat4x2']: r#131
[#205 'mat4x3']: r#131
[#205 'mat4x4']: r#131
[#205 'ptr']: r#131
[#205 'sampler']: r#131
[#205 'sampler_comparison']: r#131
[#205 'texture_1d']: r#131
[#205 'texture_2d']: r#131
[#205 'texture_2d_array']: r#131
[#205 'texture_3d']: r#131
[#205 'texture_cube']: r#131
[#205 'texture_cube_array']: r#131
[#205 'texture_depth_2d']: r#131
[#205 'texture_depth_2d_array']: r#131
[#205 'texture_depth_cube']: r#131
[#205 'texture_depth_cube_array']: r#131
[#205 'texture_depth_multisampled_2d']: r#131
[#205 'texture_multisampled_2d']: r#131
[#205 'texture_storage_1d']: r#131
[#205 'texture_storage_2d']: r#131
[#205 'texture_storage_2d_array']: r#131
[#205 'texture_storage_3d']: r#131
[#205 'true']: r#131
[#205 'u32']: r#131
[#205 'vec2']: r#131
[#205 'vec3']: r#131
[#205 'vec4']: r#131
[#205 '~']: r#131
[#205 /0[xX][0-9a-fA-F]+[iu]?/]: r#131
[#207 '!=']: r#132
[#207 '%']: r#132
[#207 '&&']: r#132
[#207 '&']: r#132
[#207 ')']: r#132
[#207 '*']: r#132
[#207 '+']: r#132
[#207 ',']: r#132
[#207 '-']: r#132
[#207 '/']: r#132
[#207 ':']: r#132
[#207 ';']: r#132
[#207 '<']: r#132
[#207 '<<']: r#132
[#207 '<=']: r#132
[#207 '==']: r#132
[#207 '>']: r#132
[#207 '>=']: r#132
[#207 '>>']: r#132
[#207 ']']: r#132
[#207 '^']: r#132
[#207 '{']: r#132
[#207 '|']: r#132
[#207 '||']: r#132
[#208 '!=']: r#133
[#208 '%']: r#133
[#208 '&&']: r#133
[#208 '&']: r#133
[#208 ')']: r#133
[#208 '*']: r#133
[#208 '+']: r#133
[#208 ',']: r#133
[#208 '-']: r#133
[#208 '/']: r#133
[#208 ':']: r#133
[#208 ';']: r#133
[#208 '<']: r#133
[#208 '<<']: r#133
[#208 '<=']: r#133
[#208 '==']: r#133
[#208 '>']: r#133
[#208 '>=']: r#133
[#208 '>>']: r#133
[#208 ']']: r#133
[#208 '^']: r#133
[#208 '{']: r#133
[#208 '|']: r#133
[#208 '||']: r#133
[#209 '!=']: r#134
[#209 '%']: r#134
[#209 '&&']: r#134
[#209 '&']: r#134
[#209 ')']: r#134
[#209 '*']: r#134
[#209 '+']: r#134
[#209 ',']: r#134
[#209 '-']: r#134
[#209 '/']: r#134
[#209 ':']: r#134
[#209 ';']: r#134
[#209 '<']: r#134
[#209 '<<']: r#134
[#209 '<=']: r#134
[#209 '==']: r#134
[#209 '>']: r#134
[#209 '>=']: r#134
[#209 '>>']: r#134
[#209 ']']: r#134
[#209 '^']: r#134
[#209 '{']: r#134
[#209 '|']: r#134
[#209 '||']: r#134
[#210 '!=']: r#135
[#210 '%']: r#135
[#210 '&&']: r#135
[#210 '&']: r#135
[#210 ')']: r#135
[#210 '*']: r#135
[#210 '+']: r#135
[#210 ',']: r#135
[#210 '-']: r#135
[#210 '/']: r#135
[#210 ':']: r#135
[#210 ';']: r#135
[#210 '<']: r#135
[#210 '<<']: r#135
[#210 '<=']: r#135
[#210 '==']: r#135
[#210 '>']: r#135
[#210 '>=']: r#135
[#210 '>>']: r#135
[#210 ']']: r#135
[#210 '^']: r#135
[#210 '{']: r#135
[#210 '|']: r#135
[#210 '||']: r#135
[#211 '!=']: r#136
[#211 '%']: r#136
[#211 '&&']: r#136
[#211 '&']: r#136
[#211 ')']: r#136
[#211 '*']: r#136
[#211 '+']: r#136
[#211 ',']: r#136
[#211 '-']: r#136
[#211 '/']: r#136
[#211 ':']: r#136
[#211 ';']: r#136
[#211 '<']: r#136
[#211 '<<']: r#136
[#211 '<=']: r#136
[#211 '==']: r#136
[#211 '>']: r#136
[#211 '>=']: r#136
[#211 '>>']: r#136
[#211 ']']: r#136
[#211 '^']: r#136
[#211 '{']: r#136
[#211 '|']: r#136
[#211 '||']: r#136
[#212 '!']: s#70
[#212 '&']: s#73
[#212 '(']: s#115
[#212 '*']: s#72
[#212 '-']: s#69
[#212 'array']: s#83
[#212 'atomic']: s#95
[#212 'bitcast']: s#78
[#212 'bool']: s#88
[#212 'f16']: s#117
[#212 'f32']: s#116
[#212 'false']: s#114
[#212 'i32']: s#118
[#212 'mat2x2']: s#100
[#212 'mat2x3']: s#101
[#212 'mat2x4']: s#102
[#212 'mat3x2']: s#103
[#212 'mat3x3']: s#104
[#212 'mat3x4']: s#105
[#212 'mat4x2']: s#106
[#212 'mat4x3']: s#107
[#212 'mat4x4']: s#108
[#212 'ptr']: s#120
[#212 'sampler']: s#137
[#212 'sampler_comparison']: s#138
[#212 'texture_1d']: s#144
[#212 'texture_2d']: s#145
[#212 'texture_2d_array']: s#146
[#212 'texture_3d']: s#147
[#212 'texture_cube']: s#148
[#212 'texture_cube_array']: s#149
[#212 'texture_depth_2d']: s#139
[#212 'texture_depth_2d_array']: s#140
[#212 'texture_depth_cube']: s#141
[#212 'texture_depth_cube_array']: s#142
[#212 'texture_depth_multisampled_2d']: s#143
[#212 'texture_multisampled_2d']: s#150
[#212 'texture_storage_1d']: s#151
[#212 'texture_storage_2d']: s#152
[#212 'texture_storage_2d_array']: s#153
[#212 'texture_storage_3d']: s#154
[#212 'true']: s#113
[#212 'u32']: s#119
[#212 'vec2']: s#97
[#212 'vec3']: s#98
[#212 'vec4']: s#99
[#212 '~']: s#71
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#212 /0[fh]/]: s#129
[#212 /0[iu]?/]: s#126
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#212 /[1-9][0-9]*[fh]/]: s#130
[#212 /[1-9][0-9]*[iu]?/]: s#127
[#213 '!']: r#137
[#213 '&']: r#137
[#213 '(']: r#137
[#213 '*']: r#137
[#213 '-']: r#137
[#213 'array']: r#137
[#213 'atomic']: r#137
[#213 'bitcast']: r#137
[#213 'bool']: r#137
[#213 'f16']: r#137
[#213 'f32']: r#137
[#213 'false']: r#137
[#213 'i32']: r#137
[#213 'mat2x2']: r#137
[#213 'mat2x3']: r#137
[#213 'mat2x4']: r#137
[#213 'mat3x2']: r#137
[#213 'mat3x3']: r#137
[#213 'mat3x4']: r#137
[#213 'mat4x2']: r#137
[#213 'mat4x3']: r#137
[#213 'mat4x4']: r#137
[#213 'ptr']: r#137
[#213 'sampler']: r#137
[#213 'sampler_comparison']: r#137
[#213 'texture_1d']: r#137
[#213 'texture_2d']: r#137
[#213 'texture_2d_array']: r#137
[#213 'texture_3d']: r#137
[#213 'texture_cube']: r#137
[#213 'texture_cube_array']: r#137
[#213 'texture_depth_2d']: r#137
[#213 'texture_depth_2d_array']: r#137
[#213 'texture_depth_cube']: r#137
[#213 'texture_depth_cube_array']: r#137
[#213 'texture_depth_multisampled_2d']: r#137
[#213 'texture_multisampled_2d']: r#137
[#213 'texture_storage_1d']: r#137
[#213 'texture_storage_2d']: r#137
[#213 'texture_storage_2d_array']: r#137
[#213 'texture_storage_3d']: r#137
[#213 'true']: r#137
[#213 'u32']: r#137
[#213 'vec2']: r#137
[#213 'vec3']: r#137
[#213 'vec4']: r#137
[#213 '~']: r#137
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: r#137
[#214 '!']: r#138
[#214 '&']: r#138
[#214 '(']: r#138
[#214 '*']: r#138
[#214 '-']: r#138
[#214 'array']: r#138
[#214 'atomic']: r#138
[#214 'bitcast']: r#138
[#214 'bool']: r#138
[#214 'f16']: r#138
[#214 'f32']: r#138
[#214 'false']: r#138
[#214 'i32']: r#138
[#214 'mat2x2']: r#138
[#214 'mat2x3']: r#138
[#214 'mat2x4']: r#138
[#214 'mat3x2']: r#138
[#214 'mat3x3']: r#138
[#214 'mat3x4']: r#138
[#214 'mat4x2']: r#138
[#214 'mat4x3']: r#138
[#214 'mat4x4']: r#138
[#214 'ptr']: r#138
[#214 'sampler']: r#138
[#214 'sampler_comparison']: r#138
[#214 'texture_1d']: r#138
[#214 'texture_2d']: r#138
[#214 'texture_2d_array']: r#138
[#214 'texture_3d']: r#138
[#214 'texture_cube']: r#138
[#214 'texture_cube_array']: r#138
[#214 'texture_depth_2d']: r#138
[#214 'texture_depth_2d_array']: r#138
[#214 'texture_depth_cube']: r#138
[#214 'texture_depth_cube_array']: r#138
[#214 'texture_depth_multisampled_2d']: r#138
[#214 'texture_multisampled_2d']: r#138
[#214 'texture_storage_1d']: r#138
[#214 'texture_storage_2d']: r#138
[#214 'texture_storage_2d_array']: r#138
[#214 'texture_storage_3d']: r#138
[#214 'true']: r#138
[#214 'u32']: r#138
[#214 'vec2']: r#138
[#214 'vec3']: r#138
[#214 'vec4']: r#138
[#214 '~']: r#138
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: r#138
[#215 '!']: r#139
[#215 '&']: r#139
[#215 '(']: r#139
[#215 '*']: r#139
[#215 '-']: r#139
[#215 'array']: r#139
[#215 'atomic']: r#139
[#215 'bitcast']: r#139
[#215 'bool']: r#139
[#215 'f16']: r#139
[#215 'f32']: r#139
[#215 'false']: r#139
[#215 'i32']: r#139
[#215 'mat2x2']: r#139
[#215 'mat2x3']: r#139
[#215 'mat2x4']: r#139
[#215 'mat3x2']: r#139
[#215 'mat3x3']: r#139
[#215 'mat3x4']: r#139
[#215 'mat4x2']: r#139
[#215 'mat4x3']: r#139
[#215 'mat4x4']: r#139
[#215 'ptr']: r#139
[#215 'sampler']: r#139
[#215 'sampler_comparison']: r#139
[#215 'texture_1d']: r#139
[#215 'texture_2d']: r#139
[#215 'texture_2d_array']: r#139
[#215 'texture_3d']: r#139
[#215 'texture_cube']: r#139
[#215 'texture_cube_array']: r#139
[#215 'texture_depth_2d']: r#139
[#215 'texture_depth_2d_array']: r#139
[#215 'texture_depth_cube']: r#139
[#215 'texture_depth_cube_array']: r#139
[#215 'texture_depth_multisampled_2d']: r#139
[#215 'texture_multisampled_2d']: r#139
[#215 'texture_storage_1d']: r#139
[#215 'texture_storage_2d']: r#139
[#215 'texture_storage_2d_array']: r#139
[#215 'texture_storage_3d']: r#139
[#215 'true']: r#139
[#215 'u32']: r#139
[#215 'vec2']: r#139
[#215 'vec3']: r#139
[#215 'vec4']: r#139
[#215 '~']: r#139
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: r#139
[#216 '!']: r#140
[#216 '&']: r#140
[#216 '(']: r#140
[#216 '*']: r#140
[#216 '-']: r#140
[#216 'array']: r#140
[#216 'atomic']: r#140
[#216 'bitcast']: r#140
[#216 'bool']: r#140
[#216 'f16']: r#140
[#216 'f32']: r#140
[#216 'false']: r#140
[#216 'i32']: r#140
[#216 'mat2x2']: r#140
[#216 'mat2x3']: r#140
[#216 'mat2x4']: r#140
[#216 'mat3x2']: r#140
[#216 'mat3x3']: r#140
[#216 'mat3x4']: r#140
[#216 'mat4x2']: r#140
[#216 'mat4x3']: r#140
[#216 'mat4x4']: r#140
[#216 'ptr']: r#140
[#216 'sampler']: r#140
[#216 'sampler_comparison']: r#140
[#216 'texture_1d']: r#140
[#216 'texture_2d']: r#140
[#216 'texture_2d_array']: r#140
[#216 'texture_3d']: r#140
[#216 'texture_cube']: r#140
[#216 'texture_cube_array']: r#140
[#216 'texture_depth_2d']: r#140
[#216 'texture_depth_2d_array']: r#140
[#216 'texture_depth_cube']: r#140
[#216 'texture_depth_cube_array']: r#140
[#216 'texture_depth_multisampled_2d']: r#140
[#216 'texture_multisampled_2d']: r#140
[#216 'texture_storage_1d']: r#140
[#216 'texture_storage_2d']: r#140
[#216 'texture_storage_2d_array']: r#140
[#216 'texture_storage_3d']: r#140
[#216 'true']: r#140
[#216 'u32']: r#140
[#216 'vec2']: r#140
[#216 'vec3']: r#140
[#216 'vec4']: r#140
[#216 '~']: r#140
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: r#140
[#217 '!']: r#141
[#217 '&']: r#141
[#217 '(']: r#141
[#217 '*']: r#141
[#217 '-']: r#141
[#217 'array']: r#141
[#217 'atomic']: r#141
[#217 'bitcast']: r#141
[#217 'bool']: r#141
[#217 'f16']: r#141
[#217 'f32']: r#141
[#217 'false']: r#141
[#217 'i32']: r#141
[#217 'mat2x2']: r#141
[#217 'mat2x3']: r#141
[#217 'mat2x4']: r#141
[#217 'mat3x2']: r#141
[#217 'mat3x3']: r#141
[#217 'mat3x4']: r#141
[#217 'mat4x2']: r#141
[#217 'mat4x3']: r#141
[#217 'mat4x4']: r#141
[#217 'ptr']: r#141
[#217 'sampler']: r#141
[#217 'sampler_comparison']: r#141
[#217 'texture_1d']: r#141
[#217 'texture_2d']: r#141
[#217 'texture_2d_array']: r#141
[#217 'texture_3d']: r#141
[#217 'texture_cube']: r#141
[#217 'texture_cube_array']: r#141
[#217 'texture_depth_2d']: r#141
[#217 'texture_depth_2d_array']: r#141
[#217 'texture_depth_cube']: r#141
[#217 'texture_depth_cube_array']: r#141
[#217 'texture_depth_multisampled_2d']: r#141
[#217 'texture_multisampled_2d']: r#141
[#217 'texture_storage_1d']: r#141
[#217 'texture_storage_2d']: r#141
[#217 'texture_storage_2d_array']: r#141
[#217 'texture_storage_3d']: r#141
[#217 'true']: r#141
[#217 'u32']: r#141
[#217 'vec2']: r#141
[#217 'vec3']: r#141
[#217 'vec4']: r#141
[#217 '~']: r#141
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: r#141
[#218 '!']: s#70
[#218 '&']: s#73
[#218 '(']: s#115
[#218 '*']: s#72
[#218 '-']: s#69
[#218 'array']: s#83
[#218 'atomic']: s#95
[#218 'bitcast']: s#78
[#218 'bool']: s#88
[#218 'f16']: s#117
[#218 'f32']: s#116
[#218 'false']: s#114
[#218 'i32']: s#118
[#218 'mat2x2']: s#100
[#218 'mat2x3']: s#101
[#218 'mat2x4']: s#102
[#218 'mat3x2']: s#103
[#218 'mat3x3']: s#104
[#218 'mat3x4']: s#105
[#218 'mat4x2']: s#106
[#218 'mat4x3']: s#107
[#218 'mat4x4']: s#108
[#218 'ptr']: s#120
[#218 'sampler']: s#137
[#218 'sampler_comparison']: s#138
[#218 'texture_1d']: s#144
[#218 'texture_2d']: s#145
[#218 'texture_2d_array']: s#146
[#218 'texture_3d']: s#147
[#218 'texture_cube']: s#148
[#218 'texture_cube_array']: s#149
[#218 'texture_depth_2d']: s#139
[#218 'texture_depth_2d_array']: s#140
[#218 'texture_depth_cube']: s#141
[#218 'texture_depth_cube_array']: s#142
[#218 'texture_depth_multisampled_2d']: s#143
[#218 'texture_multisampled_2d']: s#150
[#218 'texture_storage_1d']: s#151
[#218 'texture_storage_2d']: s#152
[#218 'texture_storage_2d_array']: s#153
[#218 'texture_storage_3d']: s#154
[#218 'true']: s#113
[#218 'u32']: s#119
[#218 'vec2']: s#97
[#218 'vec3']: s#98
[#218 'vec4']: s#99
[#218 '~']: s#71
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#218 /0[fh]/]: s#129
[#218 /0[iu]?/]: s#126
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#218 /[1-9][0-9]*[fh]/]: s#130
[#218 /[1-9][0-9]*[iu]?/]: s#127
[#219 '!']: s#70
[#219 '&']: s#73
[#219 '(']: s#115
[#219 '*']: s#72
[#219 '-']: s#69
[#219 'array']: s#83
[#219 'atomic']: s#95
[#219 'bitcast']: s#78
[#219 'bool']: s#88
[#219 'f16']: s#117
[#219 'f32']: s#116
[#219 'false']: s#114
[#219 'i32']: s#118
[#219 'mat2x2']: s#100
[#219 'mat2x3']: s#101
[#219 'mat2x4']: s#102
[#219 'mat3x2']: s#103
[#219 'mat3x3']: s#104
[#219 'mat3x4']: s#105
[#219 'mat4x2']: s#106
[#219 'mat4x3']: s#107
[#219 'mat4x4']: s#108
[#219 'ptr']: s#120
[#219 'sampler']: s#137
[#219 'sampler_comparison']: s#138
[#219 'texture_1d']: s#144
[#219 'texture_2d']: s#145
[#219 'texture_2d_array']: s#146
[#219 'texture_3d']: s#147
[#219 'texture_cube']: s#148
[#219 'texture_cube_array']: s#149
[#219 'texture_depth_2d']: s#139
[#219 'texture_depth_2d_array']: s#140
[#219 'texture_depth_cube']: s#141
[#219 'texture_depth_cube_array']: s#142
[#219 'texture_depth_multisampled_2d']: s#143
[#219 'texture_multisampled_2d']: s#150
[#219 'texture_storage_1d']: s#151
[#219 'texture_storage_2d']: s#152
[#219 'texture_storage_2d_array']: s#153
[#219 'texture_storage_3d']: s#154
[#219 'true']: s#113
[#219 'u32']: s#119
[#219 'vec2']: s#97
[#219 'vec3']: s#98
[#219 'vec4']: s#99
[#219 '~']: s#71
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#219 /0[fh]/]: s#129
[#219 /0[iu]?/]: s#126
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#219 /[1-9][0-9]*[fh]/]: s#130
[#219 /[1-9][0-9]*[iu]?/]: s#127
[#220 '!']: r#142
[#220 '&']: r#142
[#220 '(']: r#142
[#220 '*']: r#142
[#220 '-']: r#142
[#220 'array']: r#142
[#220 'atomic']: r#142
[#220 'bitcast']: r#142
[#220 'bool']: r#142
[#220 'f16']: r#142
[#220 'f32']: r#142
[#220 'false']: r#142
[#220 'i32']: r#142
[#220 'mat2x2']: r#142
[#220 'mat2x3']: r#142
[#220 'mat2x4']: r#142
[#220 'mat3x2']: r#142
[#220 'mat3x3']: r#142
[#220 'mat3x4']: r#142
[#220 'mat4x2']: r#142
[#220 'mat4x3']: r#142
[#220 'mat4x4']: r#142
[#220 'ptr']: r#142
[#220 'sampler']: r#142
[#220 'sampler_comparison']: r#142
[#220 'texture_1d']: r#142
[#220 'texture_2d']: r#142
[#220 'texture_2d_array']: r#142
[#220 'texture_3d']: r#142
[#220 'texture_cube']: r#142
[#220 'texture_cube_array']: r#142
[#220 'texture_depth_2d']: r#142
[#220 'texture_depth_2d_array']: r#142
[#220 'texture_depth_cube']: r#142
[#220 'texture_depth_cube_array']: r#142
[#220 'texture_depth_multisampled_2d']: r#142
[#220 'texture_multisampled_2d']: r#142
[#220 'texture_storage_1d']: r#142
[#220 'texture_storage_2d']: r#142
[#220 'texture_storage_2d_array']: r#142
[#220 'texture_storage_3d']: r#142
[#220 'true']: r#142
[#220 'u32']: r#142
[#220 'vec2']: r#142
[#220 'vec3']: r#142
[#220 'vec4']: r#142
[#220 '~']: r#142
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: r#142
[#221 '!']: r#143
[#221 '&']: r#143
[#221 '(']: r#143
[#221 '*']: r#143
[#221 '-']: r#143
[#221 'array']: r#143
[#221 'atomic']: r#143
[#221 'bitcast']: r#143
[#221 'bool']: r#143
[#221 'f16']: r#143
[#221 'f32']: r#143
[#221 'false']: r#143
[#221 'i32']: r#143
[#221 'mat2x2']: r#143
[#221 'mat2x3']: r#143
[#221 'mat2x4']: r#143
[#221 'mat3x2']: r#143
[#221 'mat3x3']: r#143
[#221 'mat3x4']: r#143
[#221 'mat4x2']: r#143
[#221 'mat4x3']: r#143
[#221 'mat4x4']: r#143
[#221 'ptr']: r#143
[#221 'sampler']: r#143
[#221 'sampler_comparison']: r#143
[#221 'texture_1d']: r#143
[#221 'texture_2d']: r#143
[#221 'texture_2d_array']: r#143
[#221 'texture_3d']: r#143
[#221 'texture_cube']: r#143
[#221 'texture_cube_array']: r#143
[#221 'texture_depth_2d']: r#143
[#221 'texture_depth_2d_array']: r#143
[#221 'texture_depth_cube']: r#143
[#221 'texture_depth_cube_array']: r#143
[#221 'texture_depth_multisampled_2d']: r#143
[#221 'texture_multisampled_2d']: r#143
[#221 'texture_storage_1d']: r#143
[#221 'texture_storage_2d']: r#143
[#221 'texture_storage_2d_array']: r#143
[#221 'texture_storage_3d']: r#143
[#221 'true']: r#143
[#221 'u32']: r#143
[#221 'vec2']: r#143
[#221 'vec3']: r#143
[#221 'vec4']: r#143
[#221 '~']: r#143
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: r#143
[#222 '!']: s#70
[#222 '&']: s#73
[#222 '(']: s#115
[#222 '*']: s#72
[#222 '-']: s#69
[#222 'array']: s#83
[#222 'atomic']: s#95
[#222 'bitcast']: s#78
[#222 'bool']: s#88
[#222 'f16']: s#117
[#222 'f32']: s#116
[#222 'false']: s#114
[#222 'i32']: s#118
[#222 'mat2x2']: s#100
[#222 'mat2x3']: s#101
[#222 'mat2x4']: s#102
[#222 'mat3x2']: s#103
[#222 'mat3x3']: s#104
[#222 'mat3x4']: s#105
[#222 'mat4x2']: s#106
[#222 'mat4x3']: s#107
[#222 'mat4x4']: s#108
[#222 'ptr']: s#120
[#222 'sampler']: s#137
[#222 'sampler_comparison']: s#138
[#222 'texture_1d']: s#144
[#222 'texture_2d']: s#145
[#222 'texture_2d_array']: s#146
[#222 'texture_3d']: s#147
[#222 'texture_cube']: s#148
[#222 'texture_cube_array']: s#149
[#222 'texture_depth_2d']: s#139
[#222 'texture_depth_2d_array']: s#140
[#222 'texture_depth_cube']: s#141
[#222 'texture_depth_cube_array']: s#142
[#222 'texture_depth_multisampled_2d']: s#143
[#222 'texture_multisampled_2d']: s#150
[#222 'texture_storage_1d']: s#151
[#222 'texture_storage_2d']: s#152
[#222 'texture_storage_2d_array']: s#153
[#222 'texture_storage_3d']: s#154
[#222 'true']: s#113
[#222 'u32']: s#119
[#222 'vec2']: s#97
[#222 'vec3']: s#98
[#222 'vec4']: s#99
[#222 '~']: s#71
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#222 /0[fh]/]: s#129
[#222 /0[iu]?/]: s#126
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#222 /[1-9][0-9]*[fh]/]: s#130
[#222 /[1-9][0-9]*[iu]?/]: s#127
[#223 '!']: r#144
[#223 '&']: r#144
[#223 '(']: r#144
[#223 '*']: r#144
[#223 '-']: r#144
[#223 'array']: r#144
[#223 'atomic']: r#144
[#223 'bitcast']: r#144
[#223 'bool']: r#144
[#223 'f16']: r#144
[#223 'f32']: r#144
[#223 'false']: r#144
[#223 'i32']: r#144
[#223 'mat2x2']: r#144
[#223 'mat2x3']: r#144
[#223 'mat2x4']: r#144
[#223 'mat3x2']: r#144
[#223 'mat3x3']: r#144
[#223 'mat3x4']: r#144
[#223 'mat4x2']: r#144
[#223 'mat4x3']: r#144
[#223 'mat4x4']: r#144
[#223 'ptr']: r#144
[#223 'sampler']: r#144
[#223 'sampler_comparison']: r#144
[#223 'texture_1d']: r#144
[#223 'texture_2d']: r#144
[#223 'texture_2d_array']: r#144
[#223 'texture_3d']: r#144
[#223 'texture_cube']: r#144
[#223 'texture_cube_array']: r#144
[#223 'texture_depth_2d']: r#144
[#223 'texture_depth_2d_array']: r#144
[#223 'texture_depth_cube']: r#144
[#223 'texture_depth_cube_array']: r#144
[#223 'texture_depth_multisampled_2d']: r#144
[#223 'texture_multisampled_2d']: r#144
[#223 'texture_storage_1d']: r#144
[#223 'texture_storage_2d']: r#144
[#223 'texture_storage_2d_array']: r#144
[#223 'texture_storage_3d']: r#144
[#223 'true']: r#144
[#223 'u32']: r#144
[#223 'vec2']: r#144
[#223 'vec3']: r#144
[#223 'vec4']: r#144
[#223 '~']: r#144
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: r#144
[#224 '!']: r#145
[#224 '&']: r#145
[#224 '(']: r#145
[#224 '*']: r#145
[#224 '-']: r#145
[#224 'array']: r#145
[#224 'atomic']: r#145
[#224 'bitcast']: r#145
[#224 'bool']: r#145
[#224 'f16']: r#145
[#224 'f32']: r#145
[#224 'false']: r#145
[#224 'i32']: r#145
[#224 'mat2x2']: r#145
[#224 'mat2x3']: r#145
[#224 'mat2x4']: r#145
[#224 'mat3x2']: r#145
[#224 'mat3x3']: r#145
[#224 'mat3x4']: r#145
[#224 'mat4x2']: r#145
[#224 'mat4x3']: r#145
[#224 'mat4x4']: r#145
[#224 'ptr']: r#145
[#224 'sampler']: r#145
[#224 'sampler_comparison']: r#145
[#224 'texture_1d']: r#145
[#224 'texture_2d']: r#145
[#224 'texture_2d_array']: r#145
[#224 'texture_3d']: r#145
[#224 'texture_cube']: r#145
[#224 'texture_cube_array']: r#145
[#224 'texture_depth_2d']: r#145
[#224 'texture_depth_2d_array']: r#145
[#224 'texture_depth_cube']: r#145
[#224 'texture_depth_cube_array']: r#145
[#224 'texture_depth_multisampled_2d']: r#145
[#224 'texture_multisampled_2d']: r#145
[#224 'texture_storage_1d']: r#145
[#224 'texture_storage_2d']: r#145
[#224 'texture_storage_2d_array']: r#145
[#224 'texture_storage_3d']: r#145
[#224 'true']: r#145
[#224 'u32']: r#145
[#224 'vec2']: r#145
[#224 'vec3']: r#145
[#224 'vec4']: r#145
[#224 '~']: r#145
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: r#145
[#225 '!']: r#146
[#225 '&']: r#146
[#225 '(']: r#146
[#225 '*']: r#146
[#225 '-']: r#146
[#225 'array']: r#146
[#225 'atomic']: r#146
[#225 'bitcast']: r#146
[#225 'bool']: r#146
[#225 'f16']: r#146
[#225 'f32']: r#146
[#225 'false']: r#146
[#225 'i32']: r#146
[#225 'mat2x2']: r#146
[#225 'mat2x3']: r#146
[#225 'mat2x4']: r#146
[#225 'mat3x2']: r#146
[#225 'mat3x3']: r#146
[#225 'mat3x4']: r#146
[#225 'mat4x2']: r#146
[#225 'mat4x3']: r#146
[#225 'mat4x4']: r#146
[#225 'ptr']: r#146
[#225 'sampler']: r#146
[#225 'sampler_comparison']: r#146
[#225 'texture_1d']: r#146
[#225 'texture_2d']: r#146
[#225 'texture_2d_array']: r#146
[#225 'texture_3d']: r#146
[#225 'texture_cube']: r#146
[#225 'texture_cube_array']: r#146
[#225 'texture_depth_2d']: r#146
[#225 'texture_depth_2d_array']: r#146
[#225 'texture_depth_cube']: r#146
[#225 'texture_depth_cube_array']: r#146
[#225 'texture_depth_multisampled_2d']: r#146
[#225 'texture_multisampled_2d']: r#146
[#225 'texture_storage_1d']: r#146
[#225 'texture_storage_2d']: r#146
[#225 'texture_storage_2d_array']: r#146
[#225 'texture_storage_3d']: r#146
[#225 'true']: r#146
[#225 'u32']: r#146
[#225 'vec2']: r#146
[#225 'vec3']: r#146
[#225 'vec4']: r#146
[#225 '~']: r#146
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: r#146
[#226 '!']: s#70
[#226 '&']: s#73
[#226 '(']: s#115
[#226 '*']: s#72
[#226 '-']: s#69
[#226 'array']: s#83
[#226 'atomic']: s#95
[#226 'bitcast']: s#78
[#226 'bool']: s#88
[#226 'f16']: s#117
[#226 'f32']: s#116
[#226 'false']: s#114
[#226 'i32']: s#118
[#226 'mat2x2']: s#100
[#226 'mat2x3']: s#101
[#226 'mat2x4']: s#102
[#226 'mat3x2']: s#103
[#226 'mat3x3']: s#104
[#226 'mat3x4']: s#105
[#226 'mat4x2']: s#106
[#226 'mat4x3']: s#107
[#226 'mat4x4']: s#108
[#226 'ptr']: s#120
[#226 'sampler']: s#137
[#226 'sampler_comparison']: s#138
[#226 'texture_1d']: s#144
[#226 'texture_2d']: s#145
[#226 'texture_2d_array']: s#146
[#226 'texture_3d']: s#147
[#226 'texture_cube']: s#148
[#226 'texture_cube_array']: s#149
[#226 'texture_depth_2d']: s#139
[#226 'texture_depth_2d_array']: s#140
[#226 'texture_depth_cube']: s#141
[#226 'texture_depth_cube_array']: s#142
[#226 'texture_depth_multisampled_2d']: s#143
[#226 'texture_multisampled_2d']: s#150
[#226 'texture_storage_1d']: s#151
[#226 'texture_storage_2d']: s#152
[#226 'texture_storage_2d_array']: s#153
[#226 'texture_storage_3d']: s#154
[#226 'true']: s#113
[#226 'u32']: s#119
[#226 'vec2']: s#97
[#226 'vec3']: s#98
[#226 'vec4']: s#99
[#226 '~']: s#71
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#226 /0[fh]/]: s#129
[#226 /0[iu]?/]: s#126
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#226 /[1-9][0-9]*[fh]/]: s#130
[#226 /[1-9][0-9]*[iu]?/]: s#127
[#227 '!']: r#147
[#227 '&']: r#147
[#227 '(']: r#147
[#227 '*']: r#147
[#227 '-']: r#147
[#227 'array']: r#147
[#227 'atomic']: r#147
[#227 'bitcast']: r#147
[#227 'bool']: r#147
[#227 'f16']: r#147
[#227 'f32']: r#147
[#227 'false']: r#147
[#227 'i32']: r#147
[#227 'mat2x2']: r#147
[#227 'mat2x3']: r#147
[#227 'mat2x4']: r#147
[#227 'mat3x2']: r#147
[#227 'mat3x3']: r#147
[#227 'mat3x4']: r#147
[#227 'mat4x2']: r#147
[#227 'mat4x3']: r#147
[#227 'mat4x4']: r#147
[#227 'ptr']: r#147
[#227 'sampler']: r#147
[#227 'sampler_comparison']: r#147
[#227 'texture_1d']: r#147
[#227 'texture_2d']: r#147
[#227 'texture_2d_array']: r#147
[#227 'texture_3d']: r#147
[#227 'texture_cube']: r#147
[#227 'texture_cube_array']: r#147
[#227 'texture_depth_2d']: r#147
[#227 'texture_depth_2d_array']: r#147
[#227 'texture_depth_cube']: r#147
[#227 'texture_depth_cube_array']: r#147
[#227 'texture_depth_multisampled_2d']: r#147
[#227 'texture_multisampled_2d']: r#147
[#227 'texture_storage_1d']: r#147
[#227 'texture_storage_2d']: r#147
[#227 'texture_storage_2d_array']: r#147
[#227 'texture_storage_3d']: r#147
[#227 'true']: r#147
[#227 'u32']: r#147
[#227 'vec2']: r#147
[#227 'vec3']: r#147
[#227 'vec4']: r#147
[#227 '~']: r#147
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: r#147
[#228 '!']: s#70
[#228 '&']: s#73
[#228 '(']: s#115
[#228 '*']: s#72
[#228 '-']: s#69
[#228 'array']: s#83
[#228 'atomic']: s#95
[#228 'bitcast']: s#78
[#228 'bool']: s#88
[#228 'f16']: s#117
[#228 'f32']: s#116
[#228 'false']: s#114
[#228 'i32']: s#118
[#228 'mat2x2']: s#100
[#228 'mat2x3']: s#101
[#228 'mat2x4']: s#102
[#228 'mat3x2']: s#103
[#228 'mat3x3']: s#104
[#228 'mat3x4']: s#105
[#228 'mat4x2']: s#106
[#228 'mat4x3']: s#107
[#228 'mat4x4']: s#108
[#228 'ptr']: s#120
[#228 'sampler']: s#137
[#228 'sampler_comparison']: s#138
[#228 'texture_1d']: s#144
[#228 'texture_2d']: s#145
[#228 'texture_2d_array']: s#146
[#228 'texture_3d']: s#147
[#228 'texture_cube']: s#148
[#228 'texture_cube_array']: s#149
[#228 'texture_depth_2d']: s#139
[#228 'texture_depth_2d_array']: s#140
[#228 'texture_depth_cube']: s#141
[#228 'texture_depth_cube_array']: s#142
[#228 'texture_depth_multisampled_2d']: s#143
[#228 'texture_multisampled_2d']: s#150
[#228 'texture_storage_1d']: s#151
[#228 'texture_storage_2d']: s#152
[#228 'texture_storage_2d_array']: s#153
[#228 'texture_storage_3d']: s#154
[#228 'true']: s#113
[#228 'u32']: s#119
[#228 'vec2']: s#97
[#228 'vec3']: s#98
[#228 'vec4']: s#99
[#228 '~']: s#71
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#228 /0[fh]/]: s#129
[#228 /0[iu]?/]: s#126
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#228 /[1-9][0-9]*[fh]/]: s#130
[#228 /[1-9][0-9]*[iu]?/]: s#127
[#229 '!']: r#148
[#229 '&']: r#148
[#229 '(']: r#148
[#229 '*']: r#148
[#229 '-']: r#148
[#229 'array']: r#148
[#229 'atomic']: r#148
[#229 'bitcast']: r#148
[#229 'bool']: r#148
[#229 'f16']: r#148
[#229 'f32']: r#148
[#229 'false']: r#148
[#229 'i32']: r#148
[#229 'mat2x2']: r#148
[#229 'mat2x3']: r#148
[#229 'mat2x4']: r#148
[#229 'mat3x2']: r#148
[#229 'mat3x3']: r#148
[#229 'mat3x4']: r#148
[#229 'mat4x2']: r#148
[#229 'mat4x3']: r#148
[#229 'mat4x4']: r#148
[#229 'ptr']: r#148
[#229 'sampler']: r#148
[#229 'sampler_comparison']: r#148
[#229 'texture_1d']: r#148
[#229 'texture_2d']: r#148
[#229 'texture_2d_array']: r#148
[#229 'texture_3d']: r#148
[#229 'texture_cube']: r#148
[#229 'texture_cube_array']: r#148
[#229 'texture_depth_2d']: r#148
[#229 'texture_depth_2d_array']: r#148
[#229 'texture_depth_cube']: r#148
[#229 'texture_depth_cube_array']: r#148
[#229 'texture_depth_multisampled_2d']: r#148
[#229 'texture_multisampled_2d']: r#148
[#229 'texture_storage_1d']: r#148
[#229 'texture_storage_2d']: r#148
[#229 'texture_storage_2d_array']: r#148
[#229 'texture_storage_3d']: r#148
[#229 'true']: r#148
[#229 'u32']: r#148
[#229 'vec2']: r#148
[#229 'vec3']: r#148
[#229 'vec4']: r#148
[#229 '~']: r#148
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: r#148
[#230 '!']: s#70
[#230 '&']: s#73
[#230 '(']: s#115
[#230 '*']: s#72
[#230 '-']: s#69
[#230 'array']: s#83
[#230 'atomic']: s#95
[#230 'bitcast']: s#78
[#230 'bool']: s#88
[#230 'f16']: s#117
[#230 'f32']: s#116
[#230 'false']: s#114
[#230 'i32']: s#118
[#230 'mat2x2']: s#100
[#230 'mat2x3']: s#101
[#230 'mat2x4']: s#102
[#230 'mat3x2']: s#103
[#230 'mat3x3']: s#104
[#230 'mat3x4']: s#105
[#230 'mat4x2']: s#106
[#230 'mat4x3']: s#107
[#230 'mat4x4']: s#108
[#230 'ptr']: s#120
[#230 'sampler']: s#137
[#230 'sampler_comparison']: s#138
[#230 'texture_1d']: s#144
[#230 'texture_2d']: s#145
[#230 'texture_2d_array']: s#146
[#230 'texture_3d']: s#147
[#230 'texture_cube']: s#148
[#230 'texture_cube_array']: s#149
[#230 'texture_depth_2d']: s#139
[#230 'texture_depth_2d_array']: s#140
[#230 'texture_depth_cube']: s#141
[#230 'texture_depth_cube_array']: s#142
[#230 'texture_depth_multisampled_2d']: s#143
[#230 'texture_multisampled_2d']: s#150
[#230 'texture_storage_1d']: s#151
[#230 'texture_storage_2d']: s#152
[#230 'texture_storage_2d_array']: s#153
[#230 'texture_storage_3d']: s#154
[#230 'true']: s#113
[#230 'u32']: s#119
[#230 'vec2']: s#97
[#230 'vec3']: s#98
[#230 'vec4']: s#99
[#230 '~']: s#71
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#230 /0[fh]/]: s#129
[#230 /0[iu]?/]: s#126
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#230 /[1-9][0-9]*[fh]/]: s#130
[#230 /[1-9][0-9]*[iu]?/]: s#127
[#231 '!']: s#70
[#231 '&']: s#73
[#231 '(']: s#115
[#231 '*']: s#72
[#231 '-']: s#69
[#231 'array']: s#83
[#231 'atomic']: s#95
[#231 'bitcast']: s#78
[#231 'bool']: s#88
[#231 'f16']: s#117
[#231 'f32']: s#116
[#231 'false']: s#114
[#231 'i32']: s#118
[#231 'mat2x2']: s#100
[#231 'mat2x3']: s#101
[#231 'mat2x4']: s#102
[#231 'mat3x2']: s#103
[#231 'mat3x3']: s#104
[#231 'mat3x4']: s#105
[#231 'mat4x2']: s#106
[#231 'mat4x3']: s#107
[#231 'mat4x4']: s#108
[#231 'ptr']: s#120
[#231 'sampler']: s#137
[#231 'sampler_comparison']: s#138
[#231 'texture_1d']: s#144
[#231 'texture_2d']: s#145
[#231 'texture_2d_array']: s#146
[#231 'texture_3d']: s#147
[#231 'texture_cube']: s#148
[#231 'texture_cube_array']: s#149
[#231 'texture_depth_2d']: s#139
[#231 'texture_depth_2d_array']: s#140
[#231 'texture_depth_cube']: s#141
[#231 'texture_depth_cube_array']: s#142
[#231 'texture_depth_multisampled_2d']: s#143
[#231 'texture_multisampled_2d']: s#150
[#231 'texture_storage_1d']: s#151
[#231 'texture_storage_2d']: s#152
[#231 'texture_storage_2d_array']: s#153
[#231 'texture_storage_3d']: s#154
[#231 'true']: s#113
[#231 'u32']: s#119
[#231 'vec2']: s#97
[#231 'vec3']: s#98
[#231 'vec4']: s#99
[#231 '~']: s#71
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#231 /0[fh]/]: s#129
[#231 /0[iu]?/]: s#126
[#231 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#231 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#231 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#231 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#231 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#231 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#231 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#231 /[1-9][0-9]*[fh]/]: s#130
[#231 /[1-9][0-9]*[iu]?/]: s#127
[#232 '!']: s#70
[#232 '&']: s#73
[#232 '(']: s#115
[#232 '*']: s#72
[#232 '-']: s#69
[#232 'array']: s#83
[#232 'atomic']: s#95
[#232 'bitcast']: s#78
[#232 'bool']: s#88
[#232 'f16']: s#117
[#232 'f32']: s#116
[#232 'false']: s#114
[#232 'i32']: s#118
[#232 'mat2x2']: s#100
[#232 'mat2x3']: s#101
[#232 'mat2x4']: s#102
[#232 'mat3x2']: s#103
[#232 'mat3x3']: s#104
[#232 'mat3x4']: s#105
[#232 'mat4x2']: s#106
[#232 'mat4x3']: s#107
[#232 'mat4x4']: s#108
[#232 'ptr']: s#120
[#232 'sampler']: s#137
[#232 'sampler_comparison']: s#138
[#232 'texture_1d']: s#144
[#232 'texture_2d']: s#145
[#232 'texture_2d_array']: s#146
[#232 'texture_3d']: s#147
[#232 'texture_cube']: s#148
[#232 'texture_cube_array']: s#149
[#232 'texture_depth_2d']: s#139
[#232 'texture_depth_2d_array']: s#140
[#232 'texture_depth_cube']: s#141
[#232 'texture_depth_cube_array']: s#142
[#232 'texture_depth_multisampled_2d']: s#143
[#232 'texture_multisampled_2d']: s#150
[#232 'texture_storage_1d']: s#151
[#232 'texture_storage_2d']: s#152
[#232 'texture_storage_2d_array']: s#153
[#232 'texture_storage_3d']: s#154
[#232 'true']: s#113
[#232 'u32']: s#119
[#232 'vec2']: s#97
[#232 'vec3']: s#98
[#232 'vec4']: s#99
[#232 '~']: s#71
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#232 /0[fh]/]: s#129
[#232 /0[iu]?/]: s#126
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#232 /[1-9][0-9]*[fh]/]: s#130
[#232 /[1-9][0-9]*[iu]?/]: s#127
[#233 '!']: s#70
[#233 '&']: s#73
[#233 '(']: s#115
[#233 '*']: s#72
[#233 '-']: s#69
[#233 'array']: s#83
[#233 'atomic']: s#95
[#233 'bitcast']: s#78
[#233 'bool']: s#88
[#233 'f16']: s#117
[#233 'f32']: s#116
[#233 'false']: s#114
[#233 'i32']: s#118
[#233 'mat2x2']: s#100
[#233 'mat2x3']: s#101
[#233 'mat2x4']: s#102
[#233 'mat3x2']: s#103
[#233 'mat3x3']: s#104
[#233 'mat3x4']: s#105
[#233 'mat4x2']: s#106
[#233 'mat4x3']: s#107
[#233 'mat4x4']: s#108
[#233 'ptr']: s#120
[#233 'sampler']: s#137
[#233 'sampler_comparison']: s#138
[#233 'texture_1d']: s#144
[#233 'texture_2d']: s#145
[#233 'texture_2d_array']: s#146
[#233 'texture_3d']: s#147
[#233 'texture_cube']: s#148
[#233 'texture_cube_array']: s#149
[#233 'texture_depth_2d']: s#139
[#233 'texture_depth_2d_array']: s#140
[#233 'texture_depth_cube']: s#141
[#233 'texture_depth_cube_array']: s#142
[#233 'texture_depth_multisampled_2d']: s#143
[#233 'texture_multisampled_2d']: s#150
[#233 'texture_storage_1d']: s#151
[#233 'texture_storage_2d']: s#152
[#233 'texture_storage_2d_array']: s#153
[#233 'texture_storage_3d']: s#154
[#233 'true']: s#113
[#233 'u32']: s#119
[#233 'vec2']: s#97
[#233 'vec3']: s#98
[#233 'vec4']: s#99
[#233 '~']: s#71
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#233 /0[fh]/]: s#129
[#233 /0[iu]?/]: s#126
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#233 /[1-9][0-9]*[fh]/]: s#130
[#233 /[1-9][0-9]*[iu]?/]: s#127
[#234 '!']: s#70
[#234 '&']: s#73
[#234 '(']: s#115
[#234 '*']: s#72
[#234 '-']: s#69
[#234 'array']: s#83
[#234 'atomic']: s#95
[#234 'bitcast']: s#78
[#234 'bool']: s#88
[#234 'f16']: s#117
[#234 'f32']: s#116
[#234 'false']: s#114
[#234 'i32']: s#118
[#234 'mat2x2']: s#100
[#234 'mat2x3']: s#101
[#234 'mat2x4']: s#102
[#234 'mat3x2']: s#103
[#234 'mat3x3']: s#104
[#234 'mat3x4']: s#105
[#234 'mat4x2']: s#106
[#234 'mat4x3']: s#107
[#234 'mat4x4']: s#108
[#234 'ptr']: s#120
[#234 'sampler']: s#137
[#234 'sampler_comparison']: s#138
[#234 'texture_1d']: s#144
[#234 'texture_2d']: s#145
[#234 'texture_2d_array']: s#146
[#234 'texture_3d']: s#147
[#234 'texture_cube']: s#148
[#234 'texture_cube_array']: s#149
[#234 'texture_depth_2d']: s#139
[#234 'texture_depth_2d_array']: s#140
[#234 'texture_depth_cube']: s#141
[#234 'texture_depth_cube_array']: s#142
[#234 'texture_depth_multisampled_2d']: s#143
[#234 'texture_multisampled_2d']: s#150
[#234 'texture_storage_1d']: s#151
[#234 'texture_storage_2d']: s#152
[#234 'texture_storage_2d_array']: s#153
[#234 'texture_storage_3d']: s#154
[#234 'true']: s#113
[#234 'u32']: s#119
[#234 'vec2']: s#97
[#234 'vec3']: s#98
[#234 'vec4']: s#99
[#234 '~']: s#71
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#234 /0[fh]/]: s#129
[#234 /0[iu]?/]: s#126
[#234 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#234 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#234 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#234 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#234 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#234 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#234 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#234 /[1-9][0-9]*[fh]/]: s#130
[#234 /[1-9][0-9]*[iu]?/]: s#127
[#235 '!']: s#70
[#235 '&']: s#73
[#235 '(']: s#115
[#235 '*']: s#72
[#235 '-']: s#69
[#235 'array']: s#83
[#235 'atomic']: s#95
[#235 'bitcast']: s#78
[#235 'bool']: s#88
[#235 'f16']: s#117
[#235 'f32']: s#116
[#235 'false']: s#114
[#235 'i32']: s#118
[#235 'mat2x2']: s#100
[#235 'mat2x3']: s#101
[#235 'mat2x4']: s#102
[#235 'mat3x2']: s#103
[#235 'mat3x3']: s#104
[#235 'mat3x4']: s#105
[#235 'mat4x2']: s#106
[#235 'mat4x3']: s#107
[#235 'mat4x4']: s#108
[#235 'ptr']: s#120
[#235 'sampler']: s#137
[#235 'sampler_comparison']: s#138
[#235 'texture_1d']: s#144
[#235 'texture_2d']: s#145
[#235 'texture_2d_array']: s#146
[#235 'texture_3d']: s#147
[#235 'texture_cube']: s#148
[#235 'texture_cube_array']: s#149
[#235 'texture_depth_2d']: s#139
[#235 'texture_depth_2d_array']: s#140
[#235 'texture_depth_cube']: s#141
[#235 'texture_depth_cube_array']: s#142
[#235 'texture_depth_multisampled_2d']: s#143
[#235 'texture_multisampled_2d']: s#150
[#235 'texture_storage_1d']: s#151
[#235 'texture_storage_2d']: s#152
[#235 'texture_storage_2d_array']: s#153
[#235 'texture_storage_3d']: s#154
[#235 'true']: s#113
[#235 'u32']: s#119
[#235 'vec2']: s#97
[#235 'vec3']: s#98
[#235 'vec4']: s#99
[#235 '~']: s#71
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#235 /0[fh]/]: s#129
[#235 /0[iu]?/]: s#126
[#235 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#235 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#235 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#235 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#235 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#235 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#235 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#235 /[1-9][0-9]*[fh]/]: s#130
[#235 /[1-9][0-9]*[iu]?/]: s#127
[#236 '!']: s#70
[#236 '&']: s#73
[#236 '(']: s#115
[#236 '*']: s#72
[#236 '-']: s#69
[#236 'array']: s#83
[#236 'atomic']: s#95
[#236 'bitcast']: s#78
[#236 'bool']: s#88
[#236 'f16']: s#117
[#236 'f32']: s#116
[#236 'false']: s#114
[#236 'i32']: s#118
[#236 'mat2x2']: s#100
[#236 'mat2x3']: s#101
[#236 'mat2x4']: s#102
[#236 'mat3x2']: s#103
[#236 'mat3x3']: s#104
[#236 'mat3x4']: s#105
[#236 'mat4x2']: s#106
[#236 'mat4x3']: s#107
[#236 'mat4x4']: s#108
[#236 'ptr']: s#120
[#236 'sampler']: s#137
[#236 'sampler_comparison']: s#138
[#236 'texture_1d']: s#144
[#236 'texture_2d']: s#145
[#236 'texture_2d_array']: s#146
[#236 'texture_3d']: s#147
[#236 'texture_cube']: s#148
[#236 'texture_cube_array']: s#149
[#236 'texture_depth_2d']: s#139
[#236 'texture_depth_2d_array']: s#140
[#236 'texture_depth_cube']: s#141
[#236 'texture_depth_cube_array']: s#142
[#236 'texture_depth_multisampled_2d']: s#143
[#236 'texture_multisampled_2d']: s#150
[#236 'texture_storage_1d']: s#151
[#236 'texture_storage_2d']: s#152
[#236 'texture_storage_2d_array']: s#153
[#236 'texture_storage_3d']: s#154
[#236 'true']: s#113
[#236 'u32']: s#119
[#236 'vec2']: s#97
[#236 'vec3']: s#98
[#236 'vec4']: s#99
[#236 '~']: s#71
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#236 /0[fh]/]: s#129
[#236 /0[iu]?/]: s#126
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#236 /[1-9][0-9]*[fh]/]: s#130
[#236 /[1-9][0-9]*[iu]?/]: s#127
[#237 '!']: r#149
[#237 '&']: r#149
[#237 '(']: r#149
[#237 ')']: r#149
[#237 '*']: r#149
[#237 ',']: r#149
[#237 '-']: r#149
[#237 ';']: r#149
[#237 '=']: r#149
[#237 '>']: r#149
[#237 'array']: r#149
[#237 'atomic']: r#149
[#237 'bitcast']: r#149
[#237 'bool']: r#149
[#237 'f16']: r#149
[#237 'f32']: r#149
[#237 'false']: r#149
[#237 'i32']: r#149
[#237 'mat2x2']: r#149
[#237 'mat2x3']: r#149
[#237 'mat2x4']: r#149
[#237 'mat3x2']: r#149
[#237 'mat3x3']: r#149
[#237 'mat3x4']: r#149
[#237 'mat4x2']: r#149
[#237 'mat4x3']: r#149
[#237 'mat4x4']: r#149
[#237 'ptr']: r#149
[#237 'sampler']: r#149
[#237 'sampler_comparison']: r#149
[#237 'texture_1d']: r#149
[#237 'texture_2d']: r#149
[#237 'texture_2d_array']: r#149
[#237 'texture_3d']: r#149
[#237 'texture_cube']: r#149
[#237 'texture_cube_array']: r#149
[#237 'texture_depth_2d']: r#149
[#237 'texture_depth_2d_array']: r#149
[#237 'texture_depth_cube']: r#149
[#237 'texture_depth_cube_array']: r#149
[#237 'texture_depth_multisampled_2d']: r#149
[#237 'texture_multisampled_2d']: r#149
[#237 'texture_storage_1d']: r#149
[#237 'texture_storage_2d']: r#149
[#237 'texture_storage_2d_array']: r#149
[#237 'texture_storage_3d']: r#149
[#237 'true']: r#149
[#237 'u32']: r#149
[#237 'vec2']: r#149
[#237 'vec3']: r#149
[#237 'vec4']: r#149
[#237 '{']: r#149
[#237 '}']: r#149
[#237 '~']: r#149
[#237 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#149
[#237 /0[xX][0-9a-fA-F]+[iu]?/]: r#149
[#238 '!']: r#150
[#238 '&']: r#150
[#238 '(']: r#150
[#238 '*']: r#150
[#238 '-']: r#150
[#238 'array']: r#150
[#238 'atomic']: r#150
[#238 'bitcast']: r#150
[#238 'bool']: r#150
[#238 'f16']: r#150
[#238 'f32']: r#150
[#238 'false']: r#150
[#238 'i32']: r#150
[#238 'mat2x2']: r#150
[#238 'mat2x3']: r#150
[#238 'mat2x4']: r#150
[#238 'mat3x2']: r#150
[#238 'mat3x3']: r#150
[#238 'mat3x4']: r#150
[#238 'mat4x2']: r#150
[#238 'mat4x3']: r#150
[#238 'mat4x4']: r#150
[#238 'ptr']: r#150
[#238 'sampler']: r#150
[#238 'sampler_comparison']: r#150
[#238 'texture_1d']: r#150
[#238 'texture_2d']: r#150
[#238 'texture_2d_array']: r#150
[#238 'texture_3d']: r#150
[#238 'texture_cube']: r#150
[#238 'texture_cube_array']: r#150
[#238 'texture_depth_2d']: r#150
[#238 'texture_depth_2d_array']: r#150
[#238 'texture_depth_cube']: r#150
[#238 'texture_depth_cube_array']: r#150
[#238 'texture_depth_multisampled_2d']: r#150
[#238 'texture_multisampled_2d']: r#150
[#238 'texture_storage_1d']: r#150
[#238 'texture_storage_2d']: r#150
[#238 'texture_storage_2d_array']: r#150
[#238 'texture_storage_3d']: r#150
[#238 'true']: r#150
[#238 'u32']: r#150
[#238 'vec2']: r#150
[#238 'vec3']: r#150
[#238 'vec4']: r#150
[#238 '~']: r#150
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: r#150
[#239 '!']: r#151
[#239 '&']: r#151
[#239 '(']: r#151
[#239 '*']: r#151
[#239 '-']: r#151
[#239 'array']: r#151
[#239 'atomic']: r#151
[#239 'bitcast']: r#151
[#239 'bool']: r#151
[#239 'f16']: r#151
[#239 'f32']: r#151
[#239 'false']: r#151
[#239 'i32']: r#151
[#239 'mat2x2']: r#151
[#239 'mat2x3']: r#151
[#239 'mat2x4']: r#151
[#239 'mat3x2']: r#151
[#239 'mat3x3']: r#151
[#239 'mat3x4']: r#151
[#239 'mat4x2']: r#151
[#239 'mat4x3']: r#151
[#239 'mat4x4']: r#151
[#239 'ptr']: r#151
[#239 'sampler']: r#151
[#239 'sampler_comparison']: r#151
[#239 'texture_1d']: r#151
[#239 'texture_2d']: r#151
[#239 'texture_2d_array']: r#151
[#239 'texture_3d']: r#151
[#239 'texture_cube']: r#151
[#239 'texture_cube_array']: r#151
[#239 'texture_depth_2d']: r#151
[#239 'texture_depth_2d_array']: r#151
[#239 'texture_depth_cube']: r#151
[#239 'texture_depth_cube_array']: r#151
[#239 'texture_depth_multisampled_2d']: r#151
[#239 'texture_multisampled_2d']: r#151
[#239 'texture_storage_1d']: r#151
[#239 'texture_storage_2d']: r#151
[#239 'texture_storage_2d_array']: r#151
[#239 'texture_storage_3d']: r#151
[#239 'true']: r#151
[#239 'u32']: r#151
[#239 'vec2']: r#151
[#239 'vec3']: r#151
[#239 'vec4']: r#151
[#239 '~']: r#151
[#239 /0[xX][0-9a-fA-F]+[iu]?/]: r#151
[#240 '!']: r#152
[#240 '&']: r#152
[#240 '(']: r#152
[#240 '*']: r#152
[#240 '-']: r#152
[#240 'array']: r#152
[#240 'atomic']: r#152
[#240 'bitcast']: r#152
[#240 'bool']: r#152
[#240 'f16']: r#152
[#240 'f32']: r#152
[#240 'false']: r#152
[#240 'i32']: r#152
[#240 'mat2x2']: r#152
[#240 'mat2x3']: r#152
[#240 'mat2x4']: r#152
[#240 'mat3x2']: r#152
[#240 'mat3x3']: r#152
[#240 'mat3x4']: r#152
[#240 'mat4x2']: r#152
[#240 'mat4x3']: r#152
[#240 'mat4x4']: r#152
[#240 'ptr']: r#152
[#240 'sampler']: r#152
[#240 'sampler_comparison']: r#152
[#240 'texture_1d']: r#152
[#240 'texture_2d']: r#152
[#240 'texture_2d_array']: r#152
[#240 'texture_3d']: r#152
[#240 'texture_cube']: r#152
[#240 'texture_cube_array']: r#152
[#240 'texture_depth_2d']: r#152
[#240 'texture_depth_2d_array']: r#152
[#240 'texture_depth_cube']: r#152
[#240 'texture_depth_cube_array']: r#152
[#240 'texture_depth_multisampled_2d']: r#152
[#240 'texture_multisampled_2d']: r#152
[#240 'texture_storage_1d']: r#152
[#240 'texture_storage_2d']: r#152
[#240 'texture_storage_2d_array']: r#152
[#240 'texture_storage_3d']: r#152
[#240 'true']: r#152
[#240 'u32']: r#152
[#240 'vec2']: r#152
[#240 'vec3']: r#152
[#240 'vec4']: r#152
[#240 '~']: r#152
[#240 /0[xX][0-9a-fA-F]+[iu]?/]: r#152
[#241 '!']: r#153
[#241 '&']: r#153
[#241 '(']: r#153
[#241 '*']: r#153
[#241 '-']: r#153
[#241 'array']: r#153
[#241 'atomic']: r#153
[#241 'bitcast']: r#153
[#241 'bool']: r#153
[#241 'f16']: r#153
[#241 'f32']: r#153
[#241 'false']: r#153
[#241 'i32']: r#153
[#241 'mat2x2']: r#153
[#241 'mat2x3']: r#153
[#241 'mat2x4']: r#153
[#241 'mat3x2']: r#153
[#241 'mat3x3']: r#153
[#241 'mat3x4']: r#153
[#241 'mat4x2']: r#153
[#241 'mat4x3']: r#153
[#241 'mat4x4']: r#153
[#241 'ptr']: r#153
[#241 'sampler']: r#153
[#241 'sampler_comparison']: r#153
[#241 'texture_1d']: r#153
[#241 'texture_2d']: r#153
[#241 'texture_2d_array']: r#153
[#241 'texture_3d']: r#153
[#241 'texture_cube']: r#153
[#241 'texture_cube_array']: r#153
[#241 'texture_depth_2d']: r#153
[#241 'texture_depth_2d_array']: r#153
[#241 'texture_depth_cube']: r#153
[#241 'texture_depth_cube_array']: r#153
[#241 'texture_depth_multisampled_2d']: r#153
[#241 'texture_multisampled_2d']: r#153
[#241 'texture_storage_1d']: r#153
[#241 'texture_storage_2d']: r#153
[#241 'texture_storage_2d_array']: r#153
[#241 'texture_storage_3d']: r#153
[#241 'true']: r#153
[#241 'u32']: r#153
[#241 'vec2']: r#153
[#241 'vec3']: r#153
[#241 'vec4']: r#153
[#241 '~']: r#153
[#241 /0[xX][0-9a-fA-F]+[iu]?/]: r#153
[#242 '!']: s#70
[#242 '&']: s#73
[#242 '(']: s#115
[#242 '*']: s#72
[#242 '-']: s#69
[#242 'array']: s#83
[#242 'atomic']: s#95
[#242 'bitcast']: s#78
[#242 'bool']: s#88
[#242 'f16']: s#117
[#242 'f32']: s#116
[#242 'false']: s#114
[#242 'i32']: s#118
[#242 'mat2x2']: s#100
[#242 'mat2x3']: s#101
[#242 'mat2x4']: s#102
[#242 'mat3x2']: s#103
[#242 'mat3x3']: s#104
[#242 'mat3x4']: s#105
[#242 'mat4x2']: s#106
[#242 'mat4x3']: s#107
[#242 'mat4x4']: s#108
[#242 'ptr']: s#120
[#242 'sampler']: s#137
[#242 'sampler_comparison']: s#138
[#242 'texture_1d']: s#144
[#242 'texture_2d']: s#145
[#242 'texture_2d_array']: s#146
[#242 'texture_3d']: s#147
[#242 'texture_cube']: s#148
[#242 'texture_cube_array']: s#149
[#242 'texture_depth_2d']: s#139
[#242 'texture_depth_2d_array']: s#140
[#242 'texture_depth_cube']: s#141
[#242 'texture_depth_cube_array']: s#142
[#242 'texture_depth_multisampled_2d']: s#143
[#242 'texture_multisampled_2d']: s#150
[#242 'texture_storage_1d']: s#151
[#242 'texture_storage_2d']: s#152
[#242 'texture_storage_2d_array']: s#153
[#242 'texture_storage_3d']: s#154
[#242 'true']: s#113
[#242 'u32']: s#119
[#242 'vec2']: s#97
[#242 'vec3']: s#98
[#242 'vec4']: s#99
[#242 '~']: s#71
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#242 /0[fh]/]: s#129
[#242 /0[iu]?/]: s#126
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#242 /[1-9][0-9]*[fh]/]: s#130
[#242 /[1-9][0-9]*[iu]?/]: s#127
[#243 '!']: r#154
[#243 '&']: r#154
[#243 '(']: r#154
[#243 '*']: r#154
[#243 '-']: r#154
[#243 'array']: r#154
[#243 'atomic']: r#154
[#243 'bitcast']: r#154
[#243 'bool']: r#154
[#243 'f16']: r#154
[#243 'f32']: r#154
[#243 'false']: r#154
[#243 'i32']: r#154
[#243 'mat2x2']: r#154
[#243 'mat2x3']: r#154
[#243 'mat2x4']: r#154
[#243 'mat3x2']: r#154
[#243 'mat3x3']: r#154
[#243 'mat3x4']: r#154
[#243 'mat4x2']: r#154
[#243 'mat4x3']: r#154
[#243 'mat4x4']: r#154
[#243 'ptr']: r#154
[#243 'sampler']: r#154
[#243 'sampler_comparison']: r#154
[#243 'texture_1d']: r#154
[#243 'texture_2d']: r#154
[#243 'texture_2d_array']: r#154
[#243 'texture_3d']: r#154
[#243 'texture_cube']: r#154
[#243 'texture_cube_array']: r#154
[#243 'texture_depth_2d']: r#154
[#243 'texture_depth_2d_array']: r#154
[#243 'texture_depth_cube']: r#154
[#243 'texture_depth_cube_array']: r#154
[#243 'texture_depth_multisampled_2d']: r#154
[#243 'texture_multisampled_2d']: r#154
[#243 'texture_storage_1d']: r#154
[#243 'texture_storage_2d']: r#154
[#243 'texture_storage_2d_array']: r#154
[#243 'texture_storage_3d']: r#154
[#243 'true']: r#154
[#243 'u32']: r#154
[#243 'vec2']: r#154
[#243 'vec3']: r#154
[#243 'vec4']: r#154
[#243 '~']: r#154
[#243 /0[xX][0-9a-fA-F]+[iu]?/]: r#154
[#244 '!']: s#70
[#244 '&']: s#73
[#244 '(']: s#115
[#244 '*']: s#72
[#244 '-']: s#69
[#244 'array']: s#83
[#244 'atomic']: s#95
[#244 'bitcast']: s#78
[#244 'bool']: s#88
[#244 'f16']: s#117
[#244 'f32']: s#116
[#244 'false']: s#114
[#244 'i32']: s#118
[#244 'mat2x2']: s#100
[#244 'mat2x3']: s#101
[#244 'mat2x4']: s#102
[#244 'mat3x2']: s#103
[#244 'mat3x3']: s#104
[#244 'mat3x4']: s#105
[#244 'mat4x2']: s#106
[#244 'mat4x3']: s#107
[#244 'mat4x4']: s#108
[#244 'ptr']: s#120
[#244 'sampler']: s#137
[#244 'sampler_comparison']: s#138
[#244 'texture_1d']: s#144
[#244 'texture_2d']: s#145
[#244 'texture_2d_array']: s#146
[#244 'texture_3d']: s#147
[#244 'texture_cube']: s#148
[#244 'texture_cube_array']: s#149
[#244 'texture_depth_2d']: s#139
[#244 'texture_depth_2d_array']: s#140
[#244 'texture_depth_cube']: s#141
[#244 'texture_depth_cube_array']: s#142
[#244 'texture_depth_multisampled_2d']: s#143
[#244 'texture_multisampled_2d']: s#150
[#244 'texture_storage_1d']: s#151
[#244 'texture_storage_2d']: s#152
[#244 'texture_storage_2d_array']: s#153
[#244 'texture_storage_3d']: s#154
[#244 'true']: s#113
[#244 'u32']: s#119
[#244 'vec2']: s#97
[#244 'vec3']: s#98
[#244 'vec4']: s#99
[#244 '~']: s#71
[#244 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#244 /0[fh]/]: s#129
[#244 /0[iu]?/]: s#126
[#244 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#244 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#244 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#244 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#244 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#244 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#244 /[1-9][0-9]*[fh]/]: s#130
[#244 /[1-9][0-9]*[iu]?/]: s#127
[#245 '!']: r#155
[#245 '&']: r#155
[#245 '(']: r#155
[#245 '*']: r#155
[#245 '-']: r#155
[#245 'array']: r#155
[#245 'atomic']: r#155
[#245 'bitcast']: r#155
[#245 'bool']: r#155
[#245 'f16']: r#155
[#245 'f32']: r#155
[#245 'false']: r#155
[#245 'i32']: r#155
[#245 'mat2x2']: r#155
[#245 'mat2x3']: r#155
[#245 'mat2x4']: r#155
[#245 'mat3x2']: r#155
[#245 'mat3x3']: r#155
[#245 'mat3x4']: r#155
[#245 'mat4x2']: r#155
[#245 'mat4x3']: r#155
[#245 'mat4x4']: r#155
[#245 'ptr']: r#155
[#245 'sampler']: r#155
[#245 'sampler_comparison']: r#155
[#245 'texture_1d']: r#155
[#245 'texture_2d']: r#155
[#245 'texture_2d_array']: r#155
[#245 'texture_3d']: r#155
[#245 'texture_cube']: r#155
[#245 'texture_cube_array']: r#155
[#245 'texture_depth_2d']: r#155
[#245 'texture_depth_2d_array']: r#155
[#245 'texture_depth_cube']: r#155
[#245 'texture_depth_cube_array']: r#155
[#245 'texture_depth_multisampled_2d']: r#155
[#245 'texture_multisampled_2d']: r#155
[#245 'texture_storage_1d']: r#155
[#245 'texture_storage_2d']: r#155
[#245 'texture_storage_2d_array']: r#155
[#245 'texture_storage_3d']: r#155
[#245 'true']: r#155
[#245 'u32']: r#155
[#245 'vec2']: r#155
[#245 'vec3']: r#155
[#245 'vec4']: r#155
[#245 '~']: r#155
[#245 /0[xX][0-9a-fA-F]+[iu]?/]: r#155
[#246 '!']: s#70
[#246 '&']: s#73
[#246 '(']: s#115
[#246 '*']: s#72
[#246 '-']: s#69
[#246 'array']: s#83
[#246 'atomic']: s#95
[#246 'bitcast']: s#78
[#246 'bool']: s#88
[#246 'f16']: s#117
[#246 'f32']: s#116
[#246 'false']: s#114
[#246 'i32']: s#118
[#246 'mat2x2']: s#100
[#246 'mat2x3']: s#101
[#246 'mat2x4']: s#102
[#246 'mat3x2']: s#103
[#246 'mat3x3']: s#104
[#246 'mat3x4']: s#105
[#246 'mat4x2']: s#106
[#246 'mat4x3']: s#107
[#246 'mat4x4']: s#108
[#246 'ptr']: s#120
[#246 'sampler']: s#137
[#246 'sampler_comparison']: s#138
[#246 'texture_1d']: s#144
[#246 'texture_2d']: s#145
[#246 'texture_2d_array']: s#146
[#246 'texture_3d']: s#147
[#246 'texture_cube']: s#148
[#246 'texture_cube_array']: s#149
[#246 'texture_depth_2d']: s#139
[#246 'texture_depth_2d_array']: s#140
[#246 'texture_depth_cube']: s#141
[#246 'texture_depth_cube_array']: s#142
[#246 'texture_depth_multisampled_2d']: s#143
[#246 'texture_multisampled_2d']: s#150
[#246 'texture_storage_1d']: s#151
[#246 'texture_storage_2d']: s#152
[#246 'texture_storage_2d_array']: s#153
[#246 'texture_storage_3d']: s#154
[#246 'true']: s#113
[#246 'u32']: s#119
[#246 'vec2']: s#97
[#246 'vec3']: s#98
[#246 'vec4']: s#99
[#246 '~']: s#71
[#246 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#246 /0[fh]/]: s#129
[#246 /0[iu]?/]: s#126
[#246 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#246 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#246 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#246 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#246 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#246 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#246 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#246 /[1-9][0-9]*[fh]/]: s#130
[#246 /[1-9][0-9]*[iu]?/]: s#127
[#247 '!']: s#70
[#247 '&']: s#73
[#247 '(']: s#115
[#247 '*']: s#72
[#247 '-']: s#69
[#247 'array']: s#83
[#247 'atomic']: s#95
[#247 'bitcast']: s#78
[#247 'bool']: s#88
[#247 'f16']: s#117
[#247 'f32']: s#116
[#247 'false']: s#114
[#247 'i32']: s#118
[#247 'mat2x2']: s#100
[#247 'mat2x3']: s#101
[#247 'mat2x4']: s#102
[#247 'mat3x2']: s#103
[#247 'mat3x3']: s#104
[#247 'mat3x4']: s#105
[#247 'mat4x2']: s#106
[#247 'mat4x3']: s#107
[#247 'mat4x4']: s#108
[#247 'ptr']: s#120
[#247 'sampler']: s#137
[#247 'sampler_comparison']: s#138
[#247 'texture_1d']: s#144
[#247 'texture_2d']: s#145
[#247 'texture_2d_array']: s#146
[#247 'texture_3d']: s#147
[#247 'texture_cube']: s#148
[#247 'texture_cube_array']: s#149
[#247 'texture_depth_2d']: s#139
[#247 'texture_depth_2d_array']: s#140
[#247 'texture_depth_cube']: s#141
[#247 'texture_depth_cube_array']: s#142
[#247 'texture_depth_multisampled_2d']: s#143
[#247 'texture_multisampled_2d']: s#150
[#247 'texture_storage_1d']: s#151
[#247 'texture_storage_2d']: s#152
[#247 'texture_storage_2d_array']: s#153
[#247 'texture_storage_3d']: s#154
[#247 'true']: s#113
[#247 'u32']: s#119
[#247 'vec2']: s#97
[#247 'vec3']: s#98
[#247 'vec4']: s#99
[#247 '~']: s#71
[#247 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#247 /0[fh]/]: s#129
[#247 /0[iu]?/]: s#126
[#247 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#247 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#247 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#247 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#247 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#247 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#247 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#247 /[1-9][0-9]*[fh]/]: s#130
[#247 /[1-9][0-9]*[iu]?/]: s#127
[#248 '!']: s#70
[#248 '&']: s#73
[#248 '(']: s#115
[#248 '*']: s#72
[#248 '-']: s#69
[#248 'array']: s#83
[#248 'atomic']: s#95
[#248 'bitcast']: s#78
[#248 'bool']: s#88
[#248 'f16']: s#117
[#248 'f32']: s#116
[#248 'false']: s#114
[#248 'i32']: s#118
[#248 'mat2x2']: s#100
[#248 'mat2x3']: s#101
[#248 'mat2x4']: s#102
[#248 'mat3x2']: s#103
[#248 'mat3x3']: s#104
[#248 'mat3x4']: s#105
[#248 'mat4x2']: s#106
[#248 'mat4x3']: s#107
[#248 'mat4x4']: s#108
[#248 'ptr']: s#120
[#248 'sampler']: s#137
[#248 'sampler_comparison']: s#138
[#248 'texture_1d']: s#144
[#248 'texture_2d']: s#145
[#248 'texture_2d_array']: s#146
[#248 'texture_3d']: s#147
[#248 'texture_cube']: s#148
[#248 'texture_cube_array']: s#149
[#248 'texture_depth_2d']: s#139
[#248 'texture_depth_2d_array']: s#140
[#248 'texture_depth_cube']: s#141
[#248 'texture_depth_cube_array']: s#142
[#248 'texture_depth_multisampled_2d']: s#143
[#248 'texture_multisampled_2d']: s#150
[#248 'texture_storage_1d']: s#151
[#248 'texture_storage_2d']: s#152
[#248 'texture_storage_2d_array']: s#153
[#248 'texture_storage_3d']: s#154
[#248 'true']: s#113
[#248 'u32']: s#119
[#248 'vec2']: s#97
[#248 'vec3']: s#98
[#248 'vec4']: s#99
[#248 '~']: s#71
[#248 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#248 /0[fh]/]: s#129
[#248 /0[iu]?/]: s#126
[#248 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#248 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#248 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#248 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#248 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#248 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#248 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#248 /[1-9][0-9]*[fh]/]: s#130
[#248 /[1-9][0-9]*[iu]?/]: s#127
[#249 'flat']: s#275
[#249 'linear']: s#274
[#249 'perspective']: s#273
[#250 '!']: s#70
[#250 '&']: s#73
[#250 '(']: s#115
[#250 '*']: s#72
[#250 '-']: s#69
[#250 'array']: s#83
[#250 'atomic']: s#95
[#250 'bitcast']: s#78
[#250 'bool']: s#88
[#250 'f16']: s#117
[#250 'f32']: s#116
[#250 'false']: s#114
[#250 'i32']: s#118
[#250 'mat2x2']: s#100
[#250 'mat2x3']: s#101
[#250 'mat2x4']: s#102
[#250 'mat3x2']: s#103
[#250 'mat3x3']: s#104
[#250 'mat3x4']: s#105
[#250 'mat4x2']: s#106
[#250 'mat4x3']: s#107
[#250 'mat4x4']: s#108
[#250 'ptr']: s#120
[#250 'sampler']: s#137
[#250 'sampler_comparison']: s#138
[#250 'texture_1d']: s#144
[#250 'texture_2d']: s#145
[#250 'texture_2d_array']: s#146
[#250 'texture_3d']: s#147
[#250 'texture_cube']: s#148
[#250 'texture_cube_array']: s#149
[#250 'texture_depth_2d']: s#139
[#250 'texture_depth_2d_array']: s#140
[#250 'texture_depth_cube']: s#141
[#250 'texture_depth_cube_array']: s#142
[#250 'texture_depth_multisampled_2d']: s#143
[#250 'texture_multisampled_2d']: s#150
[#250 'texture_storage_1d']: s#151
[#250 'texture_storage_2d']: s#152
[#250 'texture_storage_2d_array']: s#153
[#250 'texture_storage_3d']: s#154
[#250 'true']: s#113
[#250 'u32']: s#119
[#250 'vec2']: s#97
[#250 'vec3']: s#98
[#250 'vec4']: s#99
[#250 '~']: s#71
[#250 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#250 /0[fh]/]: s#129
[#250 /0[iu]?/]: s#126
[#250 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#250 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#250 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#250 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#250 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#250 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#250 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#250 /[1-9][0-9]*[fh]/]: s#130
[#250 /[1-9][0-9]*[iu]?/]: s#127
[#251 '!']: s#70
[#251 '&']: s#73
[#251 '(']: s#115
[#251 '*']: s#72
[#251 '-']: s#69
[#251 'array']: s#83
[#251 'atomic']: s#95
[#251 'bitcast']: s#78
[#251 'bool']: s#88
[#251 'f16']: s#117
[#251 'f32']: s#116
[#251 'false']: s#114
[#251 'i32']: s#118
[#251 'mat2x2']: s#100
[#251 'mat2x3']: s#101
[#251 'mat2x4']: s#102
[#251 'mat3x2']: s#103
[#251 'mat3x3']: s#104
[#251 'mat3x4']: s#105
[#251 'mat4x2']: s#106
[#251 'mat4x3']: s#107
[#251 'mat4x4']: s#108
[#251 'ptr']: s#120
[#251 'sampler']: s#137
[#251 'sampler_comparison']: s#138
[#251 'texture_1d']: s#144
[#251 'texture_2d']: s#145
[#251 'texture_2d_array']: s#146
[#251 'texture_3d']: s#147
[#251 'texture_cube']: s#148
[#251 'texture_cube_array']: s#149
[#251 'texture_depth_2d']: s#139
[#251 'texture_depth_2d_array']: s#140
[#251 'texture_depth_cube']: s#141
[#251 'texture_depth_cube_array']: s#142
[#251 'texture_depth_multisampled_2d']: s#143
[#251 'texture_multisampled_2d']: s#150
[#251 'texture_storage_1d']: s#151
[#251 'texture_storage_2d']: s#152
[#251 'texture_storage_2d_array']: s#153
[#251 'texture_storage_3d']: s#154
[#251 'true']: s#113
[#251 'u32']: s#119
[#251 'vec2']: s#97
[#251 'vec3']: s#98
[#251 'vec4']: s#99
[#251 '~']: s#71
[#251 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#251 /0[fh]/]: s#129
[#251 /0[iu]?/]: s#126
[#251 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#251 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#251 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#251 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#251 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#251 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#251 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#251 /[1-9][0-9]*[fh]/]: s#130
[#251 /[1-9][0-9]*[iu]?/]: s#127
[#252 'frag_depth']: s#262
[#252 'front_facing']: s#261
[#252 'global_invocation_id']: s#265
[#252 'instance_index']: s#259
[#252 'local_invocation_id']: s#263
[#252 'local_invocation_index']: s#264
[#252 'num_workgroups']: s#267
[#252 'position']: s#260
[#252 'sample_index']: s#268
[#252 'sample_mask']: s#269
[#252 'vertex_index']: s#258
[#252 'workgroup_id']: s#266
[#253 '!']: s#70
[#253 '&']: s#73
[#253 '(']: s#115
[#253 '*']: s#72
[#253 '-']: s#69
[#253 'array']: s#83
[#253 'atomic']: s#95
[#253 'bitcast']: s#78
[#253 'bool']: s#88
[#253 'f16']: s#117
[#253 'f32']: s#116
[#253 'false']: s#114
[#253 'i32']: s#118
[#253 'mat2x2']: s#100
[#253 'mat2x3']: s#101
[#253 'mat2x4']: s#102
[#253 'mat3x2']: s#103
[#253 'mat3x3']: s#104
[#253 'mat3x4']: s#105
[#253 'mat4x2']: s#106
[#253 'mat4x3']: s#107
[#253 'mat4x4']: s#108
[#253 'ptr']: s#120
[#253 'sampler']: s#137
[#253 'sampler_comparison']: s#138
[#253 'texture_1d']: s#144
[#253 'texture_2d']: s#145
[#253 'texture_2d_array']: s#146
[#253 'texture_3d']: s#147
[#253 'texture_cube']: s#148
[#253 'texture_cube_array']: s#149
[#253 'texture_depth_2d']: s#139
[#253 'texture_depth_2d_array']: s#140
[#253 'texture_depth_cube']: s#141
[#253 'texture_depth_cube_array']: s#142
[#253 'texture_depth_multisampled_2d']: s#143
[#253 'texture_multisampled_2d']: s#150
[#253 'texture_storage_1d']: s#151
[#253 'texture_storage_2d']: s#152
[#253 'texture_storage_2d_array']: s#153
[#253 'texture_storage_3d']: s#154
[#253 'true']: s#113
[#253 'u32']: s#119
[#253 'vec2']: s#97
[#253 'vec3']: s#98
[#253 'vec4']: s#99
[#253 '~']: s#71
[#253 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#253 /0[fh]/]: s#129
[#253 /0[iu]?/]: s#126
[#253 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#253 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#253 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#253 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#253 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#253 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#253 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#253 /[1-9][0-9]*[fh]/]: s#130
[#253 /[1-9][0-9]*[iu]?/]: s#127
[#254 '!']: s#70
[#254 '&']: s#73
[#254 '(']: s#115
[#254 '*']: s#72
[#254 '-']: s#69
[#254 'array']: s#83
[#254 'atomic']: s#95
[#254 'bitcast']: s#78
[#254 'bool']: s#88
[#254 'f16']: s#117
[#254 'f32']: s#116
[#254 'false']: s#114
[#254 'i32']: s#118
[#254 'mat2x2']: s#100
[#254 'mat2x3']: s#101
[#254 'mat2x4']: s#102
[#254 'mat3x2']: s#103
[#254 'mat3x3']: s#104
[#254 'mat3x4']: s#105
[#254 'mat4x2']: s#106
[#254 'mat4x3']: s#107
[#254 'mat4x4']: s#108
[#254 'ptr']: s#120
[#254 'sampler']: s#137
[#254 'sampler_comparison']: s#138
[#254 'texture_1d']: s#144
[#254 'texture_2d']: s#145
[#254 'texture_2d_array']: s#146
[#254 'texture_3d']: s#147
[#254 'texture_cube']: s#148
[#254 'texture_cube_array']: s#149
[#254 'texture_depth_2d']: s#139
[#254 'texture_depth_2d_array']: s#140
[#254 'texture_depth_cube']: s#141
[#254 'texture_depth_cube_array']: s#142
[#254 'texture_depth_multisampled_2d']: s#143
[#254 'texture_multisampled_2d']: s#150
[#254 'texture_storage_1d']: s#151
[#254 'texture_storage_2d']: s#152
[#254 'texture_storage_2d_array']: s#153
[#254 'texture_storage_3d']: s#154
[#254 'true']: s#113
[#254 'u32']: s#119
[#254 'vec2']: s#97
[#254 'vec3']: s#98
[#254 'vec4']: s#99
[#254 '~']: s#71
[#254 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#254 /0[fh]/]: s#129
[#254 /0[iu]?/]: s#126
[#254 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#254 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#254 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#254 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#254 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#254 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#254 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#254 /[1-9][0-9]*[fh]/]: s#130
[#254 /[1-9][0-9]*[iu]?/]: s#127
[#255 ',']: s#403
[#256 ',']: s#403
[#257 ',']: s#403
[#258 ')']: r#156
[#258 ',']: r#156
[#259 ')']: r#157
[#259 ',']: r#157
[#260 ')']: r#158
[#260 ',']: r#158
[#261 ')']: r#159
[#261 ',']: r#159
[#262 ')']: r#160
[#262 ',']: r#160
[#263 ')']: r#161
[#263 ',']: r#161
[#264 ')']: r#162
[#264 ',']: r#162
[#265 ')']: r#163
[#265 ',']: r#163
[#266 ')']: r#164
[#266 ',']: r#164
[#267 ')']: r#165
[#267 ',']: r#165
[#268 ')']: r#166
[#268 ',']: r#166
[#269 ')']: r#167
[#269 ',']: r#167
[#270 ',']: s#403
[#271 ',']: s#403
[#272 ',']: s#403
[#273 ')']: r#168
[#273 ',']: r#168
[#274 ')']: r#169
[#274 ',']: r#169
[#275 ')']: r#170
[#275 ',']: r#170
[#276 ',']: s#403
[#277 ',']: s#403
[#278 ',']: s#403
[#279 ')']: r#171
[#279 ',']: r#171
[#279 ':']: r#171
[#279 ';']: r#171
[#279 ']']: r#171
[#279 '{']: r#171
[#279 '||']: r#172
[#280 '!=']: r#31
[#280 '%']: r#31
[#280 '&&']: r#31
[#280 ')']: r#31
[#280 '*']: r#31
[#280 '+']: r#31
[#280 ',']: r#31
[#280 '-']: r#31
[#280 '/']: r#31
[#280 ':']: r#31
[#280 ';']: r#31
[#280 '<']: r#31
[#280 '<<']: s#220
[#280 '<=']: r#31
[#280 '==']: r#31
[#280 '>']: r#31
[#280 '>=']: r#31
[#280 '>>']: s#221
[#280 ']']: r#31
[#280 '{']: r#31
[#280 '||']: r#31
[#281 '&&']: r#174
[#281 ')']: r#173
[#281 ',']: r#173
[#281 ':']: r#173
[#281 ';']: r#173
[#281 ']']: r#173
[#281 '{']: r#173
[#282 '&&']: r#175
[#282 ')']: r#175
[#282 ',']: r#175
[#282 ':']: r#175
[#282 ';']: r#175
[#282 ']']: r#175
[#282 '{']: r#175
[#282 '||']: r#175
[#283 '&&']: r#176
[#283 ')']: r#176
[#283 ',']: r#176
[#283 ':']: r#176
[#283 ';']: r#176
[#283 ']']: r#176
[#283 '{']: r#176
[#283 '||']: r#176
[#284 '&&']: r#177
[#284 ')']: r#177
[#284 ',']: r#177
[#284 ':']: r#177
[#284 ';']: r#177
[#284 ']']: r#177
[#284 '{']: r#177
[#284 '||']: r#177
[#285 '&&']: r#178
[#285 ')']: r#178
[#285 ',']: r#178
[#285 ':']: r#178
[#285 ';']: r#178
[#285 ']']: r#178
[#285 '{']: r#178
[#285 '||']: r#178
[#286 '&&']: r#179
[#286 ')']: r#179
[#286 ',']: r#179
[#286 ':']: r#179
[#286 ';']: r#179
[#286 ']']: r#179
[#286 '{']: r#179
[#286 '||']: r#179
[#287 '&&']: r#180
[#287 ')']: r#180
[#287 ',']: r#180
[#287 ':']: r#180
[#287 ';']: r#180
[#287 ']']: r#180
[#287 '{']: r#180
[#287 '||']: r#180
[#288 '&']: r#182
[#288 ')']: r#181
[#288 ',']: r#181
[#288 ':']: r#181
[#288 ';']: r#181
[#288 '>']: r#181
[#288 ']']: r#181
[#288 '{']: r#181
[#289 ')']: r#183
[#289 ',']: r#183
[#289 ':']: r#183
[#289 ';']: r#183
[#289 '>']: r#183
[#289 ']']: r#183
[#289 '{']: r#183
[#289 '|']: r#184
[#290 ')']: r#185
[#290 ',']: r#185
[#290 ':']: r#185
[#290 ';']: r#185
[#290 '>']: r#185
[#290 ']']: r#185
[#290 '^']: r#186
[#290 '{']: r#185
[#291 '!=']: r#187
[#291 '%']: s#217
[#291 '&&']: r#187
[#291 ')']: r#187
[#291 '*']: s#72
[#291 '+']: r#187
[#291 ',']: r#187
[#291 '-']: r#187
[#291 '/']: s#216
[#291 ':']: r#187
[#291 ';']: r#187
[#291 '<']: r#187
[#291 '<=']: r#187
[#291 '==']: r#187
[#291 '>']: r#187
[#291 '>=']: r#187
[#291 ']']: r#187
[#291 '{']: r#187
[#291 '||']: r#187
[#292 '!=']: r#31
[#292 '%']: r#31
[#292 '&&']: r#31
[#292 ')']: r#31
[#292 '*']: r#31
[#292 '+']: r#31
[#292 ',']: r#31
[#292 '-']: r#31
[#292 '/']: r#31
[#292 ':']: r#31
[#292 ';']: r#31
[#292 '<']: r#31
[#292 '<=']: r#31
[#292 '==']: r#31
[#292 '>']: r#31
[#292 '>=']: r#31
[#292 ']']: r#31
[#292 '{']: r#31
[#292 '||']: r#31
[#293 '!=']: r#188
[#293 '&&']: r#188
[#293 ')']: r#188
[#293 ',']: r#188
[#293 ':']: r#188
[#293 ';']: r#188
[#293 '<']: r#188
[#293 '<=']: r#188
[#293 '==']: r#188
[#293 '>']: r#188
[#293 '>=']: r#188
[#293 ']']: r#188
[#293 '{']: r#188
[#293 '||']: r#188
[#294 '!=']: r#189
[#294 '&&']: r#189
[#294 ')']: r#189
[#294 ',']: r#189
[#294 ':']: r#189
[#294 ';']: r#189
[#294 '<']: r#189
[#294 '<=']: r#189
[#294 '==']: r#189
[#294 '>']: r#189
[#294 '>=']: r#189
[#294 ']']: r#189
[#294 '{']: r#189
[#294 '||']: r#189
[#295 '!=']: r#190
[#295 '%']: r#190
[#295 '&&']: r#190
[#295 ')']: r#190
[#295 '*']: r#190
[#295 '+']: r#190
[#295 ',']: r#190
[#295 '-']: r#190
[#295 '/']: r#190
[#295 ':']: r#190
[#295 ';']: r#190
[#295 '<']: r#190
[#295 '<=']: r#190
[#295 '==']: r#190
[#295 '>']: r#190
[#295 '>=']: r#190
[#295 ']']: r#190
[#295 '{']: r#190
[#295 '||']: r#190
[#296 '.']: s#206
[#296 '[']: s#205
[#297 '.']: s#206
[#297 '[']: s#205
[#298 '!=']: r#191
[#298 '%']: r#191
[#298 '%=']: r#191
[#298 '&&']: r#191
[#298 '&']: r#191
[#298 '&=']: r#191
[#298 ')']: r#191
[#298 '*']: r#191
[#298 '*=']: r#191
[#298 '+']: r#191
[#298 '++']: r#191
[#298 '+=']: r#191
[#298 ',']: r#191
[#298 '-']: r#191
[#298 '--']: r#191
[#298 '-=']: r#191
[#298 '.']: r#191
[#298 '/']: r#191
[#298 '/=']: r#191
[#298 ':']: r#191
[#298 ';']: r#191
[#298 '<']: r#191
[#298 '<<']: r#191
[#298 '<<=']: r#191
[#298 '<=']: r#191
[#298 '=']: r#191
[#298 '==']: r#191
[#298 '>']: r#191
[#298 '>=']: r#191
[#298 '>>']: r#191
[#298 '>>=']: r#191
[#298 '[']: r#191
[#298 ']']: r#191
[#298 '^']: r#191
[#298 '^=']: r#191
[#298 '{']: r#191
[#298 '|']: r#191
[#298 '|=']: r#191
[#298 '||']: r#191
[#299 '!=']: r#192
[#299 '%']: r#192
[#299 '%=']: r#192
[#299 '&&']: r#192
[#299 '&']: r#192
[#299 '&=']: r#192
[#299 ')']: r#192
[#299 '*']: r#192
[#299 '*=']: r#192
[#299 '+']: r#192
[#299 '++']: r#192
[#299 '+=']: r#192
[#299 ',']: r#192
[#299 '-']: r#192
[#299 '--']: r#192
[#299 '-=']: r#192
[#299 '.']: r#192
[#299 '/']: r#192
[#299 '/=']: r#192
[#299 ':']: r#192
[#299 ';']: r#192
[#299 '<']: r#192
[#299 '<<']: r#192
[#299 '<<=']: r#192
[#299 '<=']: r#192
[#299 '=']: r#192
[#299 '==']: r#192
[#299 '>']: r#192
[#299 '>=']: r#192
[#299 '>>']: r#192
[#299 '>>=']: r#192
[#299 '[']: r#192
[#299 ']']: r#192
[#299 '^']: r#192
[#299 '^=']: r#192
[#299 '{']: r#192
[#299 '|']: r#192
[#299 '|=']: r#192
[#299 '||']: r#192
[#300 '!=']: r#193
[#300 '%']: r#193
[#300 '%=']: r#193
[#300 '&&']: r#193
[#300 '&']: r#193
[#300 '&=']: r#193
[#300 ')']: r#193
[#300 '*']: r#193
[#300 '*=']: r#193
[#300 '+']: r#193
[#300 '++']: r#193
[#300 '+=']: r#193
[#300 ',']: r#193
[#300 '-']: r#193
[#300 '--']: r#193
[#300 '-=']: r#193
[#300 '.']: r#193
[#300 '/']: r#193
[#300 '/=']: r#193
[#300 ':']: r#193
[#300 ';']: r#193
[#300 '<']: r#193
[#300 '<<']: r#193
[#300 '<<=']: r#193
[#300 '<=']: r#193
[#300 '=']: r#193
[#300 '==']: r#193
[#300 '>']: r#193
[#300 '>=']: r#193
[#300 '>>']: r#193
[#300 '>>=']: r#193
[#300 '[']: r#193
[#300 ']']: r#193
[#300 '^']: r#193
[#300 '^=']: r#193
[#300 '{']: r#193
[#300 '|']: r#193
[#300 '|=']: r#193
[#300 '||']: r#193
[#301 '!=']: r#194
[#301 '%']: r#194
[#301 '%=']: r#194
[#301 '&&']: r#194
[#301 '&']: r#194
[#301 '&=']: r#194
[#301 ')']: r#194
[#301 '*']: r#194
[#301 '*=']: r#194
[#301 '+']: r#194
[#301 '++']: r#194
[#301 '+=']: r#194
[#301 ',']: r#194
[#301 '-']: r#194
[#301 '--']: r#194
[#301 '-=']: r#194
[#301 '.']: r#194
[#301 '/']: r#194
[#301 '/=']: r#194
[#301 ':']: r#194
[#301 ';']: r#194
[#301 '<']: r#194
[#301 '<<']: r#194
[#301 '<<=']: r#194
[#301 '<=']: r#194
[#301 '=']: r#194
[#301 '==']: r#194
[#301 '>']: r#194
[#301 '>=']: r#194
[#301 '>>']: r#194
[#301 '>>=']: r#194
[#301 '[']: r#194
[#301 ']']: r#194
[#301 '^']: r#194
[#301 '^=']: r#194
[#301 '{']: r#194
[#301 '|']: r#194
[#301 '|=']: r#194
[#301 '||']: r#194
[#302 '!=']: r#195
[#302 '%']: r#195
[#302 '%=']: r#195
[#302 '&&']: r#195
[#302 '&']: r#195
[#302 '&=']: r#195
[#302 ')']: r#195
[#302 '*']: r#195
[#302 '*=']: r#195
[#302 '+']: r#195
[#302 '++']: r#195
[#302 '+=']: r#195
[#302 ',']: r#195
[#302 '-']: r#195
[#302 '--']: r#195
[#302 '-=']: r#195
[#302 '.']: r#195
[#302 '/']: r#195
[#302 '/=']: r#195
[#302 ':']: r#195
[#302 ';']: r#195
[#302 '<']: r#195
[#302 '<<']: r#195
[#302 '<<=']: r#195
[#302 '<=']: r#195
[#302 '=']: r#195
[#302 '==']: r#195
[#302 '>']: r#195
[#302 '>=']: r#195
[#302 '>>']: r#195
[#302 '>>=']: r#195
[#302 '[']: r#195
[#302 ']']: r#195
[#302 '^']: r#195
[#302 '^=']: r#195
[#302 '{']: r#195
[#302 '|']: r#195
[#302 '|=']: r#195
[#302 '||']: r#195
[#303 '!=']: r#196
[#303 '%']: r#196
[#303 '%=']: r#196
[#303 '&&']: r#196
[#303 '&']: r#196
[#303 '&=']: r#196
[#303 ')']: r#196
[#303 '*']: r#196
[#303 '*=']: r#196
[#303 '+']: r#196
[#303 '++']: r#196
[#303 '+=']: r#196
[#303 ',']: r#196
[#303 '-']: r#196
[#303 '--']: r#196
[#303 '-=']: r#196
[#303 '.']: r#196
[#303 '/']: r#196
[#303 '/=']: r#196
[#303 ':']: r#196
[#303 ';']: r#196
[#303 '<']: r#196
[#303 '<<']: r#196
[#303 '<<=']: r#196
[#303 '<=']: r#196
[#303 '=']: r#196
[#303 '==']: r#196
[#303 '>']: r#196
[#303 '>=']: r#196
[#303 '>>']: r#196
[#303 '>>=']: r#196
[#303 '[']: r#196
[#303 ']']: r#196
[#303 '^']: r#196
[#303 '^=']: r#196
[#303 '{']: r#196
[#303 '|']: r#196
[#303 '|=']: r#196
[#303 '||']: r#196
[#304 '!=']: r#197
[#304 '%']: r#197
[#304 '%=']: r#197
[#304 '&&']: r#197
[#304 '&']: r#197
[#304 '&=']: r#197
[#304 ')']: r#197
[#304 '*']: r#197
[#304 '*=']: r#197
[#304 '+']: r#197
[#304 '++']: r#197
[#304 '+=']: r#197
[#304 ',']: r#197
[#304 '-']: r#197
[#304 '--']: r#197
[#304 '-=']: r#197
[#304 '.']: r#197
[#304 '/']: r#197
[#304 '/=']: r#197
[#304 ':']: r#197
[#304 ';']: r#197
[#304 '<']: r#197
[#304 '<<']: r#197
[#304 '<<=']: r#197
[#304 '<=']: r#197
[#304 '=']: r#197
[#304 '==']: r#197
[#304 '>']: r#197
[#304 '>=']: r#197
[#304 '>>']: r#197
[#304 '>>=']: r#197
[#304 '[']: r#197
[#304 ']']: r#197
[#304 '^']: r#197
[#304 '^=']: r#197
[#304 '{']: r#197
[#304 '|']: r#197
[#304 '|=']: r#197
[#304 '||']: r#197
[#305 '!=']: r#198
[#305 '%']: r#198
[#305 '%=']: r#198
[#305 '&&']: r#198
[#305 '&']: r#198
[#305 '&=']: r#198
[#305 ')']: r#198
[#305 '*']: r#198
[#305 '*=']: r#198
[#305 '+']: r#198
[#305 '++']: r#198
[#305 '+=']: r#198
[#305 ',']: r#198
[#305 '-']: r#198
[#305 '--']: r#198
[#305 '-=']: r#198
[#305 '.']: r#198
[#305 '/']: r#198
[#305 '/=']: r#198
[#305 ':']: r#198
[#305 ';']: r#198
[#305 '<']: r#198
[#305 '<<']: r#198
[#305 '<<=']: r#198
[#305 '<=']: r#198
[#305 '=']: r#198
[#305 '==']: r#198
[#305 '>']: r#198
[#305 '>=']: r#198
[#305 '>>']: r#198
[#305 '>>=']: r#198
[#305 '[']: r#198
[#305 ']']: r#198
[#305 '^']: r#198
[#305 '^=']: r#198
[#305 '{']: r#198
[#305 '|']: r#198
[#305 '|=']: r#198
[#305 '||']: r#198
[#306 '!=']: r#199
[#306 '%']: r#199
[#306 '%=']: r#199
[#306 '&&']: r#199
[#306 '&']: r#199
[#306 '&=']: r#199
[#306 ')']: r#199
[#306 '*']: r#199
[#306 '*=']: r#199
[#306 '+']: r#199
[#306 '++']: r#199
[#306 '+=']: r#199
[#306 ',']: r#199
[#306 '-']: r#199
[#306 '--']: r#199
[#306 '-=']: r#199
[#306 '.']: r#199
[#306 '/']: r#199
[#306 '/=']: r#199
[#306 ':']: r#199
[#306 ';']: r#199
[#306 '<']: r#199
[#306 '<<']: r#199
[#306 '<<=']: r#199
[#306 '<=']: r#199
[#306 '=']: r#199
[#306 '==']: r#199
[#306 '>']: r#199
[#306 '>=']: r#199
[#306 '>>']: r#199
[#306 '>>=']: r#199
[#306 '[']: r#199
[#306 ']']: r#199
[#306 '^']: r#199
[#306 '^=']: r#199
[#306 '{']: r#199
[#306 '|']: r#199
[#306 '|=']: r#199
[#306 '||']: r#199
[#307 ']']: s#493
[#308 ')']: s#320
[#309 ',']: s#403
[#310 '>']: s#237
[#311 ')']: r#200
[#311 ',']: r#200
[#311 ';']: r#200
[#311 '=']: r#200
[#311 '>']: r#200
[#311 '{']: r#200
[#311 '}']: r#200
[#312 ')']: r#201
[#312 ',']: r#201
[#312 ';']: r#201
[#312 '=']: r#201
[#312 '>']: r#201
[#312 '{']: r#201
[#312 '}']: r#201
[#313 '<']: s#173
[#314 '<']: s#173
[#315 '<']: s#173
[#316 '>']: s#237
[#317 '>']: s#237
[#318 ',']: s#403
[#319 '!=']: r#202
[#319 '%']: r#202
[#319 '&&']: r#202
[#319 '&']: r#202
[#319 ')']: r#202
[#319 '*']: r#202
[#319 '+']: r#202
[#319 ',']: r#202
[#319 '-']: r#202
[#319 '.']: r#202
[#319 '/']: r#202
[#319 ':']: r#202
[#319 ';']: r#202
[#319 '<']: r#202
[#319 '<<']: r#202
[#319 '<=']: r#202
[#319 '==']: r#202
[#319 '>']: r#202
[#319 '>=']: r#202
[#319 '>>']: r#202
[#319 '[']: r#202
[#319 ']']: r#202
[#319 '^']: r#202
[#319 '{']: r#202
[#319 '|']: r#202
[#319 '||']: r#202
[#320 '!=']: r#203
[#320 '%']: r#203
[#320 '%=']: r#203
[#320 '&&']: r#203
[#320 '&']: r#203
[#320 '&=']: r#203
[#320 ')']: r#203
[#320 '*']: r#203
[#320 '*=']: r#203
[#320 '+']: r#203
[#320 '++']: r#203
[#320 '+=']: r#203
[#320 ',']: r#203
[#320 '-']: r#203
[#320 '--']: r#203
[#320 '-=']: r#203
[#320 '->']: r#203
[#320 '.']: r#203
[#320 '/']: r#203
[#320 '/=']: r#203
[#320 ':']: r#203
[#320 ';']: r#203
[#320 '<']: r#203
[#320 '<<']: r#203
[#320 '<<=']: r#203
[#320 '<=']: r#203
[#320 '=']: r#203
[#320 '==']: r#203
[#320 '>']: r#203
[#320 '>=']: r#203
[#320 '>>']: r#203
[#320 '>>=']: r#203
[#320 '@']: r#203
[#320 '[']: r#203
[#320 ']']: r#203
[#320 '^']: r#203
[#320 '^=']: r#203
[#320 'array']: r#203
[#320 'atomic']: r#203
[#320 'bool']: r#203
[#320 'f16']: r#203
[#320 'f32']: r#203
[#320 'fn']: r#203
[#320 'i32']: r#203
[#320 'mat2x2']: r#203
[#320 'mat2x3']: r#203
[#320 'mat2x4']: r#203
[#320 'mat3x2']: r#203
[#320 'mat3x3']: r#203
[#320 'mat3x4']: r#203
[#320 'mat4x2']: r#203
[#320 'mat4x3']: r#203
[#320 'mat4x4']: r#203
[#320 'override']: r#203
[#320 'ptr']: r#203
[#320 'sampler']: r#203
[#320 'sampler_comparison']: r#203
[#320 'texture_1d']: r#203
[#320 'texture_2d']: r#203
[#320 'texture_2d_array']: r#203
[#320 'texture_3d']: r#203
[#320 'texture_cube']: r#203
[#320 'texture_cube_array']: r#203
[#320 'texture_depth_2d']: r#203
[#320 'texture_depth_2d_array']: r#203
[#320 'texture_depth_cube']: r#203
[#320 'texture_depth_cube_array']: r#203
[#320 'texture_depth_multisampled_2d']: r#203
[#320 'texture_multisampled_2d']: r#203
[#320 'texture_storage_1d']: r#203
[#320 'texture_storage_2d']: r#203
[#320 'texture_storage_2d_array']: r#203
[#320 'texture_storage_3d']: r#203
[#320 'u32']: r#203
[#320 'var']: r#203
[#320 'vec2']: r#203
[#320 'vec3']: r#203
[#320 'vec4']: r#203
[#320 '{']: r#203
[#320 '|']: r#203
[#320 '|=']: r#203
[#320 '||']: r#203
[#321 ',']: s#403
[#322 ',']: r#204
[#322 '>']: r#204
[#323 ',']: r#205
[#323 '>']: r#205
[#324 ',']: r#206
[#324 '>']: r#206
[#325 ',']: r#207
[#325 '>']: r#207
[#326 ',']: r#208
[#326 '>']: r#208
[#327 '>']: s#237
[#328 '>']: s#237
[#329 '>']: s#237
[#330 ',']: s#403
[#331 ',']: r#209
[#332 ',']: r#210
[#333 ',']: r#211
[#334 ',']: r#212
[#335 ',']: r#213
[#336 ',']: r#214
[#337 ',']: r#215
[#338 ',']: r#216
[#339 ',']: r#217
[#340 ',']: r#218
[#341 ',']: r#219
[#342 ',']: r#220
[#343 ',']: r#221
[#344 ',']: r#222
[#345 ',']: r#223
[#346 ',']: r#224
[#347 '}']: s#476
[#348 '}']: r#225
[#349 '&']: s#73
[#349 '(']: s#115
[#349 '*']: s#72
[#349 ';']: s#19
[#349 '_']: s#386
[#349 'break']: s#375
[#349 'const']: s#374
[#349 'continue']: s#376
[#349 'discard']: s#361
[#349 'for']: s#369
[#349 'if']: s#380
[#349 'let']: s#373
[#349 'loop']: s#368
[#349 'return']: s#365
[#349 'static_assert']: s#26
[#349 'switch']: s#367
[#349 'var']: s#163
[#349 'while']: s#370
[#349 '{']: s#185
[#349 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#350 '&']: r#226
[#350 '(']: r#226
[#350 '*']: r#226
[#350 ';']: r#226
[#350 '_']: r#226
[#350 'break']: r#226
[#350 'const']: r#226
[#350 'continue']: r#226
[#350 'continuing']: r#226
[#350 'discard']: r#226
[#350 'for']: r#226
[#350 'if']: r#226
[#350 'let']: r#226
[#350 'loop']: r#226
[#350 'return']: r#226
[#350 'static_assert']: r#226
[#350 'switch']: r#226
[#350 'var']: r#226
[#350 'while']: r#226
[#350 '{']: r#226
[#350 '}']: r#226
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#226
[#351 ';']: s#19
[#352 '&']: r#227
[#352 '(']: r#227
[#352 '*']: r#227
[#352 ';']: r#227
[#352 '_']: r#227
[#352 'break']: r#227
[#352 'const']: r#227
[#352 'continue']: r#227
[#352 'continuing']: r#227
[#352 'discard']: r#227
[#352 'for']: r#227
[#352 'if']: r#227
[#352 'let']: r#227
[#352 'loop']: r#227
[#352 'return']: r#227
[#352 'static_assert']: r#227
[#352 'switch']: r#227
[#352 'var']: r#227
[#352 'while']: r#227
[#352 '{']: r#227
[#352 '}']: r#227
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#353 '&']: r#228
[#353 '(']: r#228
[#353 '*']: r#228
[#353 ';']: r#228
[#353 '_']: r#228
[#353 'break']: r#228
[#353 'const']: r#228
[#353 'continue']: r#228
[#353 'continuing']: r#228
[#353 'discard']: r#228
[#353 'for']: r#228
[#353 'if']: r#228
[#353 'let']: r#228
[#353 'loop']: r#228
[#353 'return']: r#228
[#353 'static_assert']: r#228
[#353 'switch']: r#228
[#353 'var']: r#228
[#353 'while']: r#228
[#353 '{']: r#228
[#353 '}']: r#228
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#228
[#354 '&']: r#229
[#354 '(']: r#229
[#354 '*']: r#229
[#354 ';']: r#229
[#354 '_']: r#229
[#354 'break']: r#229
[#354 'const']: r#229
[#354 'continue']: r#229
[#354 'continuing']: r#229
[#354 'discard']: r#229
[#354 'for']: r#229
[#354 'if']: r#229
[#354 'let']: r#229
[#354 'loop']: r#229
[#354 'return']: r#229
[#354 'static_assert']: r#229
[#354 'switch']: r#229
[#354 'var']: r#229
[#354 'while']: r#229
[#354 '{']: r#229
[#354 '}']: r#229
[#354 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#229
[#355 '&']: r#230
[#355 '(']: r#230
[#355 '*']: r#230
[#355 ';']: r#230
[#355 '_']: r#230
[#355 'break']: r#230
[#355 'const']: r#230
[#355 'continue']: r#230
[#355 'continuing']: r#230
[#355 'discard']: r#230
[#355 'for']: r#230
[#355 'if']: r#230
[#355 'let']: r#230
[#355 'loop']: r#230
[#355 'return']: r#230
[#355 'static_assert']: r#230
[#355 'switch']: r#230
[#355 'var']: r#230
[#355 'while']: r#230
[#355 '{']: r#230
[#355 '}']: r#230
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#230
[#356 '&']: r#231
[#356 '(']: r#231
[#356 '*']: r#231
[#356 ';']: r#231
[#356 '_']: r#231
[#356 'break']: r#231
[#356 'const']: r#231
[#356 'continue']: r#231
[#356 'continuing']: r#231
[#356 'discard']: r#231
[#356 'for']: r#231
[#356 'if']: r#231
[#356 'let']: r#231
[#356 'loop']: r#231
[#356 'return']: r#231
[#356 'static_assert']: r#231
[#356 'switch']: r#231
[#356 'var']: r#231
[#356 'while']: r#231
[#356 '{']: r#231
[#356 '}']: r#231
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#231
[#357 ';']: s#19
[#358 ';']: s#19
[#359 ';']: s#19
[#360 ';']: s#19
[#361 ';']: s#19
[#362 ';']: s#19
[#363 '&']: r#232
[#363 '(']: r#232
[#363 '*']: r#232
[#363 ';']: r#232
[#363 '_']: r#232
[#363 'break']: r#232
[#363 'const']: r#232
[#363 'continue']: r#232
[#363 'continuing']: r#232
[#363 'discard']: r#232
[#363 'for']: r#232
[#363 'if']: r#232
[#363 'let']: r#232
[#363 'loop']: r#232
[#363 'return']: r#232
[#363 'static_assert']: r#232
[#363 'switch']: r#232
[#363 'var']: r#232
[#363 'while']: r#232
[#363 '{']: r#232
[#363 '}']: r#232
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#232
[#364 ';']: s#19
[#365 '!']: s#70
[#365 '&']: s#73
[#365 '(']: s#115
[#365 '*']: s#72
[#365 '-']: s#69
[#365 'array']: s#83
[#365 'atomic']: s#95
[#365 'bitcast']: s#78
[#365 'bool']: s#88
[#365 'f16']: s#117
[#365 'f32']: s#116
[#365 'false']: s#114
[#365 'i32']: s#118
[#365 'mat2x2']: s#100
[#365 'mat2x3']: s#101
[#365 'mat2x4']: s#102
[#365 'mat3x2']: s#103
[#365 'mat3x3']: s#104
[#365 'mat3x4']: s#105
[#365 'mat4x2']: s#106
[#365 'mat4x3']: s#107
[#365 'mat4x4']: s#108
[#365 'ptr']: s#120
[#365 'sampler']: s#137
[#365 'sampler_comparison']: s#138
[#365 'texture_1d']: s#144
[#365 'texture_2d']: s#145
[#365 'texture_2d_array']: s#146
[#365 'texture_3d']: s#147
[#365 'texture_cube']: s#148
[#365 'texture_cube_array']: s#149
[#365 'texture_depth_2d']: s#139
[#365 'texture_depth_2d_array']: s#140
[#365 'texture_depth_cube']: s#141
[#365 'texture_depth_cube_array']: s#142
[#365 'texture_depth_multisampled_2d']: s#143
[#365 'texture_multisampled_2d']: s#150
[#365 'texture_storage_1d']: s#151
[#365 'texture_storage_2d']: s#152
[#365 'texture_storage_2d_array']: s#153
[#365 'texture_storage_3d']: s#154
[#365 'true']: s#113
[#365 'u32']: s#119
[#365 'vec2']: s#97
[#365 'vec3']: s#98
[#365 'vec4']: s#99
[#365 '~']: s#71
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#365 /0[fh]/]: s#129
[#365 /0[iu]?/]: s#126
[#365 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#365 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#365 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#365 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#365 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#365 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#365 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#365 /[1-9][0-9]*[fh]/]: s#130
[#365 /[1-9][0-9]*[iu]?/]: s#127
[#366 'else']: s#463
[#367 '!']: s#70
[#367 '&']: s#73
[#367 '(']: s#115
[#367 '*']: s#72
[#367 '-']: s#69
[#367 'array']: s#83
[#367 'atomic']: s#95
[#367 'bitcast']: s#78
[#367 'bool']: s#88
[#367 'f16']: s#117
[#367 'f32']: s#116
[#367 'false']: s#114
[#367 'i32']: s#118
[#367 'mat2x2']: s#100
[#367 'mat2x3']: s#101
[#367 'mat2x4']: s#102
[#367 'mat3x2']: s#103
[#367 'mat3x3']: s#104
[#367 'mat3x4']: s#105
[#367 'mat4x2']: s#106
[#367 'mat4x3']: s#107
[#367 'mat4x4']: s#108
[#367 'ptr']: s#120
[#367 'sampler']: s#137
[#367 'sampler_comparison']: s#138
[#367 'texture_1d']: s#144
[#367 'texture_2d']: s#145
[#367 'texture_2d_array']: s#146
[#367 'texture_3d']: s#147
[#367 'texture_cube']: s#148
[#367 'texture_cube_array']: s#149
[#367 'texture_depth_2d']: s#139
[#367 'texture_depth_2d_array']: s#140
[#367 'texture_depth_cube']: s#141
[#367 'texture_depth_cube_array']: s#142
[#367 'texture_depth_multisampled_2d']: s#143
[#367 'texture_multisampled_2d']: s#150
[#367 'texture_storage_1d']: s#151
[#367 'texture_storage_2d']: s#152
[#367 'texture_storage_2d_array']: s#153
[#367 'texture_storage_3d']: s#154
[#367 'true']: s#113
[#367 'u32']: s#119
[#367 'vec2']: s#97
[#367 'vec3']: s#98
[#367 'vec4']: s#99
[#367 '~']: s#71
[#367 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#367 /0[fh]/]: s#129
[#367 /0[iu]?/]: s#126
[#367 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#367 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#367 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#367 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#367 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#367 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#367 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#367 /[1-9][0-9]*[fh]/]: s#130
[#367 /[1-9][0-9]*[iu]?/]: s#127
[#368 '{']: s#185
[#369 '(']: s#115
[#370 '!']: s#70
[#370 '&']: s#73
[#370 '(']: s#115
[#370 '*']: s#72
[#370 '-']: s#69
[#370 'array']: s#83
[#370 'atomic']: s#95
[#370 'bitcast']: s#78
[#370 'bool']: s#88
[#370 'f16']: s#117
[#370 'f32']: s#116
[#370 'false']: s#114
[#370 'i32']: s#118
[#370 'mat2x2']: s#100
[#370 'mat2x3']: s#101
[#370 'mat2x4']: s#102
[#370 'mat3x2']: s#103
[#370 'mat3x3']: s#104
[#370 'mat3x4']: s#105
[#370 'mat4x2']: s#106
[#370 'mat4x3']: s#107
[#370 'mat4x4']: s#108
[#370 'ptr']: s#120
[#370 'sampler']: s#137
[#370 'sampler_comparison']: s#138
[#370 'texture_1d']: s#144
[#370 'texture_2d']: s#145
[#370 'texture_2d_array']: s#146
[#370 'texture_3d']: s#147
[#370 'texture_cube']: s#148
[#370 'texture_cube_array']: s#149
[#370 'texture_depth_2d']: s#139
[#370 'texture_depth_2d_array']: s#140
[#370 'texture_depth_cube']: s#141
[#370 'texture_depth_cube_array']: s#142
[#370 'texture_depth_multisampled_2d']: s#143
[#370 'texture_multisampled_2d']: s#150
[#370 'texture_storage_1d']: s#151
[#370 'texture_storage_2d']: s#152
[#370 'texture_storage_2d_array']: s#153
[#370 'texture_storage_3d']: s#154
[#370 'true']: s#113
[#370 'u32']: s#119
[#370 'vec2']: s#97
[#370 'vec3']: s#98
[#370 'vec4']: s#99
[#370 '~']: s#71
[#370 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#370 /0[fh]/]: s#129
[#370 /0[iu]?/]: s#126
[#370 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#370 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#370 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#370 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#370 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#370 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#370 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#370 /[1-9][0-9]*[fh]/]: s#130
[#370 /[1-9][0-9]*[iu]?/]: s#127
[#371 '%=']: r#233
[#371 '&=']: r#233
[#371 '(']: s#115
[#371 '*=']: r#233
[#371 '++']: r#233
[#371 '+=']: r#233
[#371 '--']: r#233
[#371 '-=']: r#233
[#371 '.']: r#233
[#371 '/=']: r#233
[#371 '<<=']: r#233
[#371 '=']: r#233
[#371 '>>=']: r#233
[#371 '[']: r#233
[#371 '^=']: r#233
[#371 '|=']: r#233
[#372 ';']: r#234
[#372 '=']: s#176
[#373 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#374 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#375 ';']: r#235
[#376 ';']: r#236
[#377 ')']: r#237
[#377 ';']: r#237
[#378 ')']: r#238
[#378 ';']: r#238
[#379 ')']: r#239
[#379 ';']: r#239
[#380 '!']: s#70
[#380 '&']: s#73
[#380 '(']: s#115
[#380 '*']: s#72
[#380 '-']: s#69
[#380 'array']: s#83
[#380 'atomic']: s#95
[#380 'bitcast']: s#78
[#380 'bool']: s#88
[#380 'f16']: s#117
[#380 'f32']: s#116
[#380 'false']: s#114
[#380 'i32']: s#118
[#380 'mat2x2']: s#100
[#380 'mat2x3']: s#101
[#380 'mat2x4']: s#102
[#380 'mat3x2']: s#103
[#380 'mat3x3']: s#104
[#380 'mat3x4']: s#105
[#380 'mat4x2']: s#106
[#380 'mat4x3']: s#107
[#380 'mat4x4']: s#108
[#380 'ptr']: s#120
[#380 'sampler']: s#137
[#380 'sampler_comparison']: s#138
[#380 'texture_1d']: s#144
[#380 'texture_2d']: s#145
[#380 'texture_2d_array']: s#146
[#380 'texture_3d']: s#147
[#380 'texture_cube']: s#148
[#380 'texture_cube_array']: s#149
[#380 'texture_depth_2d']: s#139
[#380 'texture_depth_2d_array']: s#140
[#380 'texture_depth_cube']: s#141
[#380 'texture_depth_cube_array']: s#142
[#380 'texture_depth_multisampled_2d']: s#143
[#380 'texture_multisampled_2d']: s#150
[#380 'texture_storage_1d']: s#151
[#380 'texture_storage_2d']: s#152
[#380 'texture_storage_2d_array']: s#153
[#380 'texture_storage_3d']: s#154
[#380 'true']: s#113
[#380 'u32']: s#119
[#380 'vec2']: s#97
[#380 'vec3']: s#98
[#380 'vec4']: s#99
[#380 '~']: s#71
[#380 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#380 /0[fh]/]: s#129
[#380 /0[iu]?/]: s#126
[#380 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#380 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#380 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#380 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#380 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#380 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#380 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#380 /[1-9][0-9]*[fh]/]: s#130
[#380 /[1-9][0-9]*[iu]?/]: s#127
[#381 '%=']: s#445
[#381 '&=']: s#446
[#381 '*=']: s#443
[#381 '++']: s#429
[#381 '+=']: s#441
[#381 '--']: s#430
[#381 '-=']: s#442
[#381 '/=']: s#444
[#381 '<<=']: s#450
[#381 '=']: s#176
[#381 '>>=']: s#449
[#381 '^=']: s#448
[#381 '|=']: s#447
[#382 '=']: s#176
[#383 '.']: s#206
[#383 '[']: s#205
[#384 '&']: s#73
[#384 '(']: s#115
[#384 '*']: s#72
[#384 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#385 '&']: s#73
[#385 '(']: s#115
[#385 '*']: s#72
[#385 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#386 '=']: r#240
[#387 '&']: s#73
[#387 '(']: s#115
[#387 '*']: s#72
[#387 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#388 '@']: s#32
[#389 ',']: s#403
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#298
[#392 '@']: s#32
[#393 ';']: r#241
[#394 ';']: r#242
[#395 '!']: s#70
[#395 '&']: s#73
[#395 '(']: s#115
[#395 '*']: s#72
[#395 '-']: s#69
[#395 'array']: s#83
[#395 'atomic']: s#95
[#395 'bitcast']: s#78
[#395 'bool']: s#88
[#395 'f16']: s#117
[#395 'f32']: s#116
[#395 'false']: s#114
[#395 'i32']: s#118
[#395 'mat2x2']: s#100
[#395 'mat2x3']: s#101
[#395 'mat2x4']: s#102
[#395 'mat3x2']: s#103
[#395 'mat3x3']: s#104
[#395 'mat3x4']: s#105
[#395 'mat4x2']: s#106
[#395 'mat4x3']: s#107
[#395 'mat4x4']: s#108
[#395 'ptr']: s#120
[#395 'sampler']: s#137
[#395 'sampler_comparison']: s#138
[#395 'texture_1d']: s#144
[#395 'texture_2d']: s#145
[#395 'texture_2d_array']: s#146
[#395 'texture_3d']: s#147
[#395 'texture_cube']: s#148
[#395 'texture_cube_array']: s#149
[#395 'texture_depth_2d']: s#139
[#395 'texture_depth_2d_array']: s#140
[#395 'texture_depth_cube']: s#141
[#395 'texture_depth_cube_array']: s#142
[#395 'texture_depth_multisampled_2d']: s#143
[#395 'texture_multisampled_2d']: s#150
[#395 'texture_storage_1d']: s#151
[#395 'texture_storage_2d']: s#152
[#395 'texture_storage_2d_array']: s#153
[#395 'texture_storage_3d']: s#154
[#395 'true']: s#113
[#395 'u32']: s#119
[#395 'vec2']: s#97
[#395 'vec3']: s#98
[#395 'vec4']: s#99
[#395 '~']: s#71
[#395 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#395 /0[fh]/]: s#129
[#395 /0[iu]?/]: s#126
[#395 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#395 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#395 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#395 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#395 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#395 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#395 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#395 /[1-9][0-9]*[fh]/]: s#130
[#395 /[1-9][0-9]*[iu]?/]: s#127
[#396 ';']: r#243
[#397 ';']: r#244
[#397 '=']: r#244
[#398 ';']: r#245
[#399 ',']: s#403
[#400 ';']: r#246
[#400 '=']: r#246
[#401 '>']: s#237
[#402 'read']: s#531
[#402 'read_write']: s#533
[#402 'write']: s#532
[#403 '!']: r#247
[#403 '&']: r#247
[#403 '(']: r#247
[#403 ')']: r#247
[#403 '*']: r#247
[#403 '-']: r#247
[#403 ':']: r#247
[#403 '@']: r#247
[#403 'array']: r#247
[#403 'atomic']: r#247
[#403 'bitcast']: r#247
[#403 'bool']: r#247
[#403 'default']: r#247
[#403 'f16']: r#247
[#403 'f32']: r#247
[#403 'false']: r#247
[#403 'i32']: r#247
[#403 'mat2x2']: r#247
[#403 'mat2x3']: r#247
[#403 'mat2x4']: r#247
[#403 'mat3x2']: r#247
[#403 'mat3x3']: r#247
[#403 'mat3x4']: r#247
[#403 'mat4x2']: r#247
[#403 'mat4x3']: r#247
[#403 'mat4x4']: r#247
[#403 'ptr']: r#247
[#403 'sampler']: r#247
[#403 'sampler_comparison']: r#247
[#403 'texture_1d']: r#247
[#403 'texture_2d']: r#247
[#403 'texture_2d_array']: r#247
[#403 'texture_3d']: r#247
[#403 'texture_cube']: r#247
[#403 'texture_cube_array']: r#247
[#403 'texture_depth_2d']: r#247
[#403 'texture_depth_2d_array']: r#247
[#403 'texture_depth_cube']: r#247
[#403 'texture_depth_cube_array']: r#247
[#403 'texture_depth_multisampled_2d']: r#247
[#403 'texture_multisampled_2d']: r#247
[#403 'texture_storage_1d']: r#247
[#403 'texture_storage_2d']: r#247
[#403 'texture_storage_2d_array']: r#247
[#403 'texture_storage_3d']: r#247
[#403 'true']: r#247
[#403 'u32']: r#247
[#403 'vec2']: r#247
[#403 'vec3']: r#247
[#403 'vec4']: r#247
[#403 '{']: r#247
[#403 '}']: r#247
[#403 '~']: r#247
[#403 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#247
[#403 /0[xX][0-9a-fA-F]+[iu]?/]: r#247
[#404 ';']: r#248
[#406 ':']: s#179
[#407 ',']: s#403
[#408 ',']: r#249
[#408 '}']: r#249
[#409 ',']: s#403
[#410 '@']: s#32
[#411 ')']: s#320
[#412 ')']: r#250
[#413 ',']: s#403
[#414 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#416 '@']: s#32
[#417 ')']: s#320
[#418 '%=']: r#233
[#418 '&=']: r#233
[#418 ')']: r#233
[#418 '*=']: r#233
[#418 '++']: r#233
[#418 '+=']: r#233
[#418 '--']: r#233
[#418 '-=']: r#233
[#418 '.']: r#233
[#418 '/=']: r#233
[#418 '<<=']: r#233
[#418 '=']: r#233
[#418 '>>=']: r#233
[#418 '[']: r#233
[#418 '^=']: r#233
[#418 '|=']: r#233
[#419 '%=']: r#251
[#419 '&=']: r#251
[#419 ')']: r#251
[#419 '*=']: r#251
[#419 '++']: r#251
[#419 '+=']: r#251
[#419 '--']: r#251
[#419 '-=']: r#251
[#419 '/=']: r#251
[#419 '<<=']: r#251
[#419 '=']: r#251
[#419 '>>=']: r#251
[#419 '^=']: r#251
[#419 '|=']: r#251
[#420 '%=']: r#252
[#420 '&=']: r#252
[#420 ')']: r#252
[#420 '*=']: r#252
[#420 '++']: r#252
[#420 '+=']: r#252
[#420 '--']: r#252
[#420 '-=']: r#252
[#420 '/=']: r#252
[#420 '<<=']: r#252
[#420 '=']: r#252
[#420 '>>=']: r#252
[#420 '^=']: r#252
[#420 '|=']: r#252
[#421 '%=']: r#253
[#421 '&=']: r#253
[#421 ')']: r#253
[#421 '*=']: r#253
[#421 '++']: r#253
[#421 '+=']: r#253
[#421 '--']: r#253
[#421 '-=']: r#253
[#421 '/=']: r#253
[#421 '<<=']: r#253
[#421 '=']: r#253
[#421 '>>=']: r#253
[#421 '^=']: r#253
[#421 '|=']: r#253
[#422 '%=']: r#254
[#422 '&=']: r#254
[#422 ')']: r#254
[#422 '*=']: r#254
[#422 '++']: r#254
[#422 '+=']: r#254
[#422 '--']: r#254
[#422 '-=']: r#254
[#422 '/=']: r#254
[#422 '<<=']: r#254
[#422 '=']: r#254
[#422 '>>=']: r#254
[#422 '^=']: r#254
[#422 '|=']: r#254
[#423 '!']: s#70
[#423 '&']: s#73
[#423 '(']: s#115
[#423 '*']: s#72
[#423 '-']: s#69
[#423 'array']: s#83
[#423 'atomic']: s#95
[#423 'bitcast']: s#78
[#423 'bool']: s#88
[#423 'f16']: s#117
[#423 'f32']: s#116
[#423 'false']: s#114
[#423 'i32']: s#118
[#423 'mat2x2']: s#100
[#423 'mat2x3']: s#101
[#423 'mat2x4']: s#102
[#423 'mat3x2']: s#103
[#423 'mat3x3']: s#104
[#423 'mat3x4']: s#105
[#423 'mat4x2']: s#106
[#423 'mat4x3']: s#107
[#423 'mat4x4']: s#108
[#423 'ptr']: s#120
[#423 'sampler']: s#137
[#423 'sampler_comparison']: s#138
[#423 'texture_1d']: s#144
[#423 'texture_2d']: s#145
[#423 'texture_2d_array']: s#146
[#423 'texture_3d']: s#147
[#423 'texture_cube']: s#148
[#423 'texture_cube_array']: s#149
[#423 'texture_depth_2d']: s#139
[#423 'texture_depth_2d_array']: s#140
[#423 'texture_depth_cube']: s#141
[#423 'texture_depth_cube_array']: s#142
[#423 'texture_depth_multisampled_2d']: s#143
[#423 'texture_multisampled_2d']: s#150
[#423 'texture_storage_1d']: s#151
[#423 'texture_storage_2d']: s#152
[#423 'texture_storage_2d_array']: s#153
[#423 'texture_storage_3d']: s#154
[#423 'true']: s#113
[#423 'u32']: s#119
[#423 'vec2']: s#97
[#423 'vec3']: s#98
[#423 'vec4']: s#99
[#423 '~']: s#71
[#423 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#423 /0[fh]/]: s#129
[#423 /0[iu]?/]: s#126
[#423 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#423 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#423 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#423 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#423 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#423 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#423 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#423 /[1-9][0-9]*[fh]/]: s#130
[#423 /[1-9][0-9]*[iu]?/]: s#127
[#424 '!']: s#70
[#424 '&']: s#73
[#424 '(']: s#115
[#424 '*']: s#72
[#424 '-']: s#69
[#424 'array']: s#83
[#424 'atomic']: s#95
[#424 'bitcast']: s#78
[#424 'bool']: s#88
[#424 'f16']: s#117
[#424 'f32']: s#116
[#424 'false']: s#114
[#424 'i32']: s#118
[#424 'mat2x2']: s#100
[#424 'mat2x3']: s#101
[#424 'mat2x4']: s#102
[#424 'mat3x2']: s#103
[#424 'mat3x3']: s#104
[#424 'mat3x4']: s#105
[#424 'mat4x2']: s#106
[#424 'mat4x3']: s#107
[#424 'mat4x4']: s#108
[#424 'ptr']: s#120
[#424 'sampler']: s#137
[#424 'sampler_comparison']: s#138
[#424 'texture_1d']: s#144
[#424 'texture_2d']: s#145
[#424 'texture_2d_array']: s#146
[#424 'texture_3d']: s#147
[#424 'texture_cube']: s#148
[#424 'texture_cube_array']: s#149
[#424 'texture_depth_2d']: s#139
[#424 'texture_depth_2d_array']: s#140
[#424 'texture_depth_cube']: s#141
[#424 'texture_depth_cube_array']: s#142
[#424 'texture_depth_multisampled_2d']: s#143
[#424 'texture_multisampled_2d']: s#150
[#424 'texture_storage_1d']: s#151
[#424 'texture_storage_2d']: s#152
[#424 'texture_storage_2d_array']: s#153
[#424 'texture_storage_3d']: s#154
[#424 'true']: s#113
[#424 'u32']: s#119
[#424 'vec2']: s#97
[#424 'vec3']: s#98
[#424 'vec4']: s#99
[#424 '~']: s#71
[#424 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#424 /0[fh]/]: s#129
[#424 /0[iu]?/]: s#126
[#424 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#424 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#424 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#424 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#424 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#424 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#424 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#424 /[1-9][0-9]*[fh]/]: s#130
[#424 /[1-9][0-9]*[iu]?/]: s#127
[#425 ')']: r#255
[#425 ';']: r#255
[#426 ')']: r#256
[#426 ';']: r#256
[#427 '!']: r#257
[#427 '&']: r#257
[#427 '(']: r#257
[#427 '*']: r#257
[#427 '-']: r#257
[#427 'array']: r#257
[#427 'atomic']: r#257
[#427 'bitcast']: r#257
[#427 'bool']: r#257
[#427 'f16']: r#257
[#427 'f32']: r#257
[#427 'false']: r#257
[#427 'i32']: r#257
[#427 'mat2x2']: r#257
[#427 'mat2x3']: r#257
[#427 'mat2x4']: r#257
[#427 'mat3x2']: r#257
[#427 'mat3x3']: r#257
[#427 'mat3x4']: r#257
[#427 'mat4x2']: r#257
[#427 'mat4x3']: r#257
[#427 'mat4x4']: r#257
[#427 'ptr']: r#257
[#427 'sampler']: r#257
[#427 'sampler_comparison']: r#257
[#427 'texture_1d']: r#257
[#427 'texture_2d']: r#257
[#427 'texture_2d_array']: r#257
[#427 'texture_3d']: r#257
[#427 'texture_cube']: r#257
[#427 'texture_cube_array']: r#257
[#427 'texture_depth_2d']: r#257
[#427 'texture_depth_2d_array']: r#257
[#427 'texture_depth_cube']: r#257
[#427 'texture_depth_cube_array']: r#257
[#427 'texture_depth_multisampled_2d']: r#257
[#427 'texture_multisampled_2d']: r#257
[#427 'texture_storage_1d']: r#257
[#427 'texture_storage_2d']: r#257
[#427 'texture_storage_2d_array']: r#257
[#427 'texture_storage_3d']: r#257
[#427 'true']: r#257
[#427 'u32']: r#257
[#427 'vec2']: r#257
[#427 'vec3']: r#257
[#427 'vec4']: r#257
[#427 '~']: r#257
[#427 /0[xX][0-9a-fA-F]+[iu]?/]: r#257
[#428 '!']: r#258
[#428 '&']: r#258
[#428 '(']: r#258
[#428 '*']: r#258
[#428 '-']: r#258
[#428 'array']: r#258
[#428 'atomic']: r#258
[#428 'bitcast']: r#258
[#428 'bool']: r#258
[#428 'f16']: r#258
[#428 'f32']: r#258
[#428 'false']: r#258
[#428 'i32']: r#258
[#428 'mat2x2']: r#258
[#428 'mat2x3']: r#258
[#428 'mat2x4']: r#258
[#428 'mat3x2']: r#258
[#428 'mat3x3']: r#258
[#428 'mat3x4']: r#258
[#428 'mat4x2']: r#258
[#428 'mat4x3']: r#258
[#428 'mat4x4']: r#258
[#428 'ptr']: r#258
[#428 'sampler']: r#258
[#428 'sampler_comparison']: r#258
[#428 'texture_1d']: r#258
[#428 'texture_2d']: r#258
[#428 'texture_2d_array']: r#258
[#428 'texture_3d']: r#258
[#428 'texture_cube']: r#258
[#428 'texture_cube_array']: r#258
[#428 'texture_depth_2d']: r#258
[#428 'texture_depth_2d_array']: r#258
[#428 'texture_depth_cube']: r#258
[#428 'texture_depth_cube_array']: r#258
[#428 'texture_depth_multisampled_2d']: r#258
[#428 'texture_multisampled_2d']: r#258
[#428 'texture_storage_1d']: r#258
[#428 'texture_storage_2d']: r#258
[#428 'texture_storage_2d_array']: r#258
[#428 'texture_storage_3d']: r#258
[#428 'true']: r#258
[#428 'u32']: r#258
[#428 'vec2']: r#258
[#428 'vec3']: r#258
[#428 'vec4']: r#258
[#428 '~']: r#258
[#428 /0[xX][0-9a-fA-F]+[iu]?/]: r#258
[#429 ')']: r#259
[#429 ';']: r#259
[#430 ')']: r#260
[#430 ';']: r#260
[#431 '!']: r#261
[#431 '&']: r#261
[#431 '(']: r#261
[#431 '*']: r#261
[#431 '-']: r#261
[#431 'array']: r#261
[#431 'atomic']: r#261
[#431 'bitcast']: r#261
[#431 'bool']: r#261
[#431 'f16']: r#261
[#431 'f32']: r#261
[#431 'false']: r#261
[#431 'i32']: r#261
[#431 'mat2x2']: r#261
[#431 'mat2x3']: r#261
[#431 'mat2x4']: r#261
[#431 'mat3x2']: r#261
[#431 'mat3x3']: r#261
[#431 'mat3x4']: r#261
[#431 'mat4x2']: r#261
[#431 'mat4x3']: r#261
[#431 'mat4x4']: r#261
[#431 'ptr']: r#261
[#431 'sampler']: r#261
[#431 'sampler_comparison']: r#261
[#431 'texture_1d']: r#261
[#431 'texture_2d']: r#261
[#431 'texture_2d_array']: r#261
[#431 'texture_3d']: r#261
[#431 'texture_cube']: r#261
[#431 'texture_cube_array']: r#261
[#431 'texture_depth_2d']: r#261
[#431 'texture_depth_2d_array']: r#261
[#431 'texture_depth_cube']: r#261
[#431 'texture_depth_cube_array']: r#261
[#431 'texture_depth_multisampled_2d']: r#261
[#431 'texture_multisampled_2d']: r#261
[#431 'texture_storage_1d']: r#261
[#431 'texture_storage_2d']: r#261
[#431 'texture_storage_2d_array']: r#261
[#431 'texture_storage_3d']: r#261
[#431 'true']: r#261
[#431 'u32']: r#261
[#431 'vec2']: r#261
[#431 'vec3']: r#261
[#431 'vec4']: r#261
[#431 '~']: r#261
[#431 /0[xX][0-9a-fA-F]+[iu]?/]: r#261
[#432 '!']: r#262
[#432 '&']: r#262
[#432 '(']: r#262
[#432 '*']: r#262
[#432 '-']: r#262
[#432 'array']: r#262
[#432 'atomic']: r#262
[#432 'bitcast']: r#262
[#432 'bool']: r#262
[#432 'f16']: r#262
[#432 'f32']: r#262
[#432 'false']: r#262
[#432 'i32']: r#262
[#432 'mat2x2']: r#262
[#432 'mat2x3']: r#262
[#432 'mat2x4']: r#262
[#432 'mat3x2']: r#262
[#432 'mat3x3']: r#262
[#432 'mat3x4']: r#262
[#432 'mat4x2']: r#262
[#432 'mat4x3']: r#262
[#432 'mat4x4']: r#262
[#432 'ptr']: r#262
[#432 'sampler']: r#262
[#432 'sampler_comparison']: r#262
[#432 'texture_1d']: r#262
[#432 'texture_2d']: r#262
[#432 'texture_2d_array']: r#262
[#432 'texture_3d']: r#262
[#432 'texture_cube']: r#262
[#432 'texture_cube_array']: r#262
[#432 'texture_depth_2d']: r#262
[#432 'texture_depth_2d_array']: r#262
[#432 'texture_depth_cube']: r#262
[#432 'texture_depth_cube_array']: r#262
[#432 'texture_depth_multisampled_2d']: r#262
[#432 'texture_multisampled_2d']: r#262
[#432 'texture_storage_1d']: r#262
[#432 'texture_storage_2d']: r#262
[#432 'texture_storage_2d_array']: r#262
[#432 'texture_storage_3d']: r#262
[#432 'true']: r#262
[#432 'u32']: r#262
[#432 'vec2']: r#262
[#432 'vec3']: r#262
[#432 'vec4']: r#262
[#432 '~']: r#262
[#432 /0[xX][0-9a-fA-F]+[iu]?/]: r#262
[#433 '!']: r#263
[#433 '&']: r#263
[#433 '(']: r#263
[#433 '*']: r#263
[#433 '-']: r#263
[#433 'array']: r#263
[#433 'atomic']: r#263
[#433 'bitcast']: r#263
[#433 'bool']: r#263
[#433 'f16']: r#263
[#433 'f32']: r#263
[#433 'false']: r#263
[#433 'i32']: r#263
[#433 'mat2x2']: r#263
[#433 'mat2x3']: r#263
[#433 'mat2x4']: r#263
[#433 'mat3x2']: r#263
[#433 'mat3x3']: r#263
[#433 'mat3x4']: r#263
[#433 'mat4x2']: r#263
[#433 'mat4x3']: r#263
[#433 'mat4x4']: r#263
[#433 'ptr']: r#263
[#433 'sampler']: r#263
[#433 'sampler_comparison']: r#263
[#433 'texture_1d']: r#263
[#433 'texture_2d']: r#263
[#433 'texture_2d_array']: r#263
[#433 'texture_3d']: r#263
[#433 'texture_cube']: r#263
[#433 'texture_cube_array']: r#263
[#433 'texture_depth_2d']: r#263
[#433 'texture_depth_2d_array']: r#263
[#433 'texture_depth_cube']: r#263
[#433 'texture_depth_cube_array']: r#263
[#433 'texture_depth_multisampled_2d']: r#263
[#433 'texture_multisampled_2d']: r#263
[#433 'texture_storage_1d']: r#263
[#433 'texture_storage_2d']: r#263
[#433 'texture_storage_2d_array']: r#263
[#433 'texture_storage_3d']: r#263
[#433 'true']: r#263
[#433 'u32']: r#263
[#433 'vec2']: r#263
[#433 'vec3']: r#263
[#433 'vec4']: r#263
[#433 '~']: r#263
[#433 /0[xX][0-9a-fA-F]+[iu]?/]: r#263
[#434 '!']: r#264
[#434 '&']: r#264
[#434 '(']: r#264
[#434 '*']: r#264
[#434 '-']: r#264
[#434 'array']: r#264
[#434 'atomic']: r#264
[#434 'bitcast']: r#264
[#434 'bool']: r#264
[#434 'f16']: r#264
[#434 'f32']: r#264
[#434 'false']: r#264
[#434 'i32']: r#264
[#434 'mat2x2']: r#264
[#434 'mat2x3']: r#264
[#434 'mat2x4']: r#264
[#434 'mat3x2']: r#264
[#434 'mat3x3']: r#264
[#434 'mat3x4']: r#264
[#434 'mat4x2']: r#264
[#434 'mat4x3']: r#264
[#434 'mat4x4']: r#264
[#434 'ptr']: r#264
[#434 'sampler']: r#264
[#434 'sampler_comparison']: r#264
[#434 'texture_1d']: r#264
[#434 'texture_2d']: r#264
[#434 'texture_2d_array']: r#264
[#434 'texture_3d']: r#264
[#434 'texture_cube']: r#264
[#434 'texture_cube_array']: r#264
[#434 'texture_depth_2d']: r#264
[#434 'texture_depth_2d_array']: r#264
[#434 'texture_depth_cube']: r#264
[#434 'texture_depth_cube_array']: r#264
[#434 'texture_depth_multisampled_2d']: r#264
[#434 'texture_multisampled_2d']: r#264
[#434 'texture_storage_1d']: r#264
[#434 'texture_storage_2d']: r#264
[#434 'texture_storage_2d_array']: r#264
[#434 'texture_storage_3d']: r#264
[#434 'true']: r#264
[#434 'u32']: r#264
[#434 'vec2']: r#264
[#434 'vec3']: r#264
[#434 'vec4']: r#264
[#434 '~']: r#264
[#434 /0[xX][0-9a-fA-F]+[iu]?/]: r#264
[#435 '!']: r#265
[#435 '&']: r#265
[#435 '(']: r#265
[#435 '*']: r#265
[#435 '-']: r#265
[#435 'array']: r#265
[#435 'atomic']: r#265
[#435 'bitcast']: r#265
[#435 'bool']: r#265
[#435 'f16']: r#265
[#435 'f32']: r#265
[#435 'false']: r#265
[#435 'i32']: r#265
[#435 'mat2x2']: r#265
[#435 'mat2x3']: r#265
[#435 'mat2x4']: r#265
[#435 'mat3x2']: r#265
[#435 'mat3x3']: r#265
[#435 'mat3x4']: r#265
[#435 'mat4x2']: r#265
[#435 'mat4x3']: r#265
[#435 'mat4x4']: r#265
[#435 'ptr']: r#265
[#435 'sampler']: r#265
[#435 'sampler_comparison']: r#265
[#435 'texture_1d']: r#265
[#435 'texture_2d']: r#265
[#435 'texture_2d_array']: r#265
[#435 'texture_3d']: r#265
[#435 'texture_cube']: r#265
[#435 'texture_cube_array']: r#265
[#435 'texture_depth_2d']: r#265
[#435 'texture_depth_2d_array']: r#265
[#435 'texture_depth_cube']: r#265
[#435 'texture_depth_cube_array']: r#265
[#435 'texture_depth_multisampled_2d']: r#265
[#435 'texture_multisampled_2d']: r#265
[#435 'texture_storage_1d']: r#265
[#435 'texture_storage_2d']: r#265
[#435 'texture_storage_2d_array']: r#265
[#435 'texture_storage_3d']: r#265
[#435 'true']: r#265
[#435 'u32']: r#265
[#435 'vec2']: r#265
[#435 'vec3']: r#265
[#435 'vec4']: r#265
[#435 '~']: r#265
[#435 /0[xX][0-9a-fA-F]+[iu]?/]: r#265
[#436 '!']: r#266
[#436 '&']: r#266
[#436 '(']: r#266
[#436 '*']: r#266
[#436 '-']: r#266
[#436 'array']: r#266
[#436 'atomic']: r#266
[#436 'bitcast']: r#266
[#436 'bool']: r#266
[#436 'f16']: r#266
[#436 'f32']: r#266
[#436 'false']: r#266
[#436 'i32']: r#266
[#436 'mat2x2']: r#266
[#436 'mat2x3']: r#266
[#436 'mat2x4']: r#266
[#436 'mat3x2']: r#266
[#436 'mat3x3']: r#266
[#436 'mat3x4']: r#266
[#436 'mat4x2']: r#266
[#436 'mat4x3']: r#266
[#436 'mat4x4']: r#266
[#436 'ptr']: r#266
[#436 'sampler']: r#266
[#436 'sampler_comparison']: r#266
[#436 'texture_1d']: r#266
[#436 'texture_2d']: r#266
[#436 'texture_2d_array']: r#266
[#436 'texture_3d']: r#266
[#436 'texture_cube']: r#266
[#436 'texture_cube_array']: r#266
[#436 'texture_depth_2d']: r#266
[#436 'texture_depth_2d_array']: r#266
[#436 'texture_depth_cube']: r#266
[#436 'texture_depth_cube_array']: r#266
[#436 'texture_depth_multisampled_2d']: r#266
[#436 'texture_multisampled_2d']: r#266
[#436 'texture_storage_1d']: r#266
[#436 'texture_storage_2d']: r#266
[#436 'texture_storage_2d_array']: r#266
[#436 'texture_storage_3d']: r#266
[#436 'true']: r#266
[#436 'u32']: r#266
[#436 'vec2']: r#266
[#436 'vec3']: r#266
[#436 'vec4']: r#266
[#436 '~']: r#266
[#436 /0[xX][0-9a-fA-F]+[iu]?/]: r#266
[#437 '!']: r#267
[#437 '&']: r#267
[#437 '(']: r#267
[#437 '*']: r#267
[#437 '-']: r#267
[#437 'array']: r#267
[#437 'atomic']: r#267
[#437 'bitcast']: r#267
[#437 'bool']: r#267
[#437 'f16']: r#267
[#437 'f32']: r#267
[#437 'false']: r#267
[#437 'i32']: r#267
[#437 'mat2x2']: r#267
[#437 'mat2x3']: r#267
[#437 'mat2x4']: r#267
[#437 'mat3x2']: r#267
[#437 'mat3x3']: r#267
[#437 'mat3x4']: r#267
[#437 'mat4x2']: r#267
[#437 'mat4x3']: r#267
[#437 'mat4x4']: r#267
[#437 'ptr']: r#267
[#437 'sampler']: r#267
[#437 'sampler_comparison']: r#267
[#437 'texture_1d']: r#267
[#437 'texture_2d']: r#267
[#437 'texture_2d_array']: r#267
[#437 'texture_3d']: r#267
[#437 'texture_cube']: r#267
[#437 'texture_cube_array']: r#267
[#437 'texture_depth_2d']: r#267
[#437 'texture_depth_2d_array']: r#267
[#437 'texture_depth_cube']: r#267
[#437 'texture_depth_cube_array']: r#267
[#437 'texture_depth_multisampled_2d']: r#267
[#437 'texture_multisampled_2d']: r#267
[#437 'texture_storage_1d']: r#267
[#437 'texture_storage_2d']: r#267
[#437 'texture_storage_2d_array']: r#267
[#437 'texture_storage_3d']: r#267
[#437 'true']: r#267
[#437 'u32']: r#267
[#437 'vec2']: r#267
[#437 'vec3']: r#267
[#437 'vec4']: r#267
[#437 '~']: r#267
[#437 /0[xX][0-9a-fA-F]+[iu]?/]: r#267
[#438 '!']: r#268
[#438 '&']: r#268
[#438 '(']: r#268
[#438 '*']: r#268
[#438 '-']: r#268
[#438 'array']: r#268
[#438 'atomic']: r#268
[#438 'bitcast']: r#268
[#438 'bool']: r#268
[#438 'f16']: r#268
[#438 'f32']: r#268
[#438 'false']: r#268
[#438 'i32']: r#268
[#438 'mat2x2']: r#268
[#438 'mat2x3']: r#268
[#438 'mat2x4']: r#268
[#438 'mat3x2']: r#268
[#438 'mat3x3']: r#268
[#438 'mat3x4']: r#268
[#438 'mat4x2']: r#268
[#438 'mat4x3']: r#268
[#438 'mat4x4']: r#268
[#438 'ptr']: r#268
[#438 'sampler']: r#268
[#438 'sampler_comparison']: r#268
[#438 'texture_1d']: r#268
[#438 'texture_2d']: r#268
[#438 'texture_2d_array']: r#268
[#438 'texture_3d']: r#268
[#438 'texture_cube']: r#268
[#438 'texture_cube_array']: r#268
[#438 'texture_depth_2d']: r#268
[#438 'texture_depth_2d_array']: r#268
[#438 'texture_depth_cube']: r#268
[#438 'texture_depth_cube_array']: r#268
[#438 'texture_depth_multisampled_2d']: r#268
[#438 'texture_multisampled_2d']: r#268
[#438 'texture_storage_1d']: r#268
[#438 'texture_storage_2d']: r#268
[#438 'texture_storage_2d_array']: r#268
[#438 'texture_storage_3d']: r#268
[#438 'true']: r#268
[#438 'u32']: r#268
[#438 'vec2']: r#268
[#438 'vec3']: r#268
[#438 'vec4']: r#268
[#438 '~']: r#268
[#438 /0[xX][0-9a-fA-F]+[iu]?/]: r#268
[#439 '!']: r#269
[#439 '&']: r#269
[#439 '(']: r#269
[#439 '*']: r#269
[#439 '-']: r#269
[#439 'array']: r#269
[#439 'atomic']: r#269
[#439 'bitcast']: r#269
[#439 'bool']: r#269
[#439 'f16']: r#269
[#439 'f32']: r#269
[#439 'false']: r#269
[#439 'i32']: r#269
[#439 'mat2x2']: r#269
[#439 'mat2x3']: r#269
[#439 'mat2x4']: r#269
[#439 'mat3x2']: r#269
[#439 'mat3x3']: r#269
[#439 'mat3x4']: r#269
[#439 'mat4x2']: r#269
[#439 'mat4x3']: r#269
[#439 'mat4x4']: r#269
[#439 'ptr']: r#269
[#439 'sampler']: r#269
[#439 'sampler_comparison']: r#269
[#439 'texture_1d']: r#269
[#439 'texture_2d']: r#269
[#439 'texture_2d_array']: r#269
[#439 'texture_3d']: r#269
[#439 'texture_cube']: r#269
[#439 'texture_cube_array']: r#269
[#439 'texture_depth_2d']: r#269
[#439 'texture_depth_2d_array']: r#269
[#439 'texture_depth_cube']: r#269
[#439 'texture_depth_cube_array']: r#269
[#439 'texture_depth_multisampled_2d']: r#269
[#439 'texture_multisampled_2d']: r#269
[#439 'texture_storage_1d']: r#269
[#439 'texture_storage_2d']: r#269
[#439 'texture_storage_2d_array']: r#269
[#439 'texture_storage_3d']: r#269
[#439 'true']: r#269
[#439 'u32']: r#269
[#439 'vec2']: r#269
[#439 'vec3']: r#269
[#439 'vec4']: r#269
[#439 '~']: r#269
[#439 /0[xX][0-9a-fA-F]+[iu]?/]: r#269
[#440 '!']: r#270
[#440 '&']: r#270
[#440 '(']: r#270
[#440 '*']: r#270
[#440 '-']: r#270
[#440 'array']: r#270
[#440 'atomic']: r#270
[#440 'bitcast']: r#270
[#440 'bool']: r#270
[#440 'f16']: r#270
[#440 'f32']: r#270
[#440 'false']: r#270
[#440 'i32']: r#270
[#440 'mat2x2']: r#270
[#440 'mat2x3']: r#270
[#440 'mat2x4']: r#270
[#440 'mat3x2']: r#270
[#440 'mat3x3']: r#270
[#440 'mat3x4']: r#270
[#440 'mat4x2']: r#270
[#440 'mat4x3']: r#270
[#440 'mat4x4']: r#270
[#440 'ptr']: r#270
[#440 'sampler']: r#270
[#440 'sampler_comparison']: r#270
[#440 'texture_1d']: r#270
[#440 'texture_2d']: r#270
[#440 'texture_2d_array']: r#270
[#440 'texture_3d']: r#270
[#440 'texture_cube']: r#270
[#440 'texture_cube_array']: r#270
[#440 'texture_depth_2d']: r#270
[#440 'texture_depth_2d_array']: r#270
[#440 'texture_depth_cube']: r#270
[#440 'texture_depth_cube_array']: r#270
[#440 'texture_depth_multisampled_2d']: r#270
[#440 'texture_multisampled_2d']: r#270
[#440 'texture_storage_1d']: r#270
[#440 'texture_storage_2d']: r#270
[#440 'texture_storage_2d_array']: r#270
[#440 'texture_storage_3d']: r#270
[#440 'true']: r#270
[#440 'u32']: r#270
[#440 'vec2']: r#270
[#440 'vec3']: r#270
[#440 'vec4']: r#270
[#440 '~']: r#270
[#440 /0[xX][0-9a-fA-F]+[iu]?/]: r#270
[#441 '!']: r#271
[#441 '&']: r#271
[#441 '(']: r#271
[#441 '*']: r#271
[#441 '-']: r#271
[#441 'array']: r#271
[#441 'atomic']: r#271
[#441 'bitcast']: r#271
[#441 'bool']: r#271
[#441 'f16']: r#271
[#441 'f32']: r#271
[#441 'false']: r#271
[#441 'i32']: r#271
[#441 'mat2x2']: r#271
[#441 'mat2x3']: r#271
[#441 'mat2x4']: r#271
[#441 'mat3x2']: r#271
[#441 'mat3x3']: r#271
[#441 'mat3x4']: r#271
[#441 'mat4x2']: r#271
[#441 'mat4x3']: r#271
[#441 'mat4x4']: r#271
[#441 'ptr']: r#271
[#441 'sampler']: r#271
[#441 'sampler_comparison']: r#271
[#441 'texture_1d']: r#271
[#441 'texture_2d']: r#271
[#441 'texture_2d_array']: r#271
[#441 'texture_3d']: r#271
[#441 'texture_cube']: r#271
[#441 'texture_cube_array']: r#271
[#441 'texture_depth_2d']: r#271
[#441 'texture_depth_2d_array']: r#271
[#441 'texture_depth_cube']: r#271
[#441 'texture_depth_cube_array']: r#271
[#441 'texture_depth_multisampled_2d']: r#271
[#441 'texture_multisampled_2d']: r#271
[#441 'texture_storage_1d']: r#271
[#441 'texture_storage_2d']: r#271
[#441 'texture_storage_2d_array']: r#271
[#441 'texture_storage_3d']: r#271
[#441 'true']: r#271
[#441 'u32']: r#271
[#441 'vec2']: r#271
[#441 'vec3']: r#271
[#441 'vec4']: r#271
[#441 '~']: r#271
[#441 /0[xX][0-9a-fA-F]+[iu]?/]: r#271
[#442 '!']: r#272
[#442 '&']: r#272
[#442 '(']: r#272
[#442 '*']: r#272
[#442 '-']: r#272
[#442 'array']: r#272
[#442 'atomic']: r#272
[#442 'bitcast']: r#272
[#442 'bool']: r#272
[#442 'f16']: r#272
[#442 'f32']: r#272
[#442 'false']: r#272
[#442 'i32']: r#272
[#442 'mat2x2']: r#272
[#442 'mat2x3']: r#272
[#442 'mat2x4']: r#272
[#442 'mat3x2']: r#272
[#442 'mat3x3']: r#272
[#442 'mat3x4']: r#272
[#442 'mat4x2']: r#272
[#442 'mat4x3']: r#272
[#442 'mat4x4']: r#272
[#442 'ptr']: r#272
[#442 'sampler']: r#272
[#442 'sampler_comparison']: r#272
[#442 'texture_1d']: r#272
[#442 'texture_2d']: r#272
[#442 'texture_2d_array']: r#272
[#442 'texture_3d']: r#272
[#442 'texture_cube']: r#272
[#442 'texture_cube_array']: r#272
[#442 'texture_depth_2d']: r#272
[#442 'texture_depth_2d_array']: r#272
[#442 'texture_depth_cube']: r#272
[#442 'texture_depth_cube_array']: r#272
[#442 'texture_depth_multisampled_2d']: r#272
[#442 'texture_multisampled_2d']: r#272
[#442 'texture_storage_1d']: r#272
[#442 'texture_storage_2d']: r#272
[#442 'texture_storage_2d_array']: r#272
[#442 'texture_storage_3d']: r#272
[#442 'true']: r#272
[#442 'u32']: r#272
[#442 'vec2']: r#272
[#442 'vec3']: r#272
[#442 'vec4']: r#272
[#442 '~']: r#272
[#442 /0[xX][0-9a-fA-F]+[iu]?/]: r#272
[#443 '!']: r#273
[#443 '&']: r#273
[#443 '(']: r#273
[#443 '*']: r#273
[#443 '-']: r#273
[#443 'array']: r#273
[#443 'atomic']: r#273
[#443 'bitcast']: r#273
[#443 'bool']: r#273
[#443 'f16']: r#273
[#443 'f32']: r#273
[#443 'false']: r#273
[#443 'i32']: r#273
[#443 'mat2x2']: r#273
[#443 'mat2x3']: r#273
[#443 'mat2x4']: r#273
[#443 'mat3x2']: r#273
[#443 'mat3x3']: r#273
[#443 'mat3x4']: r#273
[#443 'mat4x2']: r#273
[#443 'mat4x3']: r#273
[#443 'mat4x4']: r#273
[#443 'ptr']: r#273
[#443 'sampler']: r#273
[#443 'sampler_comparison']: r#273
[#443 'texture_1d']: r#273
[#443 'texture_2d']: r#273
[#443 'texture_2d_array']: r#273
[#443 'texture_3d']: r#273
[#443 'texture_cube']: r#273
[#443 'texture_cube_array']: r#273
[#443 'texture_depth_2d']: r#273
[#443 'texture_depth_2d_array']: r#273
[#443 'texture_depth_cube']: r#273
[#443 'texture_depth_cube_array']: r#273
[#443 'texture_depth_multisampled_2d']: r#273
[#443 'texture_multisampled_2d']: r#273
[#443 'texture_storage_1d']: r#273
[#443 'texture_storage_2d']: r#273
[#443 'texture_storage_2d_array']: r#273
[#443 'texture_storage_3d']: r#273
[#443 'true']: r#273
[#443 'u32']: r#273
[#443 'vec2']: r#273
[#443 'vec3']: r#273
[#443 'vec4']: r#273
[#443 '~']: r#273
[#443 /0[xX][0-9a-fA-F]+[iu]?/]: r#273
[#444 '!']: r#274
[#444 '&']: r#274
[#444 '(']: r#274
[#444 '*']: r#274
[#444 '-']: r#274
[#444 'array']: r#274
[#444 'atomic']: r#274
[#444 'bitcast']: r#274
[#444 'bool']: r#274
[#444 'f16']: r#274
[#444 'f32']: r#274
[#444 'false']: r#274
[#444 'i32']: r#274
[#444 'mat2x2']: r#274
[#444 'mat2x3']: r#274
[#444 'mat2x4']: r#274
[#444 'mat3x2']: r#274
[#444 'mat3x3']: r#274
[#444 'mat3x4']: r#274
[#444 'mat4x2']: r#274
[#444 'mat4x3']: r#274
[#444 'mat4x4']: r#274
[#444 'ptr']: r#274
[#444 'sampler']: r#274
[#444 'sampler_comparison']: r#274
[#444 'texture_1d']: r#274
[#444 'texture_2d']: r#274
[#444 'texture_2d_array']: r#274
[#444 'texture_3d']: r#274
[#444 'texture_cube']: r#274
[#444 'texture_cube_array']: r#274
[#444 'texture_depth_2d']: r#274
[#444 'texture_depth_2d_array']: r#274
[#444 'texture_depth_cube']: r#274
[#444 'texture_depth_cube_array']: r#274
[#444 'texture_depth_multisampled_2d']: r#274
[#444 'texture_multisampled_2d']: r#274
[#444 'texture_storage_1d']: r#274
[#444 'texture_storage_2d']: r#274
[#444 'texture_storage_2d_array']: r#274
[#444 'texture_storage_3d']: r#274
[#444 'true']: r#274
[#444 'u32']: r#274
[#444 'vec2']: r#274
[#444 'vec3']: r#274
[#444 'vec4']: r#274
[#444 '~']: r#274
[#444 /0[xX][0-9a-fA-F]+[iu]?/]: r#274
[#445 '!']: r#275
[#445 '&']: r#275
[#445 '(']: r#275
[#445 '*']: r#275
[#445 '-']: r#275
[#445 'array']: r#275
[#445 'atomic']: r#275
[#445 'bitcast']: r#275
[#445 'bool']: r#275
[#445 'f16']: r#275
[#445 'f32']: r#275
[#445 'false']: r#275
[#445 'i32']: r#275
[#445 'mat2x2']: r#275
[#445 'mat2x3']: r#275
[#445 'mat2x4']: r#275
[#445 'mat3x2']: r#275
[#445 'mat3x3']: r#275
[#445 'mat3x4']: r#275
[#445 'mat4x2']: r#275
[#445 'mat4x3']: r#275
[#445 'mat4x4']: r#275
[#445 'ptr']: r#275
[#445 'sampler']: r#275
[#445 'sampler_comparison']: r#275
[#445 'texture_1d']: r#275
[#445 'texture_2d']: r#275
[#445 'texture_2d_array']: r#275
[#445 'texture_3d']: r#275
[#445 'texture_cube']: r#275
[#445 'texture_cube_array']: r#275
[#445 'texture_depth_2d']: r#275
[#445 'texture_depth_2d_array']: r#275
[#445 'texture_depth_cube']: r#275
[#445 'texture_depth_cube_array']: r#275
[#445 'texture_depth_multisampled_2d']: r#275
[#445 'texture_multisampled_2d']: r#275
[#445 'texture_storage_1d']: r#275
[#445 'texture_storage_2d']: r#275
[#445 'texture_storage_2d_array']: r#275
[#445 'texture_storage_3d']: r#275
[#445 'true']: r#275
[#445 'u32']: r#275
[#445 'vec2']: r#275
[#445 'vec3']: r#275
[#445 'vec4']: r#275
[#445 '~']: r#275
[#445 /0[xX][0-9a-fA-F]+[iu]?/]: r#275
[#446 '!']: r#276
[#446 '&']: r#276
[#446 '(']: r#276
[#446 '*']: r#276
[#446 '-']: r#276
[#446 'array']: r#276
[#446 'atomic']: r#276
[#446 'bitcast']: r#276
[#446 'bool']: r#276
[#446 'f16']: r#276
[#446 'f32']: r#276
[#446 'false']: r#276
[#446 'i32']: r#276
[#446 'mat2x2']: r#276
[#446 'mat2x3']: r#276
[#446 'mat2x4']: r#276
[#446 'mat3x2']: r#276
[#446 'mat3x3']: r#276
[#446 'mat3x4']: r#276
[#446 'mat4x2']: r#276
[#446 'mat4x3']: r#276
[#446 'mat4x4']: r#276
[#446 'ptr']: r#276
[#446 'sampler']: r#276
[#446 'sampler_comparison']: r#276
[#446 'texture_1d']: r#276
[#446 'texture_2d']: r#276
[#446 'texture_2d_array']: r#276
[#446 'texture_3d']: r#276
[#446 'texture_cube']: r#276
[#446 'texture_cube_array']: r#276
[#446 'texture_depth_2d']: r#276
[#446 'texture_depth_2d_array']: r#276
[#446 'texture_depth_cube']: r#276
[#446 'texture_depth_cube_array']: r#276
[#446 'texture_depth_multisampled_2d']: r#276
[#446 'texture_multisampled_2d']: r#276
[#446 'texture_storage_1d']: r#276
[#446 'texture_storage_2d']: r#276
[#446 'texture_storage_2d_array']: r#276
[#446 'texture_storage_3d']: r#276
[#446 'true']: r#276
[#446 'u32']: r#276
[#446 'vec2']: r#276
[#446 'vec3']: r#276
[#446 'vec4']: r#276
[#446 '~']: r#276
[#446 /0[xX][0-9a-fA-F]+[iu]?/]: r#276
[#447 '!']: r#277
[#447 '&']: r#277
[#447 '(']: r#277
[#447 '*']: r#277
[#447 '-']: r#277
[#447 'array']: r#277
[#447 'atomic']: r#277
[#447 'bitcast']: r#277
[#447 'bool']: r#277
[#447 'f16']: r#277
[#447 'f32']: r#277
[#447 'false']: r#277
[#447 'i32']: r#277
[#447 'mat2x2']: r#277
[#447 'mat2x3']: r#277
[#447 'mat2x4']: r#277
[#447 'mat3x2']: r#277
[#447 'mat3x3']: r#277
[#447 'mat3x4']: r#277
[#447 'mat4x2']: r#277
[#447 'mat4x3']: r#277
[#447 'mat4x4']: r#277
[#447 'ptr']: r#277
[#447 'sampler']: r#277
[#447 'sampler_comparison']: r#277
[#447 'texture_1d']: r#277
[#447 'texture_2d']: r#277
[#447 'texture_2d_array']: r#277
[#447 'texture_3d']: r#277
[#447 'texture_cube']: r#277
[#447 'texture_cube_array']: r#277
[#447 'texture_depth_2d']: r#277
[#447 'texture_depth_2d_array']: r#277
[#447 'texture_depth_cube']: r#277
[#447 'texture_depth_cube_array']: r#277
[#447 'texture_depth_multisampled_2d']: r#277
[#447 'texture_multisampled_2d']: r#277
[#447 'texture_storage_1d']: r#277
[#447 'texture_storage_2d']: r#277
[#447 'texture_storage_2d_array']: r#277
[#447 'texture_storage_3d']: r#277
[#447 'true']: r#277
[#447 'u32']: r#277
[#447 'vec2']: r#277
[#447 'vec3']: r#277
[#447 'vec4']: r#277
[#447 '~']: r#277
[#447 /0[xX][0-9a-fA-F]+[iu]?/]: r#277
[#448 '!']: r#278
[#448 '&']: r#278
[#448 '(']: r#278
[#448 '*']: r#278
[#448 '-']: r#278
[#448 'array']: r#278
[#448 'atomic']: r#278
[#448 'bitcast']: r#278
[#448 'bool']: r#278
[#448 'f16']: r#278
[#448 'f32']: r#278
[#448 'false']: r#278
[#448 'i32']: r#278
[#448 'mat2x2']: r#278
[#448 'mat2x3']: r#278
[#448 'mat2x4']: r#278
[#448 'mat3x2']: r#278
[#448 'mat3x3']: r#278
[#448 'mat3x4']: r#278
[#448 'mat4x2']: r#278
[#448 'mat4x3']: r#278
[#448 'mat4x4']: r#278
[#448 'ptr']: r#278
[#448 'sampler']: r#278
[#448 'sampler_comparison']: r#278
[#448 'texture_1d']: r#278
[#448 'texture_2d']: r#278
[#448 'texture_2d_array']: r#278
[#448 'texture_3d']: r#278
[#448 'texture_cube']: r#278
[#448 'texture_cube_array']: r#278
[#448 'texture_depth_2d']: r#278
[#448 'texture_depth_2d_array']: r#278
[#448 'texture_depth_cube']: r#278
[#448 'texture_depth_cube_array']: r#278
[#448 'texture_depth_multisampled_2d']: r#278
[#448 'texture_multisampled_2d']: r#278
[#448 'texture_storage_1d']: r#278
[#448 'texture_storage_2d']: r#278
[#448 'texture_storage_2d_array']: r#278
[#448 'texture_storage_3d']: r#278
[#448 'true']: r#278
[#448 'u32']: r#278
[#448 'vec2']: r#278
[#448 'vec3']: r#278
[#448 'vec4']: r#278
[#448 '~']: r#278
[#448 /0[xX][0-9a-fA-F]+[iu]?/]: r#278
[#449 '!']: r#279
[#449 '&']: r#279
[#449 '(']: r#279
[#449 '*']: r#279
[#449 '-']: r#279
[#449 'array']: r#279
[#449 'atomic']: r#279
[#449 'bitcast']: r#279
[#449 'bool']: r#279
[#449 'f16']: r#279
[#449 'f32']: r#279
[#449 'false']: r#279
[#449 'i32']: r#279
[#449 'mat2x2']: r#279
[#449 'mat2x3']: r#279
[#449 'mat2x4']: r#279
[#449 'mat3x2']: r#279
[#449 'mat3x3']: r#279
[#449 'mat3x4']: r#279
[#449 'mat4x2']: r#279
[#449 'mat4x3']: r#279
[#449 'mat4x4']: r#279
[#449 'ptr']: r#279
[#449 'sampler']: r#279
[#449 'sampler_comparison']: r#279
[#449 'texture_1d']: r#279
[#449 'texture_2d']: r#279
[#449 'texture_2d_array']: r#279
[#449 'texture_3d']: r#279
[#449 'texture_cube']: r#279
[#449 'texture_cube_array']: r#279
[#449 'texture_depth_2d']: r#279
[#449 'texture_depth_2d_array']: r#279
[#449 'texture_depth_cube']: r#279
[#449 'texture_depth_cube_array']: r#279
[#449 'texture_depth_multisampled_2d']: r#279
[#449 'texture_multisampled_2d']: r#279
[#449 'texture_storage_1d']: r#279
[#449 'texture_storage_2d']: r#279
[#449 'texture_storage_2d_array']: r#279
[#449 'texture_storage_3d']: r#279
[#449 'true']: r#279
[#449 'u32']: r#279
[#449 'vec2']: r#279
[#449 'vec3']: r#279
[#449 'vec4']: r#279
[#449 '~']: r#279
[#449 /0[xX][0-9a-fA-F]+[iu]?/]: r#279
[#450 '!']: r#280
[#450 '&']: r#280
[#450 '(']: r#280
[#450 '*']: r#280
[#450 '-']: r#280
[#450 'array']: r#280
[#450 'atomic']: r#280
[#450 'bitcast']: r#280
[#450 'bool']: r#280
[#450 'f16']: r#280
[#450 'f32']: r#280
[#450 'false']: r#280
[#450 'i32']: r#280
[#450 'mat2x2']: r#280
[#450 'mat2x3']: r#280
[#450 'mat2x4']: r#280
[#450 'mat3x2']: r#280
[#450 'mat3x3']: r#280
[#450 'mat3x4']: r#280
[#450 'mat4x2']: r#280
[#450 'mat4x3']: r#280
[#450 'mat4x4']: r#280
[#450 'ptr']: r#280
[#450 'sampler']: r#280
[#450 'sampler_comparison']: r#280
[#450 'texture_1d']: r#280
[#450 'texture_2d']: r#280
[#450 'texture_2d_array']: r#280
[#450 'texture_3d']: r#280
[#450 'texture_cube']: r#280
[#450 'texture_cube_array']: r#280
[#450 'texture_depth_2d']: r#280
[#450 'texture_depth_2d_array']: r#280
[#450 'texture_depth_cube']: r#280
[#450 'texture_depth_cube_array']: r#280
[#450 'texture_depth_multisampled_2d']: r#280
[#450 'texture_multisampled_2d']: r#280
[#450 'texture_storage_1d']: r#280
[#450 'texture_storage_2d']: r#280
[#450 'texture_storage_2d_array']: r#280
[#450 'texture_storage_3d']: r#280
[#450 'true']: r#280
[#450 'u32']: r#280
[#450 'vec2']: r#280
[#450 'vec3']: r#280
[#450 'vec4']: r#280
[#450 '~']: r#280
[#450 /0[xX][0-9a-fA-F]+[iu]?/]: r#280
[#451 '{']: s#185
[#452 '=']: s#176
[#453 '=']: s#176
[#454 '!']: s#70
[#454 '&']: s#73
[#454 '(']: s#115
[#454 '*']: s#72
[#454 '-']: s#69
[#454 'array']: s#83
[#454 'atomic']: s#95
[#454 'bitcast']: s#78
[#454 'bool']: s#88
[#454 'f16']: s#117
[#454 'f32']: s#116
[#454 'false']: s#114
[#454 'i32']: s#118
[#454 'mat2x2']: s#100
[#454 'mat2x3']: s#101
[#454 'mat2x4']: s#102
[#454 'mat3x2']: s#103
[#454 'mat3x3']: s#104
[#454 'mat3x4']: s#105
[#454 'mat4x2']: s#106
[#454 'mat4x3']: s#107
[#454 'mat4x4']: s#108
[#454 'ptr']: s#120
[#454 'sampler']: s#137
[#454 'sampler_comparison']: s#138
[#454 'texture_1d']: s#144
[#454 'texture_2d']: s#145
[#454 'texture_2d_array']: s#146
[#454 'texture_3d']: s#147
[#454 'texture_cube']: s#148
[#454 'texture_cube_array']: s#149
[#454 'texture_depth_2d']: s#139
[#454 'texture_depth_2d_array']: s#140
[#454 'texture_depth_cube']: s#141
[#454 'texture_depth_cube_array']: s#142
[#454 'texture_depth_multisampled_2d']: s#143
[#454 'texture_multisampled_2d']: s#150
[#454 'texture_storage_1d']: s#151
[#454 'texture_storage_2d']: s#152
[#454 'texture_storage_2d_array']: s#153
[#454 'texture_storage_3d']: s#154
[#454 'true']: s#113
[#454 'u32']: s#119
[#454 'vec2']: s#97
[#454 'vec3']: s#98
[#454 'vec4']: s#99
[#454 '~']: s#71
[#454 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#454 /0[fh]/]: s#129
[#454 /0[iu]?/]: s#126
[#454 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#454 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#454 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#454 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#454 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#454 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#454 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#454 /[1-9][0-9]*[fh]/]: s#130
[#454 /[1-9][0-9]*[iu]?/]: s#127
[#455 ')']: r#281
[#455 ';']: r#281
[#456 '{']: s#185
[#457 '&']: s#73
[#457 '(']: s#115
[#457 '*']: s#72
[#457 '_']: s#386
[#457 'const']: s#374
[#457 'let']: s#373
[#457 'var']: s#163
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#458 '&']: s#73
[#458 '(']: s#115
[#458 '*']: s#72
[#458 ';']: s#19
[#458 '_']: s#386
[#458 'break']: s#375
[#458 'const']: s#374
[#458 'continue']: s#376
[#458 'discard']: s#361
[#458 'for']: s#369
[#458 'if']: s#380
[#458 'let']: s#373
[#458 'loop']: s#368
[#458 'return']: s#365
[#458 'static_assert']: s#26
[#458 'switch']: s#367
[#458 'var']: s#163
[#458 'while']: s#370
[#458 '{']: s#185
[#458 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#459 '{']: s#185
[#460 'else']: s#538
[#461 '&']: r#282
[#461 '(']: r#282
[#461 '*']: r#282
[#461 ';']: r#282
[#461 '_']: r#282
[#461 'break']: r#282
[#461 'const']: r#282
[#461 'continue']: r#282
[#461 'continuing']: r#282
[#461 'discard']: r#282
[#461 'else']: r#282
[#461 'for']: r#282
[#461 'if']: r#282
[#461 'let']: r#282
[#461 'loop']: r#282
[#461 'return']: r#282
[#461 'static_assert']: r#282
[#461 'switch']: r#282
[#461 'var']: r#282
[#461 'while']: r#282
[#461 '{']: r#282
[#461 '}']: r#282
[#461 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#282
[#462 'else']: s#463
[#463 'if']: s#534
[#464 ';']: r#283
[#465 ';']: r#284
[#466 '&']: r#285
[#466 '(']: r#285
[#466 '*']: r#285
[#466 ';']: r#285
[#466 '_']: r#285
[#466 'break']: r#285
[#466 'const']: r#285
[#466 'continue']: r#285
[#466 'continuing']: r#285
[#466 'discard']: r#285
[#466 'for']: r#285
[#466 'if']: r#285
[#466 'let']: r#285
[#466 'loop']: r#285
[#466 'return']: r#285
[#466 'static_assert']: r#285
[#466 'switch']: r#285
[#466 'var']: r#285
[#466 'while']: r#285
[#466 '{']: r#285
[#466 '}']: r#285
[#466 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#285
[#467 '&']: r#286
[#467 '(']: r#286
[#467 '*']: r#286
[#467 ';']: r#286
[#467 '_']: r#286
[#467 'break']: r#286
[#467 'const']: r#286
[#467 'continue']: r#286
[#467 'continuing']: r#286
[#467 'discard']: r#286
[#467 'for']: r#286
[#467 'if']: r#286
[#467 'let']: r#286
[#467 'loop']: r#286
[#467 'return']: r#286
[#467 'static_assert']: r#286
[#467 'switch']: r#286
[#467 'var']: r#286
[#467 'while']: r#286
[#467 '{']: r#286
[#467 '}']: r#286
[#467 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#286
[#468 '&']: r#287
[#468 '(']: r#287
[#468 '*']: r#287
[#468 ';']: r#287
[#468 '_']: r#287
[#468 'break']: r#287
[#468 'const']: r#287
[#468 'continue']: r#287
[#468 'continuing']: r#287
[#468 'discard']: r#287
[#468 'for']: r#287
[#468 'if']: r#287
[#468 'let']: r#287
[#468 'loop']: r#287
[#468 'return']: r#287
[#468 'static_assert']: r#287
[#468 'switch']: r#287
[#468 'var']: r#287
[#468 'while']: r#287
[#468 '{']: r#287
[#468 '}']: r#287
[#468 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#287
[#469 '&']: r#288
[#469 '(']: r#288
[#469 '*']: r#288
[#469 ';']: r#288
[#469 '_']: r#288
[#469 'break']: r#288
[#469 'const']: r#288
[#469 'continue']: r#288
[#469 'continuing']: r#288
[#469 'discard']: r#288
[#469 'for']: r#288
[#469 'if']: r#288
[#469 'let']: r#288
[#469 'loop']: r#288
[#469 'return']: r#288
[#469 'static_assert']: r#288
[#469 'switch']: r#288
[#469 'var']: r#288
[#469 'while']: r#288
[#469 '{']: r#288
[#469 '}']: r#288
[#469 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#288
[#470 '&']: r#289
[#470 '(']: r#289
[#470 '*']: r#289
[#470 ';']: r#289
[#470 '_']: r#289
[#470 'break']: r#289
[#470 'const']: r#289
[#470 'continue']: r#289
[#470 'continuing']: r#289
[#470 'discard']: r#289
[#470 'for']: r#289
[#470 'if']: r#289
[#470 'let']: r#289
[#470 'loop']: r#289
[#470 'return']: r#289
[#470 'static_assert']: r#289
[#470 'switch']: r#289
[#470 'var']: r#289
[#470 'while']: r#289
[#470 '{']: r#289
[#470 '}']: r#289
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#471 '&']: r#290
[#471 '(']: r#290
[#471 '*']: r#290
[#471 ';']: r#290
[#471 '_']: r#290
[#471 'break']: r#290
[#471 'const']: r#290
[#471 'continue']: r#290
[#471 'continuing']: r#290
[#471 'discard']: r#290
[#471 'for']: r#290
[#471 'if']: r#290
[#471 'let']: r#290
[#471 'loop']: r#290
[#471 'return']: r#290
[#471 'static_assert']: r#290
[#471 'switch']: r#290
[#471 'var']: r#290
[#471 'while']: r#290
[#471 '{']: r#290
[#471 '}']: r#290
[#471 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#290
[#472 '&']: r#291
[#472 '(']: r#291
[#472 '*']: r#291
[#472 ';']: r#291
[#472 '_']: r#291
[#472 'break']: r#291
[#472 'const']: r#291
[#472 'continue']: r#291
[#472 'continuing']: r#291
[#472 'discard']: r#291
[#472 'for']: r#291
[#472 'if']: r#291
[#472 'let']: r#291
[#472 'loop']: r#291
[#472 'return']: r#291
[#472 'static_assert']: r#291
[#472 'switch']: r#291
[#472 'var']: r#291
[#472 'while']: r#291
[#472 '{']: r#291
[#472 '}']: r#291
[#472 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#473 '&']: r#292
[#473 '(']: r#292
[#473 '*']: r#292
[#473 ';']: r#292
[#473 '_']: r#292
[#473 'break']: r#292
[#473 'const']: r#292
[#473 'continue']: r#292
[#473 'continuing']: r#292
[#473 'discard']: r#292
[#473 'for']: r#292
[#473 'if']: r#292
[#473 'let']: r#292
[#473 'loop']: r#292
[#473 'return']: r#292
[#473 'static_assert']: r#292
[#473 'switch']: r#292
[#473 'var']: r#292
[#473 'while']: r#292
[#473 '{']: r#292
[#473 '}']: r#292
[#473 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#474 '}']: r#293
[#475 '&']: r#294
[#475 '(']: r#294
[#475 '*']: r#294
[#475 ';']: r#294
[#475 '@']: r#294
[#475 '_']: r#294
[#475 'break']: r#294
[#475 'case']: r#294
[#475 'const']: r#294
[#475 'continue']: r#294
[#475 'continuing']: r#294
[#475 'default']: r#294
[#475 'discard']: r#294
[#475 'else']: r#294
[#475 'fn']: r#294
[#475 'for']: r#294
[#475 'if']: r#294
[#475 'let']: r#294
[#475 'loop']: r#294
[#475 'override']: r#294
[#475 'return']: r#294
[#475 'static_assert']: r#294
[#475 'struct']: r#294
[#475 'switch']: r#294
[#475 'type']: r#294
[#475 'var']: r#294
[#475 'while']: r#294
[#475 '{']: r#294
[#475 '}']: r#294
[#475 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#475 EndOfText]: r#294
[#476 '&']: r#295
[#476 '(']: r#295
[#476 '*']: r#295
[#476 ';']: r#295
[#476 '@']: r#295
[#476 '_']: r#295
[#476 'break']: r#295
[#476 'case']: r#295
[#476 'const']: r#295
[#476 'continue']: r#295
[#476 'continuing']: r#295
[#476 'default']: r#295
[#476 'discard']: r#295
[#476 'else']: r#295
[#476 'fn']: r#295
[#476 'for']: r#295
[#476 'if']: r#295
[#476 'let']: r#295
[#476 'loop']: r#295
[#476 'override']: r#295
[#476 'return']: r#295
[#476 'static_assert']: r#295
[#476 'struct']: r#295
[#476 'switch']: r#295
[#476 'type']: r#295
[#476 'var']: r#295
[#476 'while']: r#295
[#476 '{']: r#295
[#476 '}']: r#295
[#476 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#476 EndOfText]: r#295
[#477 'read']: s#531
[#477 'read_write']: s#533
[#477 'write']: s#532
[#478 '(']: r#296
[#478 ')']: r#296
[#478 ',']: r#296
[#478 ';']: r#296
[#478 '=']: r#296
[#478 '>']: r#296
[#478 '{']: r#296
[#478 '}']: r#296
[#479 '(']: r#297
[#479 ')']: r#297
[#479 ',']: r#297
[#479 ';']: r#297
[#479 '=']: r#297
[#479 '>']: r#297
[#479 '{']: r#297
[#479 '}']: r#297
[#480 '(']: r#298
[#480 ')']: r#298
[#480 ',']: r#298
[#480 ';']: r#298
[#480 '=']: r#298
[#480 '>']: r#298
[#480 '{']: r#298
[#480 '}']: r#298
[#481 'array']: s#315
[#481 'atomic']: s#95
[#481 'bool']: s#88
[#481 'f16']: s#117
[#481 'f32']: s#116
[#481 'i32']: s#118
[#481 'mat2x2']: s#100
[#481 'mat2x3']: s#101
[#481 'mat2x4']: s#102
[#481 'mat3x2']: s#103
[#481 'mat3x3']: s#104
[#481 'mat3x4']: s#105
[#481 'mat4x2']: s#106
[#481 'mat4x3']: s#107
[#481 'mat4x4']: s#108
[#481 'ptr']: s#120
[#481 'sampler']: s#137
[#481 'sampler_comparison']: s#138
[#481 'texture_1d']: s#144
[#481 'texture_2d']: s#145
[#481 'texture_2d_array']: s#146
[#481 'texture_3d']: s#147
[#481 'texture_cube']: s#148
[#481 'texture_cube_array']: s#149
[#481 'texture_depth_2d']: s#139
[#481 'texture_depth_2d_array']: s#140
[#481 'texture_depth_cube']: s#141
[#481 'texture_depth_cube_array']: s#142
[#481 'texture_depth_multisampled_2d']: s#143
[#481 'texture_multisampled_2d']: s#150
[#481 'texture_storage_1d']: s#151
[#481 'texture_storage_2d']: s#152
[#481 'texture_storage_2d_array']: s#153
[#481 'texture_storage_3d']: s#154
[#481 'u32']: s#119
[#481 'vec2']: s#97
[#481 'vec3']: s#98
[#481 'vec4']: s#99
[#481 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#482 '>']: s#237
[#483 '!']: s#70
[#483 '&']: s#73
[#483 '(']: s#115
[#483 '*']: s#72
[#483 '-']: s#69
[#483 'array']: s#83
[#483 'atomic']: s#95
[#483 'bitcast']: s#78
[#483 'bool']: s#88
[#483 'f16']: s#117
[#483 'f32']: s#116
[#483 'false']: s#114
[#483 'i32']: s#118
[#483 'mat2x2']: s#100
[#483 'mat2x3']: s#101
[#483 'mat2x4']: s#102
[#483 'mat3x2']: s#103
[#483 'mat3x3']: s#104
[#483 'mat3x4']: s#105
[#483 'mat4x2']: s#106
[#483 'mat4x3']: s#107
[#483 'mat4x4']: s#108
[#483 'ptr']: s#120
[#483 'sampler']: s#137
[#483 'sampler_comparison']: s#138
[#483 'texture_1d']: s#144
[#483 'texture_2d']: s#145
[#483 'texture_2d_array']: s#146
[#483 'texture_3d']: s#147
[#483 'texture_cube']: s#148
[#483 'texture_cube_array']: s#149
[#483 'texture_depth_2d']: s#139
[#483 'texture_depth_2d_array']: s#140
[#483 'texture_depth_cube']: s#141
[#483 'texture_depth_cube_array']: s#142
[#483 'texture_depth_multisampled_2d']: s#143
[#483 'texture_multisampled_2d']: s#150
[#483 'texture_storage_1d']: s#151
[#483 'texture_storage_2d']: s#152
[#483 'texture_storage_2d_array']: s#153
[#483 'texture_storage_3d']: s#154
[#483 'true']: s#113
[#483 'u32']: s#119
[#483 'vec2']: s#97
[#483 'vec3']: s#98
[#483 'vec4']: s#99
[#483 '~']: s#71
[#483 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#483 /0[fh]/]: s#129
[#483 /0[iu]?/]: s#126
[#483 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#483 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#483 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#483 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#483 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#483 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#483 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#483 /[1-9][0-9]*[fh]/]: s#130
[#483 /[1-9][0-9]*[iu]?/]: s#127
[#484 '(']: r#299
[#484 ')']: r#299
[#484 ',']: r#299
[#484 ';']: r#299
[#484 '=']: r#299
[#484 '>']: r#299
[#484 '{']: r#299
[#484 '}']: r#299
[#485 '(']: r#300
[#485 ')']: r#300
[#485 ',']: r#300
[#485 ';']: r#300
[#485 '=']: r#300
[#485 '>']: r#300
[#485 '{']: r#300
[#485 '}']: r#300
[#486 '(']: s#115
[#487 ',']: s#403
[#488 ')']: r#301
[#488 ',']: r#301
[#489 ',']: s#403
[#490 '!']: s#70
[#490 '&']: s#73
[#490 '(']: s#115
[#490 '*']: s#72
[#490 '-']: s#69
[#490 'array']: s#83
[#490 'atomic']: s#95
[#490 'bitcast']: s#78
[#490 'bool']: s#88
[#490 'f16']: s#117
[#490 'f32']: s#116
[#490 'false']: s#114
[#490 'i32']: s#118
[#490 'mat2x2']: s#100
[#490 'mat2x3']: s#101
[#490 'mat2x4']: s#102
[#490 'mat3x2']: s#103
[#490 'mat3x3']: s#104
[#490 'mat3x4']: s#105
[#490 'mat4x2']: s#106
[#490 'mat4x3']: s#107
[#490 'mat4x4']: s#108
[#490 'ptr']: s#120
[#490 'sampler']: s#137
[#490 'sampler_comparison']: s#138
[#490 'texture_1d']: s#144
[#490 'texture_2d']: s#145
[#490 'texture_2d_array']: s#146
[#490 'texture_3d']: s#147
[#490 'texture_cube']: s#148
[#490 'texture_cube_array']: s#149
[#490 'texture_depth_2d']: s#139
[#490 'texture_depth_2d_array']: s#140
[#490 'texture_depth_cube']: s#141
[#490 'texture_depth_cube_array']: s#142
[#490 'texture_depth_multisampled_2d']: s#143
[#490 'texture_multisampled_2d']: s#150
[#490 'texture_storage_1d']: s#151
[#490 'texture_storage_2d']: s#152
[#490 'texture_storage_2d_array']: s#153
[#490 'texture_storage_3d']: s#154
[#490 'true']: s#113
[#490 'u32']: s#119
[#490 'vec2']: s#97
[#490 'vec3']: s#98
[#490 'vec4']: s#99
[#490 '~']: s#71
[#490 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#490 /0[fh]/]: s#129
[#490 /0[iu]?/]: s#126
[#490 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#490 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#490 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#490 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#490 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#490 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#490 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#490 /[1-9][0-9]*[fh]/]: s#130
[#490 /[1-9][0-9]*[iu]?/]: s#127
[#491 '!=']: r#302
[#491 '%']: r#302
[#491 '&&']: r#302
[#491 '&']: r#302
[#491 ')']: r#302
[#491 '*']: r#302
[#491 '+']: r#302
[#491 ',']: r#302
[#491 '-']: r#302
[#491 '.']: r#302
[#491 '/']: r#302
[#491 ':']: r#302
[#491 ';']: r#302
[#491 '<']: r#302
[#491 '<<']: r#302
[#491 '<=']: r#302
[#491 '==']: r#302
[#491 '>']: r#302
[#491 '>=']: r#302
[#491 '>>']: r#302
[#491 '[']: r#302
[#491 ']']: r#302
[#491 '^']: r#302
[#491 '{']: r#302
[#491 '|']: r#302
[#491 '||']: r#302
[#492 '.']: s#206
[#492 '[']: s#205
[#493 '!=']: r#303
[#493 '%']: r#303
[#493 '%=']: r#303
[#493 '&&']: r#303
[#493 '&']: r#303
[#493 '&=']: r#303
[#493 ')']: r#303
[#493 '*']: r#303
[#493 '*=']: r#303
[#493 '+']: r#303
[#493 '++']: r#303
[#493 '+=']: r#303
[#493 ',']: r#303
[#493 '-']: r#303
[#493 '--']: r#303
[#493 '-=']: r#303
[#493 '.']: r#303
[#493 '/']: r#303
[#493 '/=']: r#303
[#493 ':']: r#303
[#493 ';']: r#303
[#493 '<']: r#303
[#493 '<<']: r#303
[#493 '<<=']: r#303
[#493 '<=']: r#303
[#493 '=']: r#303
[#493 '==']: r#303
[#493 '>']: r#303
[#493 '>=']: r#303
[#493 '>>']: r#303
[#493 '>>=']: r#303
[#493 '[']: r#303
[#493 ']']: r#303
[#493 '^']: r#303
[#493 '^=']: r#303
[#493 '{']: r#303
[#493 '|']: r#303
[#493 '|=']: r#303
[#493 '||']: r#303
[#494 '!=']: r#304
[#494 '%']: r#304
[#494 '%=']: r#304
[#494 '&&']: r#304
[#494 '&']: r#304
[#494 '&=']: r#304
[#494 ')']: r#304
[#494 '*']: r#304
[#494 '*=']: r#304
[#494 '+']: r#304
[#494 '++']: r#304
[#494 '+=']: r#304
[#494 ',']: r#304
[#494 '-']: r#304
[#494 '--']: r#304
[#494 '-=']: r#304
[#494 '/']: r#304
[#494 '/=']: r#304
[#494 ':']: r#304
[#494 ';']: r#304
[#494 '<']: r#304
[#494 '<<']: r#304
[#494 '<<=']: r#304
[#494 '<=']: r#304
[#494 '=']: r#304
[#494 '==']: r#304
[#494 '>']: r#304
[#494 '>=']: r#304
[#494 '>>']: r#304
[#494 '>>=']: r#304
[#494 ']']: r#304
[#494 '^']: r#304
[#494 '^=']: r#304
[#494 '{']: r#304
[#494 '|']: r#304
[#494 '|=']: r#304
[#494 '||']: r#304
[#495 '!=']: r#305
[#495 '%']: r#305
[#495 '%=']: r#305
[#495 '&&']: r#305
[#495 '&']: r#305
[#495 '&=']: r#305
[#495 ')']: r#305
[#495 '*']: r#305
[#495 '*=']: r#305
[#495 '+']: r#305
[#495 '++']: r#305
[#495 '+=']: r#305
[#495 ',']: r#305
[#495 '-']: r#305
[#495 '--']: r#305
[#495 '-=']: r#305
[#495 '/']: r#305
[#495 '/=']: r#305
[#495 ':']: r#305
[#495 ';']: r#305
[#495 '<']: r#305
[#495 '<<']: r#305
[#495 '<<=']: r#305
[#495 '<=']: r#305
[#495 '=']: r#305
[#495 '==']: r#305
[#495 '>']: r#305
[#495 '>=']: r#305
[#495 '>>']: r#305
[#495 '>>=']: r#305
[#495 ']']: r#305
[#495 '^']: r#305
[#495 '^=']: r#305
[#495 '{']: r#305
[#495 '|']: r#305
[#495 '|=']: r#305
[#495 '||']: r#305
[#496 '!=']: r#306
[#496 '%']: r#306
[#496 '%=']: r#306
[#496 '&&']: r#306
[#496 '&']: r#306
[#496 '&=']: r#306
[#496 ')']: r#306
[#496 '*']: r#306
[#496 '*=']: r#306
[#496 '+']: r#306
[#496 '++']: r#306
[#496 '+=']: r#306
[#496 ',']: r#306
[#496 '-']: r#306
[#496 '--']: r#306
[#496 '-=']: r#306
[#496 '/']: r#306
[#496 '/=']: r#306
[#496 ':']: r#306
[#496 ';']: r#306
[#496 '<']: r#306
[#496 '<<']: r#306
[#496 '<<=']: r#306
[#496 '<=']: r#306
[#496 '=']: r#306
[#496 '==']: r#306
[#496 '>']: r#306
[#496 '>=']: r#306
[#496 '>>']: r#306
[#496 '>>=']: r#306
[#496 ']']: r#306
[#496 '^']: r#306
[#496 '^=']: r#306
[#496 '{']: r#306
[#496 '|']: r#306
[#496 '|=']: r#306
[#496 '||']: r#306
[#497 '!=']: r#307
[#497 '%']: r#307
[#497 '%=']: r#307
[#497 '&&']: r#307
[#497 '&']: r#307
[#497 '&=']: r#307
[#497 ')']: r#307
[#497 '*']: r#307
[#497 '*=']: r#307
[#497 '+']: r#307
[#497 '++']: r#307
[#497 '+=']: r#307
[#497 ',']: r#307
[#497 '-']: r#307
[#497 '--']: r#307
[#497 '-=']: r#307
[#497 '/']: r#307
[#497 '/=']: r#307
[#497 ':']: r#307
[#497 ';']: r#307
[#497 '<']: r#307
[#497 '<<']: r#307
[#497 '<<=']: r#307
[#497 '<=']: r#307
[#497 '=']: r#307
[#497 '==']: r#307
[#497 '>']: r#307
[#497 '>=']: r#307
[#497 '>>']: r#307
[#497 '>>=']: r#307
[#497 ']']: r#307
[#497 '^']: r#307
[#497 '^=']: r#307
[#497 '{']: r#307
[#497 '|']: r#307
[#497 '|=']: r#307
[#497 '||']: r#307
[#498 '@']: r#308
[#498 'array']: r#308
[#498 'atomic']: r#308
[#498 'bool']: r#308
[#498 'f16']: r#308
[#498 'f32']: r#308
[#498 'fn']: r#308
[#498 'i32']: r#308
[#498 'mat2x2']: r#308
[#498 'mat2x3']: r#308
[#498 'mat2x4']: r#308
[#498 'mat3x2']: r#308
[#498 'mat3x3']: r#308
[#498 'mat3x4']: r#308
[#498 'mat4x2']: r#308
[#498 'mat4x3']: r#308
[#498 'mat4x4']: r#308
[#498 'override']: r#308
[#498 'ptr']: r#308
[#498 'sampler']: r#308
[#498 'sampler_comparison']: r#308
[#498 'texture_1d']: r#308
[#498 'texture_2d']: r#308
[#498 'texture_2d_array']: r#308
[#498 'texture_3d']: r#308
[#498 'texture_cube']: r#308
[#498 'texture_cube_array']: r#308
[#498 'texture_depth_2d']: r#308
[#498 'texture_depth_2d_array']: r#308
[#498 'texture_depth_cube']: r#308
[#498 'texture_depth_cube_array']: r#308
[#498 'texture_depth_multisampled_2d']: r#308
[#498 'texture_multisampled_2d']: r#308
[#498 'texture_storage_1d']: r#308
[#498 'texture_storage_2d']: r#308
[#498 'texture_storage_2d_array']: r#308
[#498 'texture_storage_3d']: r#308
[#498 'u32']: r#308
[#498 'var']: r#308
[#498 'vec2']: r#308
[#498 'vec3']: r#308
[#498 'vec4']: r#308
[#499 '!']: s#70
[#499 '&']: s#73
[#499 '(']: s#115
[#499 ')']: r#309
[#499 '*']: s#72
[#499 '-']: s#69
[#499 'array']: s#83
[#499 'atomic']: s#95
[#499 'bitcast']: s#78
[#499 'bool']: s#88
[#499 'f16']: s#117
[#499 'f32']: s#116
[#499 'false']: s#114
[#499 'i32']: s#118
[#499 'mat2x2']: s#100
[#499 'mat2x3']: s#101
[#499 'mat2x4']: s#102
[#499 'mat3x2']: s#103
[#499 'mat3x3']: s#104
[#499 'mat3x4']: s#105
[#499 'mat4x2']: s#106
[#499 'mat4x3']: s#107
[#499 'mat4x4']: s#108
[#499 'ptr']: s#120
[#499 'sampler']: s#137
[#499 'sampler_comparison']: s#138
[#499 'texture_1d']: s#144
[#499 'texture_2d']: s#145
[#499 'texture_2d_array']: s#146
[#499 'texture_3d']: s#147
[#499 'texture_cube']: s#148
[#499 'texture_cube_array']: s#149
[#499 'texture_depth_2d']: s#139
[#499 'texture_depth_2d_array']: s#140
[#499 'texture_depth_cube']: s#141
[#499 'texture_depth_cube_array']: s#142
[#499 'texture_depth_multisampled_2d']: s#143
[#499 'texture_multisampled_2d']: s#150
[#499 'texture_storage_1d']: s#151
[#499 'texture_storage_2d']: s#152
[#499 'texture_storage_2d_array']: s#153
[#499 'texture_storage_3d']: s#154
[#499 'true']: s#113
[#499 'u32']: s#119
[#499 'vec2']: s#97
[#499 'vec3']: s#98
[#499 'vec4']: s#99
[#499 '~']: s#71
[#499 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#499 /0[fh]/]: s#129
[#499 /0[iu]?/]: s#126
[#499 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#499 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#499 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#499 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#499 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#499 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#499 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#499 /[1-9][0-9]*[fh]/]: s#130
[#499 /[1-9][0-9]*[iu]?/]: s#127
[#500 ')']: s#320
[#501 '@']: r#310
[#501 'array']: r#310
[#501 'atomic']: r#310
[#501 'bool']: r#310
[#501 'f16']: r#310
[#501 'f32']: r#310
[#501 'fn']: r#310
[#501 'i32']: r#310
[#501 'mat2x2']: r#310
[#501 'mat2x3']: r#310
[#501 'mat2x4']: r#310
[#501 'mat3x2']: r#310
[#501 'mat3x3']: r#310
[#501 'mat3x4']: r#310
[#501 'mat4x2']: r#310
[#501 'mat4x3']: r#310
[#501 'mat4x4']: r#310
[#501 'override']: r#310
[#501 'ptr']: r#310
[#501 'sampler']: r#310
[#501 'sampler_comparison']: r#310
[#501 'texture_1d']: r#310
[#501 'texture_2d']: r#310
[#501 'texture_2d_array']: r#310
[#501 'texture_3d']: r#310
[#501 'texture_cube']: r#310
[#501 'texture_cube_array']: r#310
[#501 'texture_depth_2d']: r#310
[#501 'texture_depth_2d_array']: r#310
[#501 'texture_depth_cube']: r#310
[#501 'texture_depth_cube_array']: r#310
[#501 'texture_depth_multisampled_2d']: r#310
[#501 'texture_multisampled_2d']: r#310
[#501 'texture_storage_1d']: r#310
[#501 'texture_storage_2d']: r#310
[#501 'texture_storage_2d_array']: r#310
[#501 'texture_storage_3d']: r#310
[#501 'u32']: r#310
[#501 'var']: r#310
[#501 'vec2']: r#310
[#501 'vec3']: r#310
[#501 'vec4']: r#310
[#502 ')']: r#309
[#503 '@']: r#311
[#503 'array']: r#311
[#503 'atomic']: r#311
[#503 'bool']: r#311
[#503 'f16']: r#311
[#503 'f32']: r#311
[#503 'fn']: r#311
[#503 'i32']: r#311
[#503 'mat2x2']: r#311
[#503 'mat2x3']: r#311
[#503 'mat2x4']: r#311
[#503 'mat3x2']: r#311
[#503 'mat3x3']: r#311
[#503 'mat3x4']: r#311
[#503 'mat4x2']: r#311
[#503 'mat4x3']: r#311
[#503 'mat4x4']: r#311
[#503 'override']: r#311
[#503 'ptr']: r#311
[#503 'sampler']: r#311
[#503 'sampler_comparison']: r#311
[#503 'texture_1d']: r#311
[#503 'texture_2d']: r#311
[#503 'texture_2d_array']: r#311
[#503 'texture_3d']: r#311
[#503 'texture_cube']: r#311
[#503 'texture_cube_array']: r#311
[#503 'texture_depth_2d']: r#311
[#503 'texture_depth_2d_array']: r#311
[#503 'texture_depth_cube']: r#311
[#503 'texture_depth_cube_array']: r#311
[#503 'texture_depth_multisampled_2d']: r#311
[#503 'texture_multisampled_2d']: r#311
[#503 'texture_storage_1d']: r#311
[#503 'texture_storage_2d']: r#311
[#503 'texture_storage_2d_array']: r#311
[#503 'texture_storage_3d']: r#311
[#503 'u32']: r#311
[#503 'var']: r#311
[#503 'vec2']: r#311
[#503 'vec3']: r#311
[#503 'vec4']: r#311
[#504 '@']: r#312
[#504 'array']: r#312
[#504 'atomic']: r#312
[#504 'bool']: r#312
[#504 'f16']: r#312
[#504 'f32']: r#312
[#504 'fn']: r#312
[#504 'i32']: r#312
[#504 'mat2x2']: r#312
[#504 'mat2x3']: r#312
[#504 'mat2x4']: r#312
[#504 'mat3x2']: r#312
[#504 'mat3x3']: r#312
[#504 'mat3x4']: r#312
[#504 'mat4x2']: r#312
[#504 'mat4x3']: r#312
[#504 'mat4x4']: r#312
[#504 'override']: r#312
[#504 'ptr']: r#312
[#504 'sampler']: r#312
[#504 'sampler_comparison']: r#312
[#504 'texture_1d']: r#312
[#504 'texture_2d']: r#312
[#504 'texture_2d_array']: r#312
[#504 'texture_3d']: r#312
[#504 'texture_cube']: r#312
[#504 'texture_cube_array']: r#312
[#504 'texture_depth_2d']: r#312
[#504 'texture_depth_2d_array']: r#312
[#504 'texture_depth_cube']: r#312
[#504 'texture_depth_cube_array']: r#312
[#504 'texture_depth_multisampled_2d']: r#312
[#504 'texture_multisampled_2d']: r#312
[#504 'texture_storage_1d']: r#312
[#504 'texture_storage_2d']: r#312
[#504 'texture_storage_2d_array']: r#312
[#504 'texture_storage_3d']: r#312
[#504 'u32']: r#312
[#504 'var']: r#312
[#504 'vec2']: r#312
[#504 'vec3']: r#312
[#504 'vec4']: r#312
[#505 ')']: r#309
[#505 'center']: s#512
[#505 'centroid']: s#513
[#505 'sample']: s#514
[#506 '@']: r#313
[#506 'array']: r#313
[#506 'atomic']: r#313
[#506 'bool']: r#313
[#506 'f16']: r#313
[#506 'f32']: r#313
[#506 'fn']: r#313
[#506 'i32']: r#313
[#506 'mat2x2']: r#313
[#506 'mat2x3']: r#313
[#506 'mat2x4']: r#313
[#506 'mat3x2']: r#313
[#506 'mat3x3']: r#313
[#506 'mat3x4']: r#313
[#506 'mat4x2']: r#313
[#506 'mat4x3']: r#313
[#506 'mat4x4']: r#313
[#506 'override']: r#313
[#506 'ptr']: r#313
[#506 'sampler']: r#313
[#506 'sampler_comparison']: r#313
[#506 'texture_1d']: r#313
[#506 'texture_2d']: r#313
[#506 'texture_2d_array']: r#313
[#506 'texture_3d']: r#313
[#506 'texture_cube']: r#313
[#506 'texture_cube_array']: r#313
[#506 'texture_depth_2d']: r#313
[#506 'texture_depth_2d_array']: r#313
[#506 'texture_depth_cube']: r#313
[#506 'texture_depth_cube_array']: r#313
[#506 'texture_depth_multisampled_2d']: r#313
[#506 'texture_multisampled_2d']: r#313
[#506 'texture_storage_1d']: r#313
[#506 'texture_storage_2d']: r#313
[#506 'texture_storage_2d_array']: r#313
[#506 'texture_storage_3d']: r#313
[#506 'u32']: r#313
[#506 'var']: r#313
[#506 'vec2']: r#313
[#506 'vec3']: r#313
[#506 'vec4']: r#313
[#507 '@']: r#314
[#507 'array']: r#314
[#507 'atomic']: r#314
[#507 'bool']: r#314
[#507 'f16']: r#314
[#507 'f32']: r#314
[#507 'fn']: r#314
[#507 'i32']: r#314
[#507 'mat2x2']: r#314
[#507 'mat2x3']: r#314
[#507 'mat2x4']: r#314
[#507 'mat3x2']: r#314
[#507 'mat3x3']: r#314
[#507 'mat3x4']: r#314
[#507 'mat4x2']: r#314
[#507 'mat4x3']: r#314
[#507 'mat4x4']: r#314
[#507 'override']: r#314
[#507 'ptr']: r#314
[#507 'sampler']: r#314
[#507 'sampler_comparison']: r#314
[#507 'texture_1d']: r#314
[#507 'texture_2d']: r#314
[#507 'texture_2d_array']: r#314
[#507 'texture_3d']: r#314
[#507 'texture_cube']: r#314
[#507 'texture_cube_array']: r#314
[#507 'texture_depth_2d']: r#314
[#507 'texture_depth_2d_array']: r#314
[#507 'texture_depth_cube']: r#314
[#507 'texture_depth_cube_array']: r#314
[#507 'texture_depth_multisampled_2d']: r#314
[#507 'texture_multisampled_2d']: r#314
[#507 'texture_storage_1d']: r#314
[#507 'texture_storage_2d']: r#314
[#507 'texture_storage_2d_array']: r#314
[#507 'texture_storage_3d']: r#314
[#507 'u32']: r#314
[#507 'var']: r#314
[#507 'vec2']: r#314
[#507 'vec3']: r#314
[#507 'vec4']: r#314
[#508 '@']: r#315
[#508 'array']: r#315
[#508 'atomic']: r#315
[#508 'bool']: r#315
[#508 'f16']: r#315
[#508 'f32']: r#315
[#508 'fn']: r#315
[#508 'i32']: r#315
[#508 'mat2x2']: r#315
[#508 'mat2x3']: r#315
[#508 'mat2x4']: r#315
[#508 'mat3x2']: r#315
[#508 'mat3x3']: r#315
[#508 'mat3x4']: r#315
[#508 'mat4x2']: r#315
[#508 'mat4x3']: r#315
[#508 'mat4x4']: r#315
[#508 'override']: r#315
[#508 'ptr']: r#315
[#508 'sampler']: r#315
[#508 'sampler_comparison']: r#315
[#508 'texture_1d']: r#315
[#508 'texture_2d']: r#315
[#508 'texture_2d_array']: r#315
[#508 'texture_3d']: r#315
[#508 'texture_cube']: r#315
[#508 'texture_cube_array']: r#315
[#508 'texture_depth_2d']: r#315
[#508 'texture_depth_2d_array']: r#315
[#508 'texture_depth_cube']: r#315
[#508 'texture_depth_cube_array']: r#315
[#508 'texture_depth_multisampled_2d']: r#315
[#508 'texture_multisampled_2d']: r#315
[#508 'texture_storage_1d']: r#315
[#508 'texture_storage_2d']: r#315
[#508 'texture_storage_2d_array']: r#315
[#508 'texture_storage_3d']: r#315
[#508 'u32']: r#315
[#508 'var']: r#315
[#508 'vec2']: r#315
[#508 'vec3']: r#315
[#508 'vec4']: r#315
[#509 '@']: r#316
[#509 'array']: r#316
[#509 'atomic']: r#316
[#509 'bool']: r#316
[#509 'f16']: r#316
[#509 'f32']: r#316
[#509 'fn']: r#316
[#509 'i32']: r#316
[#509 'mat2x2']: r#316
[#509 'mat2x3']: r#316
[#509 'mat2x4']: r#316
[#509 'mat3x2']: r#316
[#509 'mat3x3']: r#316
[#509 'mat3x4']: r#316
[#509 'mat4x2']: r#316
[#509 'mat4x3']: r#316
[#509 'mat4x4']: r#316
[#509 'override']: r#316
[#509 'ptr']: r#316
[#509 'sampler']: r#316
[#509 'sampler_comparison']: r#316
[#509 'texture_1d']: r#316
[#509 'texture_2d']: r#316
[#509 'texture_2d_array']: r#316
[#509 'texture_3d']: r#316
[#509 'texture_cube']: r#316
[#509 'texture_cube_array']: r#316
[#509 'texture_depth_2d']: r#316
[#509 'texture_depth_2d_array']: r#316
[#509 'texture_depth_cube']: r#316
[#509 'texture_depth_cube_array']: r#316
[#509 'texture_depth_multisampled_2d']: r#316
[#509 'texture_multisampled_2d']: r#316
[#509 'texture_storage_1d']: r#316
[#509 'texture_storage_2d']: r#316
[#509 'texture_storage_2d_array']: r#316
[#509 'texture_storage_3d']: r#316
[#509 'u32']: r#316
[#509 'var']: r#316
[#509 'vec2']: r#316
[#509 'vec3']: r#316
[#509 'vec4']: r#316
[#510 '@']: r#317
[#510 'array']: r#317
[#510 'atomic']: r#317
[#510 'bool']: r#317
[#510 'f16']: r#317
[#510 'f32']: r#317
[#510 'fn']: r#317
[#510 'i32']: r#317
[#510 'mat2x2']: r#317
[#510 'mat2x3']: r#317
[#510 'mat2x4']: r#317
[#510 'mat3x2']: r#317
[#510 'mat3x3']: r#317
[#510 'mat3x4']: r#317
[#510 'mat4x2']: r#317
[#510 'mat4x3']: r#317
[#510 'mat4x4']: r#317
[#510 'override']: r#317
[#510 'ptr']: r#317
[#510 'sampler']: r#317
[#510 'sampler_comparison']: r#317
[#510 'texture_1d']: r#317
[#510 'texture_2d']: r#317
[#510 'texture_2d_array']: r#317
[#510 'texture_3d']: r#317
[#510 'texture_cube']: r#317
[#510 'texture_cube_array']: r#317
[#510 'texture_depth_2d']: r#317
[#510 'texture_depth_2d_array']: r#317
[#510 'texture_depth_cube']: r#317
[#510 'texture_depth_cube_array']: r#317
[#510 'texture_depth_multisampled_2d']: r#317
[#510 'texture_multisampled_2d']: r#317
[#510 'texture_storage_1d']: r#317
[#510 'texture_storage_2d']: r#317
[#510 'texture_storage_2d_array']: r#317
[#510 'texture_storage_3d']: r#317
[#510 'u32']: r#317
[#510 'var']: r#317
[#510 'vec2']: r#317
[#510 'vec3']: r#317
[#510 'vec4']: r#317
[#511 ',']: s#403
[#512 ')']: r#318
[#512 ',']: r#318
[#513 ')']: r#319
[#513 ',']: r#319
[#514 ')']: r#320
[#514 ',']: r#320
[#515 '@']: r#321
[#515 'array']: r#321
[#515 'atomic']: r#321
[#515 'bool']: r#321
[#515 'f16']: r#321
[#515 'f32']: r#321
[#515 'fn']: r#321
[#515 'i32']: r#321
[#515 'mat2x2']: r#321
[#515 'mat2x3']: r#321
[#515 'mat2x4']: r#321
[#515 'mat3x2']: r#321
[#515 'mat3x3']: r#321
[#515 'mat3x4']: r#321
[#515 'mat4x2']: r#321
[#515 'mat4x3']: r#321
[#515 'mat4x4']: r#321
[#515 'override']: r#321
[#515 'ptr']: r#321
[#515 'sampler']: r#321
[#515 'sampler_comparison']: r#321
[#515 'texture_1d']: r#321
[#515 'texture_2d']: r#321
[#515 'texture_2d_array']: r#321
[#515 'texture_3d']: r#321
[#515 'texture_cube']: r#321
[#515 'texture_cube_array']: r#321
[#515 'texture_depth_2d']: r#321
[#515 'texture_depth_2d_array']: r#321
[#515 'texture_depth_cube']: r#321
[#515 'texture_depth_cube_array']: r#321
[#515 'texture_depth_multisampled_2d']: r#321
[#515 'texture_multisampled_2d']: r#321
[#515 'texture_storage_1d']: r#321
[#515 'texture_storage_2d']: r#321
[#515 'texture_storage_2d_array']: r#321
[#515 'texture_storage_3d']: r#321
[#515 'u32']: r#321
[#515 'var']: r#321
[#515 'vec2']: r#321
[#515 'vec3']: r#321
[#515 'vec4']: r#321
[#516 ',']: s#403
[#517 '!=']: r#322
[#517 '%']: r#322
[#517 '%=']: r#322
[#517 '&&']: r#322
[#517 '&']: r#322
[#517 '&=']: r#322
[#517 ')']: r#322
[#517 '*']: r#322
[#517 '*=']: r#322
[#517 '+']: r#322
[#517 '++']: r#322
[#517 '+=']: r#322
[#517 ',']: r#322
[#517 '-']: r#322
[#517 '--']: r#322
[#517 '-=']: r#322
[#517 '/']: r#322
[#517 '/=']: r#322
[#517 ':']: r#322
[#517 ';']: r#322
[#517 '<']: r#322
[#517 '<<']: r#322
[#517 '<<=']: r#322
[#517 '<=']: r#322
[#517 '=']: r#322
[#517 '==']: r#322
[#517 '>']: r#322
[#517 '>=']: r#322
[#517 '>>']: r#322
[#517 '>>=']: r#322
[#517 ']']: r#322
[#517 '^']: r#322
[#517 '^=']: r#322
[#517 '{']: r#322
[#517 '|']: r#322
[#517 '|=']: r#322
[#517 '||']: r#322
[#518 '!=']: r#323
[#518 '%']: r#323
[#518 '%=']: r#323
[#518 '&&']: r#323
[#518 '&']: r#323
[#518 '&=']: r#323
[#518 ')']: r#323
[#518 '*']: r#323
[#518 '*=']: r#323
[#518 '+']: r#323
[#518 '++']: r#323
[#518 '+=']: r#323
[#518 ',']: r#323
[#518 '-']: r#323
[#518 '--']: r#323
[#518 '-=']: r#323
[#518 '/']: r#323
[#518 '/=']: r#323
[#518 ':']: r#323
[#518 ';']: r#323
[#518 '<']: r#323
[#518 '<<']: r#323
[#518 '<<=']: r#323
[#518 '<=']: r#323
[#518 '=']: r#323
[#518 '==']: r#323
[#518 '>']: r#323
[#518 '>=']: r#323
[#518 '>>']: r#323
[#518 '>>=']: r#323
[#518 ']']: r#323
[#518 '^']: r#323
[#518 '^=']: r#323
[#518 '{']: r#323
[#518 '|']: r#323
[#518 '|=']: r#323
[#518 '||']: r#323
[#519 ')']: r#324
[#519 ',']: r#324
[#520 ')']: r#325
[#520 ',']: r#325
[#521 ')']: r#326
[#522 ')']: r#327
[#523 '!=']: r#328
[#523 '%']: r#328
[#523 '&&']: r#328
[#523 '&']: r#328
[#523 ')']: r#328
[#523 '*']: r#328
[#523 '+']: r#328
[#523 ',']: r#328
[#523 '-']: r#328
[#523 '.']: r#328
[#523 '/']: r#328
[#523 ':']: r#328
[#523 ';']: r#328
[#523 '<']: r#328
[#523 '<<']: r#328
[#523 '<=']: r#328
[#523 '==']: r#328
[#523 '>']: r#328
[#523 '>=']: r#328
[#523 '>>']: r#328
[#523 '[']: r#328
[#523 ']']: r#328
[#523 '^']: r#328
[#523 '{']: r#328
[#523 '|']: r#328
[#523 '||']: r#328
[#524 '>']: r#329
[#525 '+']: s#225
[#525 '-']: s#69
[#525 '>']: r#330
[#526 '>']: r#331
[#527 '%']: r#31
[#527 '&']: r#28
[#527 '*']: r#31
[#527 '+']: r#31
[#527 '-']: r#31
[#527 '/']: r#31
[#527 '>']: r#31
[#527 '^']: r#30
[#527 '|']: r#29
[#528 '(']: r#332
[#528 ')']: r#332
[#528 ',']: r#332
[#528 ';']: r#332
[#528 '=']: r#332
[#528 '>']: r#332
[#528 '{']: r#332
[#528 '}']: r#332
[#529 ',']: s#403
[#530 '>']: s#237
[#531 '>']: r#333
[#532 '>']: r#334
[#533 '>']: r#335
[#534 '!']: s#70
[#534 '&']: s#73
[#534 '(']: s#115
[#534 '*']: s#72
[#534 '-']: s#69
[#534 'array']: s#83
[#534 'atomic']: s#95
[#534 'bitcast']: s#78
[#534 'bool']: s#88
[#534 'f16']: s#117
[#534 'f32']: s#116
[#534 'false']: s#114
[#534 'i32']: s#118
[#534 'mat2x2']: s#100
[#534 'mat2x3']: s#101
[#534 'mat2x4']: s#102
[#534 'mat3x2']: s#103
[#534 'mat3x3']: s#104
[#534 'mat3x4']: s#105
[#534 'mat4x2']: s#106
[#534 'mat4x3']: s#107
[#534 'mat4x4']: s#108
[#534 'ptr']: s#120
[#534 'sampler']: s#137
[#534 'sampler_comparison']: s#138
[#534 'texture_1d']: s#144
[#534 'texture_2d']: s#145
[#534 'texture_2d_array']: s#146
[#534 'texture_3d']: s#147
[#534 'texture_cube']: s#148
[#534 'texture_cube_array']: s#149
[#534 'texture_depth_2d']: s#139
[#534 'texture_depth_2d_array']: s#140
[#534 'texture_depth_cube']: s#141
[#534 'texture_depth_cube_array']: s#142
[#534 'texture_depth_multisampled_2d']: s#143
[#534 'texture_multisampled_2d']: s#150
[#534 'texture_storage_1d']: s#151
[#534 'texture_storage_2d']: s#152
[#534 'texture_storage_2d_array']: s#153
[#534 'texture_storage_3d']: s#154
[#534 'true']: s#113
[#534 'u32']: s#119
[#534 'vec2']: s#97
[#534 'vec3']: s#98
[#534 'vec4']: s#99
[#534 '~']: s#71
[#534 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#534 /0[fh]/]: s#129
[#534 /0[iu]?/]: s#126
[#534 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#534 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#534 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#534 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#534 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#534 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#534 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#534 /[1-9][0-9]*[fh]/]: s#130
[#534 /[1-9][0-9]*[iu]?/]: s#127
[#535 '&']: r#336
[#535 '(']: r#336
[#535 '*']: r#336
[#535 ';']: r#336
[#535 '_']: r#336
[#535 'break']: r#336
[#535 'const']: r#336
[#535 'continue']: r#336
[#535 'continuing']: r#336
[#535 'discard']: r#336
[#535 'else']: r#336
[#535 'for']: r#336
[#535 'if']: r#336
[#535 'let']: r#336
[#535 'loop']: r#336
[#535 'return']: r#336
[#535 'static_assert']: r#336
[#535 'switch']: r#336
[#535 'var']: r#336
[#535 'while']: r#336
[#535 '{']: r#336
[#535 '}']: r#336
[#535 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#336
[#536 '&']: r#337
[#536 '(']: r#337
[#536 '*']: r#337
[#536 ';']: r#337
[#536 '_']: r#337
[#536 'break']: r#337
[#536 'const']: r#337
[#536 'continue']: r#337
[#536 'continuing']: r#337
[#536 'discard']: r#337
[#536 'for']: r#337
[#536 'if']: r#337
[#536 'let']: r#337
[#536 'loop']: r#337
[#536 'return']: r#337
[#536 'static_assert']: r#337
[#536 'switch']: r#337
[#536 'var']: r#337
[#536 'while']: r#337
[#536 '{']: r#337
[#536 '}']: r#337
[#536 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#337
[#537 '&']: r#338
[#537 '(']: r#338
[#537 '*']: r#338
[#537 ';']: r#338
[#537 '_']: r#338
[#537 'break']: r#338
[#537 'const']: r#338
[#537 'continue']: r#338
[#537 'continuing']: r#338
[#537 'discard']: r#338
[#537 'for']: r#338
[#537 'if']: r#338
[#537 'let']: r#338
[#537 'loop']: r#338
[#537 'return']: r#338
[#537 'static_assert']: r#338
[#537 'switch']: r#338
[#537 'var']: r#338
[#537 'while']: r#338
[#537 '{']: r#338
[#537 '}']: r#338
[#537 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#338
[#538 '{']: s#185
[#539 'case']: s#594
[#539 'default']: s#595
[#540 'continuing']: s#588
[#541 'continuing']: r#339
[#541 '}']: r#339
[#542 '&']: s#73
[#542 '(']: s#115
[#542 '*']: s#72
[#542 ';']: s#19
[#542 '_']: s#386
[#542 'break']: s#375
[#542 'const']: s#374
[#542 'continue']: s#376
[#542 'discard']: s#361
[#542 'for']: s#369
[#542 'if']: s#380
[#542 'let']: s#373
[#542 'loop']: s#368
[#542 'return']: s#365
[#542 'static_assert']: s#26
[#542 'switch']: s#367
[#542 'var']: s#163
[#542 'while']: s#370
[#542 '{']: s#185
[#542 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#543 ')']: s#320
[#544 ';']: s#19
[#545 ';']: r#340
[#546 ';']: r#341
[#547 ';']: r#342
[#548 ';']: r#343
[#549 '&']: r#344
[#549 '(']: r#344
[#549 '*']: r#344
[#549 ';']: r#344
[#549 '_']: r#344
[#549 'break']: r#344
[#549 'const']: r#344
[#549 'continue']: r#344
[#549 'continuing']: r#344
[#549 'discard']: r#344
[#549 'for']: r#344
[#549 'if']: r#344
[#549 'let']: r#344
[#549 'loop']: r#344
[#549 'return']: r#344
[#549 'static_assert']: r#344
[#549 'switch']: r#344
[#549 'var']: r#344
[#549 'while']: r#344
[#549 '{']: r#344
[#549 '}']: r#344
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#344
[#550 ';']: r#345
[#551 '!']: s#70
[#551 '&']: s#73
[#551 '(']: s#115
[#551 '*']: s#72
[#551 '-']: s#69
[#551 'array']: s#83
[#551 'atomic']: s#95
[#551 'bitcast']: s#78
[#551 'bool']: s#88
[#551 'f16']: s#117
[#551 'f32']: s#116
[#551 'false']: s#114
[#551 'i32']: s#118
[#551 'mat2x2']: s#100
[#551 'mat2x3']: s#101
[#551 'mat2x4']: s#102
[#551 'mat3x2']: s#103
[#551 'mat3x3']: s#104
[#551 'mat3x4']: s#105
[#551 'mat4x2']: s#106
[#551 'mat4x3']: s#107
[#551 'mat4x4']: s#108
[#551 'ptr']: s#120
[#551 'sampler']: s#137
[#551 'sampler_comparison']: s#138
[#551 'texture_1d']: s#144
[#551 'texture_2d']: s#145
[#551 'texture_2d_array']: s#146
[#551 'texture_3d']: s#147
[#551 'texture_cube']: s#148
[#551 'texture_cube_array']: s#149
[#551 'texture_depth_2d']: s#139
[#551 'texture_depth_2d_array']: s#140
[#551 'texture_depth_cube']: s#141
[#551 'texture_depth_cube_array']: s#142
[#551 'texture_depth_multisampled_2d']: s#143
[#551 'texture_multisampled_2d']: s#150
[#551 'texture_storage_1d']: s#151
[#551 'texture_storage_2d']: s#152
[#551 'texture_storage_2d_array']: s#153
[#551 'texture_storage_3d']: s#154
[#551 'true']: s#113
[#551 'u32']: s#119
[#551 'vec2']: s#97
[#551 'vec3']: s#98
[#551 'vec4']: s#99
[#551 '~']: s#71
[#551 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#551 /0[fh]/]: s#129
[#551 /0[iu]?/]: s#126
[#551 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#551 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#551 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#551 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#551 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#551 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#551 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#551 /[1-9][0-9]*[fh]/]: s#130
[#551 /[1-9][0-9]*[iu]?/]: s#127
[#552 '!']: s#70
[#552 '&']: s#73
[#552 '(']: s#115
[#552 '*']: s#72
[#552 '-']: s#69
[#552 'array']: s#83
[#552 'atomic']: s#95
[#552 'bitcast']: s#78
[#552 'bool']: s#88
[#552 'f16']: s#117
[#552 'f32']: s#116
[#552 'false']: s#114
[#552 'i32']: s#118
[#552 'mat2x2']: s#100
[#552 'mat2x3']: s#101
[#552 'mat2x4']: s#102
[#552 'mat3x2']: s#103
[#552 'mat3x3']: s#104
[#552 'mat3x4']: s#105
[#552 'mat4x2']: s#106
[#552 'mat4x3']: s#107
[#552 'mat4x4']: s#108
[#552 'ptr']: s#120
[#552 'sampler']: s#137
[#552 'sampler_comparison']: s#138
[#552 'texture_1d']: s#144
[#552 'texture_2d']: s#145
[#552 'texture_2d_array']: s#146
[#552 'texture_3d']: s#147
[#552 'texture_cube']: s#148
[#552 'texture_cube_array']: s#149
[#552 'texture_depth_2d']: s#139
[#552 'texture_depth_2d_array']: s#140
[#552 'texture_depth_cube']: s#141
[#552 'texture_depth_cube_array']: s#142
[#552 'texture_depth_multisampled_2d']: s#143
[#552 'texture_multisampled_2d']: s#150
[#552 'texture_storage_1d']: s#151
[#552 'texture_storage_2d']: s#152
[#552 'texture_storage_2d_array']: s#153
[#552 'texture_storage_3d']: s#154
[#552 'true']: s#113
[#552 'u32']: s#119
[#552 'vec2']: s#97
[#552 'vec3']: s#98
[#552 'vec4']: s#99
[#552 '~']: s#71
[#552 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#552 /0[fh]/]: s#129
[#552 /0[iu]?/]: s#126
[#552 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#552 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#552 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#552 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#552 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#552 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#552 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#552 /[1-9][0-9]*[fh]/]: s#130
[#552 /[1-9][0-9]*[iu]?/]: s#127
[#553 '&']: r#346
[#553 '(']: r#346
[#553 '*']: r#346
[#553 ';']: r#346
[#553 '_']: r#346
[#553 'break']: r#346
[#553 'const']: r#346
[#553 'continue']: r#346
[#553 'continuing']: r#346
[#553 'discard']: r#346
[#553 'else']: r#346
[#553 'for']: r#346
[#553 'if']: r#346
[#553 'let']: r#346
[#553 'loop']: r#346
[#553 'return']: r#346
[#553 'static_assert']: r#346
[#553 'switch']: r#346
[#553 'var']: r#346
[#553 'while']: r#346
[#553 '{']: r#346
[#553 '}']: r#346
[#553 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#346
[#554 ')']: r#347
[#554 ';']: r#347
[#555 ')']: r#348
[#555 ';']: r#348
[#556 '%=']: r#349
[#556 '&=']: r#349
[#556 ')']: r#349
[#556 '*=']: r#349
[#556 '++']: r#349
[#556 '+=']: r#349
[#556 '--']: r#349
[#556 '-=']: r#349
[#556 '.']: r#349
[#556 '/=']: r#349
[#556 '<<=']: r#349
[#556 '=']: r#349
[#556 '>>=']: r#349
[#556 '[']: r#349
[#556 '^=']: r#349
[#556 '|=']: r#349
[#558 ':']: s#179
[#559 ',']: s#403
[#560 ')']: r#350
[#560 ',']: r#350
[#561 ',']: s#403
[#562 '@']: s#32
[#563 '->']: s#575
[#564 ',']: r#351
[#564 '}']: r#351
[#565 ',']: r#352
[#565 '}']: r#352
[#566 '}']: s#476
[#567 '}']: r#353
[#568 'array']: s#315
[#568 'atomic']: s#95
[#568 'bool']: s#88
[#568 'f16']: s#117
[#568 'f32']: s#116
[#568 'i32']: s#118
[#568 'mat2x2']: s#100
[#568 'mat2x3']: s#101
[#568 'mat2x4']: s#102
[#568 'mat3x2']: s#103
[#568 'mat3x3']: s#104
[#568 'mat3x4']: s#105
[#568 'mat4x2']: s#106
[#568 'mat4x3']: s#107
[#568 'mat4x4']: s#108
[#568 'ptr']: s#120
[#568 'sampler']: s#137
[#568 'sampler_comparison']: s#138
[#568 'texture_1d']: s#144
[#568 'texture_2d']: s#145
[#568 'texture_2d_array']: s#146
[#568 'texture_3d']: s#147
[#568 'texture_cube']: s#148
[#568 'texture_cube_array']: s#149
[#568 'texture_depth_2d']: s#139
[#568 'texture_depth_2d_array']: s#140
[#568 'texture_depth_cube']: s#141
[#568 'texture_depth_cube_array']: s#142
[#568 'texture_depth_multisampled_2d']: s#143
[#568 'texture_multisampled_2d']: s#150
[#568 'texture_storage_1d']: s#151
[#568 'texture_storage_2d']: s#152
[#568 'texture_storage_2d_array']: s#153
[#568 'texture_storage_3d']: s#154
[#568 'u32']: s#119
[#568 'vec2']: s#97
[#568 'vec3']: s#98
[#568 'vec4']: s#99
[#568 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#569 '>']: r#354
[#570 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#355
[#571 ',']: r#356
[#571 '}']: r#356
[#572 ';']: r#357
[#572 '@']: r#357
[#572 'const']: r#357
[#572 'fn']: r#357
[#572 'override']: r#357
[#572 'static_assert']: r#357
[#572 'struct']: r#357
[#572 'type']: r#357
[#572 'var']: r#357
[#572 EndOfText]: r#357
[#573 '{']: r#358
[#574 '@']: s#32
[#575 '@']: r#359
[#575 'array']: r#359
[#575 'atomic']: r#359
[#575 'bool']: r#359
[#575 'f16']: r#359
[#575 'f32']: r#359
[#575 'i32']: r#359
[#575 'mat2x2']: r#359
[#575 'mat2x3']: r#359
[#575 'mat2x4']: r#359
[#575 'mat3x2']: r#359
[#575 'mat3x3']: r#359
[#575 'mat3x4']: r#359
[#575 'mat4x2']: r#359
[#575 'mat4x3']: r#359
[#575 'mat4x4']: r#359
[#575 'ptr']: r#359
[#575 'sampler']: r#359
[#575 'sampler_comparison']: r#359
[#575 'texture_1d']: r#359
[#575 'texture_2d']: r#359
[#575 'texture_2d_array']: r#359
[#575 'texture_3d']: r#359
[#575 'texture_cube']: r#359
[#575 'texture_cube_array']: r#359
[#575 'texture_depth_2d']: r#359
[#575 'texture_depth_2d_array']: r#359
[#575 'texture_depth_cube']: r#359
[#575 'texture_depth_cube_array']: r#359
[#575 'texture_depth_multisampled_2d']: r#359
[#575 'texture_multisampled_2d']: r#359
[#575 'texture_storage_1d']: r#359
[#575 'texture_storage_2d']: r#359
[#575 'texture_storage_2d_array']: r#359
[#575 'texture_storage_3d']: r#359
[#575 'u32']: r#359
[#575 'vec2']: r#359
[#575 'vec3']: r#359
[#575 'vec4']: r#359
[#576 ')']: r#360
[#576 ',']: r#360
[#577 ')']: r#361
[#577 ',']: r#361
[#578 ')']: r#362
[#579 ')']: r#363
[#580 'array']: s#315
[#580 'atomic']: s#95
[#580 'bool']: s#88
[#580 'f16']: s#117
[#580 'f32']: s#116
[#580 'i32']: s#118
[#580 'mat2x2']: s#100
[#580 'mat2x3']: s#101
[#580 'mat2x4']: s#102
[#580 'mat3x2']: s#103
[#580 'mat3x3']: s#104
[#580 'mat3x4']: s#105
[#580 'mat4x2']: s#106
[#580 'mat4x3']: s#107
[#580 'mat4x4']: s#108
[#580 'ptr']: s#120
[#580 'sampler']: s#137
[#580 'sampler_comparison']: s#138
[#580 'texture_1d']: s#144
[#580 'texture_2d']: s#145
[#580 'texture_2d_array']: s#146
[#580 'texture_3d']: s#147
[#580 'texture_cube']: s#148
[#580 'texture_cube_array']: s#149
[#580 'texture_depth_2d']: s#139
[#580 'texture_depth_2d_array']: s#140
[#580 'texture_depth_cube']: s#141
[#580 'texture_depth_cube_array']: s#142
[#580 'texture_depth_multisampled_2d']: s#143
[#580 'texture_multisampled_2d']: s#150
[#580 'texture_storage_1d']: s#151
[#580 'texture_storage_2d']: s#152
[#580 'texture_storage_2d_array']: s#153
[#580 'texture_storage_3d']: s#154
[#580 'u32']: s#119
[#580 'vec2']: s#97
[#580 'vec3']: s#98
[#580 'vec4']: s#99
[#580 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#581 ';']: r#364
[#582 ';']: r#365
[#583 '!']: s#70
[#583 '&']: s#73
[#583 '(']: s#115
[#583 '*']: s#72
[#583 '-']: s#69
[#583 'array']: s#83
[#583 'atomic']: s#95
[#583 'bitcast']: s#78
[#583 'bool']: s#88
[#583 'f16']: s#117
[#583 'f32']: s#116
[#583 'false']: s#114
[#583 'i32']: s#118
[#583 'mat2x2']: s#100
[#583 'mat2x3']: s#101
[#583 'mat2x4']: s#102
[#583 'mat3x2']: s#103
[#583 'mat3x3']: s#104
[#583 'mat3x4']: s#105
[#583 'mat4x2']: s#106
[#583 'mat4x3']: s#107
[#583 'mat4x4']: s#108
[#583 'ptr']: s#120
[#583 'sampler']: s#137
[#583 'sampler_comparison']: s#138
[#583 'texture_1d']: s#144
[#583 'texture_2d']: s#145
[#583 'texture_2d_array']: s#146
[#583 'texture_3d']: s#147
[#583 'texture_cube']: s#148
[#583 'texture_cube_array']: s#149
[#583 'texture_depth_2d']: s#139
[#583 'texture_depth_2d_array']: s#140
[#583 'texture_depth_cube']: s#141
[#583 'texture_depth_cube_array']: s#142
[#583 'texture_depth_multisampled_2d']: s#143
[#583 'texture_multisampled_2d']: s#150
[#583 'texture_storage_1d']: s#151
[#583 'texture_storage_2d']: s#152
[#583 'texture_storage_2d_array']: s#153
[#583 'texture_storage_3d']: s#154
[#583 'true']: s#113
[#583 'u32']: s#119
[#583 'vec2']: s#97
[#583 'vec3']: s#98
[#583 'vec4']: s#99
[#583 '~']: s#71
[#583 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#583 /0[fh]/]: s#129
[#583 /0[iu]?/]: s#126
[#583 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#583 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#583 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#583 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#583 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#583 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#583 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#583 /[1-9][0-9]*[fh]/]: s#130
[#583 /[1-9][0-9]*[iu]?/]: s#127
[#584 '{']: s#185
[#585 'continuing']: r#366
[#585 '}']: r#366
[#586 '}']: s#476
[#587 '}']: r#367
[#588 '{']: s#185
[#589 '}']: s#476
[#590 '}']: r#368
[#591 'case']: s#594
[#591 'default']: s#595
[#592 'case']: r#369
[#592 'default']: r#369
[#592 '}']: r#369
[#593 'case']: r#370
[#593 'default']: r#370
[#593 '}']: r#370
[#594 '!']: s#70
[#594 '&']: s#73
[#594 '(']: s#115
[#594 '*']: s#72
[#594 '-']: s#69
[#594 'array']: s#83
[#594 'atomic']: s#95
[#594 'bitcast']: s#78
[#594 'bool']: s#88
[#594 'default']: s#612
[#594 'f16']: s#117
[#594 'f32']: s#116
[#594 'false']: s#114
[#594 'i32']: s#118
[#594 'mat2x2']: s#100
[#594 'mat2x3']: s#101
[#594 'mat2x4']: s#102
[#594 'mat3x2']: s#103
[#594 'mat3x3']: s#104
[#594 'mat3x4']: s#105
[#594 'mat4x2']: s#106
[#594 'mat4x3']: s#107
[#594 'mat4x4']: s#108
[#594 'ptr']: s#120
[#594 'sampler']: s#137
[#594 'sampler_comparison']: s#138
[#594 'texture_1d']: s#144
[#594 'texture_2d']: s#145
[#594 'texture_2d_array']: s#146
[#594 'texture_3d']: s#147
[#594 'texture_cube']: s#148
[#594 'texture_cube_array']: s#149
[#594 'texture_depth_2d']: s#139
[#594 'texture_depth_2d_array']: s#140
[#594 'texture_depth_cube']: s#141
[#594 'texture_depth_cube_array']: s#142
[#594 'texture_depth_multisampled_2d']: s#143
[#594 'texture_multisampled_2d']: s#150
[#594 'texture_storage_1d']: s#151
[#594 'texture_storage_2d']: s#152
[#594 'texture_storage_2d_array']: s#153
[#594 'texture_storage_3d']: s#154
[#594 'true']: s#113
[#594 'u32']: s#119
[#594 'vec2']: s#97
[#594 'vec3']: s#98
[#594 'vec4']: s#99
[#594 '~']: s#71
[#594 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#594 /0[fh]/]: s#129
[#594 /0[iu]?/]: s#126
[#594 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#594 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#594 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#594 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#594 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#594 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#594 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#594 /[1-9][0-9]*[fh]/]: s#130
[#594 /[1-9][0-9]*[iu]?/]: s#127
[#595 ':']: s#179
[#596 '&']: r#371
[#596 '(']: r#371
[#596 '*']: r#371
[#596 ';']: r#371
[#596 '_']: r#371
[#596 'break']: r#371
[#596 'const']: r#371
[#596 'continue']: r#371
[#596 'continuing']: r#371
[#596 'discard']: r#371
[#596 'for']: r#371
[#596 'if']: r#371
[#596 'let']: r#371
[#596 'loop']: r#371
[#596 'return']: r#371
[#596 'static_assert']: r#371
[#596 'switch']: r#371
[#596 'var']: r#371
[#596 'while']: r#371
[#596 '{']: r#371
[#596 '}']: r#371
[#596 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#371
[#597 '{']: s#185
[#598 '(']: r#372
[#598 ')']: r#372
[#598 ',']: r#372
[#598 ';']: r#372
[#598 '=']: r#372
[#598 '>']: r#372
[#598 '{']: r#372
[#598 '}']: r#372
[#599 '>']: s#237
[#600 'read']: s#531
[#600 'read_write']: s#533
[#600 'write']: s#532
[#601 '@']: r#373
[#601 'array']: r#373
[#601 'atomic']: r#373
[#601 'bool']: r#373
[#601 'f16']: r#373
[#601 'f32']: r#373
[#601 'fn']: r#373
[#601 'i32']: r#373
[#601 'mat2x2']: r#373
[#601 'mat2x3']: r#373
[#601 'mat2x4']: r#373
[#601 'mat3x2']: r#373
[#601 'mat3x3']: r#373
[#601 'mat3x4']: r#373
[#601 'mat4x2']: r#373
[#601 'mat4x3']: r#373
[#601 'mat4x4']: r#373
[#601 'override']: r#373
[#601 'ptr']: r#373
[#601 'sampler']: r#373
[#601 'sampler_comparison']: r#373
[#601 'texture_1d']: r#373
[#601 'texture_2d']: r#373
[#601 'texture_2d_array']: r#373
[#601 'texture_3d']: r#373
[#601 'texture_cube']: r#373
[#601 'texture_cube_array']: r#373
[#601 'texture_depth_2d']: r#373
[#601 'texture_depth_2d_array']: r#373
[#601 'texture_depth_cube']: r#373
[#601 'texture_depth_cube_array']: r#373
[#601 'texture_depth_multisampled_2d']: r#373
[#601 'texture_multisampled_2d']: r#373
[#601 'texture_storage_1d']: r#373
[#601 'texture_storage_2d']: r#373
[#601 'texture_storage_2d_array']: r#373
[#601 'texture_storage_3d']: r#373
[#601 'u32']: r#373
[#601 'var']: r#373
[#601 'vec2']: r#373
[#601 'vec3']: r#373
[#601 'vec4']: r#373
[#602 '!']: s#70
[#602 '&']: s#73
[#602 '(']: s#115
[#602 ')']: r#309
[#602 '*']: s#72
[#602 '-']: s#69
[#602 'array']: s#83
[#602 'atomic']: s#95
[#602 'bitcast']: s#78
[#602 'bool']: s#88
[#602 'f16']: s#117
[#602 'f32']: s#116
[#602 'false']: s#114
[#602 'i32']: s#118
[#602 'mat2x2']: s#100
[#602 'mat2x3']: s#101
[#602 'mat2x4']: s#102
[#602 'mat3x2']: s#103
[#602 'mat3x3']: s#104
[#602 'mat3x4']: s#105
[#602 'mat4x2']: s#106
[#602 'mat4x3']: s#107
[#602 'mat4x4']: s#108
[#602 'ptr']: s#120
[#602 'sampler']: s#137
[#602 'sampler_comparison']: s#138
[#602 'texture_1d']: s#144
[#602 'texture_2d']: s#145
[#602 'texture_2d_array']: s#146
[#602 'texture_3d']: s#147
[#602 'texture_cube']: s#148
[#602 'texture_cube_array']: s#149
[#602 'texture_depth_2d']: s#139
[#602 'texture_depth_2d_array']: s#140
[#602 'texture_depth_cube']: s#141
[#602 'texture_depth_cube_array']: s#142
[#602 'texture_depth_multisampled_2d']: s#143
[#602 'texture_multisampled_2d']: s#150
[#602 'texture_storage_1d']: s#151
[#602 'texture_storage_2d']: s#152
[#602 'texture_storage_2d_array']: s#153
[#602 'texture_storage_3d']: s#154
[#602 'true']: s#113
[#602 'u32']: s#119
[#602 'vec2']: s#97
[#602 'vec3']: s#98
[#602 'vec4']: s#99
[#602 '~']: s#71
[#602 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#602 /0[fh]/]: s#129
[#602 /0[iu]?/]: s#126
[#602 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#602 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#602 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#602 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#602 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#602 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#602 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#602 /[1-9][0-9]*[fh]/]: s#130
[#602 /[1-9][0-9]*[iu]?/]: s#127
[#603 '@']: r#374
[#603 'array']: r#374
[#603 'atomic']: r#374
[#603 'bool']: r#374
[#603 'f16']: r#374
[#603 'f32']: r#374
[#603 'fn']: r#374
[#603 'i32']: r#374
[#603 'mat2x2']: r#374
[#603 'mat2x3']: r#374
[#603 'mat2x4']: r#374
[#603 'mat3x2']: r#374
[#603 'mat3x3']: r#374
[#603 'mat3x4']: r#374
[#603 'mat4x2']: r#374
[#603 'mat4x3']: r#374
[#603 'mat4x4']: r#374
[#603 'override']: r#374
[#603 'ptr']: r#374
[#603 'sampler']: r#374
[#603 'sampler_comparison']: r#374
[#603 'texture_1d']: r#374
[#603 'texture_2d']: r#374
[#603 'texture_2d_array']: r#374
[#603 'texture_3d']: r#374
[#603 'texture_cube']: r#374
[#603 'texture_cube_array']: r#374
[#603 'texture_depth_2d']: r#374
[#603 'texture_depth_2d_array']: r#374
[#603 'texture_depth_cube']: r#374
[#603 'texture_depth_cube_array']: r#374
[#603 'texture_depth_multisampled_2d']: r#374
[#603 'texture_multisampled_2d']: r#374
[#603 'texture_storage_1d']: r#374
[#603 'texture_storage_2d']: r#374
[#603 'texture_storage_2d_array']: r#374
[#603 'texture_storage_3d']: r#374
[#603 'u32']: r#374
[#603 'var']: r#374
[#603 'vec2']: r#374
[#603 'vec3']: r#374
[#603 'vec4']: r#374
[#604 ',']: s#403
[#605 '>']: r#375
[#606 '(']: r#376
[#606 ')']: r#376
[#606 ',']: r#376
[#606 ';']: r#376
[#606 '=']: r#376
[#606 '>']: r#376
[#606 '{']: r#376
[#606 '}']: r#376
[#607 '&']: r#377
[#607 '(']: r#377
[#607 '*']: r#377
[#607 ';']: r#377
[#607 '_']: r#377
[#607 'break']: r#377
[#607 'const']: r#377
[#607 'continue']: r#377
[#607 'continuing']: r#377
[#607 'discard']: r#377
[#607 'else']: r#377
[#607 'for']: r#377
[#607 'if']: r#377
[#607 'let']: r#377
[#607 'loop']: r#377
[#607 'return']: r#377
[#607 'static_assert']: r#377
[#607 'switch']: r#377
[#607 'var']: r#377
[#607 'while']: r#377
[#607 '{']: r#377
[#607 '}']: r#377
[#607 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#377
[#608 '{']: s#185
[#609 '{']: r#378
[#610 ':']: s#179
[#611 ',']: s#403
[#612 ',']: r#379
[#612 ':']: r#379
[#612 '{']: r#379
[#613 ',']: r#380
[#613 ':']: r#380
[#613 '{']: r#380
[#614 '}']: r#381
[#615 '&']: r#382
[#615 '(']: r#382
[#615 '*']: r#382
[#615 ';']: r#382
[#615 '_']: r#382
[#615 'break']: r#382
[#615 'const']: r#382
[#615 'continue']: r#382
[#615 'continuing']: r#382
[#615 'discard']: r#382
[#615 'for']: r#382
[#615 'if']: r#382
[#615 'let']: r#382
[#615 'loop']: r#382
[#615 'return']: r#382
[#615 'static_assert']: r#382
[#615 'switch']: r#382
[#615 'var']: r#382
[#615 'while']: r#382
[#615 '{']: r#382
[#615 '}']: r#382
[#615 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#382
[#616 '}']: r#383
[#617 '&']: s#73
[#617 '(']: s#115
[#617 '*']: s#72
[#617 ';']: s#19
[#617 '_']: s#386
[#617 'break']: s#375
[#617 'const']: s#374
[#617 'continue']: s#376
[#617 'discard']: s#361
[#617 'for']: s#369
[#617 'if']: s#380
[#617 'let']: s#373
[#617 'loop']: s#368
[#617 'return']: s#365
[#617 'static_assert']: s#26
[#617 'switch']: s#367
[#617 'var']: s#163
[#617 'while']: s#370
[#617 '{']: s#185
[#617 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#618 '&']: r#384
[#618 '(']: r#384
[#618 '*']: r#384
[#618 ';']: r#384
[#618 '_']: r#384
[#618 'break']: r#384
[#618 'const']: r#384
[#618 'continue']: r#384
[#618 'continuing']: r#384
[#618 'discard']: r#384
[#618 'for']: r#384
[#618 'if']: r#384
[#618 'let']: r#384
[#618 'loop']: r#384
[#618 'return']: r#384
[#618 'static_assert']: r#384
[#618 'switch']: r#384
[#618 'var']: r#384
[#618 'while']: r#384
[#618 '{']: r#384
[#618 '}']: r#384
[#618 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#384
[#619 '&']: r#385
[#619 '(']: r#385
[#619 '*']: r#385
[#619 ';']: r#385
[#619 '_']: r#385
[#619 'break']: r#385
[#619 'const']: r#385
[#619 'continue']: r#385
[#619 'continuing']: r#385
[#619 'discard']: r#385
[#619 'for']: r#385
[#619 'if']: r#385
[#619 'let']: r#385
[#619 'loop']: r#385
[#619 'return']: r#385
[#619 'static_assert']: r#385
[#619 'switch']: r#385
[#619 'var']: r#385
[#619 'while']: r#385
[#619 '{']: r#385
[#619 '}']: r#385
[#619 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#385
[#620 ';']: s#19
[#621 ';']: r#386
[#622 ')']: r#387
[#622 ',']: r#387
[#623 'array']: s#315
[#623 'atomic']: s#95
[#623 'bool']: s#88
[#623 'f16']: s#117
[#623 'f32']: s#116
[#623 'i32']: s#118
[#623 'mat2x2']: s#100
[#623 'mat2x3']: s#101
[#623 'mat2x4']: s#102
[#623 'mat3x2']: s#103
[#623 'mat3x3']: s#104
[#623 'mat3x4']: s#105
[#623 'mat4x2']: s#106
[#623 'mat4x3']: s#107
[#623 'mat4x4']: s#108
[#623 'ptr']: s#120
[#623 'sampler']: s#137
[#623 'sampler_comparison']: s#138
[#623 'texture_1d']: s#144
[#623 'texture_2d']: s#145
[#623 'texture_2d_array']: s#146
[#623 'texture_3d']: s#147
[#623 'texture_cube']: s#148
[#623 'texture_cube_array']: s#149
[#623 'texture_depth_2d']: s#139
[#623 'texture_depth_2d_array']: s#140
[#623 'texture_depth_cube']: s#141
[#623 'texture_depth_cube_array']: s#142
[#623 'texture_depth_multisampled_2d']: s#143
[#623 'texture_multisampled_2d']: s#150
[#623 'texture_storage_1d']: s#151
[#623 'texture_storage_2d']: s#152
[#623 'texture_storage_2d_array']: s#153
[#623 'texture_storage_3d']: s#154
[#623 'u32']: s#119
[#623 'vec2']: s#97
[#623 'vec3']: s#98
[#623 'vec4']: s#99
[#623 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#624 'array']: r#388
[#624 'atomic']: r#388
[#624 'bool']: r#388
[#624 'f16']: r#388
[#624 'f32']: r#388
[#624 'i32']: r#388
[#624 'mat2x2']: r#388
[#624 'mat2x3']: r#388
[#624 'mat2x4']: r#388
[#624 'mat3x2']: r#388
[#624 'mat3x3']: r#388
[#624 'mat3x4']: r#388
[#624 'mat4x2']: r#388
[#624 'mat4x3']: r#388
[#624 'mat4x4']: r#388
[#624 'ptr']: r#388
[#624 'sampler']: r#388
[#624 'sampler_comparison']: r#388
[#624 'texture_1d']: r#388
[#624 'texture_2d']: r#388
[#624 'texture_2d_array']: r#388
[#624 'texture_3d']: r#388
[#624 'texture_cube']: r#388
[#624 'texture_cube_array']: r#388
[#624 'texture_depth_2d']: r#388
[#624 'texture_depth_2d_array']: r#388
[#624 'texture_depth_cube']: r#388
[#624 'texture_depth_cube_array']: r#388
[#624 'texture_depth_multisampled_2d']: r#388
[#624 'texture_multisampled_2d']: r#388
[#624 'texture_storage_1d']: r#388
[#624 'texture_storage_2d']: r#388
[#624 'texture_storage_2d_array']: r#388
[#624 'texture_storage_3d']: r#388
[#624 'u32']: r#388
[#624 'vec2']: r#388
[#624 'vec3']: r#388
[#624 'vec4']: r#388
[#625 '@']: s#32
[#626 'array']: r#389
[#626 'atomic']: r#389
[#626 'bool']: r#389
[#626 'f16']: r#389
[#626 'f32']: r#389
[#626 'i32']: r#389
[#626 'mat2x2']: r#389
[#626 'mat2x3']: r#389
[#626 'mat2x4']: r#389
[#626 'mat3x2']: r#389
[#626 'mat3x3']: r#389
[#626 'mat3x4']: r#389
[#626 'mat4x2']: r#389
[#626 'mat4x3']: r#389
[#626 'mat4x4']: r#389
[#626 'ptr']: r#389
[#626 'sampler']: r#389
[#626 'sampler_comparison']: r#389
[#626 'texture_1d']: r#389
[#626 'texture_2d']: r#389
[#626 'texture_2d_array']: r#389
[#626 'texture_3d']: r#389
[#626 'texture_cube']: r#389
[#626 'texture_cube_array']: r#389
[#626 'texture_depth_2d']: r#389
[#626 'texture_depth_2d_array']: r#389
[#626 'texture_depth_cube']: r#389
[#626 'texture_depth_cube_array']: r#389
[#626 'texture_depth_multisampled_2d']: r#389
[#626 'texture_multisampled_2d']: r#389
[#626 'texture_storage_1d']: r#389
[#626 'texture_storage_2d']: r#389
[#626 'texture_storage_2d_array']: r#389
[#626 'texture_storage_3d']: r#389
[#626 'u32']: r#389
[#626 'vec2']: r#389
[#626 'vec3']: r#389
[#626 'vec4']: r#389
[#627 '{']: r#390
[#628 '&']: s#73
[#628 '(']: s#115
[#628 '*']: s#72
[#628 '_']: s#386
[#628 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#629 'break']: s#648
[#630 'break']: r#391
[#630 '}']: r#391
[#631 '&']: s#73
[#631 '(']: s#115
[#631 '*']: s#72
[#631 ';']: s#19
[#631 '_']: s#386
[#631 'break']: s#375
[#631 'const']: s#374
[#631 'continue']: s#376
[#631 'discard']: s#361
[#631 'for']: s#369
[#631 'if']: s#380
[#631 'let']: s#373
[#631 'loop']: s#368
[#631 'return']: s#365
[#631 'static_assert']: s#26
[#631 'switch']: s#367
[#631 'var']: s#163
[#631 'while']: s#370
[#631 '{']: s#185
[#631 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#632 ',']: s#403
[#633 ',']: r#392
[#633 ':']: r#392
[#633 '{']: r#392
[#634 ',']: s#403
[#635 '!']: s#70
[#635 '&']: s#73
[#635 '(']: s#115
[#635 '*']: s#72
[#635 '-']: s#69
[#635 'array']: s#83
[#635 'atomic']: s#95
[#635 'bitcast']: s#78
[#635 'bool']: s#88
[#635 'default']: s#612
[#635 'f16']: s#117
[#635 'f32']: s#116
[#635 'false']: s#114
[#635 'i32']: s#118
[#635 'mat2x2']: s#100
[#635 'mat2x3']: s#101
[#635 'mat2x4']: s#102
[#635 'mat3x2']: s#103
[#635 'mat3x3']: s#104
[#635 'mat3x4']: s#105
[#635 'mat4x2']: s#106
[#635 'mat4x3']: s#107
[#635 'mat4x4']: s#108
[#635 'ptr']: s#120
[#635 'sampler']: s#137
[#635 'sampler_comparison']: s#138
[#635 'texture_1d']: s#144
[#635 'texture_2d']: s#145
[#635 'texture_2d_array']: s#146
[#635 'texture_3d']: s#147
[#635 'texture_cube']: s#148
[#635 'texture_cube_array']: s#149
[#635 'texture_depth_2d']: s#139
[#635 'texture_depth_2d_array']: s#140
[#635 'texture_depth_cube']: s#141
[#635 'texture_depth_cube_array']: s#142
[#635 'texture_depth_multisampled_2d']: s#143
[#635 'texture_multisampled_2d']: s#150
[#635 'texture_storage_1d']: s#151
[#635 'texture_storage_2d']: s#152
[#635 'texture_storage_2d_array']: s#153
[#635 'texture_storage_3d']: s#154
[#635 'true']: s#113
[#635 'u32']: s#119
[#635 'vec2']: s#97
[#635 'vec3']: s#98
[#635 'vec4']: s#99
[#635 '~']: s#71
[#635 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#635 /0[fh]/]: s#129
[#635 /0[iu]?/]: s#126
[#635 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#635 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#635 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#635 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#635 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#635 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#635 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#635 /[1-9][0-9]*[fh]/]: s#130
[#635 /[1-9][0-9]*[iu]?/]: s#127
[#636 '{']: s#185
[#637 '{']: r#393
[#638 'case']: r#394
[#638 'default']: r#394
[#638 '}']: r#394
[#639 '@']: r#395
[#639 'array']: r#395
[#639 'atomic']: r#395
[#639 'bool']: r#395
[#639 'f16']: r#395
[#639 'f32']: r#395
[#639 'fn']: r#395
[#639 'i32']: r#395
[#639 'mat2x2']: r#395
[#639 'mat2x3']: r#395
[#639 'mat2x4']: r#395
[#639 'mat3x2']: r#395
[#639 'mat3x3']: r#395
[#639 'mat3x4']: r#395
[#639 'mat4x2']: r#395
[#639 'mat4x3']: r#395
[#639 'mat4x4']: r#395
[#639 'override']: r#395
[#639 'ptr']: r#395
[#639 'sampler']: r#395
[#639 'sampler_comparison']: r#395
[#639 'texture_1d']: r#395
[#639 'texture_2d']: r#395
[#639 'texture_2d_array']: r#395
[#639 'texture_3d']: r#395
[#639 'texture_cube']: r#395
[#639 'texture_cube_array']: r#395
[#639 'texture_depth_2d']: r#395
[#639 'texture_depth_2d_array']: r#395
[#639 'texture_depth_cube']: r#395
[#639 'texture_depth_cube_array']: r#395
[#639 'texture_depth_multisampled_2d']: r#395
[#639 'texture_multisampled_2d']: r#395
[#639 'texture_storage_1d']: r#395
[#639 'texture_storage_2d']: r#395
[#639 'texture_storage_2d_array']: r#395
[#639 'texture_storage_3d']: r#395
[#639 'u32']: r#395
[#639 'var']: r#395
[#639 'vec2']: r#395
[#639 'vec3']: r#395
[#639 'vec4']: r#395
[#640 'case']: r#396
[#640 'default']: r#396
[#640 '}']: r#396
[#641 ',']: r#397
[#641 ':']: r#397
[#641 '{']: r#397
[#642 ',']: r#398
[#642 ':']: r#398
[#642 '{']: r#398
[#643 ':']: r#399
[#643 '{']: r#399
[#644 ':']: r#400
[#644 '{']: r#400
[#645 'break']: r#401
[#645 '}']: r#401
[#646 '}']: s#476
[#647 '}']: r#402
[#648 'if']: s#653
[#649 ')']: r#403
[#650 ')']: r#404
[#651 ')']: r#405
[#652 ')']: r#406
[#653 '!']: s#70
[#653 '&']: s#73
[#653 '(']: s#115
[#653 '*']: s#72
[#653 '-']: s#69
[#653 'array']: s#83
[#653 'atomic']: s#95
[#653 'bitcast']: s#78
[#653 'bool']: s#88
[#653 'f16']: s#117
[#653 'f32']: s#116
[#653 'false']: s#114
[#653 'i32']: s#118
[#653 'mat2x2']: s#100
[#653 'mat2x3']: s#101
[#653 'mat2x4']: s#102
[#653 'mat3x2']: s#103
[#653 'mat3x3']: s#104
[#653 'mat3x4']: s#105
[#653 'mat4x2']: s#106
[#653 'mat4x3']: s#107
[#653 'mat4x4']: s#108
[#653 'ptr']: s#120
[#653 'sampler']: s#137
[#653 'sampler_comparison']: s#138
[#653 'texture_1d']: s#144
[#653 'texture_2d']: s#145
[#653 'texture_2d_array']: s#146
[#653 'texture_3d']: s#147
[#653 'texture_cube']: s#148
[#653 'texture_cube_array']: s#149
[#653 'texture_depth_2d']: s#139
[#653 'texture_depth_2d_array']: s#140
[#653 'texture_depth_cube']: s#141
[#653 'texture_depth_cube_array']: s#142
[#653 'texture_depth_multisampled_2d']: s#143
[#653 'texture_multisampled_2d']: s#150
[#653 'texture_storage_1d']: s#151
[#653 'texture_storage_2d']: s#152
[#653 'texture_storage_2d_array']: s#153
[#653 'texture_storage_3d']: s#154
[#653 'true']: s#113
[#653 'u32']: s#119
[#653 'vec2']: s#97
[#653 'vec3']: s#98
[#653 'vec4']: s#99
[#653 '~']: s#71
[#653 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#653 /0[fh]/]: s#129
[#653 /0[iu]?/]: s#126
[#653 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#134
[#653 /0[xX][0-9a-fA-F]+[iu]?/]: s#128
[#653 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#136
[#653 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#135
[#653 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#131
[#653 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#133
[#653 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#132
[#653 /[1-9][0-9]*[fh]/]: s#130
[#653 /[1-9][0-9]*[iu]?/]: s#127
[#654 '}']: r#407
[#655 ';']: s#19
[#656 '}']: r#408

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #31
[#2 attribute]: #30
[#2 function_decl]: #17
[#2 function_decl/0.0]: #25
[#2 function_decl/0.0/0]: #29
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #22
[#2 global_constant_decl/1.0/0]: #28
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #27
[#2 semicolon]: #12
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#6 semicolon]: #169
[#11 attr]: #31
[#11 attribute]: #30
[#11 function_decl]: #17
[#11 function_decl/0.0]: #25
[#11 function_decl/0.0/0]: #29
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #22
[#11 global_constant_decl/1.0/0]: #28
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #20
[#11 global_variable_decl/0.0/0]: #27
[#11 semicolon]: #12
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #168
[#11 type_alias_decl]: #15
[#13 semicolon]: #167
[#14 semicolon]: #166
[#15 semicolon]: #165
[#18 semicolon]: #164
[#20 variable_decl]: #162
[#21 ident]: #161
[#21 optionally_typed_ident]: #160
[#23 ident]: #158
[#24 ident]: #157
[#25 function_header]: #155
[#26 additive_expression]: #59
[#26 and]: #67
[#26 array_type_specifier]: #94
[#26 bang]: #64
[#26 binary_and_expression]: #56
[#26 binary_or_expression]: #57
[#26 binary_xor_expression]: #58
[#26 bitwise_expression]: #54
[#26 bool_literal]: #86
[#26 callable]: #75
[#26 decimal_float_literal]: #111
[#26 decimal_int_literal]: #109
[#26 depth_texture_type]: #122
[#26 expression]: #50
[#26 float16]: #90
[#26 float32]: #89
[#26 float_literal]: #85
[#26 hex_float_literal]: #112
[#26 hex_int_literal]: #110
[#26 ident]: #74
[#26 int32]: #91
[#26 int_literal]: #84
[#26 literal]: #76
[#26 mat_prefix]: #82
[#26 minus]: #63
[#26 multiplicative_expression]: #61
[#26 multisampled_texture_type]: #124
[#26 paren_expression]: #77
[#26 paren_left]: #87
[#26 pointer]: #93
[#26 primary_expression]: #68
[#26 relational_expression]: #51
[#26 sampled_texture_type]: #123
[#26 sampler_type]: #121
[#26 shift_expression]: #55
[#26 short_circuit_and_expression]: #53
[#26 short_circuit_or_expression]: #52
[#26 singular_expression]: #62
[#26 star]: #66
[#26 storage_texture_type]: #125
[#26 texture_and_sampler_types]: #96
[#26 tilde]: #65
[#26 type_specifier_without_ident]: #80
[#26 uint32]: #92
[#26 unary_expression]: #60
[#26 vec_prefix]: #81
[#30 attr]: #31
[#30 attribute]: #30
[#30 function_decl/0.0/0]: #49
[#30 global_constant_decl/1.0/0]: #48
[#30 global_variable_decl/0.0/0]: #47
[#33 paren_left]: #254
[#34 paren_left]: #253
[#35 paren_left]: #252
[#37 paren_left]: #251
[#38 paren_left]: #250
[#39 paren_left]: #249
[#41 paren_left]: #248
[#42 paren_left]: #247
[#43 paren_left]: #246
[#52 or_or]: #244
[#53 and_and]: #242
[#55 equal_equal]: #235
[#55 greater_than]: #232
[#55 greater_than_equal]: #234
[#55 less_than]: #231
[#55 less_than_equal]: #233
[#55 not_equal]: #236
[#56 and]: #230
[#57 or]: #228
[#58 xor]: #226
[#59 additive_operator]: #222
[#59 minus]: #224
[#59 plus]: #223
[#60 shift_left]: #218
[#60 shift_right]: #219
[#61 forward_slash]: #214
[#61 modulo]: #215
[#61 multiplicative_operator]: #212
[#61 star]: #213
[#63 and]: #67
[#63 array_type_specifier]: #94
[#63 bang]: #64
[#63 bool_literal]: #86
[#63 callable]: #75
[#63 decimal_float_literal]: #111
[#63 decimal_int_literal]: #109
[#63 depth_texture_type]: #122
[#63 float16]: #90
[#63 float32]: #89
[#63 float_literal]: #85
[#63 hex_float_literal]: #112
[#63 hex_int_literal]: #110
[#63 ident]: #74
[#63 int32]: #91
[#63 int_literal]: #84
[#63 literal]: #76
[#63 mat_prefix]: #82
[#63 minus]: #63
[#63 multisampled_texture_type]: #124
[#63 paren_expression]: #77
[#63 paren_left]: #87
[#63 pointer]: #93
[#63 primary_expression]: #68
[#63 sampled_texture_type]: #123
[#63 sampler_type]: #121
[#63 singular_expression]: #62
[#63 star]: #66
[#63 storage_texture_type]: #125
[#63 texture_and_sampler_types]: #96
[#63 tilde]: #65
[#63 type_specifier_without_ident]: #80
[#63 uint32]: #92
[#63 unary_expression]: #211
[#63 vec_prefix]: #81
[#64 and]: #67
[#64 array_type_specifier]: #94
[#64 bang]: #64
[#64 bool_literal]: #86
[#64 callable]: #75
[#64 decimal_float_literal]: #111
[#64 decimal_int_literal]: #109
[#64 depth_texture_type]: #122
[#64 float16]: #90
[#64 float32]: #89
[#64 float_literal]: #85
[#64 hex_float_literal]: #112
[#64 hex_int_literal]: #110
[#64 ident]: #74
[#64 int32]: #91
[#64 int_literal]: #84
[#64 literal]: #76
[#64 mat_prefix]: #82
[#64 minus]: #63
[#64 multisampled_texture_type]: #124
[#64 paren_expression]: #77
[#64 paren_left]: #87
[#64 pointer]: #93
[#64 primary_expression]: #68
[#64 sampled_texture_type]: #123
[#64 sampler_type]: #121
[#64 singular_expression]: #62
[#64 star]: #66
[#64 storage_texture_type]: #125
[#64 texture_and_sampler_types]: #96
[#64 tilde]: #65
[#64 type_specifier_without_ident]: #80
[#64 uint32]: #92
[#64 unary_expression]: #210
[#64 vec_prefix]: #81
[#65 and]: #67
[#65 array_type_specifier]: #94
[#65 bang]: #64
[#65 bool_literal]: #86
[#65 callable]: #75
[#65 decimal_float_literal]: #111
[#65 decimal_int_literal]: #109
[#65 depth_texture_type]: #122
[#65 float16]: #90
[#65 float32]: #89
[#65 float_literal]: #85
[#65 hex_float_literal]: #112
[#65 hex_int_literal]: #110
[#65 ident]: #74
[#65 int32]: #91
[#65 int_literal]: #84
[#65 literal]: #76
[#65 mat_prefix]: #82
[#65 minus]: #63
[#65 multisampled_texture_type]: #124
[#65 paren_expression]: #77
[#65 paren_left]: #87
[#65 pointer]: #93
[#65 primary_expression]: #68
[#65 sampled_texture_type]: #123
[#65 sampler_type]: #121
[#65 singular_expression]: #62
[#65 star]: #66
[#65 storage_texture_type]: #125
[#65 texture_and_sampler_types]: #96
[#65 tilde]: #65
[#65 type_specifier_without_ident]: #80
[#65 uint32]: #92
[#65 unary_expression]: #209
[#65 vec_prefix]: #81
[#66 and]: #67
[#66 array_type_specifier]: #94
[#66 bang]: #64
[#66 bool_literal]: #86
[#66 callable]: #75
[#66 decimal_float_literal]: #111
[#66 decimal_int_literal]: #109
[#66 depth_texture_type]: #122
[#66 float16]: #90
[#66 float32]: #89
[#66 float_literal]: #85
[#66 hex_float_literal]: #112
[#66 hex_int_literal]: #110
[#66 ident]: #74
[#66 int32]: #91
[#66 int_literal]: #84
[#66 literal]: #76
[#66 mat_prefix]: #82
[#66 minus]: #63
[#66 multisampled_texture_type]: #124
[#66 paren_expression]: #77
[#66 paren_left]: #87
[#66 pointer]: #93
[#66 primary_expression]: #68
[#66 sampled_texture_type]: #123
[#66 sampler_type]: #121
[#66 singular_expression]: #62
[#66 star]: #66
[#66 storage_texture_type]: #125
[#66 texture_and_sampler_types]: #96
[#66 tilde]: #65
[#66 type_specifier_without_ident]: #80
[#66 uint32]: #92
[#66 unary_expression]: #208
[#66 vec_prefix]: #81
[#67 and]: #67
[#67 array_type_specifier]: #94
[#67 bang]: #64
[#67 bool_literal]: #86
[#67 callable]: #75
[#67 decimal_float_literal]: #111
[#67 decimal_int_literal]: #109
[#67 depth_texture_type]: #122
[#67 float16]: #90
[#67 float32]: #89
[#67 float_literal]: #85
[#67 hex_float_literal]: #112
[#67 hex_int_literal]: #110
[#67 ident]: #74
[#67 int32]: #91
[#67 int_literal]: #84
[#67 literal]: #76
[#67 mat_prefix]: #82
[#67 minus]: #63
[#67 multisampled_texture_type]: #124
[#67 paren_expression]: #77
[#67 paren_left]: #87
[#67 pointer]: #93
[#67 primary_expression]: #68
[#67 sampled_texture_type]: #123
[#67 sampler_type]: #121
[#67 singular_expression]: #62
[#67 star]: #66
[#67 storage_texture_type]: #125
[#67 texture_and_sampler_types]: #96
[#67 tilde]: #65
[#67 type_specifier_without_ident]: #80
[#67 uint32]: #92
[#67 unary_expression]: #207
[#67 vec_prefix]: #81
[#68 bracket_left]: #203
[#68 component_or_swizzle_specifier]: #202
[#68 period]: #204
[#68 singular_expression/0.1]: #201
[#75 argument_expression_list]: #199
[#75 paren_left]: #200
[#78 less_than]: #198
[#81 less_than]: #197
[#82 less_than]: #196
[#83 less_than]: #195
[#87 additive_expression]: #59
[#87 and]: #67
[#87 array_type_specifier]: #94
[#87 bang]: #64
[#87 binary_and_expression]: #56
[#87 binary_or_expression]: #57
[#87 binary_xor_expression]: #58
[#87 bitwise_expression]: #54
[#87 bool_literal]: #86
[#87 callable]: #75
[#87 decimal_float_literal]: #111
[#87 decimal_int_literal]: #109
[#87 depth_texture_type]: #122
[#87 expression]: #194
[#87 float16]: #90
[#87 float32]: #89
[#87 float_literal]: #85
[#87 hex_float_literal]: #112
[#87 hex_int_literal]: #110
[#87 ident]: #74
[#87 int32]: #91
[#87 int_literal]: #84
[#87 literal]: #76
[#87 mat_prefix]: #82
[#87 minus]: #63
[#87 multiplicative_expression]: #61
[#87 multisampled_texture_type]: #124
[#87 paren_expression]: #77
[#87 paren_left]: #87
[#87 pointer]: #93
[#87 primary_expression]: #68
[#87 relational_expression]: #51
[#87 sampled_texture_type]: #123
[#87 sampler_type]: #121
[#87 shift_expression]: #55
[#87 short_circuit_and_expression]: #53
[#87 short_circuit_or_expression]: #52
[#87 singular_expression]: #62
[#87 star]: #66
[#87 storage_texture_type]: #125
[#87 texture_and_sampler_types]: #96
[#87 tilde]: #65
[#87 type_specifier_without_ident]: #80
[#87 uint32]: #92
[#87 unary_expression]: #60
[#87 vec_prefix]: #81
[#93 less_than]: #193
[#95 less_than]: #192
[#123 less_than]: #191
[#124 less_than]: #190
[#125 less_than]: #189
[#155 brace_left]: #188
[#155 compound_statement]: #187
[#156 ident]: #186
[#157 brace_left]: #184
[#157 struct_body_decl]: #183
[#158 equal]: #182
[#159 ident]: #161
[#159 optionally_typed_ident]: #181
[#160 equal]: #180
[#161 colon]: #178
[#161 optionally_typed_ident/0.1]: #177
[#162 equal]: #175
[#162 global_variable_decl/0.2]: #174
[#163 less_than]: #172
[#163 variable_decl/0.1]: #170
[#163 variable_qualifier]: #171
[#170 ident]: #161
[#170 optionally_typed_ident]: #400
[#172 address_space]: #399
[#175 additive_expression]: #59
[#175 and]: #67
[#175 array_type_specifier]: #94
[#175 bang]: #64
[#175 binary_and_expression]: #56
[#175 binary_or_expression]: #57
[#175 binary_xor_expression]: #58
[#175 bitwise_expression]: #54
[#175 bool_literal]: #86
[#175 callable]: #75
[#175 decimal_float_literal]: #111
[#175 decimal_int_literal]: #109
[#175 depth_texture_type]: #122
[#175 expression]: #398
[#175 float16]: #90
[#175 float32]: #89
[#175 float_literal]: #85
[#175 hex_float_literal]: #112
[#175 hex_int_literal]: #110
[#175 ident]: #74
[#175 int32]: #91
[#175 int_literal]: #84
[#175 literal]: #76
[#175 mat_prefix]: #82
[#175 minus]: #63
[#175 multiplicative_expression]: #61
[#175 multisampled_texture_type]: #124
[#175 paren_expression]: #77
[#175 paren_left]: #87
[#175 pointer]: #93
[#175 primary_expression]: #68
[#175 relational_expression]: #51
[#175 sampled_texture_type]: #123
[#175 sampler_type]: #121
[#175 shift_expression]: #55
[#175 short_circuit_and_expression]: #53
[#175 short_circuit_or_expression]: #52
[#175 singular_expression]: #62
[#175 star]: #66
[#175 storage_texture_type]: #125
[#175 texture_and_sampler_types]: #96
[#175 tilde]: #65
[#175 type_specifier_without_ident]: #80
[#175 uint32]: #92
[#175 unary_expression]: #60
[#175 vec_prefix]: #81
[#178 array_type_specifier]: #94
[#178 depth_texture_type]: #122
[#178 float16]: #90
[#178 float32]: #89
[#178 ident]: #311
[#178 int32]: #91
[#178 mat_prefix]: #314
[#178 multisampled_texture_type]: #124
[#178 pointer]: #93
[#178 sampled_texture_type]: #123
[#178 sampler_type]: #121
[#178 storage_texture_type]: #125
[#178 texture_and_sampler_types]: #96
[#178 type_specifier]: #397
[#178 type_specifier_without_ident]: #312
[#178 uint32]: #92
[#178 vec_prefix]: #313
[#180 additive_expression]: #59
[#180 and]: #67
[#180 array_type_specifier]: #94
[#180 bang]: #64
[#180 binary_and_expression]: #56
[#180 binary_or_expression]: #57
[#180 binary_xor_expression]: #58
[#180 bitwise_expression]: #54
[#180 bool_literal]: #86
[#180 callable]: #75
[#180 decimal_float_literal]: #111
[#180 decimal_int_literal]: #109
[#180 depth_texture_type]: #122
[#180 expression]: #396
[#180 float16]: #90
[#180 float32]: #89
[#180 float_literal]: #85
[#180 hex_float_literal]: #112
[#180 hex_int_literal]: #110
[#180 ident]: #74
[#180 int32]: #91
[#180 int_literal]: #84
[#180 literal]: #76
[#180 mat_prefix]: #82
[#180 minus]: #63
[#180 multiplicative_expression]: #61
[#180 multisampled_texture_type]: #124
[#180 paren_expression]: #77
[#180 paren_left]: #87
[#180 pointer]: #93
[#180 primary_expression]: #68
[#180 relational_expression]: #51
[#180 sampled_texture_type]: #123
[#180 sampler_type]: #121
[#180 shift_expression]: #55
[#180 short_circuit_and_expression]: #53
[#180 short_circuit_or_expression]: #52
[#180 singular_expression]: #62
[#180 star]: #66
[#180 storage_texture_type]: #125
[#180 texture_and_sampler_types]: #96
[#180 tilde]: #65
[#180 type_specifier_without_ident]: #80
[#180 uint32]: #92
[#180 unary_expression]: #60
[#180 vec_prefix]: #81
[#181 equal]: #395
[#181 global_constant_decl/1.3]: #394
[#182 array_type_specifier]: #94
[#182 depth_texture_type]: #122
[#182 float16]: #90
[#182 float32]: #89
[#182 ident]: #311
[#182 int32]: #91
[#182 mat_prefix]: #314
[#182 multisampled_texture_type]: #124
[#182 pointer]: #93
[#182 sampled_texture_type]: #123
[#182 sampler_type]: #121
[#182 storage_texture_type]: #125
[#182 texture_and_sampler_types]: #96
[#182 type_specifier]: #393
[#182 type_specifier_without_ident]: #312
[#182 uint32]: #92
[#182 vec_prefix]: #313
[#184 attr]: #31
[#184 attribute]: #392
[#184 struct_member]: #389
[#184 struct_member/0.0]: #390
[#184 struct_member/0.0/0]: #391
[#186 paren_left]: #388
[#188 and]: #385
[#188 assignment_statement]: #377
[#188 brace_left]: #188
[#188 break_statement]: #359
[#188 compound_statement]: #363
[#188 compound_statement/0.1]: #347
[#188 compound_statement/0.1/0]: #348
[#188 continue_statement]: #360
[#188 core_lhs_expression]: #383
[#188 decrement_statement]: #379
[#188 for_statement]: #355
[#188 func_call_statement]: #357
[#188 ident]: #371
[#188 if_clause]: #366
[#188 if_statement]: #352
[#188 increment_statement]: #378
[#188 lhs_expression]: #381
[#188 loop_statement]: #354
[#188 paren_left]: #387
[#188 return_statement]: #351
[#188 semicolon]: #350
[#188 star]: #384
[#188 statement]: #349
[#188 static_assert_statement]: #364
[#188 switch_statement]: #353
[#188 underscore]: #382
[#188 variable_decl]: #372
[#188 variable_statement]: #358
[#188 variable_updating_statement]: #362
[#188 while_statement]: #356
[#189 texel_format]: #330
[#190 array_type_specifier]: #94
[#190 depth_texture_type]: #122
[#190 float16]: #90
[#190 float32]: #89
[#190 ident]: #311
[#190 int32]: #91
[#190 mat_prefix]: #314
[#190 multisampled_texture_type]: #124
[#190 pointer]: #93
[#190 sampled_texture_type]: #123
[#190 sampler_type]: #121
[#190 storage_texture_type]: #125
[#190 texture_and_sampler_types]: #96
[#190 type_specifier]: #329
[#190 type_specifier_without_ident]: #312
[#190 uint32]: #92
[#190 vec_prefix]: #313
[#191 array_type_specifier]: #94
[#191 depth_texture_type]: #122
[#191 float16]: #90
[#191 float32]: #89
[#191 ident]: #311
[#191 int32]: #91
[#191 mat_prefix]: #314
[#191 multisampled_texture_type]: #124
[#191 pointer]: #93
[#191 sampled_texture_type]: #123
[#191 sampler_type]: #121
[#191 storage_texture_type]: #125
[#191 texture_and_sampler_types]: #96
[#191 type_specifier]: #328
[#191 type_specifier_without_ident]: #312
[#191 uint32]: #92
[#191 vec_prefix]: #313
[#192 array_type_specifier]: #94
[#192 depth_texture_type]: #122
[#192 float16]: #90
[#192 float32]: #89
[#192 ident]: #311
[#192 int32]: #91
[#192 mat_prefix]: #314
[#192 multisampled_texture_type]: #124
[#192 pointer]: #93
[#192 sampled_texture_type]: #123
[#192 sampler_type]: #121
[#192 storage_texture_type]: #125
[#192 texture_and_sampler_types]: #96
[#192 type_specifier]: #327
[#192 type_specifier_without_ident]: #312
[#192 uint32]: #92
[#192 vec_prefix]: #313
[#193 address_space]: #321
[#194 paren_right]: #319
[#195 array_type_specifier]: #94
[#195 depth_texture_type]: #122
[#195 float16]: #90
[#195 float32]: #89
[#195 ident]: #311
[#195 int32]: #91
[#195 mat_prefix]: #314
[#195 multisampled_texture_type]: #124
[#195 pointer]: #93
[#195 sampled_texture_type]: #123
[#195 sampler_type]: #121
[#195 storage_texture_type]: #125
[#195 texture_and_sampler_types]: #96
[#195 type_specifier]: #318
[#195 type_specifier_without_ident]: #312
[#195 uint32]: #92
[#195 vec_prefix]: #313
[#196 array_type_specifier]: #94
[#196 depth_texture_type]: #122
[#196 float16]: #90
[#196 float32]: #89
[#196 ident]: #311
[#196 int32]: #91
[#196 mat_prefix]: #314
[#196 multisampled_texture_type]: #124
[#196 pointer]: #93
[#196 sampled_texture_type]: #123
[#196 sampler_type]: #121
[#196 storage_texture_type]: #125
[#196 texture_and_sampler_types]: #96
[#196 type_specifier]: #317
[#196 type_specifier_without_ident]: #312
[#196 uint32]: #92
[#196 vec_prefix]: #313
[#197 array_type_specifier]: #94
[#197 depth_texture_type]: #122
[#197 float16]: #90
[#197 float32]: #89
[#197 ident]: #311
[#197 int32]: #91
[#197 mat_prefix]: #314
[#197 multisampled_texture_type]: #124
[#197 pointer]: #93
[#197 sampled_texture_type]: #123
[#197 sampler_type]: #121
[#197 storage_texture_type]: #125
[#197 texture_and_sampler_types]: #96
[#197 type_specifier]: #316
[#197 type_specifier_without_ident]: #312
[#197 uint32]: #92
[#197 vec_prefix]: #313
[#198 array_type_specifier]: #94
[#198 depth_texture_type]: #122
[#198 float16]: #90
[#198 float32]: #89
[#198 ident]: #311
[#198 int32]: #91
[#198 mat_prefix]: #314
[#198 multisampled_texture_type]: #124
[#198 pointer]: #93
[#198 sampled_texture_type]: #123
[#198 sampler_type]: #121
[#198 storage_texture_type]: #125
[#198 texture_and_sampler_types]: #96
[#198 type_specifier]: #310
[#198 type_specifier_without_ident]: #312
[#198 uint32]: #92
[#198 vec_prefix]: #313
[#200 additive_expression]: #59
[#200 and]: #67
[#200 argument_expression_list/0.1]: #308
[#200 array_type_specifier]: #94
[#200 bang]: #64
[#200 binary_and_expression]: #56
[#200 binary_or_expression]: #57
[#200 binary_xor_expression]: #58
[#200 bitwise_expression]: #54
[#200 bool_literal]: #86
[#200 callable]: #75
[#200 decimal_float_literal]: #111
[#200 decimal_int_literal]: #109
[#200 depth_texture_type]: #122
[#200 expression]: #309
[#200 float16]: #90
[#200 float32]: #89
[#200 float_literal]: #85
[#200 hex_float_literal]: #112
[#200 hex_int_literal]: #110
[#200 ident]: #74
[#200 int32]: #91
[#200 int_literal]: #84
[#200 literal]: #76
[#200 mat_prefix]: #82
[#200 minus]: #63
[#200 multiplicative_expression]: #61
[#200 multisampled_texture_type]: #124
[#200 paren_expression]: #77
[#200 paren_left]: #87
[#200 pointer]: #93
[#200 primary_expression]: #68
[#200 relational_expression]: #51
[#200 sampled_texture_type]: #123
[#200 sampler_type]: #121
[#200 shift_expression]: #55
[#200 short_circuit_and_expression]: #53
[#200 short_circuit_or_expression]: #52
[#200 singular_expression]: #62
[#200 star]: #66
[#200 storage_texture_type]: #125
[#200 texture_and_sampler_types]: #96
[#200 tilde]: #65
[#200 type_specifier_without_ident]: #80
[#200 uint32]: #92
[#200 unary_expression]: #60
[#200 vec_prefix]: #81
[#203 additive_expression]: #59
[#203 and]: #67
[#203 array_type_specifier]: #94
[#203 bang]: #64
[#203 binary_and_expression]: #56
[#203 binary_or_expression]: #57
[#203 binary_xor_expression]: #58
[#203 bitwise_expression]: #54
[#203 bool_literal]: #86
[#203 callable]: #75
[#203 decimal_float_literal]: #111
[#203 decimal_int_literal]: #109
[#203 depth_texture_type]: #122
[#203 expression]: #307
[#203 float16]: #90
[#203 float32]: #89
[#203 float_literal]: #85
[#203 hex_float_literal]: #112
[#203 hex_int_literal]: #110
[#203 ident]: #74
[#203 int32]: #91
[#203 int_literal]: #84
[#203 literal]: #76
[#203 mat_prefix]: #82
[#203 minus]: #63
[#203 multiplicative_expression]: #61
[#203 multisampled_texture_type]: #124
[#203 paren_expression]: #77
[#203 paren_left]: #87
[#203 pointer]: #93
[#203 primary_expression]: #68
[#203 relational_expression]: #51
[#203 sampled_texture_type]: #123
[#203 sampler_type]: #121
[#203 shift_expression]: #55
[#203 short_circuit_and_expression]: #53
[#203 short_circuit_or_expression]: #52
[#203 singular_expression]: #62
[#203 star]: #66
[#203 storage_texture_type]: #125
[#203 texture_and_sampler_types]: #96
[#203 tilde]: #65
[#203 type_specifier_without_ident]: #80
[#203 uint32]: #92
[#203 unary_expression]: #60
[#203 vec_prefix]: #81
[#204 member_ident]: #296
[#204 swizzle_name]: #297
[#212 and]: #67
[#212 array_type_specifier]: #94
[#212 bang]: #64
[#212 bool_literal]: #86
[#212 callable]: #75
[#212 decimal_float_literal]: #111
[#212 decimal_int_literal]: #109
[#212 depth_texture_type]: #122
[#212 float16]: #90
[#212 float32]: #89
[#212 float_literal]: #85
[#212 hex_float_literal]: #112
[#212 hex_int_literal]: #110
[#212 ident]: #74
[#212 int32]: #91
[#212 int_literal]: #84
[#212 literal]: #76
[#212 mat_prefix]: #82
[#212 minus]: #63
[#212 multisampled_texture_type]: #124
[#212 paren_expression]: #77
[#212 paren_left]: #87
[#212 pointer]: #93
[#212 primary_expression]: #68
[#212 sampled_texture_type]: #123
[#212 sampler_type]: #121
[#212 singular_expression]: #62
[#212 star]: #66
[#212 storage_texture_type]: #125
[#212 texture_and_sampler_types]: #96
[#212 tilde]: #65
[#212 type_specifier_without_ident]: #80
[#212 uint32]: #92
[#212 unary_expression]: #295
[#212 vec_prefix]: #81
[#218 and]: #67
[#218 array_type_specifier]: #94
[#218 bang]: #64
[#218 bool_literal]: #86
[#218 callable]: #75
[#218 decimal_float_literal]: #111
[#218 decimal_int_literal]: #109
[#218 depth_texture_type]: #122
[#218 float16]: #90
[#218 float32]: #89
[#218 float_literal]: #85
[#218 hex_float_literal]: #112
[#218 hex_int_literal]: #110
[#218 ident]: #74
[#218 int32]: #91
[#218 int_literal]: #84
[#218 literal]: #76
[#218 mat_prefix]: #82
[#218 minus]: #63
[#218 multisampled_texture_type]: #124
[#218 paren_expression]: #77
[#218 paren_left]: #87
[#218 pointer]: #93
[#218 primary_expression]: #68
[#218 sampled_texture_type]: #123
[#218 sampler_type]: #121
[#218 singular_expression]: #62
[#218 star]: #66
[#218 storage_texture_type]: #125
[#218 texture_and_sampler_types]: #96
[#218 tilde]: #65
[#218 type_specifier_without_ident]: #80
[#218 uint32]: #92
[#218 unary_expression]: #294
[#218 vec_prefix]: #81
[#219 and]: #67
[#219 array_type_specifier]: #94
[#219 bang]: #64
[#219 bool_literal]: #86
[#219 callable]: #75
[#219 decimal_float_literal]: #111
[#219 decimal_int_literal]: #109
[#219 depth_texture_type]: #122
[#219 float16]: #90
[#219 float32]: #89
[#219 float_literal]: #85
[#219 hex_float_literal]: #112
[#219 hex_int_literal]: #110
[#219 ident]: #74
[#219 int32]: #91
[#219 int_literal]: #84
[#219 literal]: #76
[#219 mat_prefix]: #82
[#219 minus]: #63
[#219 multisampled_texture_type]: #124
[#219 paren_expression]: #77
[#219 paren_left]: #87
[#219 pointer]: #93
[#219 primary_expression]: #68
[#219 sampled_texture_type]: #123
[#219 sampler_type]: #121
[#219 singular_expression]: #62
[#219 star]: #66
[#219 storage_texture_type]: #125
[#219 texture_and_sampler_types]: #96
[#219 tilde]: #65
[#219 type_specifier_without_ident]: #80
[#219 uint32]: #92
[#219 unary_expression]: #293
[#219 vec_prefix]: #81
[#222 and]: #67
[#222 array_type_specifier]: #94
[#222 bang]: #64
[#222 bool_literal]: #86
[#222 callable]: #75
[#222 decimal_float_literal]: #111
[#222 decimal_int_literal]: #109
[#222 depth_texture_type]: #122
[#222 float16]: #90
[#222 float32]: #89
[#222 float_literal]: #85
[#222 hex_float_literal]: #112
[#222 hex_int_literal]: #110
[#222 ident]: #74
[#222 int32]: #91
[#222 int_literal]: #84
[#222 literal]: #76
[#222 mat_prefix]: #82
[#222 minus]: #63
[#222 multiplicative_expression]: #291
[#222 multisampled_texture_type]: #124
[#222 paren_expression]: #77
[#222 paren_left]: #87
[#222 pointer]: #93
[#222 primary_expression]: #68
[#222 sampled_texture_type]: #123
[#222 sampler_type]: #121
[#222 singular_expression]: #62
[#222 star]: #66
[#222 storage_texture_type]: #125
[#222 texture_and_sampler_types]: #96
[#222 tilde]: #65
[#222 type_specifier_without_ident]: #80
[#222 uint32]: #92
[#222 unary_expression]: #292
[#222 vec_prefix]: #81
[#226 and]: #67
[#226 array_type_specifier]: #94
[#226 bang]: #64
[#226 bool_literal]: #86
[#226 callable]: #75
[#226 decimal_float_literal]: #111
[#226 decimal_int_literal]: #109
[#226 depth_texture_type]: #122
[#226 float16]: #90
[#226 float32]: #89
[#226 float_literal]: #85
[#226 hex_float_literal]: #112
[#226 hex_int_literal]: #110
[#226 ident]: #74
[#226 int32]: #91
[#226 int_literal]: #84
[#226 literal]: #76
[#226 mat_prefix]: #82
[#226 minus]: #63
[#226 multisampled_texture_type]: #124
[#226 paren_expression]: #77
[#226 paren_left]: #87
[#226 pointer]: #93
[#226 primary_expression]: #68
[#226 sampled_texture_type]: #123
[#226 sampler_type]: #121
[#226 singular_expression]: #62
[#226 star]: #66
[#226 storage_texture_type]: #125
[#226 texture_and_sampler_types]: #96
[#226 tilde]: #65
[#226 type_specifier_without_ident]: #80
[#226 uint32]: #92
[#226 unary_expression]: #290
[#226 vec_prefix]: #81
[#228 and]: #67
[#228 array_type_specifier]: #94
[#228 bang]: #64
[#228 bool_literal]: #86
[#228 callable]: #75
[#228 decimal_float_literal]: #111
[#228 decimal_int_literal]: #109
[#228 depth_texture_type]: #122
[#228 float16]: #90
[#228 float32]: #89
[#228 float_literal]: #85
[#228 hex_float_literal]: #112
[#228 hex_int_literal]: #110
[#228 ident]: #74
[#228 int32]: #91
[#228 int_literal]: #84
[#228 literal]: #76
[#228 mat_prefix]: #82
[#228 minus]: #63
[#228 multisampled_texture_type]: #124
[#228 paren_expression]: #77
[#228 paren_left]: #87
[#228 pointer]: #93
[#228 primary_expression]: #68
[#228 sampled_texture_type]: #123
[#228 sampler_type]: #121
[#228 singular_expression]: #62
[#228 star]: #66
[#228 storage_texture_type]: #125
[#228 texture_and_sampler_types]: #96
[#228 tilde]: #65
[#228 type_specifier_without_ident]: #80
[#228 uint32]: #92
[#228 unary_expression]: #289
[#228 vec_prefix]: #81
[#230 and]: #67
[#230 array_type_specifier]: #94
[#230 bang]: #64
[#230 bool_literal]: #86
[#230 callable]: #75
[#230 decimal_float_literal]: #111
[#230 decimal_int_literal]: #109
[#230 depth_texture_type]: #122
[#230 float16]: #90
[#230 float32]: #89
[#230 float_literal]: #85
[#230 hex_float_literal]: #112
[#230 hex_int_literal]: #110
[#230 ident]: #74
[#230 int32]: #91
[#230 int_literal]: #84
[#230 literal]: #76
[#230 mat_prefix]: #82
[#230 minus]: #63
[#230 multisampled_texture_type]: #124
[#230 paren_expression]: #77
[#230 paren_left]: #87
[#230 pointer]: #93
[#230 primary_expression]: #68
[#230 sampled_texture_type]: #123
[#230 sampler_type]: #121
[#230 singular_expression]: #62
[#230 star]: #66
[#230 storage_texture_type]: #125
[#230 texture_and_sampler_types]: #96
[#230 tilde]: #65
[#230 type_specifier_without_ident]: #80
[#230 uint32]: #92
[#230 unary_expression]: #288
[#230 vec_prefix]: #81
[#231 additive_expression]: #59
[#231 and]: #67
[#231 array_type_specifier]: #94
[#231 bang]: #64
[#231 bool_literal]: #86
[#231 callable]: #75
[#231 decimal_float_literal]: #111
[#231 decimal_int_literal]: #109
[#231 depth_texture_type]: #122
[#231 float16]: #90
[#231 float32]: #89
[#231 float_literal]: #85
[#231 hex_float_literal]: #112
[#231 hex_int_literal]: #110
[#231 ident]: #74
[#231 int32]: #91
[#231 int_literal]: #84
[#231 literal]: #76
[#231 mat_prefix]: #82
[#231 minus]: #63
[#231 multiplicative_expression]: #61
[#231 multisampled_texture_type]: #124
[#231 paren_expression]: #77
[#231 paren_left]: #87
[#231 pointer]: #93
[#231 primary_expression]: #68
[#231 sampled_texture_type]: #123
[#231 sampler_type]: #121
[#231 shift_expression]: #287
[#231 singular_expression]: #62
[#231 star]: #66
[#231 storage_texture_type]: #125
[#231 texture_and_sampler_types]: #96
[#231 tilde]: #65
[#231 type_specifier_without_ident]: #80
[#231 uint32]: #92
[#231 unary_expression]: #280
[#231 vec_prefix]: #81
[#232 additive_expression]: #59
[#232 and]: #67
[#232 array_type_specifier]: #94
[#232 bang]: #64
[#232 bool_literal]: #86
[#232 callable]: #75
[#232 decimal_float_literal]: #111
[#232 decimal_int_literal]: #109
[#232 depth_texture_type]: #122
[#232 float16]: #90
[#232 float32]: #89
[#232 float_literal]: #85
[#232 hex_float_literal]: #112
[#232 hex_int_literal]: #110
[#232 ident]: #74
[#232 int32]: #91
[#232 int_literal]: #84
[#232 literal]: #76
[#232 mat_prefix]: #82
[#232 minus]: #63
[#232 multiplicative_expression]: #61
[#232 multisampled_texture_type]: #124
[#232 paren_expression]: #77
[#232 paren_left]: #87
[#232 pointer]: #93
[#232 primary_expression]: #68
[#232 sampled_texture_type]: #123
[#232 sampler_type]: #121
[#232 shift_expression]: #286
[#232 singular_expression]: #62
[#232 star]: #66
[#232 storage_texture_type]: #125
[#232 texture_and_sampler_types]: #96
[#232 tilde]: #65
[#232 type_specifier_without_ident]: #80
[#232 uint32]: #92
[#232 unary_expression]: #280
[#232 vec_prefix]: #81
[#233 additive_expression]: #59
[#233 and]: #67
[#233 array_type_specifier]: #94
[#233 bang]: #64
[#233 bool_literal]: #86
[#233 callable]: #75
[#233 decimal_float_literal]: #111
[#233 decimal_int_literal]: #109
[#233 depth_texture_type]: #122
[#233 float16]: #90
[#233 float32]: #89
[#233 float_literal]: #85
[#233 hex_float_literal]: #112
[#233 hex_int_literal]: #110
[#233 ident]: #74
[#233 int32]: #91
[#233 int_literal]: #84
[#233 literal]: #76
[#233 mat_prefix]: #82
[#233 minus]: #63
[#233 multiplicative_expression]: #61
[#233 multisampled_texture_type]: #124
[#233 paren_expression]: #77
[#233 paren_left]: #87
[#233 pointer]: #93
[#233 primary_expression]: #68
[#233 sampled_texture_type]: #123
[#233 sampler_type]: #121
[#233 shift_expression]: #285
[#233 singular_expression]: #62
[#233 star]: #66
[#233 storage_texture_type]: #125
[#233 texture_and_sampler_types]: #96
[#233 tilde]: #65
[#233 type_specifier_without_ident]: #80
[#233 uint32]: #92
[#233 unary_expression]: #280
[#233 vec_prefix]: #81
[#234 additive_expression]: #59
[#234 and]: #67
[#234 array_type_specifier]: #94
[#234 bang]: #64
[#234 bool_literal]: #86
[#234 callable]: #75
[#234 decimal_float_literal]: #111
[#234 decimal_int_literal]: #109
[#234 depth_texture_type]: #122
[#234 float16]: #90
[#234 float32]: #89
[#234 float_literal]: #85
[#234 hex_float_literal]: #112
[#234 hex_int_literal]: #110
[#234 ident]: #74
[#234 int32]: #91
[#234 int_literal]: #84
[#234 literal]: #76
[#234 mat_prefix]: #82
[#234 minus]: #63
[#234 multiplicative_expression]: #61
[#234 multisampled_texture_type]: #124
[#234 paren_expression]: #77
[#234 paren_left]: #87
[#234 pointer]: #93
[#234 primary_expression]: #68
[#234 sampled_texture_type]: #123
[#234 sampler_type]: #121
[#234 shift_expression]: #284
[#234 singular_expression]: #62
[#234 star]: #66
[#234 storage_texture_type]: #125
[#234 texture_and_sampler_types]: #96
[#234 tilde]: #65
[#234 type_specifier_without_ident]: #80
[#234 uint32]: #92
[#234 unary_expression]: #280
[#234 vec_prefix]: #81
[#235 additive_expression]: #59
[#235 and]: #67
[#235 array_type_specifier]: #94
[#235 bang]: #64
[#235 bool_literal]: #86
[#235 callable]: #75
[#235 decimal_float_literal]: #111
[#235 decimal_int_literal]: #109
[#235 depth_texture_type]: #122
[#235 float16]: #90
[#235 float32]: #89
[#235 float_literal]: #85
[#235 hex_float_literal]: #112
[#235 hex_int_literal]: #110
[#235 ident]: #74
[#235 int32]: #91
[#235 int_literal]: #84
[#235 literal]: #76
[#235 mat_prefix]: #82
[#235 minus]: #63
[#235 multiplicative_expression]: #61
[#235 multisampled_texture_type]: #124
[#235 paren_expression]: #77
[#235 paren_left]: #87
[#235 pointer]: #93
[#235 primary_expression]: #68
[#235 sampled_texture_type]: #123
[#235 sampler_type]: #121
[#235 shift_expression]: #283
[#235 singular_expression]: #62
[#235 star]: #66
[#235 storage_texture_type]: #125
[#235 texture_and_sampler_types]: #96
[#235 tilde]: #65
[#235 type_specifier_without_ident]: #80
[#235 uint32]: #92
[#235 unary_expression]: #280
[#235 vec_prefix]: #81
[#236 additive_expression]: #59
[#236 and]: #67
[#236 array_type_specifier]: #94
[#236 bang]: #64
[#236 bool_literal]: #86
[#236 callable]: #75
[#236 decimal_float_literal]: #111
[#236 decimal_int_literal]: #109
[#236 depth_texture_type]: #122
[#236 float16]: #90
[#236 float32]: #89
[#236 float_literal]: #85
[#236 hex_float_literal]: #112
[#236 hex_int_literal]: #110
[#236 ident]: #74
[#236 int32]: #91
[#236 int_literal]: #84
[#236 literal]: #76
[#236 mat_prefix]: #82
[#236 minus]: #63
[#236 multiplicative_expression]: #61
[#236 multisampled_texture_type]: #124
[#236 paren_expression]: #77
[#236 paren_left]: #87
[#236 pointer]: #93
[#236 primary_expression]: #68
[#236 sampled_texture_type]: #123
[#236 sampler_type]: #121
[#236 shift_expression]: #282
[#236 singular_expression]: #62
[#236 star]: #66
[#236 storage_texture_type]: #125
[#236 texture_and_sampler_types]: #96
[#236 tilde]: #65
[#236 type_specifier_without_ident]: #80
[#236 uint32]: #92
[#236 unary_expression]: #280
[#236 vec_prefix]: #81
[#242 additive_expression]: #59
[#242 and]: #67
[#242 array_type_specifier]: #94
[#242 bang]: #64
[#242 bool_literal]: #86
[#242 callable]: #75
[#242 decimal_float_literal]: #111
[#242 decimal_int_literal]: #109
[#242 depth_texture_type]: #122
[#242 float16]: #90
[#242 float32]: #89
[#242 float_literal]: #85
[#242 hex_float_literal]: #112
[#242 hex_int_literal]: #110
[#242 ident]: #74
[#242 int32]: #91
[#242 int_literal]: #84
[#242 literal]: #76
[#242 mat_prefix]: #82
[#242 minus]: #63
[#242 multiplicative_expression]: #61
[#242 multisampled_texture_type]: #124
[#242 paren_expression]: #77
[#242 paren_left]: #87
[#242 pointer]: #93
[#242 primary_expression]: #68
[#242 relational_expression]: #281
[#242 sampled_texture_type]: #123
[#242 sampler_type]: #121
[#242 shift_expression]: #55
[#242 singular_expression]: #62
[#242 star]: #66
[#242 storage_texture_type]: #125
[#242 texture_and_sampler_types]: #96
[#242 tilde]: #65
[#242 type_specifier_without_ident]: #80
[#242 uint32]: #92
[#242 unary_expression]: #280
[#242 vec_prefix]: #81
[#244 additive_expression]: #59
[#244 and]: #67
[#244 array_type_specifier]: #94
[#244 bang]: #64
[#244 bool_literal]: #86
[#244 callable]: #75
[#244 decimal_float_literal]: #111
[#244 decimal_int_literal]: #109
[#244 depth_texture_type]: #122
[#244 float16]: #90
[#244 float32]: #89
[#244 float_literal]: #85
[#244 hex_float_literal]: #112
[#244 hex_int_literal]: #110
[#244 ident]: #74
[#244 int32]: #91
[#244 int_literal]: #84
[#244 literal]: #76
[#244 mat_prefix]: #82
[#244 minus]: #63
[#244 multiplicative_expression]: #61
[#244 multisampled_texture_type]: #124
[#244 paren_expression]: #77
[#244 paren_left]: #87
[#244 pointer]: #93
[#244 primary_expression]: #68
[#244 relational_expression]: #279
[#244 sampled_texture_type]: #123
[#244 sampler_type]: #121
[#244 shift_expression]: #55
[#244 singular_expression]: #62
[#244 star]: #66
[#244 storage_texture_type]: #125
[#244 texture_and_sampler_types]: #96
[#244 tilde]: #65
[#244 type_specifier_without_ident]: #80
[#244 uint32]: #92
[#244 unary_expression]: #280
[#244 vec_prefix]: #81
[#246 additive_expression]: #59
[#246 and]: #67
[#246 array_type_specifier]: #94
[#246 bang]: #64
[#246 binary_and_expression]: #56
[#246 binary_or_expression]: #57
[#246 binary_xor_expression]: #58
[#246 bitwise_expression]: #54
[#246 bool_literal]: #86
[#246 callable]: #75
[#246 decimal_float_literal]: #111
[#246 decimal_int_literal]: #109
[#246 depth_texture_type]: #122
[#246 expression]: #278
[#246 float16]: #90
[#246 float32]: #89
[#246 float_literal]: #85
[#246 hex_float_literal]: #112
[#246 hex_int_literal]: #110
[#246 ident]: #74
[#246 int32]: #91
[#246 int_literal]: #84
[#246 literal]: #76
[#246 mat_prefix]: #82
[#246 minus]: #63
[#246 multiplicative_expression]: #61
[#246 multisampled_texture_type]: #124
[#246 paren_expression]: #77
[#246 paren_left]: #87
[#246 pointer]: #93
[#246 primary_expression]: #68
[#246 relational_expression]: #51
[#246 sampled_texture_type]: #123
[#246 sampler_type]: #121
[#246 shift_expression]: #55
[#246 short_circuit_and_expression]: #53
[#246 short_circuit_or_expression]: #52
[#246 singular_expression]: #62
[#246 star]: #66
[#246 storage_texture_type]: #125
[#246 texture_and_sampler_types]: #96
[#246 tilde]: #65
[#246 type_specifier_without_ident]: #80
[#246 uint32]: #92
[#246 unary_expression]: #60
[#246 vec_prefix]: #81
[#247 additive_expression]: #59
[#247 and]: #67
[#247 array_type_specifier]: #94
[#247 bang]: #64
[#247 binary_and_expression]: #56
[#247 binary_or_expression]: #57
[#247 binary_xor_expression]: #58
[#247 bitwise_expression]: #54
[#247 bool_literal]: #86
[#247 callable]: #75
[#247 decimal_float_literal]: #111
[#247 decimal_int_literal]: #109
[#247 depth_texture_type]: #122
[#247 expression]: #277
[#247 float16]: #90
[#247 float32]: #89
[#247 float_literal]: #85
[#247 hex_float_literal]: #112
[#247 hex_int_literal]: #110
[#247 ident]: #74
[#247 int32]: #91
[#247 int_literal]: #84
[#247 literal]: #76
[#247 mat_prefix]: #82
[#247 minus]: #63
[#247 multiplicative_expression]: #61
[#247 multisampled_texture_type]: #124
[#247 paren_expression]: #77
[#247 paren_left]: #87
[#247 pointer]: #93
[#247 primary_expression]: #68
[#247 relational_expression]: #51
[#247 sampled_texture_type]: #123
[#247 sampler_type]: #121
[#247 shift_expression]: #55
[#247 short_circuit_and_expression]: #53
[#247 short_circuit_or_expression]: #52
[#247 singular_expression]: #62
[#247 star]: #66
[#247 storage_texture_type]: #125
[#247 texture_and_sampler_types]: #96
[#247 tilde]: #65
[#247 type_specifier_without_ident]: #80
[#247 uint32]: #92
[#247 unary_expression]: #60
[#247 vec_prefix]: #81
[#248 additive_expression]: #59
[#248 and]: #67
[#248 array_type_specifier]: #94
[#248 bang]: #64
[#248 binary_and_expression]: #56
[#248 binary_or_expression]: #57
[#248 binary_xor_expression]: #58
[#248 bitwise_expression]: #54
[#248 bool_literal]: #86
[#248 callable]: #75
[#248 decimal_float_literal]: #111
[#248 decimal_int_literal]: #109
[#248 depth_texture_type]: #122
[#248 expression]: #276
[#248 float16]: #90
[#248 float32]: #89
[#248 float_literal]: #85
[#248 hex_float_literal]: #112
[#248 hex_int_literal]: #110
[#248 ident]: #74
[#248 int32]: #91
[#248 int_literal]: #84
[#248 literal]: #76
[#248 mat_prefix]: #82
[#248 minus]: #63
[#248 multiplicative_expression]: #61
[#248 multisampled_texture_type]: #124
[#248 paren_expression]: #77
[#248 paren_left]: #87
[#248 pointer]: #93
[#248 primary_expression]: #68
[#248 relational_expression]: #51
[#248 sampled_texture_type]: #123
[#248 sampler_type]: #121
[#248 shift_expression]: #55
[#248 short_circuit_and_expression]: #53
[#248 short_circuit_or_expression]: #52
[#248 singular_expression]: #62
[#248 star]: #66
[#248 storage_texture_type]: #125
[#248 texture_and_sampler_types]: #96
[#248 tilde]: #65
[#248 type_specifier_without_ident]: #80
[#248 uint32]: #92
[#248 unary_expression]: #60
[#248 vec_prefix]: #81
[#249 interpolation_type_name]: #272
[#250 additive_expression]: #59
[#250 and]: #67
[#250 array_type_specifier]: #94
[#250 bang]: #64
[#250 binary_and_expression]: #56
[#250 binary_or_expression]: #57
[#250 binary_xor_expression]: #58
[#250 bitwise_expression]: #54
[#250 bool_literal]: #86
[#250 callable]: #75
[#250 decimal_float_literal]: #111
[#250 decimal_int_literal]: #109
[#250 depth_texture_type]: #122
[#250 expression]: #271
[#250 float16]: #90
[#250 float32]: #89
[#250 float_literal]: #85
[#250 hex_float_literal]: #112
[#250 hex_int_literal]: #110
[#250 ident]: #74
[#250 int32]: #91
[#250 int_literal]: #84
[#250 literal]: #76
[#250 mat_prefix]: #82
[#250 minus]: #63
[#250 multiplicative_expression]: #61
[#250 multisampled_texture_type]: #124
[#250 paren_expression]: #77
[#250 paren_left]: #87
[#250 pointer]: #93
[#250 primary_expression]: #68
[#250 relational_expression]: #51
[#250 sampled_texture_type]: #123
[#250 sampler_type]: #121
[#250 shift_expression]: #55
[#250 short_circuit_and_expression]: #53
[#250 short_circuit_or_expression]: #52
[#250 singular_expression]: #62
[#250 star]: #66
[#250 storage_texture_type]: #125
[#250 texture_and_sampler_types]: #96
[#250 tilde]: #65
[#250 type_specifier_without_ident]: #80
[#250 uint32]: #92
[#250 unary_expression]: #60
[#250 vec_prefix]: #81
[#251 additive_expression]: #59
[#251 and]: #67
[#251 array_type_specifier]: #94
[#251 bang]: #64
[#251 binary_and_expression]: #56
[#251 binary_or_expression]: #57
[#251 binary_xor_expression]: #58
[#251 bitwise_expression]: #54
[#251 bool_literal]: #86
[#251 callable]: #75
[#251 decimal_float_literal]: #111
[#251 decimal_int_literal]: #109
[#251 depth_texture_type]: #122
[#251 expression]: #270
[#251 float16]: #90
[#251 float32]: #89
[#251 float_literal]: #85
[#251 hex_float_literal]: #112
[#251 hex_int_literal]: #110
[#251 ident]: #74
[#251 int32]: #91
[#251 int_literal]: #84
[#251 literal]: #76
[#251 mat_prefix]: #82
[#251 minus]: #63
[#251 multiplicative_expression]: #61
[#251 multisampled_texture_type]: #124
[#251 paren_expression]: #77
[#251 paren_left]: #87
[#251 pointer]: #93
[#251 primary_expression]: #68
[#251 relational_expression]: #51
[#251 sampled_texture_type]: #123
[#251 sampler_type]: #121
[#251 shift_expression]: #55
[#251 short_circuit_and_expression]: #53
[#251 short_circuit_or_expression]: #52
[#251 singular_expression]: #62
[#251 star]: #66
[#251 storage_texture_type]: #125
[#251 texture_and_sampler_types]: #96
[#251 tilde]: #65
[#251 type_specifier_without_ident]: #80
[#251 uint32]: #92
[#251 unary_expression]: #60
[#251 vec_prefix]: #81
[#252 builtin_value_name]: #257
[#253 additive_expression]: #59
[#253 and]: #67
[#253 array_type_specifier]: #94
[#253 bang]: #64
[#253 binary_and_expression]: #56
[#253 binary_or_expression]: #57
[#253 binary_xor_expression]: #58
[#253 bitwise_expression]: #54
[#253 bool_literal]: #86
[#253 callable]: #75
[#253 decimal_float_literal]: #111
[#253 decimal_int_literal]: #109
[#253 depth_texture_type]: #122
[#253 expression]: #256
[#253 float16]: #90
[#253 float32]: #89
[#253 float_literal]: #85
[#253 hex_float_literal]: #112
[#253 hex_int_literal]: #110
[#253 ident]: #74
[#253 int32]: #91
[#253 int_literal]: #84
[#253 literal]: #76
[#253 mat_prefix]: #82
[#253 minus]: #63
[#253 multiplicative_expression]: #61
[#253 multisampled_texture_type]: #124
[#253 paren_expression]: #77
[#253 paren_left]: #87
[#253 pointer]: #93
[#253 primary_expression]: #68
[#253 relational_expression]: #51
[#253 sampled_texture_type]: #123
[#253 sampler_type]: #121
[#253 shift_expression]: #55
[#253 short_circuit_and_expression]: #53
[#253 short_circuit_or_expression]: #52
[#253 singular_expression]: #62
[#253 star]: #66
[#253 storage_texture_type]: #125
[#253 texture_and_sampler_types]: #96
[#253 tilde]: #65
[#253 type_specifier_without_ident]: #80
[#253 uint32]: #92
[#253 unary_expression]: #60
[#253 vec_prefix]: #81
[#254 additive_expression]: #59
[#254 and]: #67
[#254 array_type_specifier]: #94
[#254 bang]: #64
[#254 binary_and_expression]: #56
[#254 binary_or_expression]: #57
[#254 binary_xor_expression]: #58
[#254 bitwise_expression]: #54
[#254 bool_literal]: #86
[#254 callable]: #75
[#254 decimal_float_literal]: #111
[#254 decimal_int_literal]: #109
[#254 depth_texture_type]: #122
[#254 expression]: #255
[#254 float16]: #90
[#254 float32]: #89
[#254 float_literal]: #85
[#254 hex_float_literal]: #112
[#254 hex_int_literal]: #110
[#254 ident]: #74
[#254 int32]: #91
[#254 int_literal]: #84
[#254 literal]: #76
[#254 mat_prefix]: #82
[#254 minus]: #63
[#254 multiplicative_expression]: #61
[#254 multisampled_texture_type]: #124
[#254 paren_expression]: #77
[#254 paren_left]: #87
[#254 pointer]: #93
[#254 primary_expression]: #68
[#254 relational_expression]: #51
[#254 sampled_texture_type]: #123
[#254 sampler_type]: #121
[#254 shift_expression]: #55
[#254 short_circuit_and_expression]: #53
[#254 short_circuit_or_expression]: #52
[#254 singular_expression]: #62
[#254 star]: #66
[#254 storage_texture_type]: #125
[#254 texture_and_sampler_types]: #96
[#254 tilde]: #65
[#254 type_specifier_without_ident]: #80
[#254 uint32]: #92
[#254 unary_expression]: #60
[#254 vec_prefix]: #81
[#255 attrib_end]: #510
[#255 attrib_end/0.0]: #500
[#255 comma]: #502
[#256 attrib_end]: #509
[#256 attrib_end/0.0]: #500
[#256 comma]: #502
[#257 attrib_end]: #508
[#257 attrib_end/0.0]: #500
[#257 comma]: #502
[#270 attrib_end]: #507
[#270 attrib_end/0.0]: #500
[#270 comma]: #502
[#271 attrib_end]: #506
[#271 attrib_end/0.0]: #500
[#271 comma]: #502
[#272 attrib_end]: #504
[#272 attrib_end/0.0]: #500
[#272 comma]: #505
[#276 attrib_end]: #503
[#276 attrib_end/0.0]: #500
[#276 comma]: #502
[#277 attrib_end]: #501
[#277 attrib_end/0.0]: #500
[#277 comma]: #502
[#278 attrib_end]: #498
[#278 attrib_end/0.0]: #500
[#278 comma]: #499
[#280 shift_left]: #218
[#280 shift_right]: #219
[#291 forward_slash]: #214
[#291 modulo]: #215
[#291 multiplicative_operator]: #212
[#291 star]: #213
[#296 bracket_left]: #203
[#296 component_or_swizzle_specifier]: #497
[#296 component_or_swizzle_specifier/1.2]: #496
[#296 period]: #204
[#297 bracket_left]: #203
[#297 component_or_swizzle_specifier]: #495
[#297 component_or_swizzle_specifier/2.2]: #494
[#297 period]: #204
[#307 bracket_right]: #492
[#308 paren_right]: #491
[#309 argument_expression_list/0.1/0.1]: #487
[#309 argument_expression_list/0.1/0.1/0]: #488
[#309 argument_expression_list/0.1/0.1/0/0.0]: #489
[#309 comma]: #490
[#310 greater_than]: #486
[#313 less_than]: #197
[#314 less_than]: #196
[#315 less_than]: #195
[#316 greater_than]: #485
[#317 greater_than]: #484
[#318 array_type_specifier/0.3]: #482
[#318 comma]: #483
[#321 comma]: #481
[#327 greater_than]: #480
[#328 greater_than]: #479
[#329 greater_than]: #478
[#330 comma]: #477
[#347 brace_right]: #475
[#349 and]: #385
[#349 assignment_statement]: #377
[#349 brace_left]: #188
[#349 break_statement]: #359
[#349 compound_statement]: #363
[#349 compound_statement/0.1/0]: #474
[#349 continue_statement]: #360
[#349 core_lhs_expression]: #383
[#349 decrement_statement]: #379
[#349 for_statement]: #355
[#349 func_call_statement]: #357
[#349 ident]: #371
[#349 if_clause]: #366
[#349 if_statement]: #352
[#349 increment_statement]: #378
[#349 lhs_expression]: #381
[#349 loop_statement]: #354
[#349 paren_left]: #387
[#349 return_statement]: #351
[#349 semicolon]: #350
[#349 star]: #384
[#349 statement]: #349
[#349 static_assert_statement]: #364
[#349 switch_statement]: #353
[#349 underscore]: #382
[#349 variable_decl]: #372
[#349 variable_statement]: #358
[#349 variable_updating_statement]: #362
[#349 while_statement]: #356
[#351 semicolon]: #473
[#357 semicolon]: #472
[#358 semicolon]: #471
[#359 semicolon]: #470
[#360 semicolon]: #469
[#361 semicolon]: #468
[#362 semicolon]: #467
[#364 semicolon]: #466
[#365 additive_expression]: #59
[#365 and]: #67
[#365 array_type_specifier]: #94
[#365 bang]: #64
[#365 binary_and_expression]: #56
[#365 binary_or_expression]: #57
[#365 binary_xor_expression]: #58
[#365 bitwise_expression]: #54
[#365 bool_literal]: #86
[#365 callable]: #75
[#365 decimal_float_literal]: #111
[#365 decimal_int_literal]: #109
[#365 depth_texture_type]: #122
[#365 expression]: #465
[#365 float16]: #90
[#365 float32]: #89
[#365 float_literal]: #85
[#365 hex_float_literal]: #112
[#365 hex_int_literal]: #110
[#365 ident]: #74
[#365 int32]: #91
[#365 int_literal]: #84
[#365 literal]: #76
[#365 mat_prefix]: #82
[#365 minus]: #63
[#365 multiplicative_expression]: #61
[#365 multisampled_texture_type]: #124
[#365 paren_expression]: #77
[#365 paren_left]: #87
[#365 pointer]: #93
[#365 primary_expression]: #68
[#365 relational_expression]: #51
[#365 return_statement/0.1]: #464
[#365 sampled_texture_type]: #123
[#365 sampler_type]: #121
[#365 shift_expression]: #55
[#365 short_circuit_and_expression]: #53
[#365 short_circuit_or_expression]: #52
[#365 singular_expression]: #62
[#365 star]: #66
[#365 storage_texture_type]: #125
[#365 texture_and_sampler_types]: #96
[#365 tilde]: #65
[#365 type_specifier_without_ident]: #80
[#365 uint32]: #92
[#365 unary_expression]: #60
[#365 vec_prefix]: #81
[#366 else_if_clause]: #462
[#366 if_statement/0.1]: #460
[#366 if_statement/0.1/0]: #461
[#367 additive_expression]: #59
[#367 and]: #67
[#367 array_type_specifier]: #94
[#367 bang]: #64
[#367 binary_and_expression]: #56
[#367 binary_or_expression]: #57
[#367 binary_xor_expression]: #58
[#367 bitwise_expression]: #54
[#367 bool_literal]: #86
[#367 callable]: #75
[#367 decimal_float_literal]: #111
[#367 decimal_int_literal]: #109
[#367 depth_texture_type]: #122
[#367 expression]: #459
[#367 float16]: #90
[#367 float32]: #89
[#367 float_literal]: #85
[#367 hex_float_literal]: #112
[#367 hex_int_literal]: #110
[#367 ident]: #74
[#367 int32]: #91
[#367 int_literal]: #84
[#367 literal]: #76
[#367 mat_prefix]: #82
[#367 minus]: #63
[#367 multiplicative_expression]: #61
[#367 multisampled_texture_type]: #124
[#367 paren_expression]: #77
[#367 paren_left]: #87
[#367 pointer]: #93
[#367 primary_expression]: #68
[#367 relational_expression]: #51
[#367 sampled_texture_type]: #123
[#367 sampler_type]: #121
[#367 shift_expression]: #55
[#367 short_circuit_and_expression]: #53
[#367 short_circuit_or_expression]: #52
[#367 singular_expression]: #62
[#367 star]: #66
[#367 storage_texture_type]: #125
[#367 texture_and_sampler_types]: #96
[#367 tilde]: #65
[#367 type_specifier_without_ident]: #80
[#367 uint32]: #92
[#367 unary_expression]: #60
[#367 vec_prefix]: #81
[#368 brace_left]: #458
[#369 paren_left]: #457
[#370 additive_expression]: #59
[#370 and]: #67
[#370 array_type_specifier]: #94
[#370 bang]: #64
[#370 binary_and_expression]: #56
[#370 binary_or_expression]: #57
[#370 binary_xor_expression]: #58
[#370 bitwise_expression]: #54
[#370 bool_literal]: #86
[#370 callable]: #75
[#370 decimal_float_literal]: #111
[#370 decimal_int_literal]: #109
[#370 depth_texture_type]: #122
[#370 expression]: #456
[#370 float16]: #90
[#370 float32]: #89
[#370 float_literal]: #85
[#370 hex_float_literal]: #112
[#370 hex_int_literal]: #110
[#370 ident]: #74
[#370 int32]: #91
[#370 int_literal]: #84
[#370 literal]: #76
[#370 mat_prefix]: #82
[#370 minus]: #63
[#370 multiplicative_expression]: #61
[#370 multisampled_texture_type]: #124
[#370 paren_expression]: #77
[#370 paren_left]: #87
[#370 pointer]: #93
[#370 primary_expression]: #68
[#370 relational_expression]: #51
[#370 sampled_texture_type]: #123
[#370 sampler_type]: #121
[#370 shift_expression]: #55
[#370 short_circuit_and_expression]: #53
[#370 short_circuit_or_expression]: #52
[#370 singular_expression]: #62
[#370 star]: #66
[#370 storage_texture_type]: #125
[#370 texture_and_sampler_types]: #96
[#370 tilde]: #65
[#370 type_specifier_without_ident]: #80
[#370 uint32]: #92
[#370 unary_expression]: #60
[#370 vec_prefix]: #81
[#371 argument_expression_list]: #455
[#371 paren_left]: #200
[#372 equal]: #454
[#373 ident]: #161
[#373 optionally_typed_ident]: #453
[#374 ident]: #161
[#374 optionally_typed_ident]: #452
[#380 additive_expression]: #59
[#380 and]: #67
[#380 array_type_specifier]: #94
[#380 bang]: #64
[#380 binary_and_expression]: #56
[#380 binary_or_expression]: #57
[#380 binary_xor_expression]: #58
[#380 bitwise_expression]: #54
[#380 bool_literal]: #86
[#380 callable]: #75
[#380 decimal_float_literal]: #111
[#380 decimal_int_literal]: #109
[#380 depth_texture_type]: #122
[#380 expression]: #451
[#380 float16]: #90
[#380 float32]: #89
[#380 float_literal]: #85
[#380 hex_float_literal]: #112
[#380 hex_int_literal]: #110
[#380 ident]: #74
[#380 int32]: #91
[#380 int_literal]: #84
[#380 literal]: #76
[#380 mat_prefix]: #82
[#380 minus]: #63
[#380 multiplicative_expression]: #61
[#380 multisampled_texture_type]: #124
[#380 paren_expression]: #77
[#380 paren_left]: #87
[#380 pointer]: #93
[#380 primary_expression]: #68
[#380 relational_expression]: #51
[#380 sampled_texture_type]: #123
[#380 sampler_type]: #121
[#380 shift_expression]: #55
[#380 short_circuit_and_expression]: #53
[#380 short_circuit_or_expression]: #52
[#380 singular_expression]: #62
[#380 star]: #66
[#380 storage_texture_type]: #125
[#380 texture_and_sampler_types]: #96
[#380 tilde]: #65
[#380 type_specifier_without_ident]: #80
[#380 uint32]: #92
[#380 unary_expression]: #60
[#380 vec_prefix]: #81
[#381 and_equal]: #436
[#381 assignment_statement/0.1]: #424
[#381 compound_assignment_operator]: #428
[#381 division_equal]: #434
[#381 equal]: #427
[#381 minus_equal]: #432
[#381 minus_minus]: #426
[#381 modulo_equal]: #435
[#381 or_equal]: #437
[#381 plus_equal]: #431
[#381 plus_plus]: #425
[#381 shift_left_equal]: #440
[#381 shift_right_equal]: #439
[#381 times_equal]: #433
[#381 xor_equal]: #438
[#382 equal]: #423
[#383 bracket_left]: #203
[#383 component_or_swizzle_specifier]: #422
[#383 lhs_expression/0.1]: #421
[#383 period]: #204
[#384 and]: #385
[#384 core_lhs_expression]: #383
[#384 ident]: #418
[#384 lhs_expression]: #420
[#384 paren_left]: #387
[#384 star]: #384
[#385 and]: #385
[#385 core_lhs_expression]: #383
[#385 ident]: #418
[#385 lhs_expression]: #419
[#385 paren_left]: #387
[#385 star]: #384
[#387 and]: #385
[#387 core_lhs_expression]: #383
[#387 ident]: #418
[#387 lhs_expression]: #417
[#387 paren_left]: #387
[#387 star]: #384
[#388 attr]: #31
[#388 attribute]: #416
[#388 function_header/0.3]: #411
[#388 param]: #413
[#388 param/0.0]: #414
[#388 param/0.0/0]: #415
[#388 param_list]: #412
[#389 comma]: #410
[#389 struct_body_decl/0.2]: #407
[#389 struct_body_decl/0.2/0]: #408
[#389 struct_body_decl/0.2/0/0.0]: #409
[#390 member_ident]: #406
[#392 attr]: #31
[#392 attribute]: #392
[#392 struct_member/0.0/0]: #405
[#395 additive_expression]: #59
[#395 and]: #67
[#395 array_type_specifier]: #94
[#395 bang]: #64
[#395 binary_and_expression]: #56
[#395 binary_or_expression]: #57
[#395 binary_xor_expression]: #58
[#395 bitwise_expression]: #54
[#395 bool_literal]: #86
[#395 callable]: #75
[#395 decimal_float_literal]: #111
[#395 decimal_int_literal]: #109
[#395 depth_texture_type]: #122
[#395 expression]: #404
[#395 float16]: #90
[#395 float32]: #89
[#395 float_literal]: #85
[#395 hex_float_literal]: #112
[#395 hex_int_literal]: #110
[#395 ident]: #74
[#395 int32]: #91
[#395 int_literal]: #84
[#395 literal]: #76
[#395 mat_prefix]: #82
[#395 minus]: #63
[#395 multiplicative_expression]: #61
[#395 multisampled_texture_type]: #124
[#395 paren_expression]: #77
[#395 paren_left]: #87
[#395 pointer]: #93
[#395 primary_expression]: #68
[#395 relational_expression]: #51
[#395 sampled_texture_type]: #123
[#395 sampler_type]: #121
[#395 shift_expression]: #55
[#395 short_circuit_and_expression]: #53
[#395 short_circuit_or_expression]: #52
[#395 singular_expression]: #62
[#395 star]: #66
[#395 storage_texture_type]: #125
[#395 texture_and_sampler_types]: #96
[#395 tilde]: #65
[#395 type_specifier_without_ident]: #80
[#395 uint32]: #92
[#395 unary_expression]: #60
[#395 vec_prefix]: #81
[#399 comma]: #402
[#399 variable_qualifier/0.2]: #401
[#401 greater_than]: #570
[#402 access_mode]: #569
[#406 colon]: #568
[#407 comma]: #567
[#407 struct_body_decl/0.3]: #566
[#409 comma]: #410
[#409 struct_body_decl/0.2/0]: #565
[#409 struct_body_decl/0.2/0/0.0]: #409
[#410 attr]: #31
[#410 attribute]: #392
[#410 struct_member]: #564
[#410 struct_member/0.0]: #390
[#410 struct_member/0.0/0]: #391
[#411 paren_right]: #563
[#413 comma]: #562
[#413 param_list/0.1]: #559
[#413 param_list/0.1/0]: #560
[#413 param_list/0.1/0/0.0]: #561
[#414 ident]: #558
[#416 attr]: #31
[#416 attribute]: #416
[#416 param/0.0/0]: #557
[#417 paren_right]: #556
[#423 additive_expression]: #59
[#423 and]: #67
[#423 array_type_specifier]: #94
[#423 bang]: #64
[#423 binary_and_expression]: #56
[#423 binary_or_expression]: #57
[#423 binary_xor_expression]: #58
[#423 bitwise_expression]: #54
[#423 bool_literal]: #86
[#423 callable]: #75
[#423 decimal_float_literal]: #111
[#423 decimal_int_literal]: #109
[#423 depth_texture_type]: #122
[#423 expression]: #555
[#423 float16]: #90
[#423 float32]: #89
[#423 float_literal]: #85
[#423 hex_float_literal]: #112
[#423 hex_int_literal]: #110
[#423 ident]: #74
[#423 int32]: #91
[#423 int_literal]: #84
[#423 literal]: #76
[#423 mat_prefix]: #82
[#423 minus]: #63
[#423 multiplicative_expression]: #61
[#423 multisampled_texture_type]: #124
[#423 paren_expression]: #77
[#423 paren_left]: #87
[#423 pointer]: #93
[#423 primary_expression]: #68
[#423 relational_expression]: #51
[#423 sampled_texture_type]: #123
[#423 sampler_type]: #121
[#423 shift_expression]: #55
[#423 short_circuit_and_expression]: #53
[#423 short_circuit_or_expression]: #52
[#423 singular_expression]: #62
[#423 star]: #66
[#423 storage_texture_type]: #125
[#423 texture_and_sampler_types]: #96
[#423 tilde]: #65
[#423 type_specifier_without_ident]: #80
[#423 uint32]: #92
[#423 unary_expression]: #60
[#423 vec_prefix]: #81
[#424 additive_expression]: #59
[#424 and]: #67
[#424 array_type_specifier]: #94
[#424 bang]: #64
[#424 binary_and_expression]: #56
[#424 binary_or_expression]: #57
[#424 binary_xor_expression]: #58
[#424 bitwise_expression]: #54
[#424 bool_literal]: #86
[#424 callable]: #75
[#424 decimal_float_literal]: #111
[#424 decimal_int_literal]: #109
[#424 depth_texture_type]: #122
[#424 expression]: #554
[#424 float16]: #90
[#424 float32]: #89
[#424 float_literal]: #85
[#424 hex_float_literal]: #112
[#424 hex_int_literal]: #110
[#424 ident]: #74
[#424 int32]: #91
[#424 int_literal]: #84
[#424 literal]: #76
[#424 mat_prefix]: #82
[#424 minus]: #63
[#424 multiplicative_expression]: #61
[#424 multisampled_texture_type]: #124
[#424 paren_expression]: #77
[#424 paren_left]: #87
[#424 pointer]: #93
[#424 primary_expression]: #68
[#424 relational_expression]: #51
[#424 sampled_texture_type]: #123
[#424 sampler_type]: #121
[#424 shift_expression]: #55
[#424 short_circuit_and_expression]: #53
[#424 short_circuit_or_expression]: #52
[#424 singular_expression]: #62
[#424 star]: #66
[#424 storage_texture_type]: #125
[#424 texture_and_sampler_types]: #96
[#424 tilde]: #65
[#424 type_specifier_without_ident]: #80
[#424 uint32]: #92
[#424 unary_expression]: #60
[#424 vec_prefix]: #81
[#451 brace_left]: #188
[#451 compound_statement]: #553
[#452 equal]: #552
[#453 equal]: #551
[#454 additive_expression]: #59
[#454 and]: #67
[#454 array_type_specifier]: #94
[#454 bang]: #64
[#454 binary_and_expression]: #56
[#454 binary_or_expression]: #57
[#454 binary_xor_expression]: #58
[#454 bitwise_expression]: #54
[#454 bool_literal]: #86
[#454 callable]: #75
[#454 decimal_float_literal]: #111
[#454 decimal_int_literal]: #109
[#454 depth_texture_type]: #122
[#454 expression]: #550
[#454 float16]: #90
[#454 float32]: #89
[#454 float_literal]: #85
[#454 hex_float_literal]: #112
[#454 hex_int_literal]: #110
[#454 ident]: #74
[#454 int32]: #91
[#454 int_literal]: #84
[#454 literal]: #76
[#454 mat_prefix]: #82
[#454 minus]: #63
[#454 multiplicative_expression]: #61
[#454 multisampled_texture_type]: #124
[#454 paren_expression]: #77
[#454 paren_left]: #87
[#454 pointer]: #93
[#454 primary_expression]: #68
[#454 relational_expression]: #51
[#454 sampled_texture_type]: #123
[#454 sampler_type]: #121
[#454 shift_expression]: #55
[#454 short_circuit_and_expression]: #53
[#454 short_circuit_or_expression]: #52
[#454 singular_expression]: #62
[#454 star]: #66
[#454 storage_texture_type]: #125
[#454 texture_and_sampler_types]: #96
[#454 tilde]: #65
[#454 type_specifier_without_ident]: #80
[#454 uint32]: #92
[#454 unary_expression]: #60
[#454 vec_prefix]: #81
[#456 brace_left]: #188
[#456 compound_statement]: #549
[#457 and]: #385
[#457 assignment_statement]: #377
[#457 core_lhs_expression]: #383
[#457 decrement_statement]: #379
[#457 for_header]: #543
[#457 for_header/0.0]: #544
[#457 for_init]: #545
[#457 func_call_statement]: #548
[#457 ident]: #371
[#457 increment_statement]: #378
[#457 lhs_expression]: #381
[#457 paren_left]: #387
[#457 star]: #384
[#457 underscore]: #382
[#457 variable_decl]: #372
[#457 variable_statement]: #546
[#457 variable_updating_statement]: #547
[#458 and]: #385
[#458 assignment_statement]: #377
[#458 brace_left]: #188
[#458 break_statement]: #359
[#458 compound_statement]: #363
[#458 continue_statement]: #360
[#458 core_lhs_expression]: #383
[#458 decrement_statement]: #379
[#458 for_statement]: #355
[#458 func_call_statement]: #357
[#458 ident]: #371
[#458 if_clause]: #366
[#458 if_statement]: #352
[#458 increment_statement]: #378
[#458 lhs_expression]: #381
[#458 loop_statement]: #354
[#458 loop_statement/0.2]: #540
[#458 loop_statement/0.2/0]: #541
[#458 paren_left]: #387
[#458 return_statement]: #351
[#458 semicolon]: #350
[#458 star]: #384
[#458 statement]: #542
[#458 static_assert_statement]: #364
[#458 switch_statement]: #353
[#458 underscore]: #382
[#458 variable_decl]: #372
[#458 variable_statement]: #358
[#458 variable_updating_statement]: #362
[#458 while_statement]: #356
[#459 brace_left]: #539
[#460 else_clause]: #537
[#460 if_statement/0.2]: #536
[#462 else_if_clause]: #462
[#462 if_statement/0.1/0]: #535
[#477 access_mode]: #530
[#481 array_type_specifier]: #94
[#481 depth_texture_type]: #122
[#481 float16]: #90
[#481 float32]: #89
[#481 ident]: #311
[#481 int32]: #91
[#481 mat_prefix]: #314
[#481 multisampled_texture_type]: #124
[#481 pointer]: #93
[#481 sampled_texture_type]: #123
[#481 sampler_type]: #121
[#481 storage_texture_type]: #125
[#481 texture_and_sampler_types]: #96
[#481 type_specifier]: #529
[#481 type_specifier_without_ident]: #312
[#481 uint32]: #92
[#481 vec_prefix]: #313
[#482 greater_than]: #528
[#483 additive_expression]: #525
[#483 and]: #67
[#483 array_type_specifier]: #94
[#483 bang]: #64
[#483 binary_and_expression]: #56
[#483 binary_or_expression]: #57
[#483 binary_xor_expression]: #58
[#483 bitwise_expression]: #526
[#483 bool_literal]: #86
[#483 callable]: #75
[#483 decimal_float_literal]: #111
[#483 decimal_int_literal]: #109
[#483 depth_texture_type]: #122
[#483 element_count_expression]: #524
[#483 float16]: #90
[#483 float32]: #89
[#483 float_literal]: #85
[#483 hex_float_literal]: #112
[#483 hex_int_literal]: #110
[#483 ident]: #74
[#483 int32]: #91
[#483 int_literal]: #84
[#483 literal]: #76
[#483 mat_prefix]: #82
[#483 minus]: #63
[#483 multiplicative_expression]: #61
[#483 multisampled_texture_type]: #124
[#483 paren_expression]: #77
[#483 paren_left]: #87
[#483 pointer]: #93
[#483 primary_expression]: #68
[#483 sampled_texture_type]: #123
[#483 sampler_type]: #121
[#483 singular_expression]: #62
[#483 star]: #66
[#483 storage_texture_type]: #125
[#483 texture_and_sampler_types]: #96
[#483 tilde]: #65
[#483 type_specifier_without_ident]: #80
[#483 uint32]: #92
[#483 unary_expression]: #527
[#483 vec_prefix]: #81
[#486 paren_expression]: #523
[#486 paren_left]: #87
[#487 argument_expression_list/0.1/0.2]: #521
[#487 comma]: #522
[#489 argument_expression_list/0.1/0.1/0]: #520
[#489 argument_expression_list/0.1/0.1/0/0.0]: #489
[#489 comma]: #490
[#490 additive_expression]: #59
[#490 and]: #67
[#490 array_type_specifier]: #94
[#490 bang]: #64
[#490 binary_and_expression]: #56
[#490 binary_or_expression]: #57
[#490 binary_xor_expression]: #58
[#490 bitwise_expression]: #54
[#490 bool_literal]: #86
[#490 callable]: #75
[#490 decimal_float_literal]: #111
[#490 decimal_int_literal]: #109
[#490 depth_texture_type]: #122
[#490 expression]: #519
[#490 float16]: #90
[#490 float32]: #89
[#490 float_literal]: #85
[#490 hex_float_literal]: #112
[#490 hex_int_literal]: #110
[#490 ident]: #74
[#490 int32]: #91
[#490 int_literal]: #84
[#490 literal]: #76
[#490 mat_prefix]: #82
[#490 minus]: #63
[#490 multiplicative_expression]: #61
[#490 multisampled_texture_type]: #124
[#490 paren_expression]: #77
[#490 paren_left]: #87
[#490 pointer]: #93
[#490 primary_expression]: #68
[#490 relational_expression]: #51
[#490 sampled_texture_type]: #123
[#490 sampler_type]: #121
[#490 shift_expression]: #55
[#490 short_circuit_and_expression]: #53
[#490 short_circuit_or_expression]: #52
[#490 singular_expression]: #62
[#490 star]: #66
[#490 storage_texture_type]: #125
[#490 texture_and_sampler_types]: #96
[#490 tilde]: #65
[#490 type_specifier_without_ident]: #80
[#490 uint32]: #92
[#490 unary_expression]: #60
[#490 vec_prefix]: #81
[#492 bracket_left]: #203
[#492 component_or_swizzle_specifier]: #518
[#492 component_or_swizzle_specifier/0.3]: #517
[#492 period]: #204
[#499 additive_expression]: #59
[#499 and]: #67
[#499 array_type_specifier]: #94
[#499 bang]: #64
[#499 binary_and_expression]: #56
[#499 binary_or_expression]: #57
[#499 binary_xor_expression]: #58
[#499 bitwise_expression]: #54
[#499 bool_literal]: #86
[#499 callable]: #75
[#499 decimal_float_literal]: #111
[#499 decimal_int_literal]: #109
[#499 depth_texture_type]: #122
[#499 expression]: #516
[#499 float16]: #90
[#499 float32]: #89
[#499 float_literal]: #85
[#499 hex_float_literal]: #112
[#499 hex_int_literal]: #110
[#499 ident]: #74
[#499 int32]: #91
[#499 int_literal]: #84
[#499 literal]: #76
[#499 mat_prefix]: #82
[#499 minus]: #63
[#499 multiplicative_expression]: #61
[#499 multisampled_texture_type]: #124
[#499 paren_expression]: #77
[#499 paren_left]: #87
[#499 pointer]: #93
[#499 primary_expression]: #68
[#499 relational_expression]: #51
[#499 sampled_texture_type]: #123
[#499 sampler_type]: #121
[#499 shift_expression]: #55
[#499 short_circuit_and_expression]: #53
[#499 short_circuit_or_expression]: #52
[#499 singular_expression]: #62
[#499 star]: #66
[#499 storage_texture_type]: #125
[#499 texture_and_sampler_types]: #96
[#499 tilde]: #65
[#499 type_specifier_without_ident]: #80
[#499 uint32]: #92
[#499 unary_expression]: #60
[#499 vec_prefix]: #81
[#500 paren_right]: #515
[#505 interpolation_sample_name]: #511
[#511 attrib_end]: #603
[#511 attrib_end/0.0]: #500
[#511 comma]: #502
[#516 attrib_end]: #601
[#516 attrib_end/0.0]: #500
[#516 comma]: #602
[#525 additive_operator]: #222
[#525 minus]: #224
[#525 plus]: #223
[#529 comma]: #600
[#529 type_specifier_without_ident/7.5]: #599
[#530 greater_than]: #598
[#534 additive_expression]: #59
[#534 and]: #67
[#534 array_type_specifier]: #94
[#534 bang]: #64
[#534 binary_and_expression]: #56
[#534 binary_or_expression]: #57
[#534 binary_xor_expression]: #58
[#534 bitwise_expression]: #54
[#534 bool_literal]: #86
[#534 callable]: #75
[#534 decimal_float_literal]: #111
[#534 decimal_int_literal]: #109
[#534 depth_texture_type]: #122
[#534 expression]: #597
[#534 float16]: #90
[#534 float32]: #89
[#534 float_literal]: #85
[#534 hex_float_literal]: #112
[#534 hex_int_literal]: #110
[#534 ident]: #74
[#534 int32]: #91
[#534 int_literal]: #84
[#534 literal]: #76
[#534 mat_prefix]: #82
[#534 minus]: #63
[#534 multiplicative_expression]: #61
[#534 multisampled_texture_type]: #124
[#534 paren_expression]: #77
[#534 paren_left]: #87
[#534 pointer]: #93
[#534 primary_expression]: #68
[#534 relational_expression]: #51
[#534 sampled_texture_type]: #123
[#534 sampler_type]: #121
[#534 shift_expression]: #55
[#534 short_circuit_and_expression]: #53
[#534 short_circuit_or_expression]: #52
[#534 singular_expression]: #62
[#534 star]: #66
[#534 storage_texture_type]: #125
[#534 texture_and_sampler_types]: #96
[#534 tilde]: #65
[#534 type_specifier_without_ident]: #80
[#534 uint32]: #92
[#534 unary_expression]: #60
[#534 vec_prefix]: #81
[#538 brace_left]: #188
[#538 compound_statement]: #596
[#539 case_clause]: #592
[#539 default_alone_clause]: #593
[#539 switch_body]: #591
[#539 switch_statement/0.3]: #589
[#539 switch_statement/0.3/0]: #590
[#540 continuing_statement]: #587
[#540 loop_statement/0.3]: #586
[#542 and]: #385
[#542 assignment_statement]: #377
[#542 brace_left]: #188
[#542 break_statement]: #359
[#542 compound_statement]: #363
[#542 continue_statement]: #360
[#542 core_lhs_expression]: #383
[#542 decrement_statement]: #379
[#542 for_statement]: #355
[#542 func_call_statement]: #357
[#542 ident]: #371
[#542 if_clause]: #366
[#542 if_statement]: #352
[#542 increment_statement]: #378
[#542 lhs_expression]: #381
[#542 loop_statement]: #354
[#542 loop_statement/0.2/0]: #585
[#542 paren_left]: #387
[#542 return_statement]: #351
[#542 semicolon]: #350
[#542 star]: #384
[#542 statement]: #542
[#542 static_assert_statement]: #364
[#542 switch_statement]: #353
[#542 underscore]: #382
[#542 variable_decl]: #372
[#542 variable_statement]: #358
[#542 variable_updating_statement]: #362
[#542 while_statement]: #356
[#543 paren_right]: #584
[#544 semicolon]: #583
[#551 additive_expression]: #59
[#551 and]: #67
[#551 array_type_specifier]: #94
[#551 bang]: #64
[#551 binary_and_expression]: #56
[#551 binary_or_expression]: #57
[#551 binary_xor_expression]: #58
[#551 bitwise_expression]: #54
[#551 bool_literal]: #86
[#551 callable]: #75
[#551 decimal_float_literal]: #111
[#551 decimal_int_literal]: #109
[#551 depth_texture_type]: #122
[#551 expression]: #582
[#551 float16]: #90
[#551 float32]: #89
[#551 float_literal]: #85
[#551 hex_float_literal]: #112
[#551 hex_int_literal]: #110
[#551 ident]: #74
[#551 int32]: #91
[#551 int_literal]: #84
[#551 literal]: #76
[#551 mat_prefix]: #82
[#551 minus]: #63
[#551 multiplicative_expression]: #61
[#551 multisampled_texture_type]: #124
[#551 paren_expression]: #77
[#551 paren_left]: #87
[#551 pointer]: #93
[#551 primary_expression]: #68
[#551 relational_expression]: #51
[#551 sampled_texture_type]: #123
[#551 sampler_type]: #121
[#551 shift_expression]: #55
[#551 short_circuit_and_expression]: #53
[#551 short_circuit_or_expression]: #52
[#551 singular_expression]: #62
[#551 star]: #66
[#551 storage_texture_type]: #125
[#551 texture_and_sampler_types]: #96
[#551 tilde]: #65
[#551 type_specifier_without_ident]: #80
[#551 uint32]: #92
[#551 unary_expression]: #60
[#551 vec_prefix]: #81
[#552 additive_expression]: #59
[#552 and]: #67
[#552 array_type_specifier]: #94
[#552 bang]: #64
[#552 binary_and_expression]: #56
[#552 binary_or_expression]: #57
[#552 binary_xor_expression]: #58
[#552 bitwise_expression]: #54
[#552 bool_literal]: #86
[#552 callable]: #75
[#552 decimal_float_literal]: #111
[#552 decimal_int_literal]: #109
[#552 depth_texture_type]: #122
[#552 expression]: #581
[#552 float16]: #90
[#552 float32]: #89
[#552 float_literal]: #85
[#552 hex_float_literal]: #112
[#552 hex_int_literal]: #110
[#552 ident]: #74
[#552 int32]: #91
[#552 int_literal]: #84
[#552 literal]: #76
[#552 mat_prefix]: #82
[#552 minus]: #63
[#552 multiplicative_expression]: #61
[#552 multisampled_texture_type]: #124
[#552 paren_expression]: #77
[#552 paren_left]: #87
[#552 pointer]: #93
[#552 primary_expression]: #68
[#552 relational_expression]: #51
[#552 sampled_texture_type]: #123
[#552 sampler_type]: #121
[#552 shift_expression]: #55
[#552 short_circuit_and_expression]: #53
[#552 short_circuit_or_expression]: #52
[#552 singular_expression]: #62
[#552 star]: #66
[#552 storage_texture_type]: #125
[#552 texture_and_sampler_types]: #96
[#552 tilde]: #65
[#552 type_specifier_without_ident]: #80
[#552 uint32]: #92
[#552 unary_expression]: #60
[#552 vec_prefix]: #81
[#558 colon]: #580
[#559 comma]: #579
[#559 param_list/0.2]: #578
[#561 comma]: #562
[#561 param_list/0.1/0]: #577
[#561 param_list/0.1/0/0.0]: #561
[#562 attr]: #31
[#562 attribute]: #416
[#562 param]: #576
[#562 param/0.0]: #414
[#562 param/0.0/0]: #415
[#563 arrow]: #574
[#563 function_header/0.5]: #573
[#566 brace_right]: #572
[#568 array_type_specifier]: #94
[#568 depth_texture_type]: #122
[#568 float16]: #90
[#568 float32]: #89
[#568 ident]: #311
[#568 int32]: #91
[#568 mat_prefix]: #314
[#568 multisampled_texture_type]: #124
[#568 pointer]: #93
[#568 sampled_texture_type]: #123
[#568 sampler_type]: #121
[#568 storage_texture_type]: #125
[#568 texture_and_sampler_types]: #96
[#568 type_specifier]: #571
[#568 type_specifier_without_ident]: #312
[#568 uint32]: #92
[#568 vec_prefix]: #313
[#574 attr]: #31
[#574 attribute]: #625
[#574 function_header/0.5/0.1]: #623
[#574 function_header/0.5/0.1/0]: #624
[#580 array_type_specifier]: #94
[#580 depth_texture_type]: #122
[#580 float16]: #90
[#580 float32]: #89
[#580 ident]: #311
[#580 int32]: #91
[#580 mat_prefix]: #314
[#580 multisampled_texture_type]: #124
[#580 pointer]: #93
[#580 sampled_texture_type]: #123
[#580 sampler_type]: #121
[#580 storage_texture_type]: #125
[#580 texture_and_sampler_types]: #96
[#580 type_specifier]: #622
[#580 type_specifier_without_ident]: #312
[#580 uint32]: #92
[#580 vec_prefix]: #313
[#583 additive_expression]: #59
[#583 and]: #67
[#583 array_type_specifier]: #94
[#583 bang]: #64
[#583 binary_and_expression]: #56
[#583 binary_or_expression]: #57
[#583 binary_xor_expression]: #58
[#583 bitwise_expression]: #54
[#583 bool_literal]: #86
[#583 callable]: #75
[#583 decimal_float_literal]: #111
[#583 decimal_int_literal]: #109
[#583 depth_texture_type]: #122
[#583 expression]: #621
[#583 float16]: #90
[#583 float32]: #89
[#583 float_literal]: #85
[#583 for_header/0.2]: #620
[#583 hex_float_literal]: #112
[#583 hex_int_literal]: #110
[#583 ident]: #74
[#583 int32]: #91
[#583 int_literal]: #84
[#583 literal]: #76
[#583 mat_prefix]: #82
[#583 minus]: #63
[#583 multiplicative_expression]: #61
[#583 multisampled_texture_type]: #124
[#583 paren_expression]: #77
[#583 paren_left]: #87
[#583 pointer]: #93
[#583 primary_expression]: #68
[#583 relational_expression]: #51
[#583 sampled_texture_type]: #123
[#583 sampler_type]: #121
[#583 shift_expression]: #55
[#583 short_circuit_and_expression]: #53
[#583 short_circuit_or_expression]: #52
[#583 singular_expression]: #62
[#583 star]: #66
[#583 storage_texture_type]: #125
[#583 texture_and_sampler_types]: #96
[#583 tilde]: #65
[#583 type_specifier_without_ident]: #80
[#583 uint32]: #92
[#583 unary_expression]: #60
[#583 vec_prefix]: #81
[#584 brace_left]: #188
[#584 compound_statement]: #619
[#586 brace_right]: #618
[#588 brace_left]: #617
[#588 continuing_compound_statement]: #616
[#589 brace_right]: #615
[#591 case_clause]: #592
[#591 default_alone_clause]: #593
[#591 switch_body]: #591
[#591 switch_statement/0.3/0]: #614
[#594 additive_expression]: #59
[#594 and]: #67
[#594 array_type_specifier]: #94
[#594 bang]: #64
[#594 binary_and_expression]: #56
[#594 binary_or_expression]: #57
[#594 binary_xor_expression]: #58
[#594 bitwise_expression]: #54
[#594 bool_literal]: #86
[#594 callable]: #75
[#594 case_selector]: #611
[#594 case_selectors]: #610
[#594 decimal_float_literal]: #111
[#594 decimal_int_literal]: #109
[#594 depth_texture_type]: #122
[#594 expression]: #613
[#594 float16]: #90
[#594 float32]: #89
[#594 float_literal]: #85
[#594 hex_float_literal]: #112
[#594 hex_int_literal]: #110
[#594 ident]: #74
[#594 int32]: #91
[#594 int_literal]: #84
[#594 literal]: #76
[#594 mat_prefix]: #82
[#594 minus]: #63
[#594 multiplicative_expression]: #61
[#594 multisampled_texture_type]: #124
[#594 paren_expression]: #77
[#594 paren_left]: #87
[#594 pointer]: #93
[#594 primary_expression]: #68
[#594 relational_expression]: #51
[#594 sampled_texture_type]: #123
[#594 sampler_type]: #121
[#594 shift_expression]: #55
[#594 short_circuit_and_expression]: #53
[#594 short_circuit_or_expression]: #52
[#594 singular_expression]: #62
[#594 star]: #66
[#594 storage_texture_type]: #125
[#594 texture_and_sampler_types]: #96
[#594 tilde]: #65
[#594 type_specifier_without_ident]: #80
[#594 uint32]: #92
[#594 unary_expression]: #60
[#594 vec_prefix]: #81
[#595 colon]: #609
[#595 default_alone_clause/0.1]: #608
[#597 brace_left]: #188
[#597 compound_statement]: #607
[#599 greater_than]: #606
[#600 access_mode]: #605
[#602 additive_expression]: #59
[#602 and]: #67
[#602 array_type_specifier]: #94
[#602 bang]: #64
[#602 binary_and_expression]: #56
[#602 binary_or_expression]: #57
[#602 binary_xor_expression]: #58
[#602 bitwise_expression]: #54
[#602 bool_literal]: #86
[#602 callable]: #75
[#602 decimal_float_literal]: #111
[#602 decimal_int_literal]: #109
[#602 depth_texture_type]: #122
[#602 expression]: #604
[#602 float16]: #90
[#602 float32]: #89
[#602 float_literal]: #85
[#602 hex_float_literal]: #112
[#602 hex_int_literal]: #110
[#602 ident]: #74
[#602 int32]: #91
[#602 int_literal]: #84
[#602 literal]: #76
[#602 mat_prefix]: #82
[#602 minus]: #63
[#602 multiplicative_expression]: #61
[#602 multisampled_texture_type]: #124
[#602 paren_expression]: #77
[#602 paren_left]: #87
[#602 pointer]: #93
[#602 primary_expression]: #68
[#602 relational_expression]: #51
[#602 sampled_texture_type]: #123
[#602 sampler_type]: #121
[#602 shift_expression]: #55
[#602 short_circuit_and_expression]: #53
[#602 short_circuit_or_expression]: #52
[#602 singular_expression]: #62
[#602 star]: #66
[#602 storage_texture_type]: #125
[#602 texture_and_sampler_types]: #96
[#602 tilde]: #65
[#602 type_specifier_without_ident]: #80
[#602 uint32]: #92
[#602 unary_expression]: #60
[#602 vec_prefix]: #81
[#604 attrib_end]: #639
[#604 attrib_end/0.0]: #500
[#604 comma]: #502
[#608 brace_left]: #188
[#608 compound_statement]: #638
[#610 case_clause/0.2]: #636
[#610 colon]: #637
[#611 case_selectors/0.1]: #632
[#611 case_selectors/0.1/0]: #633
[#611 case_selectors/0.1/0/0.0]: #634
[#611 comma]: #635
[#617 and]: #385
[#617 assignment_statement]: #377
[#617 brace_left]: #188
[#617 break_statement]: #359
[#617 compound_statement]: #363
[#617 continue_statement]: #360
[#617 continuing_compound_statement/0.1]: #629
[#617 continuing_compound_statement/0.1/0]: #630
[#617 core_lhs_expression]: #383
[#617 decrement_statement]: #379
[#617 for_statement]: #355
[#617 func_call_statement]: #357
[#617 ident]: #371
[#617 if_clause]: #366
[#617 if_statement]: #352
[#617 increment_statement]: #378
[#617 lhs_expression]: #381
[#617 loop_statement]: #354
[#617 paren_left]: #387
[#617 return_statement]: #351
[#617 semicolon]: #350
[#617 star]: #384
[#617 statement]: #631
[#617 static_assert_statement]: #364
[#617 switch_statement]: #353
[#617 underscore]: #382
[#617 variable_decl]: #372
[#617 variable_statement]: #358
[#617 variable_updating_statement]: #362
[#617 while_statement]: #356
[#620 semicolon]: #628
[#623 array_type_specifier]: #94
[#623 depth_texture_type]: #122
[#623 float16]: #90
[#623 float32]: #89
[#623 ident]: #311
[#623 int32]: #91
[#623 mat_prefix]: #314
[#623 multisampled_texture_type]: #124
[#623 pointer]: #93
[#623 sampled_texture_type]: #123
[#623 sampler_type]: #121
[#623 storage_texture_type]: #125
[#623 texture_and_sampler_types]: #96
[#623 type_specifier]: #627
[#623 type_specifier_without_ident]: #312
[#623 uint32]: #92
[#623 vec_prefix]: #313
[#625 attr]: #31
[#625 attribute]: #625
[#625 function_header/0.5/0.1/0]: #626
[#628 and]: #385
[#628 assignment_statement]: #377
[#628 core_lhs_expression]: #383
[#628 decrement_statement]: #379
[#628 for_header/0.4]: #649
[#628 for_update]: #650
[#628 func_call_statement]: #652
[#628 ident]: #371
[#628 increment_statement]: #378
[#628 lhs_expression]: #381
[#628 paren_left]: #387
[#628 star]: #384
[#628 underscore]: #382
[#628 variable_updating_statement]: #651
[#629 break_if_statement]: #647
[#629 continuing_compound_statement/0.2]: #646
[#631 and]: #385
[#631 assignment_statement]: #377
[#631 brace_left]: #188
[#631 break_statement]: #359
[#631 compound_statement]: #363
[#631 continue_statement]: #360
[#631 continuing_compound_statement/0.1/0]: #645
[#631 core_lhs_expression]: #383
[#631 decrement_statement]: #379
[#631 for_statement]: #355
[#631 func_call_statement]: #357
[#631 ident]: #371
[#631 if_clause]: #366
[#631 if_statement]: #352
[#631 increment_statement]: #378
[#631 lhs_expression]: #381
[#631 loop_statement]: #354
[#631 paren_left]: #387
[#631 return_statement]: #351
[#631 semicolon]: #350
[#631 star]: #384
[#631 statement]: #631
[#631 static_assert_statement]: #364
[#631 switch_statement]: #353
[#631 underscore]: #382
[#631 variable_decl]: #372
[#631 variable_statement]: #358
[#631 variable_updating_statement]: #362
[#631 while_statement]: #356
[#632 case_selectors/0.2]: #643
[#632 comma]: #644
[#634 case_selectors/0.1/0]: #642
[#634 case_selectors/0.1/0/0.0]: #634
[#634 comma]: #635
[#635 additive_expression]: #59
[#635 and]: #67
[#635 array_type_specifier]: #94
[#635 bang]: #64
[#635 binary_and_expression]: #56
[#635 binary_or_expression]: #57
[#635 binary_xor_expression]: #58
[#635 bitwise_expression]: #54
[#635 bool_literal]: #86
[#635 callable]: #75
[#635 case_selector]: #641
[#635 decimal_float_literal]: #111
[#635 decimal_int_literal]: #109
[#635 depth_texture_type]: #122
[#635 expression]: #613
[#635 float16]: #90
[#635 float32]: #89
[#635 float_literal]: #85
[#635 hex_float_literal]: #112
[#635 hex_int_literal]: #110
[#635 ident]: #74
[#635 int32]: #91
[#635 int_literal]: #84
[#635 literal]: #76
[#635 mat_prefix]: #82
[#635 minus]: #63
[#635 multiplicative_expression]: #61
[#635 multisampled_texture_type]: #124
[#635 paren_expression]: #77
[#635 paren_left]: #87
[#635 pointer]: #93
[#635 primary_expression]: #68
[#635 relational_expression]: #51
[#635 sampled_texture_type]: #123
[#635 sampler_type]: #121
[#635 shift_expression]: #55
[#635 short_circuit_and_expression]: #53
[#635 short_circuit_or_expression]: #52
[#635 singular_expression]: #62
[#635 star]: #66
[#635 storage_texture_type]: #125
[#635 texture_and_sampler_types]: #96
[#635 tilde]: #65
[#635 type_specifier_without_ident]: #80
[#635 uint32]: #92
[#635 unary_expression]: #60
[#635 vec_prefix]: #81
[#636 brace_left]: #188
[#636 compound_statement]: #640
[#646 brace_right]: #654
[#653 additive_expression]: #59
[#653 and]: #67
[#653 array_type_specifier]: #94
[#653 bang]: #64
[#653 binary_and_expression]: #56
[#653 binary_or_expression]: #57
[#653 binary_xor_expression]: #58
[#653 bitwise_expression]: #54
[#653 bool_literal]: #86
[#653 callable]: #75
[#653 decimal_float_literal]: #111
[#653 decimal_int_literal]: #109
[#653 depth_texture_type]: #122
[#653 expression]: #655
[#653 float16]: #90
[#653 float32]: #89
[#653 float_literal]: #85
[#653 hex_float_literal]: #112
[#653 hex_int_literal]: #110
[#653 ident]: #74
[#653 int32]: #91
[#653 int_literal]: #84
[#653 literal]: #76
[#653 mat_prefix]: #82
[#653 minus]: #63
[#653 multiplicative_expression]: #61
[#653 multisampled_texture_type]: #124
[#653 paren_expression]: #77
[#653 paren_left]: #87
[#653 pointer]: #93
[#653 primary_expression]: #68
[#653 relational_expression]: #51
[#653 sampled_texture_type]: #123
[#653 sampler_type]: #121
[#653 shift_expression]: #55
[#653 short_circuit_and_expression]: #53
[#653 short_circuit_or_expression]: #52
[#653 singular_expression]: #62
[#653 star]: #66
[#653 storage_texture_type]: #125
[#653 texture_and_sampler_types]: #96
[#653 tilde]: #65
[#653 type_specifier_without_ident]: #80
[#653 uint32]: #92
[#653 unary_expression]: #60
[#653 vec_prefix]: #81
[#655 semicolon]: #656
