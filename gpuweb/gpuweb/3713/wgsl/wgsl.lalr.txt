=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'diagnostic' diagnostic_control
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   attribute * ? '{' statement * ? '}'
continue_statement:'continue'
continuing_compound_statement:
   attribute * ? '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
diagnostic_control:
   '(' severity_control_name ',' diagnostic_rule_name attrib_end
diagnostic_directive:
   'diagnostic' diagnostic_control ';'
diagnostic_rule_name:ident_pattern_token
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   attribute * ? 'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | static_assert_statement ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:
   diagnostic_directive
 | enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   attribute * ? if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   attribute * ? 'loop' attribute * ? '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | call_expression
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
severity_control_name:
   'error'
 | 'off'
 | 'warning'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | static_assert_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   attribute * ? '{' ( switch_clause * ) '}'
switch_body/0.2:
   switch_clause *
switch_clause:
   case_clause
 | default_alone_clause
switch_statement:
   attribute * ? 'switch' expression switch_body
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'type' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   attribute * ? 'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {EndOfText}
enable_directive -> · 'enable' extension_name ';' : {EndOfText}
global_directive -> · diagnostic_directive : {EndOfText}
global_directive -> · enable_directive : {EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {EndOfText}
enable_directive -> · 'enable' extension_name ';' : {EndOfText}
global_directive -> · diagnostic_directive : {EndOfText}
global_directive -> · enable_directive : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#5
global_directive -> diagnostic_directive · : {EndOfText}

#6
global_directive -> enable_directive · : {EndOfText}

#7
diagnostic_directive -> 'diagnostic' · diagnostic_control ';' : {EndOfText}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {}

#8
enable_directive -> 'enable' · extension_name ';' : {EndOfText}
extension_name -> · 'f16' : {}

#9
enable_directive -> 'enable' extension_name · ';' : {EndOfText}

#10
extension_name -> 'f16' · : {}

#11
diagnostic_directive -> 'diagnostic' diagnostic_control · ';' : {EndOfText}

#12
diagnostic_control -> '(' · severity_control_name ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}
severity_control_name -> · 'error' : {}
severity_control_name -> · 'off' : {}
severity_control_name -> · 'warning' : {}

#13
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {EndOfText}

#14
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#15
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#16
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#17
global_decl -> ';' · : {EndOfText}

#18
global_decl -> global_variable_decl · ';' : {EndOfText}

#19
global_decl -> global_constant_decl · ';' : {EndOfText}

#20
global_decl -> type_alias_decl · ';' : {EndOfText}

#21
global_decl -> struct_decl · : {EndOfText}

#22
global_decl -> function_decl · : {EndOfText}

#23
global_decl -> static_assert_statement · ';' : {EndOfText}

#24
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}

#25
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#26
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#27
type_alias_decl -> 'type' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#28
struct_decl -> 'struct' · ident struct_body_decl : {EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#29
function_decl -> function_decl/0.0 · function_header compound_statement : {EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {}

#30
static_assert_statement -> 'static_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#31
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {}

#32
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#33
function_decl/0.0 -> function_decl/0.0/0 · : {}

#34
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}

#35
attribute -> '@' · 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#36
attribute -> '@' 'align' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#37
attribute -> '@' 'binding' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#38
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}

#39
attribute -> '@' 'const' · : {'f16' 'texture_multisampled_2d'}

#40
attribute -> '@' 'diagnostic' · diagnostic_control : {'f16' 'texture_multisampled_2d'}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}

#41
attribute -> '@' 'group' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#42
attribute -> '@' 'id' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#43
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}

#44
attribute -> '@' 'invariant' · : {'f16' 'texture_multisampled_2d'}

#45
attribute -> '@' 'location' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#46
attribute -> '@' 'size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#47
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#48
attribute -> '@' 'vertex' · : {'f16' 'texture_multisampled_2d'}

#49
attribute -> '@' 'fragment' · : {'f16' 'texture_multisampled_2d'}

#50
attribute -> '@' 'compute' · : {'f16' 'texture_multisampled_2d'}

#51
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {}

#52
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#53
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {}

#54
static_assert_statement -> 'static_assert' expression · : {}

#55
expression -> relational_expression · : {}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#56
expression -> short_circuit_or_expression · '||' relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#57
expression -> short_circuit_and_expression · '&&' relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#58
expression -> bitwise_expression · : {}

#59
relational_expression -> shift_expression · '!=' shift_expression : {}
relational_expression -> shift_expression · '<' shift_expression : {}
relational_expression -> shift_expression · '<=' shift_expression : {}
relational_expression -> shift_expression · '==' shift_expression : {}
relational_expression -> shift_expression · '>' shift_expression : {}
relational_expression -> shift_expression · '>=' shift_expression : {}
relational_expression -> shift_expression · : {}

#60
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {}

#61
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {}

#62
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {}

#63
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
shift_expression -> additive_expression · : {}
additive_operator -> · '+' : {/0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {/0[xX][0-9a-fA-F]+[iu]?/}

#64
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#65
additive_expression -> multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {/0[xX][0-9a-fA-F]+[iu]?/}

#66
unary_expression -> singular_expression · : {}

#67
unary_expression -> '-' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#68
unary_expression -> '!' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#69
unary_expression -> '~' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#70
unary_expression -> '*' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#71
unary_expression -> '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#72
singular_expression -> primary_expression · singular_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {}

#73
callable -> ident · : {}
primary_expression -> ident · : {}

#74
primary_expression -> call_expression · : {}

#75
primary_expression -> literal · : {}

#76
primary_expression -> paren_expression · : {}

#77
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {}

#78
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#79
call_expression -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#80
literal -> int_literal · : {}

#81
literal -> float_literal · : {}

#82
literal -> bool_literal · : {}

#83
paren_expression -> '(' · expression ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#84
callable -> type_specifier_without_ident · : {}

#85
callable -> vec_prefix · : {}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#86
callable -> mat_prefix · : {}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#87
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}
callable -> 'array' · : {}

#88
int_literal -> decimal_int_literal · : {}

#89
int_literal -> hex_int_literal · : {}

#90
float_literal -> decimal_float_literal · : {}

#91
float_literal -> hex_float_literal · : {}

#92
bool_literal -> 'true' · : {}

#93
bool_literal -> 'false' · : {}

#94
type_specifier_without_ident -> 'bool' · : {}

#95
type_specifier_without_ident -> 'f32' · : {}

#96
type_specifier_without_ident -> 'f16' · : {}

#97
type_specifier_without_ident -> 'i32' · : {}

#98
type_specifier_without_ident -> 'u32' · : {}

#99
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#100
type_specifier_without_ident -> array_type_specifier · : {}

#101
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {}

#102
type_specifier_without_ident -> texture_and_sampler_types · : {}

#103
vec_prefix -> 'vec2' · : {}

#104
vec_prefix -> 'vec3' · : {}

#105
vec_prefix -> 'vec4' · : {}

#106
mat_prefix -> 'mat2x2' · : {}

#107
mat_prefix -> 'mat2x3' · : {}

#108
mat_prefix -> 'mat2x4' · : {}

#109
mat_prefix -> 'mat3x2' · : {}

#110
mat_prefix -> 'mat3x3' · : {}

#111
mat_prefix -> 'mat3x4' · : {}

#112
mat_prefix -> 'mat4x2' · : {}

#113
mat_prefix -> 'mat4x3' · : {}

#114
mat_prefix -> 'mat4x4' · : {}

#115
decimal_int_literal -> /0[iu]?/ · : {}

#116
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {}

#117
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {}

#118
decimal_float_literal -> /0[fh]/ · : {}

#119
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {}

#120
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {}

#121
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {}

#122
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {}

#123
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {}

#124
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {}

#125
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {}

#126
texture_and_sampler_types -> sampler_type · : {}

#127
texture_and_sampler_types -> depth_texture_type · : {}

#128
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {}

#129
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {}

#130
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {}

#131
sampler_type -> 'sampler' · : {}

#132
sampler_type -> 'sampler_comparison' · : {}

#133
depth_texture_type -> 'texture_depth_2d' · : {}

#134
depth_texture_type -> 'texture_depth_2d_array' · : {}

#135
depth_texture_type -> 'texture_depth_cube' · : {}

#136
depth_texture_type -> 'texture_depth_cube_array' · : {}

#137
depth_texture_type -> 'texture_depth_multisampled_2d' · : {}

#138
sampled_texture_type -> 'texture_1d' · : {}

#139
sampled_texture_type -> 'texture_2d' · : {}

#140
sampled_texture_type -> 'texture_2d_array' · : {}

#141
sampled_texture_type -> 'texture_3d' · : {}

#142
sampled_texture_type -> 'texture_cube' · : {}

#143
sampled_texture_type -> 'texture_cube_array' · : {}

#144
multisampled_texture_type -> 'texture_multisampled_2d' · : {}

#145
storage_texture_type -> 'texture_storage_1d' · : {}

#146
storage_texture_type -> 'texture_storage_2d' · : {}

#147
storage_texture_type -> 'texture_storage_2d_array' · : {}

#148
storage_texture_type -> 'texture_storage_3d' · : {}

#149
function_decl -> function_decl/0.0 function_header · compound_statement : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {EndOfText}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#150
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#151
struct_decl -> 'struct' ident · struct_body_decl : {EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}

#152
type_alias_decl -> 'type' ident · '=' type_specifier : {}

#153
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#154
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#155
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {}
optionally_typed_ident/0.1 -> · ':' type_specifier : {}

#156
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#157
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#158
global_decl -> static_assert_statement ';' · : {EndOfText}

#159
global_decl -> type_alias_decl ';' · : {EndOfText}

#160
global_decl -> global_constant_decl ';' · : {EndOfText}

#161
global_decl -> global_variable_decl ';' · : {EndOfText}

#162
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#163
diagnostic_control -> '(' severity_control_name · ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}

#164
severity_control_name -> 'error' · : {}

#165
severity_control_name -> 'warning' · : {}

#166
severity_control_name -> 'off' · : {}

#167
diagnostic_directive -> 'diagnostic' diagnostic_control ';' · : {EndOfText}

#168
enable_directive -> 'enable' extension_name ';' · : {EndOfText}

#169
diagnostic_control -> '(' severity_control_name ',' · diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}
diagnostic_rule_name -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#170
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#171
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#172
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#173
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#174
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#175
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {}

#176
optionally_typed_ident/0.1 -> ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#177
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#178
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#179
type_alias_decl -> 'type' ident '=' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#180
struct_decl -> 'struct' ident struct_body_decl · : {EndOfText}

#181
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#182
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {}

#183
function_decl -> function_decl/0.0 function_header compound_statement · : {EndOfText}

#184
compound_statement -> compound_statement/0.0 · '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#185
compound_statement/0.0 -> compound_statement/0.0/0 · : {}

#186
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#187
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {}
texel_format -> · 'r32float' : {}
texel_format -> · 'r32sint' : {}
texel_format -> · 'r32uint' : {}
texel_format -> · 'rg32float' : {}
texel_format -> · 'rg32sint' : {}
texel_format -> · 'rg32uint' : {}
texel_format -> · 'rgba16float' : {}
texel_format -> · 'rgba16sint' : {}
texel_format -> · 'rgba16uint' : {}
texel_format -> · 'rgba32float' : {}
texel_format -> · 'rgba32sint' : {}
texel_format -> · 'rgba32uint' : {}
texel_format -> · 'rgba8sint' : {}
texel_format -> · 'rgba8snorm' : {}
texel_format -> · 'rgba8uint' : {}
texel_format -> · 'rgba8unorm' : {}

#188
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#189
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#190
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#191
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#192
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#193
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#194
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#195
paren_expression -> '(' expression · ')' : {}

#196
call_expression -> callable argument_expression_list · : {}

#197
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
argument_expression_list/0.1 -> · expression_comma_list : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#198
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#199
singular_expression -> primary_expression singular_expression/0.1 · : {}

#200
singular_expression/0.1 -> component_or_swizzle_specifier · : {}

#201
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#202
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
swizzle_name -> · '/[rgba]/' : {}
swizzle_name -> · '/[rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {}

#203
unary_expression -> '&' unary_expression · : {}

#204
unary_expression -> '*' unary_expression · : {}

#205
unary_expression -> '~' unary_expression · : {}

#206
unary_expression -> '!' unary_expression · : {}

#207
unary_expression -> '-' unary_expression · : {}

#208
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#209
multiplicative_operator -> '*' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#210
multiplicative_operator -> '/' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#211
multiplicative_operator -> '%' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#212
shift_expression -> unary_expression '<<' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#213
shift_expression -> unary_expression '>>' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#214
additive_expression -> additive_expression additive_operator · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#215
additive_operator -> '+' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#216
additive_operator -> '-' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#217
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#218
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#219
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#220
relational_expression -> shift_expression '<' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#221
relational_expression -> shift_expression '>' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#222
relational_expression -> shift_expression '<=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#223
relational_expression -> shift_expression '>=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#224
relational_expression -> shift_expression '==' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#225
relational_expression -> shift_expression '!=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#226
expression -> short_circuit_and_expression '&&' · relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#227
expression -> short_circuit_or_expression '||' · relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#228
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#229
attribute -> '@' 'size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#230
attribute -> '@' 'location' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#231
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_type_name -> · 'flat' : {}
interpolation_type_name -> · 'linear' : {}
interpolation_type_name -> · 'perspective' : {}

#232
attribute -> '@' 'id' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#233
attribute -> '@' 'group' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#234
attribute -> '@' 'diagnostic' diagnostic_control · : {'f16' 'texture_multisampled_2d'}

#235
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
builtin_value_name -> · 'frag_depth' : {}
builtin_value_name -> · 'front_facing' : {}
builtin_value_name -> · 'global_invocation_id' : {}
builtin_value_name -> · 'instance_index' : {}
builtin_value_name -> · 'local_invocation_id' : {}
builtin_value_name -> · 'local_invocation_index' : {}
builtin_value_name -> · 'num_workgroups' : {}
builtin_value_name -> · 'position' : {}
builtin_value_name -> · 'sample_index' : {}
builtin_value_name -> · 'sample_mask' : {}
builtin_value_name -> · 'vertex_index' : {}
builtin_value_name -> · 'workgroup_id' : {}

#236
attribute -> '@' 'binding' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#237
attribute -> '@' 'align' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#238
attribute -> '@' 'align' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#239
attribute -> '@' 'binding' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#240
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#241
builtin_value_name -> 'vertex_index' · : {}

#242
builtin_value_name -> 'instance_index' · : {}

#243
builtin_value_name -> 'position' · : {}

#244
builtin_value_name -> 'front_facing' · : {}

#245
builtin_value_name -> 'frag_depth' · : {}

#246
builtin_value_name -> 'local_invocation_id' · : {}

#247
builtin_value_name -> 'local_invocation_index' · : {}

#248
builtin_value_name -> 'global_invocation_id' · : {}

#249
builtin_value_name -> 'workgroup_id' · : {}

#250
builtin_value_name -> 'num_workgroups' · : {}

#251
builtin_value_name -> 'sample_index' · : {}

#252
builtin_value_name -> 'sample_mask' · : {}

#253
attribute -> '@' 'group' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#254
attribute -> '@' 'id' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#255
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#256
interpolation_type_name -> 'perspective' · : {}

#257
interpolation_type_name -> 'linear' · : {}

#258
interpolation_type_name -> 'flat' · : {}

#259
attribute -> '@' 'location' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#260
attribute -> '@' 'size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#261
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#262
expression -> short_circuit_or_expression '||' relational_expression · : {}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#263
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#264
expression -> short_circuit_and_expression '&&' relational_expression · : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#265
relational_expression -> shift_expression '!=' shift_expression · : {}

#266
relational_expression -> shift_expression '==' shift_expression · : {}

#267
relational_expression -> shift_expression '>=' shift_expression · : {}

#268
relational_expression -> shift_expression '<=' shift_expression · : {}

#269
relational_expression -> shift_expression '>' shift_expression · : {}

#270
relational_expression -> shift_expression '<' shift_expression · : {}

#271
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {}

#272
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {}

#273
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {}

#274
additive_expression -> additive_expression additive_operator multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {/0[xX][0-9a-fA-F]+[iu]?/}

#275
multiplicative_expression -> unary_expression · : {}

#276
shift_expression -> unary_expression '>>' unary_expression · : {}

#277
shift_expression -> unary_expression '<<' unary_expression · : {}

#278
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {}

#279
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {}

#280
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {}

#281
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#282
swizzle_name -> '/[rgba]/' · : {}

#283
swizzle_name -> '/[rgba][rgba]/' · : {}

#284
swizzle_name -> '/[rgba][rgba][rgba]/' · : {}

#285
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {}

#286
swizzle_name -> '/[xyzw]/' · : {}

#287
swizzle_name -> '/[xyzw][xyzw]/' · : {}

#288
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {}

#289
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {}

#290
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {}

#291
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {}

#292
type_specifier -> ident · : {}

#293
type_specifier -> type_specifier_without_ident · : {}

#294
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#295
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#296
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}

#297
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {}

#298
argument_expression_list/0.1 -> expression_comma_list · : {}

#299
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#300
paren_expression -> '(' expression ')' · : {}

#301
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {}

#302
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {}

#303
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {}
array_type_specifier/0.3 -> · ',' element_count_expression : {}

#304
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#305
address_space -> 'function' · : {}

#306
address_space -> 'private' · : {}

#307
address_space -> 'workgroup' · : {}

#308
address_space -> 'uniform' · : {}

#309
address_space -> 'storage' · : {}

#310
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {}

#311
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {}

#312
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {}

#313
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {}

#314
texel_format -> 'rgba8unorm' · : {}

#315
texel_format -> 'rgba8snorm' · : {}

#316
texel_format -> 'rgba8uint' · : {}

#317
texel_format -> 'rgba8sint' · : {}

#318
texel_format -> 'rgba16uint' · : {}

#319
texel_format -> 'rgba16sint' · : {}

#320
texel_format -> 'rgba16float' · : {}

#321
texel_format -> 'r32uint' · : {}

#322
texel_format -> 'r32sint' · : {}

#323
texel_format -> 'r32float' · : {}

#324
texel_format -> 'rg32uint' · : {}

#325
texel_format -> 'rg32sint' · : {}

#326
texel_format -> 'rg32float' · : {}

#327
texel_format -> 'rgba32uint' · : {}

#328
texel_format -> 'rgba32sint' · : {}

#329
texel_format -> 'rgba32float' · : {}

#330
compound_statement/0.0/0 -> attribute compound_statement/0.0/0 · : {}

#331
compound_statement -> compound_statement/0.0 '{' · compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
compound_statement/0.2 -> · compound_statement/0.2/0 : {}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#332
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#333
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#334
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#335
struct_member/0.0 -> struct_member/0.0/0 · : {}

#336
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#337
type_alias_decl -> 'type' ident '=' type_specifier · : {}

#338
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#339
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#340
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#341
optionally_typed_ident/0.1 -> ':' type_specifier · : {}

#342
global_variable_decl/0.2 -> '=' expression · : {}

#343
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#344
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {}

#345
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#346
diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#347
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#348
attrib_end -> attrib_end/0.0 · ')' : {'f16' 'texture_multisampled_2d'}

#349
attrib_end/0.0 -> ',' · : {}

#350
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#351
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#352
global_constant_decl/1.3 -> '=' expression · : {}

#353
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#354
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {}

#355
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#356
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {}

#357
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#358
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#359
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {}

#360
function_header/0.3 -> param_list · : {}

#361
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#362
param -> param/0.0 · ident ':' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#363
param/0.0 -> param/0.0/0 · : {}

#364
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#365
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#366
compound_statement/0.2 -> compound_statement/0.2/0 · : {}

#367
compound_statement/0.2/0 -> statement · compound_statement/0.2/0 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#368
statement -> ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#369
statement -> return_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#370
statement -> if_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#371
statement -> switch_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#372
statement -> loop_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#373
statement -> for_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#374
statement -> while_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#375
statement -> func_call_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#376
statement -> variable_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#377
statement -> break_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#378
statement -> continue_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#379
statement -> 'discard' · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#380
statement -> variable_updating_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#381
statement -> compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#382
statement -> static_assert_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#383
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#384
if_statement -> if_statement/0.0 · if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#385
switch_statement -> switch_statement/0.0 · 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#386
loop_statement -> loop_statement/0.0 · 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#387
for_statement -> for_statement/0.0 · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#388
while_statement -> while_statement/0.0 · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#389
func_call_statement -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#390
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#391
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#392
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#393
break_statement -> 'break' · : {}

#394
continue_statement -> 'continue' · : {}

#395
variable_updating_statement -> assignment_statement · : {}

#396
variable_updating_statement -> increment_statement · : {}

#397
variable_updating_statement -> decrement_statement · : {}

#398
if_statement/0.0 -> if_statement/0.0/0 · : {}

#399
switch_statement/0.0 -> switch_statement/0.0/0 · : {}

#400
loop_statement/0.0 -> loop_statement/0.0/0 · : {}

#401
for_statement/0.0 -> for_statement/0.0/0 · : {}

#402
while_statement/0.0 -> while_statement/0.0/0 · : {}

#403
callable -> ident · : {}
core_lhs_expression -> ident · : {}

#404
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {/0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '%=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '&=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '*=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '+=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '-=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '/=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '<<=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '>>=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '^=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '|=' : {/0[xX][0-9a-fA-F]+[iu]?/}

#405
assignment_statement -> '_' · '=' expression : {}

#406
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {}
for_statement/0.0/0 -> attribute · for_statement/0.0/0 : {}
if_statement/0.0/0 -> attribute · if_statement/0.0/0 : {}
loop_statement/0.0/0 -> attribute · loop_statement/0.0/0 : {}
switch_statement/0.0/0 -> attribute · switch_statement/0.0/0 : {}
while_statement/0.0/0 -> attribute · while_statement/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#407
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {}

#408
lhs_expression -> '*' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#409
lhs_expression -> '&' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#410
core_lhs_expression -> '(' · lhs_expression ')' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#411
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#412
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {}

#413
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {}

#414
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {}

#415
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#416
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {}

#417
array_type_specifier/0.3 -> ',' · element_count_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
element_count_expression -> · additive_expression : {}
element_count_expression -> · bitwise_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#418
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {}

#419
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {}

#420
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#421
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {}

#422
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#423
expression_comma_list/0.1/0/0.0 -> ',' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#424
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {}

#425
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {}
paren_expression -> · '(' expression ')' : {}

#426
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {}

#427
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {}

#428
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {}

#429
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {}

#430
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {}

#431
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#432
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#433
attribute -> '@' 'size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#434
attribute -> '@' 'location' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#435
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#436
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_sample_name -> · 'center' : {}
interpolation_sample_name -> · 'centroid' : {}
interpolation_sample_name -> · 'sample' : {}

#437
attribute -> '@' 'id' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#438
attribute -> '@' 'group' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#439
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#440
attribute -> '@' 'binding' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#441
attribute -> '@' 'align' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#442
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#443
interpolation_sample_name -> 'center' · : {}

#444
interpolation_sample_name -> 'centroid' · : {}

#445
interpolation_sample_name -> 'sample' · : {}

#446
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#447
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {}

#448
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {}

#449
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {}

#450
expression_comma_list/0.1/0/0.0 -> ',' expression · : {}

#451
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {}

#452
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#453
expression_comma_list/0.2 -> ',' · : {}

#454
array_type_specifier/0.3 -> ',' element_count_expression · : {}

#455
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
element_count_expression -> additive_expression · : {}
additive_operator -> · '+' : {/0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {/0[xX][0-9a-fA-F]+[iu]?/}

#456
element_count_expression -> bitwise_expression · : {}

#457
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}

#458
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {}

#459
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident/7.5 -> · ',' access_mode : {}

#460
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {}

#461
access_mode -> 'read' · : {}

#462
access_mode -> 'write' · : {}

#463
access_mode -> 'read_write' · : {}

#464
core_lhs_expression -> '(' lhs_expression · ')' : {}

#465
core_lhs_expression -> ident · : {}

#466
lhs_expression -> '&' lhs_expression · : {}

#467
lhs_expression -> '*' lhs_expression · : {}

#468
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {}

#469
lhs_expression/0.1 -> component_or_swizzle_specifier · : {}

#470
if_statement/0.0/0 -> attribute if_statement/0.0/0 · : {}

#471
switch_statement/0.0/0 -> attribute switch_statement/0.0/0 · : {}

#472
loop_statement/0.0/0 -> attribute loop_statement/0.0/0 · : {}

#473
for_statement/0.0/0 -> attribute for_statement/0.0/0 · : {}

#474
while_statement/0.0/0 -> attribute while_statement/0.0/0 · : {}

#475
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#476
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#477
increment_statement -> lhs_expression '++' · : {}

#478
decrement_statement -> lhs_expression '--' · : {}

#479
assignment_statement/0.1 -> '=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#480
assignment_statement/0.1 -> compound_assignment_operator · : {/0[xX][0-9a-fA-F]+[iu]?/}

#481
compound_assignment_operator -> '+=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#482
compound_assignment_operator -> '-=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#483
compound_assignment_operator -> '*=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#484
compound_assignment_operator -> '/=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#485
compound_assignment_operator -> '%=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#486
compound_assignment_operator -> '&=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#487
compound_assignment_operator -> '|=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#488
compound_assignment_operator -> '^=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#489
compound_assignment_operator -> '>>=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#490
compound_assignment_operator -> '<<=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#491
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#492
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#493
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#494
func_call_statement -> callable argument_expression_list · : {}

#495
while_statement -> while_statement/0.0 'while' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#496
for_statement -> for_statement/0.0 'for' · '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#497
loop_statement -> loop_statement/0.0 'loop' · loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
loop_statement/0.2 -> · loop_statement/0.2/0 : {}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {}

#498
switch_statement -> switch_statement/0.0 'switch' · expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#499
if_statement -> if_statement/0.0 if_clause · if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2 -> · if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#500
if_clause -> 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#501
return_statement -> 'return' return_statement/0.1 · : {}

#502
return_statement/0.1 -> expression · : {}

#503
statement -> static_assert_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#504
statement -> variable_updating_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#505
statement -> 'discard' ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#506
statement -> continue_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#507
statement -> break_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#508
statement -> variable_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#509
statement -> func_call_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#510
statement -> return_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#511
compound_statement/0.2/0 -> statement compound_statement/0.2/0 · : {}

#512
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#513
param/0.0/0 -> attribute param/0.0/0 · : {}

#514
param -> param/0.0 ident · ':' type_specifier : {}

#515
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#516
param_list/0.1 -> param_list/0.1/0 · : {}

#517
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#518
param_list/0.1/0/0.0 -> ',' · param : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#519
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {}

#520
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {}

#521
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {}

#522
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {EndOfText}

#523
struct_body_decl/0.3 -> ',' · : {}

#524
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#525
variable_qualifier/0.2 -> ',' access_mode · : {}

#526
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#527
attrib_end -> attrib_end/0.0 ')' · : {'f16' 'texture_multisampled_2d'}

#528
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {}

#529
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {EndOfText}

#530
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {}

#531
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#532
param_list/0.1/0/0.0 -> ',' param · : {}

#533
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {}

#534
param_list -> param param_list/0.1 param_list/0.2 · : {}

#535
param_list/0.2 -> ',' · : {}

#536
param -> param/0.0 ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#537
if_clause -> 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#538
if_statement -> if_statement/0.0 if_clause if_statement/0.2 · if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_clause -> · 'else' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.3 -> · else_clause : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#539
if_statement/0.2 -> if_statement/0.2/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#540
if_statement/0.2/0 -> else_if_clause · if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#541
else_if_clause -> 'else' · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#542
switch_statement -> switch_statement/0.0 'switch' expression · switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
switch_body -> · switch_body/0.0 '{' switch_body/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_body/0.0 -> · switch_body/0.0/0 : {}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {}

#543
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 · '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#544
loop_statement/0.2 -> loop_statement/0.2/0 · : {}

#545
loop_statement/0.2/0 -> attribute · loop_statement/0.2/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {}

#546
for_statement -> for_statement/0.0 'for' '(' · for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#547
while_statement -> while_statement/0.0 'while' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#548
variable_statement -> variable_decl '=' expression · : {}

#549
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#550
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#551
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#552
assignment_statement -> '_' '=' expression · : {}

#553
core_lhs_expression -> '(' lhs_expression ')' · : {}

#554
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {}

#555
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {}

#556
type_specifier_without_ident/7.5 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#557
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#558
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#559
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#560
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#561
type_specifier_without_ident/7.5 -> ',' access_mode · : {}

#562
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {}

#563
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#564
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#565
while_statement -> while_statement/0.0 'while' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#566
for_statement -> for_statement/0.0 'for' '(' for_header · ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#567
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#568
for_header/0.0 -> for_init · : {}

#569
for_init -> variable_statement · : {}

#570
for_init -> variable_updating_statement · : {}

#571
for_init -> func_call_statement · : {}

#572
loop_statement/0.2/0 -> attribute loop_statement/0.2/0 · : {}

#573
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' · loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
loop_statement/0.4 -> · loop_statement/0.4/0 : {}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#574
switch_statement -> switch_statement/0.0 'switch' expression switch_body · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#575
switch_body -> switch_body/0.0 · '{' switch_body/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#576
switch_body/0.0 -> switch_body/0.0/0 · : {}

#577
switch_body/0.0/0 -> attribute · switch_body/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {}

#578
else_if_clause -> 'else' 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#579
if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#580
if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#581
if_statement/0.3 -> else_clause · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#582
else_clause -> 'else' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#583
if_clause -> 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#584
param -> param/0.0 ident ':' type_specifier · : {}

#585
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#586
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#587
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#588
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#589
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {}

#590
else_clause -> 'else' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#591
else_if_clause -> 'else' 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#592
switch_body/0.0/0 -> attribute switch_body/0.0/0 · : {}

#593
switch_body -> switch_body/0.0 '{' · switch_body/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body/0.2 -> · switch_body/0.2/0 : {}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {}
switch_clause -> · case_clause : {}
switch_clause -> · default_alone_clause : {}

#594
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 · loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.5 -> · continuing_statement : {}

#595
loop_statement/0.4 -> loop_statement/0.4/0 · : {}

#596
loop_statement/0.4/0 -> statement · loop_statement/0.4/0 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#597
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#598
for_statement -> for_statement/0.0 'for' '(' for_header ')' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#599
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#600
for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#601
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#602
for_header/0.2 -> expression · : {}

#603
loop_statement/0.4/0 -> statement loop_statement/0.4/0 · : {}

#604
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#605
loop_statement/0.5 -> continuing_statement · : {}

#606
continuing_statement -> 'continuing' · continuing_compound_statement : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
continuing_compound_statement -> · continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {}
continuing_compound_statement/0.0 -> · continuing_compound_statement/0.0/0 : {}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {}

#607
switch_body -> switch_body/0.0 '{' switch_body/0.2 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#608
switch_body/0.2 -> switch_body/0.2/0 · : {}

#609
switch_body/0.2/0 -> switch_clause · switch_body/0.2/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {}
switch_clause -> · case_clause : {}
switch_clause -> · default_alone_clause : {}

#610
switch_clause -> case_clause · : {}

#611
switch_clause -> default_alone_clause · : {}

#612
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#613
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {}
default_alone_clause/0.1 -> · ':' : {}

#614
else_if_clause -> 'else' 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#615
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#616
default_alone_clause/0.1 -> ':' · : {}

#617
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {}
case_clause/0.2 -> · ':' : {}

#618
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {}
case_selectors/0.1 -> · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#619
case_selector -> 'default' · : {}

#620
case_selector -> expression · : {}

#621
switch_body/0.2/0 -> switch_clause switch_body/0.2/0 · : {}

#622
switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#623
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#624
continuing_compound_statement -> continuing_compound_statement/0.0 · '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {}

#625
continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 · : {}

#626
continuing_compound_statement/0.0/0 -> attribute · continuing_compound_statement/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {}

#627
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#628
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#629
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#630
for_header/0.4 -> for_update · : {}

#631
for_update -> variable_updating_statement · : {}

#632
for_update -> func_call_statement · : {}

#633
continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 · : {}

#634
continuing_compound_statement -> continuing_compound_statement/0.0 '{' · continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.2 -> · continuing_compound_statement/0.2/0 : {'break'}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#635
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {}
case_selectors/0.2 -> · ',' : {}

#636
case_selectors/0.1 -> case_selectors/0.1/0 · : {}

#637
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#638
case_selectors/0.1/0/0.0 -> ',' · case_selector : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#639
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#640
case_clause/0.2 -> ':' · : {}

#641
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {}

#642
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {}

#643
case_selectors/0.1/0/0.0 -> ',' case_selector · : {}

#644
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {}

#645
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {}

#646
case_selectors/0.2 -> ',' · : {}

#647
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 · continuing_compound_statement/0.3 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.3 -> · break_if_statement : {}

#648
continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 · : {'break'}

#649
continuing_compound_statement/0.2/0 -> statement · continuing_compound_statement/0.2/0 : {'break'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#650
continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 · : {'break'}

#651
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 · '}' : {}

#652
continuing_compound_statement/0.3 -> break_if_statement · : {}

#653
break_if_statement -> 'break' · 'if' expression ';' : {}

#654
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#655
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' · : {}

#656
break_if_statement -> 'break' 'if' expression · ';' : {}

#657
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 global_directive -> diagnostic_directive ·
r#2 global_directive -> enable_directive ·
r#3 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#4 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#5 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#6 global_decl -> ';' ·
r#7 global_decl -> struct_decl ·
r#8 global_decl -> function_decl ·
r#9 attribute -> '@' 'const' ·
r#10 attribute -> '@' 'invariant' ·
r#11 attribute -> '@' 'vertex' ·
r#12 attribute -> '@' 'fragment' ·
r#13 attribute -> '@' 'compute' ·
r#14 global_decl -> static_assert_statement ';' ·
r#15 global_decl -> type_alias_decl ';' ·
r#16 global_decl -> global_constant_decl ';' ·
r#17 global_decl -> global_variable_decl ';' ·
r#18 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#19 diagnostic_directive -> 'diagnostic' diagnostic_control ';' ·
r#20 enable_directive -> 'enable' extension_name ';' ·
r#21 variable_decl/0.1 -> variable_qualifier ·
r#22 struct_decl -> 'struct' ident struct_body_decl ·
r#23 function_decl -> function_decl/0.0 function_header compound_statement ·
r#24 multiplicative_operator -> '*' ·
r#25 multiplicative_operator -> '/' ·
r#26 multiplicative_operator -> '%' ·
r#27 additive_operator -> '+' ·
r#28 additive_operator -> '-' ·
r#29 attribute -> '@' 'diagnostic' diagnostic_control ·
r#30 diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end ·
r#31 statement -> ';' ·
r#32 statement -> if_statement ·
r#33 statement -> switch_statement ·
r#34 statement -> loop_statement ·
r#35 statement -> for_statement ·
r#36 statement -> while_statement ·
r#37 statement -> compound_statement ·
r#38 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#39 attribute -> '@' 'size' '(' expression attrib_end ·
r#40 attribute -> '@' 'location' '(' expression attrib_end ·
r#41 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#42 attribute -> '@' 'id' '(' expression attrib_end ·
r#43 attribute -> '@' 'group' '(' expression attrib_end ·
r#44 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#45 attribute -> '@' 'binding' '(' expression attrib_end ·
r#46 attribute -> '@' 'align' '(' expression attrib_end ·
r#47 assignment_statement/0.1 -> '=' ·
r#48 assignment_statement/0.1 -> compound_assignment_operator ·
r#49 compound_assignment_operator -> '+=' ·
r#50 compound_assignment_operator -> '-=' ·
r#51 compound_assignment_operator -> '*=' ·
r#52 compound_assignment_operator -> '/=' ·
r#53 compound_assignment_operator -> '%=' ·
r#54 compound_assignment_operator -> '&=' ·
r#55 compound_assignment_operator -> '|=' ·
r#56 compound_assignment_operator -> '^=' ·
r#57 compound_assignment_operator -> '>>=' ·
r#58 compound_assignment_operator -> '<<=' ·
r#59 statement -> static_assert_statement ';' ·
r#60 statement -> variable_updating_statement ';' ·
r#61 statement -> 'discard' ';' ·
r#62 statement -> continue_statement ';' ·
r#63 statement -> break_statement ';' ·
r#64 statement -> variable_statement ';' ·
r#65 statement -> func_call_statement ';' ·
r#66 statement -> return_statement ';' ·
r#67 compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' ·
r#68 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#69 attrib_end -> attrib_end/0.0 ')' ·
r#70 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#71 if_statement/0.2 -> if_statement/0.2/0 ·
r#72 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#73 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#74 while_statement -> while_statement/0.0 'while' expression compound_statement ·
r#75 switch_statement -> switch_statement/0.0 'switch' expression switch_body ·
r#76 if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 ·
r#77 if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ·
r#78 if_statement/0.3 -> else_clause ·
r#79 if_clause -> 'if' expression compound_statement ·
r#80 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#81 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#82 else_clause -> 'else' compound_statement ·
r#83 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#84 for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement ·
r#85 else_if_clause -> 'else' 'if' expression compound_statement ·
r#86 switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' ·
r#87 loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ·
r#88 continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 ·
r#89 continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 ·

=Action:
[#0 'diagnostic']: s#7
[#0 'enable']: s#8
[#1 EndOfText]: acc
[#2 ';']: s#17
[#2 '@']: s#35
[#2 'const']: s#25
[#2 'static_assert']: s#30
[#2 'struct']: s#28
[#2 'type']: s#27
[#3 EndOfText]: r#0
[#4 'diagnostic']: s#7
[#4 'enable']: s#8
[#5 EndOfText]: r#1
[#6 EndOfText]: r#2
[#7 '(']: s#12
[#8 'f16']: s#10
[#9 ';']: s#168
[#11 ';']: s#167
[#12 'error']: s#164
[#12 'off']: s#166
[#12 'warning']: s#165
[#13 EndOfText]: r#3
[#14 EndOfText]: r#4
[#15 EndOfText]: r#5
[#16 ';']: s#17
[#16 '@']: s#35
[#16 'const']: s#25
[#16 'static_assert']: s#30
[#16 'struct']: s#28
[#16 'type']: s#27
[#17 EndOfText]: r#6
[#18 ';']: s#161
[#19 ';']: s#160
[#20 ';']: s#159
[#21 EndOfText]: r#7
[#22 EndOfText]: r#8
[#23 ';']: s#158
[#24 'var']: s#157
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#26 'override']: s#153
[#27 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#28 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#29 'fn']: s#150
[#30 '!']: s#68
[#30 '&']: s#71
[#30 '(']: s#83
[#30 '*']: s#70
[#30 '-']: s#67
[#30 'array']: s#87
[#30 'atomic']: s#101
[#30 'bitcast']: s#77
[#30 'bool']: s#94
[#30 'f16']: s#96
[#30 'f32']: s#95
[#30 'false']: s#93
[#30 'i32']: s#97
[#30 'mat2x2']: s#106
[#30 'mat2x3']: s#107
[#30 'mat2x4']: s#108
[#30 'mat3x2']: s#109
[#30 'mat3x3']: s#110
[#30 'mat3x4']: s#111
[#30 'mat4x2']: s#112
[#30 'mat4x3']: s#113
[#30 'mat4x4']: s#114
[#30 'ptr']: s#99
[#30 'sampler']: s#131
[#30 'sampler_comparison']: s#132
[#30 'texture_1d']: s#138
[#30 'texture_2d']: s#139
[#30 'texture_2d_array']: s#140
[#30 'texture_3d']: s#141
[#30 'texture_cube']: s#142
[#30 'texture_cube_array']: s#143
[#30 'texture_depth_2d']: s#133
[#30 'texture_depth_2d_array']: s#134
[#30 'texture_depth_cube']: s#135
[#30 'texture_depth_cube_array']: s#136
[#30 'texture_depth_multisampled_2d']: s#137
[#30 'texture_multisampled_2d']: s#144
[#30 'texture_storage_1d']: s#145
[#30 'texture_storage_2d']: s#146
[#30 'texture_storage_2d_array']: s#147
[#30 'texture_storage_3d']: s#148
[#30 'true']: s#92
[#30 'u32']: s#98
[#30 'vec2']: s#103
[#30 'vec3']: s#104
[#30 'vec4']: s#105
[#30 '~']: s#69
[#30 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#30 /0[fh]/]: s#118
[#30 /0[iu]?/]: s#115
[#30 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#30 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#30 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#30 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#30 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#30 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#30 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#30 /[1-9][0-9]*[fh]/]: s#119
[#30 /[1-9][0-9]*[iu]?/]: s#116
[#34 '@']: s#35
[#35 'align']: s#36
[#35 'binding']: s#37
[#35 'builtin']: s#38
[#35 'compute']: s#50
[#35 'const']: s#39
[#35 'diagnostic']: s#40
[#35 'fragment']: s#49
[#35 'group']: s#41
[#35 'id']: s#42
[#35 'interpolate']: s#43
[#35 'invariant']: s#44
[#35 'location']: s#45
[#35 'size']: s#46
[#35 'vertex']: s#48
[#35 'workgroup_size']: s#47
[#36 '(']: s#237
[#37 '(']: s#236
[#38 '(']: s#235
[#39 'f16']: r#9
[#39 'texture_multisampled_2d']: r#9
[#40 '(']: s#12
[#41 '(']: s#233
[#42 '(']: s#232
[#43 '(']: s#231
[#44 'f16']: r#10
[#44 'texture_multisampled_2d']: r#10
[#45 '(']: s#230
[#46 '(']: s#229
[#47 '(']: s#228
[#48 'f16']: r#11
[#48 'texture_multisampled_2d']: r#11
[#49 'f16']: r#12
[#49 'texture_multisampled_2d']: r#12
[#50 'f16']: r#13
[#50 'texture_multisampled_2d']: r#13
[#56 '||']: s#227
[#57 '&&']: s#226
[#59 '!=']: s#225
[#59 '<']: s#220
[#59 '<=']: s#222
[#59 '==']: s#224
[#59 '>']: s#221
[#59 '>=']: s#223
[#60 '&']: s#219
[#61 '|']: s#218
[#62 '^']: s#217
[#63 '+']: s#215
[#63 '-']: s#216
[#64 '<<']: s#212
[#64 '>>']: s#213
[#65 '%']: s#211
[#65 '*']: s#209
[#65 '/']: s#210
[#67 '!']: s#68
[#67 '&']: s#71
[#67 '(']: s#83
[#67 '*']: s#70
[#67 '-']: s#67
[#67 'array']: s#87
[#67 'atomic']: s#101
[#67 'bitcast']: s#77
[#67 'bool']: s#94
[#67 'f16']: s#96
[#67 'f32']: s#95
[#67 'false']: s#93
[#67 'i32']: s#97
[#67 'mat2x2']: s#106
[#67 'mat2x3']: s#107
[#67 'mat2x4']: s#108
[#67 'mat3x2']: s#109
[#67 'mat3x3']: s#110
[#67 'mat3x4']: s#111
[#67 'mat4x2']: s#112
[#67 'mat4x3']: s#113
[#67 'mat4x4']: s#114
[#67 'ptr']: s#99
[#67 'sampler']: s#131
[#67 'sampler_comparison']: s#132
[#67 'texture_1d']: s#138
[#67 'texture_2d']: s#139
[#67 'texture_2d_array']: s#140
[#67 'texture_3d']: s#141
[#67 'texture_cube']: s#142
[#67 'texture_cube_array']: s#143
[#67 'texture_depth_2d']: s#133
[#67 'texture_depth_2d_array']: s#134
[#67 'texture_depth_cube']: s#135
[#67 'texture_depth_cube_array']: s#136
[#67 'texture_depth_multisampled_2d']: s#137
[#67 'texture_multisampled_2d']: s#144
[#67 'texture_storage_1d']: s#145
[#67 'texture_storage_2d']: s#146
[#67 'texture_storage_2d_array']: s#147
[#67 'texture_storage_3d']: s#148
[#67 'true']: s#92
[#67 'u32']: s#98
[#67 'vec2']: s#103
[#67 'vec3']: s#104
[#67 'vec4']: s#105
[#67 '~']: s#69
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#67 /0[fh]/]: s#118
[#67 /0[iu]?/]: s#115
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#67 /[1-9][0-9]*[fh]/]: s#119
[#67 /[1-9][0-9]*[iu]?/]: s#116
[#68 '!']: s#68
[#68 '&']: s#71
[#68 '(']: s#83
[#68 '*']: s#70
[#68 '-']: s#67
[#68 'array']: s#87
[#68 'atomic']: s#101
[#68 'bitcast']: s#77
[#68 'bool']: s#94
[#68 'f16']: s#96
[#68 'f32']: s#95
[#68 'false']: s#93
[#68 'i32']: s#97
[#68 'mat2x2']: s#106
[#68 'mat2x3']: s#107
[#68 'mat2x4']: s#108
[#68 'mat3x2']: s#109
[#68 'mat3x3']: s#110
[#68 'mat3x4']: s#111
[#68 'mat4x2']: s#112
[#68 'mat4x3']: s#113
[#68 'mat4x4']: s#114
[#68 'ptr']: s#99
[#68 'sampler']: s#131
[#68 'sampler_comparison']: s#132
[#68 'texture_1d']: s#138
[#68 'texture_2d']: s#139
[#68 'texture_2d_array']: s#140
[#68 'texture_3d']: s#141
[#68 'texture_cube']: s#142
[#68 'texture_cube_array']: s#143
[#68 'texture_depth_2d']: s#133
[#68 'texture_depth_2d_array']: s#134
[#68 'texture_depth_cube']: s#135
[#68 'texture_depth_cube_array']: s#136
[#68 'texture_depth_multisampled_2d']: s#137
[#68 'texture_multisampled_2d']: s#144
[#68 'texture_storage_1d']: s#145
[#68 'texture_storage_2d']: s#146
[#68 'texture_storage_2d_array']: s#147
[#68 'texture_storage_3d']: s#148
[#68 'true']: s#92
[#68 'u32']: s#98
[#68 'vec2']: s#103
[#68 'vec3']: s#104
[#68 'vec4']: s#105
[#68 '~']: s#69
[#68 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#68 /0[fh]/]: s#118
[#68 /0[iu]?/]: s#115
[#68 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#68 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#68 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#68 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#68 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#68 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#68 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#68 /[1-9][0-9]*[fh]/]: s#119
[#68 /[1-9][0-9]*[iu]?/]: s#116
[#69 '!']: s#68
[#69 '&']: s#71
[#69 '(']: s#83
[#69 '*']: s#70
[#69 '-']: s#67
[#69 'array']: s#87
[#69 'atomic']: s#101
[#69 'bitcast']: s#77
[#69 'bool']: s#94
[#69 'f16']: s#96
[#69 'f32']: s#95
[#69 'false']: s#93
[#69 'i32']: s#97
[#69 'mat2x2']: s#106
[#69 'mat2x3']: s#107
[#69 'mat2x4']: s#108
[#69 'mat3x2']: s#109
[#69 'mat3x3']: s#110
[#69 'mat3x4']: s#111
[#69 'mat4x2']: s#112
[#69 'mat4x3']: s#113
[#69 'mat4x4']: s#114
[#69 'ptr']: s#99
[#69 'sampler']: s#131
[#69 'sampler_comparison']: s#132
[#69 'texture_1d']: s#138
[#69 'texture_2d']: s#139
[#69 'texture_2d_array']: s#140
[#69 'texture_3d']: s#141
[#69 'texture_cube']: s#142
[#69 'texture_cube_array']: s#143
[#69 'texture_depth_2d']: s#133
[#69 'texture_depth_2d_array']: s#134
[#69 'texture_depth_cube']: s#135
[#69 'texture_depth_cube_array']: s#136
[#69 'texture_depth_multisampled_2d']: s#137
[#69 'texture_multisampled_2d']: s#144
[#69 'texture_storage_1d']: s#145
[#69 'texture_storage_2d']: s#146
[#69 'texture_storage_2d_array']: s#147
[#69 'texture_storage_3d']: s#148
[#69 'true']: s#92
[#69 'u32']: s#98
[#69 'vec2']: s#103
[#69 'vec3']: s#104
[#69 'vec4']: s#105
[#69 '~']: s#69
[#69 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#69 /0[fh]/]: s#118
[#69 /0[iu]?/]: s#115
[#69 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#69 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#69 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#69 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#69 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#69 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#69 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#69 /[1-9][0-9]*[fh]/]: s#119
[#69 /[1-9][0-9]*[iu]?/]: s#116
[#70 '!']: s#68
[#70 '&']: s#71
[#70 '(']: s#83
[#70 '*']: s#70
[#70 '-']: s#67
[#70 'array']: s#87
[#70 'atomic']: s#101
[#70 'bitcast']: s#77
[#70 'bool']: s#94
[#70 'f16']: s#96
[#70 'f32']: s#95
[#70 'false']: s#93
[#70 'i32']: s#97
[#70 'mat2x2']: s#106
[#70 'mat2x3']: s#107
[#70 'mat2x4']: s#108
[#70 'mat3x2']: s#109
[#70 'mat3x3']: s#110
[#70 'mat3x4']: s#111
[#70 'mat4x2']: s#112
[#70 'mat4x3']: s#113
[#70 'mat4x4']: s#114
[#70 'ptr']: s#99
[#70 'sampler']: s#131
[#70 'sampler_comparison']: s#132
[#70 'texture_1d']: s#138
[#70 'texture_2d']: s#139
[#70 'texture_2d_array']: s#140
[#70 'texture_3d']: s#141
[#70 'texture_cube']: s#142
[#70 'texture_cube_array']: s#143
[#70 'texture_depth_2d']: s#133
[#70 'texture_depth_2d_array']: s#134
[#70 'texture_depth_cube']: s#135
[#70 'texture_depth_cube_array']: s#136
[#70 'texture_depth_multisampled_2d']: s#137
[#70 'texture_multisampled_2d']: s#144
[#70 'texture_storage_1d']: s#145
[#70 'texture_storage_2d']: s#146
[#70 'texture_storage_2d_array']: s#147
[#70 'texture_storage_3d']: s#148
[#70 'true']: s#92
[#70 'u32']: s#98
[#70 'vec2']: s#103
[#70 'vec3']: s#104
[#70 'vec4']: s#105
[#70 '~']: s#69
[#70 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#70 /0[fh]/]: s#118
[#70 /0[iu]?/]: s#115
[#70 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#70 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#70 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#70 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#70 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#70 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#70 /[1-9][0-9]*[fh]/]: s#119
[#70 /[1-9][0-9]*[iu]?/]: s#116
[#71 '!']: s#68
[#71 '&']: s#71
[#71 '(']: s#83
[#71 '*']: s#70
[#71 '-']: s#67
[#71 'array']: s#87
[#71 'atomic']: s#101
[#71 'bitcast']: s#77
[#71 'bool']: s#94
[#71 'f16']: s#96
[#71 'f32']: s#95
[#71 'false']: s#93
[#71 'i32']: s#97
[#71 'mat2x2']: s#106
[#71 'mat2x3']: s#107
[#71 'mat2x4']: s#108
[#71 'mat3x2']: s#109
[#71 'mat3x3']: s#110
[#71 'mat3x4']: s#111
[#71 'mat4x2']: s#112
[#71 'mat4x3']: s#113
[#71 'mat4x4']: s#114
[#71 'ptr']: s#99
[#71 'sampler']: s#131
[#71 'sampler_comparison']: s#132
[#71 'texture_1d']: s#138
[#71 'texture_2d']: s#139
[#71 'texture_2d_array']: s#140
[#71 'texture_3d']: s#141
[#71 'texture_cube']: s#142
[#71 'texture_cube_array']: s#143
[#71 'texture_depth_2d']: s#133
[#71 'texture_depth_2d_array']: s#134
[#71 'texture_depth_cube']: s#135
[#71 'texture_depth_cube_array']: s#136
[#71 'texture_depth_multisampled_2d']: s#137
[#71 'texture_multisampled_2d']: s#144
[#71 'texture_storage_1d']: s#145
[#71 'texture_storage_2d']: s#146
[#71 'texture_storage_2d_array']: s#147
[#71 'texture_storage_3d']: s#148
[#71 'true']: s#92
[#71 'u32']: s#98
[#71 'vec2']: s#103
[#71 'vec3']: s#104
[#71 'vec4']: s#105
[#71 '~']: s#69
[#71 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#71 /0[fh]/]: s#118
[#71 /0[iu]?/]: s#115
[#71 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#71 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#71 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#71 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#71 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#71 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#71 /[1-9][0-9]*[fh]/]: s#119
[#71 /[1-9][0-9]*[iu]?/]: s#116
[#72 '.']: s#202
[#72 '[']: s#201
[#77 '<']: s#198
[#79 '(']: s#197
[#83 '!']: s#68
[#83 '&']: s#71
[#83 '(']: s#83
[#83 '*']: s#70
[#83 '-']: s#67
[#83 'array']: s#87
[#83 'atomic']: s#101
[#83 'bitcast']: s#77
[#83 'bool']: s#94
[#83 'f16']: s#96
[#83 'f32']: s#95
[#83 'false']: s#93
[#83 'i32']: s#97
[#83 'mat2x2']: s#106
[#83 'mat2x3']: s#107
[#83 'mat2x4']: s#108
[#83 'mat3x2']: s#109
[#83 'mat3x3']: s#110
[#83 'mat3x4']: s#111
[#83 'mat4x2']: s#112
[#83 'mat4x3']: s#113
[#83 'mat4x4']: s#114
[#83 'ptr']: s#99
[#83 'sampler']: s#131
[#83 'sampler_comparison']: s#132
[#83 'texture_1d']: s#138
[#83 'texture_2d']: s#139
[#83 'texture_2d_array']: s#140
[#83 'texture_3d']: s#141
[#83 'texture_cube']: s#142
[#83 'texture_cube_array']: s#143
[#83 'texture_depth_2d']: s#133
[#83 'texture_depth_2d_array']: s#134
[#83 'texture_depth_cube']: s#135
[#83 'texture_depth_cube_array']: s#136
[#83 'texture_depth_multisampled_2d']: s#137
[#83 'texture_multisampled_2d']: s#144
[#83 'texture_storage_1d']: s#145
[#83 'texture_storage_2d']: s#146
[#83 'texture_storage_2d_array']: s#147
[#83 'texture_storage_3d']: s#148
[#83 'true']: s#92
[#83 'u32']: s#98
[#83 'vec2']: s#103
[#83 'vec3']: s#104
[#83 'vec4']: s#105
[#83 '~']: s#69
[#83 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#83 /0[fh]/]: s#118
[#83 /0[iu]?/]: s#115
[#83 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#83 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#83 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#83 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#83 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#83 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#83 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#83 /[1-9][0-9]*[fh]/]: s#119
[#83 /[1-9][0-9]*[iu]?/]: s#116
[#85 '<']: s#194
[#86 '<']: s#193
[#87 '<']: s#192
[#99 '<']: s#191
[#101 '<']: s#190
[#128 '<']: s#189
[#129 '<']: s#188
[#130 '<']: s#187
[#149 '@']: s#35
[#150 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#151 '{']: s#181
[#152 '=']: s#179
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#154 '=']: s#177
[#155 ':']: s#176
[#156 '=']: s#174
[#157 '<']: s#172
[#158 EndOfText]: r#14
[#159 EndOfText]: r#15
[#160 EndOfText]: r#16
[#161 EndOfText]: r#17
[#162 EndOfText]: r#18
[#163 ',']: s#169
[#167 EndOfText]: r#19
[#168 EndOfText]: r#20
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#346
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#21
[#172 'function']: s#305
[#172 'private']: s#306
[#172 'storage']: s#309
[#172 'uniform']: s#308
[#172 'workgroup']: s#307
[#174 '!']: s#68
[#174 '&']: s#71
[#174 '(']: s#83
[#174 '*']: s#70
[#174 '-']: s#67
[#174 'array']: s#87
[#174 'atomic']: s#101
[#174 'bitcast']: s#77
[#174 'bool']: s#94
[#174 'f16']: s#96
[#174 'f32']: s#95
[#174 'false']: s#93
[#174 'i32']: s#97
[#174 'mat2x2']: s#106
[#174 'mat2x3']: s#107
[#174 'mat2x4']: s#108
[#174 'mat3x2']: s#109
[#174 'mat3x3']: s#110
[#174 'mat3x4']: s#111
[#174 'mat4x2']: s#112
[#174 'mat4x3']: s#113
[#174 'mat4x4']: s#114
[#174 'ptr']: s#99
[#174 'sampler']: s#131
[#174 'sampler_comparison']: s#132
[#174 'texture_1d']: s#138
[#174 'texture_2d']: s#139
[#174 'texture_2d_array']: s#140
[#174 'texture_3d']: s#141
[#174 'texture_cube']: s#142
[#174 'texture_cube_array']: s#143
[#174 'texture_depth_2d']: s#133
[#174 'texture_depth_2d_array']: s#134
[#174 'texture_depth_cube']: s#135
[#174 'texture_depth_cube_array']: s#136
[#174 'texture_depth_multisampled_2d']: s#137
[#174 'texture_multisampled_2d']: s#144
[#174 'texture_storage_1d']: s#145
[#174 'texture_storage_2d']: s#146
[#174 'texture_storage_2d_array']: s#147
[#174 'texture_storage_3d']: s#148
[#174 'true']: s#92
[#174 'u32']: s#98
[#174 'vec2']: s#103
[#174 'vec3']: s#104
[#174 'vec4']: s#105
[#174 '~']: s#69
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#174 /0[fh]/]: s#118
[#174 /0[iu]?/]: s#115
[#174 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#174 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#174 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#174 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#174 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#174 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#174 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#174 /[1-9][0-9]*[fh]/]: s#119
[#174 /[1-9][0-9]*[iu]?/]: s#116
[#176 'array']: s#296
[#176 'atomic']: s#101
[#176 'bool']: s#94
[#176 'f16']: s#96
[#176 'f32']: s#95
[#176 'i32']: s#97
[#176 'mat2x2']: s#106
[#176 'mat2x3']: s#107
[#176 'mat2x4']: s#108
[#176 'mat3x2']: s#109
[#176 'mat3x3']: s#110
[#176 'mat3x4']: s#111
[#176 'mat4x2']: s#112
[#176 'mat4x3']: s#113
[#176 'mat4x4']: s#114
[#176 'ptr']: s#99
[#176 'sampler']: s#131
[#176 'sampler_comparison']: s#132
[#176 'texture_1d']: s#138
[#176 'texture_2d']: s#139
[#176 'texture_2d_array']: s#140
[#176 'texture_3d']: s#141
[#176 'texture_cube']: s#142
[#176 'texture_cube_array']: s#143
[#176 'texture_depth_2d']: s#133
[#176 'texture_depth_2d_array']: s#134
[#176 'texture_depth_cube']: s#135
[#176 'texture_depth_cube_array']: s#136
[#176 'texture_depth_multisampled_2d']: s#137
[#176 'texture_multisampled_2d']: s#144
[#176 'texture_storage_1d']: s#145
[#176 'texture_storage_2d']: s#146
[#176 'texture_storage_2d_array']: s#147
[#176 'texture_storage_3d']: s#148
[#176 'u32']: s#98
[#176 'vec2']: s#103
[#176 'vec3']: s#104
[#176 'vec4']: s#105
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#177 '!']: s#68
[#177 '&']: s#71
[#177 '(']: s#83
[#177 '*']: s#70
[#177 '-']: s#67
[#177 'array']: s#87
[#177 'atomic']: s#101
[#177 'bitcast']: s#77
[#177 'bool']: s#94
[#177 'f16']: s#96
[#177 'f32']: s#95
[#177 'false']: s#93
[#177 'i32']: s#97
[#177 'mat2x2']: s#106
[#177 'mat2x3']: s#107
[#177 'mat2x4']: s#108
[#177 'mat3x2']: s#109
[#177 'mat3x3']: s#110
[#177 'mat3x4']: s#111
[#177 'mat4x2']: s#112
[#177 'mat4x3']: s#113
[#177 'mat4x4']: s#114
[#177 'ptr']: s#99
[#177 'sampler']: s#131
[#177 'sampler_comparison']: s#132
[#177 'texture_1d']: s#138
[#177 'texture_2d']: s#139
[#177 'texture_2d_array']: s#140
[#177 'texture_3d']: s#141
[#177 'texture_cube']: s#142
[#177 'texture_cube_array']: s#143
[#177 'texture_depth_2d']: s#133
[#177 'texture_depth_2d_array']: s#134
[#177 'texture_depth_cube']: s#135
[#177 'texture_depth_cube_array']: s#136
[#177 'texture_depth_multisampled_2d']: s#137
[#177 'texture_multisampled_2d']: s#144
[#177 'texture_storage_1d']: s#145
[#177 'texture_storage_2d']: s#146
[#177 'texture_storage_2d_array']: s#147
[#177 'texture_storage_3d']: s#148
[#177 'true']: s#92
[#177 'u32']: s#98
[#177 'vec2']: s#103
[#177 'vec3']: s#104
[#177 'vec4']: s#105
[#177 '~']: s#69
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#177 /0[fh]/]: s#118
[#177 /0[iu]?/]: s#115
[#177 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#177 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#177 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#177 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#177 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#177 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#177 /[1-9][0-9]*[fh]/]: s#119
[#177 /[1-9][0-9]*[iu]?/]: s#116
[#178 '=']: s#339
[#179 'array']: s#296
[#179 'atomic']: s#101
[#179 'bool']: s#94
[#179 'f16']: s#96
[#179 'f32']: s#95
[#179 'i32']: s#97
[#179 'mat2x2']: s#106
[#179 'mat2x3']: s#107
[#179 'mat2x4']: s#108
[#179 'mat3x2']: s#109
[#179 'mat3x3']: s#110
[#179 'mat3x4']: s#111
[#179 'mat4x2']: s#112
[#179 'mat4x3']: s#113
[#179 'mat4x4']: s#114
[#179 'ptr']: s#99
[#179 'sampler']: s#131
[#179 'sampler_comparison']: s#132
[#179 'texture_1d']: s#138
[#179 'texture_2d']: s#139
[#179 'texture_2d_array']: s#140
[#179 'texture_3d']: s#141
[#179 'texture_cube']: s#142
[#179 'texture_cube_array']: s#143
[#179 'texture_depth_2d']: s#133
[#179 'texture_depth_2d_array']: s#134
[#179 'texture_depth_cube']: s#135
[#179 'texture_depth_cube_array']: s#136
[#179 'texture_depth_multisampled_2d']: s#137
[#179 'texture_multisampled_2d']: s#144
[#179 'texture_storage_1d']: s#145
[#179 'texture_storage_2d']: s#146
[#179 'texture_storage_2d_array']: s#147
[#179 'texture_storage_3d']: s#148
[#179 'u32']: s#98
[#179 'vec2']: s#103
[#179 'vec3']: s#104
[#179 'vec4']: s#105
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#180 EndOfText]: r#22
[#181 '@']: s#35
[#182 '(']: s#332
[#183 EndOfText]: r#23
[#184 '{']: s#331
[#186 '@']: s#35
[#187 'r32float']: s#323
[#187 'r32sint']: s#322
[#187 'r32uint']: s#321
[#187 'rg32float']: s#326
[#187 'rg32sint']: s#325
[#187 'rg32uint']: s#324
[#187 'rgba16float']: s#320
[#187 'rgba16sint']: s#319
[#187 'rgba16uint']: s#318
[#187 'rgba32float']: s#329
[#187 'rgba32sint']: s#328
[#187 'rgba32uint']: s#327
[#187 'rgba8sint']: s#317
[#187 'rgba8snorm']: s#315
[#187 'rgba8uint']: s#316
[#187 'rgba8unorm']: s#314
[#188 'array']: s#296
[#188 'atomic']: s#101
[#188 'bool']: s#94
[#188 'f16']: s#96
[#188 'f32']: s#95
[#188 'i32']: s#97
[#188 'mat2x2']: s#106
[#188 'mat2x3']: s#107
[#188 'mat2x4']: s#108
[#188 'mat3x2']: s#109
[#188 'mat3x3']: s#110
[#188 'mat3x4']: s#111
[#188 'mat4x2']: s#112
[#188 'mat4x3']: s#113
[#188 'mat4x4']: s#114
[#188 'ptr']: s#99
[#188 'sampler']: s#131
[#188 'sampler_comparison']: s#132
[#188 'texture_1d']: s#138
[#188 'texture_2d']: s#139
[#188 'texture_2d_array']: s#140
[#188 'texture_3d']: s#141
[#188 'texture_cube']: s#142
[#188 'texture_cube_array']: s#143
[#188 'texture_depth_2d']: s#133
[#188 'texture_depth_2d_array']: s#134
[#188 'texture_depth_cube']: s#135
[#188 'texture_depth_cube_array']: s#136
[#188 'texture_depth_multisampled_2d']: s#137
[#188 'texture_multisampled_2d']: s#144
[#188 'texture_storage_1d']: s#145
[#188 'texture_storage_2d']: s#146
[#188 'texture_storage_2d_array']: s#147
[#188 'texture_storage_3d']: s#148
[#188 'u32']: s#98
[#188 'vec2']: s#103
[#188 'vec3']: s#104
[#188 'vec4']: s#105
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#189 'array']: s#296
[#189 'atomic']: s#101
[#189 'bool']: s#94
[#189 'f16']: s#96
[#189 'f32']: s#95
[#189 'i32']: s#97
[#189 'mat2x2']: s#106
[#189 'mat2x3']: s#107
[#189 'mat2x4']: s#108
[#189 'mat3x2']: s#109
[#189 'mat3x3']: s#110
[#189 'mat3x4']: s#111
[#189 'mat4x2']: s#112
[#189 'mat4x3']: s#113
[#189 'mat4x4']: s#114
[#189 'ptr']: s#99
[#189 'sampler']: s#131
[#189 'sampler_comparison']: s#132
[#189 'texture_1d']: s#138
[#189 'texture_2d']: s#139
[#189 'texture_2d_array']: s#140
[#189 'texture_3d']: s#141
[#189 'texture_cube']: s#142
[#189 'texture_cube_array']: s#143
[#189 'texture_depth_2d']: s#133
[#189 'texture_depth_2d_array']: s#134
[#189 'texture_depth_cube']: s#135
[#189 'texture_depth_cube_array']: s#136
[#189 'texture_depth_multisampled_2d']: s#137
[#189 'texture_multisampled_2d']: s#144
[#189 'texture_storage_1d']: s#145
[#189 'texture_storage_2d']: s#146
[#189 'texture_storage_2d_array']: s#147
[#189 'texture_storage_3d']: s#148
[#189 'u32']: s#98
[#189 'vec2']: s#103
[#189 'vec3']: s#104
[#189 'vec4']: s#105
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#190 'array']: s#296
[#190 'atomic']: s#101
[#190 'bool']: s#94
[#190 'f16']: s#96
[#190 'f32']: s#95
[#190 'i32']: s#97
[#190 'mat2x2']: s#106
[#190 'mat2x3']: s#107
[#190 'mat2x4']: s#108
[#190 'mat3x2']: s#109
[#190 'mat3x3']: s#110
[#190 'mat3x4']: s#111
[#190 'mat4x2']: s#112
[#190 'mat4x3']: s#113
[#190 'mat4x4']: s#114
[#190 'ptr']: s#99
[#190 'sampler']: s#131
[#190 'sampler_comparison']: s#132
[#190 'texture_1d']: s#138
[#190 'texture_2d']: s#139
[#190 'texture_2d_array']: s#140
[#190 'texture_3d']: s#141
[#190 'texture_cube']: s#142
[#190 'texture_cube_array']: s#143
[#190 'texture_depth_2d']: s#133
[#190 'texture_depth_2d_array']: s#134
[#190 'texture_depth_cube']: s#135
[#190 'texture_depth_cube_array']: s#136
[#190 'texture_depth_multisampled_2d']: s#137
[#190 'texture_multisampled_2d']: s#144
[#190 'texture_storage_1d']: s#145
[#190 'texture_storage_2d']: s#146
[#190 'texture_storage_2d_array']: s#147
[#190 'texture_storage_3d']: s#148
[#190 'u32']: s#98
[#190 'vec2']: s#103
[#190 'vec3']: s#104
[#190 'vec4']: s#105
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#191 'function']: s#305
[#191 'private']: s#306
[#191 'storage']: s#309
[#191 'uniform']: s#308
[#191 'workgroup']: s#307
[#192 'array']: s#296
[#192 'atomic']: s#101
[#192 'bool']: s#94
[#192 'f16']: s#96
[#192 'f32']: s#95
[#192 'i32']: s#97
[#192 'mat2x2']: s#106
[#192 'mat2x3']: s#107
[#192 'mat2x4']: s#108
[#192 'mat3x2']: s#109
[#192 'mat3x3']: s#110
[#192 'mat3x4']: s#111
[#192 'mat4x2']: s#112
[#192 'mat4x3']: s#113
[#192 'mat4x4']: s#114
[#192 'ptr']: s#99
[#192 'sampler']: s#131
[#192 'sampler_comparison']: s#132
[#192 'texture_1d']: s#138
[#192 'texture_2d']: s#139
[#192 'texture_2d_array']: s#140
[#192 'texture_3d']: s#141
[#192 'texture_cube']: s#142
[#192 'texture_cube_array']: s#143
[#192 'texture_depth_2d']: s#133
[#192 'texture_depth_2d_array']: s#134
[#192 'texture_depth_cube']: s#135
[#192 'texture_depth_cube_array']: s#136
[#192 'texture_depth_multisampled_2d']: s#137
[#192 'texture_multisampled_2d']: s#144
[#192 'texture_storage_1d']: s#145
[#192 'texture_storage_2d']: s#146
[#192 'texture_storage_2d_array']: s#147
[#192 'texture_storage_3d']: s#148
[#192 'u32']: s#98
[#192 'vec2']: s#103
[#192 'vec3']: s#104
[#192 'vec4']: s#105
[#192 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#193 'array']: s#296
[#193 'atomic']: s#101
[#193 'bool']: s#94
[#193 'f16']: s#96
[#193 'f32']: s#95
[#193 'i32']: s#97
[#193 'mat2x2']: s#106
[#193 'mat2x3']: s#107
[#193 'mat2x4']: s#108
[#193 'mat3x2']: s#109
[#193 'mat3x3']: s#110
[#193 'mat3x4']: s#111
[#193 'mat4x2']: s#112
[#193 'mat4x3']: s#113
[#193 'mat4x4']: s#114
[#193 'ptr']: s#99
[#193 'sampler']: s#131
[#193 'sampler_comparison']: s#132
[#193 'texture_1d']: s#138
[#193 'texture_2d']: s#139
[#193 'texture_2d_array']: s#140
[#193 'texture_3d']: s#141
[#193 'texture_cube']: s#142
[#193 'texture_cube_array']: s#143
[#193 'texture_depth_2d']: s#133
[#193 'texture_depth_2d_array']: s#134
[#193 'texture_depth_cube']: s#135
[#193 'texture_depth_cube_array']: s#136
[#193 'texture_depth_multisampled_2d']: s#137
[#193 'texture_multisampled_2d']: s#144
[#193 'texture_storage_1d']: s#145
[#193 'texture_storage_2d']: s#146
[#193 'texture_storage_2d_array']: s#147
[#193 'texture_storage_3d']: s#148
[#193 'u32']: s#98
[#193 'vec2']: s#103
[#193 'vec3']: s#104
[#193 'vec4']: s#105
[#193 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#194 'array']: s#296
[#194 'atomic']: s#101
[#194 'bool']: s#94
[#194 'f16']: s#96
[#194 'f32']: s#95
[#194 'i32']: s#97
[#194 'mat2x2']: s#106
[#194 'mat2x3']: s#107
[#194 'mat2x4']: s#108
[#194 'mat3x2']: s#109
[#194 'mat3x3']: s#110
[#194 'mat3x4']: s#111
[#194 'mat4x2']: s#112
[#194 'mat4x3']: s#113
[#194 'mat4x4']: s#114
[#194 'ptr']: s#99
[#194 'sampler']: s#131
[#194 'sampler_comparison']: s#132
[#194 'texture_1d']: s#138
[#194 'texture_2d']: s#139
[#194 'texture_2d_array']: s#140
[#194 'texture_3d']: s#141
[#194 'texture_cube']: s#142
[#194 'texture_cube_array']: s#143
[#194 'texture_depth_2d']: s#133
[#194 'texture_depth_2d_array']: s#134
[#194 'texture_depth_cube']: s#135
[#194 'texture_depth_cube_array']: s#136
[#194 'texture_depth_multisampled_2d']: s#137
[#194 'texture_multisampled_2d']: s#144
[#194 'texture_storage_1d']: s#145
[#194 'texture_storage_2d']: s#146
[#194 'texture_storage_2d_array']: s#147
[#194 'texture_storage_3d']: s#148
[#194 'u32']: s#98
[#194 'vec2']: s#103
[#194 'vec3']: s#104
[#194 'vec4']: s#105
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#195 ')']: s#300
[#197 '!']: s#68
[#197 '&']: s#71
[#197 '(']: s#83
[#197 '*']: s#70
[#197 '-']: s#67
[#197 'array']: s#87
[#197 'atomic']: s#101
[#197 'bitcast']: s#77
[#197 'bool']: s#94
[#197 'f16']: s#96
[#197 'f32']: s#95
[#197 'false']: s#93
[#197 'i32']: s#97
[#197 'mat2x2']: s#106
[#197 'mat2x3']: s#107
[#197 'mat2x4']: s#108
[#197 'mat3x2']: s#109
[#197 'mat3x3']: s#110
[#197 'mat3x4']: s#111
[#197 'mat4x2']: s#112
[#197 'mat4x3']: s#113
[#197 'mat4x4']: s#114
[#197 'ptr']: s#99
[#197 'sampler']: s#131
[#197 'sampler_comparison']: s#132
[#197 'texture_1d']: s#138
[#197 'texture_2d']: s#139
[#197 'texture_2d_array']: s#140
[#197 'texture_3d']: s#141
[#197 'texture_cube']: s#142
[#197 'texture_cube_array']: s#143
[#197 'texture_depth_2d']: s#133
[#197 'texture_depth_2d_array']: s#134
[#197 'texture_depth_cube']: s#135
[#197 'texture_depth_cube_array']: s#136
[#197 'texture_depth_multisampled_2d']: s#137
[#197 'texture_multisampled_2d']: s#144
[#197 'texture_storage_1d']: s#145
[#197 'texture_storage_2d']: s#146
[#197 'texture_storage_2d_array']: s#147
[#197 'texture_storage_3d']: s#148
[#197 'true']: s#92
[#197 'u32']: s#98
[#197 'vec2']: s#103
[#197 'vec3']: s#104
[#197 'vec4']: s#105
[#197 '~']: s#69
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#197 /0[fh]/]: s#118
[#197 /0[iu]?/]: s#115
[#197 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#197 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#197 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#197 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#197 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#197 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#197 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#197 /[1-9][0-9]*[fh]/]: s#119
[#197 /[1-9][0-9]*[iu]?/]: s#116
[#198 'array']: s#296
[#198 'atomic']: s#101
[#198 'bool']: s#94
[#198 'f16']: s#96
[#198 'f32']: s#95
[#198 'i32']: s#97
[#198 'mat2x2']: s#106
[#198 'mat2x3']: s#107
[#198 'mat2x4']: s#108
[#198 'mat3x2']: s#109
[#198 'mat3x3']: s#110
[#198 'mat3x4']: s#111
[#198 'mat4x2']: s#112
[#198 'mat4x3']: s#113
[#198 'mat4x4']: s#114
[#198 'ptr']: s#99
[#198 'sampler']: s#131
[#198 'sampler_comparison']: s#132
[#198 'texture_1d']: s#138
[#198 'texture_2d']: s#139
[#198 'texture_2d_array']: s#140
[#198 'texture_3d']: s#141
[#198 'texture_cube']: s#142
[#198 'texture_cube_array']: s#143
[#198 'texture_depth_2d']: s#133
[#198 'texture_depth_2d_array']: s#134
[#198 'texture_depth_cube']: s#135
[#198 'texture_depth_cube_array']: s#136
[#198 'texture_depth_multisampled_2d']: s#137
[#198 'texture_multisampled_2d']: s#144
[#198 'texture_storage_1d']: s#145
[#198 'texture_storage_2d']: s#146
[#198 'texture_storage_2d_array']: s#147
[#198 'texture_storage_3d']: s#148
[#198 'u32']: s#98
[#198 'vec2']: s#103
[#198 'vec3']: s#104
[#198 'vec4']: s#105
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#201 '!']: s#68
[#201 '&']: s#71
[#201 '(']: s#83
[#201 '*']: s#70
[#201 '-']: s#67
[#201 'array']: s#87
[#201 'atomic']: s#101
[#201 'bitcast']: s#77
[#201 'bool']: s#94
[#201 'f16']: s#96
[#201 'f32']: s#95
[#201 'false']: s#93
[#201 'i32']: s#97
[#201 'mat2x2']: s#106
[#201 'mat2x3']: s#107
[#201 'mat2x4']: s#108
[#201 'mat3x2']: s#109
[#201 'mat3x3']: s#110
[#201 'mat3x4']: s#111
[#201 'mat4x2']: s#112
[#201 'mat4x3']: s#113
[#201 'mat4x4']: s#114
[#201 'ptr']: s#99
[#201 'sampler']: s#131
[#201 'sampler_comparison']: s#132
[#201 'texture_1d']: s#138
[#201 'texture_2d']: s#139
[#201 'texture_2d_array']: s#140
[#201 'texture_3d']: s#141
[#201 'texture_cube']: s#142
[#201 'texture_cube_array']: s#143
[#201 'texture_depth_2d']: s#133
[#201 'texture_depth_2d_array']: s#134
[#201 'texture_depth_cube']: s#135
[#201 'texture_depth_cube_array']: s#136
[#201 'texture_depth_multisampled_2d']: s#137
[#201 'texture_multisampled_2d']: s#144
[#201 'texture_storage_1d']: s#145
[#201 'texture_storage_2d']: s#146
[#201 'texture_storage_2d_array']: s#147
[#201 'texture_storage_3d']: s#148
[#201 'true']: s#92
[#201 'u32']: s#98
[#201 'vec2']: s#103
[#201 'vec3']: s#104
[#201 'vec4']: s#105
[#201 '~']: s#69
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#201 /0[fh]/]: s#118
[#201 /0[iu]?/]: s#115
[#201 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#201 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#201 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#201 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#201 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#201 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#201 /[1-9][0-9]*[fh]/]: s#119
[#201 /[1-9][0-9]*[iu]?/]: s#116
[#202 '/[rgba]/']: s#282
[#202 '/[rgba][rgba]/']: s#283
[#202 '/[rgba][rgba][rgba]/']: s#284
[#202 '/[rgba][rgba][rgba][rgba]/']: s#285
[#202 '/[xyzw]/']: s#286
[#202 '/[xyzw][xyzw]/']: s#287
[#202 '/[xyzw][xyzw][xyzw]/']: s#288
[#202 '/[xyzw][xyzw][xyzw][xyzw]/']: s#289
[#202 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#281
[#208 '!']: s#68
[#208 '&']: s#71
[#208 '(']: s#83
[#208 '*']: s#70
[#208 '-']: s#67
[#208 'array']: s#87
[#208 'atomic']: s#101
[#208 'bitcast']: s#77
[#208 'bool']: s#94
[#208 'f16']: s#96
[#208 'f32']: s#95
[#208 'false']: s#93
[#208 'i32']: s#97
[#208 'mat2x2']: s#106
[#208 'mat2x3']: s#107
[#208 'mat2x4']: s#108
[#208 'mat3x2']: s#109
[#208 'mat3x3']: s#110
[#208 'mat3x4']: s#111
[#208 'mat4x2']: s#112
[#208 'mat4x3']: s#113
[#208 'mat4x4']: s#114
[#208 'ptr']: s#99
[#208 'sampler']: s#131
[#208 'sampler_comparison']: s#132
[#208 'texture_1d']: s#138
[#208 'texture_2d']: s#139
[#208 'texture_2d_array']: s#140
[#208 'texture_3d']: s#141
[#208 'texture_cube']: s#142
[#208 'texture_cube_array']: s#143
[#208 'texture_depth_2d']: s#133
[#208 'texture_depth_2d_array']: s#134
[#208 'texture_depth_cube']: s#135
[#208 'texture_depth_cube_array']: s#136
[#208 'texture_depth_multisampled_2d']: s#137
[#208 'texture_multisampled_2d']: s#144
[#208 'texture_storage_1d']: s#145
[#208 'texture_storage_2d']: s#146
[#208 'texture_storage_2d_array']: s#147
[#208 'texture_storage_3d']: s#148
[#208 'true']: s#92
[#208 'u32']: s#98
[#208 'vec2']: s#103
[#208 'vec3']: s#104
[#208 'vec4']: s#105
[#208 '~']: s#69
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#208 /0[fh]/]: s#118
[#208 /0[iu]?/]: s#115
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#208 /[1-9][0-9]*[fh]/]: s#119
[#208 /[1-9][0-9]*[iu]?/]: s#116
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: r#24
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: r#25
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: r#26
[#212 '!']: s#68
[#212 '&']: s#71
[#212 '(']: s#83
[#212 '*']: s#70
[#212 '-']: s#67
[#212 'array']: s#87
[#212 'atomic']: s#101
[#212 'bitcast']: s#77
[#212 'bool']: s#94
[#212 'f16']: s#96
[#212 'f32']: s#95
[#212 'false']: s#93
[#212 'i32']: s#97
[#212 'mat2x2']: s#106
[#212 'mat2x3']: s#107
[#212 'mat2x4']: s#108
[#212 'mat3x2']: s#109
[#212 'mat3x3']: s#110
[#212 'mat3x4']: s#111
[#212 'mat4x2']: s#112
[#212 'mat4x3']: s#113
[#212 'mat4x4']: s#114
[#212 'ptr']: s#99
[#212 'sampler']: s#131
[#212 'sampler_comparison']: s#132
[#212 'texture_1d']: s#138
[#212 'texture_2d']: s#139
[#212 'texture_2d_array']: s#140
[#212 'texture_3d']: s#141
[#212 'texture_cube']: s#142
[#212 'texture_cube_array']: s#143
[#212 'texture_depth_2d']: s#133
[#212 'texture_depth_2d_array']: s#134
[#212 'texture_depth_cube']: s#135
[#212 'texture_depth_cube_array']: s#136
[#212 'texture_depth_multisampled_2d']: s#137
[#212 'texture_multisampled_2d']: s#144
[#212 'texture_storage_1d']: s#145
[#212 'texture_storage_2d']: s#146
[#212 'texture_storage_2d_array']: s#147
[#212 'texture_storage_3d']: s#148
[#212 'true']: s#92
[#212 'u32']: s#98
[#212 'vec2']: s#103
[#212 'vec3']: s#104
[#212 'vec4']: s#105
[#212 '~']: s#69
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#212 /0[fh]/]: s#118
[#212 /0[iu]?/]: s#115
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#212 /[1-9][0-9]*[fh]/]: s#119
[#212 /[1-9][0-9]*[iu]?/]: s#116
[#213 '!']: s#68
[#213 '&']: s#71
[#213 '(']: s#83
[#213 '*']: s#70
[#213 '-']: s#67
[#213 'array']: s#87
[#213 'atomic']: s#101
[#213 'bitcast']: s#77
[#213 'bool']: s#94
[#213 'f16']: s#96
[#213 'f32']: s#95
[#213 'false']: s#93
[#213 'i32']: s#97
[#213 'mat2x2']: s#106
[#213 'mat2x3']: s#107
[#213 'mat2x4']: s#108
[#213 'mat3x2']: s#109
[#213 'mat3x3']: s#110
[#213 'mat3x4']: s#111
[#213 'mat4x2']: s#112
[#213 'mat4x3']: s#113
[#213 'mat4x4']: s#114
[#213 'ptr']: s#99
[#213 'sampler']: s#131
[#213 'sampler_comparison']: s#132
[#213 'texture_1d']: s#138
[#213 'texture_2d']: s#139
[#213 'texture_2d_array']: s#140
[#213 'texture_3d']: s#141
[#213 'texture_cube']: s#142
[#213 'texture_cube_array']: s#143
[#213 'texture_depth_2d']: s#133
[#213 'texture_depth_2d_array']: s#134
[#213 'texture_depth_cube']: s#135
[#213 'texture_depth_cube_array']: s#136
[#213 'texture_depth_multisampled_2d']: s#137
[#213 'texture_multisampled_2d']: s#144
[#213 'texture_storage_1d']: s#145
[#213 'texture_storage_2d']: s#146
[#213 'texture_storage_2d_array']: s#147
[#213 'texture_storage_3d']: s#148
[#213 'true']: s#92
[#213 'u32']: s#98
[#213 'vec2']: s#103
[#213 'vec3']: s#104
[#213 'vec4']: s#105
[#213 '~']: s#69
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#213 /0[fh]/]: s#118
[#213 /0[iu]?/]: s#115
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#213 /[1-9][0-9]*[fh]/]: s#119
[#213 /[1-9][0-9]*[iu]?/]: s#116
[#214 '!']: s#68
[#214 '&']: s#71
[#214 '(']: s#83
[#214 '*']: s#70
[#214 '-']: s#67
[#214 'array']: s#87
[#214 'atomic']: s#101
[#214 'bitcast']: s#77
[#214 'bool']: s#94
[#214 'f16']: s#96
[#214 'f32']: s#95
[#214 'false']: s#93
[#214 'i32']: s#97
[#214 'mat2x2']: s#106
[#214 'mat2x3']: s#107
[#214 'mat2x4']: s#108
[#214 'mat3x2']: s#109
[#214 'mat3x3']: s#110
[#214 'mat3x4']: s#111
[#214 'mat4x2']: s#112
[#214 'mat4x3']: s#113
[#214 'mat4x4']: s#114
[#214 'ptr']: s#99
[#214 'sampler']: s#131
[#214 'sampler_comparison']: s#132
[#214 'texture_1d']: s#138
[#214 'texture_2d']: s#139
[#214 'texture_2d_array']: s#140
[#214 'texture_3d']: s#141
[#214 'texture_cube']: s#142
[#214 'texture_cube_array']: s#143
[#214 'texture_depth_2d']: s#133
[#214 'texture_depth_2d_array']: s#134
[#214 'texture_depth_cube']: s#135
[#214 'texture_depth_cube_array']: s#136
[#214 'texture_depth_multisampled_2d']: s#137
[#214 'texture_multisampled_2d']: s#144
[#214 'texture_storage_1d']: s#145
[#214 'texture_storage_2d']: s#146
[#214 'texture_storage_2d_array']: s#147
[#214 'texture_storage_3d']: s#148
[#214 'true']: s#92
[#214 'u32']: s#98
[#214 'vec2']: s#103
[#214 'vec3']: s#104
[#214 'vec4']: s#105
[#214 '~']: s#69
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#214 /0[fh]/]: s#118
[#214 /0[iu]?/]: s#115
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#214 /[1-9][0-9]*[fh]/]: s#119
[#214 /[1-9][0-9]*[iu]?/]: s#116
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: r#27
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: r#28
[#217 '!']: s#68
[#217 '&']: s#71
[#217 '(']: s#83
[#217 '*']: s#70
[#217 '-']: s#67
[#217 'array']: s#87
[#217 'atomic']: s#101
[#217 'bitcast']: s#77
[#217 'bool']: s#94
[#217 'f16']: s#96
[#217 'f32']: s#95
[#217 'false']: s#93
[#217 'i32']: s#97
[#217 'mat2x2']: s#106
[#217 'mat2x3']: s#107
[#217 'mat2x4']: s#108
[#217 'mat3x2']: s#109
[#217 'mat3x3']: s#110
[#217 'mat3x4']: s#111
[#217 'mat4x2']: s#112
[#217 'mat4x3']: s#113
[#217 'mat4x4']: s#114
[#217 'ptr']: s#99
[#217 'sampler']: s#131
[#217 'sampler_comparison']: s#132
[#217 'texture_1d']: s#138
[#217 'texture_2d']: s#139
[#217 'texture_2d_array']: s#140
[#217 'texture_3d']: s#141
[#217 'texture_cube']: s#142
[#217 'texture_cube_array']: s#143
[#217 'texture_depth_2d']: s#133
[#217 'texture_depth_2d_array']: s#134
[#217 'texture_depth_cube']: s#135
[#217 'texture_depth_cube_array']: s#136
[#217 'texture_depth_multisampled_2d']: s#137
[#217 'texture_multisampled_2d']: s#144
[#217 'texture_storage_1d']: s#145
[#217 'texture_storage_2d']: s#146
[#217 'texture_storage_2d_array']: s#147
[#217 'texture_storage_3d']: s#148
[#217 'true']: s#92
[#217 'u32']: s#98
[#217 'vec2']: s#103
[#217 'vec3']: s#104
[#217 'vec4']: s#105
[#217 '~']: s#69
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#217 /0[fh]/]: s#118
[#217 /0[iu]?/]: s#115
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#217 /[1-9][0-9]*[fh]/]: s#119
[#217 /[1-9][0-9]*[iu]?/]: s#116
[#218 '!']: s#68
[#218 '&']: s#71
[#218 '(']: s#83
[#218 '*']: s#70
[#218 '-']: s#67
[#218 'array']: s#87
[#218 'atomic']: s#101
[#218 'bitcast']: s#77
[#218 'bool']: s#94
[#218 'f16']: s#96
[#218 'f32']: s#95
[#218 'false']: s#93
[#218 'i32']: s#97
[#218 'mat2x2']: s#106
[#218 'mat2x3']: s#107
[#218 'mat2x4']: s#108
[#218 'mat3x2']: s#109
[#218 'mat3x3']: s#110
[#218 'mat3x4']: s#111
[#218 'mat4x2']: s#112
[#218 'mat4x3']: s#113
[#218 'mat4x4']: s#114
[#218 'ptr']: s#99
[#218 'sampler']: s#131
[#218 'sampler_comparison']: s#132
[#218 'texture_1d']: s#138
[#218 'texture_2d']: s#139
[#218 'texture_2d_array']: s#140
[#218 'texture_3d']: s#141
[#218 'texture_cube']: s#142
[#218 'texture_cube_array']: s#143
[#218 'texture_depth_2d']: s#133
[#218 'texture_depth_2d_array']: s#134
[#218 'texture_depth_cube']: s#135
[#218 'texture_depth_cube_array']: s#136
[#218 'texture_depth_multisampled_2d']: s#137
[#218 'texture_multisampled_2d']: s#144
[#218 'texture_storage_1d']: s#145
[#218 'texture_storage_2d']: s#146
[#218 'texture_storage_2d_array']: s#147
[#218 'texture_storage_3d']: s#148
[#218 'true']: s#92
[#218 'u32']: s#98
[#218 'vec2']: s#103
[#218 'vec3']: s#104
[#218 'vec4']: s#105
[#218 '~']: s#69
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#218 /0[fh]/]: s#118
[#218 /0[iu]?/]: s#115
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#218 /[1-9][0-9]*[fh]/]: s#119
[#218 /[1-9][0-9]*[iu]?/]: s#116
[#219 '!']: s#68
[#219 '&']: s#71
[#219 '(']: s#83
[#219 '*']: s#70
[#219 '-']: s#67
[#219 'array']: s#87
[#219 'atomic']: s#101
[#219 'bitcast']: s#77
[#219 'bool']: s#94
[#219 'f16']: s#96
[#219 'f32']: s#95
[#219 'false']: s#93
[#219 'i32']: s#97
[#219 'mat2x2']: s#106
[#219 'mat2x3']: s#107
[#219 'mat2x4']: s#108
[#219 'mat3x2']: s#109
[#219 'mat3x3']: s#110
[#219 'mat3x4']: s#111
[#219 'mat4x2']: s#112
[#219 'mat4x3']: s#113
[#219 'mat4x4']: s#114
[#219 'ptr']: s#99
[#219 'sampler']: s#131
[#219 'sampler_comparison']: s#132
[#219 'texture_1d']: s#138
[#219 'texture_2d']: s#139
[#219 'texture_2d_array']: s#140
[#219 'texture_3d']: s#141
[#219 'texture_cube']: s#142
[#219 'texture_cube_array']: s#143
[#219 'texture_depth_2d']: s#133
[#219 'texture_depth_2d_array']: s#134
[#219 'texture_depth_cube']: s#135
[#219 'texture_depth_cube_array']: s#136
[#219 'texture_depth_multisampled_2d']: s#137
[#219 'texture_multisampled_2d']: s#144
[#219 'texture_storage_1d']: s#145
[#219 'texture_storage_2d']: s#146
[#219 'texture_storage_2d_array']: s#147
[#219 'texture_storage_3d']: s#148
[#219 'true']: s#92
[#219 'u32']: s#98
[#219 'vec2']: s#103
[#219 'vec3']: s#104
[#219 'vec4']: s#105
[#219 '~']: s#69
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#219 /0[fh]/]: s#118
[#219 /0[iu]?/]: s#115
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#219 /[1-9][0-9]*[fh]/]: s#119
[#219 /[1-9][0-9]*[iu]?/]: s#116
[#220 '!']: s#68
[#220 '&']: s#71
[#220 '(']: s#83
[#220 '*']: s#70
[#220 '-']: s#67
[#220 'array']: s#87
[#220 'atomic']: s#101
[#220 'bitcast']: s#77
[#220 'bool']: s#94
[#220 'f16']: s#96
[#220 'f32']: s#95
[#220 'false']: s#93
[#220 'i32']: s#97
[#220 'mat2x2']: s#106
[#220 'mat2x3']: s#107
[#220 'mat2x4']: s#108
[#220 'mat3x2']: s#109
[#220 'mat3x3']: s#110
[#220 'mat3x4']: s#111
[#220 'mat4x2']: s#112
[#220 'mat4x3']: s#113
[#220 'mat4x4']: s#114
[#220 'ptr']: s#99
[#220 'sampler']: s#131
[#220 'sampler_comparison']: s#132
[#220 'texture_1d']: s#138
[#220 'texture_2d']: s#139
[#220 'texture_2d_array']: s#140
[#220 'texture_3d']: s#141
[#220 'texture_cube']: s#142
[#220 'texture_cube_array']: s#143
[#220 'texture_depth_2d']: s#133
[#220 'texture_depth_2d_array']: s#134
[#220 'texture_depth_cube']: s#135
[#220 'texture_depth_cube_array']: s#136
[#220 'texture_depth_multisampled_2d']: s#137
[#220 'texture_multisampled_2d']: s#144
[#220 'texture_storage_1d']: s#145
[#220 'texture_storage_2d']: s#146
[#220 'texture_storage_2d_array']: s#147
[#220 'texture_storage_3d']: s#148
[#220 'true']: s#92
[#220 'u32']: s#98
[#220 'vec2']: s#103
[#220 'vec3']: s#104
[#220 'vec4']: s#105
[#220 '~']: s#69
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#220 /0[fh]/]: s#118
[#220 /0[iu]?/]: s#115
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#220 /[1-9][0-9]*[fh]/]: s#119
[#220 /[1-9][0-9]*[iu]?/]: s#116
[#221 '!']: s#68
[#221 '&']: s#71
[#221 '(']: s#83
[#221 '*']: s#70
[#221 '-']: s#67
[#221 'array']: s#87
[#221 'atomic']: s#101
[#221 'bitcast']: s#77
[#221 'bool']: s#94
[#221 'f16']: s#96
[#221 'f32']: s#95
[#221 'false']: s#93
[#221 'i32']: s#97
[#221 'mat2x2']: s#106
[#221 'mat2x3']: s#107
[#221 'mat2x4']: s#108
[#221 'mat3x2']: s#109
[#221 'mat3x3']: s#110
[#221 'mat3x4']: s#111
[#221 'mat4x2']: s#112
[#221 'mat4x3']: s#113
[#221 'mat4x4']: s#114
[#221 'ptr']: s#99
[#221 'sampler']: s#131
[#221 'sampler_comparison']: s#132
[#221 'texture_1d']: s#138
[#221 'texture_2d']: s#139
[#221 'texture_2d_array']: s#140
[#221 'texture_3d']: s#141
[#221 'texture_cube']: s#142
[#221 'texture_cube_array']: s#143
[#221 'texture_depth_2d']: s#133
[#221 'texture_depth_2d_array']: s#134
[#221 'texture_depth_cube']: s#135
[#221 'texture_depth_cube_array']: s#136
[#221 'texture_depth_multisampled_2d']: s#137
[#221 'texture_multisampled_2d']: s#144
[#221 'texture_storage_1d']: s#145
[#221 'texture_storage_2d']: s#146
[#221 'texture_storage_2d_array']: s#147
[#221 'texture_storage_3d']: s#148
[#221 'true']: s#92
[#221 'u32']: s#98
[#221 'vec2']: s#103
[#221 'vec3']: s#104
[#221 'vec4']: s#105
[#221 '~']: s#69
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#221 /0[fh]/]: s#118
[#221 /0[iu]?/]: s#115
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#221 /[1-9][0-9]*[fh]/]: s#119
[#221 /[1-9][0-9]*[iu]?/]: s#116
[#222 '!']: s#68
[#222 '&']: s#71
[#222 '(']: s#83
[#222 '*']: s#70
[#222 '-']: s#67
[#222 'array']: s#87
[#222 'atomic']: s#101
[#222 'bitcast']: s#77
[#222 'bool']: s#94
[#222 'f16']: s#96
[#222 'f32']: s#95
[#222 'false']: s#93
[#222 'i32']: s#97
[#222 'mat2x2']: s#106
[#222 'mat2x3']: s#107
[#222 'mat2x4']: s#108
[#222 'mat3x2']: s#109
[#222 'mat3x3']: s#110
[#222 'mat3x4']: s#111
[#222 'mat4x2']: s#112
[#222 'mat4x3']: s#113
[#222 'mat4x4']: s#114
[#222 'ptr']: s#99
[#222 'sampler']: s#131
[#222 'sampler_comparison']: s#132
[#222 'texture_1d']: s#138
[#222 'texture_2d']: s#139
[#222 'texture_2d_array']: s#140
[#222 'texture_3d']: s#141
[#222 'texture_cube']: s#142
[#222 'texture_cube_array']: s#143
[#222 'texture_depth_2d']: s#133
[#222 'texture_depth_2d_array']: s#134
[#222 'texture_depth_cube']: s#135
[#222 'texture_depth_cube_array']: s#136
[#222 'texture_depth_multisampled_2d']: s#137
[#222 'texture_multisampled_2d']: s#144
[#222 'texture_storage_1d']: s#145
[#222 'texture_storage_2d']: s#146
[#222 'texture_storage_2d_array']: s#147
[#222 'texture_storage_3d']: s#148
[#222 'true']: s#92
[#222 'u32']: s#98
[#222 'vec2']: s#103
[#222 'vec3']: s#104
[#222 'vec4']: s#105
[#222 '~']: s#69
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#222 /0[fh]/]: s#118
[#222 /0[iu]?/]: s#115
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#222 /[1-9][0-9]*[fh]/]: s#119
[#222 /[1-9][0-9]*[iu]?/]: s#116
[#223 '!']: s#68
[#223 '&']: s#71
[#223 '(']: s#83
[#223 '*']: s#70
[#223 '-']: s#67
[#223 'array']: s#87
[#223 'atomic']: s#101
[#223 'bitcast']: s#77
[#223 'bool']: s#94
[#223 'f16']: s#96
[#223 'f32']: s#95
[#223 'false']: s#93
[#223 'i32']: s#97
[#223 'mat2x2']: s#106
[#223 'mat2x3']: s#107
[#223 'mat2x4']: s#108
[#223 'mat3x2']: s#109
[#223 'mat3x3']: s#110
[#223 'mat3x4']: s#111
[#223 'mat4x2']: s#112
[#223 'mat4x3']: s#113
[#223 'mat4x4']: s#114
[#223 'ptr']: s#99
[#223 'sampler']: s#131
[#223 'sampler_comparison']: s#132
[#223 'texture_1d']: s#138
[#223 'texture_2d']: s#139
[#223 'texture_2d_array']: s#140
[#223 'texture_3d']: s#141
[#223 'texture_cube']: s#142
[#223 'texture_cube_array']: s#143
[#223 'texture_depth_2d']: s#133
[#223 'texture_depth_2d_array']: s#134
[#223 'texture_depth_cube']: s#135
[#223 'texture_depth_cube_array']: s#136
[#223 'texture_depth_multisampled_2d']: s#137
[#223 'texture_multisampled_2d']: s#144
[#223 'texture_storage_1d']: s#145
[#223 'texture_storage_2d']: s#146
[#223 'texture_storage_2d_array']: s#147
[#223 'texture_storage_3d']: s#148
[#223 'true']: s#92
[#223 'u32']: s#98
[#223 'vec2']: s#103
[#223 'vec3']: s#104
[#223 'vec4']: s#105
[#223 '~']: s#69
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#223 /0[fh]/]: s#118
[#223 /0[iu]?/]: s#115
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#223 /[1-9][0-9]*[fh]/]: s#119
[#223 /[1-9][0-9]*[iu]?/]: s#116
[#224 '!']: s#68
[#224 '&']: s#71
[#224 '(']: s#83
[#224 '*']: s#70
[#224 '-']: s#67
[#224 'array']: s#87
[#224 'atomic']: s#101
[#224 'bitcast']: s#77
[#224 'bool']: s#94
[#224 'f16']: s#96
[#224 'f32']: s#95
[#224 'false']: s#93
[#224 'i32']: s#97
[#224 'mat2x2']: s#106
[#224 'mat2x3']: s#107
[#224 'mat2x4']: s#108
[#224 'mat3x2']: s#109
[#224 'mat3x3']: s#110
[#224 'mat3x4']: s#111
[#224 'mat4x2']: s#112
[#224 'mat4x3']: s#113
[#224 'mat4x4']: s#114
[#224 'ptr']: s#99
[#224 'sampler']: s#131
[#224 'sampler_comparison']: s#132
[#224 'texture_1d']: s#138
[#224 'texture_2d']: s#139
[#224 'texture_2d_array']: s#140
[#224 'texture_3d']: s#141
[#224 'texture_cube']: s#142
[#224 'texture_cube_array']: s#143
[#224 'texture_depth_2d']: s#133
[#224 'texture_depth_2d_array']: s#134
[#224 'texture_depth_cube']: s#135
[#224 'texture_depth_cube_array']: s#136
[#224 'texture_depth_multisampled_2d']: s#137
[#224 'texture_multisampled_2d']: s#144
[#224 'texture_storage_1d']: s#145
[#224 'texture_storage_2d']: s#146
[#224 'texture_storage_2d_array']: s#147
[#224 'texture_storage_3d']: s#148
[#224 'true']: s#92
[#224 'u32']: s#98
[#224 'vec2']: s#103
[#224 'vec3']: s#104
[#224 'vec4']: s#105
[#224 '~']: s#69
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#224 /0[fh]/]: s#118
[#224 /0[iu]?/]: s#115
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#224 /[1-9][0-9]*[fh]/]: s#119
[#224 /[1-9][0-9]*[iu]?/]: s#116
[#225 '!']: s#68
[#225 '&']: s#71
[#225 '(']: s#83
[#225 '*']: s#70
[#225 '-']: s#67
[#225 'array']: s#87
[#225 'atomic']: s#101
[#225 'bitcast']: s#77
[#225 'bool']: s#94
[#225 'f16']: s#96
[#225 'f32']: s#95
[#225 'false']: s#93
[#225 'i32']: s#97
[#225 'mat2x2']: s#106
[#225 'mat2x3']: s#107
[#225 'mat2x4']: s#108
[#225 'mat3x2']: s#109
[#225 'mat3x3']: s#110
[#225 'mat3x4']: s#111
[#225 'mat4x2']: s#112
[#225 'mat4x3']: s#113
[#225 'mat4x4']: s#114
[#225 'ptr']: s#99
[#225 'sampler']: s#131
[#225 'sampler_comparison']: s#132
[#225 'texture_1d']: s#138
[#225 'texture_2d']: s#139
[#225 'texture_2d_array']: s#140
[#225 'texture_3d']: s#141
[#225 'texture_cube']: s#142
[#225 'texture_cube_array']: s#143
[#225 'texture_depth_2d']: s#133
[#225 'texture_depth_2d_array']: s#134
[#225 'texture_depth_cube']: s#135
[#225 'texture_depth_cube_array']: s#136
[#225 'texture_depth_multisampled_2d']: s#137
[#225 'texture_multisampled_2d']: s#144
[#225 'texture_storage_1d']: s#145
[#225 'texture_storage_2d']: s#146
[#225 'texture_storage_2d_array']: s#147
[#225 'texture_storage_3d']: s#148
[#225 'true']: s#92
[#225 'u32']: s#98
[#225 'vec2']: s#103
[#225 'vec3']: s#104
[#225 'vec4']: s#105
[#225 '~']: s#69
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#225 /0[fh]/]: s#118
[#225 /0[iu]?/]: s#115
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#225 /[1-9][0-9]*[fh]/]: s#119
[#225 /[1-9][0-9]*[iu]?/]: s#116
[#226 '!']: s#68
[#226 '&']: s#71
[#226 '(']: s#83
[#226 '*']: s#70
[#226 '-']: s#67
[#226 'array']: s#87
[#226 'atomic']: s#101
[#226 'bitcast']: s#77
[#226 'bool']: s#94
[#226 'f16']: s#96
[#226 'f32']: s#95
[#226 'false']: s#93
[#226 'i32']: s#97
[#226 'mat2x2']: s#106
[#226 'mat2x3']: s#107
[#226 'mat2x4']: s#108
[#226 'mat3x2']: s#109
[#226 'mat3x3']: s#110
[#226 'mat3x4']: s#111
[#226 'mat4x2']: s#112
[#226 'mat4x3']: s#113
[#226 'mat4x4']: s#114
[#226 'ptr']: s#99
[#226 'sampler']: s#131
[#226 'sampler_comparison']: s#132
[#226 'texture_1d']: s#138
[#226 'texture_2d']: s#139
[#226 'texture_2d_array']: s#140
[#226 'texture_3d']: s#141
[#226 'texture_cube']: s#142
[#226 'texture_cube_array']: s#143
[#226 'texture_depth_2d']: s#133
[#226 'texture_depth_2d_array']: s#134
[#226 'texture_depth_cube']: s#135
[#226 'texture_depth_cube_array']: s#136
[#226 'texture_depth_multisampled_2d']: s#137
[#226 'texture_multisampled_2d']: s#144
[#226 'texture_storage_1d']: s#145
[#226 'texture_storage_2d']: s#146
[#226 'texture_storage_2d_array']: s#147
[#226 'texture_storage_3d']: s#148
[#226 'true']: s#92
[#226 'u32']: s#98
[#226 'vec2']: s#103
[#226 'vec3']: s#104
[#226 'vec4']: s#105
[#226 '~']: s#69
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#226 /0[fh]/]: s#118
[#226 /0[iu]?/]: s#115
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#226 /[1-9][0-9]*[fh]/]: s#119
[#226 /[1-9][0-9]*[iu]?/]: s#116
[#227 '!']: s#68
[#227 '&']: s#71
[#227 '(']: s#83
[#227 '*']: s#70
[#227 '-']: s#67
[#227 'array']: s#87
[#227 'atomic']: s#101
[#227 'bitcast']: s#77
[#227 'bool']: s#94
[#227 'f16']: s#96
[#227 'f32']: s#95
[#227 'false']: s#93
[#227 'i32']: s#97
[#227 'mat2x2']: s#106
[#227 'mat2x3']: s#107
[#227 'mat2x4']: s#108
[#227 'mat3x2']: s#109
[#227 'mat3x3']: s#110
[#227 'mat3x4']: s#111
[#227 'mat4x2']: s#112
[#227 'mat4x3']: s#113
[#227 'mat4x4']: s#114
[#227 'ptr']: s#99
[#227 'sampler']: s#131
[#227 'sampler_comparison']: s#132
[#227 'texture_1d']: s#138
[#227 'texture_2d']: s#139
[#227 'texture_2d_array']: s#140
[#227 'texture_3d']: s#141
[#227 'texture_cube']: s#142
[#227 'texture_cube_array']: s#143
[#227 'texture_depth_2d']: s#133
[#227 'texture_depth_2d_array']: s#134
[#227 'texture_depth_cube']: s#135
[#227 'texture_depth_cube_array']: s#136
[#227 'texture_depth_multisampled_2d']: s#137
[#227 'texture_multisampled_2d']: s#144
[#227 'texture_storage_1d']: s#145
[#227 'texture_storage_2d']: s#146
[#227 'texture_storage_2d_array']: s#147
[#227 'texture_storage_3d']: s#148
[#227 'true']: s#92
[#227 'u32']: s#98
[#227 'vec2']: s#103
[#227 'vec3']: s#104
[#227 'vec4']: s#105
[#227 '~']: s#69
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#227 /0[fh]/]: s#118
[#227 /0[iu]?/]: s#115
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#227 /[1-9][0-9]*[fh]/]: s#119
[#227 /[1-9][0-9]*[iu]?/]: s#116
[#228 '!']: s#68
[#228 '&']: s#71
[#228 '(']: s#83
[#228 '*']: s#70
[#228 '-']: s#67
[#228 'array']: s#87
[#228 'atomic']: s#101
[#228 'bitcast']: s#77
[#228 'bool']: s#94
[#228 'f16']: s#96
[#228 'f32']: s#95
[#228 'false']: s#93
[#228 'i32']: s#97
[#228 'mat2x2']: s#106
[#228 'mat2x3']: s#107
[#228 'mat2x4']: s#108
[#228 'mat3x2']: s#109
[#228 'mat3x3']: s#110
[#228 'mat3x4']: s#111
[#228 'mat4x2']: s#112
[#228 'mat4x3']: s#113
[#228 'mat4x4']: s#114
[#228 'ptr']: s#99
[#228 'sampler']: s#131
[#228 'sampler_comparison']: s#132
[#228 'texture_1d']: s#138
[#228 'texture_2d']: s#139
[#228 'texture_2d_array']: s#140
[#228 'texture_3d']: s#141
[#228 'texture_cube']: s#142
[#228 'texture_cube_array']: s#143
[#228 'texture_depth_2d']: s#133
[#228 'texture_depth_2d_array']: s#134
[#228 'texture_depth_cube']: s#135
[#228 'texture_depth_cube_array']: s#136
[#228 'texture_depth_multisampled_2d']: s#137
[#228 'texture_multisampled_2d']: s#144
[#228 'texture_storage_1d']: s#145
[#228 'texture_storage_2d']: s#146
[#228 'texture_storage_2d_array']: s#147
[#228 'texture_storage_3d']: s#148
[#228 'true']: s#92
[#228 'u32']: s#98
[#228 'vec2']: s#103
[#228 'vec3']: s#104
[#228 'vec4']: s#105
[#228 '~']: s#69
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#228 /0[fh]/]: s#118
[#228 /0[iu]?/]: s#115
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#228 /[1-9][0-9]*[fh]/]: s#119
[#228 /[1-9][0-9]*[iu]?/]: s#116
[#229 '!']: s#68
[#229 '&']: s#71
[#229 '(']: s#83
[#229 '*']: s#70
[#229 '-']: s#67
[#229 'array']: s#87
[#229 'atomic']: s#101
[#229 'bitcast']: s#77
[#229 'bool']: s#94
[#229 'f16']: s#96
[#229 'f32']: s#95
[#229 'false']: s#93
[#229 'i32']: s#97
[#229 'mat2x2']: s#106
[#229 'mat2x3']: s#107
[#229 'mat2x4']: s#108
[#229 'mat3x2']: s#109
[#229 'mat3x3']: s#110
[#229 'mat3x4']: s#111
[#229 'mat4x2']: s#112
[#229 'mat4x3']: s#113
[#229 'mat4x4']: s#114
[#229 'ptr']: s#99
[#229 'sampler']: s#131
[#229 'sampler_comparison']: s#132
[#229 'texture_1d']: s#138
[#229 'texture_2d']: s#139
[#229 'texture_2d_array']: s#140
[#229 'texture_3d']: s#141
[#229 'texture_cube']: s#142
[#229 'texture_cube_array']: s#143
[#229 'texture_depth_2d']: s#133
[#229 'texture_depth_2d_array']: s#134
[#229 'texture_depth_cube']: s#135
[#229 'texture_depth_cube_array']: s#136
[#229 'texture_depth_multisampled_2d']: s#137
[#229 'texture_multisampled_2d']: s#144
[#229 'texture_storage_1d']: s#145
[#229 'texture_storage_2d']: s#146
[#229 'texture_storage_2d_array']: s#147
[#229 'texture_storage_3d']: s#148
[#229 'true']: s#92
[#229 'u32']: s#98
[#229 'vec2']: s#103
[#229 'vec3']: s#104
[#229 'vec4']: s#105
[#229 '~']: s#69
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#229 /0[fh]/]: s#118
[#229 /0[iu]?/]: s#115
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#229 /[1-9][0-9]*[fh]/]: s#119
[#229 /[1-9][0-9]*[iu]?/]: s#116
[#230 '!']: s#68
[#230 '&']: s#71
[#230 '(']: s#83
[#230 '*']: s#70
[#230 '-']: s#67
[#230 'array']: s#87
[#230 'atomic']: s#101
[#230 'bitcast']: s#77
[#230 'bool']: s#94
[#230 'f16']: s#96
[#230 'f32']: s#95
[#230 'false']: s#93
[#230 'i32']: s#97
[#230 'mat2x2']: s#106
[#230 'mat2x3']: s#107
[#230 'mat2x4']: s#108
[#230 'mat3x2']: s#109
[#230 'mat3x3']: s#110
[#230 'mat3x4']: s#111
[#230 'mat4x2']: s#112
[#230 'mat4x3']: s#113
[#230 'mat4x4']: s#114
[#230 'ptr']: s#99
[#230 'sampler']: s#131
[#230 'sampler_comparison']: s#132
[#230 'texture_1d']: s#138
[#230 'texture_2d']: s#139
[#230 'texture_2d_array']: s#140
[#230 'texture_3d']: s#141
[#230 'texture_cube']: s#142
[#230 'texture_cube_array']: s#143
[#230 'texture_depth_2d']: s#133
[#230 'texture_depth_2d_array']: s#134
[#230 'texture_depth_cube']: s#135
[#230 'texture_depth_cube_array']: s#136
[#230 'texture_depth_multisampled_2d']: s#137
[#230 'texture_multisampled_2d']: s#144
[#230 'texture_storage_1d']: s#145
[#230 'texture_storage_2d']: s#146
[#230 'texture_storage_2d_array']: s#147
[#230 'texture_storage_3d']: s#148
[#230 'true']: s#92
[#230 'u32']: s#98
[#230 'vec2']: s#103
[#230 'vec3']: s#104
[#230 'vec4']: s#105
[#230 '~']: s#69
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#230 /0[fh]/]: s#118
[#230 /0[iu]?/]: s#115
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#230 /[1-9][0-9]*[fh]/]: s#119
[#230 /[1-9][0-9]*[iu]?/]: s#116
[#231 'flat']: s#258
[#231 'linear']: s#257
[#231 'perspective']: s#256
[#232 '!']: s#68
[#232 '&']: s#71
[#232 '(']: s#83
[#232 '*']: s#70
[#232 '-']: s#67
[#232 'array']: s#87
[#232 'atomic']: s#101
[#232 'bitcast']: s#77
[#232 'bool']: s#94
[#232 'f16']: s#96
[#232 'f32']: s#95
[#232 'false']: s#93
[#232 'i32']: s#97
[#232 'mat2x2']: s#106
[#232 'mat2x3']: s#107
[#232 'mat2x4']: s#108
[#232 'mat3x2']: s#109
[#232 'mat3x3']: s#110
[#232 'mat3x4']: s#111
[#232 'mat4x2']: s#112
[#232 'mat4x3']: s#113
[#232 'mat4x4']: s#114
[#232 'ptr']: s#99
[#232 'sampler']: s#131
[#232 'sampler_comparison']: s#132
[#232 'texture_1d']: s#138
[#232 'texture_2d']: s#139
[#232 'texture_2d_array']: s#140
[#232 'texture_3d']: s#141
[#232 'texture_cube']: s#142
[#232 'texture_cube_array']: s#143
[#232 'texture_depth_2d']: s#133
[#232 'texture_depth_2d_array']: s#134
[#232 'texture_depth_cube']: s#135
[#232 'texture_depth_cube_array']: s#136
[#232 'texture_depth_multisampled_2d']: s#137
[#232 'texture_multisampled_2d']: s#144
[#232 'texture_storage_1d']: s#145
[#232 'texture_storage_2d']: s#146
[#232 'texture_storage_2d_array']: s#147
[#232 'texture_storage_3d']: s#148
[#232 'true']: s#92
[#232 'u32']: s#98
[#232 'vec2']: s#103
[#232 'vec3']: s#104
[#232 'vec4']: s#105
[#232 '~']: s#69
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#232 /0[fh]/]: s#118
[#232 /0[iu]?/]: s#115
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#232 /[1-9][0-9]*[fh]/]: s#119
[#232 /[1-9][0-9]*[iu]?/]: s#116
[#233 '!']: s#68
[#233 '&']: s#71
[#233 '(']: s#83
[#233 '*']: s#70
[#233 '-']: s#67
[#233 'array']: s#87
[#233 'atomic']: s#101
[#233 'bitcast']: s#77
[#233 'bool']: s#94
[#233 'f16']: s#96
[#233 'f32']: s#95
[#233 'false']: s#93
[#233 'i32']: s#97
[#233 'mat2x2']: s#106
[#233 'mat2x3']: s#107
[#233 'mat2x4']: s#108
[#233 'mat3x2']: s#109
[#233 'mat3x3']: s#110
[#233 'mat3x4']: s#111
[#233 'mat4x2']: s#112
[#233 'mat4x3']: s#113
[#233 'mat4x4']: s#114
[#233 'ptr']: s#99
[#233 'sampler']: s#131
[#233 'sampler_comparison']: s#132
[#233 'texture_1d']: s#138
[#233 'texture_2d']: s#139
[#233 'texture_2d_array']: s#140
[#233 'texture_3d']: s#141
[#233 'texture_cube']: s#142
[#233 'texture_cube_array']: s#143
[#233 'texture_depth_2d']: s#133
[#233 'texture_depth_2d_array']: s#134
[#233 'texture_depth_cube']: s#135
[#233 'texture_depth_cube_array']: s#136
[#233 'texture_depth_multisampled_2d']: s#137
[#233 'texture_multisampled_2d']: s#144
[#233 'texture_storage_1d']: s#145
[#233 'texture_storage_2d']: s#146
[#233 'texture_storage_2d_array']: s#147
[#233 'texture_storage_3d']: s#148
[#233 'true']: s#92
[#233 'u32']: s#98
[#233 'vec2']: s#103
[#233 'vec3']: s#104
[#233 'vec4']: s#105
[#233 '~']: s#69
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#233 /0[fh]/]: s#118
[#233 /0[iu]?/]: s#115
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#233 /[1-9][0-9]*[fh]/]: s#119
[#233 /[1-9][0-9]*[iu]?/]: s#116
[#234 'f16']: r#29
[#234 'texture_multisampled_2d']: r#29
[#235 'frag_depth']: s#245
[#235 'front_facing']: s#244
[#235 'global_invocation_id']: s#248
[#235 'instance_index']: s#242
[#235 'local_invocation_id']: s#246
[#235 'local_invocation_index']: s#247
[#235 'num_workgroups']: s#250
[#235 'position']: s#243
[#235 'sample_index']: s#251
[#235 'sample_mask']: s#252
[#235 'vertex_index']: s#241
[#235 'workgroup_id']: s#249
[#236 '!']: s#68
[#236 '&']: s#71
[#236 '(']: s#83
[#236 '*']: s#70
[#236 '-']: s#67
[#236 'array']: s#87
[#236 'atomic']: s#101
[#236 'bitcast']: s#77
[#236 'bool']: s#94
[#236 'f16']: s#96
[#236 'f32']: s#95
[#236 'false']: s#93
[#236 'i32']: s#97
[#236 'mat2x2']: s#106
[#236 'mat2x3']: s#107
[#236 'mat2x4']: s#108
[#236 'mat3x2']: s#109
[#236 'mat3x3']: s#110
[#236 'mat3x4']: s#111
[#236 'mat4x2']: s#112
[#236 'mat4x3']: s#113
[#236 'mat4x4']: s#114
[#236 'ptr']: s#99
[#236 'sampler']: s#131
[#236 'sampler_comparison']: s#132
[#236 'texture_1d']: s#138
[#236 'texture_2d']: s#139
[#236 'texture_2d_array']: s#140
[#236 'texture_3d']: s#141
[#236 'texture_cube']: s#142
[#236 'texture_cube_array']: s#143
[#236 'texture_depth_2d']: s#133
[#236 'texture_depth_2d_array']: s#134
[#236 'texture_depth_cube']: s#135
[#236 'texture_depth_cube_array']: s#136
[#236 'texture_depth_multisampled_2d']: s#137
[#236 'texture_multisampled_2d']: s#144
[#236 'texture_storage_1d']: s#145
[#236 'texture_storage_2d']: s#146
[#236 'texture_storage_2d_array']: s#147
[#236 'texture_storage_3d']: s#148
[#236 'true']: s#92
[#236 'u32']: s#98
[#236 'vec2']: s#103
[#236 'vec3']: s#104
[#236 'vec4']: s#105
[#236 '~']: s#69
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#236 /0[fh]/]: s#118
[#236 /0[iu]?/]: s#115
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#236 /[1-9][0-9]*[fh]/]: s#119
[#236 /[1-9][0-9]*[iu]?/]: s#116
[#237 '!']: s#68
[#237 '&']: s#71
[#237 '(']: s#83
[#237 '*']: s#70
[#237 '-']: s#67
[#237 'array']: s#87
[#237 'atomic']: s#101
[#237 'bitcast']: s#77
[#237 'bool']: s#94
[#237 'f16']: s#96
[#237 'f32']: s#95
[#237 'false']: s#93
[#237 'i32']: s#97
[#237 'mat2x2']: s#106
[#237 'mat2x3']: s#107
[#237 'mat2x4']: s#108
[#237 'mat3x2']: s#109
[#237 'mat3x3']: s#110
[#237 'mat3x4']: s#111
[#237 'mat4x2']: s#112
[#237 'mat4x3']: s#113
[#237 'mat4x4']: s#114
[#237 'ptr']: s#99
[#237 'sampler']: s#131
[#237 'sampler_comparison']: s#132
[#237 'texture_1d']: s#138
[#237 'texture_2d']: s#139
[#237 'texture_2d_array']: s#140
[#237 'texture_3d']: s#141
[#237 'texture_cube']: s#142
[#237 'texture_cube_array']: s#143
[#237 'texture_depth_2d']: s#133
[#237 'texture_depth_2d_array']: s#134
[#237 'texture_depth_cube']: s#135
[#237 'texture_depth_cube_array']: s#136
[#237 'texture_depth_multisampled_2d']: s#137
[#237 'texture_multisampled_2d']: s#144
[#237 'texture_storage_1d']: s#145
[#237 'texture_storage_2d']: s#146
[#237 'texture_storage_2d_array']: s#147
[#237 'texture_storage_3d']: s#148
[#237 'true']: s#92
[#237 'u32']: s#98
[#237 'vec2']: s#103
[#237 'vec3']: s#104
[#237 'vec4']: s#105
[#237 '~']: s#69
[#237 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#237 /0[fh]/]: s#118
[#237 /0[iu]?/]: s#115
[#237 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#237 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#237 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#237 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#237 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#237 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#237 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#237 /[1-9][0-9]*[fh]/]: s#119
[#237 /[1-9][0-9]*[iu]?/]: s#116
[#238 ',']: s#349
[#239 ',']: s#349
[#240 ',']: s#349
[#253 ',']: s#349
[#254 ',']: s#349
[#255 ',']: s#436
[#259 ',']: s#349
[#260 ',']: s#349
[#261 ',']: s#432
[#263 '<<']: s#212
[#263 '>>']: s#213
[#274 '%']: s#211
[#274 '*']: s#209
[#274 '/']: s#210
[#279 '.']: s#202
[#279 '[']: s#201
[#280 '.']: s#202
[#280 '[']: s#201
[#290 ']']: s#426
[#291 '>']: s#425
[#294 '<']: s#194
[#295 '<']: s#193
[#296 '<']: s#192
[#297 ')']: s#424
[#299 ',']: s#423
[#301 '>']: s#419
[#302 '>']: s#418
[#303 ',']: s#417
[#304 ',']: s#415
[#310 '>']: s#414
[#311 '>']: s#413
[#312 '>']: s#412
[#313 ',']: s#411
[#331 '&']: s#409
[#331 '(']: s#410
[#331 '*']: s#408
[#331 ';']: s#368
[#331 '@']: s#35
[#331 '_']: s#405
[#331 'array']: s#87
[#331 'atomic']: s#101
[#331 'bool']: s#94
[#331 'break']: s#393
[#331 'const']: s#392
[#331 'continue']: s#394
[#331 'discard']: s#379
[#331 'f16']: s#96
[#331 'f32']: s#95
[#331 'i32']: s#97
[#331 'let']: s#391
[#331 'mat2x2']: s#106
[#331 'mat2x3']: s#107
[#331 'mat2x4']: s#108
[#331 'mat3x2']: s#109
[#331 'mat3x3']: s#110
[#331 'mat3x4']: s#111
[#331 'mat4x2']: s#112
[#331 'mat4x3']: s#113
[#331 'mat4x4']: s#114
[#331 'ptr']: s#99
[#331 'return']: s#383
[#331 'sampler']: s#131
[#331 'sampler_comparison']: s#132
[#331 'static_assert']: s#30
[#331 'texture_1d']: s#138
[#331 'texture_2d']: s#139
[#331 'texture_2d_array']: s#140
[#331 'texture_3d']: s#141
[#331 'texture_cube']: s#142
[#331 'texture_cube_array']: s#143
[#331 'texture_depth_2d']: s#133
[#331 'texture_depth_2d_array']: s#134
[#331 'texture_depth_cube']: s#135
[#331 'texture_depth_cube_array']: s#136
[#331 'texture_depth_multisampled_2d']: s#137
[#331 'texture_multisampled_2d']: s#144
[#331 'texture_storage_1d']: s#145
[#331 'texture_storage_2d']: s#146
[#331 'texture_storage_2d_array']: s#147
[#331 'texture_storage_3d']: s#148
[#331 'u32']: s#98
[#331 'var']: s#157
[#331 'vec2']: s#103
[#331 'vec3']: s#104
[#331 'vec4']: s#105
[#331 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#332 '@']: s#35
[#333 ',']: s#358
[#334 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#281
[#336 '@']: s#35
[#339 '!']: s#68
[#339 '&']: s#71
[#339 '(']: s#83
[#339 '*']: s#70
[#339 '-']: s#67
[#339 'array']: s#87
[#339 'atomic']: s#101
[#339 'bitcast']: s#77
[#339 'bool']: s#94
[#339 'f16']: s#96
[#339 'f32']: s#95
[#339 'false']: s#93
[#339 'i32']: s#97
[#339 'mat2x2']: s#106
[#339 'mat2x3']: s#107
[#339 'mat2x4']: s#108
[#339 'mat3x2']: s#109
[#339 'mat3x3']: s#110
[#339 'mat3x4']: s#111
[#339 'mat4x2']: s#112
[#339 'mat4x3']: s#113
[#339 'mat4x4']: s#114
[#339 'ptr']: s#99
[#339 'sampler']: s#131
[#339 'sampler_comparison']: s#132
[#339 'texture_1d']: s#138
[#339 'texture_2d']: s#139
[#339 'texture_2d_array']: s#140
[#339 'texture_3d']: s#141
[#339 'texture_cube']: s#142
[#339 'texture_cube_array']: s#143
[#339 'texture_depth_2d']: s#133
[#339 'texture_depth_2d_array']: s#134
[#339 'texture_depth_cube']: s#135
[#339 'texture_depth_cube_array']: s#136
[#339 'texture_depth_multisampled_2d']: s#137
[#339 'texture_multisampled_2d']: s#144
[#339 'texture_storage_1d']: s#145
[#339 'texture_storage_2d']: s#146
[#339 'texture_storage_2d_array']: s#147
[#339 'texture_storage_3d']: s#148
[#339 'true']: s#92
[#339 'u32']: s#98
[#339 'vec2']: s#103
[#339 'vec3']: s#104
[#339 'vec4']: s#105
[#339 '~']: s#69
[#339 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#339 /0[fh]/]: s#118
[#339 /0[iu]?/]: s#115
[#339 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#339 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#339 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#339 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#339 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#339 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#339 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#339 /[1-9][0-9]*[fh]/]: s#119
[#339 /[1-9][0-9]*[iu]?/]: s#116
[#343 ',']: s#351
[#345 ',']: s#349
[#347 'f16']: r#30
[#347 'texture_multisampled_2d']: r#30
[#348 ')']: s#527
[#350 '>']: s#526
[#351 'read']: s#461
[#351 'read_write']: s#463
[#351 'write']: s#462
[#354 ':']: s#524
[#355 ',']: s#523
[#357 ',']: s#358
[#358 '@']: s#35
[#359 ')']: s#519
[#361 ',']: s#518
[#362 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#364 '@']: s#35
[#365 '}']: s#512
[#367 '&']: s#409
[#367 '(']: s#410
[#367 '*']: s#408
[#367 ';']: s#368
[#367 '@']: s#35
[#367 '_']: s#405
[#367 'array']: s#87
[#367 'atomic']: s#101
[#367 'bool']: s#94
[#367 'break']: s#393
[#367 'const']: s#392
[#367 'continue']: s#394
[#367 'discard']: s#379
[#367 'f16']: s#96
[#367 'f32']: s#95
[#367 'i32']: s#97
[#367 'let']: s#391
[#367 'mat2x2']: s#106
[#367 'mat2x3']: s#107
[#367 'mat2x4']: s#108
[#367 'mat3x2']: s#109
[#367 'mat3x3']: s#110
[#367 'mat3x4']: s#111
[#367 'mat4x2']: s#112
[#367 'mat4x3']: s#113
[#367 'mat4x4']: s#114
[#367 'ptr']: s#99
[#367 'return']: s#383
[#367 'sampler']: s#131
[#367 'sampler_comparison']: s#132
[#367 'static_assert']: s#30
[#367 'texture_1d']: s#138
[#367 'texture_2d']: s#139
[#367 'texture_2d_array']: s#140
[#367 'texture_3d']: s#141
[#367 'texture_cube']: s#142
[#367 'texture_cube_array']: s#143
[#367 'texture_depth_2d']: s#133
[#367 'texture_depth_2d_array']: s#134
[#367 'texture_depth_cube']: s#135
[#367 'texture_depth_cube_array']: s#136
[#367 'texture_depth_multisampled_2d']: s#137
[#367 'texture_multisampled_2d']: s#144
[#367 'texture_storage_1d']: s#145
[#367 'texture_storage_2d']: s#146
[#367 'texture_storage_2d_array']: s#147
[#367 'texture_storage_3d']: s#148
[#367 'u32']: s#98
[#367 'var']: s#157
[#367 'vec2']: s#103
[#367 'vec3']: s#104
[#367 'vec4']: s#105
[#367 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#368 'break']: r#31
[#368 'continue']: r#31
[#368 'f16']: r#31
[#368 'texture_multisampled_2d']: r#31
[#369 ';']: s#510
[#370 'break']: r#32
[#370 'continue']: r#32
[#370 'f16']: r#32
[#370 'texture_multisampled_2d']: r#32
[#371 'break']: r#33
[#371 'continue']: r#33
[#371 'f16']: r#33
[#371 'texture_multisampled_2d']: r#33
[#372 'break']: r#34
[#372 'continue']: r#34
[#372 'f16']: r#34
[#372 'texture_multisampled_2d']: r#34
[#373 'break']: r#35
[#373 'continue']: r#35
[#373 'f16']: r#35
[#373 'texture_multisampled_2d']: r#35
[#374 'break']: r#36
[#374 'continue']: r#36
[#374 'f16']: r#36
[#374 'texture_multisampled_2d']: r#36
[#375 ';']: s#509
[#376 ';']: s#508
[#377 ';']: s#507
[#378 ';']: s#506
[#379 ';']: s#505
[#380 ';']: s#504
[#381 'break']: r#37
[#381 'continue']: r#37
[#381 'f16']: r#37
[#381 'texture_multisampled_2d']: r#37
[#382 ';']: s#503
[#383 '!']: s#68
[#383 '&']: s#71
[#383 '(']: s#83
[#383 '*']: s#70
[#383 '-']: s#67
[#383 'array']: s#87
[#383 'atomic']: s#101
[#383 'bitcast']: s#77
[#383 'bool']: s#94
[#383 'f16']: s#96
[#383 'f32']: s#95
[#383 'false']: s#93
[#383 'i32']: s#97
[#383 'mat2x2']: s#106
[#383 'mat2x3']: s#107
[#383 'mat2x4']: s#108
[#383 'mat3x2']: s#109
[#383 'mat3x3']: s#110
[#383 'mat3x4']: s#111
[#383 'mat4x2']: s#112
[#383 'mat4x3']: s#113
[#383 'mat4x4']: s#114
[#383 'ptr']: s#99
[#383 'sampler']: s#131
[#383 'sampler_comparison']: s#132
[#383 'texture_1d']: s#138
[#383 'texture_2d']: s#139
[#383 'texture_2d_array']: s#140
[#383 'texture_3d']: s#141
[#383 'texture_cube']: s#142
[#383 'texture_cube_array']: s#143
[#383 'texture_depth_2d']: s#133
[#383 'texture_depth_2d_array']: s#134
[#383 'texture_depth_cube']: s#135
[#383 'texture_depth_cube_array']: s#136
[#383 'texture_depth_multisampled_2d']: s#137
[#383 'texture_multisampled_2d']: s#144
[#383 'texture_storage_1d']: s#145
[#383 'texture_storage_2d']: s#146
[#383 'texture_storage_2d_array']: s#147
[#383 'texture_storage_3d']: s#148
[#383 'true']: s#92
[#383 'u32']: s#98
[#383 'vec2']: s#103
[#383 'vec3']: s#104
[#383 'vec4']: s#105
[#383 '~']: s#69
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#383 /0[fh]/]: s#118
[#383 /0[iu]?/]: s#115
[#383 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#383 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#383 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#383 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#383 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#383 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#383 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#383 /[1-9][0-9]*[fh]/]: s#119
[#383 /[1-9][0-9]*[iu]?/]: s#116
[#384 'if']: s#500
[#385 'switch']: s#498
[#386 'loop']: s#497
[#387 'for']: s#496
[#388 'while']: s#495
[#389 '(']: s#197
[#390 '=']: s#493
[#391 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#392 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#404 '%=']: s#485
[#404 '&=']: s#486
[#404 '*=']: s#483
[#404 '++']: s#477
[#404 '+=']: s#481
[#404 '--']: s#478
[#404 '-=']: s#482
[#404 '/=']: s#484
[#404 '<<=']: s#490
[#404 '=']: s#479
[#404 '>>=']: s#489
[#404 '^=']: s#488
[#404 '|=']: s#487
[#405 '=']: s#475
[#406 '@']: s#35
[#407 '.']: s#202
[#407 '[']: s#201
[#408 '&']: s#409
[#408 '(']: s#410
[#408 '*']: s#408
[#408 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#409 '&']: s#409
[#409 '(']: s#410
[#409 '*']: s#408
[#409 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#410 '&']: s#409
[#410 '(']: s#410
[#410 '*']: s#408
[#410 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#411 'read']: s#461
[#411 'read_write']: s#463
[#411 'write']: s#462
[#415 'array']: s#296
[#415 'atomic']: s#101
[#415 'bool']: s#94
[#415 'f16']: s#96
[#415 'f32']: s#95
[#415 'i32']: s#97
[#415 'mat2x2']: s#106
[#415 'mat2x3']: s#107
[#415 'mat2x4']: s#108
[#415 'mat3x2']: s#109
[#415 'mat3x3']: s#110
[#415 'mat3x4']: s#111
[#415 'mat4x2']: s#112
[#415 'mat4x3']: s#113
[#415 'mat4x4']: s#114
[#415 'ptr']: s#99
[#415 'sampler']: s#131
[#415 'sampler_comparison']: s#132
[#415 'texture_1d']: s#138
[#415 'texture_2d']: s#139
[#415 'texture_2d_array']: s#140
[#415 'texture_3d']: s#141
[#415 'texture_cube']: s#142
[#415 'texture_cube_array']: s#143
[#415 'texture_depth_2d']: s#133
[#415 'texture_depth_2d_array']: s#134
[#415 'texture_depth_cube']: s#135
[#415 'texture_depth_cube_array']: s#136
[#415 'texture_depth_multisampled_2d']: s#137
[#415 'texture_multisampled_2d']: s#144
[#415 'texture_storage_1d']: s#145
[#415 'texture_storage_2d']: s#146
[#415 'texture_storage_2d_array']: s#147
[#415 'texture_storage_3d']: s#148
[#415 'u32']: s#98
[#415 'vec2']: s#103
[#415 'vec3']: s#104
[#415 'vec4']: s#105
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#416 '>']: s#458
[#417 '!']: s#68
[#417 '&']: s#71
[#417 '(']: s#83
[#417 '*']: s#70
[#417 '-']: s#67
[#417 'array']: s#87
[#417 'atomic']: s#101
[#417 'bitcast']: s#77
[#417 'bool']: s#94
[#417 'f16']: s#96
[#417 'f32']: s#95
[#417 'false']: s#93
[#417 'i32']: s#97
[#417 'mat2x2']: s#106
[#417 'mat2x3']: s#107
[#417 'mat2x4']: s#108
[#417 'mat3x2']: s#109
[#417 'mat3x3']: s#110
[#417 'mat3x4']: s#111
[#417 'mat4x2']: s#112
[#417 'mat4x3']: s#113
[#417 'mat4x4']: s#114
[#417 'ptr']: s#99
[#417 'sampler']: s#131
[#417 'sampler_comparison']: s#132
[#417 'texture_1d']: s#138
[#417 'texture_2d']: s#139
[#417 'texture_2d_array']: s#140
[#417 'texture_3d']: s#141
[#417 'texture_cube']: s#142
[#417 'texture_cube_array']: s#143
[#417 'texture_depth_2d']: s#133
[#417 'texture_depth_2d_array']: s#134
[#417 'texture_depth_cube']: s#135
[#417 'texture_depth_cube_array']: s#136
[#417 'texture_depth_multisampled_2d']: s#137
[#417 'texture_multisampled_2d']: s#144
[#417 'texture_storage_1d']: s#145
[#417 'texture_storage_2d']: s#146
[#417 'texture_storage_2d_array']: s#147
[#417 'texture_storage_3d']: s#148
[#417 'true']: s#92
[#417 'u32']: s#98
[#417 'vec2']: s#103
[#417 'vec3']: s#104
[#417 'vec4']: s#105
[#417 '~']: s#69
[#417 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#417 /0[fh]/]: s#118
[#417 /0[iu]?/]: s#115
[#417 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#417 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#417 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#417 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#417 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#417 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#417 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#417 /[1-9][0-9]*[fh]/]: s#119
[#417 /[1-9][0-9]*[iu]?/]: s#116
[#420 ',']: s#453
[#422 ',']: s#423
[#423 '!']: s#68
[#423 '&']: s#71
[#423 '(']: s#83
[#423 '*']: s#70
[#423 '-']: s#67
[#423 'array']: s#87
[#423 'atomic']: s#101
[#423 'bitcast']: s#77
[#423 'bool']: s#94
[#423 'f16']: s#96
[#423 'f32']: s#95
[#423 'false']: s#93
[#423 'i32']: s#97
[#423 'mat2x2']: s#106
[#423 'mat2x3']: s#107
[#423 'mat2x4']: s#108
[#423 'mat3x2']: s#109
[#423 'mat3x3']: s#110
[#423 'mat3x4']: s#111
[#423 'mat4x2']: s#112
[#423 'mat4x3']: s#113
[#423 'mat4x4']: s#114
[#423 'ptr']: s#99
[#423 'sampler']: s#131
[#423 'sampler_comparison']: s#132
[#423 'texture_1d']: s#138
[#423 'texture_2d']: s#139
[#423 'texture_2d_array']: s#140
[#423 'texture_3d']: s#141
[#423 'texture_cube']: s#142
[#423 'texture_cube_array']: s#143
[#423 'texture_depth_2d']: s#133
[#423 'texture_depth_2d_array']: s#134
[#423 'texture_depth_cube']: s#135
[#423 'texture_depth_cube_array']: s#136
[#423 'texture_depth_multisampled_2d']: s#137
[#423 'texture_multisampled_2d']: s#144
[#423 'texture_storage_1d']: s#145
[#423 'texture_storage_2d']: s#146
[#423 'texture_storage_2d_array']: s#147
[#423 'texture_storage_3d']: s#148
[#423 'true']: s#92
[#423 'u32']: s#98
[#423 'vec2']: s#103
[#423 'vec3']: s#104
[#423 'vec4']: s#105
[#423 '~']: s#69
[#423 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#423 /0[fh]/]: s#118
[#423 /0[iu]?/]: s#115
[#423 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#423 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#423 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#423 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#423 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#423 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#423 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#423 /[1-9][0-9]*[fh]/]: s#119
[#423 /[1-9][0-9]*[iu]?/]: s#116
[#425 '(']: s#83
[#426 '.']: s#202
[#426 '[']: s#201
[#431 'f16']: r#38
[#431 'texture_multisampled_2d']: r#38
[#432 '!']: s#68
[#432 '&']: s#71
[#432 '(']: s#83
[#432 '*']: s#70
[#432 '-']: s#67
[#432 'array']: s#87
[#432 'atomic']: s#101
[#432 'bitcast']: s#77
[#432 'bool']: s#94
[#432 'f16']: s#96
[#432 'f32']: s#95
[#432 'false']: s#93
[#432 'i32']: s#97
[#432 'mat2x2']: s#106
[#432 'mat2x3']: s#107
[#432 'mat2x4']: s#108
[#432 'mat3x2']: s#109
[#432 'mat3x3']: s#110
[#432 'mat3x4']: s#111
[#432 'mat4x2']: s#112
[#432 'mat4x3']: s#113
[#432 'mat4x4']: s#114
[#432 'ptr']: s#99
[#432 'sampler']: s#131
[#432 'sampler_comparison']: s#132
[#432 'texture_1d']: s#138
[#432 'texture_2d']: s#139
[#432 'texture_2d_array']: s#140
[#432 'texture_3d']: s#141
[#432 'texture_cube']: s#142
[#432 'texture_cube_array']: s#143
[#432 'texture_depth_2d']: s#133
[#432 'texture_depth_2d_array']: s#134
[#432 'texture_depth_cube']: s#135
[#432 'texture_depth_cube_array']: s#136
[#432 'texture_depth_multisampled_2d']: s#137
[#432 'texture_multisampled_2d']: s#144
[#432 'texture_storage_1d']: s#145
[#432 'texture_storage_2d']: s#146
[#432 'texture_storage_2d_array']: s#147
[#432 'texture_storage_3d']: s#148
[#432 'true']: s#92
[#432 'u32']: s#98
[#432 'vec2']: s#103
[#432 'vec3']: s#104
[#432 'vec4']: s#105
[#432 '~']: s#69
[#432 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#432 /0[fh]/]: s#118
[#432 /0[iu]?/]: s#115
[#432 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#432 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#432 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#432 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#432 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#432 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#432 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#432 /[1-9][0-9]*[fh]/]: s#119
[#432 /[1-9][0-9]*[iu]?/]: s#116
[#433 'f16']: r#39
[#433 'texture_multisampled_2d']: r#39
[#434 'f16']: r#40
[#434 'texture_multisampled_2d']: r#40
[#435 'f16']: r#41
[#435 'texture_multisampled_2d']: r#41
[#436 'center']: s#443
[#436 'centroid']: s#444
[#436 'sample']: s#445
[#437 'f16']: r#42
[#437 'texture_multisampled_2d']: r#42
[#438 'f16']: r#43
[#438 'texture_multisampled_2d']: r#43
[#439 'f16']: r#44
[#439 'texture_multisampled_2d']: r#44
[#440 'f16']: r#45
[#440 'texture_multisampled_2d']: r#45
[#441 'f16']: r#46
[#441 'texture_multisampled_2d']: r#46
[#442 ',']: s#349
[#446 ',']: s#558
[#455 '+']: s#215
[#455 '-']: s#216
[#459 ',']: s#556
[#460 '>']: s#554
[#464 ')']: s#553
[#475 '!']: s#68
[#475 '&']: s#71
[#475 '(']: s#83
[#475 '*']: s#70
[#475 '-']: s#67
[#475 'array']: s#87
[#475 'atomic']: s#101
[#475 'bitcast']: s#77
[#475 'bool']: s#94
[#475 'f16']: s#96
[#475 'f32']: s#95
[#475 'false']: s#93
[#475 'i32']: s#97
[#475 'mat2x2']: s#106
[#475 'mat2x3']: s#107
[#475 'mat2x4']: s#108
[#475 'mat3x2']: s#109
[#475 'mat3x3']: s#110
[#475 'mat3x4']: s#111
[#475 'mat4x2']: s#112
[#475 'mat4x3']: s#113
[#475 'mat4x4']: s#114
[#475 'ptr']: s#99
[#475 'sampler']: s#131
[#475 'sampler_comparison']: s#132
[#475 'texture_1d']: s#138
[#475 'texture_2d']: s#139
[#475 'texture_2d_array']: s#140
[#475 'texture_3d']: s#141
[#475 'texture_cube']: s#142
[#475 'texture_cube_array']: s#143
[#475 'texture_depth_2d']: s#133
[#475 'texture_depth_2d_array']: s#134
[#475 'texture_depth_cube']: s#135
[#475 'texture_depth_cube_array']: s#136
[#475 'texture_depth_multisampled_2d']: s#137
[#475 'texture_multisampled_2d']: s#144
[#475 'texture_storage_1d']: s#145
[#475 'texture_storage_2d']: s#146
[#475 'texture_storage_2d_array']: s#147
[#475 'texture_storage_3d']: s#148
[#475 'true']: s#92
[#475 'u32']: s#98
[#475 'vec2']: s#103
[#475 'vec3']: s#104
[#475 'vec4']: s#105
[#475 '~']: s#69
[#475 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#475 /0[fh]/]: s#118
[#475 /0[iu]?/]: s#115
[#475 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#475 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#475 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#475 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#475 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#475 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#475 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#475 /[1-9][0-9]*[fh]/]: s#119
[#475 /[1-9][0-9]*[iu]?/]: s#116
[#476 '!']: s#68
[#476 '&']: s#71
[#476 '(']: s#83
[#476 '*']: s#70
[#476 '-']: s#67
[#476 'array']: s#87
[#476 'atomic']: s#101
[#476 'bitcast']: s#77
[#476 'bool']: s#94
[#476 'f16']: s#96
[#476 'f32']: s#95
[#476 'false']: s#93
[#476 'i32']: s#97
[#476 'mat2x2']: s#106
[#476 'mat2x3']: s#107
[#476 'mat2x4']: s#108
[#476 'mat3x2']: s#109
[#476 'mat3x3']: s#110
[#476 'mat3x4']: s#111
[#476 'mat4x2']: s#112
[#476 'mat4x3']: s#113
[#476 'mat4x4']: s#114
[#476 'ptr']: s#99
[#476 'sampler']: s#131
[#476 'sampler_comparison']: s#132
[#476 'texture_1d']: s#138
[#476 'texture_2d']: s#139
[#476 'texture_2d_array']: s#140
[#476 'texture_3d']: s#141
[#476 'texture_cube']: s#142
[#476 'texture_cube_array']: s#143
[#476 'texture_depth_2d']: s#133
[#476 'texture_depth_2d_array']: s#134
[#476 'texture_depth_cube']: s#135
[#476 'texture_depth_cube_array']: s#136
[#476 'texture_depth_multisampled_2d']: s#137
[#476 'texture_multisampled_2d']: s#144
[#476 'texture_storage_1d']: s#145
[#476 'texture_storage_2d']: s#146
[#476 'texture_storage_2d_array']: s#147
[#476 'texture_storage_3d']: s#148
[#476 'true']: s#92
[#476 'u32']: s#98
[#476 'vec2']: s#103
[#476 'vec3']: s#104
[#476 'vec4']: s#105
[#476 '~']: s#69
[#476 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#476 /0[fh]/]: s#118
[#476 /0[iu]?/]: s#115
[#476 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#476 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#476 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#476 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#476 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#476 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#476 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#476 /[1-9][0-9]*[fh]/]: s#119
[#476 /[1-9][0-9]*[iu]?/]: s#116
[#479 /0[xX][0-9a-fA-F]+[iu]?/]: r#47
[#480 /0[xX][0-9a-fA-F]+[iu]?/]: r#48
[#481 /0[xX][0-9a-fA-F]+[iu]?/]: r#49
[#482 /0[xX][0-9a-fA-F]+[iu]?/]: r#50
[#483 /0[xX][0-9a-fA-F]+[iu]?/]: r#51
[#484 /0[xX][0-9a-fA-F]+[iu]?/]: r#52
[#485 /0[xX][0-9a-fA-F]+[iu]?/]: r#53
[#486 /0[xX][0-9a-fA-F]+[iu]?/]: r#54
[#487 /0[xX][0-9a-fA-F]+[iu]?/]: r#55
[#488 /0[xX][0-9a-fA-F]+[iu]?/]: r#56
[#489 /0[xX][0-9a-fA-F]+[iu]?/]: r#57
[#490 /0[xX][0-9a-fA-F]+[iu]?/]: r#58
[#491 '=']: s#550
[#492 '=']: s#549
[#493 '!']: s#68
[#493 '&']: s#71
[#493 '(']: s#83
[#493 '*']: s#70
[#493 '-']: s#67
[#493 'array']: s#87
[#493 'atomic']: s#101
[#493 'bitcast']: s#77
[#493 'bool']: s#94
[#493 'f16']: s#96
[#493 'f32']: s#95
[#493 'false']: s#93
[#493 'i32']: s#97
[#493 'mat2x2']: s#106
[#493 'mat2x3']: s#107
[#493 'mat2x4']: s#108
[#493 'mat3x2']: s#109
[#493 'mat3x3']: s#110
[#493 'mat3x4']: s#111
[#493 'mat4x2']: s#112
[#493 'mat4x3']: s#113
[#493 'mat4x4']: s#114
[#493 'ptr']: s#99
[#493 'sampler']: s#131
[#493 'sampler_comparison']: s#132
[#493 'texture_1d']: s#138
[#493 'texture_2d']: s#139
[#493 'texture_2d_array']: s#140
[#493 'texture_3d']: s#141
[#493 'texture_cube']: s#142
[#493 'texture_cube_array']: s#143
[#493 'texture_depth_2d']: s#133
[#493 'texture_depth_2d_array']: s#134
[#493 'texture_depth_cube']: s#135
[#493 'texture_depth_cube_array']: s#136
[#493 'texture_depth_multisampled_2d']: s#137
[#493 'texture_multisampled_2d']: s#144
[#493 'texture_storage_1d']: s#145
[#493 'texture_storage_2d']: s#146
[#493 'texture_storage_2d_array']: s#147
[#493 'texture_storage_3d']: s#148
[#493 'true']: s#92
[#493 'u32']: s#98
[#493 'vec2']: s#103
[#493 'vec3']: s#104
[#493 'vec4']: s#105
[#493 '~']: s#69
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#493 /0[fh]/]: s#118
[#493 /0[iu]?/]: s#115
[#493 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#493 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#493 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#493 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#493 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#493 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#493 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#493 /[1-9][0-9]*[fh]/]: s#119
[#493 /[1-9][0-9]*[iu]?/]: s#116
[#495 '!']: s#68
[#495 '&']: s#71
[#495 '(']: s#83
[#495 '*']: s#70
[#495 '-']: s#67
[#495 'array']: s#87
[#495 'atomic']: s#101
[#495 'bitcast']: s#77
[#495 'bool']: s#94
[#495 'f16']: s#96
[#495 'f32']: s#95
[#495 'false']: s#93
[#495 'i32']: s#97
[#495 'mat2x2']: s#106
[#495 'mat2x3']: s#107
[#495 'mat2x4']: s#108
[#495 'mat3x2']: s#109
[#495 'mat3x3']: s#110
[#495 'mat3x4']: s#111
[#495 'mat4x2']: s#112
[#495 'mat4x3']: s#113
[#495 'mat4x4']: s#114
[#495 'ptr']: s#99
[#495 'sampler']: s#131
[#495 'sampler_comparison']: s#132
[#495 'texture_1d']: s#138
[#495 'texture_2d']: s#139
[#495 'texture_2d_array']: s#140
[#495 'texture_3d']: s#141
[#495 'texture_cube']: s#142
[#495 'texture_cube_array']: s#143
[#495 'texture_depth_2d']: s#133
[#495 'texture_depth_2d_array']: s#134
[#495 'texture_depth_cube']: s#135
[#495 'texture_depth_cube_array']: s#136
[#495 'texture_depth_multisampled_2d']: s#137
[#495 'texture_multisampled_2d']: s#144
[#495 'texture_storage_1d']: s#145
[#495 'texture_storage_2d']: s#146
[#495 'texture_storage_2d_array']: s#147
[#495 'texture_storage_3d']: s#148
[#495 'true']: s#92
[#495 'u32']: s#98
[#495 'vec2']: s#103
[#495 'vec3']: s#104
[#495 'vec4']: s#105
[#495 '~']: s#69
[#495 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#495 /0[fh]/]: s#118
[#495 /0[iu]?/]: s#115
[#495 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#495 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#495 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#495 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#495 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#495 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#495 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#495 /[1-9][0-9]*[fh]/]: s#119
[#495 /[1-9][0-9]*[iu]?/]: s#116
[#496 '(']: s#546
[#497 '@']: s#35
[#498 '!']: s#68
[#498 '&']: s#71
[#498 '(']: s#83
[#498 '*']: s#70
[#498 '-']: s#67
[#498 'array']: s#87
[#498 'atomic']: s#101
[#498 'bitcast']: s#77
[#498 'bool']: s#94
[#498 'f16']: s#96
[#498 'f32']: s#95
[#498 'false']: s#93
[#498 'i32']: s#97
[#498 'mat2x2']: s#106
[#498 'mat2x3']: s#107
[#498 'mat2x4']: s#108
[#498 'mat3x2']: s#109
[#498 'mat3x3']: s#110
[#498 'mat3x4']: s#111
[#498 'mat4x2']: s#112
[#498 'mat4x3']: s#113
[#498 'mat4x4']: s#114
[#498 'ptr']: s#99
[#498 'sampler']: s#131
[#498 'sampler_comparison']: s#132
[#498 'texture_1d']: s#138
[#498 'texture_2d']: s#139
[#498 'texture_2d_array']: s#140
[#498 'texture_3d']: s#141
[#498 'texture_cube']: s#142
[#498 'texture_cube_array']: s#143
[#498 'texture_depth_2d']: s#133
[#498 'texture_depth_2d_array']: s#134
[#498 'texture_depth_cube']: s#135
[#498 'texture_depth_cube_array']: s#136
[#498 'texture_depth_multisampled_2d']: s#137
[#498 'texture_multisampled_2d']: s#144
[#498 'texture_storage_1d']: s#145
[#498 'texture_storage_2d']: s#146
[#498 'texture_storage_2d_array']: s#147
[#498 'texture_storage_3d']: s#148
[#498 'true']: s#92
[#498 'u32']: s#98
[#498 'vec2']: s#103
[#498 'vec3']: s#104
[#498 'vec4']: s#105
[#498 '~']: s#69
[#498 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#498 /0[fh]/]: s#118
[#498 /0[iu]?/]: s#115
[#498 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#498 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#498 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#498 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#498 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#498 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#498 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#498 /[1-9][0-9]*[fh]/]: s#119
[#498 /[1-9][0-9]*[iu]?/]: s#116
[#499 'else']: s#541
[#500 '!']: s#68
[#500 '&']: s#71
[#500 '(']: s#83
[#500 '*']: s#70
[#500 '-']: s#67
[#500 'array']: s#87
[#500 'atomic']: s#101
[#500 'bitcast']: s#77
[#500 'bool']: s#94
[#500 'f16']: s#96
[#500 'f32']: s#95
[#500 'false']: s#93
[#500 'i32']: s#97
[#500 'mat2x2']: s#106
[#500 'mat2x3']: s#107
[#500 'mat2x4']: s#108
[#500 'mat3x2']: s#109
[#500 'mat3x3']: s#110
[#500 'mat3x4']: s#111
[#500 'mat4x2']: s#112
[#500 'mat4x3']: s#113
[#500 'mat4x4']: s#114
[#500 'ptr']: s#99
[#500 'sampler']: s#131
[#500 'sampler_comparison']: s#132
[#500 'texture_1d']: s#138
[#500 'texture_2d']: s#139
[#500 'texture_2d_array']: s#140
[#500 'texture_3d']: s#141
[#500 'texture_cube']: s#142
[#500 'texture_cube_array']: s#143
[#500 'texture_depth_2d']: s#133
[#500 'texture_depth_2d_array']: s#134
[#500 'texture_depth_cube']: s#135
[#500 'texture_depth_cube_array']: s#136
[#500 'texture_depth_multisampled_2d']: s#137
[#500 'texture_multisampled_2d']: s#144
[#500 'texture_storage_1d']: s#145
[#500 'texture_storage_2d']: s#146
[#500 'texture_storage_2d_array']: s#147
[#500 'texture_storage_3d']: s#148
[#500 'true']: s#92
[#500 'u32']: s#98
[#500 'vec2']: s#103
[#500 'vec3']: s#104
[#500 'vec4']: s#105
[#500 '~']: s#69
[#500 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#500 /0[fh]/]: s#118
[#500 /0[iu]?/]: s#115
[#500 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#500 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#500 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#500 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#500 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#500 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#500 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#500 /[1-9][0-9]*[fh]/]: s#119
[#500 /[1-9][0-9]*[iu]?/]: s#116
[#503 'break']: r#59
[#503 'continue']: r#59
[#503 'f16']: r#59
[#503 'texture_multisampled_2d']: r#59
[#504 'break']: r#60
[#504 'continue']: r#60
[#504 'f16']: r#60
[#504 'texture_multisampled_2d']: r#60
[#505 'break']: r#61
[#505 'continue']: r#61
[#505 'f16']: r#61
[#505 'texture_multisampled_2d']: r#61
[#506 'break']: r#62
[#506 'continue']: r#62
[#506 'f16']: r#62
[#506 'texture_multisampled_2d']: r#62
[#507 'break']: r#63
[#507 'continue']: r#63
[#507 'f16']: r#63
[#507 'texture_multisampled_2d']: r#63
[#508 'break']: r#64
[#508 'continue']: r#64
[#508 'f16']: r#64
[#508 'texture_multisampled_2d']: r#64
[#509 'break']: r#65
[#509 'continue']: r#65
[#509 'f16']: r#65
[#509 'texture_multisampled_2d']: r#65
[#510 'break']: r#66
[#510 'continue']: r#66
[#510 'f16']: r#66
[#510 'texture_multisampled_2d']: r#66
[#512 'break']: r#67
[#512 'continue']: r#67
[#512 'f16']: r#67
[#512 'texture_multisampled_2d']: r#67
[#512 EndOfText]: r#67
[#514 ':']: s#536
[#515 ',']: s#535
[#517 ',']: s#518
[#518 '@']: s#35
[#519 '->']: s#531
[#522 '}']: s#529
[#524 'array']: s#296
[#524 'atomic']: s#101
[#524 'bool']: s#94
[#524 'f16']: s#96
[#524 'f32']: s#95
[#524 'i32']: s#97
[#524 'mat2x2']: s#106
[#524 'mat2x3']: s#107
[#524 'mat2x4']: s#108
[#524 'mat3x2']: s#109
[#524 'mat3x3']: s#110
[#524 'mat3x4']: s#111
[#524 'mat4x2']: s#112
[#524 'mat4x3']: s#113
[#524 'mat4x4']: s#114
[#524 'ptr']: s#99
[#524 'sampler']: s#131
[#524 'sampler_comparison']: s#132
[#524 'texture_1d']: s#138
[#524 'texture_2d']: s#139
[#524 'texture_2d_array']: s#140
[#524 'texture_3d']: s#141
[#524 'texture_cube']: s#142
[#524 'texture_cube_array']: s#143
[#524 'texture_depth_2d']: s#133
[#524 'texture_depth_2d_array']: s#134
[#524 'texture_depth_cube']: s#135
[#524 'texture_depth_cube_array']: s#136
[#524 'texture_depth_multisampled_2d']: s#137
[#524 'texture_multisampled_2d']: s#144
[#524 'texture_storage_1d']: s#145
[#524 'texture_storage_2d']: s#146
[#524 'texture_storage_2d_array']: s#147
[#524 'texture_storage_3d']: s#148
[#524 'u32']: s#98
[#524 'vec2']: s#103
[#524 'vec3']: s#104
[#524 'vec4']: s#105
[#524 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#526 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#68
[#527 'f16']: r#69
[#527 'texture_multisampled_2d']: r#69
[#529 EndOfText]: r#70
[#531 '@']: s#35
[#536 'array']: s#296
[#536 'atomic']: s#101
[#536 'bool']: s#94
[#536 'f16']: s#96
[#536 'f32']: s#95
[#536 'i32']: s#97
[#536 'mat2x2']: s#106
[#536 'mat2x3']: s#107
[#536 'mat2x4']: s#108
[#536 'mat3x2']: s#109
[#536 'mat3x3']: s#110
[#536 'mat3x4']: s#111
[#536 'mat4x2']: s#112
[#536 'mat4x3']: s#113
[#536 'mat4x4']: s#114
[#536 'ptr']: s#99
[#536 'sampler']: s#131
[#536 'sampler_comparison']: s#132
[#536 'texture_1d']: s#138
[#536 'texture_2d']: s#139
[#536 'texture_2d_array']: s#140
[#536 'texture_3d']: s#141
[#536 'texture_cube']: s#142
[#536 'texture_cube_array']: s#143
[#536 'texture_depth_2d']: s#133
[#536 'texture_depth_2d_array']: s#134
[#536 'texture_depth_cube']: s#135
[#536 'texture_depth_cube_array']: s#136
[#536 'texture_depth_multisampled_2d']: s#137
[#536 'texture_multisampled_2d']: s#144
[#536 'texture_storage_1d']: s#145
[#536 'texture_storage_2d']: s#146
[#536 'texture_storage_2d_array']: s#147
[#536 'texture_storage_3d']: s#148
[#536 'u32']: s#98
[#536 'vec2']: s#103
[#536 'vec3']: s#104
[#536 'vec4']: s#105
[#536 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#537 '@']: s#35
[#538 'else']: s#582
[#539 'break']: r#71
[#539 'continue']: r#71
[#539 'f16']: r#71
[#539 'texture_multisampled_2d']: r#71
[#540 'else']: s#541
[#541 'if']: s#578
[#542 '@']: s#35
[#543 '{']: s#573
[#545 '@']: s#35
[#546 '&']: s#409
[#546 '(']: s#410
[#546 '*']: s#408
[#546 '_']: s#405
[#546 'array']: s#87
[#546 'atomic']: s#101
[#546 'bool']: s#94
[#546 'const']: s#392
[#546 'f16']: s#96
[#546 'f32']: s#95
[#546 'i32']: s#97
[#546 'let']: s#391
[#546 'mat2x2']: s#106
[#546 'mat2x3']: s#107
[#546 'mat2x4']: s#108
[#546 'mat3x2']: s#109
[#546 'mat3x3']: s#110
[#546 'mat3x4']: s#111
[#546 'mat4x2']: s#112
[#546 'mat4x3']: s#113
[#546 'mat4x4']: s#114
[#546 'ptr']: s#99
[#546 'sampler']: s#131
[#546 'sampler_comparison']: s#132
[#546 'texture_1d']: s#138
[#546 'texture_2d']: s#139
[#546 'texture_2d_array']: s#140
[#546 'texture_3d']: s#141
[#546 'texture_cube']: s#142
[#546 'texture_cube_array']: s#143
[#546 'texture_depth_2d']: s#133
[#546 'texture_depth_2d_array']: s#134
[#546 'texture_depth_cube']: s#135
[#546 'texture_depth_cube_array']: s#136
[#546 'texture_depth_multisampled_2d']: s#137
[#546 'texture_multisampled_2d']: s#144
[#546 'texture_storage_1d']: s#145
[#546 'texture_storage_2d']: s#146
[#546 'texture_storage_2d_array']: s#147
[#546 'texture_storage_3d']: s#148
[#546 'u32']: s#98
[#546 'var']: s#157
[#546 'vec2']: s#103
[#546 'vec3']: s#104
[#546 'vec4']: s#105
[#546 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#547 '@']: s#35
[#549 '!']: s#68
[#549 '&']: s#71
[#549 '(']: s#83
[#549 '*']: s#70
[#549 '-']: s#67
[#549 'array']: s#87
[#549 'atomic']: s#101
[#549 'bitcast']: s#77
[#549 'bool']: s#94
[#549 'f16']: s#96
[#549 'f32']: s#95
[#549 'false']: s#93
[#549 'i32']: s#97
[#549 'mat2x2']: s#106
[#549 'mat2x3']: s#107
[#549 'mat2x4']: s#108
[#549 'mat3x2']: s#109
[#549 'mat3x3']: s#110
[#549 'mat3x4']: s#111
[#549 'mat4x2']: s#112
[#549 'mat4x3']: s#113
[#549 'mat4x4']: s#114
[#549 'ptr']: s#99
[#549 'sampler']: s#131
[#549 'sampler_comparison']: s#132
[#549 'texture_1d']: s#138
[#549 'texture_2d']: s#139
[#549 'texture_2d_array']: s#140
[#549 'texture_3d']: s#141
[#549 'texture_cube']: s#142
[#549 'texture_cube_array']: s#143
[#549 'texture_depth_2d']: s#133
[#549 'texture_depth_2d_array']: s#134
[#549 'texture_depth_cube']: s#135
[#549 'texture_depth_cube_array']: s#136
[#549 'texture_depth_multisampled_2d']: s#137
[#549 'texture_multisampled_2d']: s#144
[#549 'texture_storage_1d']: s#145
[#549 'texture_storage_2d']: s#146
[#549 'texture_storage_2d_array']: s#147
[#549 'texture_storage_3d']: s#148
[#549 'true']: s#92
[#549 'u32']: s#98
[#549 'vec2']: s#103
[#549 'vec3']: s#104
[#549 'vec4']: s#105
[#549 '~']: s#69
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#549 /0[fh]/]: s#118
[#549 /0[iu]?/]: s#115
[#549 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#549 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#549 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#549 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#549 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#549 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#549 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#549 /[1-9][0-9]*[fh]/]: s#119
[#549 /[1-9][0-9]*[iu]?/]: s#116
[#550 '!']: s#68
[#550 '&']: s#71
[#550 '(']: s#83
[#550 '*']: s#70
[#550 '-']: s#67
[#550 'array']: s#87
[#550 'atomic']: s#101
[#550 'bitcast']: s#77
[#550 'bool']: s#94
[#550 'f16']: s#96
[#550 'f32']: s#95
[#550 'false']: s#93
[#550 'i32']: s#97
[#550 'mat2x2']: s#106
[#550 'mat2x3']: s#107
[#550 'mat2x4']: s#108
[#550 'mat3x2']: s#109
[#550 'mat3x3']: s#110
[#550 'mat3x4']: s#111
[#550 'mat4x2']: s#112
[#550 'mat4x3']: s#113
[#550 'mat4x4']: s#114
[#550 'ptr']: s#99
[#550 'sampler']: s#131
[#550 'sampler_comparison']: s#132
[#550 'texture_1d']: s#138
[#550 'texture_2d']: s#139
[#550 'texture_2d_array']: s#140
[#550 'texture_3d']: s#141
[#550 'texture_cube']: s#142
[#550 'texture_cube_array']: s#143
[#550 'texture_depth_2d']: s#133
[#550 'texture_depth_2d_array']: s#134
[#550 'texture_depth_cube']: s#135
[#550 'texture_depth_cube_array']: s#136
[#550 'texture_depth_multisampled_2d']: s#137
[#550 'texture_multisampled_2d']: s#144
[#550 'texture_storage_1d']: s#145
[#550 'texture_storage_2d']: s#146
[#550 'texture_storage_2d_array']: s#147
[#550 'texture_storage_3d']: s#148
[#550 'true']: s#92
[#550 'u32']: s#98
[#550 'vec2']: s#103
[#550 'vec3']: s#104
[#550 'vec4']: s#105
[#550 '~']: s#69
[#550 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#550 /0[fh]/]: s#118
[#550 /0[iu]?/]: s#115
[#550 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#550 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#550 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#550 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#550 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#550 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#550 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#550 /[1-9][0-9]*[fh]/]: s#119
[#550 /[1-9][0-9]*[iu]?/]: s#116
[#555 '>']: s#562
[#556 'read']: s#461
[#556 'read_write']: s#463
[#556 'write']: s#462
[#557 'f16']: r#72
[#557 'texture_multisampled_2d']: r#72
[#558 '!']: s#68
[#558 '&']: s#71
[#558 '(']: s#83
[#558 '*']: s#70
[#558 '-']: s#67
[#558 'array']: s#87
[#558 'atomic']: s#101
[#558 'bitcast']: s#77
[#558 'bool']: s#94
[#558 'f16']: s#96
[#558 'f32']: s#95
[#558 'false']: s#93
[#558 'i32']: s#97
[#558 'mat2x2']: s#106
[#558 'mat2x3']: s#107
[#558 'mat2x4']: s#108
[#558 'mat3x2']: s#109
[#558 'mat3x3']: s#110
[#558 'mat3x4']: s#111
[#558 'mat4x2']: s#112
[#558 'mat4x3']: s#113
[#558 'mat4x4']: s#114
[#558 'ptr']: s#99
[#558 'sampler']: s#131
[#558 'sampler_comparison']: s#132
[#558 'texture_1d']: s#138
[#558 'texture_2d']: s#139
[#558 'texture_2d_array']: s#140
[#558 'texture_3d']: s#141
[#558 'texture_cube']: s#142
[#558 'texture_cube_array']: s#143
[#558 'texture_depth_2d']: s#133
[#558 'texture_depth_2d_array']: s#134
[#558 'texture_depth_cube']: s#135
[#558 'texture_depth_cube_array']: s#136
[#558 'texture_depth_multisampled_2d']: s#137
[#558 'texture_multisampled_2d']: s#144
[#558 'texture_storage_1d']: s#145
[#558 'texture_storage_2d']: s#146
[#558 'texture_storage_2d_array']: s#147
[#558 'texture_storage_3d']: s#148
[#558 'true']: s#92
[#558 'u32']: s#98
[#558 'vec2']: s#103
[#558 'vec3']: s#104
[#558 'vec4']: s#105
[#558 '~']: s#69
[#558 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#558 /0[fh]/]: s#118
[#558 /0[iu]?/]: s#115
[#558 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#558 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#558 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#558 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#558 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#558 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#558 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#558 /[1-9][0-9]*[fh]/]: s#119
[#558 /[1-9][0-9]*[iu]?/]: s#116
[#559 'f16']: r#73
[#559 'texture_multisampled_2d']: r#73
[#560 ',']: s#349
[#565 'break']: r#74
[#565 'continue']: r#74
[#565 'f16']: r#74
[#565 'texture_multisampled_2d']: r#74
[#566 ')']: s#598
[#567 ';']: s#597
[#573 '&']: s#409
[#573 '(']: s#410
[#573 '*']: s#408
[#573 ';']: s#368
[#573 '@']: s#35
[#573 '_']: s#405
[#573 'array']: s#87
[#573 'atomic']: s#101
[#573 'bool']: s#94
[#573 'break']: s#393
[#573 'const']: s#392
[#573 'continue']: s#394
[#573 'discard']: s#379
[#573 'f16']: s#96
[#573 'f32']: s#95
[#573 'i32']: s#97
[#573 'let']: s#391
[#573 'mat2x2']: s#106
[#573 'mat2x3']: s#107
[#573 'mat2x4']: s#108
[#573 'mat3x2']: s#109
[#573 'mat3x3']: s#110
[#573 'mat3x4']: s#111
[#573 'mat4x2']: s#112
[#573 'mat4x3']: s#113
[#573 'mat4x4']: s#114
[#573 'ptr']: s#99
[#573 'return']: s#383
[#573 'sampler']: s#131
[#573 'sampler_comparison']: s#132
[#573 'static_assert']: s#30
[#573 'texture_1d']: s#138
[#573 'texture_2d']: s#139
[#573 'texture_2d_array']: s#140
[#573 'texture_3d']: s#141
[#573 'texture_cube']: s#142
[#573 'texture_cube_array']: s#143
[#573 'texture_depth_2d']: s#133
[#573 'texture_depth_2d_array']: s#134
[#573 'texture_depth_cube']: s#135
[#573 'texture_depth_cube_array']: s#136
[#573 'texture_depth_multisampled_2d']: s#137
[#573 'texture_multisampled_2d']: s#144
[#573 'texture_storage_1d']: s#145
[#573 'texture_storage_2d']: s#146
[#573 'texture_storage_2d_array']: s#147
[#573 'texture_storage_3d']: s#148
[#573 'u32']: s#98
[#573 'var']: s#157
[#573 'vec2']: s#103
[#573 'vec3']: s#104
[#573 'vec4']: s#105
[#573 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#574 'break']: r#75
[#574 'continue']: r#75
[#574 'f16']: r#75
[#574 'texture_multisampled_2d']: r#75
[#575 '{']: s#593
[#577 '@']: s#35
[#578 '!']: s#68
[#578 '&']: s#71
[#578 '(']: s#83
[#578 '*']: s#70
[#578 '-']: s#67
[#578 'array']: s#87
[#578 'atomic']: s#101
[#578 'bitcast']: s#77
[#578 'bool']: s#94
[#578 'f16']: s#96
[#578 'f32']: s#95
[#578 'false']: s#93
[#578 'i32']: s#97
[#578 'mat2x2']: s#106
[#578 'mat2x3']: s#107
[#578 'mat2x4']: s#108
[#578 'mat3x2']: s#109
[#578 'mat3x3']: s#110
[#578 'mat3x4']: s#111
[#578 'mat4x2']: s#112
[#578 'mat4x3']: s#113
[#578 'mat4x4']: s#114
[#578 'ptr']: s#99
[#578 'sampler']: s#131
[#578 'sampler_comparison']: s#132
[#578 'texture_1d']: s#138
[#578 'texture_2d']: s#139
[#578 'texture_2d_array']: s#140
[#578 'texture_3d']: s#141
[#578 'texture_cube']: s#142
[#578 'texture_cube_array']: s#143
[#578 'texture_depth_2d']: s#133
[#578 'texture_depth_2d_array']: s#134
[#578 'texture_depth_cube']: s#135
[#578 'texture_depth_cube_array']: s#136
[#578 'texture_depth_multisampled_2d']: s#137
[#578 'texture_multisampled_2d']: s#144
[#578 'texture_storage_1d']: s#145
[#578 'texture_storage_2d']: s#146
[#578 'texture_storage_2d_array']: s#147
[#578 'texture_storage_3d']: s#148
[#578 'true']: s#92
[#578 'u32']: s#98
[#578 'vec2']: s#103
[#578 'vec3']: s#104
[#578 'vec4']: s#105
[#578 '~']: s#69
[#578 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#578 /0[fh]/]: s#118
[#578 /0[iu]?/]: s#115
[#578 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#578 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#578 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#578 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#578 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#578 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#578 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#578 /[1-9][0-9]*[fh]/]: s#119
[#578 /[1-9][0-9]*[iu]?/]: s#116
[#579 'break']: r#76
[#579 'continue']: r#76
[#579 'f16']: r#76
[#579 'texture_multisampled_2d']: r#76
[#580 'break']: r#77
[#580 'continue']: r#77
[#580 'f16']: r#77
[#580 'texture_multisampled_2d']: r#77
[#581 'break']: r#78
[#581 'continue']: r#78
[#581 'f16']: r#78
[#581 'texture_multisampled_2d']: r#78
[#582 '@']: s#35
[#583 'break']: r#79
[#583 'continue']: r#79
[#583 'f16']: r#79
[#583 'texture_multisampled_2d']: r#79
[#585 'array']: s#296
[#585 'atomic']: s#101
[#585 'bool']: s#94
[#585 'f16']: s#96
[#585 'f32']: s#95
[#585 'i32']: s#97
[#585 'mat2x2']: s#106
[#585 'mat2x3']: s#107
[#585 'mat2x4']: s#108
[#585 'mat3x2']: s#109
[#585 'mat3x3']: s#110
[#585 'mat3x4']: s#111
[#585 'mat4x2']: s#112
[#585 'mat4x3']: s#113
[#585 'mat4x4']: s#114
[#585 'ptr']: s#99
[#585 'sampler']: s#131
[#585 'sampler_comparison']: s#132
[#585 'texture_1d']: s#138
[#585 'texture_2d']: s#139
[#585 'texture_2d_array']: s#140
[#585 'texture_3d']: s#141
[#585 'texture_cube']: s#142
[#585 'texture_cube_array']: s#143
[#585 'texture_depth_2d']: s#133
[#585 'texture_depth_2d_array']: s#134
[#585 'texture_depth_cube']: s#135
[#585 'texture_depth_cube_array']: s#136
[#585 'texture_depth_multisampled_2d']: s#137
[#585 'texture_multisampled_2d']: s#144
[#585 'texture_storage_1d']: s#145
[#585 'texture_storage_2d']: s#146
[#585 'texture_storage_2d_array']: s#147
[#585 'texture_storage_3d']: s#148
[#585 'u32']: s#98
[#585 'vec2']: s#103
[#585 'vec3']: s#104
[#585 'vec4']: s#105
[#585 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#586 'f16']: r#80
[#586 'texture_multisampled_2d']: r#80
[#587 '@']: s#35
[#588 'f16']: r#81
[#588 'texture_multisampled_2d']: r#81
[#590 'break']: r#82
[#590 'continue']: r#82
[#590 'f16']: r#82
[#590 'texture_multisampled_2d']: r#82
[#591 '@']: s#35
[#593 'case']: s#612
[#593 'default']: s#613
[#594 'continuing']: s#606
[#596 '&']: s#409
[#596 '(']: s#410
[#596 '*']: s#408
[#596 ';']: s#368
[#596 '@']: s#35
[#596 '_']: s#405
[#596 'array']: s#87
[#596 'atomic']: s#101
[#596 'bool']: s#94
[#596 'break']: s#393
[#596 'const']: s#392
[#596 'continue']: s#394
[#596 'discard']: s#379
[#596 'f16']: s#96
[#596 'f32']: s#95
[#596 'i32']: s#97
[#596 'let']: s#391
[#596 'mat2x2']: s#106
[#596 'mat2x3']: s#107
[#596 'mat2x4']: s#108
[#596 'mat3x2']: s#109
[#596 'mat3x3']: s#110
[#596 'mat3x4']: s#111
[#596 'mat4x2']: s#112
[#596 'mat4x3']: s#113
[#596 'mat4x4']: s#114
[#596 'ptr']: s#99
[#596 'return']: s#383
[#596 'sampler']: s#131
[#596 'sampler_comparison']: s#132
[#596 'static_assert']: s#30
[#596 'texture_1d']: s#138
[#596 'texture_2d']: s#139
[#596 'texture_2d_array']: s#140
[#596 'texture_3d']: s#141
[#596 'texture_cube']: s#142
[#596 'texture_cube_array']: s#143
[#596 'texture_depth_2d']: s#133
[#596 'texture_depth_2d_array']: s#134
[#596 'texture_depth_cube']: s#135
[#596 'texture_depth_cube_array']: s#136
[#596 'texture_depth_multisampled_2d']: s#137
[#596 'texture_multisampled_2d']: s#144
[#596 'texture_storage_1d']: s#145
[#596 'texture_storage_2d']: s#146
[#596 'texture_storage_2d_array']: s#147
[#596 'texture_storage_3d']: s#148
[#596 'u32']: s#98
[#596 'var']: s#157
[#596 'vec2']: s#103
[#596 'vec3']: s#104
[#596 'vec4']: s#105
[#596 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#597 '!']: s#68
[#597 '&']: s#71
[#597 '(']: s#83
[#597 '*']: s#70
[#597 '-']: s#67
[#597 'array']: s#87
[#597 'atomic']: s#101
[#597 'bitcast']: s#77
[#597 'bool']: s#94
[#597 'f16']: s#96
[#597 'f32']: s#95
[#597 'false']: s#93
[#597 'i32']: s#97
[#597 'mat2x2']: s#106
[#597 'mat2x3']: s#107
[#597 'mat2x4']: s#108
[#597 'mat3x2']: s#109
[#597 'mat3x3']: s#110
[#597 'mat3x4']: s#111
[#597 'mat4x2']: s#112
[#597 'mat4x3']: s#113
[#597 'mat4x4']: s#114
[#597 'ptr']: s#99
[#597 'sampler']: s#131
[#597 'sampler_comparison']: s#132
[#597 'texture_1d']: s#138
[#597 'texture_2d']: s#139
[#597 'texture_2d_array']: s#140
[#597 'texture_3d']: s#141
[#597 'texture_cube']: s#142
[#597 'texture_cube_array']: s#143
[#597 'texture_depth_2d']: s#133
[#597 'texture_depth_2d_array']: s#134
[#597 'texture_depth_cube']: s#135
[#597 'texture_depth_cube_array']: s#136
[#597 'texture_depth_multisampled_2d']: s#137
[#597 'texture_multisampled_2d']: s#144
[#597 'texture_storage_1d']: s#145
[#597 'texture_storage_2d']: s#146
[#597 'texture_storage_2d_array']: s#147
[#597 'texture_storage_3d']: s#148
[#597 'true']: s#92
[#597 'u32']: s#98
[#597 'vec2']: s#103
[#597 'vec3']: s#104
[#597 'vec4']: s#105
[#597 '~']: s#69
[#597 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#597 /0[fh]/]: s#118
[#597 /0[iu]?/]: s#115
[#597 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#597 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#597 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#597 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#597 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#597 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#597 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#597 /[1-9][0-9]*[fh]/]: s#119
[#597 /[1-9][0-9]*[iu]?/]: s#116
[#598 '@']: s#35
[#599 'f16']: r#83
[#599 'texture_multisampled_2d']: r#83
[#600 'break']: r#84
[#600 'continue']: r#84
[#600 'f16']: r#84
[#600 'texture_multisampled_2d']: r#84
[#601 ';']: s#628
[#604 '}']: s#627
[#606 '@']: s#35
[#607 '}']: s#622
[#609 'case']: s#612
[#609 'default']: s#613
[#612 '!']: s#68
[#612 '&']: s#71
[#612 '(']: s#83
[#612 '*']: s#70
[#612 '-']: s#67
[#612 'array']: s#87
[#612 'atomic']: s#101
[#612 'bitcast']: s#77
[#612 'bool']: s#94
[#612 'default']: s#619
[#612 'f16']: s#96
[#612 'f32']: s#95
[#612 'false']: s#93
[#612 'i32']: s#97
[#612 'mat2x2']: s#106
[#612 'mat2x3']: s#107
[#612 'mat2x4']: s#108
[#612 'mat3x2']: s#109
[#612 'mat3x3']: s#110
[#612 'mat3x4']: s#111
[#612 'mat4x2']: s#112
[#612 'mat4x3']: s#113
[#612 'mat4x4']: s#114
[#612 'ptr']: s#99
[#612 'sampler']: s#131
[#612 'sampler_comparison']: s#132
[#612 'texture_1d']: s#138
[#612 'texture_2d']: s#139
[#612 'texture_2d_array']: s#140
[#612 'texture_3d']: s#141
[#612 'texture_cube']: s#142
[#612 'texture_cube_array']: s#143
[#612 'texture_depth_2d']: s#133
[#612 'texture_depth_2d_array']: s#134
[#612 'texture_depth_cube']: s#135
[#612 'texture_depth_cube_array']: s#136
[#612 'texture_depth_multisampled_2d']: s#137
[#612 'texture_multisampled_2d']: s#144
[#612 'texture_storage_1d']: s#145
[#612 'texture_storage_2d']: s#146
[#612 'texture_storage_2d_array']: s#147
[#612 'texture_storage_3d']: s#148
[#612 'true']: s#92
[#612 'u32']: s#98
[#612 'vec2']: s#103
[#612 'vec3']: s#104
[#612 'vec4']: s#105
[#612 '~']: s#69
[#612 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#612 /0[fh]/]: s#118
[#612 /0[iu]?/]: s#115
[#612 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#612 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#612 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#612 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#612 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#612 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#612 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#612 /[1-9][0-9]*[fh]/]: s#119
[#612 /[1-9][0-9]*[iu]?/]: s#116
[#613 ':']: s#616
[#614 'break']: r#85
[#614 'continue']: r#85
[#614 'f16']: r#85
[#614 'texture_multisampled_2d']: r#85
[#615 '@']: s#35
[#617 ':']: s#640
[#618 ',']: s#638
[#622 'break']: r#86
[#622 'continue']: r#86
[#622 'f16']: r#86
[#622 'texture_multisampled_2d']: r#86
[#624 '{']: s#634
[#626 '@']: s#35
[#627 'break']: r#87
[#627 'continue']: r#87
[#627 'f16']: r#87
[#627 'texture_multisampled_2d']: r#87
[#628 '&']: s#409
[#628 '(']: s#410
[#628 '*']: s#408
[#628 '_']: s#405
[#628 'array']: s#87
[#628 'atomic']: s#101
[#628 'bool']: s#94
[#628 'f16']: s#96
[#628 'f32']: s#95
[#628 'i32']: s#97
[#628 'mat2x2']: s#106
[#628 'mat2x3']: s#107
[#628 'mat2x4']: s#108
[#628 'mat3x2']: s#109
[#628 'mat3x3']: s#110
[#628 'mat3x4']: s#111
[#628 'mat4x2']: s#112
[#628 'mat4x3']: s#113
[#628 'mat4x4']: s#114
[#628 'ptr']: s#99
[#628 'sampler']: s#131
[#628 'sampler_comparison']: s#132
[#628 'texture_1d']: s#138
[#628 'texture_2d']: s#139
[#628 'texture_2d_array']: s#140
[#628 'texture_3d']: s#141
[#628 'texture_cube']: s#142
[#628 'texture_cube_array']: s#143
[#628 'texture_depth_2d']: s#133
[#628 'texture_depth_2d_array']: s#134
[#628 'texture_depth_cube']: s#135
[#628 'texture_depth_cube_array']: s#136
[#628 'texture_depth_multisampled_2d']: s#137
[#628 'texture_multisampled_2d']: s#144
[#628 'texture_storage_1d']: s#145
[#628 'texture_storage_2d']: s#146
[#628 'texture_storage_2d_array']: s#147
[#628 'texture_storage_3d']: s#148
[#628 'u32']: s#98
[#628 'vec2']: s#103
[#628 'vec3']: s#104
[#628 'vec4']: s#105
[#628 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#634 '&']: s#409
[#634 '(']: s#410
[#634 '*']: s#408
[#634 ';']: s#368
[#634 '@']: s#35
[#634 '_']: s#405
[#634 'array']: s#87
[#634 'atomic']: s#101
[#634 'bool']: s#94
[#634 'break']: s#393
[#634 'const']: s#392
[#634 'continue']: s#394
[#634 'discard']: s#379
[#634 'f16']: s#96
[#634 'f32']: s#95
[#634 'i32']: s#97
[#634 'let']: s#391
[#634 'mat2x2']: s#106
[#634 'mat2x3']: s#107
[#634 'mat2x4']: s#108
[#634 'mat3x2']: s#109
[#634 'mat3x3']: s#110
[#634 'mat3x4']: s#111
[#634 'mat4x2']: s#112
[#634 'mat4x3']: s#113
[#634 'mat4x4']: s#114
[#634 'ptr']: s#99
[#634 'return']: s#383
[#634 'sampler']: s#131
[#634 'sampler_comparison']: s#132
[#634 'static_assert']: s#30
[#634 'texture_1d']: s#138
[#634 'texture_2d']: s#139
[#634 'texture_2d_array']: s#140
[#634 'texture_3d']: s#141
[#634 'texture_cube']: s#142
[#634 'texture_cube_array']: s#143
[#634 'texture_depth_2d']: s#133
[#634 'texture_depth_2d_array']: s#134
[#634 'texture_depth_cube']: s#135
[#634 'texture_depth_cube_array']: s#136
[#634 'texture_depth_multisampled_2d']: s#137
[#634 'texture_multisampled_2d']: s#144
[#634 'texture_storage_1d']: s#145
[#634 'texture_storage_2d']: s#146
[#634 'texture_storage_2d_array']: s#147
[#634 'texture_storage_3d']: s#148
[#634 'u32']: s#98
[#634 'var']: s#157
[#634 'vec2']: s#103
[#634 'vec3']: s#104
[#634 'vec4']: s#105
[#634 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#635 ',']: s#646
[#637 ',']: s#638
[#638 '!']: s#68
[#638 '&']: s#71
[#638 '(']: s#83
[#638 '*']: s#70
[#638 '-']: s#67
[#638 'array']: s#87
[#638 'atomic']: s#101
[#638 'bitcast']: s#77
[#638 'bool']: s#94
[#638 'default']: s#619
[#638 'f16']: s#96
[#638 'f32']: s#95
[#638 'false']: s#93
[#638 'i32']: s#97
[#638 'mat2x2']: s#106
[#638 'mat2x3']: s#107
[#638 'mat2x4']: s#108
[#638 'mat3x2']: s#109
[#638 'mat3x3']: s#110
[#638 'mat3x4']: s#111
[#638 'mat4x2']: s#112
[#638 'mat4x3']: s#113
[#638 'mat4x4']: s#114
[#638 'ptr']: s#99
[#638 'sampler']: s#131
[#638 'sampler_comparison']: s#132
[#638 'texture_1d']: s#138
[#638 'texture_2d']: s#139
[#638 'texture_2d_array']: s#140
[#638 'texture_3d']: s#141
[#638 'texture_cube']: s#142
[#638 'texture_cube_array']: s#143
[#638 'texture_depth_2d']: s#133
[#638 'texture_depth_2d_array']: s#134
[#638 'texture_depth_cube']: s#135
[#638 'texture_depth_cube_array']: s#136
[#638 'texture_depth_multisampled_2d']: s#137
[#638 'texture_multisampled_2d']: s#144
[#638 'texture_storage_1d']: s#145
[#638 'texture_storage_2d']: s#146
[#638 'texture_storage_2d_array']: s#147
[#638 'texture_storage_3d']: s#148
[#638 'true']: s#92
[#638 'u32']: s#98
[#638 'vec2']: s#103
[#638 'vec3']: s#104
[#638 'vec4']: s#105
[#638 '~']: s#69
[#638 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#638 /0[fh]/]: s#118
[#638 /0[iu]?/]: s#115
[#638 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#638 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#638 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#638 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#638 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#638 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#638 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#638 /[1-9][0-9]*[fh]/]: s#119
[#638 /[1-9][0-9]*[iu]?/]: s#116
[#639 '@']: s#35
[#647 'break']: s#653
[#648 'break']: r#88
[#649 '&']: s#409
[#649 '(']: s#410
[#649 '*']: s#408
[#649 ';']: s#368
[#649 '@']: s#35
[#649 '_']: s#405
[#649 'array']: s#87
[#649 'atomic']: s#101
[#649 'bool']: s#94
[#649 'break']: s#393
[#649 'const']: s#392
[#649 'continue']: s#394
[#649 'discard']: s#379
[#649 'f16']: s#96
[#649 'f32']: s#95
[#649 'i32']: s#97
[#649 'let']: s#391
[#649 'mat2x2']: s#106
[#649 'mat2x3']: s#107
[#649 'mat2x4']: s#108
[#649 'mat3x2']: s#109
[#649 'mat3x3']: s#110
[#649 'mat3x4']: s#111
[#649 'mat4x2']: s#112
[#649 'mat4x3']: s#113
[#649 'mat4x4']: s#114
[#649 'ptr']: s#99
[#649 'return']: s#383
[#649 'sampler']: s#131
[#649 'sampler_comparison']: s#132
[#649 'static_assert']: s#30
[#649 'texture_1d']: s#138
[#649 'texture_2d']: s#139
[#649 'texture_2d_array']: s#140
[#649 'texture_3d']: s#141
[#649 'texture_cube']: s#142
[#649 'texture_cube_array']: s#143
[#649 'texture_depth_2d']: s#133
[#649 'texture_depth_2d_array']: s#134
[#649 'texture_depth_cube']: s#135
[#649 'texture_depth_cube_array']: s#136
[#649 'texture_depth_multisampled_2d']: s#137
[#649 'texture_multisampled_2d']: s#144
[#649 'texture_storage_1d']: s#145
[#649 'texture_storage_2d']: s#146
[#649 'texture_storage_2d_array']: s#147
[#649 'texture_storage_3d']: s#148
[#649 'u32']: s#98
[#649 'var']: s#157
[#649 'vec2']: s#103
[#649 'vec3']: s#104
[#649 'vec4']: s#105
[#649 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#650 'break']: r#89
[#651 '}']: s#655
[#653 'if']: s#654
[#654 '!']: s#68
[#654 '&']: s#71
[#654 '(']: s#83
[#654 '*']: s#70
[#654 '-']: s#67
[#654 'array']: s#87
[#654 'atomic']: s#101
[#654 'bitcast']: s#77
[#654 'bool']: s#94
[#654 'f16']: s#96
[#654 'f32']: s#95
[#654 'false']: s#93
[#654 'i32']: s#97
[#654 'mat2x2']: s#106
[#654 'mat2x3']: s#107
[#654 'mat2x4']: s#108
[#654 'mat3x2']: s#109
[#654 'mat3x3']: s#110
[#654 'mat3x4']: s#111
[#654 'mat4x2']: s#112
[#654 'mat4x3']: s#113
[#654 'mat4x4']: s#114
[#654 'ptr']: s#99
[#654 'sampler']: s#131
[#654 'sampler_comparison']: s#132
[#654 'texture_1d']: s#138
[#654 'texture_2d']: s#139
[#654 'texture_2d_array']: s#140
[#654 'texture_3d']: s#141
[#654 'texture_cube']: s#142
[#654 'texture_cube_array']: s#143
[#654 'texture_depth_2d']: s#133
[#654 'texture_depth_2d_array']: s#134
[#654 'texture_depth_cube']: s#135
[#654 'texture_depth_cube_array']: s#136
[#654 'texture_depth_multisampled_2d']: s#137
[#654 'texture_multisampled_2d']: s#144
[#654 'texture_storage_1d']: s#145
[#654 'texture_storage_2d']: s#146
[#654 'texture_storage_2d_array']: s#147
[#654 'texture_storage_3d']: s#148
[#654 'true']: s#92
[#654 'u32']: s#98
[#654 'vec2']: s#103
[#654 'vec3']: s#104
[#654 'vec4']: s#105
[#654 '~']: s#69
[#654 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#654 /0[fh]/]: s#118
[#654 /0[iu]?/]: s#115
[#654 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#123
[#654 /0[xX][0-9a-fA-F]+[iu]?/]: s#117
[#654 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#125
[#654 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#124
[#654 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#120
[#654 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#122
[#654 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#121
[#654 /[1-9][0-9]*[fh]/]: s#119
[#654 /[1-9][0-9]*[iu]?/]: s#116
[#656 ';']: s#657

=Goto:
[#0 diagnostic_directive]: #5
[#0 enable_directive]: #6
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #34
[#2 function_decl]: #22
[#2 function_decl/0.0]: #29
[#2 function_decl/0.0/0]: #33
[#2 global_constant_decl]: #19
[#2 global_constant_decl/1.0]: #26
[#2 global_constant_decl/1.0/0]: #32
[#2 global_decl]: #16
[#2 global_variable_decl]: #18
[#2 global_variable_decl/0.0]: #24
[#2 global_variable_decl/0.0/0]: #31
[#2 static_assert_statement]: #23
[#2 struct_decl]: #21
[#2 translation_unit/0.1]: #14
[#2 translation_unit/0.1/0]: #15
[#2 type_alias_decl]: #20
[#4 diagnostic_directive]: #5
[#4 enable_directive]: #6
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #13
[#7 diagnostic_control]: #11
[#8 extension_name]: #9
[#12 severity_control_name]: #163
[#16 attribute]: #34
[#16 function_decl]: #22
[#16 function_decl/0.0]: #29
[#16 function_decl/0.0/0]: #33
[#16 global_constant_decl]: #19
[#16 global_constant_decl/1.0]: #26
[#16 global_constant_decl/1.0/0]: #32
[#16 global_decl]: #16
[#16 global_variable_decl]: #18
[#16 global_variable_decl/0.0]: #24
[#16 global_variable_decl/0.0/0]: #31
[#16 static_assert_statement]: #23
[#16 struct_decl]: #21
[#16 translation_unit/0.1/0]: #162
[#16 type_alias_decl]: #20
[#24 variable_decl]: #156
[#25 ident]: #155
[#25 optionally_typed_ident]: #154
[#27 ident]: #152
[#28 ident]: #151
[#29 function_header]: #149
[#30 additive_expression]: #63
[#30 array_type_specifier]: #100
[#30 binary_and_expression]: #60
[#30 binary_or_expression]: #61
[#30 binary_xor_expression]: #62
[#30 bitwise_expression]: #58
[#30 bool_literal]: #82
[#30 call_expression]: #74
[#30 callable]: #79
[#30 decimal_float_literal]: #90
[#30 decimal_int_literal]: #88
[#30 depth_texture_type]: #127
[#30 expression]: #54
[#30 float_literal]: #81
[#30 hex_float_literal]: #91
[#30 hex_int_literal]: #89
[#30 ident]: #73
[#30 int_literal]: #80
[#30 literal]: #75
[#30 mat_prefix]: #86
[#30 multiplicative_expression]: #65
[#30 multisampled_texture_type]: #129
[#30 paren_expression]: #76
[#30 primary_expression]: #72
[#30 relational_expression]: #55
[#30 sampled_texture_type]: #128
[#30 sampler_type]: #126
[#30 shift_expression]: #59
[#30 short_circuit_and_expression]: #57
[#30 short_circuit_or_expression]: #56
[#30 singular_expression]: #66
[#30 storage_texture_type]: #130
[#30 texture_and_sampler_types]: #102
[#30 type_specifier_without_ident]: #84
[#30 unary_expression]: #64
[#30 vec_prefix]: #85
[#34 attribute]: #34
[#34 function_decl/0.0/0]: #53
[#34 global_constant_decl/1.0/0]: #52
[#34 global_variable_decl/0.0/0]: #51
[#40 diagnostic_control]: #234
[#63 additive_operator]: #214
[#65 multiplicative_operator]: #208
[#67 array_type_specifier]: #100
[#67 bool_literal]: #82
[#67 call_expression]: #74
[#67 callable]: #79
[#67 decimal_float_literal]: #90
[#67 decimal_int_literal]: #88
[#67 depth_texture_type]: #127
[#67 float_literal]: #81
[#67 hex_float_literal]: #91
[#67 hex_int_literal]: #89
[#67 ident]: #73
[#67 int_literal]: #80
[#67 literal]: #75
[#67 mat_prefix]: #86
[#67 multisampled_texture_type]: #129
[#67 paren_expression]: #76
[#67 primary_expression]: #72
[#67 sampled_texture_type]: #128
[#67 sampler_type]: #126
[#67 singular_expression]: #66
[#67 storage_texture_type]: #130
[#67 texture_and_sampler_types]: #102
[#67 type_specifier_without_ident]: #84
[#67 unary_expression]: #207
[#67 vec_prefix]: #85
[#68 array_type_specifier]: #100
[#68 bool_literal]: #82
[#68 call_expression]: #74
[#68 callable]: #79
[#68 decimal_float_literal]: #90
[#68 decimal_int_literal]: #88
[#68 depth_texture_type]: #127
[#68 float_literal]: #81
[#68 hex_float_literal]: #91
[#68 hex_int_literal]: #89
[#68 ident]: #73
[#68 int_literal]: #80
[#68 literal]: #75
[#68 mat_prefix]: #86
[#68 multisampled_texture_type]: #129
[#68 paren_expression]: #76
[#68 primary_expression]: #72
[#68 sampled_texture_type]: #128
[#68 sampler_type]: #126
[#68 singular_expression]: #66
[#68 storage_texture_type]: #130
[#68 texture_and_sampler_types]: #102
[#68 type_specifier_without_ident]: #84
[#68 unary_expression]: #206
[#68 vec_prefix]: #85
[#69 array_type_specifier]: #100
[#69 bool_literal]: #82
[#69 call_expression]: #74
[#69 callable]: #79
[#69 decimal_float_literal]: #90
[#69 decimal_int_literal]: #88
[#69 depth_texture_type]: #127
[#69 float_literal]: #81
[#69 hex_float_literal]: #91
[#69 hex_int_literal]: #89
[#69 ident]: #73
[#69 int_literal]: #80
[#69 literal]: #75
[#69 mat_prefix]: #86
[#69 multisampled_texture_type]: #129
[#69 paren_expression]: #76
[#69 primary_expression]: #72
[#69 sampled_texture_type]: #128
[#69 sampler_type]: #126
[#69 singular_expression]: #66
[#69 storage_texture_type]: #130
[#69 texture_and_sampler_types]: #102
[#69 type_specifier_without_ident]: #84
[#69 unary_expression]: #205
[#69 vec_prefix]: #85
[#70 array_type_specifier]: #100
[#70 bool_literal]: #82
[#70 call_expression]: #74
[#70 callable]: #79
[#70 decimal_float_literal]: #90
[#70 decimal_int_literal]: #88
[#70 depth_texture_type]: #127
[#70 float_literal]: #81
[#70 hex_float_literal]: #91
[#70 hex_int_literal]: #89
[#70 ident]: #73
[#70 int_literal]: #80
[#70 literal]: #75
[#70 mat_prefix]: #86
[#70 multisampled_texture_type]: #129
[#70 paren_expression]: #76
[#70 primary_expression]: #72
[#70 sampled_texture_type]: #128
[#70 sampler_type]: #126
[#70 singular_expression]: #66
[#70 storage_texture_type]: #130
[#70 texture_and_sampler_types]: #102
[#70 type_specifier_without_ident]: #84
[#70 unary_expression]: #204
[#70 vec_prefix]: #85
[#71 array_type_specifier]: #100
[#71 bool_literal]: #82
[#71 call_expression]: #74
[#71 callable]: #79
[#71 decimal_float_literal]: #90
[#71 decimal_int_literal]: #88
[#71 depth_texture_type]: #127
[#71 float_literal]: #81
[#71 hex_float_literal]: #91
[#71 hex_int_literal]: #89
[#71 ident]: #73
[#71 int_literal]: #80
[#71 literal]: #75
[#71 mat_prefix]: #86
[#71 multisampled_texture_type]: #129
[#71 paren_expression]: #76
[#71 primary_expression]: #72
[#71 sampled_texture_type]: #128
[#71 sampler_type]: #126
[#71 singular_expression]: #66
[#71 storage_texture_type]: #130
[#71 texture_and_sampler_types]: #102
[#71 type_specifier_without_ident]: #84
[#71 unary_expression]: #203
[#71 vec_prefix]: #85
[#72 component_or_swizzle_specifier]: #200
[#72 singular_expression/0.1]: #199
[#79 argument_expression_list]: #196
[#83 additive_expression]: #63
[#83 array_type_specifier]: #100
[#83 binary_and_expression]: #60
[#83 binary_or_expression]: #61
[#83 binary_xor_expression]: #62
[#83 bitwise_expression]: #58
[#83 bool_literal]: #82
[#83 call_expression]: #74
[#83 callable]: #79
[#83 decimal_float_literal]: #90
[#83 decimal_int_literal]: #88
[#83 depth_texture_type]: #127
[#83 expression]: #195
[#83 float_literal]: #81
[#83 hex_float_literal]: #91
[#83 hex_int_literal]: #89
[#83 ident]: #73
[#83 int_literal]: #80
[#83 literal]: #75
[#83 mat_prefix]: #86
[#83 multiplicative_expression]: #65
[#83 multisampled_texture_type]: #129
[#83 paren_expression]: #76
[#83 primary_expression]: #72
[#83 relational_expression]: #55
[#83 sampled_texture_type]: #128
[#83 sampler_type]: #126
[#83 shift_expression]: #59
[#83 short_circuit_and_expression]: #57
[#83 short_circuit_or_expression]: #56
[#83 singular_expression]: #66
[#83 storage_texture_type]: #130
[#83 texture_and_sampler_types]: #102
[#83 type_specifier_without_ident]: #84
[#83 unary_expression]: #64
[#83 vec_prefix]: #85
[#149 attribute]: #186
[#149 compound_statement]: #183
[#149 compound_statement/0.0]: #184
[#149 compound_statement/0.0/0]: #185
[#150 ident]: #182
[#151 struct_body_decl]: #180
[#153 ident]: #155
[#153 optionally_typed_ident]: #178
[#155 optionally_typed_ident/0.1]: #175
[#156 global_variable_decl/0.2]: #173
[#157 variable_decl/0.1]: #170
[#157 variable_qualifier]: #171
[#169 diagnostic_rule_name]: #345
[#170 ident]: #155
[#170 optionally_typed_ident]: #344
[#172 address_space]: #343
[#174 additive_expression]: #63
[#174 array_type_specifier]: #100
[#174 binary_and_expression]: #60
[#174 binary_or_expression]: #61
[#174 binary_xor_expression]: #62
[#174 bitwise_expression]: #58
[#174 bool_literal]: #82
[#174 call_expression]: #74
[#174 callable]: #79
[#174 decimal_float_literal]: #90
[#174 decimal_int_literal]: #88
[#174 depth_texture_type]: #127
[#174 expression]: #342
[#174 float_literal]: #81
[#174 hex_float_literal]: #91
[#174 hex_int_literal]: #89
[#174 ident]: #73
[#174 int_literal]: #80
[#174 literal]: #75
[#174 mat_prefix]: #86
[#174 multiplicative_expression]: #65
[#174 multisampled_texture_type]: #129
[#174 paren_expression]: #76
[#174 primary_expression]: #72
[#174 relational_expression]: #55
[#174 sampled_texture_type]: #128
[#174 sampler_type]: #126
[#174 shift_expression]: #59
[#174 short_circuit_and_expression]: #57
[#174 short_circuit_or_expression]: #56
[#174 singular_expression]: #66
[#174 storage_texture_type]: #130
[#174 texture_and_sampler_types]: #102
[#174 type_specifier_without_ident]: #84
[#174 unary_expression]: #64
[#174 vec_prefix]: #85
[#176 array_type_specifier]: #100
[#176 depth_texture_type]: #127
[#176 ident]: #292
[#176 mat_prefix]: #295
[#176 multisampled_texture_type]: #129
[#176 sampled_texture_type]: #128
[#176 sampler_type]: #126
[#176 storage_texture_type]: #130
[#176 texture_and_sampler_types]: #102
[#176 type_specifier]: #341
[#176 type_specifier_without_ident]: #293
[#176 vec_prefix]: #294
[#177 additive_expression]: #63
[#177 array_type_specifier]: #100
[#177 binary_and_expression]: #60
[#177 binary_or_expression]: #61
[#177 binary_xor_expression]: #62
[#177 bitwise_expression]: #58
[#177 bool_literal]: #82
[#177 call_expression]: #74
[#177 callable]: #79
[#177 decimal_float_literal]: #90
[#177 decimal_int_literal]: #88
[#177 depth_texture_type]: #127
[#177 expression]: #340
[#177 float_literal]: #81
[#177 hex_float_literal]: #91
[#177 hex_int_literal]: #89
[#177 ident]: #73
[#177 int_literal]: #80
[#177 literal]: #75
[#177 mat_prefix]: #86
[#177 multiplicative_expression]: #65
[#177 multisampled_texture_type]: #129
[#177 paren_expression]: #76
[#177 primary_expression]: #72
[#177 relational_expression]: #55
[#177 sampled_texture_type]: #128
[#177 sampler_type]: #126
[#177 shift_expression]: #59
[#177 short_circuit_and_expression]: #57
[#177 short_circuit_or_expression]: #56
[#177 singular_expression]: #66
[#177 storage_texture_type]: #130
[#177 texture_and_sampler_types]: #102
[#177 type_specifier_without_ident]: #84
[#177 unary_expression]: #64
[#177 vec_prefix]: #85
[#178 global_constant_decl/1.3]: #338
[#179 array_type_specifier]: #100
[#179 depth_texture_type]: #127
[#179 ident]: #292
[#179 mat_prefix]: #295
[#179 multisampled_texture_type]: #129
[#179 sampled_texture_type]: #128
[#179 sampler_type]: #126
[#179 storage_texture_type]: #130
[#179 texture_and_sampler_types]: #102
[#179 type_specifier]: #337
[#179 type_specifier_without_ident]: #293
[#179 vec_prefix]: #294
[#181 attribute]: #336
[#181 struct_member]: #333
[#181 struct_member/0.0]: #334
[#181 struct_member/0.0/0]: #335
[#186 attribute]: #186
[#186 compound_statement/0.0/0]: #330
[#187 texel_format]: #313
[#188 array_type_specifier]: #100
[#188 depth_texture_type]: #127
[#188 ident]: #292
[#188 mat_prefix]: #295
[#188 multisampled_texture_type]: #129
[#188 sampled_texture_type]: #128
[#188 sampler_type]: #126
[#188 storage_texture_type]: #130
[#188 texture_and_sampler_types]: #102
[#188 type_specifier]: #312
[#188 type_specifier_without_ident]: #293
[#188 vec_prefix]: #294
[#189 array_type_specifier]: #100
[#189 depth_texture_type]: #127
[#189 ident]: #292
[#189 mat_prefix]: #295
[#189 multisampled_texture_type]: #129
[#189 sampled_texture_type]: #128
[#189 sampler_type]: #126
[#189 storage_texture_type]: #130
[#189 texture_and_sampler_types]: #102
[#189 type_specifier]: #311
[#189 type_specifier_without_ident]: #293
[#189 vec_prefix]: #294
[#190 array_type_specifier]: #100
[#190 depth_texture_type]: #127
[#190 ident]: #292
[#190 mat_prefix]: #295
[#190 multisampled_texture_type]: #129
[#190 sampled_texture_type]: #128
[#190 sampler_type]: #126
[#190 storage_texture_type]: #130
[#190 texture_and_sampler_types]: #102
[#190 type_specifier]: #310
[#190 type_specifier_without_ident]: #293
[#190 vec_prefix]: #294
[#191 address_space]: #304
[#192 array_type_specifier]: #100
[#192 depth_texture_type]: #127
[#192 ident]: #292
[#192 mat_prefix]: #295
[#192 multisampled_texture_type]: #129
[#192 sampled_texture_type]: #128
[#192 sampler_type]: #126
[#192 storage_texture_type]: #130
[#192 texture_and_sampler_types]: #102
[#192 type_specifier]: #303
[#192 type_specifier_without_ident]: #293
[#192 vec_prefix]: #294
[#193 array_type_specifier]: #100
[#193 depth_texture_type]: #127
[#193 ident]: #292
[#193 mat_prefix]: #295
[#193 multisampled_texture_type]: #129
[#193 sampled_texture_type]: #128
[#193 sampler_type]: #126
[#193 storage_texture_type]: #130
[#193 texture_and_sampler_types]: #102
[#193 type_specifier]: #302
[#193 type_specifier_without_ident]: #293
[#193 vec_prefix]: #294
[#194 array_type_specifier]: #100
[#194 depth_texture_type]: #127
[#194 ident]: #292
[#194 mat_prefix]: #295
[#194 multisampled_texture_type]: #129
[#194 sampled_texture_type]: #128
[#194 sampler_type]: #126
[#194 storage_texture_type]: #130
[#194 texture_and_sampler_types]: #102
[#194 type_specifier]: #301
[#194 type_specifier_without_ident]: #293
[#194 vec_prefix]: #294
[#197 additive_expression]: #63
[#197 argument_expression_list/0.1]: #297
[#197 array_type_specifier]: #100
[#197 binary_and_expression]: #60
[#197 binary_or_expression]: #61
[#197 binary_xor_expression]: #62
[#197 bitwise_expression]: #58
[#197 bool_literal]: #82
[#197 call_expression]: #74
[#197 callable]: #79
[#197 decimal_float_literal]: #90
[#197 decimal_int_literal]: #88
[#197 depth_texture_type]: #127
[#197 expression]: #299
[#197 expression_comma_list]: #298
[#197 float_literal]: #81
[#197 hex_float_literal]: #91
[#197 hex_int_literal]: #89
[#197 ident]: #73
[#197 int_literal]: #80
[#197 literal]: #75
[#197 mat_prefix]: #86
[#197 multiplicative_expression]: #65
[#197 multisampled_texture_type]: #129
[#197 paren_expression]: #76
[#197 primary_expression]: #72
[#197 relational_expression]: #55
[#197 sampled_texture_type]: #128
[#197 sampler_type]: #126
[#197 shift_expression]: #59
[#197 short_circuit_and_expression]: #57
[#197 short_circuit_or_expression]: #56
[#197 singular_expression]: #66
[#197 storage_texture_type]: #130
[#197 texture_and_sampler_types]: #102
[#197 type_specifier_without_ident]: #84
[#197 unary_expression]: #64
[#197 vec_prefix]: #85
[#198 array_type_specifier]: #100
[#198 depth_texture_type]: #127
[#198 ident]: #292
[#198 mat_prefix]: #295
[#198 multisampled_texture_type]: #129
[#198 sampled_texture_type]: #128
[#198 sampler_type]: #126
[#198 storage_texture_type]: #130
[#198 texture_and_sampler_types]: #102
[#198 type_specifier]: #291
[#198 type_specifier_without_ident]: #293
[#198 vec_prefix]: #294
[#201 additive_expression]: #63
[#201 array_type_specifier]: #100
[#201 binary_and_expression]: #60
[#201 binary_or_expression]: #61
[#201 binary_xor_expression]: #62
[#201 bitwise_expression]: #58
[#201 bool_literal]: #82
[#201 call_expression]: #74
[#201 callable]: #79
[#201 decimal_float_literal]: #90
[#201 decimal_int_literal]: #88
[#201 depth_texture_type]: #127
[#201 expression]: #290
[#201 float_literal]: #81
[#201 hex_float_literal]: #91
[#201 hex_int_literal]: #89
[#201 ident]: #73
[#201 int_literal]: #80
[#201 literal]: #75
[#201 mat_prefix]: #86
[#201 multiplicative_expression]: #65
[#201 multisampled_texture_type]: #129
[#201 paren_expression]: #76
[#201 primary_expression]: #72
[#201 relational_expression]: #55
[#201 sampled_texture_type]: #128
[#201 sampler_type]: #126
[#201 shift_expression]: #59
[#201 short_circuit_and_expression]: #57
[#201 short_circuit_or_expression]: #56
[#201 singular_expression]: #66
[#201 storage_texture_type]: #130
[#201 texture_and_sampler_types]: #102
[#201 type_specifier_without_ident]: #84
[#201 unary_expression]: #64
[#201 vec_prefix]: #85
[#202 member_ident]: #279
[#202 swizzle_name]: #280
[#208 array_type_specifier]: #100
[#208 bool_literal]: #82
[#208 call_expression]: #74
[#208 callable]: #79
[#208 decimal_float_literal]: #90
[#208 decimal_int_literal]: #88
[#208 depth_texture_type]: #127
[#208 float_literal]: #81
[#208 hex_float_literal]: #91
[#208 hex_int_literal]: #89
[#208 ident]: #73
[#208 int_literal]: #80
[#208 literal]: #75
[#208 mat_prefix]: #86
[#208 multisampled_texture_type]: #129
[#208 paren_expression]: #76
[#208 primary_expression]: #72
[#208 sampled_texture_type]: #128
[#208 sampler_type]: #126
[#208 singular_expression]: #66
[#208 storage_texture_type]: #130
[#208 texture_and_sampler_types]: #102
[#208 type_specifier_without_ident]: #84
[#208 unary_expression]: #278
[#208 vec_prefix]: #85
[#212 array_type_specifier]: #100
[#212 bool_literal]: #82
[#212 call_expression]: #74
[#212 callable]: #79
[#212 decimal_float_literal]: #90
[#212 decimal_int_literal]: #88
[#212 depth_texture_type]: #127
[#212 float_literal]: #81
[#212 hex_float_literal]: #91
[#212 hex_int_literal]: #89
[#212 ident]: #73
[#212 int_literal]: #80
[#212 literal]: #75
[#212 mat_prefix]: #86
[#212 multisampled_texture_type]: #129
[#212 paren_expression]: #76
[#212 primary_expression]: #72
[#212 sampled_texture_type]: #128
[#212 sampler_type]: #126
[#212 singular_expression]: #66
[#212 storage_texture_type]: #130
[#212 texture_and_sampler_types]: #102
[#212 type_specifier_without_ident]: #84
[#212 unary_expression]: #277
[#212 vec_prefix]: #85
[#213 array_type_specifier]: #100
[#213 bool_literal]: #82
[#213 call_expression]: #74
[#213 callable]: #79
[#213 decimal_float_literal]: #90
[#213 decimal_int_literal]: #88
[#213 depth_texture_type]: #127
[#213 float_literal]: #81
[#213 hex_float_literal]: #91
[#213 hex_int_literal]: #89
[#213 ident]: #73
[#213 int_literal]: #80
[#213 literal]: #75
[#213 mat_prefix]: #86
[#213 multisampled_texture_type]: #129
[#213 paren_expression]: #76
[#213 primary_expression]: #72
[#213 sampled_texture_type]: #128
[#213 sampler_type]: #126
[#213 singular_expression]: #66
[#213 storage_texture_type]: #130
[#213 texture_and_sampler_types]: #102
[#213 type_specifier_without_ident]: #84
[#213 unary_expression]: #276
[#213 vec_prefix]: #85
[#214 array_type_specifier]: #100
[#214 bool_literal]: #82
[#214 call_expression]: #74
[#214 callable]: #79
[#214 decimal_float_literal]: #90
[#214 decimal_int_literal]: #88
[#214 depth_texture_type]: #127
[#214 float_literal]: #81
[#214 hex_float_literal]: #91
[#214 hex_int_literal]: #89
[#214 ident]: #73
[#214 int_literal]: #80
[#214 literal]: #75
[#214 mat_prefix]: #86
[#214 multiplicative_expression]: #274
[#214 multisampled_texture_type]: #129
[#214 paren_expression]: #76
[#214 primary_expression]: #72
[#214 sampled_texture_type]: #128
[#214 sampler_type]: #126
[#214 singular_expression]: #66
[#214 storage_texture_type]: #130
[#214 texture_and_sampler_types]: #102
[#214 type_specifier_without_ident]: #84
[#214 unary_expression]: #275
[#214 vec_prefix]: #85
[#217 array_type_specifier]: #100
[#217 bool_literal]: #82
[#217 call_expression]: #74
[#217 callable]: #79
[#217 decimal_float_literal]: #90
[#217 decimal_int_literal]: #88
[#217 depth_texture_type]: #127
[#217 float_literal]: #81
[#217 hex_float_literal]: #91
[#217 hex_int_literal]: #89
[#217 ident]: #73
[#217 int_literal]: #80
[#217 literal]: #75
[#217 mat_prefix]: #86
[#217 multisampled_texture_type]: #129
[#217 paren_expression]: #76
[#217 primary_expression]: #72
[#217 sampled_texture_type]: #128
[#217 sampler_type]: #126
[#217 singular_expression]: #66
[#217 storage_texture_type]: #130
[#217 texture_and_sampler_types]: #102
[#217 type_specifier_without_ident]: #84
[#217 unary_expression]: #273
[#217 vec_prefix]: #85
[#218 array_type_specifier]: #100
[#218 bool_literal]: #82
[#218 call_expression]: #74
[#218 callable]: #79
[#218 decimal_float_literal]: #90
[#218 decimal_int_literal]: #88
[#218 depth_texture_type]: #127
[#218 float_literal]: #81
[#218 hex_float_literal]: #91
[#218 hex_int_literal]: #89
[#218 ident]: #73
[#218 int_literal]: #80
[#218 literal]: #75
[#218 mat_prefix]: #86
[#218 multisampled_texture_type]: #129
[#218 paren_expression]: #76
[#218 primary_expression]: #72
[#218 sampled_texture_type]: #128
[#218 sampler_type]: #126
[#218 singular_expression]: #66
[#218 storage_texture_type]: #130
[#218 texture_and_sampler_types]: #102
[#218 type_specifier_without_ident]: #84
[#218 unary_expression]: #272
[#218 vec_prefix]: #85
[#219 array_type_specifier]: #100
[#219 bool_literal]: #82
[#219 call_expression]: #74
[#219 callable]: #79
[#219 decimal_float_literal]: #90
[#219 decimal_int_literal]: #88
[#219 depth_texture_type]: #127
[#219 float_literal]: #81
[#219 hex_float_literal]: #91
[#219 hex_int_literal]: #89
[#219 ident]: #73
[#219 int_literal]: #80
[#219 literal]: #75
[#219 mat_prefix]: #86
[#219 multisampled_texture_type]: #129
[#219 paren_expression]: #76
[#219 primary_expression]: #72
[#219 sampled_texture_type]: #128
[#219 sampler_type]: #126
[#219 singular_expression]: #66
[#219 storage_texture_type]: #130
[#219 texture_and_sampler_types]: #102
[#219 type_specifier_without_ident]: #84
[#219 unary_expression]: #271
[#219 vec_prefix]: #85
[#220 additive_expression]: #63
[#220 array_type_specifier]: #100
[#220 bool_literal]: #82
[#220 call_expression]: #74
[#220 callable]: #79
[#220 decimal_float_literal]: #90
[#220 decimal_int_literal]: #88
[#220 depth_texture_type]: #127
[#220 float_literal]: #81
[#220 hex_float_literal]: #91
[#220 hex_int_literal]: #89
[#220 ident]: #73
[#220 int_literal]: #80
[#220 literal]: #75
[#220 mat_prefix]: #86
[#220 multiplicative_expression]: #65
[#220 multisampled_texture_type]: #129
[#220 paren_expression]: #76
[#220 primary_expression]: #72
[#220 sampled_texture_type]: #128
[#220 sampler_type]: #126
[#220 shift_expression]: #270
[#220 singular_expression]: #66
[#220 storage_texture_type]: #130
[#220 texture_and_sampler_types]: #102
[#220 type_specifier_without_ident]: #84
[#220 unary_expression]: #263
[#220 vec_prefix]: #85
[#221 additive_expression]: #63
[#221 array_type_specifier]: #100
[#221 bool_literal]: #82
[#221 call_expression]: #74
[#221 callable]: #79
[#221 decimal_float_literal]: #90
[#221 decimal_int_literal]: #88
[#221 depth_texture_type]: #127
[#221 float_literal]: #81
[#221 hex_float_literal]: #91
[#221 hex_int_literal]: #89
[#221 ident]: #73
[#221 int_literal]: #80
[#221 literal]: #75
[#221 mat_prefix]: #86
[#221 multiplicative_expression]: #65
[#221 multisampled_texture_type]: #129
[#221 paren_expression]: #76
[#221 primary_expression]: #72
[#221 sampled_texture_type]: #128
[#221 sampler_type]: #126
[#221 shift_expression]: #269
[#221 singular_expression]: #66
[#221 storage_texture_type]: #130
[#221 texture_and_sampler_types]: #102
[#221 type_specifier_without_ident]: #84
[#221 unary_expression]: #263
[#221 vec_prefix]: #85
[#222 additive_expression]: #63
[#222 array_type_specifier]: #100
[#222 bool_literal]: #82
[#222 call_expression]: #74
[#222 callable]: #79
[#222 decimal_float_literal]: #90
[#222 decimal_int_literal]: #88
[#222 depth_texture_type]: #127
[#222 float_literal]: #81
[#222 hex_float_literal]: #91
[#222 hex_int_literal]: #89
[#222 ident]: #73
[#222 int_literal]: #80
[#222 literal]: #75
[#222 mat_prefix]: #86
[#222 multiplicative_expression]: #65
[#222 multisampled_texture_type]: #129
[#222 paren_expression]: #76
[#222 primary_expression]: #72
[#222 sampled_texture_type]: #128
[#222 sampler_type]: #126
[#222 shift_expression]: #268
[#222 singular_expression]: #66
[#222 storage_texture_type]: #130
[#222 texture_and_sampler_types]: #102
[#222 type_specifier_without_ident]: #84
[#222 unary_expression]: #263
[#222 vec_prefix]: #85
[#223 additive_expression]: #63
[#223 array_type_specifier]: #100
[#223 bool_literal]: #82
[#223 call_expression]: #74
[#223 callable]: #79
[#223 decimal_float_literal]: #90
[#223 decimal_int_literal]: #88
[#223 depth_texture_type]: #127
[#223 float_literal]: #81
[#223 hex_float_literal]: #91
[#223 hex_int_literal]: #89
[#223 ident]: #73
[#223 int_literal]: #80
[#223 literal]: #75
[#223 mat_prefix]: #86
[#223 multiplicative_expression]: #65
[#223 multisampled_texture_type]: #129
[#223 paren_expression]: #76
[#223 primary_expression]: #72
[#223 sampled_texture_type]: #128
[#223 sampler_type]: #126
[#223 shift_expression]: #267
[#223 singular_expression]: #66
[#223 storage_texture_type]: #130
[#223 texture_and_sampler_types]: #102
[#223 type_specifier_without_ident]: #84
[#223 unary_expression]: #263
[#223 vec_prefix]: #85
[#224 additive_expression]: #63
[#224 array_type_specifier]: #100
[#224 bool_literal]: #82
[#224 call_expression]: #74
[#224 callable]: #79
[#224 decimal_float_literal]: #90
[#224 decimal_int_literal]: #88
[#224 depth_texture_type]: #127
[#224 float_literal]: #81
[#224 hex_float_literal]: #91
[#224 hex_int_literal]: #89
[#224 ident]: #73
[#224 int_literal]: #80
[#224 literal]: #75
[#224 mat_prefix]: #86
[#224 multiplicative_expression]: #65
[#224 multisampled_texture_type]: #129
[#224 paren_expression]: #76
[#224 primary_expression]: #72
[#224 sampled_texture_type]: #128
[#224 sampler_type]: #126
[#224 shift_expression]: #266
[#224 singular_expression]: #66
[#224 storage_texture_type]: #130
[#224 texture_and_sampler_types]: #102
[#224 type_specifier_without_ident]: #84
[#224 unary_expression]: #263
[#224 vec_prefix]: #85
[#225 additive_expression]: #63
[#225 array_type_specifier]: #100
[#225 bool_literal]: #82
[#225 call_expression]: #74
[#225 callable]: #79
[#225 decimal_float_literal]: #90
[#225 decimal_int_literal]: #88
[#225 depth_texture_type]: #127
[#225 float_literal]: #81
[#225 hex_float_literal]: #91
[#225 hex_int_literal]: #89
[#225 ident]: #73
[#225 int_literal]: #80
[#225 literal]: #75
[#225 mat_prefix]: #86
[#225 multiplicative_expression]: #65
[#225 multisampled_texture_type]: #129
[#225 paren_expression]: #76
[#225 primary_expression]: #72
[#225 sampled_texture_type]: #128
[#225 sampler_type]: #126
[#225 shift_expression]: #265
[#225 singular_expression]: #66
[#225 storage_texture_type]: #130
[#225 texture_and_sampler_types]: #102
[#225 type_specifier_without_ident]: #84
[#225 unary_expression]: #263
[#225 vec_prefix]: #85
[#226 additive_expression]: #63
[#226 array_type_specifier]: #100
[#226 bool_literal]: #82
[#226 call_expression]: #74
[#226 callable]: #79
[#226 decimal_float_literal]: #90
[#226 decimal_int_literal]: #88
[#226 depth_texture_type]: #127
[#226 float_literal]: #81
[#226 hex_float_literal]: #91
[#226 hex_int_literal]: #89
[#226 ident]: #73
[#226 int_literal]: #80
[#226 literal]: #75
[#226 mat_prefix]: #86
[#226 multiplicative_expression]: #65
[#226 multisampled_texture_type]: #129
[#226 paren_expression]: #76
[#226 primary_expression]: #72
[#226 relational_expression]: #264
[#226 sampled_texture_type]: #128
[#226 sampler_type]: #126
[#226 shift_expression]: #59
[#226 singular_expression]: #66
[#226 storage_texture_type]: #130
[#226 texture_and_sampler_types]: #102
[#226 type_specifier_without_ident]: #84
[#226 unary_expression]: #263
[#226 vec_prefix]: #85
[#227 additive_expression]: #63
[#227 array_type_specifier]: #100
[#227 bool_literal]: #82
[#227 call_expression]: #74
[#227 callable]: #79
[#227 decimal_float_literal]: #90
[#227 decimal_int_literal]: #88
[#227 depth_texture_type]: #127
[#227 float_literal]: #81
[#227 hex_float_literal]: #91
[#227 hex_int_literal]: #89
[#227 ident]: #73
[#227 int_literal]: #80
[#227 literal]: #75
[#227 mat_prefix]: #86
[#227 multiplicative_expression]: #65
[#227 multisampled_texture_type]: #129
[#227 paren_expression]: #76
[#227 primary_expression]: #72
[#227 relational_expression]: #262
[#227 sampled_texture_type]: #128
[#227 sampler_type]: #126
[#227 shift_expression]: #59
[#227 singular_expression]: #66
[#227 storage_texture_type]: #130
[#227 texture_and_sampler_types]: #102
[#227 type_specifier_without_ident]: #84
[#227 unary_expression]: #263
[#227 vec_prefix]: #85
[#228 additive_expression]: #63
[#228 array_type_specifier]: #100
[#228 binary_and_expression]: #60
[#228 binary_or_expression]: #61
[#228 binary_xor_expression]: #62
[#228 bitwise_expression]: #58
[#228 bool_literal]: #82
[#228 call_expression]: #74
[#228 callable]: #79
[#228 decimal_float_literal]: #90
[#228 decimal_int_literal]: #88
[#228 depth_texture_type]: #127
[#228 expression]: #261
[#228 float_literal]: #81
[#228 hex_float_literal]: #91
[#228 hex_int_literal]: #89
[#228 ident]: #73
[#228 int_literal]: #80
[#228 literal]: #75
[#228 mat_prefix]: #86
[#228 multiplicative_expression]: #65
[#228 multisampled_texture_type]: #129
[#228 paren_expression]: #76
[#228 primary_expression]: #72
[#228 relational_expression]: #55
[#228 sampled_texture_type]: #128
[#228 sampler_type]: #126
[#228 shift_expression]: #59
[#228 short_circuit_and_expression]: #57
[#228 short_circuit_or_expression]: #56
[#228 singular_expression]: #66
[#228 storage_texture_type]: #130
[#228 texture_and_sampler_types]: #102
[#228 type_specifier_without_ident]: #84
[#228 unary_expression]: #64
[#228 vec_prefix]: #85
[#229 additive_expression]: #63
[#229 array_type_specifier]: #100
[#229 binary_and_expression]: #60
[#229 binary_or_expression]: #61
[#229 binary_xor_expression]: #62
[#229 bitwise_expression]: #58
[#229 bool_literal]: #82
[#229 call_expression]: #74
[#229 callable]: #79
[#229 decimal_float_literal]: #90
[#229 decimal_int_literal]: #88
[#229 depth_texture_type]: #127
[#229 expression]: #260
[#229 float_literal]: #81
[#229 hex_float_literal]: #91
[#229 hex_int_literal]: #89
[#229 ident]: #73
[#229 int_literal]: #80
[#229 literal]: #75
[#229 mat_prefix]: #86
[#229 multiplicative_expression]: #65
[#229 multisampled_texture_type]: #129
[#229 paren_expression]: #76
[#229 primary_expression]: #72
[#229 relational_expression]: #55
[#229 sampled_texture_type]: #128
[#229 sampler_type]: #126
[#229 shift_expression]: #59
[#229 short_circuit_and_expression]: #57
[#229 short_circuit_or_expression]: #56
[#229 singular_expression]: #66
[#229 storage_texture_type]: #130
[#229 texture_and_sampler_types]: #102
[#229 type_specifier_without_ident]: #84
[#229 unary_expression]: #64
[#229 vec_prefix]: #85
[#230 additive_expression]: #63
[#230 array_type_specifier]: #100
[#230 binary_and_expression]: #60
[#230 binary_or_expression]: #61
[#230 binary_xor_expression]: #62
[#230 bitwise_expression]: #58
[#230 bool_literal]: #82
[#230 call_expression]: #74
[#230 callable]: #79
[#230 decimal_float_literal]: #90
[#230 decimal_int_literal]: #88
[#230 depth_texture_type]: #127
[#230 expression]: #259
[#230 float_literal]: #81
[#230 hex_float_literal]: #91
[#230 hex_int_literal]: #89
[#230 ident]: #73
[#230 int_literal]: #80
[#230 literal]: #75
[#230 mat_prefix]: #86
[#230 multiplicative_expression]: #65
[#230 multisampled_texture_type]: #129
[#230 paren_expression]: #76
[#230 primary_expression]: #72
[#230 relational_expression]: #55
[#230 sampled_texture_type]: #128
[#230 sampler_type]: #126
[#230 shift_expression]: #59
[#230 short_circuit_and_expression]: #57
[#230 short_circuit_or_expression]: #56
[#230 singular_expression]: #66
[#230 storage_texture_type]: #130
[#230 texture_and_sampler_types]: #102
[#230 type_specifier_without_ident]: #84
[#230 unary_expression]: #64
[#230 vec_prefix]: #85
[#231 interpolation_type_name]: #255
[#232 additive_expression]: #63
[#232 array_type_specifier]: #100
[#232 binary_and_expression]: #60
[#232 binary_or_expression]: #61
[#232 binary_xor_expression]: #62
[#232 bitwise_expression]: #58
[#232 bool_literal]: #82
[#232 call_expression]: #74
[#232 callable]: #79
[#232 decimal_float_literal]: #90
[#232 decimal_int_literal]: #88
[#232 depth_texture_type]: #127
[#232 expression]: #254
[#232 float_literal]: #81
[#232 hex_float_literal]: #91
[#232 hex_int_literal]: #89
[#232 ident]: #73
[#232 int_literal]: #80
[#232 literal]: #75
[#232 mat_prefix]: #86
[#232 multiplicative_expression]: #65
[#232 multisampled_texture_type]: #129
[#232 paren_expression]: #76
[#232 primary_expression]: #72
[#232 relational_expression]: #55
[#232 sampled_texture_type]: #128
[#232 sampler_type]: #126
[#232 shift_expression]: #59
[#232 short_circuit_and_expression]: #57
[#232 short_circuit_or_expression]: #56
[#232 singular_expression]: #66
[#232 storage_texture_type]: #130
[#232 texture_and_sampler_types]: #102
[#232 type_specifier_without_ident]: #84
[#232 unary_expression]: #64
[#232 vec_prefix]: #85
[#233 additive_expression]: #63
[#233 array_type_specifier]: #100
[#233 binary_and_expression]: #60
[#233 binary_or_expression]: #61
[#233 binary_xor_expression]: #62
[#233 bitwise_expression]: #58
[#233 bool_literal]: #82
[#233 call_expression]: #74
[#233 callable]: #79
[#233 decimal_float_literal]: #90
[#233 decimal_int_literal]: #88
[#233 depth_texture_type]: #127
[#233 expression]: #253
[#233 float_literal]: #81
[#233 hex_float_literal]: #91
[#233 hex_int_literal]: #89
[#233 ident]: #73
[#233 int_literal]: #80
[#233 literal]: #75
[#233 mat_prefix]: #86
[#233 multiplicative_expression]: #65
[#233 multisampled_texture_type]: #129
[#233 paren_expression]: #76
[#233 primary_expression]: #72
[#233 relational_expression]: #55
[#233 sampled_texture_type]: #128
[#233 sampler_type]: #126
[#233 shift_expression]: #59
[#233 short_circuit_and_expression]: #57
[#233 short_circuit_or_expression]: #56
[#233 singular_expression]: #66
[#233 storage_texture_type]: #130
[#233 texture_and_sampler_types]: #102
[#233 type_specifier_without_ident]: #84
[#233 unary_expression]: #64
[#233 vec_prefix]: #85
[#235 builtin_value_name]: #240
[#236 additive_expression]: #63
[#236 array_type_specifier]: #100
[#236 binary_and_expression]: #60
[#236 binary_or_expression]: #61
[#236 binary_xor_expression]: #62
[#236 bitwise_expression]: #58
[#236 bool_literal]: #82
[#236 call_expression]: #74
[#236 callable]: #79
[#236 decimal_float_literal]: #90
[#236 decimal_int_literal]: #88
[#236 depth_texture_type]: #127
[#236 expression]: #239
[#236 float_literal]: #81
[#236 hex_float_literal]: #91
[#236 hex_int_literal]: #89
[#236 ident]: #73
[#236 int_literal]: #80
[#236 literal]: #75
[#236 mat_prefix]: #86
[#236 multiplicative_expression]: #65
[#236 multisampled_texture_type]: #129
[#236 paren_expression]: #76
[#236 primary_expression]: #72
[#236 relational_expression]: #55
[#236 sampled_texture_type]: #128
[#236 sampler_type]: #126
[#236 shift_expression]: #59
[#236 short_circuit_and_expression]: #57
[#236 short_circuit_or_expression]: #56
[#236 singular_expression]: #66
[#236 storage_texture_type]: #130
[#236 texture_and_sampler_types]: #102
[#236 type_specifier_without_ident]: #84
[#236 unary_expression]: #64
[#236 vec_prefix]: #85
[#237 additive_expression]: #63
[#237 array_type_specifier]: #100
[#237 binary_and_expression]: #60
[#237 binary_or_expression]: #61
[#237 binary_xor_expression]: #62
[#237 bitwise_expression]: #58
[#237 bool_literal]: #82
[#237 call_expression]: #74
[#237 callable]: #79
[#237 decimal_float_literal]: #90
[#237 decimal_int_literal]: #88
[#237 depth_texture_type]: #127
[#237 expression]: #238
[#237 float_literal]: #81
[#237 hex_float_literal]: #91
[#237 hex_int_literal]: #89
[#237 ident]: #73
[#237 int_literal]: #80
[#237 literal]: #75
[#237 mat_prefix]: #86
[#237 multiplicative_expression]: #65
[#237 multisampled_texture_type]: #129
[#237 paren_expression]: #76
[#237 primary_expression]: #72
[#237 relational_expression]: #55
[#237 sampled_texture_type]: #128
[#237 sampler_type]: #126
[#237 shift_expression]: #59
[#237 short_circuit_and_expression]: #57
[#237 short_circuit_or_expression]: #56
[#237 singular_expression]: #66
[#237 storage_texture_type]: #130
[#237 texture_and_sampler_types]: #102
[#237 type_specifier_without_ident]: #84
[#237 unary_expression]: #64
[#237 vec_prefix]: #85
[#238 attrib_end]: #441
[#238 attrib_end/0.0]: #348
[#239 attrib_end]: #440
[#239 attrib_end/0.0]: #348
[#240 attrib_end]: #439
[#240 attrib_end/0.0]: #348
[#253 attrib_end]: #438
[#253 attrib_end/0.0]: #348
[#254 attrib_end]: #437
[#254 attrib_end/0.0]: #348
[#255 attrib_end]: #435
[#255 attrib_end/0.0]: #348
[#259 attrib_end]: #434
[#259 attrib_end/0.0]: #348
[#260 attrib_end]: #433
[#260 attrib_end/0.0]: #348
[#261 attrib_end]: #431
[#261 attrib_end/0.0]: #348
[#274 multiplicative_operator]: #208
[#279 component_or_swizzle_specifier]: #430
[#279 component_or_swizzle_specifier/1.2]: #429
[#280 component_or_swizzle_specifier]: #428
[#280 component_or_swizzle_specifier/2.2]: #427
[#299 expression_comma_list/0.1]: #420
[#299 expression_comma_list/0.1/0]: #421
[#299 expression_comma_list/0.1/0/0.0]: #422
[#303 array_type_specifier/0.3]: #416
[#331 array_type_specifier]: #100
[#331 assignment_statement]: #395
[#331 attribute]: #406
[#331 break_statement]: #377
[#331 callable]: #389
[#331 compound_statement]: #381
[#331 compound_statement/0.0]: #184
[#331 compound_statement/0.0/0]: #185
[#331 compound_statement/0.2]: #365
[#331 compound_statement/0.2/0]: #366
[#331 continue_statement]: #378
[#331 core_lhs_expression]: #407
[#331 decrement_statement]: #397
[#331 depth_texture_type]: #127
[#331 for_statement]: #373
[#331 for_statement/0.0]: #387
[#331 for_statement/0.0/0]: #401
[#331 func_call_statement]: #375
[#331 ident]: #403
[#331 if_statement]: #370
[#331 if_statement/0.0]: #384
[#331 if_statement/0.0/0]: #398
[#331 increment_statement]: #396
[#331 lhs_expression]: #404
[#331 loop_statement]: #372
[#331 loop_statement/0.0]: #386
[#331 loop_statement/0.0/0]: #400
[#331 mat_prefix]: #86
[#331 multisampled_texture_type]: #129
[#331 return_statement]: #369
[#331 sampled_texture_type]: #128
[#331 sampler_type]: #126
[#331 statement]: #367
[#331 static_assert_statement]: #382
[#331 storage_texture_type]: #130
[#331 switch_statement]: #371
[#331 switch_statement/0.0]: #385
[#331 switch_statement/0.0/0]: #399
[#331 texture_and_sampler_types]: #102
[#331 type_specifier_without_ident]: #84
[#331 variable_decl]: #390
[#331 variable_statement]: #376
[#331 variable_updating_statement]: #380
[#331 vec_prefix]: #85
[#331 while_statement]: #374
[#331 while_statement/0.0]: #388
[#331 while_statement/0.0/0]: #402
[#332 attribute]: #364
[#332 function_header/0.3]: #359
[#332 param]: #361
[#332 param/0.0]: #362
[#332 param/0.0/0]: #363
[#332 param_list]: #360
[#333 struct_body_decl/0.2]: #355
[#333 struct_body_decl/0.2/0]: #356
[#333 struct_body_decl/0.2/0/0.0]: #357
[#334 member_ident]: #354
[#336 attribute]: #336
[#336 struct_member/0.0/0]: #353
[#339 additive_expression]: #63
[#339 array_type_specifier]: #100
[#339 binary_and_expression]: #60
[#339 binary_or_expression]: #61
[#339 binary_xor_expression]: #62
[#339 bitwise_expression]: #58
[#339 bool_literal]: #82
[#339 call_expression]: #74
[#339 callable]: #79
[#339 decimal_float_literal]: #90
[#339 decimal_int_literal]: #88
[#339 depth_texture_type]: #127
[#339 expression]: #352
[#339 float_literal]: #81
[#339 hex_float_literal]: #91
[#339 hex_int_literal]: #89
[#339 ident]: #73
[#339 int_literal]: #80
[#339 literal]: #75
[#339 mat_prefix]: #86
[#339 multiplicative_expression]: #65
[#339 multisampled_texture_type]: #129
[#339 paren_expression]: #76
[#339 primary_expression]: #72
[#339 relational_expression]: #55
[#339 sampled_texture_type]: #128
[#339 sampler_type]: #126
[#339 shift_expression]: #59
[#339 short_circuit_and_expression]: #57
[#339 short_circuit_or_expression]: #56
[#339 singular_expression]: #66
[#339 storage_texture_type]: #130
[#339 texture_and_sampler_types]: #102
[#339 type_specifier_without_ident]: #84
[#339 unary_expression]: #64
[#339 vec_prefix]: #85
[#343 variable_qualifier/0.2]: #350
[#345 attrib_end]: #347
[#345 attrib_end/0.0]: #348
[#351 access_mode]: #525
[#355 struct_body_decl/0.3]: #522
[#357 struct_body_decl/0.2/0]: #521
[#357 struct_body_decl/0.2/0/0.0]: #357
[#358 attribute]: #336
[#358 struct_member]: #520
[#358 struct_member/0.0]: #334
[#358 struct_member/0.0/0]: #335
[#361 param_list/0.1]: #515
[#361 param_list/0.1/0]: #516
[#361 param_list/0.1/0/0.0]: #517
[#362 ident]: #514
[#364 attribute]: #364
[#364 param/0.0/0]: #513
[#367 array_type_specifier]: #100
[#367 assignment_statement]: #395
[#367 attribute]: #406
[#367 break_statement]: #377
[#367 callable]: #389
[#367 compound_statement]: #381
[#367 compound_statement/0.0]: #184
[#367 compound_statement/0.0/0]: #185
[#367 compound_statement/0.2/0]: #511
[#367 continue_statement]: #378
[#367 core_lhs_expression]: #407
[#367 decrement_statement]: #397
[#367 depth_texture_type]: #127
[#367 for_statement]: #373
[#367 for_statement/0.0]: #387
[#367 for_statement/0.0/0]: #401
[#367 func_call_statement]: #375
[#367 ident]: #403
[#367 if_statement]: #370
[#367 if_statement/0.0]: #384
[#367 if_statement/0.0/0]: #398
[#367 increment_statement]: #396
[#367 lhs_expression]: #404
[#367 loop_statement]: #372
[#367 loop_statement/0.0]: #386
[#367 loop_statement/0.0/0]: #400
[#367 mat_prefix]: #86
[#367 multisampled_texture_type]: #129
[#367 return_statement]: #369
[#367 sampled_texture_type]: #128
[#367 sampler_type]: #126
[#367 statement]: #367
[#367 static_assert_statement]: #382
[#367 storage_texture_type]: #130
[#367 switch_statement]: #371
[#367 switch_statement/0.0]: #385
[#367 switch_statement/0.0/0]: #399
[#367 texture_and_sampler_types]: #102
[#367 type_specifier_without_ident]: #84
[#367 variable_decl]: #390
[#367 variable_statement]: #376
[#367 variable_updating_statement]: #380
[#367 vec_prefix]: #85
[#367 while_statement]: #374
[#367 while_statement/0.0]: #388
[#367 while_statement/0.0/0]: #402
[#383 additive_expression]: #63
[#383 array_type_specifier]: #100
[#383 binary_and_expression]: #60
[#383 binary_or_expression]: #61
[#383 binary_xor_expression]: #62
[#383 bitwise_expression]: #58
[#383 bool_literal]: #82
[#383 call_expression]: #74
[#383 callable]: #79
[#383 decimal_float_literal]: #90
[#383 decimal_int_literal]: #88
[#383 depth_texture_type]: #127
[#383 expression]: #502
[#383 float_literal]: #81
[#383 hex_float_literal]: #91
[#383 hex_int_literal]: #89
[#383 ident]: #73
[#383 int_literal]: #80
[#383 literal]: #75
[#383 mat_prefix]: #86
[#383 multiplicative_expression]: #65
[#383 multisampled_texture_type]: #129
[#383 paren_expression]: #76
[#383 primary_expression]: #72
[#383 relational_expression]: #55
[#383 return_statement/0.1]: #501
[#383 sampled_texture_type]: #128
[#383 sampler_type]: #126
[#383 shift_expression]: #59
[#383 short_circuit_and_expression]: #57
[#383 short_circuit_or_expression]: #56
[#383 singular_expression]: #66
[#383 storage_texture_type]: #130
[#383 texture_and_sampler_types]: #102
[#383 type_specifier_without_ident]: #84
[#383 unary_expression]: #64
[#383 vec_prefix]: #85
[#384 if_clause]: #499
[#389 argument_expression_list]: #494
[#391 ident]: #155
[#391 optionally_typed_ident]: #492
[#392 ident]: #155
[#392 optionally_typed_ident]: #491
[#404 assignment_statement/0.1]: #476
[#404 compound_assignment_operator]: #480
[#406 attribute]: #406
[#406 compound_statement/0.0/0]: #330
[#406 for_statement/0.0/0]: #473
[#406 if_statement/0.0/0]: #470
[#406 loop_statement/0.0/0]: #472
[#406 switch_statement/0.0/0]: #471
[#406 while_statement/0.0/0]: #474
[#407 component_or_swizzle_specifier]: #469
[#407 lhs_expression/0.1]: #468
[#408 core_lhs_expression]: #407
[#408 ident]: #465
[#408 lhs_expression]: #467
[#409 core_lhs_expression]: #407
[#409 ident]: #465
[#409 lhs_expression]: #466
[#410 core_lhs_expression]: #407
[#410 ident]: #465
[#410 lhs_expression]: #464
[#411 access_mode]: #460
[#415 array_type_specifier]: #100
[#415 depth_texture_type]: #127
[#415 ident]: #292
[#415 mat_prefix]: #295
[#415 multisampled_texture_type]: #129
[#415 sampled_texture_type]: #128
[#415 sampler_type]: #126
[#415 storage_texture_type]: #130
[#415 texture_and_sampler_types]: #102
[#415 type_specifier]: #459
[#415 type_specifier_without_ident]: #293
[#415 vec_prefix]: #294
[#417 additive_expression]: #455
[#417 array_type_specifier]: #100
[#417 binary_and_expression]: #60
[#417 binary_or_expression]: #61
[#417 binary_xor_expression]: #62
[#417 bitwise_expression]: #456
[#417 bool_literal]: #82
[#417 call_expression]: #74
[#417 callable]: #79
[#417 decimal_float_literal]: #90
[#417 decimal_int_literal]: #88
[#417 depth_texture_type]: #127
[#417 element_count_expression]: #454
[#417 float_literal]: #81
[#417 hex_float_literal]: #91
[#417 hex_int_literal]: #89
[#417 ident]: #73
[#417 int_literal]: #80
[#417 literal]: #75
[#417 mat_prefix]: #86
[#417 multiplicative_expression]: #65
[#417 multisampled_texture_type]: #129
[#417 paren_expression]: #76
[#417 primary_expression]: #72
[#417 sampled_texture_type]: #128
[#417 sampler_type]: #126
[#417 singular_expression]: #66
[#417 storage_texture_type]: #130
[#417 texture_and_sampler_types]: #102
[#417 type_specifier_without_ident]: #84
[#417 unary_expression]: #457
[#417 vec_prefix]: #85
[#420 expression_comma_list/0.2]: #452
[#422 expression_comma_list/0.1/0]: #451
[#422 expression_comma_list/0.1/0/0.0]: #422
[#423 additive_expression]: #63
[#423 array_type_specifier]: #100
[#423 binary_and_expression]: #60
[#423 binary_or_expression]: #61
[#423 binary_xor_expression]: #62
[#423 bitwise_expression]: #58
[#423 bool_literal]: #82
[#423 call_expression]: #74
[#423 callable]: #79
[#423 decimal_float_literal]: #90
[#423 decimal_int_literal]: #88
[#423 depth_texture_type]: #127
[#423 expression]: #450
[#423 float_literal]: #81
[#423 hex_float_literal]: #91
[#423 hex_int_literal]: #89
[#423 ident]: #73
[#423 int_literal]: #80
[#423 literal]: #75
[#423 mat_prefix]: #86
[#423 multiplicative_expression]: #65
[#423 multisampled_texture_type]: #129
[#423 paren_expression]: #76
[#423 primary_expression]: #72
[#423 relational_expression]: #55
[#423 sampled_texture_type]: #128
[#423 sampler_type]: #126
[#423 shift_expression]: #59
[#423 short_circuit_and_expression]: #57
[#423 short_circuit_or_expression]: #56
[#423 singular_expression]: #66
[#423 storage_texture_type]: #130
[#423 texture_and_sampler_types]: #102
[#423 type_specifier_without_ident]: #84
[#423 unary_expression]: #64
[#423 vec_prefix]: #85
[#425 paren_expression]: #449
[#426 component_or_swizzle_specifier]: #448
[#426 component_or_swizzle_specifier/0.3]: #447
[#432 additive_expression]: #63
[#432 array_type_specifier]: #100
[#432 binary_and_expression]: #60
[#432 binary_or_expression]: #61
[#432 binary_xor_expression]: #62
[#432 bitwise_expression]: #58
[#432 bool_literal]: #82
[#432 call_expression]: #74
[#432 callable]: #79
[#432 decimal_float_literal]: #90
[#432 decimal_int_literal]: #88
[#432 depth_texture_type]: #127
[#432 expression]: #446
[#432 float_literal]: #81
[#432 hex_float_literal]: #91
[#432 hex_int_literal]: #89
[#432 ident]: #73
[#432 int_literal]: #80
[#432 literal]: #75
[#432 mat_prefix]: #86
[#432 multiplicative_expression]: #65
[#432 multisampled_texture_type]: #129
[#432 paren_expression]: #76
[#432 primary_expression]: #72
[#432 relational_expression]: #55
[#432 sampled_texture_type]: #128
[#432 sampler_type]: #126
[#432 shift_expression]: #59
[#432 short_circuit_and_expression]: #57
[#432 short_circuit_or_expression]: #56
[#432 singular_expression]: #66
[#432 storage_texture_type]: #130
[#432 texture_and_sampler_types]: #102
[#432 type_specifier_without_ident]: #84
[#432 unary_expression]: #64
[#432 vec_prefix]: #85
[#436 interpolation_sample_name]: #442
[#442 attrib_end]: #559
[#442 attrib_end/0.0]: #348
[#446 attrib_end]: #557
[#446 attrib_end/0.0]: #348
[#455 additive_operator]: #214
[#459 type_specifier_without_ident/7.5]: #555
[#475 additive_expression]: #63
[#475 array_type_specifier]: #100
[#475 binary_and_expression]: #60
[#475 binary_or_expression]: #61
[#475 binary_xor_expression]: #62
[#475 bitwise_expression]: #58
[#475 bool_literal]: #82
[#475 call_expression]: #74
[#475 callable]: #79
[#475 decimal_float_literal]: #90
[#475 decimal_int_literal]: #88
[#475 depth_texture_type]: #127
[#475 expression]: #552
[#475 float_literal]: #81
[#475 hex_float_literal]: #91
[#475 hex_int_literal]: #89
[#475 ident]: #73
[#475 int_literal]: #80
[#475 literal]: #75
[#475 mat_prefix]: #86
[#475 multiplicative_expression]: #65
[#475 multisampled_texture_type]: #129
[#475 paren_expression]: #76
[#475 primary_expression]: #72
[#475 relational_expression]: #55
[#475 sampled_texture_type]: #128
[#475 sampler_type]: #126
[#475 shift_expression]: #59
[#475 short_circuit_and_expression]: #57
[#475 short_circuit_or_expression]: #56
[#475 singular_expression]: #66
[#475 storage_texture_type]: #130
[#475 texture_and_sampler_types]: #102
[#475 type_specifier_without_ident]: #84
[#475 unary_expression]: #64
[#475 vec_prefix]: #85
[#476 additive_expression]: #63
[#476 array_type_specifier]: #100
[#476 binary_and_expression]: #60
[#476 binary_or_expression]: #61
[#476 binary_xor_expression]: #62
[#476 bitwise_expression]: #58
[#476 bool_literal]: #82
[#476 call_expression]: #74
[#476 callable]: #79
[#476 decimal_float_literal]: #90
[#476 decimal_int_literal]: #88
[#476 depth_texture_type]: #127
[#476 expression]: #551
[#476 float_literal]: #81
[#476 hex_float_literal]: #91
[#476 hex_int_literal]: #89
[#476 ident]: #73
[#476 int_literal]: #80
[#476 literal]: #75
[#476 mat_prefix]: #86
[#476 multiplicative_expression]: #65
[#476 multisampled_texture_type]: #129
[#476 paren_expression]: #76
[#476 primary_expression]: #72
[#476 relational_expression]: #55
[#476 sampled_texture_type]: #128
[#476 sampler_type]: #126
[#476 shift_expression]: #59
[#476 short_circuit_and_expression]: #57
[#476 short_circuit_or_expression]: #56
[#476 singular_expression]: #66
[#476 storage_texture_type]: #130
[#476 texture_and_sampler_types]: #102
[#476 type_specifier_without_ident]: #84
[#476 unary_expression]: #64
[#476 vec_prefix]: #85
[#493 additive_expression]: #63
[#493 array_type_specifier]: #100
[#493 binary_and_expression]: #60
[#493 binary_or_expression]: #61
[#493 binary_xor_expression]: #62
[#493 bitwise_expression]: #58
[#493 bool_literal]: #82
[#493 call_expression]: #74
[#493 callable]: #79
[#493 decimal_float_literal]: #90
[#493 decimal_int_literal]: #88
[#493 depth_texture_type]: #127
[#493 expression]: #548
[#493 float_literal]: #81
[#493 hex_float_literal]: #91
[#493 hex_int_literal]: #89
[#493 ident]: #73
[#493 int_literal]: #80
[#493 literal]: #75
[#493 mat_prefix]: #86
[#493 multiplicative_expression]: #65
[#493 multisampled_texture_type]: #129
[#493 paren_expression]: #76
[#493 primary_expression]: #72
[#493 relational_expression]: #55
[#493 sampled_texture_type]: #128
[#493 sampler_type]: #126
[#493 shift_expression]: #59
[#493 short_circuit_and_expression]: #57
[#493 short_circuit_or_expression]: #56
[#493 singular_expression]: #66
[#493 storage_texture_type]: #130
[#493 texture_and_sampler_types]: #102
[#493 type_specifier_without_ident]: #84
[#493 unary_expression]: #64
[#493 vec_prefix]: #85
[#495 additive_expression]: #63
[#495 array_type_specifier]: #100
[#495 binary_and_expression]: #60
[#495 binary_or_expression]: #61
[#495 binary_xor_expression]: #62
[#495 bitwise_expression]: #58
[#495 bool_literal]: #82
[#495 call_expression]: #74
[#495 callable]: #79
[#495 decimal_float_literal]: #90
[#495 decimal_int_literal]: #88
[#495 depth_texture_type]: #127
[#495 expression]: #547
[#495 float_literal]: #81
[#495 hex_float_literal]: #91
[#495 hex_int_literal]: #89
[#495 ident]: #73
[#495 int_literal]: #80
[#495 literal]: #75
[#495 mat_prefix]: #86
[#495 multiplicative_expression]: #65
[#495 multisampled_texture_type]: #129
[#495 paren_expression]: #76
[#495 primary_expression]: #72
[#495 relational_expression]: #55
[#495 sampled_texture_type]: #128
[#495 sampler_type]: #126
[#495 shift_expression]: #59
[#495 short_circuit_and_expression]: #57
[#495 short_circuit_or_expression]: #56
[#495 singular_expression]: #66
[#495 storage_texture_type]: #130
[#495 texture_and_sampler_types]: #102
[#495 type_specifier_without_ident]: #84
[#495 unary_expression]: #64
[#495 vec_prefix]: #85
[#497 attribute]: #545
[#497 loop_statement/0.2]: #543
[#497 loop_statement/0.2/0]: #544
[#498 additive_expression]: #63
[#498 array_type_specifier]: #100
[#498 binary_and_expression]: #60
[#498 binary_or_expression]: #61
[#498 binary_xor_expression]: #62
[#498 bitwise_expression]: #58
[#498 bool_literal]: #82
[#498 call_expression]: #74
[#498 callable]: #79
[#498 decimal_float_literal]: #90
[#498 decimal_int_literal]: #88
[#498 depth_texture_type]: #127
[#498 expression]: #542
[#498 float_literal]: #81
[#498 hex_float_literal]: #91
[#498 hex_int_literal]: #89
[#498 ident]: #73
[#498 int_literal]: #80
[#498 literal]: #75
[#498 mat_prefix]: #86
[#498 multiplicative_expression]: #65
[#498 multisampled_texture_type]: #129
[#498 paren_expression]: #76
[#498 primary_expression]: #72
[#498 relational_expression]: #55
[#498 sampled_texture_type]: #128
[#498 sampler_type]: #126
[#498 shift_expression]: #59
[#498 short_circuit_and_expression]: #57
[#498 short_circuit_or_expression]: #56
[#498 singular_expression]: #66
[#498 storage_texture_type]: #130
[#498 texture_and_sampler_types]: #102
[#498 type_specifier_without_ident]: #84
[#498 unary_expression]: #64
[#498 vec_prefix]: #85
[#499 else_if_clause]: #540
[#499 if_statement/0.2]: #538
[#499 if_statement/0.2/0]: #539
[#500 additive_expression]: #63
[#500 array_type_specifier]: #100
[#500 binary_and_expression]: #60
[#500 binary_or_expression]: #61
[#500 binary_xor_expression]: #62
[#500 bitwise_expression]: #58
[#500 bool_literal]: #82
[#500 call_expression]: #74
[#500 callable]: #79
[#500 decimal_float_literal]: #90
[#500 decimal_int_literal]: #88
[#500 depth_texture_type]: #127
[#500 expression]: #537
[#500 float_literal]: #81
[#500 hex_float_literal]: #91
[#500 hex_int_literal]: #89
[#500 ident]: #73
[#500 int_literal]: #80
[#500 literal]: #75
[#500 mat_prefix]: #86
[#500 multiplicative_expression]: #65
[#500 multisampled_texture_type]: #129
[#500 paren_expression]: #76
[#500 primary_expression]: #72
[#500 relational_expression]: #55
[#500 sampled_texture_type]: #128
[#500 sampler_type]: #126
[#500 shift_expression]: #59
[#500 short_circuit_and_expression]: #57
[#500 short_circuit_or_expression]: #56
[#500 singular_expression]: #66
[#500 storage_texture_type]: #130
[#500 texture_and_sampler_types]: #102
[#500 type_specifier_without_ident]: #84
[#500 unary_expression]: #64
[#500 vec_prefix]: #85
[#515 param_list/0.2]: #534
[#517 param_list/0.1/0]: #533
[#517 param_list/0.1/0/0.0]: #517
[#518 attribute]: #364
[#518 param]: #532
[#518 param/0.0]: #362
[#518 param/0.0/0]: #363
[#519 function_header/0.5]: #530
[#524 array_type_specifier]: #100
[#524 depth_texture_type]: #127
[#524 ident]: #292
[#524 mat_prefix]: #295
[#524 multisampled_texture_type]: #129
[#524 sampled_texture_type]: #128
[#524 sampler_type]: #126
[#524 storage_texture_type]: #130
[#524 texture_and_sampler_types]: #102
[#524 type_specifier]: #528
[#524 type_specifier_without_ident]: #293
[#524 vec_prefix]: #294
[#531 attribute]: #587
[#531 function_header/0.5/0.1]: #585
[#531 function_header/0.5/0.1/0]: #586
[#536 array_type_specifier]: #100
[#536 depth_texture_type]: #127
[#536 ident]: #292
[#536 mat_prefix]: #295
[#536 multisampled_texture_type]: #129
[#536 sampled_texture_type]: #128
[#536 sampler_type]: #126
[#536 storage_texture_type]: #130
[#536 texture_and_sampler_types]: #102
[#536 type_specifier]: #584
[#536 type_specifier_without_ident]: #293
[#536 vec_prefix]: #294
[#537 attribute]: #186
[#537 compound_statement]: #583
[#537 compound_statement/0.0]: #184
[#537 compound_statement/0.0/0]: #185
[#538 else_clause]: #581
[#538 if_statement/0.3]: #580
[#540 else_if_clause]: #540
[#540 if_statement/0.2/0]: #579
[#542 attribute]: #577
[#542 switch_body]: #574
[#542 switch_body/0.0]: #575
[#542 switch_body/0.0/0]: #576
[#545 attribute]: #545
[#545 loop_statement/0.2/0]: #572
[#546 array_type_specifier]: #100
[#546 assignment_statement]: #395
[#546 callable]: #389
[#546 core_lhs_expression]: #407
[#546 decrement_statement]: #397
[#546 depth_texture_type]: #127
[#546 for_header]: #566
[#546 for_header/0.0]: #567
[#546 for_init]: #568
[#546 func_call_statement]: #571
[#546 ident]: #403
[#546 increment_statement]: #396
[#546 lhs_expression]: #404
[#546 mat_prefix]: #86
[#546 multisampled_texture_type]: #129
[#546 sampled_texture_type]: #128
[#546 sampler_type]: #126
[#546 storage_texture_type]: #130
[#546 texture_and_sampler_types]: #102
[#546 type_specifier_without_ident]: #84
[#546 variable_decl]: #390
[#546 variable_statement]: #569
[#546 variable_updating_statement]: #570
[#546 vec_prefix]: #85
[#547 attribute]: #186
[#547 compound_statement]: #565
[#547 compound_statement/0.0]: #184
[#547 compound_statement/0.0/0]: #185
[#549 additive_expression]: #63
[#549 array_type_specifier]: #100
[#549 binary_and_expression]: #60
[#549 binary_or_expression]: #61
[#549 binary_xor_expression]: #62
[#549 bitwise_expression]: #58
[#549 bool_literal]: #82
[#549 call_expression]: #74
[#549 callable]: #79
[#549 decimal_float_literal]: #90
[#549 decimal_int_literal]: #88
[#549 depth_texture_type]: #127
[#549 expression]: #564
[#549 float_literal]: #81
[#549 hex_float_literal]: #91
[#549 hex_int_literal]: #89
[#549 ident]: #73
[#549 int_literal]: #80
[#549 literal]: #75
[#549 mat_prefix]: #86
[#549 multiplicative_expression]: #65
[#549 multisampled_texture_type]: #129
[#549 paren_expression]: #76
[#549 primary_expression]: #72
[#549 relational_expression]: #55
[#549 sampled_texture_type]: #128
[#549 sampler_type]: #126
[#549 shift_expression]: #59
[#549 short_circuit_and_expression]: #57
[#549 short_circuit_or_expression]: #56
[#549 singular_expression]: #66
[#549 storage_texture_type]: #130
[#549 texture_and_sampler_types]: #102
[#549 type_specifier_without_ident]: #84
[#549 unary_expression]: #64
[#549 vec_prefix]: #85
[#550 additive_expression]: #63
[#550 array_type_specifier]: #100
[#550 binary_and_expression]: #60
[#550 binary_or_expression]: #61
[#550 binary_xor_expression]: #62
[#550 bitwise_expression]: #58
[#550 bool_literal]: #82
[#550 call_expression]: #74
[#550 callable]: #79
[#550 decimal_float_literal]: #90
[#550 decimal_int_literal]: #88
[#550 depth_texture_type]: #127
[#550 expression]: #563
[#550 float_literal]: #81
[#550 hex_float_literal]: #91
[#550 hex_int_literal]: #89
[#550 ident]: #73
[#550 int_literal]: #80
[#550 literal]: #75
[#550 mat_prefix]: #86
[#550 multiplicative_expression]: #65
[#550 multisampled_texture_type]: #129
[#550 paren_expression]: #76
[#550 primary_expression]: #72
[#550 relational_expression]: #55
[#550 sampled_texture_type]: #128
[#550 sampler_type]: #126
[#550 shift_expression]: #59
[#550 short_circuit_and_expression]: #57
[#550 short_circuit_or_expression]: #56
[#550 singular_expression]: #66
[#550 storage_texture_type]: #130
[#550 texture_and_sampler_types]: #102
[#550 type_specifier_without_ident]: #84
[#550 unary_expression]: #64
[#550 vec_prefix]: #85
[#556 access_mode]: #561
[#558 additive_expression]: #63
[#558 array_type_specifier]: #100
[#558 binary_and_expression]: #60
[#558 binary_or_expression]: #61
[#558 binary_xor_expression]: #62
[#558 bitwise_expression]: #58
[#558 bool_literal]: #82
[#558 call_expression]: #74
[#558 callable]: #79
[#558 decimal_float_literal]: #90
[#558 decimal_int_literal]: #88
[#558 depth_texture_type]: #127
[#558 expression]: #560
[#558 float_literal]: #81
[#558 hex_float_literal]: #91
[#558 hex_int_literal]: #89
[#558 ident]: #73
[#558 int_literal]: #80
[#558 literal]: #75
[#558 mat_prefix]: #86
[#558 multiplicative_expression]: #65
[#558 multisampled_texture_type]: #129
[#558 paren_expression]: #76
[#558 primary_expression]: #72
[#558 relational_expression]: #55
[#558 sampled_texture_type]: #128
[#558 sampler_type]: #126
[#558 shift_expression]: #59
[#558 short_circuit_and_expression]: #57
[#558 short_circuit_or_expression]: #56
[#558 singular_expression]: #66
[#558 storage_texture_type]: #130
[#558 texture_and_sampler_types]: #102
[#558 type_specifier_without_ident]: #84
[#558 unary_expression]: #64
[#558 vec_prefix]: #85
[#560 attrib_end]: #599
[#560 attrib_end/0.0]: #348
[#573 array_type_specifier]: #100
[#573 assignment_statement]: #395
[#573 attribute]: #406
[#573 break_statement]: #377
[#573 callable]: #389
[#573 compound_statement]: #381
[#573 compound_statement/0.0]: #184
[#573 compound_statement/0.0/0]: #185
[#573 continue_statement]: #378
[#573 core_lhs_expression]: #407
[#573 decrement_statement]: #397
[#573 depth_texture_type]: #127
[#573 for_statement]: #373
[#573 for_statement/0.0]: #387
[#573 for_statement/0.0/0]: #401
[#573 func_call_statement]: #375
[#573 ident]: #403
[#573 if_statement]: #370
[#573 if_statement/0.0]: #384
[#573 if_statement/0.0/0]: #398
[#573 increment_statement]: #396
[#573 lhs_expression]: #404
[#573 loop_statement]: #372
[#573 loop_statement/0.0]: #386
[#573 loop_statement/0.0/0]: #400
[#573 loop_statement/0.4]: #594
[#573 loop_statement/0.4/0]: #595
[#573 mat_prefix]: #86
[#573 multisampled_texture_type]: #129
[#573 return_statement]: #369
[#573 sampled_texture_type]: #128
[#573 sampler_type]: #126
[#573 statement]: #596
[#573 static_assert_statement]: #382
[#573 storage_texture_type]: #130
[#573 switch_statement]: #371
[#573 switch_statement/0.0]: #385
[#573 switch_statement/0.0/0]: #399
[#573 texture_and_sampler_types]: #102
[#573 type_specifier_without_ident]: #84
[#573 variable_decl]: #390
[#573 variable_statement]: #376
[#573 variable_updating_statement]: #380
[#573 vec_prefix]: #85
[#573 while_statement]: #374
[#573 while_statement/0.0]: #388
[#573 while_statement/0.0/0]: #402
[#577 attribute]: #577
[#577 switch_body/0.0/0]: #592
[#578 additive_expression]: #63
[#578 array_type_specifier]: #100
[#578 binary_and_expression]: #60
[#578 binary_or_expression]: #61
[#578 binary_xor_expression]: #62
[#578 bitwise_expression]: #58
[#578 bool_literal]: #82
[#578 call_expression]: #74
[#578 callable]: #79
[#578 decimal_float_literal]: #90
[#578 decimal_int_literal]: #88
[#578 depth_texture_type]: #127
[#578 expression]: #591
[#578 float_literal]: #81
[#578 hex_float_literal]: #91
[#578 hex_int_literal]: #89
[#578 ident]: #73
[#578 int_literal]: #80
[#578 literal]: #75
[#578 mat_prefix]: #86
[#578 multiplicative_expression]: #65
[#578 multisampled_texture_type]: #129
[#578 paren_expression]: #76
[#578 primary_expression]: #72
[#578 relational_expression]: #55
[#578 sampled_texture_type]: #128
[#578 sampler_type]: #126
[#578 shift_expression]: #59
[#578 short_circuit_and_expression]: #57
[#578 short_circuit_or_expression]: #56
[#578 singular_expression]: #66
[#578 storage_texture_type]: #130
[#578 texture_and_sampler_types]: #102
[#578 type_specifier_without_ident]: #84
[#578 unary_expression]: #64
[#578 vec_prefix]: #85
[#582 attribute]: #186
[#582 compound_statement]: #590
[#582 compound_statement/0.0]: #184
[#582 compound_statement/0.0/0]: #185
[#585 array_type_specifier]: #100
[#585 depth_texture_type]: #127
[#585 ident]: #292
[#585 mat_prefix]: #295
[#585 multisampled_texture_type]: #129
[#585 sampled_texture_type]: #128
[#585 sampler_type]: #126
[#585 storage_texture_type]: #130
[#585 texture_and_sampler_types]: #102
[#585 type_specifier]: #589
[#585 type_specifier_without_ident]: #293
[#585 vec_prefix]: #294
[#587 attribute]: #587
[#587 function_header/0.5/0.1/0]: #588
[#591 attribute]: #186
[#591 compound_statement]: #614
[#591 compound_statement/0.0]: #184
[#591 compound_statement/0.0/0]: #185
[#593 case_clause]: #610
[#593 default_alone_clause]: #611
[#593 switch_body/0.2]: #607
[#593 switch_body/0.2/0]: #608
[#593 switch_clause]: #609
[#594 continuing_statement]: #605
[#594 loop_statement/0.5]: #604
[#596 array_type_specifier]: #100
[#596 assignment_statement]: #395
[#596 attribute]: #406
[#596 break_statement]: #377
[#596 callable]: #389
[#596 compound_statement]: #381
[#596 compound_statement/0.0]: #184
[#596 compound_statement/0.0/0]: #185
[#596 continue_statement]: #378
[#596 core_lhs_expression]: #407
[#596 decrement_statement]: #397
[#596 depth_texture_type]: #127
[#596 for_statement]: #373
[#596 for_statement/0.0]: #387
[#596 for_statement/0.0/0]: #401
[#596 func_call_statement]: #375
[#596 ident]: #403
[#596 if_statement]: #370
[#596 if_statement/0.0]: #384
[#596 if_statement/0.0/0]: #398
[#596 increment_statement]: #396
[#596 lhs_expression]: #404
[#596 loop_statement]: #372
[#596 loop_statement/0.0]: #386
[#596 loop_statement/0.0/0]: #400
[#596 loop_statement/0.4/0]: #603
[#596 mat_prefix]: #86
[#596 multisampled_texture_type]: #129
[#596 return_statement]: #369
[#596 sampled_texture_type]: #128
[#596 sampler_type]: #126
[#596 statement]: #596
[#596 static_assert_statement]: #382
[#596 storage_texture_type]: #130
[#596 switch_statement]: #371
[#596 switch_statement/0.0]: #385
[#596 switch_statement/0.0/0]: #399
[#596 texture_and_sampler_types]: #102
[#596 type_specifier_without_ident]: #84
[#596 variable_decl]: #390
[#596 variable_statement]: #376
[#596 variable_updating_statement]: #380
[#596 vec_prefix]: #85
[#596 while_statement]: #374
[#596 while_statement/0.0]: #388
[#596 while_statement/0.0/0]: #402
[#597 additive_expression]: #63
[#597 array_type_specifier]: #100
[#597 binary_and_expression]: #60
[#597 binary_or_expression]: #61
[#597 binary_xor_expression]: #62
[#597 bitwise_expression]: #58
[#597 bool_literal]: #82
[#597 call_expression]: #74
[#597 callable]: #79
[#597 decimal_float_literal]: #90
[#597 decimal_int_literal]: #88
[#597 depth_texture_type]: #127
[#597 expression]: #602
[#597 float_literal]: #81
[#597 for_header/0.2]: #601
[#597 hex_float_literal]: #91
[#597 hex_int_literal]: #89
[#597 ident]: #73
[#597 int_literal]: #80
[#597 literal]: #75
[#597 mat_prefix]: #86
[#597 multiplicative_expression]: #65
[#597 multisampled_texture_type]: #129
[#597 paren_expression]: #76
[#597 primary_expression]: #72
[#597 relational_expression]: #55
[#597 sampled_texture_type]: #128
[#597 sampler_type]: #126
[#597 shift_expression]: #59
[#597 short_circuit_and_expression]: #57
[#597 short_circuit_or_expression]: #56
[#597 singular_expression]: #66
[#597 storage_texture_type]: #130
[#597 texture_and_sampler_types]: #102
[#597 type_specifier_without_ident]: #84
[#597 unary_expression]: #64
[#597 vec_prefix]: #85
[#598 attribute]: #186
[#598 compound_statement]: #600
[#598 compound_statement/0.0]: #184
[#598 compound_statement/0.0/0]: #185
[#606 attribute]: #626
[#606 continuing_compound_statement]: #623
[#606 continuing_compound_statement/0.0]: #624
[#606 continuing_compound_statement/0.0/0]: #625
[#609 case_clause]: #610
[#609 default_alone_clause]: #611
[#609 switch_body/0.2/0]: #621
[#609 switch_clause]: #609
[#612 additive_expression]: #63
[#612 array_type_specifier]: #100
[#612 binary_and_expression]: #60
[#612 binary_or_expression]: #61
[#612 binary_xor_expression]: #62
[#612 bitwise_expression]: #58
[#612 bool_literal]: #82
[#612 call_expression]: #74
[#612 callable]: #79
[#612 case_selector]: #618
[#612 case_selectors]: #617
[#612 decimal_float_literal]: #90
[#612 decimal_int_literal]: #88
[#612 depth_texture_type]: #127
[#612 expression]: #620
[#612 float_literal]: #81
[#612 hex_float_literal]: #91
[#612 hex_int_literal]: #89
[#612 ident]: #73
[#612 int_literal]: #80
[#612 literal]: #75
[#612 mat_prefix]: #86
[#612 multiplicative_expression]: #65
[#612 multisampled_texture_type]: #129
[#612 paren_expression]: #76
[#612 primary_expression]: #72
[#612 relational_expression]: #55
[#612 sampled_texture_type]: #128
[#612 sampler_type]: #126
[#612 shift_expression]: #59
[#612 short_circuit_and_expression]: #57
[#612 short_circuit_or_expression]: #56
[#612 singular_expression]: #66
[#612 storage_texture_type]: #130
[#612 texture_and_sampler_types]: #102
[#612 type_specifier_without_ident]: #84
[#612 unary_expression]: #64
[#612 vec_prefix]: #85
[#613 default_alone_clause/0.1]: #615
[#615 attribute]: #186
[#615 compound_statement]: #641
[#615 compound_statement/0.0]: #184
[#615 compound_statement/0.0/0]: #185
[#617 case_clause/0.2]: #639
[#618 case_selectors/0.1]: #635
[#618 case_selectors/0.1/0]: #636
[#618 case_selectors/0.1/0/0.0]: #637
[#626 attribute]: #626
[#626 continuing_compound_statement/0.0/0]: #633
[#628 array_type_specifier]: #100
[#628 assignment_statement]: #395
[#628 callable]: #389
[#628 core_lhs_expression]: #407
[#628 decrement_statement]: #397
[#628 depth_texture_type]: #127
[#628 for_header/0.4]: #629
[#628 for_update]: #630
[#628 func_call_statement]: #632
[#628 ident]: #403
[#628 increment_statement]: #396
[#628 lhs_expression]: #404
[#628 mat_prefix]: #86
[#628 multisampled_texture_type]: #129
[#628 sampled_texture_type]: #128
[#628 sampler_type]: #126
[#628 storage_texture_type]: #130
[#628 texture_and_sampler_types]: #102
[#628 type_specifier_without_ident]: #84
[#628 variable_updating_statement]: #631
[#628 vec_prefix]: #85
[#634 array_type_specifier]: #100
[#634 assignment_statement]: #395
[#634 attribute]: #406
[#634 break_statement]: #377
[#634 callable]: #389
[#634 compound_statement]: #381
[#634 compound_statement/0.0]: #184
[#634 compound_statement/0.0/0]: #185
[#634 continue_statement]: #378
[#634 continuing_compound_statement/0.2]: #647
[#634 continuing_compound_statement/0.2/0]: #648
[#634 core_lhs_expression]: #407
[#634 decrement_statement]: #397
[#634 depth_texture_type]: #127
[#634 for_statement]: #373
[#634 for_statement/0.0]: #387
[#634 for_statement/0.0/0]: #401
[#634 func_call_statement]: #375
[#634 ident]: #403
[#634 if_statement]: #370
[#634 if_statement/0.0]: #384
[#634 if_statement/0.0/0]: #398
[#634 increment_statement]: #396
[#634 lhs_expression]: #404
[#634 loop_statement]: #372
[#634 loop_statement/0.0]: #386
[#634 loop_statement/0.0/0]: #400
[#634 mat_prefix]: #86
[#634 multisampled_texture_type]: #129
[#634 return_statement]: #369
[#634 sampled_texture_type]: #128
[#634 sampler_type]: #126
[#634 statement]: #649
[#634 static_assert_statement]: #382
[#634 storage_texture_type]: #130
[#634 switch_statement]: #371
[#634 switch_statement/0.0]: #385
[#634 switch_statement/0.0/0]: #399
[#634 texture_and_sampler_types]: #102
[#634 type_specifier_without_ident]: #84
[#634 variable_decl]: #390
[#634 variable_statement]: #376
[#634 variable_updating_statement]: #380
[#634 vec_prefix]: #85
[#634 while_statement]: #374
[#634 while_statement/0.0]: #388
[#634 while_statement/0.0/0]: #402
[#635 case_selectors/0.2]: #645
[#637 case_selectors/0.1/0]: #644
[#637 case_selectors/0.1/0/0.0]: #637
[#638 additive_expression]: #63
[#638 array_type_specifier]: #100
[#638 binary_and_expression]: #60
[#638 binary_or_expression]: #61
[#638 binary_xor_expression]: #62
[#638 bitwise_expression]: #58
[#638 bool_literal]: #82
[#638 call_expression]: #74
[#638 callable]: #79
[#638 case_selector]: #643
[#638 decimal_float_literal]: #90
[#638 decimal_int_literal]: #88
[#638 depth_texture_type]: #127
[#638 expression]: #620
[#638 float_literal]: #81
[#638 hex_float_literal]: #91
[#638 hex_int_literal]: #89
[#638 ident]: #73
[#638 int_literal]: #80
[#638 literal]: #75
[#638 mat_prefix]: #86
[#638 multiplicative_expression]: #65
[#638 multisampled_texture_type]: #129
[#638 paren_expression]: #76
[#638 primary_expression]: #72
[#638 relational_expression]: #55
[#638 sampled_texture_type]: #128
[#638 sampler_type]: #126
[#638 shift_expression]: #59
[#638 short_circuit_and_expression]: #57
[#638 short_circuit_or_expression]: #56
[#638 singular_expression]: #66
[#638 storage_texture_type]: #130
[#638 texture_and_sampler_types]: #102
[#638 type_specifier_without_ident]: #84
[#638 unary_expression]: #64
[#638 vec_prefix]: #85
[#639 attribute]: #186
[#639 compound_statement]: #642
[#639 compound_statement/0.0]: #184
[#639 compound_statement/0.0/0]: #185
[#647 break_if_statement]: #652
[#647 continuing_compound_statement/0.3]: #651
[#649 array_type_specifier]: #100
[#649 assignment_statement]: #395
[#649 attribute]: #406
[#649 break_statement]: #377
[#649 callable]: #389
[#649 compound_statement]: #381
[#649 compound_statement/0.0]: #184
[#649 compound_statement/0.0/0]: #185
[#649 continue_statement]: #378
[#649 continuing_compound_statement/0.2/0]: #650
[#649 core_lhs_expression]: #407
[#649 decrement_statement]: #397
[#649 depth_texture_type]: #127
[#649 for_statement]: #373
[#649 for_statement/0.0]: #387
[#649 for_statement/0.0/0]: #401
[#649 func_call_statement]: #375
[#649 ident]: #403
[#649 if_statement]: #370
[#649 if_statement/0.0]: #384
[#649 if_statement/0.0/0]: #398
[#649 increment_statement]: #396
[#649 lhs_expression]: #404
[#649 loop_statement]: #372
[#649 loop_statement/0.0]: #386
[#649 loop_statement/0.0/0]: #400
[#649 mat_prefix]: #86
[#649 multisampled_texture_type]: #129
[#649 return_statement]: #369
[#649 sampled_texture_type]: #128
[#649 sampler_type]: #126
[#649 statement]: #649
[#649 static_assert_statement]: #382
[#649 storage_texture_type]: #130
[#649 switch_statement]: #371
[#649 switch_statement/0.0]: #385
[#649 switch_statement/0.0/0]: #399
[#649 texture_and_sampler_types]: #102
[#649 type_specifier_without_ident]: #84
[#649 variable_decl]: #390
[#649 variable_statement]: #376
[#649 variable_updating_statement]: #380
[#649 vec_prefix]: #85
[#649 while_statement]: #374
[#649 while_statement/0.0]: #388
[#649 while_statement/0.0/0]: #402
[#654 additive_expression]: #63
[#654 array_type_specifier]: #100
[#654 binary_and_expression]: #60
[#654 binary_or_expression]: #61
[#654 binary_xor_expression]: #62
[#654 bitwise_expression]: #58
[#654 bool_literal]: #82
[#654 call_expression]: #74
[#654 callable]: #79
[#654 decimal_float_literal]: #90
[#654 decimal_int_literal]: #88
[#654 depth_texture_type]: #127
[#654 expression]: #656
[#654 float_literal]: #81
[#654 hex_float_literal]: #91
[#654 hex_int_literal]: #89
[#654 ident]: #73
[#654 int_literal]: #80
[#654 literal]: #75
[#654 mat_prefix]: #86
[#654 multiplicative_expression]: #65
[#654 multisampled_texture_type]: #129
[#654 paren_expression]: #76
[#654 primary_expression]: #72
[#654 relational_expression]: #55
[#654 sampled_texture_type]: #128
[#654 sampler_type]: #126
[#654 shift_expression]: #59
[#654 short_circuit_and_expression]: #57
[#654 short_circuit_or_expression]: #56
[#654 singular_expression]: #66
[#654 storage_texture_type]: #130
[#654 texture_and_sampler_types]: #102
[#654 type_specifier_without_ident]: #84
[#654 unary_expression]: #64
[#654 vec_prefix]: #85
