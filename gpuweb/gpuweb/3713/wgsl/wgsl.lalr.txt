=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'diagnostic' diagnostic_control
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   attribute * ? '{' statement * ? '}'
continue_statement:'continue'
continuing_compound_statement:
   attribute * ? '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
diagnostic_control:
   '(' severity_control_name ',' diagnostic_rule_name attrib_end
diagnostic_directive:
   'diagnostic' diagnostic_control ';'
diagnostic_rule_name:ident_pattern_token
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   attribute * ? 'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:
   callable argument_expression_list
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | static_assert_statement ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:
   diagnostic_directive
 | enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   attribute * ? if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   attribute * ? 'loop' attribute * ? '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | callable argument_expression_list
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
severity_control_name:
   'error'
 | 'info'
 | 'off'
 | 'warning'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | static_assert_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   attribute * ? '{' ( switch_clause * ) '}'
switch_body/0.2:
   switch_clause *
switch_clause:
   case_clause
 | default_alone_clause
switch_statement:
   attribute * ? 'switch' expression switch_body
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'bgra8unorm'
 | 'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'type' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   attribute * ? 'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {EndOfText}
enable_directive -> · 'enable' extension_name ';' : {EndOfText}
global_directive -> · diagnostic_directive : {EndOfText}
global_directive -> · enable_directive : {EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {EndOfText}
diagnostic_directive -> · 'diagnostic' diagnostic_control ';' : {EndOfText}
enable_directive -> · 'enable' extension_name ';' : {EndOfText}
global_directive -> · diagnostic_directive : {EndOfText}
global_directive -> · enable_directive : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#5
global_directive -> diagnostic_directive · : {EndOfText}

#6
global_directive -> enable_directive · : {EndOfText}

#7
diagnostic_directive -> 'diagnostic' · diagnostic_control ';' : {EndOfText}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {}

#8
enable_directive -> 'enable' · extension_name ';' : {EndOfText}
extension_name -> · 'f16' : {}

#9
enable_directive -> 'enable' extension_name · ';' : {EndOfText}

#10
extension_name -> 'f16' · : {}

#11
diagnostic_directive -> 'diagnostic' diagnostic_control · ';' : {EndOfText}

#12
diagnostic_control -> '(' · severity_control_name ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}
severity_control_name -> · 'error' : {}
severity_control_name -> · 'info' : {}
severity_control_name -> · 'off' : {}
severity_control_name -> · 'warning' : {}

#13
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {EndOfText}

#14
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#15
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#16
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#17
global_decl -> ';' · : {EndOfText}

#18
global_decl -> global_variable_decl · ';' : {EndOfText}

#19
global_decl -> global_constant_decl · ';' : {EndOfText}

#20
global_decl -> type_alias_decl · ';' : {EndOfText}

#21
global_decl -> struct_decl · : {EndOfText}

#22
global_decl -> function_decl · : {EndOfText}

#23
global_decl -> static_assert_statement · ';' : {EndOfText}

#24
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}

#25
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#26
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#27
type_alias_decl -> 'type' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#28
struct_decl -> 'struct' · ident struct_body_decl : {EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#29
function_decl -> function_decl/0.0 · function_header compound_statement : {EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {}

#30
static_assert_statement -> 'static_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#31
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {}

#32
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#33
function_decl/0.0 -> function_decl/0.0/0 · : {}

#34
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}

#35
attribute -> '@' · 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#36
attribute -> '@' 'align' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#37
attribute -> '@' 'binding' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#38
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}

#39
attribute -> '@' 'const' · : {'f16' 'texture_multisampled_2d'}

#40
attribute -> '@' 'diagnostic' · diagnostic_control : {'f16' 'texture_multisampled_2d'}
diagnostic_control -> · '(' severity_control_name ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}

#41
attribute -> '@' 'group' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#42
attribute -> '@' 'id' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#43
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}

#44
attribute -> '@' 'invariant' · : {'f16' 'texture_multisampled_2d'}

#45
attribute -> '@' 'location' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#46
attribute -> '@' 'size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#47
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#48
attribute -> '@' 'vertex' · : {'f16' 'texture_multisampled_2d'}

#49
attribute -> '@' 'fragment' · : {'f16' 'texture_multisampled_2d'}

#50
attribute -> '@' 'compute' · : {'f16' 'texture_multisampled_2d'}

#51
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {}

#52
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#53
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {}

#54
static_assert_statement -> 'static_assert' expression · : {}

#55
expression -> relational_expression · : {}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#56
expression -> short_circuit_or_expression · '||' relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#57
expression -> short_circuit_and_expression · '&&' relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#58
expression -> bitwise_expression · : {}

#59
relational_expression -> shift_expression · '!=' shift_expression : {}
relational_expression -> shift_expression · '<' shift_expression : {}
relational_expression -> shift_expression · '<=' shift_expression : {}
relational_expression -> shift_expression · '==' shift_expression : {}
relational_expression -> shift_expression · '>' shift_expression : {}
relational_expression -> shift_expression · '>=' shift_expression : {}
relational_expression -> shift_expression · : {}

#60
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {}

#61
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {}

#62
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {}

#63
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
shift_expression -> additive_expression · : {}
additive_operator -> · '+' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#64
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#65
additive_expression -> multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#66
unary_expression -> singular_expression · : {}

#67
unary_expression -> '-' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#68
unary_expression -> '!' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#69
unary_expression -> '~' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#70
unary_expression -> '*' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#71
unary_expression -> '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#72
singular_expression -> primary_expression · singular_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {}

#73
callable -> ident · : {}
primary_expression -> ident · : {}

#74
primary_expression -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#75
primary_expression -> literal · : {}

#76
primary_expression -> paren_expression · : {}

#77
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {}

#78
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#79
callable -> type_specifier_without_ident · : {}

#80
callable -> vec_prefix · : {}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#81
callable -> mat_prefix · : {}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#82
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}
callable -> 'array' · : {}

#83
literal -> int_literal · : {}

#84
literal -> float_literal · : {}

#85
literal -> bool_literal · : {}

#86
paren_expression -> '(' · expression ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#87
type_specifier_without_ident -> 'bool' · : {}

#88
type_specifier_without_ident -> 'f32' · : {}

#89
type_specifier_without_ident -> 'f16' · : {}

#90
type_specifier_without_ident -> 'i32' · : {}

#91
type_specifier_without_ident -> 'u32' · : {}

#92
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#93
type_specifier_without_ident -> array_type_specifier · : {}

#94
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {}

#95
type_specifier_without_ident -> texture_and_sampler_types · : {}

#96
vec_prefix -> 'vec2' · : {}

#97
vec_prefix -> 'vec3' · : {}

#98
vec_prefix -> 'vec4' · : {}

#99
mat_prefix -> 'mat2x2' · : {}

#100
mat_prefix -> 'mat2x3' · : {}

#101
mat_prefix -> 'mat2x4' · : {}

#102
mat_prefix -> 'mat3x2' · : {}

#103
mat_prefix -> 'mat3x3' · : {}

#104
mat_prefix -> 'mat3x4' · : {}

#105
mat_prefix -> 'mat4x2' · : {}

#106
mat_prefix -> 'mat4x3' · : {}

#107
mat_prefix -> 'mat4x4' · : {}

#108
int_literal -> decimal_int_literal · : {}

#109
int_literal -> hex_int_literal · : {}

#110
float_literal -> decimal_float_literal · : {}

#111
float_literal -> hex_float_literal · : {}

#112
bool_literal -> 'true' · : {}

#113
bool_literal -> 'false' · : {}

#114
texture_and_sampler_types -> sampler_type · : {}

#115
texture_and_sampler_types -> depth_texture_type · : {}

#116
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {}

#117
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {}

#118
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {}

#119
decimal_int_literal -> /0[iu]?/ · : {}

#120
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {}

#121
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {}

#122
decimal_float_literal -> /0[fh]/ · : {}

#123
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {}

#124
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {}

#125
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {}

#126
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {}

#127
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {}

#128
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {}

#129
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {}

#130
sampler_type -> 'sampler' · : {}

#131
sampler_type -> 'sampler_comparison' · : {}

#132
depth_texture_type -> 'texture_depth_2d' · : {}

#133
depth_texture_type -> 'texture_depth_2d_array' · : {}

#134
depth_texture_type -> 'texture_depth_cube' · : {}

#135
depth_texture_type -> 'texture_depth_cube_array' · : {}

#136
depth_texture_type -> 'texture_depth_multisampled_2d' · : {}

#137
sampled_texture_type -> 'texture_1d' · : {}

#138
sampled_texture_type -> 'texture_2d' · : {}

#139
sampled_texture_type -> 'texture_2d_array' · : {}

#140
sampled_texture_type -> 'texture_3d' · : {}

#141
sampled_texture_type -> 'texture_cube' · : {}

#142
sampled_texture_type -> 'texture_cube_array' · : {}

#143
multisampled_texture_type -> 'texture_multisampled_2d' · : {}

#144
storage_texture_type -> 'texture_storage_1d' · : {}

#145
storage_texture_type -> 'texture_storage_2d' · : {}

#146
storage_texture_type -> 'texture_storage_2d_array' · : {}

#147
storage_texture_type -> 'texture_storage_3d' · : {}

#148
function_decl -> function_decl/0.0 function_header · compound_statement : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {EndOfText}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#149
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#150
struct_decl -> 'struct' ident · struct_body_decl : {EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}

#151
type_alias_decl -> 'type' ident · '=' type_specifier : {}

#152
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#153
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#154
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {}
optionally_typed_ident/0.1 -> · ':' type_specifier : {}

#155
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#156
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#157
global_decl -> static_assert_statement ';' · : {EndOfText}

#158
global_decl -> type_alias_decl ';' · : {EndOfText}

#159
global_decl -> global_constant_decl ';' · : {EndOfText}

#160
global_decl -> global_variable_decl ';' · : {EndOfText}

#161
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#162
diagnostic_control -> '(' severity_control_name · ',' diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}

#163
severity_control_name -> 'error' · : {}

#164
severity_control_name -> 'warning' · : {}

#165
severity_control_name -> 'info' · : {}

#166
severity_control_name -> 'off' · : {}

#167
diagnostic_directive -> 'diagnostic' diagnostic_control ';' · : {EndOfText}

#168
enable_directive -> 'enable' extension_name ';' · : {EndOfText}

#169
diagnostic_control -> '(' severity_control_name ',' · diagnostic_rule_name attrib_end : {'f16' 'texture_multisampled_2d'}
diagnostic_rule_name -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#170
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#171
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#172
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#173
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#174
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#175
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {}

#176
optionally_typed_ident/0.1 -> ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#177
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#178
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#179
type_alias_decl -> 'type' ident '=' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#180
struct_decl -> 'struct' ident struct_body_decl · : {EndOfText}

#181
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#182
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {}

#183
function_decl -> function_decl/0.0 function_header compound_statement · : {EndOfText}

#184
compound_statement -> compound_statement/0.0 · '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#185
compound_statement/0.0 -> compound_statement/0.0/0 · : {}

#186
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#187
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {}
texel_format -> · 'bgra8unorm' : {}
texel_format -> · 'r32float' : {}
texel_format -> · 'r32sint' : {}
texel_format -> · 'r32uint' : {}
texel_format -> · 'rg32float' : {}
texel_format -> · 'rg32sint' : {}
texel_format -> · 'rg32uint' : {}
texel_format -> · 'rgba16float' : {}
texel_format -> · 'rgba16sint' : {}
texel_format -> · 'rgba16uint' : {}
texel_format -> · 'rgba32float' : {}
texel_format -> · 'rgba32sint' : {}
texel_format -> · 'rgba32uint' : {}
texel_format -> · 'rgba8sint' : {}
texel_format -> · 'rgba8snorm' : {}
texel_format -> · 'rgba8uint' : {}
texel_format -> · 'rgba8unorm' : {}

#188
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#189
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#190
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#191
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#192
paren_expression -> '(' expression · ')' : {}

#193
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#194
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#195
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#196
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#197
primary_expression -> callable argument_expression_list · : {}

#198
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
argument_expression_list/0.1 -> · expression_comma_list : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#199
singular_expression -> primary_expression singular_expression/0.1 · : {}

#200
singular_expression/0.1 -> component_or_swizzle_specifier · : {}

#201
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#202
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
swizzle_name -> · '/[rgba]/' : {}
swizzle_name -> · '/[rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {}

#203
unary_expression -> '&' unary_expression · : {}

#204
unary_expression -> '*' unary_expression · : {}

#205
unary_expression -> '~' unary_expression · : {}

#206
unary_expression -> '!' unary_expression · : {}

#207
unary_expression -> '-' unary_expression · : {}

#208
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#209
multiplicative_operator -> '*' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#210
multiplicative_operator -> '/' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#211
multiplicative_operator -> '%' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#212
shift_expression -> unary_expression '<<' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#213
shift_expression -> unary_expression '>>' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#214
additive_expression -> additive_expression additive_operator · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#215
additive_operator -> '+' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#216
additive_operator -> '-' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#217
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#218
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#219
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#220
relational_expression -> shift_expression '<' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#221
relational_expression -> shift_expression '>' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#222
relational_expression -> shift_expression '<=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#223
relational_expression -> shift_expression '>=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#224
relational_expression -> shift_expression '==' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#225
relational_expression -> shift_expression '!=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#226
expression -> short_circuit_and_expression '&&' · relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#227
expression -> short_circuit_or_expression '||' · relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#228
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#229
attribute -> '@' 'size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#230
attribute -> '@' 'location' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#231
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_type_name -> · 'flat' : {}
interpolation_type_name -> · 'linear' : {}
interpolation_type_name -> · 'perspective' : {}

#232
attribute -> '@' 'id' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#233
attribute -> '@' 'group' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#234
attribute -> '@' 'diagnostic' diagnostic_control · : {'f16' 'texture_multisampled_2d'}

#235
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
builtin_value_name -> · 'frag_depth' : {}
builtin_value_name -> · 'front_facing' : {}
builtin_value_name -> · 'global_invocation_id' : {}
builtin_value_name -> · 'instance_index' : {}
builtin_value_name -> · 'local_invocation_id' : {}
builtin_value_name -> · 'local_invocation_index' : {}
builtin_value_name -> · 'num_workgroups' : {}
builtin_value_name -> · 'position' : {}
builtin_value_name -> · 'sample_index' : {}
builtin_value_name -> · 'sample_mask' : {}
builtin_value_name -> · 'vertex_index' : {}
builtin_value_name -> · 'workgroup_id' : {}

#236
attribute -> '@' 'binding' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#237
attribute -> '@' 'align' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#238
attribute -> '@' 'align' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#239
attribute -> '@' 'binding' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#240
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#241
builtin_value_name -> 'vertex_index' · : {}

#242
builtin_value_name -> 'instance_index' · : {}

#243
builtin_value_name -> 'position' · : {}

#244
builtin_value_name -> 'front_facing' · : {}

#245
builtin_value_name -> 'frag_depth' · : {}

#246
builtin_value_name -> 'local_invocation_id' · : {}

#247
builtin_value_name -> 'local_invocation_index' · : {}

#248
builtin_value_name -> 'global_invocation_id' · : {}

#249
builtin_value_name -> 'workgroup_id' · : {}

#250
builtin_value_name -> 'num_workgroups' · : {}

#251
builtin_value_name -> 'sample_index' · : {}

#252
builtin_value_name -> 'sample_mask' · : {}

#253
attribute -> '@' 'group' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#254
attribute -> '@' 'id' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#255
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#256
interpolation_type_name -> 'perspective' · : {}

#257
interpolation_type_name -> 'linear' · : {}

#258
interpolation_type_name -> 'flat' · : {}

#259
attribute -> '@' 'location' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#260
attribute -> '@' 'size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#261
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#262
expression -> short_circuit_or_expression '||' relational_expression · : {}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#263
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#264
expression -> short_circuit_and_expression '&&' relational_expression · : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#265
relational_expression -> shift_expression '!=' shift_expression · : {}

#266
relational_expression -> shift_expression '==' shift_expression · : {}

#267
relational_expression -> shift_expression '>=' shift_expression · : {}

#268
relational_expression -> shift_expression '<=' shift_expression · : {}

#269
relational_expression -> shift_expression '>' shift_expression · : {}

#270
relational_expression -> shift_expression '<' shift_expression · : {}

#271
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {}

#272
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {}

#273
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {}

#274
additive_expression -> additive_expression additive_operator multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#275
multiplicative_expression -> unary_expression · : {}

#276
shift_expression -> unary_expression '>>' unary_expression · : {}

#277
shift_expression -> unary_expression '<<' unary_expression · : {}

#278
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {}

#279
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {}

#280
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {}

#281
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#282
swizzle_name -> '/[rgba]/' · : {}

#283
swizzle_name -> '/[rgba][rgba]/' · : {}

#284
swizzle_name -> '/[rgba][rgba][rgba]/' · : {}

#285
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {}

#286
swizzle_name -> '/[xyzw]/' · : {}

#287
swizzle_name -> '/[xyzw][xyzw]/' · : {}

#288
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {}

#289
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {}

#290
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {}

#291
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {}

#292
argument_expression_list/0.1 -> expression_comma_list · : {}

#293
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#294
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {}

#295
type_specifier -> ident · : {}

#296
type_specifier -> type_specifier_without_ident · : {}

#297
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#298
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#299
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}

#300
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {}

#301
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {}

#302
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {}
array_type_specifier/0.3 -> · ',' element_count_expression : {}

#303
paren_expression -> '(' expression ')' · : {}

#304
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#305
address_space -> 'function' · : {}

#306
address_space -> 'private' · : {}

#307
address_space -> 'workgroup' · : {}

#308
address_space -> 'uniform' · : {}

#309
address_space -> 'storage' · : {}

#310
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {}

#311
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {}

#312
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {}

#313
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {}

#314
texel_format -> 'rgba8unorm' · : {}

#315
texel_format -> 'rgba8snorm' · : {}

#316
texel_format -> 'rgba8uint' · : {}

#317
texel_format -> 'rgba8sint' · : {}

#318
texel_format -> 'rgba16uint' · : {}

#319
texel_format -> 'rgba16sint' · : {}

#320
texel_format -> 'rgba16float' · : {}

#321
texel_format -> 'r32uint' · : {}

#322
texel_format -> 'r32sint' · : {}

#323
texel_format -> 'r32float' · : {}

#324
texel_format -> 'rg32uint' · : {}

#325
texel_format -> 'rg32sint' · : {}

#326
texel_format -> 'rg32float' · : {}

#327
texel_format -> 'rgba32uint' · : {}

#328
texel_format -> 'rgba32sint' · : {}

#329
texel_format -> 'rgba32float' · : {}

#330
texel_format -> 'bgra8unorm' · : {}

#331
compound_statement/0.0/0 -> attribute compound_statement/0.0/0 · : {}

#332
compound_statement -> compound_statement/0.0 '{' · compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
compound_statement/0.2 -> · compound_statement/0.2/0 : {}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#333
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#334
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#335
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#336
struct_member/0.0 -> struct_member/0.0/0 · : {}

#337
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#338
type_alias_decl -> 'type' ident '=' type_specifier · : {}

#339
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#340
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#341
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#342
optionally_typed_ident/0.1 -> ':' type_specifier · : {}

#343
global_variable_decl/0.2 -> '=' expression · : {}

#344
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#345
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {}

#346
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#347
diagnostic_rule_name -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#348
diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#349
attrib_end -> attrib_end/0.0 · ')' : {'f16' 'texture_multisampled_2d'}

#350
attrib_end/0.0 -> ',' · : {}

#351
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#352
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#353
global_constant_decl/1.3 -> '=' expression · : {}

#354
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#355
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {}

#356
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#357
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {}

#358
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#359
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#360
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {}

#361
function_header/0.3 -> param_list · : {}

#362
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#363
param -> param/0.0 · ident ':' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#364
param/0.0 -> param/0.0/0 · : {}

#365
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#366
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#367
compound_statement/0.2 -> compound_statement/0.2/0 · : {}

#368
compound_statement/0.2/0 -> statement · compound_statement/0.2/0 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
compound_statement/0.2/0 -> · statement compound_statement/0.2/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#369
statement -> ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#370
statement -> return_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#371
statement -> if_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#372
statement -> switch_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#373
statement -> loop_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#374
statement -> for_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#375
statement -> while_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#376
statement -> func_call_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#377
statement -> variable_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#378
statement -> break_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#379
statement -> continue_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#380
statement -> 'discard' · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#381
statement -> variable_updating_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#382
statement -> compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#383
statement -> static_assert_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#384
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#385
if_statement -> if_statement/0.0 · if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#386
switch_statement -> switch_statement/0.0 · 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#387
loop_statement -> loop_statement/0.0 · 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#388
for_statement -> for_statement/0.0 · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#389
while_statement -> while_statement/0.0 · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#390
func_call_statement -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#391
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#392
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#393
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#394
break_statement -> 'break' · : {}

#395
continue_statement -> 'continue' · : {}

#396
variable_updating_statement -> assignment_statement · : {}

#397
variable_updating_statement -> increment_statement · : {}

#398
variable_updating_statement -> decrement_statement · : {}

#399
if_statement/0.0 -> if_statement/0.0/0 · : {}

#400
switch_statement/0.0 -> switch_statement/0.0/0 · : {}

#401
loop_statement/0.0 -> loop_statement/0.0/0 · : {}

#402
for_statement/0.0 -> for_statement/0.0/0 · : {}

#403
while_statement/0.0 -> while_statement/0.0/0 · : {}

#404
callable -> ident · : {}
core_lhs_expression -> ident · : {}

#405
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '%=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '&=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '*=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '+=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '-=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '/=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '<<=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '>>=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '^=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '|=' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#406
assignment_statement -> '_' · '=' expression : {}

#407
compound_statement/0.0/0 -> attribute · compound_statement/0.0/0 : {}
for_statement/0.0/0 -> attribute · for_statement/0.0/0 : {}
if_statement/0.0/0 -> attribute · if_statement/0.0/0 : {}
loop_statement/0.0/0 -> attribute · loop_statement/0.0/0 : {}
switch_statement/0.0/0 -> attribute · switch_statement/0.0/0 : {}
while_statement/0.0/0 -> attribute · while_statement/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#408
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {}

#409
lhs_expression -> '*' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#410
lhs_expression -> '&' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#411
core_lhs_expression -> '(' · lhs_expression ')' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#412
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#413
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {}

#414
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {}

#415
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {}

#416
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#417
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {}

#418
array_type_specifier/0.3 -> ',' · element_count_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
element_count_expression -> · additive_expression : {}
element_count_expression -> · bitwise_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#419
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {}

#420
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {}

#421
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {}
paren_expression -> · '(' expression ')' : {}

#422
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#423
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {}

#424
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#425
expression_comma_list/0.1/0/0.0 -> ',' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#426
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {}

#427
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {}

#428
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {}

#429
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {}

#430
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {}

#431
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {}

#432
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#433
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#434
attribute -> '@' 'size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#435
attribute -> '@' 'location' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#436
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#437
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_sample_name -> · 'center' : {}
interpolation_sample_name -> · 'centroid' : {}
interpolation_sample_name -> · 'sample' : {}

#438
attribute -> '@' 'id' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#439
attribute -> '@' 'group' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#440
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#441
attribute -> '@' 'binding' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#442
attribute -> '@' 'align' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#443
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#444
interpolation_sample_name -> 'center' · : {}

#445
interpolation_sample_name -> 'centroid' · : {}

#446
interpolation_sample_name -> 'sample' · : {}

#447
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#448
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {}

#449
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {}

#450
expression_comma_list/0.1/0/0.0 -> ',' expression · : {}

#451
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {}

#452
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#453
expression_comma_list/0.2 -> ',' · : {}

#454
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {}

#455
array_type_specifier/0.3 -> ',' element_count_expression · : {}

#456
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
element_count_expression -> additive_expression · : {}
additive_operator -> · '+' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#457
element_count_expression -> bitwise_expression · : {}

#458
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}

#459
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {}

#460
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident/7.5 -> · ',' access_mode : {}

#461
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {}

#462
access_mode -> 'read' · : {}

#463
access_mode -> 'write' · : {}

#464
access_mode -> 'read_write' · : {}

#465
core_lhs_expression -> '(' lhs_expression · ')' : {}

#466
core_lhs_expression -> ident · : {}

#467
lhs_expression -> '&' lhs_expression · : {}

#468
lhs_expression -> '*' lhs_expression · : {}

#469
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {}

#470
lhs_expression/0.1 -> component_or_swizzle_specifier · : {}

#471
if_statement/0.0/0 -> attribute if_statement/0.0/0 · : {}

#472
switch_statement/0.0/0 -> attribute switch_statement/0.0/0 · : {}

#473
loop_statement/0.0/0 -> attribute loop_statement/0.0/0 · : {}

#474
for_statement/0.0/0 -> attribute for_statement/0.0/0 · : {}

#475
while_statement/0.0/0 -> attribute while_statement/0.0/0 · : {}

#476
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#477
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#478
increment_statement -> lhs_expression '++' · : {}

#479
decrement_statement -> lhs_expression '--' · : {}

#480
assignment_statement/0.1 -> '=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#481
assignment_statement/0.1 -> compound_assignment_operator · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#482
compound_assignment_operator -> '+=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#483
compound_assignment_operator -> '-=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#484
compound_assignment_operator -> '*=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#485
compound_assignment_operator -> '/=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#486
compound_assignment_operator -> '%=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#487
compound_assignment_operator -> '&=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#488
compound_assignment_operator -> '|=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#489
compound_assignment_operator -> '^=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#490
compound_assignment_operator -> '>>=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#491
compound_assignment_operator -> '<<=' · : {'f16' 'texture_multisampled_2d' /0[xX][0-9a-fA-F]+[iu]?/}

#492
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#493
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#494
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#495
func_call_statement -> callable argument_expression_list · : {}

#496
while_statement -> while_statement/0.0 'while' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#497
for_statement -> for_statement/0.0 'for' · '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#498
loop_statement -> loop_statement/0.0 'loop' · loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
loop_statement/0.2 -> · loop_statement/0.2/0 : {}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {}

#499
switch_statement -> switch_statement/0.0 'switch' · expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#500
if_statement -> if_statement/0.0 if_clause · if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2 -> · if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#501
if_clause -> 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#502
return_statement -> 'return' return_statement/0.1 · : {}

#503
return_statement/0.1 -> expression · : {}

#504
statement -> static_assert_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#505
statement -> variable_updating_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#506
statement -> 'discard' ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#507
statement -> continue_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#508
statement -> break_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#509
statement -> variable_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#510
statement -> func_call_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#511
statement -> return_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#512
compound_statement/0.2/0 -> statement compound_statement/0.2/0 · : {}

#513
compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#514
param/0.0/0 -> attribute param/0.0/0 · : {}

#515
param -> param/0.0 ident · ':' type_specifier : {}

#516
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#517
param_list/0.1 -> param_list/0.1/0 · : {}

#518
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#519
param_list/0.1/0/0.0 -> ',' · param : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#520
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {}

#521
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {}

#522
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {}

#523
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {EndOfText}

#524
struct_body_decl/0.3 -> ',' · : {}

#525
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#526
variable_qualifier/0.2 -> ',' access_mode · : {}

#527
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#528
attrib_end -> attrib_end/0.0 ')' · : {'f16' 'texture_multisampled_2d'}

#529
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {}

#530
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {EndOfText}

#531
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {}

#532
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#533
param_list/0.1/0/0.0 -> ',' param · : {}

#534
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {}

#535
param_list -> param param_list/0.1 param_list/0.2 · : {}

#536
param_list/0.2 -> ',' · : {}

#537
param -> param/0.0 ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#538
if_clause -> 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#539
if_statement -> if_statement/0.0 if_clause if_statement/0.2 · if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_clause -> · 'else' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.3 -> · else_clause : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#540
if_statement/0.2 -> if_statement/0.2/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#541
if_statement/0.2/0 -> else_if_clause · if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2/0 -> · else_if_clause if_statement/0.2/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#542
else_if_clause -> 'else' · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#543
switch_statement -> switch_statement/0.0 'switch' expression · switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
switch_body -> · switch_body/0.0 '{' switch_body/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_body/0.0 -> · switch_body/0.0/0 : {}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {}

#544
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 · '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#545
loop_statement/0.2 -> loop_statement/0.2/0 · : {}

#546
loop_statement/0.2/0 -> attribute · loop_statement/0.2/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
loop_statement/0.2/0 -> · attribute loop_statement/0.2/0 : {}

#547
for_statement -> for_statement/0.0 'for' '(' · for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#548
while_statement -> while_statement/0.0 'while' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#549
variable_statement -> variable_decl '=' expression · : {}

#550
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#551
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#552
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#553
assignment_statement -> '_' '=' expression · : {}

#554
core_lhs_expression -> '(' lhs_expression ')' · : {}

#555
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {}

#556
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {}

#557
type_specifier_without_ident/7.5 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#558
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#559
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#560
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#561
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#562
type_specifier_without_ident/7.5 -> ',' access_mode · : {}

#563
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {}

#564
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#565
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#566
while_statement -> while_statement/0.0 'while' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#567
for_statement -> for_statement/0.0 'for' '(' for_header · ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#568
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#569
for_header/0.0 -> for_init · : {}

#570
for_init -> variable_statement · : {}

#571
for_init -> variable_updating_statement · : {}

#572
for_init -> func_call_statement · : {}

#573
loop_statement/0.2/0 -> attribute loop_statement/0.2/0 · : {}

#574
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' · loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
loop_statement/0.4 -> · loop_statement/0.4/0 : {}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#575
switch_statement -> switch_statement/0.0 'switch' expression switch_body · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#576
switch_body -> switch_body/0.0 · '{' switch_body/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#577
switch_body/0.0 -> switch_body/0.0/0 · : {}

#578
switch_body/0.0/0 -> attribute · switch_body/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
switch_body/0.0/0 -> · attribute switch_body/0.0/0 : {}

#579
else_if_clause -> 'else' 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#580
if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#581
if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#582
if_statement/0.3 -> else_clause · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#583
else_clause -> 'else' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#584
if_clause -> 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#585
param -> param/0.0 ident ':' type_specifier · : {}

#586
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#587
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#588
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'diagnostic' diagnostic_control : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#589
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#590
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {}

#591
else_clause -> 'else' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#592
else_if_clause -> 'else' 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#593
switch_body/0.0/0 -> attribute switch_body/0.0/0 · : {}

#594
switch_body -> switch_body/0.0 '{' · switch_body/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body/0.2 -> · switch_body/0.2/0 : {}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {}
switch_clause -> · case_clause : {}
switch_clause -> · default_alone_clause : {}

#595
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 · loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.5 -> · continuing_statement : {}

#596
loop_statement/0.4 -> loop_statement/0.4/0 · : {}

#597
loop_statement/0.4/0 -> statement · loop_statement/0.4/0 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
loop_statement/0.4/0 -> · statement loop_statement/0.4/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#598
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#599
for_statement -> for_statement/0.0 'for' '(' for_header ')' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#600
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#601
for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#602
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#603
for_header/0.2 -> expression · : {}

#604
loop_statement/0.4/0 -> statement loop_statement/0.4/0 · : {}

#605
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#606
loop_statement/0.5 -> continuing_statement · : {}

#607
continuing_statement -> 'continuing' · continuing_compound_statement : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
continuing_compound_statement -> · continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {}
continuing_compound_statement/0.0 -> · continuing_compound_statement/0.0/0 : {}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {}

#608
switch_body -> switch_body/0.0 '{' switch_body/0.2 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#609
switch_body/0.2 -> switch_body/0.2/0 · : {}

#610
switch_body/0.2/0 -> switch_clause · switch_body/0.2/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body/0.2/0 -> · switch_clause switch_body/0.2/0 : {}
switch_clause -> · case_clause : {}
switch_clause -> · default_alone_clause : {}

#611
switch_clause -> case_clause · : {}

#612
switch_clause -> default_alone_clause · : {}

#613
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#614
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {}
default_alone_clause/0.1 -> · ':' : {}

#615
else_if_clause -> 'else' 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#616
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#617
default_alone_clause/0.1 -> ':' · : {}

#618
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {}
case_clause/0.2 -> · ':' : {}

#619
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {}
case_selectors/0.1 -> · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#620
case_selector -> 'default' · : {}

#621
case_selector -> expression · : {}

#622
switch_body/0.2/0 -> switch_clause switch_body/0.2/0 · : {}

#623
switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#624
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#625
continuing_compound_statement -> continuing_compound_statement/0.0 · '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {}

#626
continuing_compound_statement/0.0 -> continuing_compound_statement/0.0/0 · : {}

#627
continuing_compound_statement/0.0/0 -> attribute · continuing_compound_statement/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
continuing_compound_statement/0.0/0 -> · attribute continuing_compound_statement/0.0/0 : {}

#628
loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#629
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#630
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#631
for_header/0.4 -> for_update · : {}

#632
for_update -> variable_updating_statement · : {}

#633
for_update -> func_call_statement · : {}

#634
continuing_compound_statement/0.0/0 -> attribute continuing_compound_statement/0.0/0 · : {}

#635
continuing_compound_statement -> continuing_compound_statement/0.0 '{' · continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.2 -> · continuing_compound_statement/0.2/0 : {'break'}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#636
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {}
case_selectors/0.2 -> · ',' : {}

#637
case_selectors/0.1 -> case_selectors/0.1/0 · : {}

#638
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#639
case_selectors/0.1/0/0.0 -> ',' · case_selector : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#640
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}

#641
case_clause/0.2 -> ':' · : {}

#642
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {}

#643
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {}

#644
case_selectors/0.1/0/0.0 -> ',' case_selector · : {}

#645
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {}

#646
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {}

#647
case_selectors/0.2 -> ',' · : {}

#648
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 · continuing_compound_statement/0.3 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.3 -> · break_if_statement : {}

#649
continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 · : {'break'}

#650
continuing_compound_statement/0.2/0 -> statement · continuing_compound_statement/0.2/0 : {'break'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'diagnostic' diagnostic_control : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · compound_statement/0.0 '{' compound_statement/0.2 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.0 -> · compound_statement/0.0/0 : {}
compound_statement/0.0/0 -> · attribute compound_statement/0.0/0 : {}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.2/0 -> · statement continuing_compound_statement/0.2/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · for_statement/0.0 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
for_statement/0.0 -> · for_statement/0.0/0 : {}
for_statement/0.0/0 -> · attribute for_statement/0.0/0 : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_statement -> · if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.0 -> · if_statement/0.0/0 : {}
if_statement/0.0/0 -> · attribute if_statement/0.0/0 : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.0 -> · loop_statement/0.0/0 : {}
loop_statement/0.0/0 -> · attribute loop_statement/0.0/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · switch_statement/0.0 'switch' expression switch_body : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
switch_statement/0.0 -> · switch_statement/0.0/0 : {}
switch_statement/0.0/0 -> · attribute switch_statement/0.0/0 : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · while_statement/0.0 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
while_statement/0.0 -> · while_statement/0.0/0 : {}
while_statement/0.0/0 -> · attribute while_statement/0.0/0 : {}

#651
continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 · : {'break'}

#652
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 · '}' : {}

#653
continuing_compound_statement/0.3 -> break_if_statement · : {}

#654
break_if_statement -> 'break' · 'if' expression ';' : {}

#655
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · callable argument_expression_list : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#656
continuing_compound_statement -> continuing_compound_statement/0.0 '{' continuing_compound_statement/0.2 continuing_compound_statement/0.3 '}' · : {}

#657
break_if_statement -> 'break' 'if' expression · ';' : {}

#658
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 global_directive -> diagnostic_directive ·
r#2 global_directive -> enable_directive ·
r#3 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#4 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#5 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#6 global_decl -> ';' ·
r#7 global_decl -> struct_decl ·
r#8 global_decl -> function_decl ·
r#9 attribute -> '@' 'const' ·
r#10 attribute -> '@' 'invariant' ·
r#11 attribute -> '@' 'vertex' ·
r#12 attribute -> '@' 'fragment' ·
r#13 attribute -> '@' 'compute' ·
r#14 global_decl -> static_assert_statement ';' ·
r#15 global_decl -> type_alias_decl ';' ·
r#16 global_decl -> global_constant_decl ';' ·
r#17 global_decl -> global_variable_decl ';' ·
r#18 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#19 diagnostic_directive -> 'diagnostic' diagnostic_control ';' ·
r#20 enable_directive -> 'enable' extension_name ';' ·
r#21 variable_decl/0.1 -> variable_qualifier ·
r#22 struct_decl -> 'struct' ident struct_body_decl ·
r#23 function_decl -> function_decl/0.0 function_header compound_statement ·
r#24 multiplicative_operator -> '*' ·
r#25 multiplicative_operator -> '/' ·
r#26 multiplicative_operator -> '%' ·
r#27 additive_operator -> '+' ·
r#28 additive_operator -> '-' ·
r#29 attribute -> '@' 'diagnostic' diagnostic_control ·
r#30 diagnostic_control -> '(' severity_control_name ',' diagnostic_rule_name attrib_end ·
r#31 statement -> ';' ·
r#32 statement -> if_statement ·
r#33 statement -> switch_statement ·
r#34 statement -> loop_statement ·
r#35 statement -> for_statement ·
r#36 statement -> while_statement ·
r#37 statement -> compound_statement ·
r#38 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#39 attribute -> '@' 'size' '(' expression attrib_end ·
r#40 attribute -> '@' 'location' '(' expression attrib_end ·
r#41 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#42 attribute -> '@' 'id' '(' expression attrib_end ·
r#43 attribute -> '@' 'group' '(' expression attrib_end ·
r#44 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#45 attribute -> '@' 'binding' '(' expression attrib_end ·
r#46 attribute -> '@' 'align' '(' expression attrib_end ·
r#47 assignment_statement/0.1 -> '=' ·
r#48 assignment_statement/0.1 -> compound_assignment_operator ·
r#49 compound_assignment_operator -> '+=' ·
r#50 compound_assignment_operator -> '-=' ·
r#51 compound_assignment_operator -> '*=' ·
r#52 compound_assignment_operator -> '/=' ·
r#53 compound_assignment_operator -> '%=' ·
r#54 compound_assignment_operator -> '&=' ·
r#55 compound_assignment_operator -> '|=' ·
r#56 compound_assignment_operator -> '^=' ·
r#57 compound_assignment_operator -> '>>=' ·
r#58 compound_assignment_operator -> '<<=' ·
r#59 statement -> static_assert_statement ';' ·
r#60 statement -> variable_updating_statement ';' ·
r#61 statement -> 'discard' ';' ·
r#62 statement -> continue_statement ';' ·
r#63 statement -> break_statement ';' ·
r#64 statement -> variable_statement ';' ·
r#65 statement -> func_call_statement ';' ·
r#66 statement -> return_statement ';' ·
r#67 compound_statement -> compound_statement/0.0 '{' compound_statement/0.2 '}' ·
r#68 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#69 attrib_end -> attrib_end/0.0 ')' ·
r#70 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#71 if_statement/0.2 -> if_statement/0.2/0 ·
r#72 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#73 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#74 while_statement -> while_statement/0.0 'while' expression compound_statement ·
r#75 switch_statement -> switch_statement/0.0 'switch' expression switch_body ·
r#76 if_statement/0.2/0 -> else_if_clause if_statement/0.2/0 ·
r#77 if_statement -> if_statement/0.0 if_clause if_statement/0.2 if_statement/0.3 ·
r#78 if_statement/0.3 -> else_clause ·
r#79 if_clause -> 'if' expression compound_statement ·
r#80 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#81 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#82 else_clause -> 'else' compound_statement ·
r#83 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#84 for_statement -> for_statement/0.0 'for' '(' for_header ')' compound_statement ·
r#85 else_if_clause -> 'else' 'if' expression compound_statement ·
r#86 switch_body -> switch_body/0.0 '{' switch_body/0.2 '}' ·
r#87 loop_statement -> loop_statement/0.0 'loop' loop_statement/0.2 '{' loop_statement/0.4 loop_statement/0.5 '}' ·
r#88 continuing_compound_statement/0.2 -> continuing_compound_statement/0.2/0 ·
r#89 continuing_compound_statement/0.2/0 -> statement continuing_compound_statement/0.2/0 ·

=Action:
[#0 'diagnostic']: s#7
[#0 'enable']: s#8
[#1 EndOfText]: acc
[#2 ';']: s#17
[#2 '@']: s#35
[#2 'const']: s#25
[#2 'static_assert']: s#30
[#2 'struct']: s#28
[#2 'type']: s#27
[#3 EndOfText]: r#0
[#4 'diagnostic']: s#7
[#4 'enable']: s#8
[#5 EndOfText]: r#1
[#6 EndOfText]: r#2
[#7 '(']: s#12
[#8 'f16']: s#10
[#9 ';']: s#168
[#11 ';']: s#167
[#12 'error']: s#163
[#12 'info']: s#165
[#12 'off']: s#166
[#12 'warning']: s#164
[#13 EndOfText]: r#3
[#14 EndOfText]: r#4
[#15 EndOfText]: r#5
[#16 ';']: s#17
[#16 '@']: s#35
[#16 'const']: s#25
[#16 'static_assert']: s#30
[#16 'struct']: s#28
[#16 'type']: s#27
[#17 EndOfText]: r#6
[#18 ';']: s#160
[#19 ';']: s#159
[#20 ';']: s#158
[#21 EndOfText]: r#7
[#22 EndOfText]: r#8
[#23 ';']: s#157
[#24 'var']: s#156
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#26 'override']: s#152
[#27 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#28 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#29 'fn']: s#149
[#30 '!']: s#68
[#30 '&']: s#71
[#30 '(']: s#86
[#30 '*']: s#70
[#30 '-']: s#67
[#30 'array']: s#82
[#30 'atomic']: s#94
[#30 'bitcast']: s#77
[#30 'bool']: s#87
[#30 'f16']: s#89
[#30 'f32']: s#88
[#30 'false']: s#113
[#30 'i32']: s#90
[#30 'mat2x2']: s#99
[#30 'mat2x3']: s#100
[#30 'mat2x4']: s#101
[#30 'mat3x2']: s#102
[#30 'mat3x3']: s#103
[#30 'mat3x4']: s#104
[#30 'mat4x2']: s#105
[#30 'mat4x3']: s#106
[#30 'mat4x4']: s#107
[#30 'ptr']: s#92
[#30 'sampler']: s#130
[#30 'sampler_comparison']: s#131
[#30 'texture_1d']: s#137
[#30 'texture_2d']: s#138
[#30 'texture_2d_array']: s#139
[#30 'texture_3d']: s#140
[#30 'texture_cube']: s#141
[#30 'texture_cube_array']: s#142
[#30 'texture_depth_2d']: s#132
[#30 'texture_depth_2d_array']: s#133
[#30 'texture_depth_cube']: s#134
[#30 'texture_depth_cube_array']: s#135
[#30 'texture_depth_multisampled_2d']: s#136
[#30 'texture_multisampled_2d']: s#143
[#30 'texture_storage_1d']: s#144
[#30 'texture_storage_2d']: s#145
[#30 'texture_storage_2d_array']: s#146
[#30 'texture_storage_3d']: s#147
[#30 'true']: s#112
[#30 'u32']: s#91
[#30 'vec2']: s#96
[#30 'vec3']: s#97
[#30 'vec4']: s#98
[#30 '~']: s#69
[#30 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#30 /0[fh]/]: s#122
[#30 /0[iu]?/]: s#119
[#30 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#30 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#30 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#30 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#30 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#30 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#30 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#30 /[1-9][0-9]*[fh]/]: s#123
[#30 /[1-9][0-9]*[iu]?/]: s#120
[#34 '@']: s#35
[#35 'align']: s#36
[#35 'binding']: s#37
[#35 'builtin']: s#38
[#35 'compute']: s#50
[#35 'const']: s#39
[#35 'diagnostic']: s#40
[#35 'fragment']: s#49
[#35 'group']: s#41
[#35 'id']: s#42
[#35 'interpolate']: s#43
[#35 'invariant']: s#44
[#35 'location']: s#45
[#35 'size']: s#46
[#35 'vertex']: s#48
[#35 'workgroup_size']: s#47
[#36 '(']: s#237
[#37 '(']: s#236
[#38 '(']: s#235
[#39 'f16']: r#9
[#39 'texture_multisampled_2d']: r#9
[#40 '(']: s#12
[#41 '(']: s#233
[#42 '(']: s#232
[#43 '(']: s#231
[#44 'f16']: r#10
[#44 'texture_multisampled_2d']: r#10
[#45 '(']: s#230
[#46 '(']: s#229
[#47 '(']: s#228
[#48 'f16']: r#11
[#48 'texture_multisampled_2d']: r#11
[#49 'f16']: r#12
[#49 'texture_multisampled_2d']: r#12
[#50 'f16']: r#13
[#50 'texture_multisampled_2d']: r#13
[#56 '||']: s#227
[#57 '&&']: s#226
[#59 '!=']: s#225
[#59 '<']: s#220
[#59 '<=']: s#222
[#59 '==']: s#224
[#59 '>']: s#221
[#59 '>=']: s#223
[#60 '&']: s#219
[#61 '|']: s#218
[#62 '^']: s#217
[#63 '+']: s#215
[#63 '-']: s#216
[#64 '<<']: s#212
[#64 '>>']: s#213
[#65 '%']: s#211
[#65 '*']: s#209
[#65 '/']: s#210
[#67 '!']: s#68
[#67 '&']: s#71
[#67 '(']: s#86
[#67 '*']: s#70
[#67 '-']: s#67
[#67 'array']: s#82
[#67 'atomic']: s#94
[#67 'bitcast']: s#77
[#67 'bool']: s#87
[#67 'f16']: s#89
[#67 'f32']: s#88
[#67 'false']: s#113
[#67 'i32']: s#90
[#67 'mat2x2']: s#99
[#67 'mat2x3']: s#100
[#67 'mat2x4']: s#101
[#67 'mat3x2']: s#102
[#67 'mat3x3']: s#103
[#67 'mat3x4']: s#104
[#67 'mat4x2']: s#105
[#67 'mat4x3']: s#106
[#67 'mat4x4']: s#107
[#67 'ptr']: s#92
[#67 'sampler']: s#130
[#67 'sampler_comparison']: s#131
[#67 'texture_1d']: s#137
[#67 'texture_2d']: s#138
[#67 'texture_2d_array']: s#139
[#67 'texture_3d']: s#140
[#67 'texture_cube']: s#141
[#67 'texture_cube_array']: s#142
[#67 'texture_depth_2d']: s#132
[#67 'texture_depth_2d_array']: s#133
[#67 'texture_depth_cube']: s#134
[#67 'texture_depth_cube_array']: s#135
[#67 'texture_depth_multisampled_2d']: s#136
[#67 'texture_multisampled_2d']: s#143
[#67 'texture_storage_1d']: s#144
[#67 'texture_storage_2d']: s#145
[#67 'texture_storage_2d_array']: s#146
[#67 'texture_storage_3d']: s#147
[#67 'true']: s#112
[#67 'u32']: s#91
[#67 'vec2']: s#96
[#67 'vec3']: s#97
[#67 'vec4']: s#98
[#67 '~']: s#69
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#67 /0[fh]/]: s#122
[#67 /0[iu]?/]: s#119
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#67 /[1-9][0-9]*[fh]/]: s#123
[#67 /[1-9][0-9]*[iu]?/]: s#120
[#68 '!']: s#68
[#68 '&']: s#71
[#68 '(']: s#86
[#68 '*']: s#70
[#68 '-']: s#67
[#68 'array']: s#82
[#68 'atomic']: s#94
[#68 'bitcast']: s#77
[#68 'bool']: s#87
[#68 'f16']: s#89
[#68 'f32']: s#88
[#68 'false']: s#113
[#68 'i32']: s#90
[#68 'mat2x2']: s#99
[#68 'mat2x3']: s#100
[#68 'mat2x4']: s#101
[#68 'mat3x2']: s#102
[#68 'mat3x3']: s#103
[#68 'mat3x4']: s#104
[#68 'mat4x2']: s#105
[#68 'mat4x3']: s#106
[#68 'mat4x4']: s#107
[#68 'ptr']: s#92
[#68 'sampler']: s#130
[#68 'sampler_comparison']: s#131
[#68 'texture_1d']: s#137
[#68 'texture_2d']: s#138
[#68 'texture_2d_array']: s#139
[#68 'texture_3d']: s#140
[#68 'texture_cube']: s#141
[#68 'texture_cube_array']: s#142
[#68 'texture_depth_2d']: s#132
[#68 'texture_depth_2d_array']: s#133
[#68 'texture_depth_cube']: s#134
[#68 'texture_depth_cube_array']: s#135
[#68 'texture_depth_multisampled_2d']: s#136
[#68 'texture_multisampled_2d']: s#143
[#68 'texture_storage_1d']: s#144
[#68 'texture_storage_2d']: s#145
[#68 'texture_storage_2d_array']: s#146
[#68 'texture_storage_3d']: s#147
[#68 'true']: s#112
[#68 'u32']: s#91
[#68 'vec2']: s#96
[#68 'vec3']: s#97
[#68 'vec4']: s#98
[#68 '~']: s#69
[#68 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#68 /0[fh]/]: s#122
[#68 /0[iu]?/]: s#119
[#68 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#68 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#68 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#68 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#68 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#68 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#68 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#68 /[1-9][0-9]*[fh]/]: s#123
[#68 /[1-9][0-9]*[iu]?/]: s#120
[#69 '!']: s#68
[#69 '&']: s#71
[#69 '(']: s#86
[#69 '*']: s#70
[#69 '-']: s#67
[#69 'array']: s#82
[#69 'atomic']: s#94
[#69 'bitcast']: s#77
[#69 'bool']: s#87
[#69 'f16']: s#89
[#69 'f32']: s#88
[#69 'false']: s#113
[#69 'i32']: s#90
[#69 'mat2x2']: s#99
[#69 'mat2x3']: s#100
[#69 'mat2x4']: s#101
[#69 'mat3x2']: s#102
[#69 'mat3x3']: s#103
[#69 'mat3x4']: s#104
[#69 'mat4x2']: s#105
[#69 'mat4x3']: s#106
[#69 'mat4x4']: s#107
[#69 'ptr']: s#92
[#69 'sampler']: s#130
[#69 'sampler_comparison']: s#131
[#69 'texture_1d']: s#137
[#69 'texture_2d']: s#138
[#69 'texture_2d_array']: s#139
[#69 'texture_3d']: s#140
[#69 'texture_cube']: s#141
[#69 'texture_cube_array']: s#142
[#69 'texture_depth_2d']: s#132
[#69 'texture_depth_2d_array']: s#133
[#69 'texture_depth_cube']: s#134
[#69 'texture_depth_cube_array']: s#135
[#69 'texture_depth_multisampled_2d']: s#136
[#69 'texture_multisampled_2d']: s#143
[#69 'texture_storage_1d']: s#144
[#69 'texture_storage_2d']: s#145
[#69 'texture_storage_2d_array']: s#146
[#69 'texture_storage_3d']: s#147
[#69 'true']: s#112
[#69 'u32']: s#91
[#69 'vec2']: s#96
[#69 'vec3']: s#97
[#69 'vec4']: s#98
[#69 '~']: s#69
[#69 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#69 /0[fh]/]: s#122
[#69 /0[iu]?/]: s#119
[#69 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#69 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#69 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#69 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#69 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#69 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#69 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#69 /[1-9][0-9]*[fh]/]: s#123
[#69 /[1-9][0-9]*[iu]?/]: s#120
[#70 '!']: s#68
[#70 '&']: s#71
[#70 '(']: s#86
[#70 '*']: s#70
[#70 '-']: s#67
[#70 'array']: s#82
[#70 'atomic']: s#94
[#70 'bitcast']: s#77
[#70 'bool']: s#87
[#70 'f16']: s#89
[#70 'f32']: s#88
[#70 'false']: s#113
[#70 'i32']: s#90
[#70 'mat2x2']: s#99
[#70 'mat2x3']: s#100
[#70 'mat2x4']: s#101
[#70 'mat3x2']: s#102
[#70 'mat3x3']: s#103
[#70 'mat3x4']: s#104
[#70 'mat4x2']: s#105
[#70 'mat4x3']: s#106
[#70 'mat4x4']: s#107
[#70 'ptr']: s#92
[#70 'sampler']: s#130
[#70 'sampler_comparison']: s#131
[#70 'texture_1d']: s#137
[#70 'texture_2d']: s#138
[#70 'texture_2d_array']: s#139
[#70 'texture_3d']: s#140
[#70 'texture_cube']: s#141
[#70 'texture_cube_array']: s#142
[#70 'texture_depth_2d']: s#132
[#70 'texture_depth_2d_array']: s#133
[#70 'texture_depth_cube']: s#134
[#70 'texture_depth_cube_array']: s#135
[#70 'texture_depth_multisampled_2d']: s#136
[#70 'texture_multisampled_2d']: s#143
[#70 'texture_storage_1d']: s#144
[#70 'texture_storage_2d']: s#145
[#70 'texture_storage_2d_array']: s#146
[#70 'texture_storage_3d']: s#147
[#70 'true']: s#112
[#70 'u32']: s#91
[#70 'vec2']: s#96
[#70 'vec3']: s#97
[#70 'vec4']: s#98
[#70 '~']: s#69
[#70 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#70 /0[fh]/]: s#122
[#70 /0[iu]?/]: s#119
[#70 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#70 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#70 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#70 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#70 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#70 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#70 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#70 /[1-9][0-9]*[fh]/]: s#123
[#70 /[1-9][0-9]*[iu]?/]: s#120
[#71 '!']: s#68
[#71 '&']: s#71
[#71 '(']: s#86
[#71 '*']: s#70
[#71 '-']: s#67
[#71 'array']: s#82
[#71 'atomic']: s#94
[#71 'bitcast']: s#77
[#71 'bool']: s#87
[#71 'f16']: s#89
[#71 'f32']: s#88
[#71 'false']: s#113
[#71 'i32']: s#90
[#71 'mat2x2']: s#99
[#71 'mat2x3']: s#100
[#71 'mat2x4']: s#101
[#71 'mat3x2']: s#102
[#71 'mat3x3']: s#103
[#71 'mat3x4']: s#104
[#71 'mat4x2']: s#105
[#71 'mat4x3']: s#106
[#71 'mat4x4']: s#107
[#71 'ptr']: s#92
[#71 'sampler']: s#130
[#71 'sampler_comparison']: s#131
[#71 'texture_1d']: s#137
[#71 'texture_2d']: s#138
[#71 'texture_2d_array']: s#139
[#71 'texture_3d']: s#140
[#71 'texture_cube']: s#141
[#71 'texture_cube_array']: s#142
[#71 'texture_depth_2d']: s#132
[#71 'texture_depth_2d_array']: s#133
[#71 'texture_depth_cube']: s#134
[#71 'texture_depth_cube_array']: s#135
[#71 'texture_depth_multisampled_2d']: s#136
[#71 'texture_multisampled_2d']: s#143
[#71 'texture_storage_1d']: s#144
[#71 'texture_storage_2d']: s#145
[#71 'texture_storage_2d_array']: s#146
[#71 'texture_storage_3d']: s#147
[#71 'true']: s#112
[#71 'u32']: s#91
[#71 'vec2']: s#96
[#71 'vec3']: s#97
[#71 'vec4']: s#98
[#71 '~']: s#69
[#71 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#71 /0[fh]/]: s#122
[#71 /0[iu]?/]: s#119
[#71 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#71 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#71 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#71 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#71 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#71 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#71 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#71 /[1-9][0-9]*[fh]/]: s#123
[#71 /[1-9][0-9]*[iu]?/]: s#120
[#72 '.']: s#202
[#72 '[']: s#201
[#74 '(']: s#198
[#77 '<']: s#196
[#80 '<']: s#195
[#81 '<']: s#194
[#82 '<']: s#193
[#86 '!']: s#68
[#86 '&']: s#71
[#86 '(']: s#86
[#86 '*']: s#70
[#86 '-']: s#67
[#86 'array']: s#82
[#86 'atomic']: s#94
[#86 'bitcast']: s#77
[#86 'bool']: s#87
[#86 'f16']: s#89
[#86 'f32']: s#88
[#86 'false']: s#113
[#86 'i32']: s#90
[#86 'mat2x2']: s#99
[#86 'mat2x3']: s#100
[#86 'mat2x4']: s#101
[#86 'mat3x2']: s#102
[#86 'mat3x3']: s#103
[#86 'mat3x4']: s#104
[#86 'mat4x2']: s#105
[#86 'mat4x3']: s#106
[#86 'mat4x4']: s#107
[#86 'ptr']: s#92
[#86 'sampler']: s#130
[#86 'sampler_comparison']: s#131
[#86 'texture_1d']: s#137
[#86 'texture_2d']: s#138
[#86 'texture_2d_array']: s#139
[#86 'texture_3d']: s#140
[#86 'texture_cube']: s#141
[#86 'texture_cube_array']: s#142
[#86 'texture_depth_2d']: s#132
[#86 'texture_depth_2d_array']: s#133
[#86 'texture_depth_cube']: s#134
[#86 'texture_depth_cube_array']: s#135
[#86 'texture_depth_multisampled_2d']: s#136
[#86 'texture_multisampled_2d']: s#143
[#86 'texture_storage_1d']: s#144
[#86 'texture_storage_2d']: s#145
[#86 'texture_storage_2d_array']: s#146
[#86 'texture_storage_3d']: s#147
[#86 'true']: s#112
[#86 'u32']: s#91
[#86 'vec2']: s#96
[#86 'vec3']: s#97
[#86 'vec4']: s#98
[#86 '~']: s#69
[#86 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#86 /0[fh]/]: s#122
[#86 /0[iu]?/]: s#119
[#86 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#86 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#86 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#86 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#86 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#86 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#86 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#86 /[1-9][0-9]*[fh]/]: s#123
[#86 /[1-9][0-9]*[iu]?/]: s#120
[#92 '<']: s#191
[#94 '<']: s#190
[#116 '<']: s#189
[#117 '<']: s#188
[#118 '<']: s#187
[#148 '@']: s#35
[#149 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#150 '{']: s#181
[#151 '=']: s#179
[#152 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#153 '=']: s#177
[#154 ':']: s#176
[#155 '=']: s#174
[#156 '<']: s#172
[#157 EndOfText]: r#14
[#158 EndOfText]: r#15
[#159 EndOfText]: r#16
[#160 EndOfText]: r#17
[#161 EndOfText]: r#18
[#162 ',']: s#169
[#167 EndOfText]: r#19
[#168 EndOfText]: r#20
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#347
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#171 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#21
[#172 'function']: s#305
[#172 'private']: s#306
[#172 'storage']: s#309
[#172 'uniform']: s#308
[#172 'workgroup']: s#307
[#174 '!']: s#68
[#174 '&']: s#71
[#174 '(']: s#86
[#174 '*']: s#70
[#174 '-']: s#67
[#174 'array']: s#82
[#174 'atomic']: s#94
[#174 'bitcast']: s#77
[#174 'bool']: s#87
[#174 'f16']: s#89
[#174 'f32']: s#88
[#174 'false']: s#113
[#174 'i32']: s#90
[#174 'mat2x2']: s#99
[#174 'mat2x3']: s#100
[#174 'mat2x4']: s#101
[#174 'mat3x2']: s#102
[#174 'mat3x3']: s#103
[#174 'mat3x4']: s#104
[#174 'mat4x2']: s#105
[#174 'mat4x3']: s#106
[#174 'mat4x4']: s#107
[#174 'ptr']: s#92
[#174 'sampler']: s#130
[#174 'sampler_comparison']: s#131
[#174 'texture_1d']: s#137
[#174 'texture_2d']: s#138
[#174 'texture_2d_array']: s#139
[#174 'texture_3d']: s#140
[#174 'texture_cube']: s#141
[#174 'texture_cube_array']: s#142
[#174 'texture_depth_2d']: s#132
[#174 'texture_depth_2d_array']: s#133
[#174 'texture_depth_cube']: s#134
[#174 'texture_depth_cube_array']: s#135
[#174 'texture_depth_multisampled_2d']: s#136
[#174 'texture_multisampled_2d']: s#143
[#174 'texture_storage_1d']: s#144
[#174 'texture_storage_2d']: s#145
[#174 'texture_storage_2d_array']: s#146
[#174 'texture_storage_3d']: s#147
[#174 'true']: s#112
[#174 'u32']: s#91
[#174 'vec2']: s#96
[#174 'vec3']: s#97
[#174 'vec4']: s#98
[#174 '~']: s#69
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#174 /0[fh]/]: s#122
[#174 /0[iu]?/]: s#119
[#174 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#174 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#174 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#174 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#174 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#174 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#174 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#174 /[1-9][0-9]*[fh]/]: s#123
[#174 /[1-9][0-9]*[iu]?/]: s#120
[#176 'array']: s#299
[#176 'atomic']: s#94
[#176 'bool']: s#87
[#176 'f16']: s#89
[#176 'f32']: s#88
[#176 'i32']: s#90
[#176 'mat2x2']: s#99
[#176 'mat2x3']: s#100
[#176 'mat2x4']: s#101
[#176 'mat3x2']: s#102
[#176 'mat3x3']: s#103
[#176 'mat3x4']: s#104
[#176 'mat4x2']: s#105
[#176 'mat4x3']: s#106
[#176 'mat4x4']: s#107
[#176 'ptr']: s#92
[#176 'sampler']: s#130
[#176 'sampler_comparison']: s#131
[#176 'texture_1d']: s#137
[#176 'texture_2d']: s#138
[#176 'texture_2d_array']: s#139
[#176 'texture_3d']: s#140
[#176 'texture_cube']: s#141
[#176 'texture_cube_array']: s#142
[#176 'texture_depth_2d']: s#132
[#176 'texture_depth_2d_array']: s#133
[#176 'texture_depth_cube']: s#134
[#176 'texture_depth_cube_array']: s#135
[#176 'texture_depth_multisampled_2d']: s#136
[#176 'texture_multisampled_2d']: s#143
[#176 'texture_storage_1d']: s#144
[#176 'texture_storage_2d']: s#145
[#176 'texture_storage_2d_array']: s#146
[#176 'texture_storage_3d']: s#147
[#176 'u32']: s#91
[#176 'vec2']: s#96
[#176 'vec3']: s#97
[#176 'vec4']: s#98
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#177 '!']: s#68
[#177 '&']: s#71
[#177 '(']: s#86
[#177 '*']: s#70
[#177 '-']: s#67
[#177 'array']: s#82
[#177 'atomic']: s#94
[#177 'bitcast']: s#77
[#177 'bool']: s#87
[#177 'f16']: s#89
[#177 'f32']: s#88
[#177 'false']: s#113
[#177 'i32']: s#90
[#177 'mat2x2']: s#99
[#177 'mat2x3']: s#100
[#177 'mat2x4']: s#101
[#177 'mat3x2']: s#102
[#177 'mat3x3']: s#103
[#177 'mat3x4']: s#104
[#177 'mat4x2']: s#105
[#177 'mat4x3']: s#106
[#177 'mat4x4']: s#107
[#177 'ptr']: s#92
[#177 'sampler']: s#130
[#177 'sampler_comparison']: s#131
[#177 'texture_1d']: s#137
[#177 'texture_2d']: s#138
[#177 'texture_2d_array']: s#139
[#177 'texture_3d']: s#140
[#177 'texture_cube']: s#141
[#177 'texture_cube_array']: s#142
[#177 'texture_depth_2d']: s#132
[#177 'texture_depth_2d_array']: s#133
[#177 'texture_depth_cube']: s#134
[#177 'texture_depth_cube_array']: s#135
[#177 'texture_depth_multisampled_2d']: s#136
[#177 'texture_multisampled_2d']: s#143
[#177 'texture_storage_1d']: s#144
[#177 'texture_storage_2d']: s#145
[#177 'texture_storage_2d_array']: s#146
[#177 'texture_storage_3d']: s#147
[#177 'true']: s#112
[#177 'u32']: s#91
[#177 'vec2']: s#96
[#177 'vec3']: s#97
[#177 'vec4']: s#98
[#177 '~']: s#69
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#177 /0[fh]/]: s#122
[#177 /0[iu]?/]: s#119
[#177 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#177 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#177 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#177 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#177 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#177 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#177 /[1-9][0-9]*[fh]/]: s#123
[#177 /[1-9][0-9]*[iu]?/]: s#120
[#178 '=']: s#340
[#179 'array']: s#299
[#179 'atomic']: s#94
[#179 'bool']: s#87
[#179 'f16']: s#89
[#179 'f32']: s#88
[#179 'i32']: s#90
[#179 'mat2x2']: s#99
[#179 'mat2x3']: s#100
[#179 'mat2x4']: s#101
[#179 'mat3x2']: s#102
[#179 'mat3x3']: s#103
[#179 'mat3x4']: s#104
[#179 'mat4x2']: s#105
[#179 'mat4x3']: s#106
[#179 'mat4x4']: s#107
[#179 'ptr']: s#92
[#179 'sampler']: s#130
[#179 'sampler_comparison']: s#131
[#179 'texture_1d']: s#137
[#179 'texture_2d']: s#138
[#179 'texture_2d_array']: s#139
[#179 'texture_3d']: s#140
[#179 'texture_cube']: s#141
[#179 'texture_cube_array']: s#142
[#179 'texture_depth_2d']: s#132
[#179 'texture_depth_2d_array']: s#133
[#179 'texture_depth_cube']: s#134
[#179 'texture_depth_cube_array']: s#135
[#179 'texture_depth_multisampled_2d']: s#136
[#179 'texture_multisampled_2d']: s#143
[#179 'texture_storage_1d']: s#144
[#179 'texture_storage_2d']: s#145
[#179 'texture_storage_2d_array']: s#146
[#179 'texture_storage_3d']: s#147
[#179 'u32']: s#91
[#179 'vec2']: s#96
[#179 'vec3']: s#97
[#179 'vec4']: s#98
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#180 EndOfText]: r#22
[#181 '@']: s#35
[#182 '(']: s#333
[#183 EndOfText]: r#23
[#184 '{']: s#332
[#186 '@']: s#35
[#187 'bgra8unorm']: s#330
[#187 'r32float']: s#323
[#187 'r32sint']: s#322
[#187 'r32uint']: s#321
[#187 'rg32float']: s#326
[#187 'rg32sint']: s#325
[#187 'rg32uint']: s#324
[#187 'rgba16float']: s#320
[#187 'rgba16sint']: s#319
[#187 'rgba16uint']: s#318
[#187 'rgba32float']: s#329
[#187 'rgba32sint']: s#328
[#187 'rgba32uint']: s#327
[#187 'rgba8sint']: s#317
[#187 'rgba8snorm']: s#315
[#187 'rgba8uint']: s#316
[#187 'rgba8unorm']: s#314
[#188 'array']: s#299
[#188 'atomic']: s#94
[#188 'bool']: s#87
[#188 'f16']: s#89
[#188 'f32']: s#88
[#188 'i32']: s#90
[#188 'mat2x2']: s#99
[#188 'mat2x3']: s#100
[#188 'mat2x4']: s#101
[#188 'mat3x2']: s#102
[#188 'mat3x3']: s#103
[#188 'mat3x4']: s#104
[#188 'mat4x2']: s#105
[#188 'mat4x3']: s#106
[#188 'mat4x4']: s#107
[#188 'ptr']: s#92
[#188 'sampler']: s#130
[#188 'sampler_comparison']: s#131
[#188 'texture_1d']: s#137
[#188 'texture_2d']: s#138
[#188 'texture_2d_array']: s#139
[#188 'texture_3d']: s#140
[#188 'texture_cube']: s#141
[#188 'texture_cube_array']: s#142
[#188 'texture_depth_2d']: s#132
[#188 'texture_depth_2d_array']: s#133
[#188 'texture_depth_cube']: s#134
[#188 'texture_depth_cube_array']: s#135
[#188 'texture_depth_multisampled_2d']: s#136
[#188 'texture_multisampled_2d']: s#143
[#188 'texture_storage_1d']: s#144
[#188 'texture_storage_2d']: s#145
[#188 'texture_storage_2d_array']: s#146
[#188 'texture_storage_3d']: s#147
[#188 'u32']: s#91
[#188 'vec2']: s#96
[#188 'vec3']: s#97
[#188 'vec4']: s#98
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#189 'array']: s#299
[#189 'atomic']: s#94
[#189 'bool']: s#87
[#189 'f16']: s#89
[#189 'f32']: s#88
[#189 'i32']: s#90
[#189 'mat2x2']: s#99
[#189 'mat2x3']: s#100
[#189 'mat2x4']: s#101
[#189 'mat3x2']: s#102
[#189 'mat3x3']: s#103
[#189 'mat3x4']: s#104
[#189 'mat4x2']: s#105
[#189 'mat4x3']: s#106
[#189 'mat4x4']: s#107
[#189 'ptr']: s#92
[#189 'sampler']: s#130
[#189 'sampler_comparison']: s#131
[#189 'texture_1d']: s#137
[#189 'texture_2d']: s#138
[#189 'texture_2d_array']: s#139
[#189 'texture_3d']: s#140
[#189 'texture_cube']: s#141
[#189 'texture_cube_array']: s#142
[#189 'texture_depth_2d']: s#132
[#189 'texture_depth_2d_array']: s#133
[#189 'texture_depth_cube']: s#134
[#189 'texture_depth_cube_array']: s#135
[#189 'texture_depth_multisampled_2d']: s#136
[#189 'texture_multisampled_2d']: s#143
[#189 'texture_storage_1d']: s#144
[#189 'texture_storage_2d']: s#145
[#189 'texture_storage_2d_array']: s#146
[#189 'texture_storage_3d']: s#147
[#189 'u32']: s#91
[#189 'vec2']: s#96
[#189 'vec3']: s#97
[#189 'vec4']: s#98
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#190 'array']: s#299
[#190 'atomic']: s#94
[#190 'bool']: s#87
[#190 'f16']: s#89
[#190 'f32']: s#88
[#190 'i32']: s#90
[#190 'mat2x2']: s#99
[#190 'mat2x3']: s#100
[#190 'mat2x4']: s#101
[#190 'mat3x2']: s#102
[#190 'mat3x3']: s#103
[#190 'mat3x4']: s#104
[#190 'mat4x2']: s#105
[#190 'mat4x3']: s#106
[#190 'mat4x4']: s#107
[#190 'ptr']: s#92
[#190 'sampler']: s#130
[#190 'sampler_comparison']: s#131
[#190 'texture_1d']: s#137
[#190 'texture_2d']: s#138
[#190 'texture_2d_array']: s#139
[#190 'texture_3d']: s#140
[#190 'texture_cube']: s#141
[#190 'texture_cube_array']: s#142
[#190 'texture_depth_2d']: s#132
[#190 'texture_depth_2d_array']: s#133
[#190 'texture_depth_cube']: s#134
[#190 'texture_depth_cube_array']: s#135
[#190 'texture_depth_multisampled_2d']: s#136
[#190 'texture_multisampled_2d']: s#143
[#190 'texture_storage_1d']: s#144
[#190 'texture_storage_2d']: s#145
[#190 'texture_storage_2d_array']: s#146
[#190 'texture_storage_3d']: s#147
[#190 'u32']: s#91
[#190 'vec2']: s#96
[#190 'vec3']: s#97
[#190 'vec4']: s#98
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#191 'function']: s#305
[#191 'private']: s#306
[#191 'storage']: s#309
[#191 'uniform']: s#308
[#191 'workgroup']: s#307
[#192 ')']: s#303
[#193 'array']: s#299
[#193 'atomic']: s#94
[#193 'bool']: s#87
[#193 'f16']: s#89
[#193 'f32']: s#88
[#193 'i32']: s#90
[#193 'mat2x2']: s#99
[#193 'mat2x3']: s#100
[#193 'mat2x4']: s#101
[#193 'mat3x2']: s#102
[#193 'mat3x3']: s#103
[#193 'mat3x4']: s#104
[#193 'mat4x2']: s#105
[#193 'mat4x3']: s#106
[#193 'mat4x4']: s#107
[#193 'ptr']: s#92
[#193 'sampler']: s#130
[#193 'sampler_comparison']: s#131
[#193 'texture_1d']: s#137
[#193 'texture_2d']: s#138
[#193 'texture_2d_array']: s#139
[#193 'texture_3d']: s#140
[#193 'texture_cube']: s#141
[#193 'texture_cube_array']: s#142
[#193 'texture_depth_2d']: s#132
[#193 'texture_depth_2d_array']: s#133
[#193 'texture_depth_cube']: s#134
[#193 'texture_depth_cube_array']: s#135
[#193 'texture_depth_multisampled_2d']: s#136
[#193 'texture_multisampled_2d']: s#143
[#193 'texture_storage_1d']: s#144
[#193 'texture_storage_2d']: s#145
[#193 'texture_storage_2d_array']: s#146
[#193 'texture_storage_3d']: s#147
[#193 'u32']: s#91
[#193 'vec2']: s#96
[#193 'vec3']: s#97
[#193 'vec4']: s#98
[#193 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#194 'array']: s#299
[#194 'atomic']: s#94
[#194 'bool']: s#87
[#194 'f16']: s#89
[#194 'f32']: s#88
[#194 'i32']: s#90
[#194 'mat2x2']: s#99
[#194 'mat2x3']: s#100
[#194 'mat2x4']: s#101
[#194 'mat3x2']: s#102
[#194 'mat3x3']: s#103
[#194 'mat3x4']: s#104
[#194 'mat4x2']: s#105
[#194 'mat4x3']: s#106
[#194 'mat4x4']: s#107
[#194 'ptr']: s#92
[#194 'sampler']: s#130
[#194 'sampler_comparison']: s#131
[#194 'texture_1d']: s#137
[#194 'texture_2d']: s#138
[#194 'texture_2d_array']: s#139
[#194 'texture_3d']: s#140
[#194 'texture_cube']: s#141
[#194 'texture_cube_array']: s#142
[#194 'texture_depth_2d']: s#132
[#194 'texture_depth_2d_array']: s#133
[#194 'texture_depth_cube']: s#134
[#194 'texture_depth_cube_array']: s#135
[#194 'texture_depth_multisampled_2d']: s#136
[#194 'texture_multisampled_2d']: s#143
[#194 'texture_storage_1d']: s#144
[#194 'texture_storage_2d']: s#145
[#194 'texture_storage_2d_array']: s#146
[#194 'texture_storage_3d']: s#147
[#194 'u32']: s#91
[#194 'vec2']: s#96
[#194 'vec3']: s#97
[#194 'vec4']: s#98
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#195 'array']: s#299
[#195 'atomic']: s#94
[#195 'bool']: s#87
[#195 'f16']: s#89
[#195 'f32']: s#88
[#195 'i32']: s#90
[#195 'mat2x2']: s#99
[#195 'mat2x3']: s#100
[#195 'mat2x4']: s#101
[#195 'mat3x2']: s#102
[#195 'mat3x3']: s#103
[#195 'mat3x4']: s#104
[#195 'mat4x2']: s#105
[#195 'mat4x3']: s#106
[#195 'mat4x4']: s#107
[#195 'ptr']: s#92
[#195 'sampler']: s#130
[#195 'sampler_comparison']: s#131
[#195 'texture_1d']: s#137
[#195 'texture_2d']: s#138
[#195 'texture_2d_array']: s#139
[#195 'texture_3d']: s#140
[#195 'texture_cube']: s#141
[#195 'texture_cube_array']: s#142
[#195 'texture_depth_2d']: s#132
[#195 'texture_depth_2d_array']: s#133
[#195 'texture_depth_cube']: s#134
[#195 'texture_depth_cube_array']: s#135
[#195 'texture_depth_multisampled_2d']: s#136
[#195 'texture_multisampled_2d']: s#143
[#195 'texture_storage_1d']: s#144
[#195 'texture_storage_2d']: s#145
[#195 'texture_storage_2d_array']: s#146
[#195 'texture_storage_3d']: s#147
[#195 'u32']: s#91
[#195 'vec2']: s#96
[#195 'vec3']: s#97
[#195 'vec4']: s#98
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#196 'array']: s#299
[#196 'atomic']: s#94
[#196 'bool']: s#87
[#196 'f16']: s#89
[#196 'f32']: s#88
[#196 'i32']: s#90
[#196 'mat2x2']: s#99
[#196 'mat2x3']: s#100
[#196 'mat2x4']: s#101
[#196 'mat3x2']: s#102
[#196 'mat3x3']: s#103
[#196 'mat3x4']: s#104
[#196 'mat4x2']: s#105
[#196 'mat4x3']: s#106
[#196 'mat4x4']: s#107
[#196 'ptr']: s#92
[#196 'sampler']: s#130
[#196 'sampler_comparison']: s#131
[#196 'texture_1d']: s#137
[#196 'texture_2d']: s#138
[#196 'texture_2d_array']: s#139
[#196 'texture_3d']: s#140
[#196 'texture_cube']: s#141
[#196 'texture_cube_array']: s#142
[#196 'texture_depth_2d']: s#132
[#196 'texture_depth_2d_array']: s#133
[#196 'texture_depth_cube']: s#134
[#196 'texture_depth_cube_array']: s#135
[#196 'texture_depth_multisampled_2d']: s#136
[#196 'texture_multisampled_2d']: s#143
[#196 'texture_storage_1d']: s#144
[#196 'texture_storage_2d']: s#145
[#196 'texture_storage_2d_array']: s#146
[#196 'texture_storage_3d']: s#147
[#196 'u32']: s#91
[#196 'vec2']: s#96
[#196 'vec3']: s#97
[#196 'vec4']: s#98
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#198 '!']: s#68
[#198 '&']: s#71
[#198 '(']: s#86
[#198 '*']: s#70
[#198 '-']: s#67
[#198 'array']: s#82
[#198 'atomic']: s#94
[#198 'bitcast']: s#77
[#198 'bool']: s#87
[#198 'f16']: s#89
[#198 'f32']: s#88
[#198 'false']: s#113
[#198 'i32']: s#90
[#198 'mat2x2']: s#99
[#198 'mat2x3']: s#100
[#198 'mat2x4']: s#101
[#198 'mat3x2']: s#102
[#198 'mat3x3']: s#103
[#198 'mat3x4']: s#104
[#198 'mat4x2']: s#105
[#198 'mat4x3']: s#106
[#198 'mat4x4']: s#107
[#198 'ptr']: s#92
[#198 'sampler']: s#130
[#198 'sampler_comparison']: s#131
[#198 'texture_1d']: s#137
[#198 'texture_2d']: s#138
[#198 'texture_2d_array']: s#139
[#198 'texture_3d']: s#140
[#198 'texture_cube']: s#141
[#198 'texture_cube_array']: s#142
[#198 'texture_depth_2d']: s#132
[#198 'texture_depth_2d_array']: s#133
[#198 'texture_depth_cube']: s#134
[#198 'texture_depth_cube_array']: s#135
[#198 'texture_depth_multisampled_2d']: s#136
[#198 'texture_multisampled_2d']: s#143
[#198 'texture_storage_1d']: s#144
[#198 'texture_storage_2d']: s#145
[#198 'texture_storage_2d_array']: s#146
[#198 'texture_storage_3d']: s#147
[#198 'true']: s#112
[#198 'u32']: s#91
[#198 'vec2']: s#96
[#198 'vec3']: s#97
[#198 'vec4']: s#98
[#198 '~']: s#69
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#198 /0[fh]/]: s#122
[#198 /0[iu]?/]: s#119
[#198 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#198 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#198 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#198 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#198 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#198 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#198 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#198 /[1-9][0-9]*[fh]/]: s#123
[#198 /[1-9][0-9]*[iu]?/]: s#120
[#201 '!']: s#68
[#201 '&']: s#71
[#201 '(']: s#86
[#201 '*']: s#70
[#201 '-']: s#67
[#201 'array']: s#82
[#201 'atomic']: s#94
[#201 'bitcast']: s#77
[#201 'bool']: s#87
[#201 'f16']: s#89
[#201 'f32']: s#88
[#201 'false']: s#113
[#201 'i32']: s#90
[#201 'mat2x2']: s#99
[#201 'mat2x3']: s#100
[#201 'mat2x4']: s#101
[#201 'mat3x2']: s#102
[#201 'mat3x3']: s#103
[#201 'mat3x4']: s#104
[#201 'mat4x2']: s#105
[#201 'mat4x3']: s#106
[#201 'mat4x4']: s#107
[#201 'ptr']: s#92
[#201 'sampler']: s#130
[#201 'sampler_comparison']: s#131
[#201 'texture_1d']: s#137
[#201 'texture_2d']: s#138
[#201 'texture_2d_array']: s#139
[#201 'texture_3d']: s#140
[#201 'texture_cube']: s#141
[#201 'texture_cube_array']: s#142
[#201 'texture_depth_2d']: s#132
[#201 'texture_depth_2d_array']: s#133
[#201 'texture_depth_cube']: s#134
[#201 'texture_depth_cube_array']: s#135
[#201 'texture_depth_multisampled_2d']: s#136
[#201 'texture_multisampled_2d']: s#143
[#201 'texture_storage_1d']: s#144
[#201 'texture_storage_2d']: s#145
[#201 'texture_storage_2d_array']: s#146
[#201 'texture_storage_3d']: s#147
[#201 'true']: s#112
[#201 'u32']: s#91
[#201 'vec2']: s#96
[#201 'vec3']: s#97
[#201 'vec4']: s#98
[#201 '~']: s#69
[#201 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#201 /0[fh]/]: s#122
[#201 /0[iu]?/]: s#119
[#201 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#201 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#201 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#201 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#201 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#201 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#201 /[1-9][0-9]*[fh]/]: s#123
[#201 /[1-9][0-9]*[iu]?/]: s#120
[#202 '/[rgba]/']: s#282
[#202 '/[rgba][rgba]/']: s#283
[#202 '/[rgba][rgba][rgba]/']: s#284
[#202 '/[rgba][rgba][rgba][rgba]/']: s#285
[#202 '/[xyzw]/']: s#286
[#202 '/[xyzw][xyzw]/']: s#287
[#202 '/[xyzw][xyzw][xyzw]/']: s#288
[#202 '/[xyzw][xyzw][xyzw][xyzw]/']: s#289
[#202 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#281
[#208 '!']: s#68
[#208 '&']: s#71
[#208 '(']: s#86
[#208 '*']: s#70
[#208 '-']: s#67
[#208 'array']: s#82
[#208 'atomic']: s#94
[#208 'bitcast']: s#77
[#208 'bool']: s#87
[#208 'f16']: s#89
[#208 'f32']: s#88
[#208 'false']: s#113
[#208 'i32']: s#90
[#208 'mat2x2']: s#99
[#208 'mat2x3']: s#100
[#208 'mat2x4']: s#101
[#208 'mat3x2']: s#102
[#208 'mat3x3']: s#103
[#208 'mat3x4']: s#104
[#208 'mat4x2']: s#105
[#208 'mat4x3']: s#106
[#208 'mat4x4']: s#107
[#208 'ptr']: s#92
[#208 'sampler']: s#130
[#208 'sampler_comparison']: s#131
[#208 'texture_1d']: s#137
[#208 'texture_2d']: s#138
[#208 'texture_2d_array']: s#139
[#208 'texture_3d']: s#140
[#208 'texture_cube']: s#141
[#208 'texture_cube_array']: s#142
[#208 'texture_depth_2d']: s#132
[#208 'texture_depth_2d_array']: s#133
[#208 'texture_depth_cube']: s#134
[#208 'texture_depth_cube_array']: s#135
[#208 'texture_depth_multisampled_2d']: s#136
[#208 'texture_multisampled_2d']: s#143
[#208 'texture_storage_1d']: s#144
[#208 'texture_storage_2d']: s#145
[#208 'texture_storage_2d_array']: s#146
[#208 'texture_storage_3d']: s#147
[#208 'true']: s#112
[#208 'u32']: s#91
[#208 'vec2']: s#96
[#208 'vec3']: s#97
[#208 'vec4']: s#98
[#208 '~']: s#69
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#208 /0[fh]/]: s#122
[#208 /0[iu]?/]: s#119
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#208 /[1-9][0-9]*[fh]/]: s#123
[#208 /[1-9][0-9]*[iu]?/]: s#120
[#209 'f16']: r#24
[#209 'texture_multisampled_2d']: r#24
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: r#24
[#210 'f16']: r#25
[#210 'texture_multisampled_2d']: r#25
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: r#25
[#211 'f16']: r#26
[#211 'texture_multisampled_2d']: r#26
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: r#26
[#212 '!']: s#68
[#212 '&']: s#71
[#212 '(']: s#86
[#212 '*']: s#70
[#212 '-']: s#67
[#212 'array']: s#82
[#212 'atomic']: s#94
[#212 'bitcast']: s#77
[#212 'bool']: s#87
[#212 'f16']: s#89
[#212 'f32']: s#88
[#212 'false']: s#113
[#212 'i32']: s#90
[#212 'mat2x2']: s#99
[#212 'mat2x3']: s#100
[#212 'mat2x4']: s#101
[#212 'mat3x2']: s#102
[#212 'mat3x3']: s#103
[#212 'mat3x4']: s#104
[#212 'mat4x2']: s#105
[#212 'mat4x3']: s#106
[#212 'mat4x4']: s#107
[#212 'ptr']: s#92
[#212 'sampler']: s#130
[#212 'sampler_comparison']: s#131
[#212 'texture_1d']: s#137
[#212 'texture_2d']: s#138
[#212 'texture_2d_array']: s#139
[#212 'texture_3d']: s#140
[#212 'texture_cube']: s#141
[#212 'texture_cube_array']: s#142
[#212 'texture_depth_2d']: s#132
[#212 'texture_depth_2d_array']: s#133
[#212 'texture_depth_cube']: s#134
[#212 'texture_depth_cube_array']: s#135
[#212 'texture_depth_multisampled_2d']: s#136
[#212 'texture_multisampled_2d']: s#143
[#212 'texture_storage_1d']: s#144
[#212 'texture_storage_2d']: s#145
[#212 'texture_storage_2d_array']: s#146
[#212 'texture_storage_3d']: s#147
[#212 'true']: s#112
[#212 'u32']: s#91
[#212 'vec2']: s#96
[#212 'vec3']: s#97
[#212 'vec4']: s#98
[#212 '~']: s#69
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#212 /0[fh]/]: s#122
[#212 /0[iu]?/]: s#119
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#212 /[1-9][0-9]*[fh]/]: s#123
[#212 /[1-9][0-9]*[iu]?/]: s#120
[#213 '!']: s#68
[#213 '&']: s#71
[#213 '(']: s#86
[#213 '*']: s#70
[#213 '-']: s#67
[#213 'array']: s#82
[#213 'atomic']: s#94
[#213 'bitcast']: s#77
[#213 'bool']: s#87
[#213 'f16']: s#89
[#213 'f32']: s#88
[#213 'false']: s#113
[#213 'i32']: s#90
[#213 'mat2x2']: s#99
[#213 'mat2x3']: s#100
[#213 'mat2x4']: s#101
[#213 'mat3x2']: s#102
[#213 'mat3x3']: s#103
[#213 'mat3x4']: s#104
[#213 'mat4x2']: s#105
[#213 'mat4x3']: s#106
[#213 'mat4x4']: s#107
[#213 'ptr']: s#92
[#213 'sampler']: s#130
[#213 'sampler_comparison']: s#131
[#213 'texture_1d']: s#137
[#213 'texture_2d']: s#138
[#213 'texture_2d_array']: s#139
[#213 'texture_3d']: s#140
[#213 'texture_cube']: s#141
[#213 'texture_cube_array']: s#142
[#213 'texture_depth_2d']: s#132
[#213 'texture_depth_2d_array']: s#133
[#213 'texture_depth_cube']: s#134
[#213 'texture_depth_cube_array']: s#135
[#213 'texture_depth_multisampled_2d']: s#136
[#213 'texture_multisampled_2d']: s#143
[#213 'texture_storage_1d']: s#144
[#213 'texture_storage_2d']: s#145
[#213 'texture_storage_2d_array']: s#146
[#213 'texture_storage_3d']: s#147
[#213 'true']: s#112
[#213 'u32']: s#91
[#213 'vec2']: s#96
[#213 'vec3']: s#97
[#213 'vec4']: s#98
[#213 '~']: s#69
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#213 /0[fh]/]: s#122
[#213 /0[iu]?/]: s#119
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#213 /[1-9][0-9]*[fh]/]: s#123
[#213 /[1-9][0-9]*[iu]?/]: s#120
[#214 '!']: s#68
[#214 '&']: s#71
[#214 '(']: s#86
[#214 '*']: s#70
[#214 '-']: s#67
[#214 'array']: s#82
[#214 'atomic']: s#94
[#214 'bitcast']: s#77
[#214 'bool']: s#87
[#214 'f16']: s#89
[#214 'f32']: s#88
[#214 'false']: s#113
[#214 'i32']: s#90
[#214 'mat2x2']: s#99
[#214 'mat2x3']: s#100
[#214 'mat2x4']: s#101
[#214 'mat3x2']: s#102
[#214 'mat3x3']: s#103
[#214 'mat3x4']: s#104
[#214 'mat4x2']: s#105
[#214 'mat4x3']: s#106
[#214 'mat4x4']: s#107
[#214 'ptr']: s#92
[#214 'sampler']: s#130
[#214 'sampler_comparison']: s#131
[#214 'texture_1d']: s#137
[#214 'texture_2d']: s#138
[#214 'texture_2d_array']: s#139
[#214 'texture_3d']: s#140
[#214 'texture_cube']: s#141
[#214 'texture_cube_array']: s#142
[#214 'texture_depth_2d']: s#132
[#214 'texture_depth_2d_array']: s#133
[#214 'texture_depth_cube']: s#134
[#214 'texture_depth_cube_array']: s#135
[#214 'texture_depth_multisampled_2d']: s#136
[#214 'texture_multisampled_2d']: s#143
[#214 'texture_storage_1d']: s#144
[#214 'texture_storage_2d']: s#145
[#214 'texture_storage_2d_array']: s#146
[#214 'texture_storage_3d']: s#147
[#214 'true']: s#112
[#214 'u32']: s#91
[#214 'vec2']: s#96
[#214 'vec3']: s#97
[#214 'vec4']: s#98
[#214 '~']: s#69
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#214 /0[fh]/]: s#122
[#214 /0[iu]?/]: s#119
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#214 /[1-9][0-9]*[fh]/]: s#123
[#214 /[1-9][0-9]*[iu]?/]: s#120
[#215 'f16']: r#27
[#215 'texture_multisampled_2d']: r#27
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: r#27
[#216 'f16']: r#28
[#216 'texture_multisampled_2d']: r#28
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: r#28
[#217 '!']: s#68
[#217 '&']: s#71
[#217 '(']: s#86
[#217 '*']: s#70
[#217 '-']: s#67
[#217 'array']: s#82
[#217 'atomic']: s#94
[#217 'bitcast']: s#77
[#217 'bool']: s#87
[#217 'f16']: s#89
[#217 'f32']: s#88
[#217 'false']: s#113
[#217 'i32']: s#90
[#217 'mat2x2']: s#99
[#217 'mat2x3']: s#100
[#217 'mat2x4']: s#101
[#217 'mat3x2']: s#102
[#217 'mat3x3']: s#103
[#217 'mat3x4']: s#104
[#217 'mat4x2']: s#105
[#217 'mat4x3']: s#106
[#217 'mat4x4']: s#107
[#217 'ptr']: s#92
[#217 'sampler']: s#130
[#217 'sampler_comparison']: s#131
[#217 'texture_1d']: s#137
[#217 'texture_2d']: s#138
[#217 'texture_2d_array']: s#139
[#217 'texture_3d']: s#140
[#217 'texture_cube']: s#141
[#217 'texture_cube_array']: s#142
[#217 'texture_depth_2d']: s#132
[#217 'texture_depth_2d_array']: s#133
[#217 'texture_depth_cube']: s#134
[#217 'texture_depth_cube_array']: s#135
[#217 'texture_depth_multisampled_2d']: s#136
[#217 'texture_multisampled_2d']: s#143
[#217 'texture_storage_1d']: s#144
[#217 'texture_storage_2d']: s#145
[#217 'texture_storage_2d_array']: s#146
[#217 'texture_storage_3d']: s#147
[#217 'true']: s#112
[#217 'u32']: s#91
[#217 'vec2']: s#96
[#217 'vec3']: s#97
[#217 'vec4']: s#98
[#217 '~']: s#69
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#217 /0[fh]/]: s#122
[#217 /0[iu]?/]: s#119
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#217 /[1-9][0-9]*[fh]/]: s#123
[#217 /[1-9][0-9]*[iu]?/]: s#120
[#218 '!']: s#68
[#218 '&']: s#71
[#218 '(']: s#86
[#218 '*']: s#70
[#218 '-']: s#67
[#218 'array']: s#82
[#218 'atomic']: s#94
[#218 'bitcast']: s#77
[#218 'bool']: s#87
[#218 'f16']: s#89
[#218 'f32']: s#88
[#218 'false']: s#113
[#218 'i32']: s#90
[#218 'mat2x2']: s#99
[#218 'mat2x3']: s#100
[#218 'mat2x4']: s#101
[#218 'mat3x2']: s#102
[#218 'mat3x3']: s#103
[#218 'mat3x4']: s#104
[#218 'mat4x2']: s#105
[#218 'mat4x3']: s#106
[#218 'mat4x4']: s#107
[#218 'ptr']: s#92
[#218 'sampler']: s#130
[#218 'sampler_comparison']: s#131
[#218 'texture_1d']: s#137
[#218 'texture_2d']: s#138
[#218 'texture_2d_array']: s#139
[#218 'texture_3d']: s#140
[#218 'texture_cube']: s#141
[#218 'texture_cube_array']: s#142
[#218 'texture_depth_2d']: s#132
[#218 'texture_depth_2d_array']: s#133
[#218 'texture_depth_cube']: s#134
[#218 'texture_depth_cube_array']: s#135
[#218 'texture_depth_multisampled_2d']: s#136
[#218 'texture_multisampled_2d']: s#143
[#218 'texture_storage_1d']: s#144
[#218 'texture_storage_2d']: s#145
[#218 'texture_storage_2d_array']: s#146
[#218 'texture_storage_3d']: s#147
[#218 'true']: s#112
[#218 'u32']: s#91
[#218 'vec2']: s#96
[#218 'vec3']: s#97
[#218 'vec4']: s#98
[#218 '~']: s#69
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#218 /0[fh]/]: s#122
[#218 /0[iu]?/]: s#119
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#218 /[1-9][0-9]*[fh]/]: s#123
[#218 /[1-9][0-9]*[iu]?/]: s#120
[#219 '!']: s#68
[#219 '&']: s#71
[#219 '(']: s#86
[#219 '*']: s#70
[#219 '-']: s#67
[#219 'array']: s#82
[#219 'atomic']: s#94
[#219 'bitcast']: s#77
[#219 'bool']: s#87
[#219 'f16']: s#89
[#219 'f32']: s#88
[#219 'false']: s#113
[#219 'i32']: s#90
[#219 'mat2x2']: s#99
[#219 'mat2x3']: s#100
[#219 'mat2x4']: s#101
[#219 'mat3x2']: s#102
[#219 'mat3x3']: s#103
[#219 'mat3x4']: s#104
[#219 'mat4x2']: s#105
[#219 'mat4x3']: s#106
[#219 'mat4x4']: s#107
[#219 'ptr']: s#92
[#219 'sampler']: s#130
[#219 'sampler_comparison']: s#131
[#219 'texture_1d']: s#137
[#219 'texture_2d']: s#138
[#219 'texture_2d_array']: s#139
[#219 'texture_3d']: s#140
[#219 'texture_cube']: s#141
[#219 'texture_cube_array']: s#142
[#219 'texture_depth_2d']: s#132
[#219 'texture_depth_2d_array']: s#133
[#219 'texture_depth_cube']: s#134
[#219 'texture_depth_cube_array']: s#135
[#219 'texture_depth_multisampled_2d']: s#136
[#219 'texture_multisampled_2d']: s#143
[#219 'texture_storage_1d']: s#144
[#219 'texture_storage_2d']: s#145
[#219 'texture_storage_2d_array']: s#146
[#219 'texture_storage_3d']: s#147
[#219 'true']: s#112
[#219 'u32']: s#91
[#219 'vec2']: s#96
[#219 'vec3']: s#97
[#219 'vec4']: s#98
[#219 '~']: s#69
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#219 /0[fh]/]: s#122
[#219 /0[iu]?/]: s#119
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#219 /[1-9][0-9]*[fh]/]: s#123
[#219 /[1-9][0-9]*[iu]?/]: s#120
[#220 '!']: s#68
[#220 '&']: s#71
[#220 '(']: s#86
[#220 '*']: s#70
[#220 '-']: s#67
[#220 'array']: s#82
[#220 'atomic']: s#94
[#220 'bitcast']: s#77
[#220 'bool']: s#87
[#220 'f16']: s#89
[#220 'f32']: s#88
[#220 'false']: s#113
[#220 'i32']: s#90
[#220 'mat2x2']: s#99
[#220 'mat2x3']: s#100
[#220 'mat2x4']: s#101
[#220 'mat3x2']: s#102
[#220 'mat3x3']: s#103
[#220 'mat3x4']: s#104
[#220 'mat4x2']: s#105
[#220 'mat4x3']: s#106
[#220 'mat4x4']: s#107
[#220 'ptr']: s#92
[#220 'sampler']: s#130
[#220 'sampler_comparison']: s#131
[#220 'texture_1d']: s#137
[#220 'texture_2d']: s#138
[#220 'texture_2d_array']: s#139
[#220 'texture_3d']: s#140
[#220 'texture_cube']: s#141
[#220 'texture_cube_array']: s#142
[#220 'texture_depth_2d']: s#132
[#220 'texture_depth_2d_array']: s#133
[#220 'texture_depth_cube']: s#134
[#220 'texture_depth_cube_array']: s#135
[#220 'texture_depth_multisampled_2d']: s#136
[#220 'texture_multisampled_2d']: s#143
[#220 'texture_storage_1d']: s#144
[#220 'texture_storage_2d']: s#145
[#220 'texture_storage_2d_array']: s#146
[#220 'texture_storage_3d']: s#147
[#220 'true']: s#112
[#220 'u32']: s#91
[#220 'vec2']: s#96
[#220 'vec3']: s#97
[#220 'vec4']: s#98
[#220 '~']: s#69
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#220 /0[fh]/]: s#122
[#220 /0[iu]?/]: s#119
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#220 /[1-9][0-9]*[fh]/]: s#123
[#220 /[1-9][0-9]*[iu]?/]: s#120
[#221 '!']: s#68
[#221 '&']: s#71
[#221 '(']: s#86
[#221 '*']: s#70
[#221 '-']: s#67
[#221 'array']: s#82
[#221 'atomic']: s#94
[#221 'bitcast']: s#77
[#221 'bool']: s#87
[#221 'f16']: s#89
[#221 'f32']: s#88
[#221 'false']: s#113
[#221 'i32']: s#90
[#221 'mat2x2']: s#99
[#221 'mat2x3']: s#100
[#221 'mat2x4']: s#101
[#221 'mat3x2']: s#102
[#221 'mat3x3']: s#103
[#221 'mat3x4']: s#104
[#221 'mat4x2']: s#105
[#221 'mat4x3']: s#106
[#221 'mat4x4']: s#107
[#221 'ptr']: s#92
[#221 'sampler']: s#130
[#221 'sampler_comparison']: s#131
[#221 'texture_1d']: s#137
[#221 'texture_2d']: s#138
[#221 'texture_2d_array']: s#139
[#221 'texture_3d']: s#140
[#221 'texture_cube']: s#141
[#221 'texture_cube_array']: s#142
[#221 'texture_depth_2d']: s#132
[#221 'texture_depth_2d_array']: s#133
[#221 'texture_depth_cube']: s#134
[#221 'texture_depth_cube_array']: s#135
[#221 'texture_depth_multisampled_2d']: s#136
[#221 'texture_multisampled_2d']: s#143
[#221 'texture_storage_1d']: s#144
[#221 'texture_storage_2d']: s#145
[#221 'texture_storage_2d_array']: s#146
[#221 'texture_storage_3d']: s#147
[#221 'true']: s#112
[#221 'u32']: s#91
[#221 'vec2']: s#96
[#221 'vec3']: s#97
[#221 'vec4']: s#98
[#221 '~']: s#69
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#221 /0[fh]/]: s#122
[#221 /0[iu]?/]: s#119
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#221 /[1-9][0-9]*[fh]/]: s#123
[#221 /[1-9][0-9]*[iu]?/]: s#120
[#222 '!']: s#68
[#222 '&']: s#71
[#222 '(']: s#86
[#222 '*']: s#70
[#222 '-']: s#67
[#222 'array']: s#82
[#222 'atomic']: s#94
[#222 'bitcast']: s#77
[#222 'bool']: s#87
[#222 'f16']: s#89
[#222 'f32']: s#88
[#222 'false']: s#113
[#222 'i32']: s#90
[#222 'mat2x2']: s#99
[#222 'mat2x3']: s#100
[#222 'mat2x4']: s#101
[#222 'mat3x2']: s#102
[#222 'mat3x3']: s#103
[#222 'mat3x4']: s#104
[#222 'mat4x2']: s#105
[#222 'mat4x3']: s#106
[#222 'mat4x4']: s#107
[#222 'ptr']: s#92
[#222 'sampler']: s#130
[#222 'sampler_comparison']: s#131
[#222 'texture_1d']: s#137
[#222 'texture_2d']: s#138
[#222 'texture_2d_array']: s#139
[#222 'texture_3d']: s#140
[#222 'texture_cube']: s#141
[#222 'texture_cube_array']: s#142
[#222 'texture_depth_2d']: s#132
[#222 'texture_depth_2d_array']: s#133
[#222 'texture_depth_cube']: s#134
[#222 'texture_depth_cube_array']: s#135
[#222 'texture_depth_multisampled_2d']: s#136
[#222 'texture_multisampled_2d']: s#143
[#222 'texture_storage_1d']: s#144
[#222 'texture_storage_2d']: s#145
[#222 'texture_storage_2d_array']: s#146
[#222 'texture_storage_3d']: s#147
[#222 'true']: s#112
[#222 'u32']: s#91
[#222 'vec2']: s#96
[#222 'vec3']: s#97
[#222 'vec4']: s#98
[#222 '~']: s#69
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#222 /0[fh]/]: s#122
[#222 /0[iu]?/]: s#119
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#222 /[1-9][0-9]*[fh]/]: s#123
[#222 /[1-9][0-9]*[iu]?/]: s#120
[#223 '!']: s#68
[#223 '&']: s#71
[#223 '(']: s#86
[#223 '*']: s#70
[#223 '-']: s#67
[#223 'array']: s#82
[#223 'atomic']: s#94
[#223 'bitcast']: s#77
[#223 'bool']: s#87
[#223 'f16']: s#89
[#223 'f32']: s#88
[#223 'false']: s#113
[#223 'i32']: s#90
[#223 'mat2x2']: s#99
[#223 'mat2x3']: s#100
[#223 'mat2x4']: s#101
[#223 'mat3x2']: s#102
[#223 'mat3x3']: s#103
[#223 'mat3x4']: s#104
[#223 'mat4x2']: s#105
[#223 'mat4x3']: s#106
[#223 'mat4x4']: s#107
[#223 'ptr']: s#92
[#223 'sampler']: s#130
[#223 'sampler_comparison']: s#131
[#223 'texture_1d']: s#137
[#223 'texture_2d']: s#138
[#223 'texture_2d_array']: s#139
[#223 'texture_3d']: s#140
[#223 'texture_cube']: s#141
[#223 'texture_cube_array']: s#142
[#223 'texture_depth_2d']: s#132
[#223 'texture_depth_2d_array']: s#133
[#223 'texture_depth_cube']: s#134
[#223 'texture_depth_cube_array']: s#135
[#223 'texture_depth_multisampled_2d']: s#136
[#223 'texture_multisampled_2d']: s#143
[#223 'texture_storage_1d']: s#144
[#223 'texture_storage_2d']: s#145
[#223 'texture_storage_2d_array']: s#146
[#223 'texture_storage_3d']: s#147
[#223 'true']: s#112
[#223 'u32']: s#91
[#223 'vec2']: s#96
[#223 'vec3']: s#97
[#223 'vec4']: s#98
[#223 '~']: s#69
[#223 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#223 /0[fh]/]: s#122
[#223 /0[iu]?/]: s#119
[#223 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#223 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#223 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#223 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#223 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#223 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#223 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#223 /[1-9][0-9]*[fh]/]: s#123
[#223 /[1-9][0-9]*[iu]?/]: s#120
[#224 '!']: s#68
[#224 '&']: s#71
[#224 '(']: s#86
[#224 '*']: s#70
[#224 '-']: s#67
[#224 'array']: s#82
[#224 'atomic']: s#94
[#224 'bitcast']: s#77
[#224 'bool']: s#87
[#224 'f16']: s#89
[#224 'f32']: s#88
[#224 'false']: s#113
[#224 'i32']: s#90
[#224 'mat2x2']: s#99
[#224 'mat2x3']: s#100
[#224 'mat2x4']: s#101
[#224 'mat3x2']: s#102
[#224 'mat3x3']: s#103
[#224 'mat3x4']: s#104
[#224 'mat4x2']: s#105
[#224 'mat4x3']: s#106
[#224 'mat4x4']: s#107
[#224 'ptr']: s#92
[#224 'sampler']: s#130
[#224 'sampler_comparison']: s#131
[#224 'texture_1d']: s#137
[#224 'texture_2d']: s#138
[#224 'texture_2d_array']: s#139
[#224 'texture_3d']: s#140
[#224 'texture_cube']: s#141
[#224 'texture_cube_array']: s#142
[#224 'texture_depth_2d']: s#132
[#224 'texture_depth_2d_array']: s#133
[#224 'texture_depth_cube']: s#134
[#224 'texture_depth_cube_array']: s#135
[#224 'texture_depth_multisampled_2d']: s#136
[#224 'texture_multisampled_2d']: s#143
[#224 'texture_storage_1d']: s#144
[#224 'texture_storage_2d']: s#145
[#224 'texture_storage_2d_array']: s#146
[#224 'texture_storage_3d']: s#147
[#224 'true']: s#112
[#224 'u32']: s#91
[#224 'vec2']: s#96
[#224 'vec3']: s#97
[#224 'vec4']: s#98
[#224 '~']: s#69
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#224 /0[fh]/]: s#122
[#224 /0[iu]?/]: s#119
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#224 /[1-9][0-9]*[fh]/]: s#123
[#224 /[1-9][0-9]*[iu]?/]: s#120
[#225 '!']: s#68
[#225 '&']: s#71
[#225 '(']: s#86
[#225 '*']: s#70
[#225 '-']: s#67
[#225 'array']: s#82
[#225 'atomic']: s#94
[#225 'bitcast']: s#77
[#225 'bool']: s#87
[#225 'f16']: s#89
[#225 'f32']: s#88
[#225 'false']: s#113
[#225 'i32']: s#90
[#225 'mat2x2']: s#99
[#225 'mat2x3']: s#100
[#225 'mat2x4']: s#101
[#225 'mat3x2']: s#102
[#225 'mat3x3']: s#103
[#225 'mat3x4']: s#104
[#225 'mat4x2']: s#105
[#225 'mat4x3']: s#106
[#225 'mat4x4']: s#107
[#225 'ptr']: s#92
[#225 'sampler']: s#130
[#225 'sampler_comparison']: s#131
[#225 'texture_1d']: s#137
[#225 'texture_2d']: s#138
[#225 'texture_2d_array']: s#139
[#225 'texture_3d']: s#140
[#225 'texture_cube']: s#141
[#225 'texture_cube_array']: s#142
[#225 'texture_depth_2d']: s#132
[#225 'texture_depth_2d_array']: s#133
[#225 'texture_depth_cube']: s#134
[#225 'texture_depth_cube_array']: s#135
[#225 'texture_depth_multisampled_2d']: s#136
[#225 'texture_multisampled_2d']: s#143
[#225 'texture_storage_1d']: s#144
[#225 'texture_storage_2d']: s#145
[#225 'texture_storage_2d_array']: s#146
[#225 'texture_storage_3d']: s#147
[#225 'true']: s#112
[#225 'u32']: s#91
[#225 'vec2']: s#96
[#225 'vec3']: s#97
[#225 'vec4']: s#98
[#225 '~']: s#69
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#225 /0[fh]/]: s#122
[#225 /0[iu]?/]: s#119
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#225 /[1-9][0-9]*[fh]/]: s#123
[#225 /[1-9][0-9]*[iu]?/]: s#120
[#226 '!']: s#68
[#226 '&']: s#71
[#226 '(']: s#86
[#226 '*']: s#70
[#226 '-']: s#67
[#226 'array']: s#82
[#226 'atomic']: s#94
[#226 'bitcast']: s#77
[#226 'bool']: s#87
[#226 'f16']: s#89
[#226 'f32']: s#88
[#226 'false']: s#113
[#226 'i32']: s#90
[#226 'mat2x2']: s#99
[#226 'mat2x3']: s#100
[#226 'mat2x4']: s#101
[#226 'mat3x2']: s#102
[#226 'mat3x3']: s#103
[#226 'mat3x4']: s#104
[#226 'mat4x2']: s#105
[#226 'mat4x3']: s#106
[#226 'mat4x4']: s#107
[#226 'ptr']: s#92
[#226 'sampler']: s#130
[#226 'sampler_comparison']: s#131
[#226 'texture_1d']: s#137
[#226 'texture_2d']: s#138
[#226 'texture_2d_array']: s#139
[#226 'texture_3d']: s#140
[#226 'texture_cube']: s#141
[#226 'texture_cube_array']: s#142
[#226 'texture_depth_2d']: s#132
[#226 'texture_depth_2d_array']: s#133
[#226 'texture_depth_cube']: s#134
[#226 'texture_depth_cube_array']: s#135
[#226 'texture_depth_multisampled_2d']: s#136
[#226 'texture_multisampled_2d']: s#143
[#226 'texture_storage_1d']: s#144
[#226 'texture_storage_2d']: s#145
[#226 'texture_storage_2d_array']: s#146
[#226 'texture_storage_3d']: s#147
[#226 'true']: s#112
[#226 'u32']: s#91
[#226 'vec2']: s#96
[#226 'vec3']: s#97
[#226 'vec4']: s#98
[#226 '~']: s#69
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#226 /0[fh]/]: s#122
[#226 /0[iu]?/]: s#119
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#226 /[1-9][0-9]*[fh]/]: s#123
[#226 /[1-9][0-9]*[iu]?/]: s#120
[#227 '!']: s#68
[#227 '&']: s#71
[#227 '(']: s#86
[#227 '*']: s#70
[#227 '-']: s#67
[#227 'array']: s#82
[#227 'atomic']: s#94
[#227 'bitcast']: s#77
[#227 'bool']: s#87
[#227 'f16']: s#89
[#227 'f32']: s#88
[#227 'false']: s#113
[#227 'i32']: s#90
[#227 'mat2x2']: s#99
[#227 'mat2x3']: s#100
[#227 'mat2x4']: s#101
[#227 'mat3x2']: s#102
[#227 'mat3x3']: s#103
[#227 'mat3x4']: s#104
[#227 'mat4x2']: s#105
[#227 'mat4x3']: s#106
[#227 'mat4x4']: s#107
[#227 'ptr']: s#92
[#227 'sampler']: s#130
[#227 'sampler_comparison']: s#131
[#227 'texture_1d']: s#137
[#227 'texture_2d']: s#138
[#227 'texture_2d_array']: s#139
[#227 'texture_3d']: s#140
[#227 'texture_cube']: s#141
[#227 'texture_cube_array']: s#142
[#227 'texture_depth_2d']: s#132
[#227 'texture_depth_2d_array']: s#133
[#227 'texture_depth_cube']: s#134
[#227 'texture_depth_cube_array']: s#135
[#227 'texture_depth_multisampled_2d']: s#136
[#227 'texture_multisampled_2d']: s#143
[#227 'texture_storage_1d']: s#144
[#227 'texture_storage_2d']: s#145
[#227 'texture_storage_2d_array']: s#146
[#227 'texture_storage_3d']: s#147
[#227 'true']: s#112
[#227 'u32']: s#91
[#227 'vec2']: s#96
[#227 'vec3']: s#97
[#227 'vec4']: s#98
[#227 '~']: s#69
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#227 /0[fh]/]: s#122
[#227 /0[iu]?/]: s#119
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#227 /[1-9][0-9]*[fh]/]: s#123
[#227 /[1-9][0-9]*[iu]?/]: s#120
[#228 '!']: s#68
[#228 '&']: s#71
[#228 '(']: s#86
[#228 '*']: s#70
[#228 '-']: s#67
[#228 'array']: s#82
[#228 'atomic']: s#94
[#228 'bitcast']: s#77
[#228 'bool']: s#87
[#228 'f16']: s#89
[#228 'f32']: s#88
[#228 'false']: s#113
[#228 'i32']: s#90
[#228 'mat2x2']: s#99
[#228 'mat2x3']: s#100
[#228 'mat2x4']: s#101
[#228 'mat3x2']: s#102
[#228 'mat3x3']: s#103
[#228 'mat3x4']: s#104
[#228 'mat4x2']: s#105
[#228 'mat4x3']: s#106
[#228 'mat4x4']: s#107
[#228 'ptr']: s#92
[#228 'sampler']: s#130
[#228 'sampler_comparison']: s#131
[#228 'texture_1d']: s#137
[#228 'texture_2d']: s#138
[#228 'texture_2d_array']: s#139
[#228 'texture_3d']: s#140
[#228 'texture_cube']: s#141
[#228 'texture_cube_array']: s#142
[#228 'texture_depth_2d']: s#132
[#228 'texture_depth_2d_array']: s#133
[#228 'texture_depth_cube']: s#134
[#228 'texture_depth_cube_array']: s#135
[#228 'texture_depth_multisampled_2d']: s#136
[#228 'texture_multisampled_2d']: s#143
[#228 'texture_storage_1d']: s#144
[#228 'texture_storage_2d']: s#145
[#228 'texture_storage_2d_array']: s#146
[#228 'texture_storage_3d']: s#147
[#228 'true']: s#112
[#228 'u32']: s#91
[#228 'vec2']: s#96
[#228 'vec3']: s#97
[#228 'vec4']: s#98
[#228 '~']: s#69
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#228 /0[fh]/]: s#122
[#228 /0[iu]?/]: s#119
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#228 /[1-9][0-9]*[fh]/]: s#123
[#228 /[1-9][0-9]*[iu]?/]: s#120
[#229 '!']: s#68
[#229 '&']: s#71
[#229 '(']: s#86
[#229 '*']: s#70
[#229 '-']: s#67
[#229 'array']: s#82
[#229 'atomic']: s#94
[#229 'bitcast']: s#77
[#229 'bool']: s#87
[#229 'f16']: s#89
[#229 'f32']: s#88
[#229 'false']: s#113
[#229 'i32']: s#90
[#229 'mat2x2']: s#99
[#229 'mat2x3']: s#100
[#229 'mat2x4']: s#101
[#229 'mat3x2']: s#102
[#229 'mat3x3']: s#103
[#229 'mat3x4']: s#104
[#229 'mat4x2']: s#105
[#229 'mat4x3']: s#106
[#229 'mat4x4']: s#107
[#229 'ptr']: s#92
[#229 'sampler']: s#130
[#229 'sampler_comparison']: s#131
[#229 'texture_1d']: s#137
[#229 'texture_2d']: s#138
[#229 'texture_2d_array']: s#139
[#229 'texture_3d']: s#140
[#229 'texture_cube']: s#141
[#229 'texture_cube_array']: s#142
[#229 'texture_depth_2d']: s#132
[#229 'texture_depth_2d_array']: s#133
[#229 'texture_depth_cube']: s#134
[#229 'texture_depth_cube_array']: s#135
[#229 'texture_depth_multisampled_2d']: s#136
[#229 'texture_multisampled_2d']: s#143
[#229 'texture_storage_1d']: s#144
[#229 'texture_storage_2d']: s#145
[#229 'texture_storage_2d_array']: s#146
[#229 'texture_storage_3d']: s#147
[#229 'true']: s#112
[#229 'u32']: s#91
[#229 'vec2']: s#96
[#229 'vec3']: s#97
[#229 'vec4']: s#98
[#229 '~']: s#69
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#229 /0[fh]/]: s#122
[#229 /0[iu]?/]: s#119
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#229 /[1-9][0-9]*[fh]/]: s#123
[#229 /[1-9][0-9]*[iu]?/]: s#120
[#230 '!']: s#68
[#230 '&']: s#71
[#230 '(']: s#86
[#230 '*']: s#70
[#230 '-']: s#67
[#230 'array']: s#82
[#230 'atomic']: s#94
[#230 'bitcast']: s#77
[#230 'bool']: s#87
[#230 'f16']: s#89
[#230 'f32']: s#88
[#230 'false']: s#113
[#230 'i32']: s#90
[#230 'mat2x2']: s#99
[#230 'mat2x3']: s#100
[#230 'mat2x4']: s#101
[#230 'mat3x2']: s#102
[#230 'mat3x3']: s#103
[#230 'mat3x4']: s#104
[#230 'mat4x2']: s#105
[#230 'mat4x3']: s#106
[#230 'mat4x4']: s#107
[#230 'ptr']: s#92
[#230 'sampler']: s#130
[#230 'sampler_comparison']: s#131
[#230 'texture_1d']: s#137
[#230 'texture_2d']: s#138
[#230 'texture_2d_array']: s#139
[#230 'texture_3d']: s#140
[#230 'texture_cube']: s#141
[#230 'texture_cube_array']: s#142
[#230 'texture_depth_2d']: s#132
[#230 'texture_depth_2d_array']: s#133
[#230 'texture_depth_cube']: s#134
[#230 'texture_depth_cube_array']: s#135
[#230 'texture_depth_multisampled_2d']: s#136
[#230 'texture_multisampled_2d']: s#143
[#230 'texture_storage_1d']: s#144
[#230 'texture_storage_2d']: s#145
[#230 'texture_storage_2d_array']: s#146
[#230 'texture_storage_3d']: s#147
[#230 'true']: s#112
[#230 'u32']: s#91
[#230 'vec2']: s#96
[#230 'vec3']: s#97
[#230 'vec4']: s#98
[#230 '~']: s#69
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#230 /0[fh]/]: s#122
[#230 /0[iu]?/]: s#119
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#230 /[1-9][0-9]*[fh]/]: s#123
[#230 /[1-9][0-9]*[iu]?/]: s#120
[#231 'flat']: s#258
[#231 'linear']: s#257
[#231 'perspective']: s#256
[#232 '!']: s#68
[#232 '&']: s#71
[#232 '(']: s#86
[#232 '*']: s#70
[#232 '-']: s#67
[#232 'array']: s#82
[#232 'atomic']: s#94
[#232 'bitcast']: s#77
[#232 'bool']: s#87
[#232 'f16']: s#89
[#232 'f32']: s#88
[#232 'false']: s#113
[#232 'i32']: s#90
[#232 'mat2x2']: s#99
[#232 'mat2x3']: s#100
[#232 'mat2x4']: s#101
[#232 'mat3x2']: s#102
[#232 'mat3x3']: s#103
[#232 'mat3x4']: s#104
[#232 'mat4x2']: s#105
[#232 'mat4x3']: s#106
[#232 'mat4x4']: s#107
[#232 'ptr']: s#92
[#232 'sampler']: s#130
[#232 'sampler_comparison']: s#131
[#232 'texture_1d']: s#137
[#232 'texture_2d']: s#138
[#232 'texture_2d_array']: s#139
[#232 'texture_3d']: s#140
[#232 'texture_cube']: s#141
[#232 'texture_cube_array']: s#142
[#232 'texture_depth_2d']: s#132
[#232 'texture_depth_2d_array']: s#133
[#232 'texture_depth_cube']: s#134
[#232 'texture_depth_cube_array']: s#135
[#232 'texture_depth_multisampled_2d']: s#136
[#232 'texture_multisampled_2d']: s#143
[#232 'texture_storage_1d']: s#144
[#232 'texture_storage_2d']: s#145
[#232 'texture_storage_2d_array']: s#146
[#232 'texture_storage_3d']: s#147
[#232 'true']: s#112
[#232 'u32']: s#91
[#232 'vec2']: s#96
[#232 'vec3']: s#97
[#232 'vec4']: s#98
[#232 '~']: s#69
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#232 /0[fh]/]: s#122
[#232 /0[iu]?/]: s#119
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#232 /[1-9][0-9]*[fh]/]: s#123
[#232 /[1-9][0-9]*[iu]?/]: s#120
[#233 '!']: s#68
[#233 '&']: s#71
[#233 '(']: s#86
[#233 '*']: s#70
[#233 '-']: s#67
[#233 'array']: s#82
[#233 'atomic']: s#94
[#233 'bitcast']: s#77
[#233 'bool']: s#87
[#233 'f16']: s#89
[#233 'f32']: s#88
[#233 'false']: s#113
[#233 'i32']: s#90
[#233 'mat2x2']: s#99
[#233 'mat2x3']: s#100
[#233 'mat2x4']: s#101
[#233 'mat3x2']: s#102
[#233 'mat3x3']: s#103
[#233 'mat3x4']: s#104
[#233 'mat4x2']: s#105
[#233 'mat4x3']: s#106
[#233 'mat4x4']: s#107
[#233 'ptr']: s#92
[#233 'sampler']: s#130
[#233 'sampler_comparison']: s#131
[#233 'texture_1d']: s#137
[#233 'texture_2d']: s#138
[#233 'texture_2d_array']: s#139
[#233 'texture_3d']: s#140
[#233 'texture_cube']: s#141
[#233 'texture_cube_array']: s#142
[#233 'texture_depth_2d']: s#132
[#233 'texture_depth_2d_array']: s#133
[#233 'texture_depth_cube']: s#134
[#233 'texture_depth_cube_array']: s#135
[#233 'texture_depth_multisampled_2d']: s#136
[#233 'texture_multisampled_2d']: s#143
[#233 'texture_storage_1d']: s#144
[#233 'texture_storage_2d']: s#145
[#233 'texture_storage_2d_array']: s#146
[#233 'texture_storage_3d']: s#147
[#233 'true']: s#112
[#233 'u32']: s#91
[#233 'vec2']: s#96
[#233 'vec3']: s#97
[#233 'vec4']: s#98
[#233 '~']: s#69
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#233 /0[fh]/]: s#122
[#233 /0[iu]?/]: s#119
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#233 /[1-9][0-9]*[fh]/]: s#123
[#233 /[1-9][0-9]*[iu]?/]: s#120
[#234 'f16']: r#29
[#234 'texture_multisampled_2d']: r#29
[#235 'frag_depth']: s#245
[#235 'front_facing']: s#244
[#235 'global_invocation_id']: s#248
[#235 'instance_index']: s#242
[#235 'local_invocation_id']: s#246
[#235 'local_invocation_index']: s#247
[#235 'num_workgroups']: s#250
[#235 'position']: s#243
[#235 'sample_index']: s#251
[#235 'sample_mask']: s#252
[#235 'vertex_index']: s#241
[#235 'workgroup_id']: s#249
[#236 '!']: s#68
[#236 '&']: s#71
[#236 '(']: s#86
[#236 '*']: s#70
[#236 '-']: s#67
[#236 'array']: s#82
[#236 'atomic']: s#94
[#236 'bitcast']: s#77
[#236 'bool']: s#87
[#236 'f16']: s#89
[#236 'f32']: s#88
[#236 'false']: s#113
[#236 'i32']: s#90
[#236 'mat2x2']: s#99
[#236 'mat2x3']: s#100
[#236 'mat2x4']: s#101
[#236 'mat3x2']: s#102
[#236 'mat3x3']: s#103
[#236 'mat3x4']: s#104
[#236 'mat4x2']: s#105
[#236 'mat4x3']: s#106
[#236 'mat4x4']: s#107
[#236 'ptr']: s#92
[#236 'sampler']: s#130
[#236 'sampler_comparison']: s#131
[#236 'texture_1d']: s#137
[#236 'texture_2d']: s#138
[#236 'texture_2d_array']: s#139
[#236 'texture_3d']: s#140
[#236 'texture_cube']: s#141
[#236 'texture_cube_array']: s#142
[#236 'texture_depth_2d']: s#132
[#236 'texture_depth_2d_array']: s#133
[#236 'texture_depth_cube']: s#134
[#236 'texture_depth_cube_array']: s#135
[#236 'texture_depth_multisampled_2d']: s#136
[#236 'texture_multisampled_2d']: s#143
[#236 'texture_storage_1d']: s#144
[#236 'texture_storage_2d']: s#145
[#236 'texture_storage_2d_array']: s#146
[#236 'texture_storage_3d']: s#147
[#236 'true']: s#112
[#236 'u32']: s#91
[#236 'vec2']: s#96
[#236 'vec3']: s#97
[#236 'vec4']: s#98
[#236 '~']: s#69
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#236 /0[fh]/]: s#122
[#236 /0[iu]?/]: s#119
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#236 /[1-9][0-9]*[fh]/]: s#123
[#236 /[1-9][0-9]*[iu]?/]: s#120
[#237 '!']: s#68
[#237 '&']: s#71
[#237 '(']: s#86
[#237 '*']: s#70
[#237 '-']: s#67
[#237 'array']: s#82
[#237 'atomic']: s#94
[#237 'bitcast']: s#77
[#237 'bool']: s#87
[#237 'f16']: s#89
[#237 'f32']: s#88
[#237 'false']: s#113
[#237 'i32']: s#90
[#237 'mat2x2']: s#99
[#237 'mat2x3']: s#100
[#237 'mat2x4']: s#101
[#237 'mat3x2']: s#102
[#237 'mat3x3']: s#103
[#237 'mat3x4']: s#104
[#237 'mat4x2']: s#105
[#237 'mat4x3']: s#106
[#237 'mat4x4']: s#107
[#237 'ptr']: s#92
[#237 'sampler']: s#130
[#237 'sampler_comparison']: s#131
[#237 'texture_1d']: s#137
[#237 'texture_2d']: s#138
[#237 'texture_2d_array']: s#139
[#237 'texture_3d']: s#140
[#237 'texture_cube']: s#141
[#237 'texture_cube_array']: s#142
[#237 'texture_depth_2d']: s#132
[#237 'texture_depth_2d_array']: s#133
[#237 'texture_depth_cube']: s#134
[#237 'texture_depth_cube_array']: s#135
[#237 'texture_depth_multisampled_2d']: s#136
[#237 'texture_multisampled_2d']: s#143
[#237 'texture_storage_1d']: s#144
[#237 'texture_storage_2d']: s#145
[#237 'texture_storage_2d_array']: s#146
[#237 'texture_storage_3d']: s#147
[#237 'true']: s#112
[#237 'u32']: s#91
[#237 'vec2']: s#96
[#237 'vec3']: s#97
[#237 'vec4']: s#98
[#237 '~']: s#69
[#237 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#237 /0[fh]/]: s#122
[#237 /0[iu]?/]: s#119
[#237 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#237 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#237 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#237 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#237 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#237 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#237 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#237 /[1-9][0-9]*[fh]/]: s#123
[#237 /[1-9][0-9]*[iu]?/]: s#120
[#238 ',']: s#350
[#239 ',']: s#350
[#240 ',']: s#350
[#253 ',']: s#350
[#254 ',']: s#350
[#255 ',']: s#437
[#259 ',']: s#350
[#260 ',']: s#350
[#261 ',']: s#433
[#263 '<<']: s#212
[#263 '>>']: s#213
[#274 '%']: s#211
[#274 '*']: s#209
[#274 '/']: s#210
[#279 '.']: s#202
[#279 '[']: s#201
[#280 '.']: s#202
[#280 '[']: s#201
[#290 ']']: s#427
[#291 ')']: s#426
[#293 ',']: s#425
[#294 '>']: s#421
[#297 '<']: s#195
[#298 '<']: s#194
[#299 '<']: s#193
[#300 '>']: s#420
[#301 '>']: s#419
[#302 ',']: s#418
[#304 ',']: s#416
[#310 '>']: s#415
[#311 '>']: s#414
[#312 '>']: s#413
[#313 ',']: s#412
[#332 '&']: s#410
[#332 '(']: s#411
[#332 '*']: s#409
[#332 ';']: s#369
[#332 '@']: s#35
[#332 '_']: s#406
[#332 'array']: s#82
[#332 'atomic']: s#94
[#332 'bool']: s#87
[#332 'break']: s#394
[#332 'const']: s#393
[#332 'continue']: s#395
[#332 'discard']: s#380
[#332 'f16']: s#89
[#332 'f32']: s#88
[#332 'i32']: s#90
[#332 'let']: s#392
[#332 'mat2x2']: s#99
[#332 'mat2x3']: s#100
[#332 'mat2x4']: s#101
[#332 'mat3x2']: s#102
[#332 'mat3x3']: s#103
[#332 'mat3x4']: s#104
[#332 'mat4x2']: s#105
[#332 'mat4x3']: s#106
[#332 'mat4x4']: s#107
[#332 'ptr']: s#92
[#332 'return']: s#384
[#332 'sampler']: s#130
[#332 'sampler_comparison']: s#131
[#332 'static_assert']: s#30
[#332 'texture_1d']: s#137
[#332 'texture_2d']: s#138
[#332 'texture_2d_array']: s#139
[#332 'texture_3d']: s#140
[#332 'texture_cube']: s#141
[#332 'texture_cube_array']: s#142
[#332 'texture_depth_2d']: s#132
[#332 'texture_depth_2d_array']: s#133
[#332 'texture_depth_cube']: s#134
[#332 'texture_depth_cube_array']: s#135
[#332 'texture_depth_multisampled_2d']: s#136
[#332 'texture_multisampled_2d']: s#143
[#332 'texture_storage_1d']: s#144
[#332 'texture_storage_2d']: s#145
[#332 'texture_storage_2d_array']: s#146
[#332 'texture_storage_3d']: s#147
[#332 'u32']: s#91
[#332 'var']: s#156
[#332 'vec2']: s#96
[#332 'vec3']: s#97
[#332 'vec4']: s#98
[#332 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#333 '@']: s#35
[#334 ',']: s#359
[#335 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#281
[#337 '@']: s#35
[#340 '!']: s#68
[#340 '&']: s#71
[#340 '(']: s#86
[#340 '*']: s#70
[#340 '-']: s#67
[#340 'array']: s#82
[#340 'atomic']: s#94
[#340 'bitcast']: s#77
[#340 'bool']: s#87
[#340 'f16']: s#89
[#340 'f32']: s#88
[#340 'false']: s#113
[#340 'i32']: s#90
[#340 'mat2x2']: s#99
[#340 'mat2x3']: s#100
[#340 'mat2x4']: s#101
[#340 'mat3x2']: s#102
[#340 'mat3x3']: s#103
[#340 'mat3x4']: s#104
[#340 'mat4x2']: s#105
[#340 'mat4x3']: s#106
[#340 'mat4x4']: s#107
[#340 'ptr']: s#92
[#340 'sampler']: s#130
[#340 'sampler_comparison']: s#131
[#340 'texture_1d']: s#137
[#340 'texture_2d']: s#138
[#340 'texture_2d_array']: s#139
[#340 'texture_3d']: s#140
[#340 'texture_cube']: s#141
[#340 'texture_cube_array']: s#142
[#340 'texture_depth_2d']: s#132
[#340 'texture_depth_2d_array']: s#133
[#340 'texture_depth_cube']: s#134
[#340 'texture_depth_cube_array']: s#135
[#340 'texture_depth_multisampled_2d']: s#136
[#340 'texture_multisampled_2d']: s#143
[#340 'texture_storage_1d']: s#144
[#340 'texture_storage_2d']: s#145
[#340 'texture_storage_2d_array']: s#146
[#340 'texture_storage_3d']: s#147
[#340 'true']: s#112
[#340 'u32']: s#91
[#340 'vec2']: s#96
[#340 'vec3']: s#97
[#340 'vec4']: s#98
[#340 '~']: s#69
[#340 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#340 /0[fh]/]: s#122
[#340 /0[iu]?/]: s#119
[#340 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#340 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#340 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#340 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#340 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#340 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#340 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#340 /[1-9][0-9]*[fh]/]: s#123
[#340 /[1-9][0-9]*[iu]?/]: s#120
[#344 ',']: s#352
[#346 ',']: s#350
[#348 'f16']: r#30
[#348 'texture_multisampled_2d']: r#30
[#349 ')']: s#528
[#351 '>']: s#527
[#352 'read']: s#462
[#352 'read_write']: s#464
[#352 'write']: s#463
[#355 ':']: s#525
[#356 ',']: s#524
[#358 ',']: s#359
[#359 '@']: s#35
[#360 ')']: s#520
[#362 ',']: s#519
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#365 '@']: s#35
[#366 '}']: s#513
[#368 '&']: s#410
[#368 '(']: s#411
[#368 '*']: s#409
[#368 ';']: s#369
[#368 '@']: s#35
[#368 '_']: s#406
[#368 'array']: s#82
[#368 'atomic']: s#94
[#368 'bool']: s#87
[#368 'break']: s#394
[#368 'const']: s#393
[#368 'continue']: s#395
[#368 'discard']: s#380
[#368 'f16']: s#89
[#368 'f32']: s#88
[#368 'i32']: s#90
[#368 'let']: s#392
[#368 'mat2x2']: s#99
[#368 'mat2x3']: s#100
[#368 'mat2x4']: s#101
[#368 'mat3x2']: s#102
[#368 'mat3x3']: s#103
[#368 'mat3x4']: s#104
[#368 'mat4x2']: s#105
[#368 'mat4x3']: s#106
[#368 'mat4x4']: s#107
[#368 'ptr']: s#92
[#368 'return']: s#384
[#368 'sampler']: s#130
[#368 'sampler_comparison']: s#131
[#368 'static_assert']: s#30
[#368 'texture_1d']: s#137
[#368 'texture_2d']: s#138
[#368 'texture_2d_array']: s#139
[#368 'texture_3d']: s#140
[#368 'texture_cube']: s#141
[#368 'texture_cube_array']: s#142
[#368 'texture_depth_2d']: s#132
[#368 'texture_depth_2d_array']: s#133
[#368 'texture_depth_cube']: s#134
[#368 'texture_depth_cube_array']: s#135
[#368 'texture_depth_multisampled_2d']: s#136
[#368 'texture_multisampled_2d']: s#143
[#368 'texture_storage_1d']: s#144
[#368 'texture_storage_2d']: s#145
[#368 'texture_storage_2d_array']: s#146
[#368 'texture_storage_3d']: s#147
[#368 'u32']: s#91
[#368 'var']: s#156
[#368 'vec2']: s#96
[#368 'vec3']: s#97
[#368 'vec4']: s#98
[#368 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#369 'break']: r#31
[#369 'continue']: r#31
[#369 'f16']: r#31
[#369 'texture_multisampled_2d']: r#31
[#370 ';']: s#511
[#371 'break']: r#32
[#371 'continue']: r#32
[#371 'f16']: r#32
[#371 'texture_multisampled_2d']: r#32
[#372 'break']: r#33
[#372 'continue']: r#33
[#372 'f16']: r#33
[#372 'texture_multisampled_2d']: r#33
[#373 'break']: r#34
[#373 'continue']: r#34
[#373 'f16']: r#34
[#373 'texture_multisampled_2d']: r#34
[#374 'break']: r#35
[#374 'continue']: r#35
[#374 'f16']: r#35
[#374 'texture_multisampled_2d']: r#35
[#375 'break']: r#36
[#375 'continue']: r#36
[#375 'f16']: r#36
[#375 'texture_multisampled_2d']: r#36
[#376 ';']: s#510
[#377 ';']: s#509
[#378 ';']: s#508
[#379 ';']: s#507
[#380 ';']: s#506
[#381 ';']: s#505
[#382 'break']: r#37
[#382 'continue']: r#37
[#382 'f16']: r#37
[#382 'texture_multisampled_2d']: r#37
[#383 ';']: s#504
[#384 '!']: s#68
[#384 '&']: s#71
[#384 '(']: s#86
[#384 '*']: s#70
[#384 '-']: s#67
[#384 'array']: s#82
[#384 'atomic']: s#94
[#384 'bitcast']: s#77
[#384 'bool']: s#87
[#384 'f16']: s#89
[#384 'f32']: s#88
[#384 'false']: s#113
[#384 'i32']: s#90
[#384 'mat2x2']: s#99
[#384 'mat2x3']: s#100
[#384 'mat2x4']: s#101
[#384 'mat3x2']: s#102
[#384 'mat3x3']: s#103
[#384 'mat3x4']: s#104
[#384 'mat4x2']: s#105
[#384 'mat4x3']: s#106
[#384 'mat4x4']: s#107
[#384 'ptr']: s#92
[#384 'sampler']: s#130
[#384 'sampler_comparison']: s#131
[#384 'texture_1d']: s#137
[#384 'texture_2d']: s#138
[#384 'texture_2d_array']: s#139
[#384 'texture_3d']: s#140
[#384 'texture_cube']: s#141
[#384 'texture_cube_array']: s#142
[#384 'texture_depth_2d']: s#132
[#384 'texture_depth_2d_array']: s#133
[#384 'texture_depth_cube']: s#134
[#384 'texture_depth_cube_array']: s#135
[#384 'texture_depth_multisampled_2d']: s#136
[#384 'texture_multisampled_2d']: s#143
[#384 'texture_storage_1d']: s#144
[#384 'texture_storage_2d']: s#145
[#384 'texture_storage_2d_array']: s#146
[#384 'texture_storage_3d']: s#147
[#384 'true']: s#112
[#384 'u32']: s#91
[#384 'vec2']: s#96
[#384 'vec3']: s#97
[#384 'vec4']: s#98
[#384 '~']: s#69
[#384 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#384 /0[fh]/]: s#122
[#384 /0[iu]?/]: s#119
[#384 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#384 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#384 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#384 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#384 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#384 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#384 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#384 /[1-9][0-9]*[fh]/]: s#123
[#384 /[1-9][0-9]*[iu]?/]: s#120
[#385 'if']: s#501
[#386 'switch']: s#499
[#387 'loop']: s#498
[#388 'for']: s#497
[#389 'while']: s#496
[#390 '(']: s#198
[#391 '=']: s#494
[#392 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#393 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#405 '%=']: s#486
[#405 '&=']: s#487
[#405 '*=']: s#484
[#405 '++']: s#478
[#405 '+=']: s#482
[#405 '--']: s#479
[#405 '-=']: s#483
[#405 '/=']: s#485
[#405 '<<=']: s#491
[#405 '=']: s#480
[#405 '>>=']: s#490
[#405 '^=']: s#489
[#405 '|=']: s#488
[#406 '=']: s#476
[#407 '@']: s#35
[#408 '.']: s#202
[#408 '[']: s#201
[#409 '&']: s#410
[#409 '(']: s#411
[#409 '*']: s#409
[#409 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#410 '&']: s#410
[#410 '(']: s#411
[#410 '*']: s#409
[#410 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#411 '&']: s#410
[#411 '(']: s#411
[#411 '*']: s#409
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#412 'read']: s#462
[#412 'read_write']: s#464
[#412 'write']: s#463
[#416 'array']: s#299
[#416 'atomic']: s#94
[#416 'bool']: s#87
[#416 'f16']: s#89
[#416 'f32']: s#88
[#416 'i32']: s#90
[#416 'mat2x2']: s#99
[#416 'mat2x3']: s#100
[#416 'mat2x4']: s#101
[#416 'mat3x2']: s#102
[#416 'mat3x3']: s#103
[#416 'mat3x4']: s#104
[#416 'mat4x2']: s#105
[#416 'mat4x3']: s#106
[#416 'mat4x4']: s#107
[#416 'ptr']: s#92
[#416 'sampler']: s#130
[#416 'sampler_comparison']: s#131
[#416 'texture_1d']: s#137
[#416 'texture_2d']: s#138
[#416 'texture_2d_array']: s#139
[#416 'texture_3d']: s#140
[#416 'texture_cube']: s#141
[#416 'texture_cube_array']: s#142
[#416 'texture_depth_2d']: s#132
[#416 'texture_depth_2d_array']: s#133
[#416 'texture_depth_cube']: s#134
[#416 'texture_depth_cube_array']: s#135
[#416 'texture_depth_multisampled_2d']: s#136
[#416 'texture_multisampled_2d']: s#143
[#416 'texture_storage_1d']: s#144
[#416 'texture_storage_2d']: s#145
[#416 'texture_storage_2d_array']: s#146
[#416 'texture_storage_3d']: s#147
[#416 'u32']: s#91
[#416 'vec2']: s#96
[#416 'vec3']: s#97
[#416 'vec4']: s#98
[#416 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#417 '>']: s#459
[#418 '!']: s#68
[#418 '&']: s#71
[#418 '(']: s#86
[#418 '*']: s#70
[#418 '-']: s#67
[#418 'array']: s#82
[#418 'atomic']: s#94
[#418 'bitcast']: s#77
[#418 'bool']: s#87
[#418 'f16']: s#89
[#418 'f32']: s#88
[#418 'false']: s#113
[#418 'i32']: s#90
[#418 'mat2x2']: s#99
[#418 'mat2x3']: s#100
[#418 'mat2x4']: s#101
[#418 'mat3x2']: s#102
[#418 'mat3x3']: s#103
[#418 'mat3x4']: s#104
[#418 'mat4x2']: s#105
[#418 'mat4x3']: s#106
[#418 'mat4x4']: s#107
[#418 'ptr']: s#92
[#418 'sampler']: s#130
[#418 'sampler_comparison']: s#131
[#418 'texture_1d']: s#137
[#418 'texture_2d']: s#138
[#418 'texture_2d_array']: s#139
[#418 'texture_3d']: s#140
[#418 'texture_cube']: s#141
[#418 'texture_cube_array']: s#142
[#418 'texture_depth_2d']: s#132
[#418 'texture_depth_2d_array']: s#133
[#418 'texture_depth_cube']: s#134
[#418 'texture_depth_cube_array']: s#135
[#418 'texture_depth_multisampled_2d']: s#136
[#418 'texture_multisampled_2d']: s#143
[#418 'texture_storage_1d']: s#144
[#418 'texture_storage_2d']: s#145
[#418 'texture_storage_2d_array']: s#146
[#418 'texture_storage_3d']: s#147
[#418 'true']: s#112
[#418 'u32']: s#91
[#418 'vec2']: s#96
[#418 'vec3']: s#97
[#418 'vec4']: s#98
[#418 '~']: s#69
[#418 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#418 /0[fh]/]: s#122
[#418 /0[iu]?/]: s#119
[#418 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#418 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#418 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#418 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#418 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#418 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#418 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#418 /[1-9][0-9]*[fh]/]: s#123
[#418 /[1-9][0-9]*[iu]?/]: s#120
[#421 '(']: s#86
[#422 ',']: s#453
[#424 ',']: s#425
[#425 '!']: s#68
[#425 '&']: s#71
[#425 '(']: s#86
[#425 '*']: s#70
[#425 '-']: s#67
[#425 'array']: s#82
[#425 'atomic']: s#94
[#425 'bitcast']: s#77
[#425 'bool']: s#87
[#425 'f16']: s#89
[#425 'f32']: s#88
[#425 'false']: s#113
[#425 'i32']: s#90
[#425 'mat2x2']: s#99
[#425 'mat2x3']: s#100
[#425 'mat2x4']: s#101
[#425 'mat3x2']: s#102
[#425 'mat3x3']: s#103
[#425 'mat3x4']: s#104
[#425 'mat4x2']: s#105
[#425 'mat4x3']: s#106
[#425 'mat4x4']: s#107
[#425 'ptr']: s#92
[#425 'sampler']: s#130
[#425 'sampler_comparison']: s#131
[#425 'texture_1d']: s#137
[#425 'texture_2d']: s#138
[#425 'texture_2d_array']: s#139
[#425 'texture_3d']: s#140
[#425 'texture_cube']: s#141
[#425 'texture_cube_array']: s#142
[#425 'texture_depth_2d']: s#132
[#425 'texture_depth_2d_array']: s#133
[#425 'texture_depth_cube']: s#134
[#425 'texture_depth_cube_array']: s#135
[#425 'texture_depth_multisampled_2d']: s#136
[#425 'texture_multisampled_2d']: s#143
[#425 'texture_storage_1d']: s#144
[#425 'texture_storage_2d']: s#145
[#425 'texture_storage_2d_array']: s#146
[#425 'texture_storage_3d']: s#147
[#425 'true']: s#112
[#425 'u32']: s#91
[#425 'vec2']: s#96
[#425 'vec3']: s#97
[#425 'vec4']: s#98
[#425 '~']: s#69
[#425 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#425 /0[fh]/]: s#122
[#425 /0[iu]?/]: s#119
[#425 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#425 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#425 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#425 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#425 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#425 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#425 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#425 /[1-9][0-9]*[fh]/]: s#123
[#425 /[1-9][0-9]*[iu]?/]: s#120
[#427 '.']: s#202
[#427 '[']: s#201
[#432 'f16']: r#38
[#432 'texture_multisampled_2d']: r#38
[#433 '!']: s#68
[#433 '&']: s#71
[#433 '(']: s#86
[#433 '*']: s#70
[#433 '-']: s#67
[#433 'array']: s#82
[#433 'atomic']: s#94
[#433 'bitcast']: s#77
[#433 'bool']: s#87
[#433 'f16']: s#89
[#433 'f32']: s#88
[#433 'false']: s#113
[#433 'i32']: s#90
[#433 'mat2x2']: s#99
[#433 'mat2x3']: s#100
[#433 'mat2x4']: s#101
[#433 'mat3x2']: s#102
[#433 'mat3x3']: s#103
[#433 'mat3x4']: s#104
[#433 'mat4x2']: s#105
[#433 'mat4x3']: s#106
[#433 'mat4x4']: s#107
[#433 'ptr']: s#92
[#433 'sampler']: s#130
[#433 'sampler_comparison']: s#131
[#433 'texture_1d']: s#137
[#433 'texture_2d']: s#138
[#433 'texture_2d_array']: s#139
[#433 'texture_3d']: s#140
[#433 'texture_cube']: s#141
[#433 'texture_cube_array']: s#142
[#433 'texture_depth_2d']: s#132
[#433 'texture_depth_2d_array']: s#133
[#433 'texture_depth_cube']: s#134
[#433 'texture_depth_cube_array']: s#135
[#433 'texture_depth_multisampled_2d']: s#136
[#433 'texture_multisampled_2d']: s#143
[#433 'texture_storage_1d']: s#144
[#433 'texture_storage_2d']: s#145
[#433 'texture_storage_2d_array']: s#146
[#433 'texture_storage_3d']: s#147
[#433 'true']: s#112
[#433 'u32']: s#91
[#433 'vec2']: s#96
[#433 'vec3']: s#97
[#433 'vec4']: s#98
[#433 '~']: s#69
[#433 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#433 /0[fh]/]: s#122
[#433 /0[iu]?/]: s#119
[#433 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#433 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#433 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#433 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#433 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#433 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#433 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#433 /[1-9][0-9]*[fh]/]: s#123
[#433 /[1-9][0-9]*[iu]?/]: s#120
[#434 'f16']: r#39
[#434 'texture_multisampled_2d']: r#39
[#435 'f16']: r#40
[#435 'texture_multisampled_2d']: r#40
[#436 'f16']: r#41
[#436 'texture_multisampled_2d']: r#41
[#437 'center']: s#444
[#437 'centroid']: s#445
[#437 'sample']: s#446
[#438 'f16']: r#42
[#438 'texture_multisampled_2d']: r#42
[#439 'f16']: r#43
[#439 'texture_multisampled_2d']: r#43
[#440 'f16']: r#44
[#440 'texture_multisampled_2d']: r#44
[#441 'f16']: r#45
[#441 'texture_multisampled_2d']: r#45
[#442 'f16']: r#46
[#442 'texture_multisampled_2d']: r#46
[#443 ',']: s#350
[#447 ',']: s#559
[#456 '+']: s#215
[#456 '-']: s#216
[#460 ',']: s#557
[#461 '>']: s#555
[#465 ')']: s#554
[#476 '!']: s#68
[#476 '&']: s#71
[#476 '(']: s#86
[#476 '*']: s#70
[#476 '-']: s#67
[#476 'array']: s#82
[#476 'atomic']: s#94
[#476 'bitcast']: s#77
[#476 'bool']: s#87
[#476 'f16']: s#89
[#476 'f32']: s#88
[#476 'false']: s#113
[#476 'i32']: s#90
[#476 'mat2x2']: s#99
[#476 'mat2x3']: s#100
[#476 'mat2x4']: s#101
[#476 'mat3x2']: s#102
[#476 'mat3x3']: s#103
[#476 'mat3x4']: s#104
[#476 'mat4x2']: s#105
[#476 'mat4x3']: s#106
[#476 'mat4x4']: s#107
[#476 'ptr']: s#92
[#476 'sampler']: s#130
[#476 'sampler_comparison']: s#131
[#476 'texture_1d']: s#137
[#476 'texture_2d']: s#138
[#476 'texture_2d_array']: s#139
[#476 'texture_3d']: s#140
[#476 'texture_cube']: s#141
[#476 'texture_cube_array']: s#142
[#476 'texture_depth_2d']: s#132
[#476 'texture_depth_2d_array']: s#133
[#476 'texture_depth_cube']: s#134
[#476 'texture_depth_cube_array']: s#135
[#476 'texture_depth_multisampled_2d']: s#136
[#476 'texture_multisampled_2d']: s#143
[#476 'texture_storage_1d']: s#144
[#476 'texture_storage_2d']: s#145
[#476 'texture_storage_2d_array']: s#146
[#476 'texture_storage_3d']: s#147
[#476 'true']: s#112
[#476 'u32']: s#91
[#476 'vec2']: s#96
[#476 'vec3']: s#97
[#476 'vec4']: s#98
[#476 '~']: s#69
[#476 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#476 /0[fh]/]: s#122
[#476 /0[iu]?/]: s#119
[#476 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#476 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#476 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#476 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#476 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#476 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#476 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#476 /[1-9][0-9]*[fh]/]: s#123
[#476 /[1-9][0-9]*[iu]?/]: s#120
[#477 '!']: s#68
[#477 '&']: s#71
[#477 '(']: s#86
[#477 '*']: s#70
[#477 '-']: s#67
[#477 'array']: s#82
[#477 'atomic']: s#94
[#477 'bitcast']: s#77
[#477 'bool']: s#87
[#477 'f16']: s#89
[#477 'f32']: s#88
[#477 'false']: s#113
[#477 'i32']: s#90
[#477 'mat2x2']: s#99
[#477 'mat2x3']: s#100
[#477 'mat2x4']: s#101
[#477 'mat3x2']: s#102
[#477 'mat3x3']: s#103
[#477 'mat3x4']: s#104
[#477 'mat4x2']: s#105
[#477 'mat4x3']: s#106
[#477 'mat4x4']: s#107
[#477 'ptr']: s#92
[#477 'sampler']: s#130
[#477 'sampler_comparison']: s#131
[#477 'texture_1d']: s#137
[#477 'texture_2d']: s#138
[#477 'texture_2d_array']: s#139
[#477 'texture_3d']: s#140
[#477 'texture_cube']: s#141
[#477 'texture_cube_array']: s#142
[#477 'texture_depth_2d']: s#132
[#477 'texture_depth_2d_array']: s#133
[#477 'texture_depth_cube']: s#134
[#477 'texture_depth_cube_array']: s#135
[#477 'texture_depth_multisampled_2d']: s#136
[#477 'texture_multisampled_2d']: s#143
[#477 'texture_storage_1d']: s#144
[#477 'texture_storage_2d']: s#145
[#477 'texture_storage_2d_array']: s#146
[#477 'texture_storage_3d']: s#147
[#477 'true']: s#112
[#477 'u32']: s#91
[#477 'vec2']: s#96
[#477 'vec3']: s#97
[#477 'vec4']: s#98
[#477 '~']: s#69
[#477 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#477 /0[fh]/]: s#122
[#477 /0[iu]?/]: s#119
[#477 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#477 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#477 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#477 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#477 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#477 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#477 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#477 /[1-9][0-9]*[fh]/]: s#123
[#477 /[1-9][0-9]*[iu]?/]: s#120
[#480 'f16']: r#47
[#480 'texture_multisampled_2d']: r#47
[#480 /0[xX][0-9a-fA-F]+[iu]?/]: r#47
[#481 'f16']: r#48
[#481 'texture_multisampled_2d']: r#48
[#481 /0[xX][0-9a-fA-F]+[iu]?/]: r#48
[#482 'f16']: r#49
[#482 'texture_multisampled_2d']: r#49
[#482 /0[xX][0-9a-fA-F]+[iu]?/]: r#49
[#483 'f16']: r#50
[#483 'texture_multisampled_2d']: r#50
[#483 /0[xX][0-9a-fA-F]+[iu]?/]: r#50
[#484 'f16']: r#51
[#484 'texture_multisampled_2d']: r#51
[#484 /0[xX][0-9a-fA-F]+[iu]?/]: r#51
[#485 'f16']: r#52
[#485 'texture_multisampled_2d']: r#52
[#485 /0[xX][0-9a-fA-F]+[iu]?/]: r#52
[#486 'f16']: r#53
[#486 'texture_multisampled_2d']: r#53
[#486 /0[xX][0-9a-fA-F]+[iu]?/]: r#53
[#487 'f16']: r#54
[#487 'texture_multisampled_2d']: r#54
[#487 /0[xX][0-9a-fA-F]+[iu]?/]: r#54
[#488 'f16']: r#55
[#488 'texture_multisampled_2d']: r#55
[#488 /0[xX][0-9a-fA-F]+[iu]?/]: r#55
[#489 'f16']: r#56
[#489 'texture_multisampled_2d']: r#56
[#489 /0[xX][0-9a-fA-F]+[iu]?/]: r#56
[#490 'f16']: r#57
[#490 'texture_multisampled_2d']: r#57
[#490 /0[xX][0-9a-fA-F]+[iu]?/]: r#57
[#491 'f16']: r#58
[#491 'texture_multisampled_2d']: r#58
[#491 /0[xX][0-9a-fA-F]+[iu]?/]: r#58
[#492 '=']: s#551
[#493 '=']: s#550
[#494 '!']: s#68
[#494 '&']: s#71
[#494 '(']: s#86
[#494 '*']: s#70
[#494 '-']: s#67
[#494 'array']: s#82
[#494 'atomic']: s#94
[#494 'bitcast']: s#77
[#494 'bool']: s#87
[#494 'f16']: s#89
[#494 'f32']: s#88
[#494 'false']: s#113
[#494 'i32']: s#90
[#494 'mat2x2']: s#99
[#494 'mat2x3']: s#100
[#494 'mat2x4']: s#101
[#494 'mat3x2']: s#102
[#494 'mat3x3']: s#103
[#494 'mat3x4']: s#104
[#494 'mat4x2']: s#105
[#494 'mat4x3']: s#106
[#494 'mat4x4']: s#107
[#494 'ptr']: s#92
[#494 'sampler']: s#130
[#494 'sampler_comparison']: s#131
[#494 'texture_1d']: s#137
[#494 'texture_2d']: s#138
[#494 'texture_2d_array']: s#139
[#494 'texture_3d']: s#140
[#494 'texture_cube']: s#141
[#494 'texture_cube_array']: s#142
[#494 'texture_depth_2d']: s#132
[#494 'texture_depth_2d_array']: s#133
[#494 'texture_depth_cube']: s#134
[#494 'texture_depth_cube_array']: s#135
[#494 'texture_depth_multisampled_2d']: s#136
[#494 'texture_multisampled_2d']: s#143
[#494 'texture_storage_1d']: s#144
[#494 'texture_storage_2d']: s#145
[#494 'texture_storage_2d_array']: s#146
[#494 'texture_storage_3d']: s#147
[#494 'true']: s#112
[#494 'u32']: s#91
[#494 'vec2']: s#96
[#494 'vec3']: s#97
[#494 'vec4']: s#98
[#494 '~']: s#69
[#494 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#494 /0[fh]/]: s#122
[#494 /0[iu]?/]: s#119
[#494 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#494 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#494 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#494 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#494 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#494 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#494 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#494 /[1-9][0-9]*[fh]/]: s#123
[#494 /[1-9][0-9]*[iu]?/]: s#120
[#496 '!']: s#68
[#496 '&']: s#71
[#496 '(']: s#86
[#496 '*']: s#70
[#496 '-']: s#67
[#496 'array']: s#82
[#496 'atomic']: s#94
[#496 'bitcast']: s#77
[#496 'bool']: s#87
[#496 'f16']: s#89
[#496 'f32']: s#88
[#496 'false']: s#113
[#496 'i32']: s#90
[#496 'mat2x2']: s#99
[#496 'mat2x3']: s#100
[#496 'mat2x4']: s#101
[#496 'mat3x2']: s#102
[#496 'mat3x3']: s#103
[#496 'mat3x4']: s#104
[#496 'mat4x2']: s#105
[#496 'mat4x3']: s#106
[#496 'mat4x4']: s#107
[#496 'ptr']: s#92
[#496 'sampler']: s#130
[#496 'sampler_comparison']: s#131
[#496 'texture_1d']: s#137
[#496 'texture_2d']: s#138
[#496 'texture_2d_array']: s#139
[#496 'texture_3d']: s#140
[#496 'texture_cube']: s#141
[#496 'texture_cube_array']: s#142
[#496 'texture_depth_2d']: s#132
[#496 'texture_depth_2d_array']: s#133
[#496 'texture_depth_cube']: s#134
[#496 'texture_depth_cube_array']: s#135
[#496 'texture_depth_multisampled_2d']: s#136
[#496 'texture_multisampled_2d']: s#143
[#496 'texture_storage_1d']: s#144
[#496 'texture_storage_2d']: s#145
[#496 'texture_storage_2d_array']: s#146
[#496 'texture_storage_3d']: s#147
[#496 'true']: s#112
[#496 'u32']: s#91
[#496 'vec2']: s#96
[#496 'vec3']: s#97
[#496 'vec4']: s#98
[#496 '~']: s#69
[#496 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#496 /0[fh]/]: s#122
[#496 /0[iu]?/]: s#119
[#496 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#496 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#496 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#496 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#496 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#496 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#496 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#496 /[1-9][0-9]*[fh]/]: s#123
[#496 /[1-9][0-9]*[iu]?/]: s#120
[#497 '(']: s#547
[#498 '@']: s#35
[#499 '!']: s#68
[#499 '&']: s#71
[#499 '(']: s#86
[#499 '*']: s#70
[#499 '-']: s#67
[#499 'array']: s#82
[#499 'atomic']: s#94
[#499 'bitcast']: s#77
[#499 'bool']: s#87
[#499 'f16']: s#89
[#499 'f32']: s#88
[#499 'false']: s#113
[#499 'i32']: s#90
[#499 'mat2x2']: s#99
[#499 'mat2x3']: s#100
[#499 'mat2x4']: s#101
[#499 'mat3x2']: s#102
[#499 'mat3x3']: s#103
[#499 'mat3x4']: s#104
[#499 'mat4x2']: s#105
[#499 'mat4x3']: s#106
[#499 'mat4x4']: s#107
[#499 'ptr']: s#92
[#499 'sampler']: s#130
[#499 'sampler_comparison']: s#131
[#499 'texture_1d']: s#137
[#499 'texture_2d']: s#138
[#499 'texture_2d_array']: s#139
[#499 'texture_3d']: s#140
[#499 'texture_cube']: s#141
[#499 'texture_cube_array']: s#142
[#499 'texture_depth_2d']: s#132
[#499 'texture_depth_2d_array']: s#133
[#499 'texture_depth_cube']: s#134
[#499 'texture_depth_cube_array']: s#135
[#499 'texture_depth_multisampled_2d']: s#136
[#499 'texture_multisampled_2d']: s#143
[#499 'texture_storage_1d']: s#144
[#499 'texture_storage_2d']: s#145
[#499 'texture_storage_2d_array']: s#146
[#499 'texture_storage_3d']: s#147
[#499 'true']: s#112
[#499 'u32']: s#91
[#499 'vec2']: s#96
[#499 'vec3']: s#97
[#499 'vec4']: s#98
[#499 '~']: s#69
[#499 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#499 /0[fh]/]: s#122
[#499 /0[iu]?/]: s#119
[#499 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#499 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#499 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#499 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#499 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#499 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#499 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#499 /[1-9][0-9]*[fh]/]: s#123
[#499 /[1-9][0-9]*[iu]?/]: s#120
[#500 'else']: s#542
[#501 '!']: s#68
[#501 '&']: s#71
[#501 '(']: s#86
[#501 '*']: s#70
[#501 '-']: s#67
[#501 'array']: s#82
[#501 'atomic']: s#94
[#501 'bitcast']: s#77
[#501 'bool']: s#87
[#501 'f16']: s#89
[#501 'f32']: s#88
[#501 'false']: s#113
[#501 'i32']: s#90
[#501 'mat2x2']: s#99
[#501 'mat2x3']: s#100
[#501 'mat2x4']: s#101
[#501 'mat3x2']: s#102
[#501 'mat3x3']: s#103
[#501 'mat3x4']: s#104
[#501 'mat4x2']: s#105
[#501 'mat4x3']: s#106
[#501 'mat4x4']: s#107
[#501 'ptr']: s#92
[#501 'sampler']: s#130
[#501 'sampler_comparison']: s#131
[#501 'texture_1d']: s#137
[#501 'texture_2d']: s#138
[#501 'texture_2d_array']: s#139
[#501 'texture_3d']: s#140
[#501 'texture_cube']: s#141
[#501 'texture_cube_array']: s#142
[#501 'texture_depth_2d']: s#132
[#501 'texture_depth_2d_array']: s#133
[#501 'texture_depth_cube']: s#134
[#501 'texture_depth_cube_array']: s#135
[#501 'texture_depth_multisampled_2d']: s#136
[#501 'texture_multisampled_2d']: s#143
[#501 'texture_storage_1d']: s#144
[#501 'texture_storage_2d']: s#145
[#501 'texture_storage_2d_array']: s#146
[#501 'texture_storage_3d']: s#147
[#501 'true']: s#112
[#501 'u32']: s#91
[#501 'vec2']: s#96
[#501 'vec3']: s#97
[#501 'vec4']: s#98
[#501 '~']: s#69
[#501 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#501 /0[fh]/]: s#122
[#501 /0[iu]?/]: s#119
[#501 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#501 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#501 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#501 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#501 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#501 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#501 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#501 /[1-9][0-9]*[fh]/]: s#123
[#501 /[1-9][0-9]*[iu]?/]: s#120
[#504 'break']: r#59
[#504 'continue']: r#59
[#504 'f16']: r#59
[#504 'texture_multisampled_2d']: r#59
[#505 'break']: r#60
[#505 'continue']: r#60
[#505 'f16']: r#60
[#505 'texture_multisampled_2d']: r#60
[#506 'break']: r#61
[#506 'continue']: r#61
[#506 'f16']: r#61
[#506 'texture_multisampled_2d']: r#61
[#507 'break']: r#62
[#507 'continue']: r#62
[#507 'f16']: r#62
[#507 'texture_multisampled_2d']: r#62
[#508 'break']: r#63
[#508 'continue']: r#63
[#508 'f16']: r#63
[#508 'texture_multisampled_2d']: r#63
[#509 'break']: r#64
[#509 'continue']: r#64
[#509 'f16']: r#64
[#509 'texture_multisampled_2d']: r#64
[#510 'break']: r#65
[#510 'continue']: r#65
[#510 'f16']: r#65
[#510 'texture_multisampled_2d']: r#65
[#511 'break']: r#66
[#511 'continue']: r#66
[#511 'f16']: r#66
[#511 'texture_multisampled_2d']: r#66
[#513 'break']: r#67
[#513 'continue']: r#67
[#513 'f16']: r#67
[#513 'texture_multisampled_2d']: r#67
[#513 EndOfText]: r#67
[#515 ':']: s#537
[#516 ',']: s#536
[#518 ',']: s#519
[#519 '@']: s#35
[#520 '->']: s#532
[#523 '}']: s#530
[#525 'array']: s#299
[#525 'atomic']: s#94
[#525 'bool']: s#87
[#525 'f16']: s#89
[#525 'f32']: s#88
[#525 'i32']: s#90
[#525 'mat2x2']: s#99
[#525 'mat2x3']: s#100
[#525 'mat2x4']: s#101
[#525 'mat3x2']: s#102
[#525 'mat3x3']: s#103
[#525 'mat3x4']: s#104
[#525 'mat4x2']: s#105
[#525 'mat4x3']: s#106
[#525 'mat4x4']: s#107
[#525 'ptr']: s#92
[#525 'sampler']: s#130
[#525 'sampler_comparison']: s#131
[#525 'texture_1d']: s#137
[#525 'texture_2d']: s#138
[#525 'texture_2d_array']: s#139
[#525 'texture_3d']: s#140
[#525 'texture_cube']: s#141
[#525 'texture_cube_array']: s#142
[#525 'texture_depth_2d']: s#132
[#525 'texture_depth_2d_array']: s#133
[#525 'texture_depth_cube']: s#134
[#525 'texture_depth_cube_array']: s#135
[#525 'texture_depth_multisampled_2d']: s#136
[#525 'texture_multisampled_2d']: s#143
[#525 'texture_storage_1d']: s#144
[#525 'texture_storage_2d']: s#145
[#525 'texture_storage_2d_array']: s#146
[#525 'texture_storage_3d']: s#147
[#525 'u32']: s#91
[#525 'vec2']: s#96
[#525 'vec3']: s#97
[#525 'vec4']: s#98
[#525 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#527 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#68
[#528 'f16']: r#69
[#528 'texture_multisampled_2d']: r#69
[#530 EndOfText]: r#70
[#532 '@']: s#35
[#537 'array']: s#299
[#537 'atomic']: s#94
[#537 'bool']: s#87
[#537 'f16']: s#89
[#537 'f32']: s#88
[#537 'i32']: s#90
[#537 'mat2x2']: s#99
[#537 'mat2x3']: s#100
[#537 'mat2x4']: s#101
[#537 'mat3x2']: s#102
[#537 'mat3x3']: s#103
[#537 'mat3x4']: s#104
[#537 'mat4x2']: s#105
[#537 'mat4x3']: s#106
[#537 'mat4x4']: s#107
[#537 'ptr']: s#92
[#537 'sampler']: s#130
[#537 'sampler_comparison']: s#131
[#537 'texture_1d']: s#137
[#537 'texture_2d']: s#138
[#537 'texture_2d_array']: s#139
[#537 'texture_3d']: s#140
[#537 'texture_cube']: s#141
[#537 'texture_cube_array']: s#142
[#537 'texture_depth_2d']: s#132
[#537 'texture_depth_2d_array']: s#133
[#537 'texture_depth_cube']: s#134
[#537 'texture_depth_cube_array']: s#135
[#537 'texture_depth_multisampled_2d']: s#136
[#537 'texture_multisampled_2d']: s#143
[#537 'texture_storage_1d']: s#144
[#537 'texture_storage_2d']: s#145
[#537 'texture_storage_2d_array']: s#146
[#537 'texture_storage_3d']: s#147
[#537 'u32']: s#91
[#537 'vec2']: s#96
[#537 'vec3']: s#97
[#537 'vec4']: s#98
[#537 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#538 '@']: s#35
[#539 'else']: s#583
[#540 'break']: r#71
[#540 'continue']: r#71
[#540 'f16']: r#71
[#540 'texture_multisampled_2d']: r#71
[#541 'else']: s#542
[#542 'if']: s#579
[#543 '@']: s#35
[#544 '{']: s#574
[#546 '@']: s#35
[#547 '&']: s#410
[#547 '(']: s#411
[#547 '*']: s#409
[#547 '_']: s#406
[#547 'array']: s#82
[#547 'atomic']: s#94
[#547 'bool']: s#87
[#547 'const']: s#393
[#547 'f16']: s#89
[#547 'f32']: s#88
[#547 'i32']: s#90
[#547 'let']: s#392
[#547 'mat2x2']: s#99
[#547 'mat2x3']: s#100
[#547 'mat2x4']: s#101
[#547 'mat3x2']: s#102
[#547 'mat3x3']: s#103
[#547 'mat3x4']: s#104
[#547 'mat4x2']: s#105
[#547 'mat4x3']: s#106
[#547 'mat4x4']: s#107
[#547 'ptr']: s#92
[#547 'sampler']: s#130
[#547 'sampler_comparison']: s#131
[#547 'texture_1d']: s#137
[#547 'texture_2d']: s#138
[#547 'texture_2d_array']: s#139
[#547 'texture_3d']: s#140
[#547 'texture_cube']: s#141
[#547 'texture_cube_array']: s#142
[#547 'texture_depth_2d']: s#132
[#547 'texture_depth_2d_array']: s#133
[#547 'texture_depth_cube']: s#134
[#547 'texture_depth_cube_array']: s#135
[#547 'texture_depth_multisampled_2d']: s#136
[#547 'texture_multisampled_2d']: s#143
[#547 'texture_storage_1d']: s#144
[#547 'texture_storage_2d']: s#145
[#547 'texture_storage_2d_array']: s#146
[#547 'texture_storage_3d']: s#147
[#547 'u32']: s#91
[#547 'var']: s#156
[#547 'vec2']: s#96
[#547 'vec3']: s#97
[#547 'vec4']: s#98
[#547 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#548 '@']: s#35
[#550 '!']: s#68
[#550 '&']: s#71
[#550 '(']: s#86
[#550 '*']: s#70
[#550 '-']: s#67
[#550 'array']: s#82
[#550 'atomic']: s#94
[#550 'bitcast']: s#77
[#550 'bool']: s#87
[#550 'f16']: s#89
[#550 'f32']: s#88
[#550 'false']: s#113
[#550 'i32']: s#90
[#550 'mat2x2']: s#99
[#550 'mat2x3']: s#100
[#550 'mat2x4']: s#101
[#550 'mat3x2']: s#102
[#550 'mat3x3']: s#103
[#550 'mat3x4']: s#104
[#550 'mat4x2']: s#105
[#550 'mat4x3']: s#106
[#550 'mat4x4']: s#107
[#550 'ptr']: s#92
[#550 'sampler']: s#130
[#550 'sampler_comparison']: s#131
[#550 'texture_1d']: s#137
[#550 'texture_2d']: s#138
[#550 'texture_2d_array']: s#139
[#550 'texture_3d']: s#140
[#550 'texture_cube']: s#141
[#550 'texture_cube_array']: s#142
[#550 'texture_depth_2d']: s#132
[#550 'texture_depth_2d_array']: s#133
[#550 'texture_depth_cube']: s#134
[#550 'texture_depth_cube_array']: s#135
[#550 'texture_depth_multisampled_2d']: s#136
[#550 'texture_multisampled_2d']: s#143
[#550 'texture_storage_1d']: s#144
[#550 'texture_storage_2d']: s#145
[#550 'texture_storage_2d_array']: s#146
[#550 'texture_storage_3d']: s#147
[#550 'true']: s#112
[#550 'u32']: s#91
[#550 'vec2']: s#96
[#550 'vec3']: s#97
[#550 'vec4']: s#98
[#550 '~']: s#69
[#550 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#550 /0[fh]/]: s#122
[#550 /0[iu]?/]: s#119
[#550 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#550 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#550 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#550 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#550 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#550 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#550 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#550 /[1-9][0-9]*[fh]/]: s#123
[#550 /[1-9][0-9]*[iu]?/]: s#120
[#551 '!']: s#68
[#551 '&']: s#71
[#551 '(']: s#86
[#551 '*']: s#70
[#551 '-']: s#67
[#551 'array']: s#82
[#551 'atomic']: s#94
[#551 'bitcast']: s#77
[#551 'bool']: s#87
[#551 'f16']: s#89
[#551 'f32']: s#88
[#551 'false']: s#113
[#551 'i32']: s#90
[#551 'mat2x2']: s#99
[#551 'mat2x3']: s#100
[#551 'mat2x4']: s#101
[#551 'mat3x2']: s#102
[#551 'mat3x3']: s#103
[#551 'mat3x4']: s#104
[#551 'mat4x2']: s#105
[#551 'mat4x3']: s#106
[#551 'mat4x4']: s#107
[#551 'ptr']: s#92
[#551 'sampler']: s#130
[#551 'sampler_comparison']: s#131
[#551 'texture_1d']: s#137
[#551 'texture_2d']: s#138
[#551 'texture_2d_array']: s#139
[#551 'texture_3d']: s#140
[#551 'texture_cube']: s#141
[#551 'texture_cube_array']: s#142
[#551 'texture_depth_2d']: s#132
[#551 'texture_depth_2d_array']: s#133
[#551 'texture_depth_cube']: s#134
[#551 'texture_depth_cube_array']: s#135
[#551 'texture_depth_multisampled_2d']: s#136
[#551 'texture_multisampled_2d']: s#143
[#551 'texture_storage_1d']: s#144
[#551 'texture_storage_2d']: s#145
[#551 'texture_storage_2d_array']: s#146
[#551 'texture_storage_3d']: s#147
[#551 'true']: s#112
[#551 'u32']: s#91
[#551 'vec2']: s#96
[#551 'vec3']: s#97
[#551 'vec4']: s#98
[#551 '~']: s#69
[#551 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#551 /0[fh]/]: s#122
[#551 /0[iu]?/]: s#119
[#551 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#551 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#551 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#551 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#551 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#551 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#551 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#551 /[1-9][0-9]*[fh]/]: s#123
[#551 /[1-9][0-9]*[iu]?/]: s#120
[#556 '>']: s#563
[#557 'read']: s#462
[#557 'read_write']: s#464
[#557 'write']: s#463
[#558 'f16']: r#72
[#558 'texture_multisampled_2d']: r#72
[#559 '!']: s#68
[#559 '&']: s#71
[#559 '(']: s#86
[#559 '*']: s#70
[#559 '-']: s#67
[#559 'array']: s#82
[#559 'atomic']: s#94
[#559 'bitcast']: s#77
[#559 'bool']: s#87
[#559 'f16']: s#89
[#559 'f32']: s#88
[#559 'false']: s#113
[#559 'i32']: s#90
[#559 'mat2x2']: s#99
[#559 'mat2x3']: s#100
[#559 'mat2x4']: s#101
[#559 'mat3x2']: s#102
[#559 'mat3x3']: s#103
[#559 'mat3x4']: s#104
[#559 'mat4x2']: s#105
[#559 'mat4x3']: s#106
[#559 'mat4x4']: s#107
[#559 'ptr']: s#92
[#559 'sampler']: s#130
[#559 'sampler_comparison']: s#131
[#559 'texture_1d']: s#137
[#559 'texture_2d']: s#138
[#559 'texture_2d_array']: s#139
[#559 'texture_3d']: s#140
[#559 'texture_cube']: s#141
[#559 'texture_cube_array']: s#142
[#559 'texture_depth_2d']: s#132
[#559 'texture_depth_2d_array']: s#133
[#559 'texture_depth_cube']: s#134
[#559 'texture_depth_cube_array']: s#135
[#559 'texture_depth_multisampled_2d']: s#136
[#559 'texture_multisampled_2d']: s#143
[#559 'texture_storage_1d']: s#144
[#559 'texture_storage_2d']: s#145
[#559 'texture_storage_2d_array']: s#146
[#559 'texture_storage_3d']: s#147
[#559 'true']: s#112
[#559 'u32']: s#91
[#559 'vec2']: s#96
[#559 'vec3']: s#97
[#559 'vec4']: s#98
[#559 '~']: s#69
[#559 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#559 /0[fh]/]: s#122
[#559 /0[iu]?/]: s#119
[#559 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#559 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#559 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#559 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#559 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#559 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#559 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#559 /[1-9][0-9]*[fh]/]: s#123
[#559 /[1-9][0-9]*[iu]?/]: s#120
[#560 'f16']: r#73
[#560 'texture_multisampled_2d']: r#73
[#561 ',']: s#350
[#566 'break']: r#74
[#566 'continue']: r#74
[#566 'f16']: r#74
[#566 'texture_multisampled_2d']: r#74
[#567 ')']: s#599
[#568 ';']: s#598
[#574 '&']: s#410
[#574 '(']: s#411
[#574 '*']: s#409
[#574 ';']: s#369
[#574 '@']: s#35
[#574 '_']: s#406
[#574 'array']: s#82
[#574 'atomic']: s#94
[#574 'bool']: s#87
[#574 'break']: s#394
[#574 'const']: s#393
[#574 'continue']: s#395
[#574 'discard']: s#380
[#574 'f16']: s#89
[#574 'f32']: s#88
[#574 'i32']: s#90
[#574 'let']: s#392
[#574 'mat2x2']: s#99
[#574 'mat2x3']: s#100
[#574 'mat2x4']: s#101
[#574 'mat3x2']: s#102
[#574 'mat3x3']: s#103
[#574 'mat3x4']: s#104
[#574 'mat4x2']: s#105
[#574 'mat4x3']: s#106
[#574 'mat4x4']: s#107
[#574 'ptr']: s#92
[#574 'return']: s#384
[#574 'sampler']: s#130
[#574 'sampler_comparison']: s#131
[#574 'static_assert']: s#30
[#574 'texture_1d']: s#137
[#574 'texture_2d']: s#138
[#574 'texture_2d_array']: s#139
[#574 'texture_3d']: s#140
[#574 'texture_cube']: s#141
[#574 'texture_cube_array']: s#142
[#574 'texture_depth_2d']: s#132
[#574 'texture_depth_2d_array']: s#133
[#574 'texture_depth_cube']: s#134
[#574 'texture_depth_cube_array']: s#135
[#574 'texture_depth_multisampled_2d']: s#136
[#574 'texture_multisampled_2d']: s#143
[#574 'texture_storage_1d']: s#144
[#574 'texture_storage_2d']: s#145
[#574 'texture_storage_2d_array']: s#146
[#574 'texture_storage_3d']: s#147
[#574 'u32']: s#91
[#574 'var']: s#156
[#574 'vec2']: s#96
[#574 'vec3']: s#97
[#574 'vec4']: s#98
[#574 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#575 'break']: r#75
[#575 'continue']: r#75
[#575 'f16']: r#75
[#575 'texture_multisampled_2d']: r#75
[#576 '{']: s#594
[#578 '@']: s#35
[#579 '!']: s#68
[#579 '&']: s#71
[#579 '(']: s#86
[#579 '*']: s#70
[#579 '-']: s#67
[#579 'array']: s#82
[#579 'atomic']: s#94
[#579 'bitcast']: s#77
[#579 'bool']: s#87
[#579 'f16']: s#89
[#579 'f32']: s#88
[#579 'false']: s#113
[#579 'i32']: s#90
[#579 'mat2x2']: s#99
[#579 'mat2x3']: s#100
[#579 'mat2x4']: s#101
[#579 'mat3x2']: s#102
[#579 'mat3x3']: s#103
[#579 'mat3x4']: s#104
[#579 'mat4x2']: s#105
[#579 'mat4x3']: s#106
[#579 'mat4x4']: s#107
[#579 'ptr']: s#92
[#579 'sampler']: s#130
[#579 'sampler_comparison']: s#131
[#579 'texture_1d']: s#137
[#579 'texture_2d']: s#138
[#579 'texture_2d_array']: s#139
[#579 'texture_3d']: s#140
[#579 'texture_cube']: s#141
[#579 'texture_cube_array']: s#142
[#579 'texture_depth_2d']: s#132
[#579 'texture_depth_2d_array']: s#133
[#579 'texture_depth_cube']: s#134
[#579 'texture_depth_cube_array']: s#135
[#579 'texture_depth_multisampled_2d']: s#136
[#579 'texture_multisampled_2d']: s#143
[#579 'texture_storage_1d']: s#144
[#579 'texture_storage_2d']: s#145
[#579 'texture_storage_2d_array']: s#146
[#579 'texture_storage_3d']: s#147
[#579 'true']: s#112
[#579 'u32']: s#91
[#579 'vec2']: s#96
[#579 'vec3']: s#97
[#579 'vec4']: s#98
[#579 '~']: s#69
[#579 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#579 /0[fh]/]: s#122
[#579 /0[iu]?/]: s#119
[#579 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#579 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#579 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#579 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#579 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#579 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#579 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#579 /[1-9][0-9]*[fh]/]: s#123
[#579 /[1-9][0-9]*[iu]?/]: s#120
[#580 'break']: r#76
[#580 'continue']: r#76
[#580 'f16']: r#76
[#580 'texture_multisampled_2d']: r#76
[#581 'break']: r#77
[#581 'continue']: r#77
[#581 'f16']: r#77
[#581 'texture_multisampled_2d']: r#77
[#582 'break']: r#78
[#582 'continue']: r#78
[#582 'f16']: r#78
[#582 'texture_multisampled_2d']: r#78
[#583 '@']: s#35
[#584 'break']: r#79
[#584 'continue']: r#79
[#584 'f16']: r#79
[#584 'texture_multisampled_2d']: r#79
[#586 'array']: s#299
[#586 'atomic']: s#94
[#586 'bool']: s#87
[#586 'f16']: s#89
[#586 'f32']: s#88
[#586 'i32']: s#90
[#586 'mat2x2']: s#99
[#586 'mat2x3']: s#100
[#586 'mat2x4']: s#101
[#586 'mat3x2']: s#102
[#586 'mat3x3']: s#103
[#586 'mat3x4']: s#104
[#586 'mat4x2']: s#105
[#586 'mat4x3']: s#106
[#586 'mat4x4']: s#107
[#586 'ptr']: s#92
[#586 'sampler']: s#130
[#586 'sampler_comparison']: s#131
[#586 'texture_1d']: s#137
[#586 'texture_2d']: s#138
[#586 'texture_2d_array']: s#139
[#586 'texture_3d']: s#140
[#586 'texture_cube']: s#141
[#586 'texture_cube_array']: s#142
[#586 'texture_depth_2d']: s#132
[#586 'texture_depth_2d_array']: s#133
[#586 'texture_depth_cube']: s#134
[#586 'texture_depth_cube_array']: s#135
[#586 'texture_depth_multisampled_2d']: s#136
[#586 'texture_multisampled_2d']: s#143
[#586 'texture_storage_1d']: s#144
[#586 'texture_storage_2d']: s#145
[#586 'texture_storage_2d_array']: s#146
[#586 'texture_storage_3d']: s#147
[#586 'u32']: s#91
[#586 'vec2']: s#96
[#586 'vec3']: s#97
[#586 'vec4']: s#98
[#586 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#587 'f16']: r#80
[#587 'texture_multisampled_2d']: r#80
[#588 '@']: s#35
[#589 'f16']: r#81
[#589 'texture_multisampled_2d']: r#81
[#591 'break']: r#82
[#591 'continue']: r#82
[#591 'f16']: r#82
[#591 'texture_multisampled_2d']: r#82
[#592 '@']: s#35
[#594 'case']: s#613
[#594 'default']: s#614
[#595 'continuing']: s#607
[#597 '&']: s#410
[#597 '(']: s#411
[#597 '*']: s#409
[#597 ';']: s#369
[#597 '@']: s#35
[#597 '_']: s#406
[#597 'array']: s#82
[#597 'atomic']: s#94
[#597 'bool']: s#87
[#597 'break']: s#394
[#597 'const']: s#393
[#597 'continue']: s#395
[#597 'discard']: s#380
[#597 'f16']: s#89
[#597 'f32']: s#88
[#597 'i32']: s#90
[#597 'let']: s#392
[#597 'mat2x2']: s#99
[#597 'mat2x3']: s#100
[#597 'mat2x4']: s#101
[#597 'mat3x2']: s#102
[#597 'mat3x3']: s#103
[#597 'mat3x4']: s#104
[#597 'mat4x2']: s#105
[#597 'mat4x3']: s#106
[#597 'mat4x4']: s#107
[#597 'ptr']: s#92
[#597 'return']: s#384
[#597 'sampler']: s#130
[#597 'sampler_comparison']: s#131
[#597 'static_assert']: s#30
[#597 'texture_1d']: s#137
[#597 'texture_2d']: s#138
[#597 'texture_2d_array']: s#139
[#597 'texture_3d']: s#140
[#597 'texture_cube']: s#141
[#597 'texture_cube_array']: s#142
[#597 'texture_depth_2d']: s#132
[#597 'texture_depth_2d_array']: s#133
[#597 'texture_depth_cube']: s#134
[#597 'texture_depth_cube_array']: s#135
[#597 'texture_depth_multisampled_2d']: s#136
[#597 'texture_multisampled_2d']: s#143
[#597 'texture_storage_1d']: s#144
[#597 'texture_storage_2d']: s#145
[#597 'texture_storage_2d_array']: s#146
[#597 'texture_storage_3d']: s#147
[#597 'u32']: s#91
[#597 'var']: s#156
[#597 'vec2']: s#96
[#597 'vec3']: s#97
[#597 'vec4']: s#98
[#597 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#598 '!']: s#68
[#598 '&']: s#71
[#598 '(']: s#86
[#598 '*']: s#70
[#598 '-']: s#67
[#598 'array']: s#82
[#598 'atomic']: s#94
[#598 'bitcast']: s#77
[#598 'bool']: s#87
[#598 'f16']: s#89
[#598 'f32']: s#88
[#598 'false']: s#113
[#598 'i32']: s#90
[#598 'mat2x2']: s#99
[#598 'mat2x3']: s#100
[#598 'mat2x4']: s#101
[#598 'mat3x2']: s#102
[#598 'mat3x3']: s#103
[#598 'mat3x4']: s#104
[#598 'mat4x2']: s#105
[#598 'mat4x3']: s#106
[#598 'mat4x4']: s#107
[#598 'ptr']: s#92
[#598 'sampler']: s#130
[#598 'sampler_comparison']: s#131
[#598 'texture_1d']: s#137
[#598 'texture_2d']: s#138
[#598 'texture_2d_array']: s#139
[#598 'texture_3d']: s#140
[#598 'texture_cube']: s#141
[#598 'texture_cube_array']: s#142
[#598 'texture_depth_2d']: s#132
[#598 'texture_depth_2d_array']: s#133
[#598 'texture_depth_cube']: s#134
[#598 'texture_depth_cube_array']: s#135
[#598 'texture_depth_multisampled_2d']: s#136
[#598 'texture_multisampled_2d']: s#143
[#598 'texture_storage_1d']: s#144
[#598 'texture_storage_2d']: s#145
[#598 'texture_storage_2d_array']: s#146
[#598 'texture_storage_3d']: s#147
[#598 'true']: s#112
[#598 'u32']: s#91
[#598 'vec2']: s#96
[#598 'vec3']: s#97
[#598 'vec4']: s#98
[#598 '~']: s#69
[#598 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#598 /0[fh]/]: s#122
[#598 /0[iu]?/]: s#119
[#598 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#598 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#598 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#598 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#598 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#598 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#598 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#598 /[1-9][0-9]*[fh]/]: s#123
[#598 /[1-9][0-9]*[iu]?/]: s#120
[#599 '@']: s#35
[#600 'f16']: r#83
[#600 'texture_multisampled_2d']: r#83
[#601 'break']: r#84
[#601 'continue']: r#84
[#601 'f16']: r#84
[#601 'texture_multisampled_2d']: r#84
[#602 ';']: s#629
[#605 '}']: s#628
[#607 '@']: s#35
[#608 '}']: s#623
[#610 'case']: s#613
[#610 'default']: s#614
[#613 '!']: s#68
[#613 '&']: s#71
[#613 '(']: s#86
[#613 '*']: s#70
[#613 '-']: s#67
[#613 'array']: s#82
[#613 'atomic']: s#94
[#613 'bitcast']: s#77
[#613 'bool']: s#87
[#613 'default']: s#620
[#613 'f16']: s#89
[#613 'f32']: s#88
[#613 'false']: s#113
[#613 'i32']: s#90
[#613 'mat2x2']: s#99
[#613 'mat2x3']: s#100
[#613 'mat2x4']: s#101
[#613 'mat3x2']: s#102
[#613 'mat3x3']: s#103
[#613 'mat3x4']: s#104
[#613 'mat4x2']: s#105
[#613 'mat4x3']: s#106
[#613 'mat4x4']: s#107
[#613 'ptr']: s#92
[#613 'sampler']: s#130
[#613 'sampler_comparison']: s#131
[#613 'texture_1d']: s#137
[#613 'texture_2d']: s#138
[#613 'texture_2d_array']: s#139
[#613 'texture_3d']: s#140
[#613 'texture_cube']: s#141
[#613 'texture_cube_array']: s#142
[#613 'texture_depth_2d']: s#132
[#613 'texture_depth_2d_array']: s#133
[#613 'texture_depth_cube']: s#134
[#613 'texture_depth_cube_array']: s#135
[#613 'texture_depth_multisampled_2d']: s#136
[#613 'texture_multisampled_2d']: s#143
[#613 'texture_storage_1d']: s#144
[#613 'texture_storage_2d']: s#145
[#613 'texture_storage_2d_array']: s#146
[#613 'texture_storage_3d']: s#147
[#613 'true']: s#112
[#613 'u32']: s#91
[#613 'vec2']: s#96
[#613 'vec3']: s#97
[#613 'vec4']: s#98
[#613 '~']: s#69
[#613 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#613 /0[fh]/]: s#122
[#613 /0[iu]?/]: s#119
[#613 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#613 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#613 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#613 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#613 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#613 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#613 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#613 /[1-9][0-9]*[fh]/]: s#123
[#613 /[1-9][0-9]*[iu]?/]: s#120
[#614 ':']: s#617
[#615 'break']: r#85
[#615 'continue']: r#85
[#615 'f16']: r#85
[#615 'texture_multisampled_2d']: r#85
[#616 '@']: s#35
[#618 ':']: s#641
[#619 ',']: s#639
[#623 'break']: r#86
[#623 'continue']: r#86
[#623 'f16']: r#86
[#623 'texture_multisampled_2d']: r#86
[#625 '{']: s#635
[#627 '@']: s#35
[#628 'break']: r#87
[#628 'continue']: r#87
[#628 'f16']: r#87
[#628 'texture_multisampled_2d']: r#87
[#629 '&']: s#410
[#629 '(']: s#411
[#629 '*']: s#409
[#629 '_']: s#406
[#629 'array']: s#82
[#629 'atomic']: s#94
[#629 'bool']: s#87
[#629 'f16']: s#89
[#629 'f32']: s#88
[#629 'i32']: s#90
[#629 'mat2x2']: s#99
[#629 'mat2x3']: s#100
[#629 'mat2x4']: s#101
[#629 'mat3x2']: s#102
[#629 'mat3x3']: s#103
[#629 'mat3x4']: s#104
[#629 'mat4x2']: s#105
[#629 'mat4x3']: s#106
[#629 'mat4x4']: s#107
[#629 'ptr']: s#92
[#629 'sampler']: s#130
[#629 'sampler_comparison']: s#131
[#629 'texture_1d']: s#137
[#629 'texture_2d']: s#138
[#629 'texture_2d_array']: s#139
[#629 'texture_3d']: s#140
[#629 'texture_cube']: s#141
[#629 'texture_cube_array']: s#142
[#629 'texture_depth_2d']: s#132
[#629 'texture_depth_2d_array']: s#133
[#629 'texture_depth_cube']: s#134
[#629 'texture_depth_cube_array']: s#135
[#629 'texture_depth_multisampled_2d']: s#136
[#629 'texture_multisampled_2d']: s#143
[#629 'texture_storage_1d']: s#144
[#629 'texture_storage_2d']: s#145
[#629 'texture_storage_2d_array']: s#146
[#629 'texture_storage_3d']: s#147
[#629 'u32']: s#91
[#629 'vec2']: s#96
[#629 'vec3']: s#97
[#629 'vec4']: s#98
[#629 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#635 '&']: s#410
[#635 '(']: s#411
[#635 '*']: s#409
[#635 ';']: s#369
[#635 '@']: s#35
[#635 '_']: s#406
[#635 'array']: s#82
[#635 'atomic']: s#94
[#635 'bool']: s#87
[#635 'break']: s#394
[#635 'const']: s#393
[#635 'continue']: s#395
[#635 'discard']: s#380
[#635 'f16']: s#89
[#635 'f32']: s#88
[#635 'i32']: s#90
[#635 'let']: s#392
[#635 'mat2x2']: s#99
[#635 'mat2x3']: s#100
[#635 'mat2x4']: s#101
[#635 'mat3x2']: s#102
[#635 'mat3x3']: s#103
[#635 'mat3x4']: s#104
[#635 'mat4x2']: s#105
[#635 'mat4x3']: s#106
[#635 'mat4x4']: s#107
[#635 'ptr']: s#92
[#635 'return']: s#384
[#635 'sampler']: s#130
[#635 'sampler_comparison']: s#131
[#635 'static_assert']: s#30
[#635 'texture_1d']: s#137
[#635 'texture_2d']: s#138
[#635 'texture_2d_array']: s#139
[#635 'texture_3d']: s#140
[#635 'texture_cube']: s#141
[#635 'texture_cube_array']: s#142
[#635 'texture_depth_2d']: s#132
[#635 'texture_depth_2d_array']: s#133
[#635 'texture_depth_cube']: s#134
[#635 'texture_depth_cube_array']: s#135
[#635 'texture_depth_multisampled_2d']: s#136
[#635 'texture_multisampled_2d']: s#143
[#635 'texture_storage_1d']: s#144
[#635 'texture_storage_2d']: s#145
[#635 'texture_storage_2d_array']: s#146
[#635 'texture_storage_3d']: s#147
[#635 'u32']: s#91
[#635 'var']: s#156
[#635 'vec2']: s#96
[#635 'vec3']: s#97
[#635 'vec4']: s#98
[#635 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#636 ',']: s#647
[#638 ',']: s#639
[#639 '!']: s#68
[#639 '&']: s#71
[#639 '(']: s#86
[#639 '*']: s#70
[#639 '-']: s#67
[#639 'array']: s#82
[#639 'atomic']: s#94
[#639 'bitcast']: s#77
[#639 'bool']: s#87
[#639 'default']: s#620
[#639 'f16']: s#89
[#639 'f32']: s#88
[#639 'false']: s#113
[#639 'i32']: s#90
[#639 'mat2x2']: s#99
[#639 'mat2x3']: s#100
[#639 'mat2x4']: s#101
[#639 'mat3x2']: s#102
[#639 'mat3x3']: s#103
[#639 'mat3x4']: s#104
[#639 'mat4x2']: s#105
[#639 'mat4x3']: s#106
[#639 'mat4x4']: s#107
[#639 'ptr']: s#92
[#639 'sampler']: s#130
[#639 'sampler_comparison']: s#131
[#639 'texture_1d']: s#137
[#639 'texture_2d']: s#138
[#639 'texture_2d_array']: s#139
[#639 'texture_3d']: s#140
[#639 'texture_cube']: s#141
[#639 'texture_cube_array']: s#142
[#639 'texture_depth_2d']: s#132
[#639 'texture_depth_2d_array']: s#133
[#639 'texture_depth_cube']: s#134
[#639 'texture_depth_cube_array']: s#135
[#639 'texture_depth_multisampled_2d']: s#136
[#639 'texture_multisampled_2d']: s#143
[#639 'texture_storage_1d']: s#144
[#639 'texture_storage_2d']: s#145
[#639 'texture_storage_2d_array']: s#146
[#639 'texture_storage_3d']: s#147
[#639 'true']: s#112
[#639 'u32']: s#91
[#639 'vec2']: s#96
[#639 'vec3']: s#97
[#639 'vec4']: s#98
[#639 '~']: s#69
[#639 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#639 /0[fh]/]: s#122
[#639 /0[iu]?/]: s#119
[#639 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#639 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#639 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#639 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#639 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#639 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#639 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#639 /[1-9][0-9]*[fh]/]: s#123
[#639 /[1-9][0-9]*[iu]?/]: s#120
[#640 '@']: s#35
[#648 'break']: s#654
[#649 'break']: r#88
[#650 '&']: s#410
[#650 '(']: s#411
[#650 '*']: s#409
[#650 ';']: s#369
[#650 '@']: s#35
[#650 '_']: s#406
[#650 'array']: s#82
[#650 'atomic']: s#94
[#650 'bool']: s#87
[#650 'break']: s#394
[#650 'const']: s#393
[#650 'continue']: s#395
[#650 'discard']: s#380
[#650 'f16']: s#89
[#650 'f32']: s#88
[#650 'i32']: s#90
[#650 'let']: s#392
[#650 'mat2x2']: s#99
[#650 'mat2x3']: s#100
[#650 'mat2x4']: s#101
[#650 'mat3x2']: s#102
[#650 'mat3x3']: s#103
[#650 'mat3x4']: s#104
[#650 'mat4x2']: s#105
[#650 'mat4x3']: s#106
[#650 'mat4x4']: s#107
[#650 'ptr']: s#92
[#650 'return']: s#384
[#650 'sampler']: s#130
[#650 'sampler_comparison']: s#131
[#650 'static_assert']: s#30
[#650 'texture_1d']: s#137
[#650 'texture_2d']: s#138
[#650 'texture_2d_array']: s#139
[#650 'texture_3d']: s#140
[#650 'texture_cube']: s#141
[#650 'texture_cube_array']: s#142
[#650 'texture_depth_2d']: s#132
[#650 'texture_depth_2d_array']: s#133
[#650 'texture_depth_cube']: s#134
[#650 'texture_depth_cube_array']: s#135
[#650 'texture_depth_multisampled_2d']: s#136
[#650 'texture_multisampled_2d']: s#143
[#650 'texture_storage_1d']: s#144
[#650 'texture_storage_2d']: s#145
[#650 'texture_storage_2d_array']: s#146
[#650 'texture_storage_3d']: s#147
[#650 'u32']: s#91
[#650 'var']: s#156
[#650 'vec2']: s#96
[#650 'vec3']: s#97
[#650 'vec4']: s#98
[#650 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#651 'break']: r#89
[#652 '}']: s#656
[#654 'if']: s#655
[#655 '!']: s#68
[#655 '&']: s#71
[#655 '(']: s#86
[#655 '*']: s#70
[#655 '-']: s#67
[#655 'array']: s#82
[#655 'atomic']: s#94
[#655 'bitcast']: s#77
[#655 'bool']: s#87
[#655 'f16']: s#89
[#655 'f32']: s#88
[#655 'false']: s#113
[#655 'i32']: s#90
[#655 'mat2x2']: s#99
[#655 'mat2x3']: s#100
[#655 'mat2x4']: s#101
[#655 'mat3x2']: s#102
[#655 'mat3x3']: s#103
[#655 'mat3x4']: s#104
[#655 'mat4x2']: s#105
[#655 'mat4x3']: s#106
[#655 'mat4x4']: s#107
[#655 'ptr']: s#92
[#655 'sampler']: s#130
[#655 'sampler_comparison']: s#131
[#655 'texture_1d']: s#137
[#655 'texture_2d']: s#138
[#655 'texture_2d_array']: s#139
[#655 'texture_3d']: s#140
[#655 'texture_cube']: s#141
[#655 'texture_cube_array']: s#142
[#655 'texture_depth_2d']: s#132
[#655 'texture_depth_2d_array']: s#133
[#655 'texture_depth_cube']: s#134
[#655 'texture_depth_cube_array']: s#135
[#655 'texture_depth_multisampled_2d']: s#136
[#655 'texture_multisampled_2d']: s#143
[#655 'texture_storage_1d']: s#144
[#655 'texture_storage_2d']: s#145
[#655 'texture_storage_2d_array']: s#146
[#655 'texture_storage_3d']: s#147
[#655 'true']: s#112
[#655 'u32']: s#91
[#655 'vec2']: s#96
[#655 'vec3']: s#97
[#655 'vec4']: s#98
[#655 '~']: s#69
[#655 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#78
[#655 /0[fh]/]: s#122
[#655 /0[iu]?/]: s#119
[#655 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#127
[#655 /0[xX][0-9a-fA-F]+[iu]?/]: s#121
[#655 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#129
[#655 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#128
[#655 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#124
[#655 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#126
[#655 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#125
[#655 /[1-9][0-9]*[fh]/]: s#123
[#655 /[1-9][0-9]*[iu]?/]: s#120
[#657 ';']: s#658

=Goto:
[#0 diagnostic_directive]: #5
[#0 enable_directive]: #6
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #34
[#2 function_decl]: #22
[#2 function_decl/0.0]: #29
[#2 function_decl/0.0/0]: #33
[#2 global_constant_decl]: #19
[#2 global_constant_decl/1.0]: #26
[#2 global_constant_decl/1.0/0]: #32
[#2 global_decl]: #16
[#2 global_variable_decl]: #18
[#2 global_variable_decl/0.0]: #24
[#2 global_variable_decl/0.0/0]: #31
[#2 static_assert_statement]: #23
[#2 struct_decl]: #21
[#2 translation_unit/0.1]: #14
[#2 translation_unit/0.1/0]: #15
[#2 type_alias_decl]: #20
[#4 diagnostic_directive]: #5
[#4 enable_directive]: #6
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #13
[#7 diagnostic_control]: #11
[#8 extension_name]: #9
[#12 severity_control_name]: #162
[#16 attribute]: #34
[#16 function_decl]: #22
[#16 function_decl/0.0]: #29
[#16 function_decl/0.0/0]: #33
[#16 global_constant_decl]: #19
[#16 global_constant_decl/1.0]: #26
[#16 global_constant_decl/1.0/0]: #32
[#16 global_decl]: #16
[#16 global_variable_decl]: #18
[#16 global_variable_decl/0.0]: #24
[#16 global_variable_decl/0.0/0]: #31
[#16 static_assert_statement]: #23
[#16 struct_decl]: #21
[#16 translation_unit/0.1/0]: #161
[#16 type_alias_decl]: #20
[#24 variable_decl]: #155
[#25 ident]: #154
[#25 optionally_typed_ident]: #153
[#27 ident]: #151
[#28 ident]: #150
[#29 function_header]: #148
[#30 additive_expression]: #63
[#30 array_type_specifier]: #93
[#30 binary_and_expression]: #60
[#30 binary_or_expression]: #61
[#30 binary_xor_expression]: #62
[#30 bitwise_expression]: #58
[#30 bool_literal]: #85
[#30 callable]: #74
[#30 decimal_float_literal]: #110
[#30 decimal_int_literal]: #108
[#30 depth_texture_type]: #115
[#30 expression]: #54
[#30 float_literal]: #84
[#30 hex_float_literal]: #111
[#30 hex_int_literal]: #109
[#30 ident]: #73
[#30 int_literal]: #83
[#30 literal]: #75
[#30 mat_prefix]: #81
[#30 multiplicative_expression]: #65
[#30 multisampled_texture_type]: #117
[#30 paren_expression]: #76
[#30 primary_expression]: #72
[#30 relational_expression]: #55
[#30 sampled_texture_type]: #116
[#30 sampler_type]: #114
[#30 shift_expression]: #59
[#30 short_circuit_and_expression]: #57
[#30 short_circuit_or_expression]: #56
[#30 singular_expression]: #66
[#30 storage_texture_type]: #118
[#30 texture_and_sampler_types]: #95
[#30 type_specifier_without_ident]: #79
[#30 unary_expression]: #64
[#30 vec_prefix]: #80
[#34 attribute]: #34
[#34 function_decl/0.0/0]: #53
[#34 global_constant_decl/1.0/0]: #52
[#34 global_variable_decl/0.0/0]: #51
[#40 diagnostic_control]: #234
[#63 additive_operator]: #214
[#65 multiplicative_operator]: #208
[#67 array_type_specifier]: #93
[#67 bool_literal]: #85
[#67 callable]: #74
[#67 decimal_float_literal]: #110
[#67 decimal_int_literal]: #108
[#67 depth_texture_type]: #115
[#67 float_literal]: #84
[#67 hex_float_literal]: #111
[#67 hex_int_literal]: #109
[#67 ident]: #73
[#67 int_literal]: #83
[#67 literal]: #75
[#67 mat_prefix]: #81
[#67 multisampled_texture_type]: #117
[#67 paren_expression]: #76
[#67 primary_expression]: #72
[#67 sampled_texture_type]: #116
[#67 sampler_type]: #114
[#67 singular_expression]: #66
[#67 storage_texture_type]: #118
[#67 texture_and_sampler_types]: #95
[#67 type_specifier_without_ident]: #79
[#67 unary_expression]: #207
[#67 vec_prefix]: #80
[#68 array_type_specifier]: #93
[#68 bool_literal]: #85
[#68 callable]: #74
[#68 decimal_float_literal]: #110
[#68 decimal_int_literal]: #108
[#68 depth_texture_type]: #115
[#68 float_literal]: #84
[#68 hex_float_literal]: #111
[#68 hex_int_literal]: #109
[#68 ident]: #73
[#68 int_literal]: #83
[#68 literal]: #75
[#68 mat_prefix]: #81
[#68 multisampled_texture_type]: #117
[#68 paren_expression]: #76
[#68 primary_expression]: #72
[#68 sampled_texture_type]: #116
[#68 sampler_type]: #114
[#68 singular_expression]: #66
[#68 storage_texture_type]: #118
[#68 texture_and_sampler_types]: #95
[#68 type_specifier_without_ident]: #79
[#68 unary_expression]: #206
[#68 vec_prefix]: #80
[#69 array_type_specifier]: #93
[#69 bool_literal]: #85
[#69 callable]: #74
[#69 decimal_float_literal]: #110
[#69 decimal_int_literal]: #108
[#69 depth_texture_type]: #115
[#69 float_literal]: #84
[#69 hex_float_literal]: #111
[#69 hex_int_literal]: #109
[#69 ident]: #73
[#69 int_literal]: #83
[#69 literal]: #75
[#69 mat_prefix]: #81
[#69 multisampled_texture_type]: #117
[#69 paren_expression]: #76
[#69 primary_expression]: #72
[#69 sampled_texture_type]: #116
[#69 sampler_type]: #114
[#69 singular_expression]: #66
[#69 storage_texture_type]: #118
[#69 texture_and_sampler_types]: #95
[#69 type_specifier_without_ident]: #79
[#69 unary_expression]: #205
[#69 vec_prefix]: #80
[#70 array_type_specifier]: #93
[#70 bool_literal]: #85
[#70 callable]: #74
[#70 decimal_float_literal]: #110
[#70 decimal_int_literal]: #108
[#70 depth_texture_type]: #115
[#70 float_literal]: #84
[#70 hex_float_literal]: #111
[#70 hex_int_literal]: #109
[#70 ident]: #73
[#70 int_literal]: #83
[#70 literal]: #75
[#70 mat_prefix]: #81
[#70 multisampled_texture_type]: #117
[#70 paren_expression]: #76
[#70 primary_expression]: #72
[#70 sampled_texture_type]: #116
[#70 sampler_type]: #114
[#70 singular_expression]: #66
[#70 storage_texture_type]: #118
[#70 texture_and_sampler_types]: #95
[#70 type_specifier_without_ident]: #79
[#70 unary_expression]: #204
[#70 vec_prefix]: #80
[#71 array_type_specifier]: #93
[#71 bool_literal]: #85
[#71 callable]: #74
[#71 decimal_float_literal]: #110
[#71 decimal_int_literal]: #108
[#71 depth_texture_type]: #115
[#71 float_literal]: #84
[#71 hex_float_literal]: #111
[#71 hex_int_literal]: #109
[#71 ident]: #73
[#71 int_literal]: #83
[#71 literal]: #75
[#71 mat_prefix]: #81
[#71 multisampled_texture_type]: #117
[#71 paren_expression]: #76
[#71 primary_expression]: #72
[#71 sampled_texture_type]: #116
[#71 sampler_type]: #114
[#71 singular_expression]: #66
[#71 storage_texture_type]: #118
[#71 texture_and_sampler_types]: #95
[#71 type_specifier_without_ident]: #79
[#71 unary_expression]: #203
[#71 vec_prefix]: #80
[#72 component_or_swizzle_specifier]: #200
[#72 singular_expression/0.1]: #199
[#74 argument_expression_list]: #197
[#86 additive_expression]: #63
[#86 array_type_specifier]: #93
[#86 binary_and_expression]: #60
[#86 binary_or_expression]: #61
[#86 binary_xor_expression]: #62
[#86 bitwise_expression]: #58
[#86 bool_literal]: #85
[#86 callable]: #74
[#86 decimal_float_literal]: #110
[#86 decimal_int_literal]: #108
[#86 depth_texture_type]: #115
[#86 expression]: #192
[#86 float_literal]: #84
[#86 hex_float_literal]: #111
[#86 hex_int_literal]: #109
[#86 ident]: #73
[#86 int_literal]: #83
[#86 literal]: #75
[#86 mat_prefix]: #81
[#86 multiplicative_expression]: #65
[#86 multisampled_texture_type]: #117
[#86 paren_expression]: #76
[#86 primary_expression]: #72
[#86 relational_expression]: #55
[#86 sampled_texture_type]: #116
[#86 sampler_type]: #114
[#86 shift_expression]: #59
[#86 short_circuit_and_expression]: #57
[#86 short_circuit_or_expression]: #56
[#86 singular_expression]: #66
[#86 storage_texture_type]: #118
[#86 texture_and_sampler_types]: #95
[#86 type_specifier_without_ident]: #79
[#86 unary_expression]: #64
[#86 vec_prefix]: #80
[#148 attribute]: #186
[#148 compound_statement]: #183
[#148 compound_statement/0.0]: #184
[#148 compound_statement/0.0/0]: #185
[#149 ident]: #182
[#150 struct_body_decl]: #180
[#152 ident]: #154
[#152 optionally_typed_ident]: #178
[#154 optionally_typed_ident/0.1]: #175
[#155 global_variable_decl/0.2]: #173
[#156 variable_decl/0.1]: #170
[#156 variable_qualifier]: #171
[#169 diagnostic_rule_name]: #346
[#170 ident]: #154
[#170 optionally_typed_ident]: #345
[#172 address_space]: #344
[#174 additive_expression]: #63
[#174 array_type_specifier]: #93
[#174 binary_and_expression]: #60
[#174 binary_or_expression]: #61
[#174 binary_xor_expression]: #62
[#174 bitwise_expression]: #58
[#174 bool_literal]: #85
[#174 callable]: #74
[#174 decimal_float_literal]: #110
[#174 decimal_int_literal]: #108
[#174 depth_texture_type]: #115
[#174 expression]: #343
[#174 float_literal]: #84
[#174 hex_float_literal]: #111
[#174 hex_int_literal]: #109
[#174 ident]: #73
[#174 int_literal]: #83
[#174 literal]: #75
[#174 mat_prefix]: #81
[#174 multiplicative_expression]: #65
[#174 multisampled_texture_type]: #117
[#174 paren_expression]: #76
[#174 primary_expression]: #72
[#174 relational_expression]: #55
[#174 sampled_texture_type]: #116
[#174 sampler_type]: #114
[#174 shift_expression]: #59
[#174 short_circuit_and_expression]: #57
[#174 short_circuit_or_expression]: #56
[#174 singular_expression]: #66
[#174 storage_texture_type]: #118
[#174 texture_and_sampler_types]: #95
[#174 type_specifier_without_ident]: #79
[#174 unary_expression]: #64
[#174 vec_prefix]: #80
[#176 array_type_specifier]: #93
[#176 depth_texture_type]: #115
[#176 ident]: #295
[#176 mat_prefix]: #298
[#176 multisampled_texture_type]: #117
[#176 sampled_texture_type]: #116
[#176 sampler_type]: #114
[#176 storage_texture_type]: #118
[#176 texture_and_sampler_types]: #95
[#176 type_specifier]: #342
[#176 type_specifier_without_ident]: #296
[#176 vec_prefix]: #297
[#177 additive_expression]: #63
[#177 array_type_specifier]: #93
[#177 binary_and_expression]: #60
[#177 binary_or_expression]: #61
[#177 binary_xor_expression]: #62
[#177 bitwise_expression]: #58
[#177 bool_literal]: #85
[#177 callable]: #74
[#177 decimal_float_literal]: #110
[#177 decimal_int_literal]: #108
[#177 depth_texture_type]: #115
[#177 expression]: #341
[#177 float_literal]: #84
[#177 hex_float_literal]: #111
[#177 hex_int_literal]: #109
[#177 ident]: #73
[#177 int_literal]: #83
[#177 literal]: #75
[#177 mat_prefix]: #81
[#177 multiplicative_expression]: #65
[#177 multisampled_texture_type]: #117
[#177 paren_expression]: #76
[#177 primary_expression]: #72
[#177 relational_expression]: #55
[#177 sampled_texture_type]: #116
[#177 sampler_type]: #114
[#177 shift_expression]: #59
[#177 short_circuit_and_expression]: #57
[#177 short_circuit_or_expression]: #56
[#177 singular_expression]: #66
[#177 storage_texture_type]: #118
[#177 texture_and_sampler_types]: #95
[#177 type_specifier_without_ident]: #79
[#177 unary_expression]: #64
[#177 vec_prefix]: #80
[#178 global_constant_decl/1.3]: #339
[#179 array_type_specifier]: #93
[#179 depth_texture_type]: #115
[#179 ident]: #295
[#179 mat_prefix]: #298
[#179 multisampled_texture_type]: #117
[#179 sampled_texture_type]: #116
[#179 sampler_type]: #114
[#179 storage_texture_type]: #118
[#179 texture_and_sampler_types]: #95
[#179 type_specifier]: #338
[#179 type_specifier_without_ident]: #296
[#179 vec_prefix]: #297
[#181 attribute]: #337
[#181 struct_member]: #334
[#181 struct_member/0.0]: #335
[#181 struct_member/0.0/0]: #336
[#186 attribute]: #186
[#186 compound_statement/0.0/0]: #331
[#187 texel_format]: #313
[#188 array_type_specifier]: #93
[#188 depth_texture_type]: #115
[#188 ident]: #295
[#188 mat_prefix]: #298
[#188 multisampled_texture_type]: #117
[#188 sampled_texture_type]: #116
[#188 sampler_type]: #114
[#188 storage_texture_type]: #118
[#188 texture_and_sampler_types]: #95
[#188 type_specifier]: #312
[#188 type_specifier_without_ident]: #296
[#188 vec_prefix]: #297
[#189 array_type_specifier]: #93
[#189 depth_texture_type]: #115
[#189 ident]: #295
[#189 mat_prefix]: #298
[#189 multisampled_texture_type]: #117
[#189 sampled_texture_type]: #116
[#189 sampler_type]: #114
[#189 storage_texture_type]: #118
[#189 texture_and_sampler_types]: #95
[#189 type_specifier]: #311
[#189 type_specifier_without_ident]: #296
[#189 vec_prefix]: #297
[#190 array_type_specifier]: #93
[#190 depth_texture_type]: #115
[#190 ident]: #295
[#190 mat_prefix]: #298
[#190 multisampled_texture_type]: #117
[#190 sampled_texture_type]: #116
[#190 sampler_type]: #114
[#190 storage_texture_type]: #118
[#190 texture_and_sampler_types]: #95
[#190 type_specifier]: #310
[#190 type_specifier_without_ident]: #296
[#190 vec_prefix]: #297
[#191 address_space]: #304
[#193 array_type_specifier]: #93
[#193 depth_texture_type]: #115
[#193 ident]: #295
[#193 mat_prefix]: #298
[#193 multisampled_texture_type]: #117
[#193 sampled_texture_type]: #116
[#193 sampler_type]: #114
[#193 storage_texture_type]: #118
[#193 texture_and_sampler_types]: #95
[#193 type_specifier]: #302
[#193 type_specifier_without_ident]: #296
[#193 vec_prefix]: #297
[#194 array_type_specifier]: #93
[#194 depth_texture_type]: #115
[#194 ident]: #295
[#194 mat_prefix]: #298
[#194 multisampled_texture_type]: #117
[#194 sampled_texture_type]: #116
[#194 sampler_type]: #114
[#194 storage_texture_type]: #118
[#194 texture_and_sampler_types]: #95
[#194 type_specifier]: #301
[#194 type_specifier_without_ident]: #296
[#194 vec_prefix]: #297
[#195 array_type_specifier]: #93
[#195 depth_texture_type]: #115
[#195 ident]: #295
[#195 mat_prefix]: #298
[#195 multisampled_texture_type]: #117
[#195 sampled_texture_type]: #116
[#195 sampler_type]: #114
[#195 storage_texture_type]: #118
[#195 texture_and_sampler_types]: #95
[#195 type_specifier]: #300
[#195 type_specifier_without_ident]: #296
[#195 vec_prefix]: #297
[#196 array_type_specifier]: #93
[#196 depth_texture_type]: #115
[#196 ident]: #295
[#196 mat_prefix]: #298
[#196 multisampled_texture_type]: #117
[#196 sampled_texture_type]: #116
[#196 sampler_type]: #114
[#196 storage_texture_type]: #118
[#196 texture_and_sampler_types]: #95
[#196 type_specifier]: #294
[#196 type_specifier_without_ident]: #296
[#196 vec_prefix]: #297
[#198 additive_expression]: #63
[#198 argument_expression_list/0.1]: #291
[#198 array_type_specifier]: #93
[#198 binary_and_expression]: #60
[#198 binary_or_expression]: #61
[#198 binary_xor_expression]: #62
[#198 bitwise_expression]: #58
[#198 bool_literal]: #85
[#198 callable]: #74
[#198 decimal_float_literal]: #110
[#198 decimal_int_literal]: #108
[#198 depth_texture_type]: #115
[#198 expression]: #293
[#198 expression_comma_list]: #292
[#198 float_literal]: #84
[#198 hex_float_literal]: #111
[#198 hex_int_literal]: #109
[#198 ident]: #73
[#198 int_literal]: #83
[#198 literal]: #75
[#198 mat_prefix]: #81
[#198 multiplicative_expression]: #65
[#198 multisampled_texture_type]: #117
[#198 paren_expression]: #76
[#198 primary_expression]: #72
[#198 relational_expression]: #55
[#198 sampled_texture_type]: #116
[#198 sampler_type]: #114
[#198 shift_expression]: #59
[#198 short_circuit_and_expression]: #57
[#198 short_circuit_or_expression]: #56
[#198 singular_expression]: #66
[#198 storage_texture_type]: #118
[#198 texture_and_sampler_types]: #95
[#198 type_specifier_without_ident]: #79
[#198 unary_expression]: #64
[#198 vec_prefix]: #80
[#201 additive_expression]: #63
[#201 array_type_specifier]: #93
[#201 binary_and_expression]: #60
[#201 binary_or_expression]: #61
[#201 binary_xor_expression]: #62
[#201 bitwise_expression]: #58
[#201 bool_literal]: #85
[#201 callable]: #74
[#201 decimal_float_literal]: #110
[#201 decimal_int_literal]: #108
[#201 depth_texture_type]: #115
[#201 expression]: #290
[#201 float_literal]: #84
[#201 hex_float_literal]: #111
[#201 hex_int_literal]: #109
[#201 ident]: #73
[#201 int_literal]: #83
[#201 literal]: #75
[#201 mat_prefix]: #81
[#201 multiplicative_expression]: #65
[#201 multisampled_texture_type]: #117
[#201 paren_expression]: #76
[#201 primary_expression]: #72
[#201 relational_expression]: #55
[#201 sampled_texture_type]: #116
[#201 sampler_type]: #114
[#201 shift_expression]: #59
[#201 short_circuit_and_expression]: #57
[#201 short_circuit_or_expression]: #56
[#201 singular_expression]: #66
[#201 storage_texture_type]: #118
[#201 texture_and_sampler_types]: #95
[#201 type_specifier_without_ident]: #79
[#201 unary_expression]: #64
[#201 vec_prefix]: #80
[#202 member_ident]: #279
[#202 swizzle_name]: #280
[#208 array_type_specifier]: #93
[#208 bool_literal]: #85
[#208 callable]: #74
[#208 decimal_float_literal]: #110
[#208 decimal_int_literal]: #108
[#208 depth_texture_type]: #115
[#208 float_literal]: #84
[#208 hex_float_literal]: #111
[#208 hex_int_literal]: #109
[#208 ident]: #73
[#208 int_literal]: #83
[#208 literal]: #75
[#208 mat_prefix]: #81
[#208 multisampled_texture_type]: #117
[#208 paren_expression]: #76
[#208 primary_expression]: #72
[#208 sampled_texture_type]: #116
[#208 sampler_type]: #114
[#208 singular_expression]: #66
[#208 storage_texture_type]: #118
[#208 texture_and_sampler_types]: #95
[#208 type_specifier_without_ident]: #79
[#208 unary_expression]: #278
[#208 vec_prefix]: #80
[#212 array_type_specifier]: #93
[#212 bool_literal]: #85
[#212 callable]: #74
[#212 decimal_float_literal]: #110
[#212 decimal_int_literal]: #108
[#212 depth_texture_type]: #115
[#212 float_literal]: #84
[#212 hex_float_literal]: #111
[#212 hex_int_literal]: #109
[#212 ident]: #73
[#212 int_literal]: #83
[#212 literal]: #75
[#212 mat_prefix]: #81
[#212 multisampled_texture_type]: #117
[#212 paren_expression]: #76
[#212 primary_expression]: #72
[#212 sampled_texture_type]: #116
[#212 sampler_type]: #114
[#212 singular_expression]: #66
[#212 storage_texture_type]: #118
[#212 texture_and_sampler_types]: #95
[#212 type_specifier_without_ident]: #79
[#212 unary_expression]: #277
[#212 vec_prefix]: #80
[#213 array_type_specifier]: #93
[#213 bool_literal]: #85
[#213 callable]: #74
[#213 decimal_float_literal]: #110
[#213 decimal_int_literal]: #108
[#213 depth_texture_type]: #115
[#213 float_literal]: #84
[#213 hex_float_literal]: #111
[#213 hex_int_literal]: #109
[#213 ident]: #73
[#213 int_literal]: #83
[#213 literal]: #75
[#213 mat_prefix]: #81
[#213 multisampled_texture_type]: #117
[#213 paren_expression]: #76
[#213 primary_expression]: #72
[#213 sampled_texture_type]: #116
[#213 sampler_type]: #114
[#213 singular_expression]: #66
[#213 storage_texture_type]: #118
[#213 texture_and_sampler_types]: #95
[#213 type_specifier_without_ident]: #79
[#213 unary_expression]: #276
[#213 vec_prefix]: #80
[#214 array_type_specifier]: #93
[#214 bool_literal]: #85
[#214 callable]: #74
[#214 decimal_float_literal]: #110
[#214 decimal_int_literal]: #108
[#214 depth_texture_type]: #115
[#214 float_literal]: #84
[#214 hex_float_literal]: #111
[#214 hex_int_literal]: #109
[#214 ident]: #73
[#214 int_literal]: #83
[#214 literal]: #75
[#214 mat_prefix]: #81
[#214 multiplicative_expression]: #274
[#214 multisampled_texture_type]: #117
[#214 paren_expression]: #76
[#214 primary_expression]: #72
[#214 sampled_texture_type]: #116
[#214 sampler_type]: #114
[#214 singular_expression]: #66
[#214 storage_texture_type]: #118
[#214 texture_and_sampler_types]: #95
[#214 type_specifier_without_ident]: #79
[#214 unary_expression]: #275
[#214 vec_prefix]: #80
[#217 array_type_specifier]: #93
[#217 bool_literal]: #85
[#217 callable]: #74
[#217 decimal_float_literal]: #110
[#217 decimal_int_literal]: #108
[#217 depth_texture_type]: #115
[#217 float_literal]: #84
[#217 hex_float_literal]: #111
[#217 hex_int_literal]: #109
[#217 ident]: #73
[#217 int_literal]: #83
[#217 literal]: #75
[#217 mat_prefix]: #81
[#217 multisampled_texture_type]: #117
[#217 paren_expression]: #76
[#217 primary_expression]: #72
[#217 sampled_texture_type]: #116
[#217 sampler_type]: #114
[#217 singular_expression]: #66
[#217 storage_texture_type]: #118
[#217 texture_and_sampler_types]: #95
[#217 type_specifier_without_ident]: #79
[#217 unary_expression]: #273
[#217 vec_prefix]: #80
[#218 array_type_specifier]: #93
[#218 bool_literal]: #85
[#218 callable]: #74
[#218 decimal_float_literal]: #110
[#218 decimal_int_literal]: #108
[#218 depth_texture_type]: #115
[#218 float_literal]: #84
[#218 hex_float_literal]: #111
[#218 hex_int_literal]: #109
[#218 ident]: #73
[#218 int_literal]: #83
[#218 literal]: #75
[#218 mat_prefix]: #81
[#218 multisampled_texture_type]: #117
[#218 paren_expression]: #76
[#218 primary_expression]: #72
[#218 sampled_texture_type]: #116
[#218 sampler_type]: #114
[#218 singular_expression]: #66
[#218 storage_texture_type]: #118
[#218 texture_and_sampler_types]: #95
[#218 type_specifier_without_ident]: #79
[#218 unary_expression]: #272
[#218 vec_prefix]: #80
[#219 array_type_specifier]: #93
[#219 bool_literal]: #85
[#219 callable]: #74
[#219 decimal_float_literal]: #110
[#219 decimal_int_literal]: #108
[#219 depth_texture_type]: #115
[#219 float_literal]: #84
[#219 hex_float_literal]: #111
[#219 hex_int_literal]: #109
[#219 ident]: #73
[#219 int_literal]: #83
[#219 literal]: #75
[#219 mat_prefix]: #81
[#219 multisampled_texture_type]: #117
[#219 paren_expression]: #76
[#219 primary_expression]: #72
[#219 sampled_texture_type]: #116
[#219 sampler_type]: #114
[#219 singular_expression]: #66
[#219 storage_texture_type]: #118
[#219 texture_and_sampler_types]: #95
[#219 type_specifier_without_ident]: #79
[#219 unary_expression]: #271
[#219 vec_prefix]: #80
[#220 additive_expression]: #63
[#220 array_type_specifier]: #93
[#220 bool_literal]: #85
[#220 callable]: #74
[#220 decimal_float_literal]: #110
[#220 decimal_int_literal]: #108
[#220 depth_texture_type]: #115
[#220 float_literal]: #84
[#220 hex_float_literal]: #111
[#220 hex_int_literal]: #109
[#220 ident]: #73
[#220 int_literal]: #83
[#220 literal]: #75
[#220 mat_prefix]: #81
[#220 multiplicative_expression]: #65
[#220 multisampled_texture_type]: #117
[#220 paren_expression]: #76
[#220 primary_expression]: #72
[#220 sampled_texture_type]: #116
[#220 sampler_type]: #114
[#220 shift_expression]: #270
[#220 singular_expression]: #66
[#220 storage_texture_type]: #118
[#220 texture_and_sampler_types]: #95
[#220 type_specifier_without_ident]: #79
[#220 unary_expression]: #263
[#220 vec_prefix]: #80
[#221 additive_expression]: #63
[#221 array_type_specifier]: #93
[#221 bool_literal]: #85
[#221 callable]: #74
[#221 decimal_float_literal]: #110
[#221 decimal_int_literal]: #108
[#221 depth_texture_type]: #115
[#221 float_literal]: #84
[#221 hex_float_literal]: #111
[#221 hex_int_literal]: #109
[#221 ident]: #73
[#221 int_literal]: #83
[#221 literal]: #75
[#221 mat_prefix]: #81
[#221 multiplicative_expression]: #65
[#221 multisampled_texture_type]: #117
[#221 paren_expression]: #76
[#221 primary_expression]: #72
[#221 sampled_texture_type]: #116
[#221 sampler_type]: #114
[#221 shift_expression]: #269
[#221 singular_expression]: #66
[#221 storage_texture_type]: #118
[#221 texture_and_sampler_types]: #95
[#221 type_specifier_without_ident]: #79
[#221 unary_expression]: #263
[#221 vec_prefix]: #80
[#222 additive_expression]: #63
[#222 array_type_specifier]: #93
[#222 bool_literal]: #85
[#222 callable]: #74
[#222 decimal_float_literal]: #110
[#222 decimal_int_literal]: #108
[#222 depth_texture_type]: #115
[#222 float_literal]: #84
[#222 hex_float_literal]: #111
[#222 hex_int_literal]: #109
[#222 ident]: #73
[#222 int_literal]: #83
[#222 literal]: #75
[#222 mat_prefix]: #81
[#222 multiplicative_expression]: #65
[#222 multisampled_texture_type]: #117
[#222 paren_expression]: #76
[#222 primary_expression]: #72
[#222 sampled_texture_type]: #116
[#222 sampler_type]: #114
[#222 shift_expression]: #268
[#222 singular_expression]: #66
[#222 storage_texture_type]: #118
[#222 texture_and_sampler_types]: #95
[#222 type_specifier_without_ident]: #79
[#222 unary_expression]: #263
[#222 vec_prefix]: #80
[#223 additive_expression]: #63
[#223 array_type_specifier]: #93
[#223 bool_literal]: #85
[#223 callable]: #74
[#223 decimal_float_literal]: #110
[#223 decimal_int_literal]: #108
[#223 depth_texture_type]: #115
[#223 float_literal]: #84
[#223 hex_float_literal]: #111
[#223 hex_int_literal]: #109
[#223 ident]: #73
[#223 int_literal]: #83
[#223 literal]: #75
[#223 mat_prefix]: #81
[#223 multiplicative_expression]: #65
[#223 multisampled_texture_type]: #117
[#223 paren_expression]: #76
[#223 primary_expression]: #72
[#223 sampled_texture_type]: #116
[#223 sampler_type]: #114
[#223 shift_expression]: #267
[#223 singular_expression]: #66
[#223 storage_texture_type]: #118
[#223 texture_and_sampler_types]: #95
[#223 type_specifier_without_ident]: #79
[#223 unary_expression]: #263
[#223 vec_prefix]: #80
[#224 additive_expression]: #63
[#224 array_type_specifier]: #93
[#224 bool_literal]: #85
[#224 callable]: #74
[#224 decimal_float_literal]: #110
[#224 decimal_int_literal]: #108
[#224 depth_texture_type]: #115
[#224 float_literal]: #84
[#224 hex_float_literal]: #111
[#224 hex_int_literal]: #109
[#224 ident]: #73
[#224 int_literal]: #83
[#224 literal]: #75
[#224 mat_prefix]: #81
[#224 multiplicative_expression]: #65
[#224 multisampled_texture_type]: #117
[#224 paren_expression]: #76
[#224 primary_expression]: #72
[#224 sampled_texture_type]: #116
[#224 sampler_type]: #114
[#224 shift_expression]: #266
[#224 singular_expression]: #66
[#224 storage_texture_type]: #118
[#224 texture_and_sampler_types]: #95
[#224 type_specifier_without_ident]: #79
[#224 unary_expression]: #263
[#224 vec_prefix]: #80
[#225 additive_expression]: #63
[#225 array_type_specifier]: #93
[#225 bool_literal]: #85
[#225 callable]: #74
[#225 decimal_float_literal]: #110
[#225 decimal_int_literal]: #108
[#225 depth_texture_type]: #115
[#225 float_literal]: #84
[#225 hex_float_literal]: #111
[#225 hex_int_literal]: #109
[#225 ident]: #73
[#225 int_literal]: #83
[#225 literal]: #75
[#225 mat_prefix]: #81
[#225 multiplicative_expression]: #65
[#225 multisampled_texture_type]: #117
[#225 paren_expression]: #76
[#225 primary_expression]: #72
[#225 sampled_texture_type]: #116
[#225 sampler_type]: #114
[#225 shift_expression]: #265
[#225 singular_expression]: #66
[#225 storage_texture_type]: #118
[#225 texture_and_sampler_types]: #95
[#225 type_specifier_without_ident]: #79
[#225 unary_expression]: #263
[#225 vec_prefix]: #80
[#226 additive_expression]: #63
[#226 array_type_specifier]: #93
[#226 bool_literal]: #85
[#226 callable]: #74
[#226 decimal_float_literal]: #110
[#226 decimal_int_literal]: #108
[#226 depth_texture_type]: #115
[#226 float_literal]: #84
[#226 hex_float_literal]: #111
[#226 hex_int_literal]: #109
[#226 ident]: #73
[#226 int_literal]: #83
[#226 literal]: #75
[#226 mat_prefix]: #81
[#226 multiplicative_expression]: #65
[#226 multisampled_texture_type]: #117
[#226 paren_expression]: #76
[#226 primary_expression]: #72
[#226 relational_expression]: #264
[#226 sampled_texture_type]: #116
[#226 sampler_type]: #114
[#226 shift_expression]: #59
[#226 singular_expression]: #66
[#226 storage_texture_type]: #118
[#226 texture_and_sampler_types]: #95
[#226 type_specifier_without_ident]: #79
[#226 unary_expression]: #263
[#226 vec_prefix]: #80
[#227 additive_expression]: #63
[#227 array_type_specifier]: #93
[#227 bool_literal]: #85
[#227 callable]: #74
[#227 decimal_float_literal]: #110
[#227 decimal_int_literal]: #108
[#227 depth_texture_type]: #115
[#227 float_literal]: #84
[#227 hex_float_literal]: #111
[#227 hex_int_literal]: #109
[#227 ident]: #73
[#227 int_literal]: #83
[#227 literal]: #75
[#227 mat_prefix]: #81
[#227 multiplicative_expression]: #65
[#227 multisampled_texture_type]: #117
[#227 paren_expression]: #76
[#227 primary_expression]: #72
[#227 relational_expression]: #262
[#227 sampled_texture_type]: #116
[#227 sampler_type]: #114
[#227 shift_expression]: #59
[#227 singular_expression]: #66
[#227 storage_texture_type]: #118
[#227 texture_and_sampler_types]: #95
[#227 type_specifier_without_ident]: #79
[#227 unary_expression]: #263
[#227 vec_prefix]: #80
[#228 additive_expression]: #63
[#228 array_type_specifier]: #93
[#228 binary_and_expression]: #60
[#228 binary_or_expression]: #61
[#228 binary_xor_expression]: #62
[#228 bitwise_expression]: #58
[#228 bool_literal]: #85
[#228 callable]: #74
[#228 decimal_float_literal]: #110
[#228 decimal_int_literal]: #108
[#228 depth_texture_type]: #115
[#228 expression]: #261
[#228 float_literal]: #84
[#228 hex_float_literal]: #111
[#228 hex_int_literal]: #109
[#228 ident]: #73
[#228 int_literal]: #83
[#228 literal]: #75
[#228 mat_prefix]: #81
[#228 multiplicative_expression]: #65
[#228 multisampled_texture_type]: #117
[#228 paren_expression]: #76
[#228 primary_expression]: #72
[#228 relational_expression]: #55
[#228 sampled_texture_type]: #116
[#228 sampler_type]: #114
[#228 shift_expression]: #59
[#228 short_circuit_and_expression]: #57
[#228 short_circuit_or_expression]: #56
[#228 singular_expression]: #66
[#228 storage_texture_type]: #118
[#228 texture_and_sampler_types]: #95
[#228 type_specifier_without_ident]: #79
[#228 unary_expression]: #64
[#228 vec_prefix]: #80
[#229 additive_expression]: #63
[#229 array_type_specifier]: #93
[#229 binary_and_expression]: #60
[#229 binary_or_expression]: #61
[#229 binary_xor_expression]: #62
[#229 bitwise_expression]: #58
[#229 bool_literal]: #85
[#229 callable]: #74
[#229 decimal_float_literal]: #110
[#229 decimal_int_literal]: #108
[#229 depth_texture_type]: #115
[#229 expression]: #260
[#229 float_literal]: #84
[#229 hex_float_literal]: #111
[#229 hex_int_literal]: #109
[#229 ident]: #73
[#229 int_literal]: #83
[#229 literal]: #75
[#229 mat_prefix]: #81
[#229 multiplicative_expression]: #65
[#229 multisampled_texture_type]: #117
[#229 paren_expression]: #76
[#229 primary_expression]: #72
[#229 relational_expression]: #55
[#229 sampled_texture_type]: #116
[#229 sampler_type]: #114
[#229 shift_expression]: #59
[#229 short_circuit_and_expression]: #57
[#229 short_circuit_or_expression]: #56
[#229 singular_expression]: #66
[#229 storage_texture_type]: #118
[#229 texture_and_sampler_types]: #95
[#229 type_specifier_without_ident]: #79
[#229 unary_expression]: #64
[#229 vec_prefix]: #80
[#230 additive_expression]: #63
[#230 array_type_specifier]: #93
[#230 binary_and_expression]: #60
[#230 binary_or_expression]: #61
[#230 binary_xor_expression]: #62
[#230 bitwise_expression]: #58
[#230 bool_literal]: #85
[#230 callable]: #74
[#230 decimal_float_literal]: #110
[#230 decimal_int_literal]: #108
[#230 depth_texture_type]: #115
[#230 expression]: #259
[#230 float_literal]: #84
[#230 hex_float_literal]: #111
[#230 hex_int_literal]: #109
[#230 ident]: #73
[#230 int_literal]: #83
[#230 literal]: #75
[#230 mat_prefix]: #81
[#230 multiplicative_expression]: #65
[#230 multisampled_texture_type]: #117
[#230 paren_expression]: #76
[#230 primary_expression]: #72
[#230 relational_expression]: #55
[#230 sampled_texture_type]: #116
[#230 sampler_type]: #114
[#230 shift_expression]: #59
[#230 short_circuit_and_expression]: #57
[#230 short_circuit_or_expression]: #56
[#230 singular_expression]: #66
[#230 storage_texture_type]: #118
[#230 texture_and_sampler_types]: #95
[#230 type_specifier_without_ident]: #79
[#230 unary_expression]: #64
[#230 vec_prefix]: #80
[#231 interpolation_type_name]: #255
[#232 additive_expression]: #63
[#232 array_type_specifier]: #93
[#232 binary_and_expression]: #60
[#232 binary_or_expression]: #61
[#232 binary_xor_expression]: #62
[#232 bitwise_expression]: #58
[#232 bool_literal]: #85
[#232 callable]: #74
[#232 decimal_float_literal]: #110
[#232 decimal_int_literal]: #108
[#232 depth_texture_type]: #115
[#232 expression]: #254
[#232 float_literal]: #84
[#232 hex_float_literal]: #111
[#232 hex_int_literal]: #109
[#232 ident]: #73
[#232 int_literal]: #83
[#232 literal]: #75
[#232 mat_prefix]: #81
[#232 multiplicative_expression]: #65
[#232 multisampled_texture_type]: #117
[#232 paren_expression]: #76
[#232 primary_expression]: #72
[#232 relational_expression]: #55
[#232 sampled_texture_type]: #116
[#232 sampler_type]: #114
[#232 shift_expression]: #59
[#232 short_circuit_and_expression]: #57
[#232 short_circuit_or_expression]: #56
[#232 singular_expression]: #66
[#232 storage_texture_type]: #118
[#232 texture_and_sampler_types]: #95
[#232 type_specifier_without_ident]: #79
[#232 unary_expression]: #64
[#232 vec_prefix]: #80
[#233 additive_expression]: #63
[#233 array_type_specifier]: #93
[#233 binary_and_expression]: #60
[#233 binary_or_expression]: #61
[#233 binary_xor_expression]: #62
[#233 bitwise_expression]: #58
[#233 bool_literal]: #85
[#233 callable]: #74
[#233 decimal_float_literal]: #110
[#233 decimal_int_literal]: #108
[#233 depth_texture_type]: #115
[#233 expression]: #253
[#233 float_literal]: #84
[#233 hex_float_literal]: #111
[#233 hex_int_literal]: #109
[#233 ident]: #73
[#233 int_literal]: #83
[#233 literal]: #75
[#233 mat_prefix]: #81
[#233 multiplicative_expression]: #65
[#233 multisampled_texture_type]: #117
[#233 paren_expression]: #76
[#233 primary_expression]: #72
[#233 relational_expression]: #55
[#233 sampled_texture_type]: #116
[#233 sampler_type]: #114
[#233 shift_expression]: #59
[#233 short_circuit_and_expression]: #57
[#233 short_circuit_or_expression]: #56
[#233 singular_expression]: #66
[#233 storage_texture_type]: #118
[#233 texture_and_sampler_types]: #95
[#233 type_specifier_without_ident]: #79
[#233 unary_expression]: #64
[#233 vec_prefix]: #80
[#235 builtin_value_name]: #240
[#236 additive_expression]: #63
[#236 array_type_specifier]: #93
[#236 binary_and_expression]: #60
[#236 binary_or_expression]: #61
[#236 binary_xor_expression]: #62
[#236 bitwise_expression]: #58
[#236 bool_literal]: #85
[#236 callable]: #74
[#236 decimal_float_literal]: #110
[#236 decimal_int_literal]: #108
[#236 depth_texture_type]: #115
[#236 expression]: #239
[#236 float_literal]: #84
[#236 hex_float_literal]: #111
[#236 hex_int_literal]: #109
[#236 ident]: #73
[#236 int_literal]: #83
[#236 literal]: #75
[#236 mat_prefix]: #81
[#236 multiplicative_expression]: #65
[#236 multisampled_texture_type]: #117
[#236 paren_expression]: #76
[#236 primary_expression]: #72
[#236 relational_expression]: #55
[#236 sampled_texture_type]: #116
[#236 sampler_type]: #114
[#236 shift_expression]: #59
[#236 short_circuit_and_expression]: #57
[#236 short_circuit_or_expression]: #56
[#236 singular_expression]: #66
[#236 storage_texture_type]: #118
[#236 texture_and_sampler_types]: #95
[#236 type_specifier_without_ident]: #79
[#236 unary_expression]: #64
[#236 vec_prefix]: #80
[#237 additive_expression]: #63
[#237 array_type_specifier]: #93
[#237 binary_and_expression]: #60
[#237 binary_or_expression]: #61
[#237 binary_xor_expression]: #62
[#237 bitwise_expression]: #58
[#237 bool_literal]: #85
[#237 callable]: #74
[#237 decimal_float_literal]: #110
[#237 decimal_int_literal]: #108
[#237 depth_texture_type]: #115
[#237 expression]: #238
[#237 float_literal]: #84
[#237 hex_float_literal]: #111
[#237 hex_int_literal]: #109
[#237 ident]: #73
[#237 int_literal]: #83
[#237 literal]: #75
[#237 mat_prefix]: #81
[#237 multiplicative_expression]: #65
[#237 multisampled_texture_type]: #117
[#237 paren_expression]: #76
[#237 primary_expression]: #72
[#237 relational_expression]: #55
[#237 sampled_texture_type]: #116
[#237 sampler_type]: #114
[#237 shift_expression]: #59
[#237 short_circuit_and_expression]: #57
[#237 short_circuit_or_expression]: #56
[#237 singular_expression]: #66
[#237 storage_texture_type]: #118
[#237 texture_and_sampler_types]: #95
[#237 type_specifier_without_ident]: #79
[#237 unary_expression]: #64
[#237 vec_prefix]: #80
[#238 attrib_end]: #442
[#238 attrib_end/0.0]: #349
[#239 attrib_end]: #441
[#239 attrib_end/0.0]: #349
[#240 attrib_end]: #440
[#240 attrib_end/0.0]: #349
[#253 attrib_end]: #439
[#253 attrib_end/0.0]: #349
[#254 attrib_end]: #438
[#254 attrib_end/0.0]: #349
[#255 attrib_end]: #436
[#255 attrib_end/0.0]: #349
[#259 attrib_end]: #435
[#259 attrib_end/0.0]: #349
[#260 attrib_end]: #434
[#260 attrib_end/0.0]: #349
[#261 attrib_end]: #432
[#261 attrib_end/0.0]: #349
[#274 multiplicative_operator]: #208
[#279 component_or_swizzle_specifier]: #431
[#279 component_or_swizzle_specifier/1.2]: #430
[#280 component_or_swizzle_specifier]: #429
[#280 component_or_swizzle_specifier/2.2]: #428
[#293 expression_comma_list/0.1]: #422
[#293 expression_comma_list/0.1/0]: #423
[#293 expression_comma_list/0.1/0/0.0]: #424
[#302 array_type_specifier/0.3]: #417
[#332 array_type_specifier]: #93
[#332 assignment_statement]: #396
[#332 attribute]: #407
[#332 break_statement]: #378
[#332 callable]: #390
[#332 compound_statement]: #382
[#332 compound_statement/0.0]: #184
[#332 compound_statement/0.0/0]: #185
[#332 compound_statement/0.2]: #366
[#332 compound_statement/0.2/0]: #367
[#332 continue_statement]: #379
[#332 core_lhs_expression]: #408
[#332 decrement_statement]: #398
[#332 depth_texture_type]: #115
[#332 for_statement]: #374
[#332 for_statement/0.0]: #388
[#332 for_statement/0.0/0]: #402
[#332 func_call_statement]: #376
[#332 ident]: #404
[#332 if_statement]: #371
[#332 if_statement/0.0]: #385
[#332 if_statement/0.0/0]: #399
[#332 increment_statement]: #397
[#332 lhs_expression]: #405
[#332 loop_statement]: #373
[#332 loop_statement/0.0]: #387
[#332 loop_statement/0.0/0]: #401
[#332 mat_prefix]: #81
[#332 multisampled_texture_type]: #117
[#332 return_statement]: #370
[#332 sampled_texture_type]: #116
[#332 sampler_type]: #114
[#332 statement]: #368
[#332 static_assert_statement]: #383
[#332 storage_texture_type]: #118
[#332 switch_statement]: #372
[#332 switch_statement/0.0]: #386
[#332 switch_statement/0.0/0]: #400
[#332 texture_and_sampler_types]: #95
[#332 type_specifier_without_ident]: #79
[#332 variable_decl]: #391
[#332 variable_statement]: #377
[#332 variable_updating_statement]: #381
[#332 vec_prefix]: #80
[#332 while_statement]: #375
[#332 while_statement/0.0]: #389
[#332 while_statement/0.0/0]: #403
[#333 attribute]: #365
[#333 function_header/0.3]: #360
[#333 param]: #362
[#333 param/0.0]: #363
[#333 param/0.0/0]: #364
[#333 param_list]: #361
[#334 struct_body_decl/0.2]: #356
[#334 struct_body_decl/0.2/0]: #357
[#334 struct_body_decl/0.2/0/0.0]: #358
[#335 member_ident]: #355
[#337 attribute]: #337
[#337 struct_member/0.0/0]: #354
[#340 additive_expression]: #63
[#340 array_type_specifier]: #93
[#340 binary_and_expression]: #60
[#340 binary_or_expression]: #61
[#340 binary_xor_expression]: #62
[#340 bitwise_expression]: #58
[#340 bool_literal]: #85
[#340 callable]: #74
[#340 decimal_float_literal]: #110
[#340 decimal_int_literal]: #108
[#340 depth_texture_type]: #115
[#340 expression]: #353
[#340 float_literal]: #84
[#340 hex_float_literal]: #111
[#340 hex_int_literal]: #109
[#340 ident]: #73
[#340 int_literal]: #83
[#340 literal]: #75
[#340 mat_prefix]: #81
[#340 multiplicative_expression]: #65
[#340 multisampled_texture_type]: #117
[#340 paren_expression]: #76
[#340 primary_expression]: #72
[#340 relational_expression]: #55
[#340 sampled_texture_type]: #116
[#340 sampler_type]: #114
[#340 shift_expression]: #59
[#340 short_circuit_and_expression]: #57
[#340 short_circuit_or_expression]: #56
[#340 singular_expression]: #66
[#340 storage_texture_type]: #118
[#340 texture_and_sampler_types]: #95
[#340 type_specifier_without_ident]: #79
[#340 unary_expression]: #64
[#340 vec_prefix]: #80
[#344 variable_qualifier/0.2]: #351
[#346 attrib_end]: #348
[#346 attrib_end/0.0]: #349
[#352 access_mode]: #526
[#356 struct_body_decl/0.3]: #523
[#358 struct_body_decl/0.2/0]: #522
[#358 struct_body_decl/0.2/0/0.0]: #358
[#359 attribute]: #337
[#359 struct_member]: #521
[#359 struct_member/0.0]: #335
[#359 struct_member/0.0/0]: #336
[#362 param_list/0.1]: #516
[#362 param_list/0.1/0]: #517
[#362 param_list/0.1/0/0.0]: #518
[#363 ident]: #515
[#365 attribute]: #365
[#365 param/0.0/0]: #514
[#368 array_type_specifier]: #93
[#368 assignment_statement]: #396
[#368 attribute]: #407
[#368 break_statement]: #378
[#368 callable]: #390
[#368 compound_statement]: #382
[#368 compound_statement/0.0]: #184
[#368 compound_statement/0.0/0]: #185
[#368 compound_statement/0.2/0]: #512
[#368 continue_statement]: #379
[#368 core_lhs_expression]: #408
[#368 decrement_statement]: #398
[#368 depth_texture_type]: #115
[#368 for_statement]: #374
[#368 for_statement/0.0]: #388
[#368 for_statement/0.0/0]: #402
[#368 func_call_statement]: #376
[#368 ident]: #404
[#368 if_statement]: #371
[#368 if_statement/0.0]: #385
[#368 if_statement/0.0/0]: #399
[#368 increment_statement]: #397
[#368 lhs_expression]: #405
[#368 loop_statement]: #373
[#368 loop_statement/0.0]: #387
[#368 loop_statement/0.0/0]: #401
[#368 mat_prefix]: #81
[#368 multisampled_texture_type]: #117
[#368 return_statement]: #370
[#368 sampled_texture_type]: #116
[#368 sampler_type]: #114
[#368 statement]: #368
[#368 static_assert_statement]: #383
[#368 storage_texture_type]: #118
[#368 switch_statement]: #372
[#368 switch_statement/0.0]: #386
[#368 switch_statement/0.0/0]: #400
[#368 texture_and_sampler_types]: #95
[#368 type_specifier_without_ident]: #79
[#368 variable_decl]: #391
[#368 variable_statement]: #377
[#368 variable_updating_statement]: #381
[#368 vec_prefix]: #80
[#368 while_statement]: #375
[#368 while_statement/0.0]: #389
[#368 while_statement/0.0/0]: #403
[#384 additive_expression]: #63
[#384 array_type_specifier]: #93
[#384 binary_and_expression]: #60
[#384 binary_or_expression]: #61
[#384 binary_xor_expression]: #62
[#384 bitwise_expression]: #58
[#384 bool_literal]: #85
[#384 callable]: #74
[#384 decimal_float_literal]: #110
[#384 decimal_int_literal]: #108
[#384 depth_texture_type]: #115
[#384 expression]: #503
[#384 float_literal]: #84
[#384 hex_float_literal]: #111
[#384 hex_int_literal]: #109
[#384 ident]: #73
[#384 int_literal]: #83
[#384 literal]: #75
[#384 mat_prefix]: #81
[#384 multiplicative_expression]: #65
[#384 multisampled_texture_type]: #117
[#384 paren_expression]: #76
[#384 primary_expression]: #72
[#384 relational_expression]: #55
[#384 return_statement/0.1]: #502
[#384 sampled_texture_type]: #116
[#384 sampler_type]: #114
[#384 shift_expression]: #59
[#384 short_circuit_and_expression]: #57
[#384 short_circuit_or_expression]: #56
[#384 singular_expression]: #66
[#384 storage_texture_type]: #118
[#384 texture_and_sampler_types]: #95
[#384 type_specifier_without_ident]: #79
[#384 unary_expression]: #64
[#384 vec_prefix]: #80
[#385 if_clause]: #500
[#390 argument_expression_list]: #495
[#392 ident]: #154
[#392 optionally_typed_ident]: #493
[#393 ident]: #154
[#393 optionally_typed_ident]: #492
[#405 assignment_statement/0.1]: #477
[#405 compound_assignment_operator]: #481
[#407 attribute]: #407
[#407 compound_statement/0.0/0]: #331
[#407 for_statement/0.0/0]: #474
[#407 if_statement/0.0/0]: #471
[#407 loop_statement/0.0/0]: #473
[#407 switch_statement/0.0/0]: #472
[#407 while_statement/0.0/0]: #475
[#408 component_or_swizzle_specifier]: #470
[#408 lhs_expression/0.1]: #469
[#409 core_lhs_expression]: #408
[#409 ident]: #466
[#409 lhs_expression]: #468
[#410 core_lhs_expression]: #408
[#410 ident]: #466
[#410 lhs_expression]: #467
[#411 core_lhs_expression]: #408
[#411 ident]: #466
[#411 lhs_expression]: #465
[#412 access_mode]: #461
[#416 array_type_specifier]: #93
[#416 depth_texture_type]: #115
[#416 ident]: #295
[#416 mat_prefix]: #298
[#416 multisampled_texture_type]: #117
[#416 sampled_texture_type]: #116
[#416 sampler_type]: #114
[#416 storage_texture_type]: #118
[#416 texture_and_sampler_types]: #95
[#416 type_specifier]: #460
[#416 type_specifier_without_ident]: #296
[#416 vec_prefix]: #297
[#418 additive_expression]: #456
[#418 array_type_specifier]: #93
[#418 binary_and_expression]: #60
[#418 binary_or_expression]: #61
[#418 binary_xor_expression]: #62
[#418 bitwise_expression]: #457
[#418 bool_literal]: #85
[#418 callable]: #74
[#418 decimal_float_literal]: #110
[#418 decimal_int_literal]: #108
[#418 depth_texture_type]: #115
[#418 element_count_expression]: #455
[#418 float_literal]: #84
[#418 hex_float_literal]: #111
[#418 hex_int_literal]: #109
[#418 ident]: #73
[#418 int_literal]: #83
[#418 literal]: #75
[#418 mat_prefix]: #81
[#418 multiplicative_expression]: #65
[#418 multisampled_texture_type]: #117
[#418 paren_expression]: #76
[#418 primary_expression]: #72
[#418 sampled_texture_type]: #116
[#418 sampler_type]: #114
[#418 singular_expression]: #66
[#418 storage_texture_type]: #118
[#418 texture_and_sampler_types]: #95
[#418 type_specifier_without_ident]: #79
[#418 unary_expression]: #458
[#418 vec_prefix]: #80
[#421 paren_expression]: #454
[#422 expression_comma_list/0.2]: #452
[#424 expression_comma_list/0.1/0]: #451
[#424 expression_comma_list/0.1/0/0.0]: #424
[#425 additive_expression]: #63
[#425 array_type_specifier]: #93
[#425 binary_and_expression]: #60
[#425 binary_or_expression]: #61
[#425 binary_xor_expression]: #62
[#425 bitwise_expression]: #58
[#425 bool_literal]: #85
[#425 callable]: #74
[#425 decimal_float_literal]: #110
[#425 decimal_int_literal]: #108
[#425 depth_texture_type]: #115
[#425 expression]: #450
[#425 float_literal]: #84
[#425 hex_float_literal]: #111
[#425 hex_int_literal]: #109
[#425 ident]: #73
[#425 int_literal]: #83
[#425 literal]: #75
[#425 mat_prefix]: #81
[#425 multiplicative_expression]: #65
[#425 multisampled_texture_type]: #117
[#425 paren_expression]: #76
[#425 primary_expression]: #72
[#425 relational_expression]: #55
[#425 sampled_texture_type]: #116
[#425 sampler_type]: #114
[#425 shift_expression]: #59
[#425 short_circuit_and_expression]: #57
[#425 short_circuit_or_expression]: #56
[#425 singular_expression]: #66
[#425 storage_texture_type]: #118
[#425 texture_and_sampler_types]: #95
[#425 type_specifier_without_ident]: #79
[#425 unary_expression]: #64
[#425 vec_prefix]: #80
[#427 component_or_swizzle_specifier]: #449
[#427 component_or_swizzle_specifier/0.3]: #448
[#433 additive_expression]: #63
[#433 array_type_specifier]: #93
[#433 binary_and_expression]: #60
[#433 binary_or_expression]: #61
[#433 binary_xor_expression]: #62
[#433 bitwise_expression]: #58
[#433 bool_literal]: #85
[#433 callable]: #74
[#433 decimal_float_literal]: #110
[#433 decimal_int_literal]: #108
[#433 depth_texture_type]: #115
[#433 expression]: #447
[#433 float_literal]: #84
[#433 hex_float_literal]: #111
[#433 hex_int_literal]: #109
[#433 ident]: #73
[#433 int_literal]: #83
[#433 literal]: #75
[#433 mat_prefix]: #81
[#433 multiplicative_expression]: #65
[#433 multisampled_texture_type]: #117
[#433 paren_expression]: #76
[#433 primary_expression]: #72
[#433 relational_expression]: #55
[#433 sampled_texture_type]: #116
[#433 sampler_type]: #114
[#433 shift_expression]: #59
[#433 short_circuit_and_expression]: #57
[#433 short_circuit_or_expression]: #56
[#433 singular_expression]: #66
[#433 storage_texture_type]: #118
[#433 texture_and_sampler_types]: #95
[#433 type_specifier_without_ident]: #79
[#433 unary_expression]: #64
[#433 vec_prefix]: #80
[#437 interpolation_sample_name]: #443
[#443 attrib_end]: #560
[#443 attrib_end/0.0]: #349
[#447 attrib_end]: #558
[#447 attrib_end/0.0]: #349
[#456 additive_operator]: #214
[#460 type_specifier_without_ident/7.5]: #556
[#476 additive_expression]: #63
[#476 array_type_specifier]: #93
[#476 binary_and_expression]: #60
[#476 binary_or_expression]: #61
[#476 binary_xor_expression]: #62
[#476 bitwise_expression]: #58
[#476 bool_literal]: #85
[#476 callable]: #74
[#476 decimal_float_literal]: #110
[#476 decimal_int_literal]: #108
[#476 depth_texture_type]: #115
[#476 expression]: #553
[#476 float_literal]: #84
[#476 hex_float_literal]: #111
[#476 hex_int_literal]: #109
[#476 ident]: #73
[#476 int_literal]: #83
[#476 literal]: #75
[#476 mat_prefix]: #81
[#476 multiplicative_expression]: #65
[#476 multisampled_texture_type]: #117
[#476 paren_expression]: #76
[#476 primary_expression]: #72
[#476 relational_expression]: #55
[#476 sampled_texture_type]: #116
[#476 sampler_type]: #114
[#476 shift_expression]: #59
[#476 short_circuit_and_expression]: #57
[#476 short_circuit_or_expression]: #56
[#476 singular_expression]: #66
[#476 storage_texture_type]: #118
[#476 texture_and_sampler_types]: #95
[#476 type_specifier_without_ident]: #79
[#476 unary_expression]: #64
[#476 vec_prefix]: #80
[#477 additive_expression]: #63
[#477 array_type_specifier]: #93
[#477 binary_and_expression]: #60
[#477 binary_or_expression]: #61
[#477 binary_xor_expression]: #62
[#477 bitwise_expression]: #58
[#477 bool_literal]: #85
[#477 callable]: #74
[#477 decimal_float_literal]: #110
[#477 decimal_int_literal]: #108
[#477 depth_texture_type]: #115
[#477 expression]: #552
[#477 float_literal]: #84
[#477 hex_float_literal]: #111
[#477 hex_int_literal]: #109
[#477 ident]: #73
[#477 int_literal]: #83
[#477 literal]: #75
[#477 mat_prefix]: #81
[#477 multiplicative_expression]: #65
[#477 multisampled_texture_type]: #117
[#477 paren_expression]: #76
[#477 primary_expression]: #72
[#477 relational_expression]: #55
[#477 sampled_texture_type]: #116
[#477 sampler_type]: #114
[#477 shift_expression]: #59
[#477 short_circuit_and_expression]: #57
[#477 short_circuit_or_expression]: #56
[#477 singular_expression]: #66
[#477 storage_texture_type]: #118
[#477 texture_and_sampler_types]: #95
[#477 type_specifier_without_ident]: #79
[#477 unary_expression]: #64
[#477 vec_prefix]: #80
[#494 additive_expression]: #63
[#494 array_type_specifier]: #93
[#494 binary_and_expression]: #60
[#494 binary_or_expression]: #61
[#494 binary_xor_expression]: #62
[#494 bitwise_expression]: #58
[#494 bool_literal]: #85
[#494 callable]: #74
[#494 decimal_float_literal]: #110
[#494 decimal_int_literal]: #108
[#494 depth_texture_type]: #115
[#494 expression]: #549
[#494 float_literal]: #84
[#494 hex_float_literal]: #111
[#494 hex_int_literal]: #109
[#494 ident]: #73
[#494 int_literal]: #83
[#494 literal]: #75
[#494 mat_prefix]: #81
[#494 multiplicative_expression]: #65
[#494 multisampled_texture_type]: #117
[#494 paren_expression]: #76
[#494 primary_expression]: #72
[#494 relational_expression]: #55
[#494 sampled_texture_type]: #116
[#494 sampler_type]: #114
[#494 shift_expression]: #59
[#494 short_circuit_and_expression]: #57
[#494 short_circuit_or_expression]: #56
[#494 singular_expression]: #66
[#494 storage_texture_type]: #118
[#494 texture_and_sampler_types]: #95
[#494 type_specifier_without_ident]: #79
[#494 unary_expression]: #64
[#494 vec_prefix]: #80
[#496 additive_expression]: #63
[#496 array_type_specifier]: #93
[#496 binary_and_expression]: #60
[#496 binary_or_expression]: #61
[#496 binary_xor_expression]: #62
[#496 bitwise_expression]: #58
[#496 bool_literal]: #85
[#496 callable]: #74
[#496 decimal_float_literal]: #110
[#496 decimal_int_literal]: #108
[#496 depth_texture_type]: #115
[#496 expression]: #548
[#496 float_literal]: #84
[#496 hex_float_literal]: #111
[#496 hex_int_literal]: #109
[#496 ident]: #73
[#496 int_literal]: #83
[#496 literal]: #75
[#496 mat_prefix]: #81
[#496 multiplicative_expression]: #65
[#496 multisampled_texture_type]: #117
[#496 paren_expression]: #76
[#496 primary_expression]: #72
[#496 relational_expression]: #55
[#496 sampled_texture_type]: #116
[#496 sampler_type]: #114
[#496 shift_expression]: #59
[#496 short_circuit_and_expression]: #57
[#496 short_circuit_or_expression]: #56
[#496 singular_expression]: #66
[#496 storage_texture_type]: #118
[#496 texture_and_sampler_types]: #95
[#496 type_specifier_without_ident]: #79
[#496 unary_expression]: #64
[#496 vec_prefix]: #80
[#498 attribute]: #546
[#498 loop_statement/0.2]: #544
[#498 loop_statement/0.2/0]: #545
[#499 additive_expression]: #63
[#499 array_type_specifier]: #93
[#499 binary_and_expression]: #60
[#499 binary_or_expression]: #61
[#499 binary_xor_expression]: #62
[#499 bitwise_expression]: #58
[#499 bool_literal]: #85
[#499 callable]: #74
[#499 decimal_float_literal]: #110
[#499 decimal_int_literal]: #108
[#499 depth_texture_type]: #115
[#499 expression]: #543
[#499 float_literal]: #84
[#499 hex_float_literal]: #111
[#499 hex_int_literal]: #109
[#499 ident]: #73
[#499 int_literal]: #83
[#499 literal]: #75
[#499 mat_prefix]: #81
[#499 multiplicative_expression]: #65
[#499 multisampled_texture_type]: #117
[#499 paren_expression]: #76
[#499 primary_expression]: #72
[#499 relational_expression]: #55
[#499 sampled_texture_type]: #116
[#499 sampler_type]: #114
[#499 shift_expression]: #59
[#499 short_circuit_and_expression]: #57
[#499 short_circuit_or_expression]: #56
[#499 singular_expression]: #66
[#499 storage_texture_type]: #118
[#499 texture_and_sampler_types]: #95
[#499 type_specifier_without_ident]: #79
[#499 unary_expression]: #64
[#499 vec_prefix]: #80
[#500 else_if_clause]: #541
[#500 if_statement/0.2]: #539
[#500 if_statement/0.2/0]: #540
[#501 additive_expression]: #63
[#501 array_type_specifier]: #93
[#501 binary_and_expression]: #60
[#501 binary_or_expression]: #61
[#501 binary_xor_expression]: #62
[#501 bitwise_expression]: #58
[#501 bool_literal]: #85
[#501 callable]: #74
[#501 decimal_float_literal]: #110
[#501 decimal_int_literal]: #108
[#501 depth_texture_type]: #115
[#501 expression]: #538
[#501 float_literal]: #84
[#501 hex_float_literal]: #111
[#501 hex_int_literal]: #109
[#501 ident]: #73
[#501 int_literal]: #83
[#501 literal]: #75
[#501 mat_prefix]: #81
[#501 multiplicative_expression]: #65
[#501 multisampled_texture_type]: #117
[#501 paren_expression]: #76
[#501 primary_expression]: #72
[#501 relational_expression]: #55
[#501 sampled_texture_type]: #116
[#501 sampler_type]: #114
[#501 shift_expression]: #59
[#501 short_circuit_and_expression]: #57
[#501 short_circuit_or_expression]: #56
[#501 singular_expression]: #66
[#501 storage_texture_type]: #118
[#501 texture_and_sampler_types]: #95
[#501 type_specifier_without_ident]: #79
[#501 unary_expression]: #64
[#501 vec_prefix]: #80
[#516 param_list/0.2]: #535
[#518 param_list/0.1/0]: #534
[#518 param_list/0.1/0/0.0]: #518
[#519 attribute]: #365
[#519 param]: #533
[#519 param/0.0]: #363
[#519 param/0.0/0]: #364
[#520 function_header/0.5]: #531
[#525 array_type_specifier]: #93
[#525 depth_texture_type]: #115
[#525 ident]: #295
[#525 mat_prefix]: #298
[#525 multisampled_texture_type]: #117
[#525 sampled_texture_type]: #116
[#525 sampler_type]: #114
[#525 storage_texture_type]: #118
[#525 texture_and_sampler_types]: #95
[#525 type_specifier]: #529
[#525 type_specifier_without_ident]: #296
[#525 vec_prefix]: #297
[#532 attribute]: #588
[#532 function_header/0.5/0.1]: #586
[#532 function_header/0.5/0.1/0]: #587
[#537 array_type_specifier]: #93
[#537 depth_texture_type]: #115
[#537 ident]: #295
[#537 mat_prefix]: #298
[#537 multisampled_texture_type]: #117
[#537 sampled_texture_type]: #116
[#537 sampler_type]: #114
[#537 storage_texture_type]: #118
[#537 texture_and_sampler_types]: #95
[#537 type_specifier]: #585
[#537 type_specifier_without_ident]: #296
[#537 vec_prefix]: #297
[#538 attribute]: #186
[#538 compound_statement]: #584
[#538 compound_statement/0.0]: #184
[#538 compound_statement/0.0/0]: #185
[#539 else_clause]: #582
[#539 if_statement/0.3]: #581
[#541 else_if_clause]: #541
[#541 if_statement/0.2/0]: #580
[#543 attribute]: #578
[#543 switch_body]: #575
[#543 switch_body/0.0]: #576
[#543 switch_body/0.0/0]: #577
[#546 attribute]: #546
[#546 loop_statement/0.2/0]: #573
[#547 array_type_specifier]: #93
[#547 assignment_statement]: #396
[#547 callable]: #390
[#547 core_lhs_expression]: #408
[#547 decrement_statement]: #398
[#547 depth_texture_type]: #115
[#547 for_header]: #567
[#547 for_header/0.0]: #568
[#547 for_init]: #569
[#547 func_call_statement]: #572
[#547 ident]: #404
[#547 increment_statement]: #397
[#547 lhs_expression]: #405
[#547 mat_prefix]: #81
[#547 multisampled_texture_type]: #117
[#547 sampled_texture_type]: #116
[#547 sampler_type]: #114
[#547 storage_texture_type]: #118
[#547 texture_and_sampler_types]: #95
[#547 type_specifier_without_ident]: #79
[#547 variable_decl]: #391
[#547 variable_statement]: #570
[#547 variable_updating_statement]: #571
[#547 vec_prefix]: #80
[#548 attribute]: #186
[#548 compound_statement]: #566
[#548 compound_statement/0.0]: #184
[#548 compound_statement/0.0/0]: #185
[#550 additive_expression]: #63
[#550 array_type_specifier]: #93
[#550 binary_and_expression]: #60
[#550 binary_or_expression]: #61
[#550 binary_xor_expression]: #62
[#550 bitwise_expression]: #58
[#550 bool_literal]: #85
[#550 callable]: #74
[#550 decimal_float_literal]: #110
[#550 decimal_int_literal]: #108
[#550 depth_texture_type]: #115
[#550 expression]: #565
[#550 float_literal]: #84
[#550 hex_float_literal]: #111
[#550 hex_int_literal]: #109
[#550 ident]: #73
[#550 int_literal]: #83
[#550 literal]: #75
[#550 mat_prefix]: #81
[#550 multiplicative_expression]: #65
[#550 multisampled_texture_type]: #117
[#550 paren_expression]: #76
[#550 primary_expression]: #72
[#550 relational_expression]: #55
[#550 sampled_texture_type]: #116
[#550 sampler_type]: #114
[#550 shift_expression]: #59
[#550 short_circuit_and_expression]: #57
[#550 short_circuit_or_expression]: #56
[#550 singular_expression]: #66
[#550 storage_texture_type]: #118
[#550 texture_and_sampler_types]: #95
[#550 type_specifier_without_ident]: #79
[#550 unary_expression]: #64
[#550 vec_prefix]: #80
[#551 additive_expression]: #63
[#551 array_type_specifier]: #93
[#551 binary_and_expression]: #60
[#551 binary_or_expression]: #61
[#551 binary_xor_expression]: #62
[#551 bitwise_expression]: #58
[#551 bool_literal]: #85
[#551 callable]: #74
[#551 decimal_float_literal]: #110
[#551 decimal_int_literal]: #108
[#551 depth_texture_type]: #115
[#551 expression]: #564
[#551 float_literal]: #84
[#551 hex_float_literal]: #111
[#551 hex_int_literal]: #109
[#551 ident]: #73
[#551 int_literal]: #83
[#551 literal]: #75
[#551 mat_prefix]: #81
[#551 multiplicative_expression]: #65
[#551 multisampled_texture_type]: #117
[#551 paren_expression]: #76
[#551 primary_expression]: #72
[#551 relational_expression]: #55
[#551 sampled_texture_type]: #116
[#551 sampler_type]: #114
[#551 shift_expression]: #59
[#551 short_circuit_and_expression]: #57
[#551 short_circuit_or_expression]: #56
[#551 singular_expression]: #66
[#551 storage_texture_type]: #118
[#551 texture_and_sampler_types]: #95
[#551 type_specifier_without_ident]: #79
[#551 unary_expression]: #64
[#551 vec_prefix]: #80
[#557 access_mode]: #562
[#559 additive_expression]: #63
[#559 array_type_specifier]: #93
[#559 binary_and_expression]: #60
[#559 binary_or_expression]: #61
[#559 binary_xor_expression]: #62
[#559 bitwise_expression]: #58
[#559 bool_literal]: #85
[#559 callable]: #74
[#559 decimal_float_literal]: #110
[#559 decimal_int_literal]: #108
[#559 depth_texture_type]: #115
[#559 expression]: #561
[#559 float_literal]: #84
[#559 hex_float_literal]: #111
[#559 hex_int_literal]: #109
[#559 ident]: #73
[#559 int_literal]: #83
[#559 literal]: #75
[#559 mat_prefix]: #81
[#559 multiplicative_expression]: #65
[#559 multisampled_texture_type]: #117
[#559 paren_expression]: #76
[#559 primary_expression]: #72
[#559 relational_expression]: #55
[#559 sampled_texture_type]: #116
[#559 sampler_type]: #114
[#559 shift_expression]: #59
[#559 short_circuit_and_expression]: #57
[#559 short_circuit_or_expression]: #56
[#559 singular_expression]: #66
[#559 storage_texture_type]: #118
[#559 texture_and_sampler_types]: #95
[#559 type_specifier_without_ident]: #79
[#559 unary_expression]: #64
[#559 vec_prefix]: #80
[#561 attrib_end]: #600
[#561 attrib_end/0.0]: #349
[#574 array_type_specifier]: #93
[#574 assignment_statement]: #396
[#574 attribute]: #407
[#574 break_statement]: #378
[#574 callable]: #390
[#574 compound_statement]: #382
[#574 compound_statement/0.0]: #184
[#574 compound_statement/0.0/0]: #185
[#574 continue_statement]: #379
[#574 core_lhs_expression]: #408
[#574 decrement_statement]: #398
[#574 depth_texture_type]: #115
[#574 for_statement]: #374
[#574 for_statement/0.0]: #388
[#574 for_statement/0.0/0]: #402
[#574 func_call_statement]: #376
[#574 ident]: #404
[#574 if_statement]: #371
[#574 if_statement/0.0]: #385
[#574 if_statement/0.0/0]: #399
[#574 increment_statement]: #397
[#574 lhs_expression]: #405
[#574 loop_statement]: #373
[#574 loop_statement/0.0]: #387
[#574 loop_statement/0.0/0]: #401
[#574 loop_statement/0.4]: #595
[#574 loop_statement/0.4/0]: #596
[#574 mat_prefix]: #81
[#574 multisampled_texture_type]: #117
[#574 return_statement]: #370
[#574 sampled_texture_type]: #116
[#574 sampler_type]: #114
[#574 statement]: #597
[#574 static_assert_statement]: #383
[#574 storage_texture_type]: #118
[#574 switch_statement]: #372
[#574 switch_statement/0.0]: #386
[#574 switch_statement/0.0/0]: #400
[#574 texture_and_sampler_types]: #95
[#574 type_specifier_without_ident]: #79
[#574 variable_decl]: #391
[#574 variable_statement]: #377
[#574 variable_updating_statement]: #381
[#574 vec_prefix]: #80
[#574 while_statement]: #375
[#574 while_statement/0.0]: #389
[#574 while_statement/0.0/0]: #403
[#578 attribute]: #578
[#578 switch_body/0.0/0]: #593
[#579 additive_expression]: #63
[#579 array_type_specifier]: #93
[#579 binary_and_expression]: #60
[#579 binary_or_expression]: #61
[#579 binary_xor_expression]: #62
[#579 bitwise_expression]: #58
[#579 bool_literal]: #85
[#579 callable]: #74
[#579 decimal_float_literal]: #110
[#579 decimal_int_literal]: #108
[#579 depth_texture_type]: #115
[#579 expression]: #592
[#579 float_literal]: #84
[#579 hex_float_literal]: #111
[#579 hex_int_literal]: #109
[#579 ident]: #73
[#579 int_literal]: #83
[#579 literal]: #75
[#579 mat_prefix]: #81
[#579 multiplicative_expression]: #65
[#579 multisampled_texture_type]: #117
[#579 paren_expression]: #76
[#579 primary_expression]: #72
[#579 relational_expression]: #55
[#579 sampled_texture_type]: #116
[#579 sampler_type]: #114
[#579 shift_expression]: #59
[#579 short_circuit_and_expression]: #57
[#579 short_circuit_or_expression]: #56
[#579 singular_expression]: #66
[#579 storage_texture_type]: #118
[#579 texture_and_sampler_types]: #95
[#579 type_specifier_without_ident]: #79
[#579 unary_expression]: #64
[#579 vec_prefix]: #80
[#583 attribute]: #186
[#583 compound_statement]: #591
[#583 compound_statement/0.0]: #184
[#583 compound_statement/0.0/0]: #185
[#586 array_type_specifier]: #93
[#586 depth_texture_type]: #115
[#586 ident]: #295
[#586 mat_prefix]: #298
[#586 multisampled_texture_type]: #117
[#586 sampled_texture_type]: #116
[#586 sampler_type]: #114
[#586 storage_texture_type]: #118
[#586 texture_and_sampler_types]: #95
[#586 type_specifier]: #590
[#586 type_specifier_without_ident]: #296
[#586 vec_prefix]: #297
[#588 attribute]: #588
[#588 function_header/0.5/0.1/0]: #589
[#592 attribute]: #186
[#592 compound_statement]: #615
[#592 compound_statement/0.0]: #184
[#592 compound_statement/0.0/0]: #185
[#594 case_clause]: #611
[#594 default_alone_clause]: #612
[#594 switch_body/0.2]: #608
[#594 switch_body/0.2/0]: #609
[#594 switch_clause]: #610
[#595 continuing_statement]: #606
[#595 loop_statement/0.5]: #605
[#597 array_type_specifier]: #93
[#597 assignment_statement]: #396
[#597 attribute]: #407
[#597 break_statement]: #378
[#597 callable]: #390
[#597 compound_statement]: #382
[#597 compound_statement/0.0]: #184
[#597 compound_statement/0.0/0]: #185
[#597 continue_statement]: #379
[#597 core_lhs_expression]: #408
[#597 decrement_statement]: #398
[#597 depth_texture_type]: #115
[#597 for_statement]: #374
[#597 for_statement/0.0]: #388
[#597 for_statement/0.0/0]: #402
[#597 func_call_statement]: #376
[#597 ident]: #404
[#597 if_statement]: #371
[#597 if_statement/0.0]: #385
[#597 if_statement/0.0/0]: #399
[#597 increment_statement]: #397
[#597 lhs_expression]: #405
[#597 loop_statement]: #373
[#597 loop_statement/0.0]: #387
[#597 loop_statement/0.0/0]: #401
[#597 loop_statement/0.4/0]: #604
[#597 mat_prefix]: #81
[#597 multisampled_texture_type]: #117
[#597 return_statement]: #370
[#597 sampled_texture_type]: #116
[#597 sampler_type]: #114
[#597 statement]: #597
[#597 static_assert_statement]: #383
[#597 storage_texture_type]: #118
[#597 switch_statement]: #372
[#597 switch_statement/0.0]: #386
[#597 switch_statement/0.0/0]: #400
[#597 texture_and_sampler_types]: #95
[#597 type_specifier_without_ident]: #79
[#597 variable_decl]: #391
[#597 variable_statement]: #377
[#597 variable_updating_statement]: #381
[#597 vec_prefix]: #80
[#597 while_statement]: #375
[#597 while_statement/0.0]: #389
[#597 while_statement/0.0/0]: #403
[#598 additive_expression]: #63
[#598 array_type_specifier]: #93
[#598 binary_and_expression]: #60
[#598 binary_or_expression]: #61
[#598 binary_xor_expression]: #62
[#598 bitwise_expression]: #58
[#598 bool_literal]: #85
[#598 callable]: #74
[#598 decimal_float_literal]: #110
[#598 decimal_int_literal]: #108
[#598 depth_texture_type]: #115
[#598 expression]: #603
[#598 float_literal]: #84
[#598 for_header/0.2]: #602
[#598 hex_float_literal]: #111
[#598 hex_int_literal]: #109
[#598 ident]: #73
[#598 int_literal]: #83
[#598 literal]: #75
[#598 mat_prefix]: #81
[#598 multiplicative_expression]: #65
[#598 multisampled_texture_type]: #117
[#598 paren_expression]: #76
[#598 primary_expression]: #72
[#598 relational_expression]: #55
[#598 sampled_texture_type]: #116
[#598 sampler_type]: #114
[#598 shift_expression]: #59
[#598 short_circuit_and_expression]: #57
[#598 short_circuit_or_expression]: #56
[#598 singular_expression]: #66
[#598 storage_texture_type]: #118
[#598 texture_and_sampler_types]: #95
[#598 type_specifier_without_ident]: #79
[#598 unary_expression]: #64
[#598 vec_prefix]: #80
[#599 attribute]: #186
[#599 compound_statement]: #601
[#599 compound_statement/0.0]: #184
[#599 compound_statement/0.0/0]: #185
[#607 attribute]: #627
[#607 continuing_compound_statement]: #624
[#607 continuing_compound_statement/0.0]: #625
[#607 continuing_compound_statement/0.0/0]: #626
[#610 case_clause]: #611
[#610 default_alone_clause]: #612
[#610 switch_body/0.2/0]: #622
[#610 switch_clause]: #610
[#613 additive_expression]: #63
[#613 array_type_specifier]: #93
[#613 binary_and_expression]: #60
[#613 binary_or_expression]: #61
[#613 binary_xor_expression]: #62
[#613 bitwise_expression]: #58
[#613 bool_literal]: #85
[#613 callable]: #74
[#613 case_selector]: #619
[#613 case_selectors]: #618
[#613 decimal_float_literal]: #110
[#613 decimal_int_literal]: #108
[#613 depth_texture_type]: #115
[#613 expression]: #621
[#613 float_literal]: #84
[#613 hex_float_literal]: #111
[#613 hex_int_literal]: #109
[#613 ident]: #73
[#613 int_literal]: #83
[#613 literal]: #75
[#613 mat_prefix]: #81
[#613 multiplicative_expression]: #65
[#613 multisampled_texture_type]: #117
[#613 paren_expression]: #76
[#613 primary_expression]: #72
[#613 relational_expression]: #55
[#613 sampled_texture_type]: #116
[#613 sampler_type]: #114
[#613 shift_expression]: #59
[#613 short_circuit_and_expression]: #57
[#613 short_circuit_or_expression]: #56
[#613 singular_expression]: #66
[#613 storage_texture_type]: #118
[#613 texture_and_sampler_types]: #95
[#613 type_specifier_without_ident]: #79
[#613 unary_expression]: #64
[#613 vec_prefix]: #80
[#614 default_alone_clause/0.1]: #616
[#616 attribute]: #186
[#616 compound_statement]: #642
[#616 compound_statement/0.0]: #184
[#616 compound_statement/0.0/0]: #185
[#618 case_clause/0.2]: #640
[#619 case_selectors/0.1]: #636
[#619 case_selectors/0.1/0]: #637
[#619 case_selectors/0.1/0/0.0]: #638
[#627 attribute]: #627
[#627 continuing_compound_statement/0.0/0]: #634
[#629 array_type_specifier]: #93
[#629 assignment_statement]: #396
[#629 callable]: #390
[#629 core_lhs_expression]: #408
[#629 decrement_statement]: #398
[#629 depth_texture_type]: #115
[#629 for_header/0.4]: #630
[#629 for_update]: #631
[#629 func_call_statement]: #633
[#629 ident]: #404
[#629 increment_statement]: #397
[#629 lhs_expression]: #405
[#629 mat_prefix]: #81
[#629 multisampled_texture_type]: #117
[#629 sampled_texture_type]: #116
[#629 sampler_type]: #114
[#629 storage_texture_type]: #118
[#629 texture_and_sampler_types]: #95
[#629 type_specifier_without_ident]: #79
[#629 variable_updating_statement]: #632
[#629 vec_prefix]: #80
[#635 array_type_specifier]: #93
[#635 assignment_statement]: #396
[#635 attribute]: #407
[#635 break_statement]: #378
[#635 callable]: #390
[#635 compound_statement]: #382
[#635 compound_statement/0.0]: #184
[#635 compound_statement/0.0/0]: #185
[#635 continue_statement]: #379
[#635 continuing_compound_statement/0.2]: #648
[#635 continuing_compound_statement/0.2/0]: #649
[#635 core_lhs_expression]: #408
[#635 decrement_statement]: #398
[#635 depth_texture_type]: #115
[#635 for_statement]: #374
[#635 for_statement/0.0]: #388
[#635 for_statement/0.0/0]: #402
[#635 func_call_statement]: #376
[#635 ident]: #404
[#635 if_statement]: #371
[#635 if_statement/0.0]: #385
[#635 if_statement/0.0/0]: #399
[#635 increment_statement]: #397
[#635 lhs_expression]: #405
[#635 loop_statement]: #373
[#635 loop_statement/0.0]: #387
[#635 loop_statement/0.0/0]: #401
[#635 mat_prefix]: #81
[#635 multisampled_texture_type]: #117
[#635 return_statement]: #370
[#635 sampled_texture_type]: #116
[#635 sampler_type]: #114
[#635 statement]: #650
[#635 static_assert_statement]: #383
[#635 storage_texture_type]: #118
[#635 switch_statement]: #372
[#635 switch_statement/0.0]: #386
[#635 switch_statement/0.0/0]: #400
[#635 texture_and_sampler_types]: #95
[#635 type_specifier_without_ident]: #79
[#635 variable_decl]: #391
[#635 variable_statement]: #377
[#635 variable_updating_statement]: #381
[#635 vec_prefix]: #80
[#635 while_statement]: #375
[#635 while_statement/0.0]: #389
[#635 while_statement/0.0/0]: #403
[#636 case_selectors/0.2]: #646
[#638 case_selectors/0.1/0]: #645
[#638 case_selectors/0.1/0/0.0]: #638
[#639 additive_expression]: #63
[#639 array_type_specifier]: #93
[#639 binary_and_expression]: #60
[#639 binary_or_expression]: #61
[#639 binary_xor_expression]: #62
[#639 bitwise_expression]: #58
[#639 bool_literal]: #85
[#639 callable]: #74
[#639 case_selector]: #644
[#639 decimal_float_literal]: #110
[#639 decimal_int_literal]: #108
[#639 depth_texture_type]: #115
[#639 expression]: #621
[#639 float_literal]: #84
[#639 hex_float_literal]: #111
[#639 hex_int_literal]: #109
[#639 ident]: #73
[#639 int_literal]: #83
[#639 literal]: #75
[#639 mat_prefix]: #81
[#639 multiplicative_expression]: #65
[#639 multisampled_texture_type]: #117
[#639 paren_expression]: #76
[#639 primary_expression]: #72
[#639 relational_expression]: #55
[#639 sampled_texture_type]: #116
[#639 sampler_type]: #114
[#639 shift_expression]: #59
[#639 short_circuit_and_expression]: #57
[#639 short_circuit_or_expression]: #56
[#639 singular_expression]: #66
[#639 storage_texture_type]: #118
[#639 texture_and_sampler_types]: #95
[#639 type_specifier_without_ident]: #79
[#639 unary_expression]: #64
[#639 vec_prefix]: #80
[#640 attribute]: #186
[#640 compound_statement]: #643
[#640 compound_statement/0.0]: #184
[#640 compound_statement/0.0/0]: #185
[#648 break_if_statement]: #653
[#648 continuing_compound_statement/0.3]: #652
[#650 array_type_specifier]: #93
[#650 assignment_statement]: #396
[#650 attribute]: #407
[#650 break_statement]: #378
[#650 callable]: #390
[#650 compound_statement]: #382
[#650 compound_statement/0.0]: #184
[#650 compound_statement/0.0/0]: #185
[#650 continue_statement]: #379
[#650 continuing_compound_statement/0.2/0]: #651
[#650 core_lhs_expression]: #408
[#650 decrement_statement]: #398
[#650 depth_texture_type]: #115
[#650 for_statement]: #374
[#650 for_statement/0.0]: #388
[#650 for_statement/0.0/0]: #402
[#650 func_call_statement]: #376
[#650 ident]: #404
[#650 if_statement]: #371
[#650 if_statement/0.0]: #385
[#650 if_statement/0.0/0]: #399
[#650 increment_statement]: #397
[#650 lhs_expression]: #405
[#650 loop_statement]: #373
[#650 loop_statement/0.0]: #387
[#650 loop_statement/0.0/0]: #401
[#650 mat_prefix]: #81
[#650 multisampled_texture_type]: #117
[#650 return_statement]: #370
[#650 sampled_texture_type]: #116
[#650 sampler_type]: #114
[#650 statement]: #650
[#650 static_assert_statement]: #383
[#650 storage_texture_type]: #118
[#650 switch_statement]: #372
[#650 switch_statement/0.0]: #386
[#650 switch_statement/0.0/0]: #400
[#650 texture_and_sampler_types]: #95
[#650 type_specifier_without_ident]: #79
[#650 variable_decl]: #391
[#650 variable_statement]: #377
[#650 variable_updating_statement]: #381
[#650 vec_prefix]: #80
[#650 while_statement]: #375
[#650 while_statement/0.0]: #389
[#650 while_statement/0.0/0]: #403
[#655 additive_expression]: #63
[#655 array_type_specifier]: #93
[#655 binary_and_expression]: #60
[#655 binary_or_expression]: #61
[#655 binary_xor_expression]: #62
[#655 bitwise_expression]: #58
[#655 bool_literal]: #85
[#655 callable]: #74
[#655 decimal_float_literal]: #110
[#655 decimal_int_literal]: #108
[#655 depth_texture_type]: #115
[#655 expression]: #657
[#655 float_literal]: #84
[#655 hex_float_literal]: #111
[#655 hex_int_literal]: #109
[#655 ident]: #73
[#655 int_literal]: #83
[#655 literal]: #75
[#655 mat_prefix]: #81
[#655 multiplicative_expression]: #65
[#655 multisampled_texture_type]: #117
[#655 paren_expression]: #76
[#655 primary_expression]: #72
[#655 relational_expression]: #55
[#655 sampled_texture_type]: #116
[#655 sampler_type]: #114
[#655 shift_expression]: #59
[#655 short_circuit_and_expression]: #57
[#655 short_circuit_or_expression]: #56
[#655 singular_expression]: #66
[#655 storage_texture_type]: #118
[#655 texture_and_sampler_types]: #95
[#655 type_specifier_without_ident]: #79
[#655 unary_expression]: #64
[#655 vec_prefix]: #80
