=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression additive_operator multiplicative_expression
 | multiplicative_expression
additive_operator:
   '+'
 | '-'
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
argument_expression_list:
   '(' expression_comma_list ? ')'
array_type_specifier:
   'array' '<' type_specifier ( ',' element_count_expression )? '>'
assignment_statement:
   '_' '=' expression
 | lhs_expression ( '=' | compound_assignment_operator ) expression
assignment_statement/0.1:
   '='
 | compound_assignment_operator
attrib_end:
   ',' ? ')'
attribute:
   '@' 'align' '(' expression attrib_end
 | '@' 'binding' '(' expression attrib_end
 | '@' 'builtin' '(' builtin_value_name attrib_end
 | '@' 'compute'
 | '@' 'const'
 | '@' 'fragment'
 | '@' 'group' '(' expression attrib_end
 | '@' 'id' '(' expression attrib_end
 | '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end
 | '@' 'interpolate' '(' interpolation_type_name attrib_end
 | '@' 'invariant'
 | '@' 'location' '(' expression attrib_end
 | '@' 'size' '(' expression attrib_end
 | '@' 'vertex'
 | '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression ',' expression attrib_end
 | '@' 'workgroup_size' '(' expression attrib_end
binary_and_expression:
   binary_and_expression '&' unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression '|' unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression '^' unary_expression
 | unary_expression
bitwise_expression:
   binary_and_expression '&' unary_expression
 | binary_or_expression '|' unary_expression
 | binary_xor_expression '^' unary_expression
bool_literal:
   'false'
 | 'true'
break_if_statement:
   'break' 'if' expression ';'
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
call_expression:call_phrase
call_phrase:
   callable argument_expression_list
callable:
   'array'
 | ident
 | mat_prefix
 | type_specifier_without_ident
 | vec_prefix
case_clause:
   'case' case_selectors ':' ? compound_statement
case_selector:
   'default'
 | expression
case_selectors:
   case_selector ( ',' case_selector ) * ? ',' ?
case_selectors/0.1/0/0.0:
   ',' case_selector
component_or_swizzle_specifier:
   '.' member_ident component_or_swizzle_specifier ?
 | '.' swizzle_name component_or_swizzle_specifier ?
 | '[' expression ']' component_or_swizzle_specifier ?
compound_assignment_operator:
   '%='
 | '&='
 | '*='
 | '+='
 | '-='
 | '/='
 | '<<='
 | '>>='
 | '^='
 | '|='
compound_statement:
   '{' statement * ? '}'
continue_statement:'continue'
continuing_compound_statement:
   '{' statement * ? break_if_statement ? '}'
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   '(' lhs_expression ')'
 | ident
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decimal_int_literal:
   /0[iu]?/
 | /[1-9][0-9]*[iu]?/
decrement_statement:
   lhs_expression '--'
default_alone_clause:
   'default' ':' ? compound_statement
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
element_count_expression:
   additive_expression
 | bitwise_expression
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable_directive:
   'enable' extension_name ';'
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression '&&' relational_expression
 | short_circuit_or_expression '||' relational_expression
expression_comma_list:
   expression ( ',' expression ) * ? ',' ?
expression_comma_list/0.1/0/0.0:
   ',' expression
extension_name:'f16'
float_literal:
   decimal_float_literal
 | hex_float_literal
for_header:
   for_init ? ';' expression ? ';' for_update ?
for_init:
   func_call_statement
 | variable_statement
 | variable_updating_statement
for_statement:
   'for' '(' for_header ')' compound_statement
for_update:
   func_call_statement
 | variable_updating_statement
func_call_statement:call_phrase
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident '(' param_list ? ')' ( '->' attribute * ? type_specifier )?
global_constant_decl:
   'const' optionally_typed_ident '=' expression
 | attribute * ? 'override' optionally_typed_ident ( '=' expression )?
global_decl:
   ';'
 | function_decl
 | global_constant_decl ';'
 | global_variable_decl ';'
 | static_assert_statement ';'
 | struct_decl
 | type_alias_decl ';'
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( '=' expression )?
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
hex_int_literal:/0[xX][0-9a-fA-F]+[iu]?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression '++'
int_literal:
   decimal_int_literal
 | hex_int_literal
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
lhs_expression:
   '&' lhs_expression
 | '*' lhs_expression
 | core_lhs_expression component_or_swizzle_specifier ?
literal:
   bool_literal
 | float_literal
 | int_literal
loop_statement:
   'loop' '{' statement * ? continuing_statement ? '}'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
multiplicative_expression:
   multiplicative_expression multiplicative_operator unary_expression
 | unary_expression
multiplicative_operator:
   '%'
 | '*'
 | '/'
multisampled_texture_type:'texture_multisampled_2d'
optionally_typed_ident:
   ident ( ':' type_specifier )?
param:
   attribute * ? ident ':' type_specifier
param_list:
   param ( ',' param ) * ? ',' ?
param_list/0.1/0/0.0:
   ',' param
paren_expression:
   '(' expression ')'
primary_expression:
   'bitcast' '<' type_specifier '>' paren_expression
 | call_expression
 | ident
 | literal
 | paren_expression
relational_expression:
   shift_expression
 | shift_expression '!=' shift_expression
 | shift_expression '<' shift_expression
 | shift_expression '<=' shift_expression
 | shift_expression '==' shift_expression
 | shift_expression '>' shift_expression
 | shift_expression '>=' shift_expression
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler_type:
   'sampler'
 | 'sampler_comparison'
shift_expression:
   additive_expression
 | unary_expression '<<' unary_expression
 | unary_expression '>>' unary_expression
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression '&&' relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression '||' relational_expression
singular_expression:
   primary_expression component_or_swizzle_specifier ?
statement:
   ';'
 | 'discard' ';'
 | break_statement ';'
 | compound_statement
 | continue_statement ';'
 | for_statement
 | func_call_statement ';'
 | if_statement
 | loop_statement
 | return_statement ';'
 | static_assert_statement ';'
 | switch_statement
 | variable_statement ';'
 | variable_updating_statement ';'
 | while_statement
static_assert_statement:
   'static_assert' expression
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct_body_decl:
   '{' struct_member ( ',' struct_member ) * ? ',' ? '}'
struct_body_decl/0.2/0/0.0:
   ',' struct_member
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident ':' type_specifier
switch_body:
   case_clause
 | default_alone_clause
switch_statement:
   'switch' expression '{' ( switch_body * ) '}'
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type '<' type_specifier '>'
 | sampled_texture_type '<' type_specifier '>'
 | sampler_type
 | storage_texture_type '<' texel_format ',' access_mode '>'
translation_unit:
   global_directive * ? global_decl * ?
type_alias_decl:
   'type' ident '=' type_specifier
type_specifier:
   ident
 | type_specifier_without_ident
type_specifier_without_ident:
   'atomic' '<' type_specifier '>'
 | 'bool'
 | 'f16'
 | 'f32'
 | 'i32'
 | 'ptr' '<' address_space ',' type_specifier ( ',' access_mode )? '>'
 | 'u32'
 | array_type_specifier
 | mat_prefix '<' type_specifier '>'
 | texture_and_sampler_types
 | vec_prefix '<' type_specifier '>'
unary_expression:
   '!' unary_expression
 | '&' unary_expression
 | '*' unary_expression
 | '-' unary_expression
 | '~' unary_expression
 | singular_expression
variable_decl:
   'var' variable_qualifier ? optionally_typed_ident
variable_qualifier:
   '<' address_space ( ',' access_mode )? '>'
variable_statement:
   'const' optionally_typed_ident '=' expression
 | 'let' optionally_typed_ident '=' expression
 | variable_decl
 | variable_decl '=' expression
variable_updating_statement:
   assignment_statement
 | decrement_statement
 | increment_statement
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while_statement:
   'while' expression compound_statement
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {EndOfText}
global_directive -> · 'enable' extension_name ';' : {EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {EndOfText}

#5
global_directive -> 'enable' · extension_name ';' : {EndOfText}
extension_name -> · 'f16' : {}

#6
global_directive -> 'enable' extension_name · ';' : {EndOfText}

#7
extension_name -> 'f16' · : {}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl -> · function_decl/0.0 function_header compound_statement : {EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl -> · 'const' optionally_typed_ident '=' expression : {}
global_constant_decl -> · global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 : {}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_decl -> · ';' : {EndOfText}
global_decl -> · function_decl : {EndOfText}
global_decl -> · global_constant_decl ';' : {EndOfText}
global_decl -> · global_variable_decl ';' : {EndOfText}
global_decl -> · static_assert_statement ';' : {EndOfText}
global_decl -> · struct_decl : {EndOfText}
global_decl -> · type_alias_decl ';' : {EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}
static_assert_statement -> · 'static_assert' expression : {}
struct_decl -> · 'struct' ident struct_body_decl : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident '=' type_specifier : {}

#12
global_decl -> ';' · : {EndOfText}

#13
global_decl -> global_variable_decl · ';' : {EndOfText}

#14
global_decl -> global_constant_decl · ';' : {EndOfText}

#15
global_decl -> type_alias_decl · ';' : {EndOfText}

#16
global_decl -> struct_decl · : {EndOfText}

#17
global_decl -> function_decl · : {EndOfText}

#18
global_decl -> static_assert_statement · ';' : {EndOfText}

#19
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}

#20
global_constant_decl -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#21
global_constant_decl -> global_constant_decl/1.0 · 'override' optionally_typed_ident global_constant_decl/1.3 : {}

#22
type_alias_decl -> 'type' · ident '=' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#23
struct_decl -> 'struct' · ident struct_body_decl : {EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#24
function_decl -> function_decl/0.0 · function_header compound_statement : {EndOfText}
function_header -> · 'fn' ident '(' function_header/0.3 ')' function_header/0.5 : {}

#25
static_assert_statement -> 'static_assert' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#26
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {}

#27
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {}

#28
function_decl/0.0 -> function_decl/0.0/0 · : {}

#29
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {}

#30
attribute -> '@' · 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' · 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#31
attribute -> '@' 'align' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#32
attribute -> '@' 'binding' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#33
attribute -> '@' 'builtin' · '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}

#34
attribute -> '@' 'const' · : {'f16' 'texture_multisampled_2d'}

#35
attribute -> '@' 'group' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#36
attribute -> '@' 'id' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#37
attribute -> '@' 'interpolate' · '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' · '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}

#38
attribute -> '@' 'invariant' · : {'f16' 'texture_multisampled_2d'}

#39
attribute -> '@' 'location' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#40
attribute -> '@' 'size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#41
attribute -> '@' 'workgroup_size' · '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' · '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}

#42
attribute -> '@' 'vertex' · : {'f16' 'texture_multisampled_2d'}

#43
attribute -> '@' 'fragment' · : {'f16' 'texture_multisampled_2d'}

#44
attribute -> '@' 'compute' · : {'f16' 'texture_multisampled_2d'}

#45
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {}

#46
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {}

#47
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {}

#48
static_assert_statement -> 'static_assert' expression · : {}

#49
expression -> relational_expression · : {}
short_circuit_and_expression -> relational_expression · : {}
short_circuit_or_expression -> relational_expression · : {}

#50
expression -> short_circuit_or_expression · '||' relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression · '||' relational_expression : {}

#51
expression -> short_circuit_and_expression · '&&' relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression · '&&' relational_expression : {}

#52
expression -> bitwise_expression · : {}

#53
relational_expression -> shift_expression · '!=' shift_expression : {}
relational_expression -> shift_expression · '<' shift_expression : {}
relational_expression -> shift_expression · '<=' shift_expression : {}
relational_expression -> shift_expression · '==' shift_expression : {}
relational_expression -> shift_expression · '>' shift_expression : {}
relational_expression -> shift_expression · '>=' shift_expression : {}
relational_expression -> shift_expression · : {}

#54
binary_and_expression -> binary_and_expression · '&' unary_expression : {}
bitwise_expression -> binary_and_expression · '&' unary_expression : {}

#55
binary_or_expression -> binary_or_expression · '|' unary_expression : {}
bitwise_expression -> binary_or_expression · '|' unary_expression : {}

#56
binary_xor_expression -> binary_xor_expression · '^' unary_expression : {}
bitwise_expression -> binary_xor_expression · '^' unary_expression : {}

#57
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
shift_expression -> additive_expression · : {}
additive_operator -> · '+' : {/0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {/0[xX][0-9a-fA-F]+[iu]?/}

#58
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#59
additive_expression -> multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {/0[xX][0-9a-fA-F]+[iu]?/}

#60
unary_expression -> singular_expression · : {}

#61
unary_expression -> '-' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#62
unary_expression -> '!' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#63
unary_expression -> '~' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#64
unary_expression -> '*' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#65
unary_expression -> '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#66
singular_expression -> primary_expression · singular_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
singular_expression/0.1 -> · component_or_swizzle_specifier : {}

#67
callable -> ident · : {}
primary_expression -> ident · : {}

#68
primary_expression -> call_expression · : {}

#69
primary_expression -> literal · : {}

#70
primary_expression -> paren_expression · : {}

#71
primary_expression -> 'bitcast' · '<' type_specifier '>' paren_expression : {}

#72
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#73
call_expression -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#74
literal -> int_literal · : {}

#75
literal -> float_literal · : {}

#76
literal -> bool_literal · : {}

#77
paren_expression -> '(' · expression ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#78
callable -> type_specifier_without_ident · : {}

#79
callable -> vec_prefix · : {}
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#80
callable -> mat_prefix · : {}
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#81
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}
callable -> 'array' · : {}

#82
int_literal -> decimal_int_literal · : {}

#83
int_literal -> hex_int_literal · : {}

#84
float_literal -> decimal_float_literal · : {}

#85
float_literal -> hex_float_literal · : {}

#86
bool_literal -> 'true' · : {}

#87
bool_literal -> 'false' · : {}

#88
type_specifier_without_ident -> 'bool' · : {}

#89
type_specifier_without_ident -> 'f32' · : {}

#90
type_specifier_without_ident -> 'f16' · : {}

#91
type_specifier_without_ident -> 'i32' · : {}

#92
type_specifier_without_ident -> 'u32' · : {}

#93
type_specifier_without_ident -> 'ptr' · '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#94
type_specifier_without_ident -> array_type_specifier · : {}

#95
type_specifier_without_ident -> 'atomic' · '<' type_specifier '>' : {}

#96
type_specifier_without_ident -> texture_and_sampler_types · : {}

#97
vec_prefix -> 'vec2' · : {}

#98
vec_prefix -> 'vec3' · : {}

#99
vec_prefix -> 'vec4' · : {}

#100
mat_prefix -> 'mat2x2' · : {}

#101
mat_prefix -> 'mat2x3' · : {}

#102
mat_prefix -> 'mat2x4' · : {}

#103
mat_prefix -> 'mat3x2' · : {}

#104
mat_prefix -> 'mat3x3' · : {}

#105
mat_prefix -> 'mat3x4' · : {}

#106
mat_prefix -> 'mat4x2' · : {}

#107
mat_prefix -> 'mat4x3' · : {}

#108
mat_prefix -> 'mat4x4' · : {}

#109
decimal_int_literal -> /0[iu]?/ · : {}

#110
decimal_int_literal -> /[1-9][0-9]*[iu]?/ · : {}

#111
hex_int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {}

#112
decimal_float_literal -> /0[fh]/ · : {}

#113
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {}

#114
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {}

#115
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {}

#116
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {}

#117
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {}

#118
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {}

#119
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {}

#120
texture_and_sampler_types -> sampler_type · : {}

#121
texture_and_sampler_types -> depth_texture_type · : {}

#122
texture_and_sampler_types -> sampled_texture_type · '<' type_specifier '>' : {}

#123
texture_and_sampler_types -> multisampled_texture_type · '<' type_specifier '>' : {}

#124
texture_and_sampler_types -> storage_texture_type · '<' texel_format ',' access_mode '>' : {}

#125
sampler_type -> 'sampler' · : {}

#126
sampler_type -> 'sampler_comparison' · : {}

#127
depth_texture_type -> 'texture_depth_2d' · : {}

#128
depth_texture_type -> 'texture_depth_2d_array' · : {}

#129
depth_texture_type -> 'texture_depth_cube' · : {}

#130
depth_texture_type -> 'texture_depth_cube_array' · : {}

#131
depth_texture_type -> 'texture_depth_multisampled_2d' · : {}

#132
sampled_texture_type -> 'texture_1d' · : {}

#133
sampled_texture_type -> 'texture_2d' · : {}

#134
sampled_texture_type -> 'texture_2d_array' · : {}

#135
sampled_texture_type -> 'texture_3d' · : {}

#136
sampled_texture_type -> 'texture_cube' · : {}

#137
sampled_texture_type -> 'texture_cube_array' · : {}

#138
multisampled_texture_type -> 'texture_multisampled_2d' · : {}

#139
storage_texture_type -> 'texture_storage_1d' · : {}

#140
storage_texture_type -> 'texture_storage_2d' · : {}

#141
storage_texture_type -> 'texture_storage_2d_array' · : {}

#142
storage_texture_type -> 'texture_storage_3d' · : {}

#143
function_decl -> function_decl/0.0 function_header · compound_statement : {EndOfText}
compound_statement -> · '{' compound_statement/0.1 '}' : {EndOfText}

#144
function_header -> 'fn' · ident '(' function_header/0.3 ')' function_header/0.5 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#145
struct_decl -> 'struct' ident · struct_body_decl : {EndOfText}
struct_body_decl -> · '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}

#146
type_alias_decl -> 'type' ident · '=' type_specifier : {}

#147
global_constant_decl -> global_constant_decl/1.0 'override' · optionally_typed_ident global_constant_decl/1.3 : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#148
global_constant_decl -> 'const' optionally_typed_ident · '=' expression : {}

#149
optionally_typed_ident -> ident · optionally_typed_ident/0.1 : {}
optionally_typed_ident/0.1 -> · ':' type_specifier : {}

#150
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {}
global_variable_decl/0.2 -> · '=' expression : {}

#151
variable_decl -> 'var' · variable_decl/0.1 optionally_typed_ident : {}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · '<' address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#152
global_decl -> static_assert_statement ';' · : {EndOfText}

#153
global_decl -> type_alias_decl ';' · : {EndOfText}

#154
global_decl -> global_constant_decl ';' · : {EndOfText}

#155
global_decl -> global_variable_decl ';' · : {EndOfText}

#156
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#157
global_directive -> 'enable' extension_name ';' · : {EndOfText}

#158
variable_decl -> 'var' variable_decl/0.1 · optionally_typed_ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#159
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#160
variable_qualifier -> '<' · address_space variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#161
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {}

#162
global_variable_decl/0.2 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#163
optionally_typed_ident -> ident optionally_typed_ident/0.1 · : {}

#164
optionally_typed_ident/0.1 -> ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#165
global_constant_decl -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#166
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident · global_constant_decl/1.3 : {}
global_constant_decl/1.3 -> · '=' expression : {}

#167
type_alias_decl -> 'type' ident '=' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#168
struct_decl -> 'struct' ident struct_body_decl · : {EndOfText}

#169
struct_body_decl -> '{' · struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#170
function_header -> 'fn' ident · '(' function_header/0.3 ')' function_header/0.5 : {}

#171
function_decl -> function_decl/0.0 function_header compound_statement · : {EndOfText}

#172
compound_statement -> '{' · compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.1 -> · compound_statement/0.1/0 : {}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#173
texture_and_sampler_types -> storage_texture_type '<' · texel_format ',' access_mode '>' : {}
texel_format -> · 'r32float' : {}
texel_format -> · 'r32sint' : {}
texel_format -> · 'r32uint' : {}
texel_format -> · 'rg32float' : {}
texel_format -> · 'rg32sint' : {}
texel_format -> · 'rg32uint' : {}
texel_format -> · 'rgba16float' : {}
texel_format -> · 'rgba16sint' : {}
texel_format -> · 'rgba16uint' : {}
texel_format -> · 'rgba32float' : {}
texel_format -> · 'rgba32sint' : {}
texel_format -> · 'rgba32uint' : {}
texel_format -> · 'rgba8sint' : {}
texel_format -> · 'rgba8snorm' : {}
texel_format -> · 'rgba8uint' : {}
texel_format -> · 'rgba8unorm' : {}

#174
texture_and_sampler_types -> multisampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#175
texture_and_sampler_types -> sampled_texture_type '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#176
type_specifier_without_ident -> 'atomic' '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#177
type_specifier_without_ident -> 'ptr' '<' · address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
address_space -> · 'function' : {}
address_space -> · 'private' : {}
address_space -> · 'storage' : {}
address_space -> · 'uniform' : {}
address_space -> · 'workgroup' : {}

#178
array_type_specifier -> 'array' '<' · type_specifier array_type_specifier/0.3 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#179
type_specifier_without_ident -> mat_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#180
type_specifier_without_ident -> vec_prefix '<' · type_specifier '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#181
paren_expression -> '(' expression · ')' : {}

#182
call_expression -> callable argument_expression_list · : {}

#183
argument_expression_list -> '(' · argument_expression_list/0.1 ')' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
argument_expression_list/0.1 -> · expression_comma_list : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
expression_comma_list -> · expression expression_comma_list/0.1 expression_comma_list/0.2 : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#184
primary_expression -> 'bitcast' '<' · type_specifier '>' paren_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#185
singular_expression -> primary_expression singular_expression/0.1 · : {}

#186
singular_expression/0.1 -> component_or_swizzle_specifier · : {}

#187
component_or_swizzle_specifier -> '[' · expression ']' component_or_swizzle_specifier/0.3 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#188
component_or_swizzle_specifier -> '.' · member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> '.' · swizzle_name component_or_swizzle_specifier/2.2 : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
swizzle_name -> · '/[rgba]/' : {}
swizzle_name -> · '/[rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {}
swizzle_name -> · '/[xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {}

#189
unary_expression -> '&' unary_expression · : {}

#190
unary_expression -> '*' unary_expression · : {}

#191
unary_expression -> '~' unary_expression · : {}

#192
unary_expression -> '!' unary_expression · : {}

#193
unary_expression -> '-' unary_expression · : {}

#194
multiplicative_expression -> multiplicative_expression multiplicative_operator · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#195
multiplicative_operator -> '*' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#196
multiplicative_operator -> '/' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#197
multiplicative_operator -> '%' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#198
shift_expression -> unary_expression '<<' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#199
shift_expression -> unary_expression '>>' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#200
additive_expression -> additive_expression additive_operator · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#201
additive_operator -> '+' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#202
additive_operator -> '-' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#203
binary_xor_expression -> binary_xor_expression '^' · unary_expression : {}
bitwise_expression -> binary_xor_expression '^' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#204
binary_or_expression -> binary_or_expression '|' · unary_expression : {}
bitwise_expression -> binary_or_expression '|' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#205
binary_and_expression -> binary_and_expression '&' · unary_expression : {}
bitwise_expression -> binary_and_expression '&' · unary_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#206
relational_expression -> shift_expression '<' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#207
relational_expression -> shift_expression '>' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#208
relational_expression -> shift_expression '<=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#209
relational_expression -> shift_expression '>=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#210
relational_expression -> shift_expression '==' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#211
relational_expression -> shift_expression '!=' · shift_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#212
expression -> short_circuit_and_expression '&&' · relational_expression : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#213
expression -> short_circuit_or_expression '||' · relational_expression : {}
short_circuit_or_expression -> short_circuit_or_expression '||' · relational_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#214
attribute -> '@' 'workgroup_size' '(' · expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#215
attribute -> '@' 'size' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#216
attribute -> '@' 'location' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#217
attribute -> '@' 'interpolate' '(' · interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' · interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_type_name -> · 'flat' : {}
interpolation_type_name -> · 'linear' : {}
interpolation_type_name -> · 'perspective' : {}

#218
attribute -> '@' 'id' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#219
attribute -> '@' 'group' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#220
attribute -> '@' 'builtin' '(' · builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
builtin_value_name -> · 'frag_depth' : {}
builtin_value_name -> · 'front_facing' : {}
builtin_value_name -> · 'global_invocation_id' : {}
builtin_value_name -> · 'instance_index' : {}
builtin_value_name -> · 'local_invocation_id' : {}
builtin_value_name -> · 'local_invocation_index' : {}
builtin_value_name -> · 'num_workgroups' : {}
builtin_value_name -> · 'position' : {}
builtin_value_name -> · 'sample_index' : {}
builtin_value_name -> · 'sample_mask' : {}
builtin_value_name -> · 'vertex_index' : {}
builtin_value_name -> · 'workgroup_id' : {}

#221
attribute -> '@' 'binding' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#222
attribute -> '@' 'align' '(' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#223
attribute -> '@' 'align' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#224
attribute -> '@' 'binding' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#225
attribute -> '@' 'builtin' '(' builtin_value_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#226
builtin_value_name -> 'vertex_index' · : {}

#227
builtin_value_name -> 'instance_index' · : {}

#228
builtin_value_name -> 'position' · : {}

#229
builtin_value_name -> 'front_facing' · : {}

#230
builtin_value_name -> 'frag_depth' · : {}

#231
builtin_value_name -> 'local_invocation_id' · : {}

#232
builtin_value_name -> 'local_invocation_index' · : {}

#233
builtin_value_name -> 'global_invocation_id' · : {}

#234
builtin_value_name -> 'workgroup_id' · : {}

#235
builtin_value_name -> 'num_workgroups' · : {}

#236
builtin_value_name -> 'sample_index' · : {}

#237
builtin_value_name -> 'sample_mask' · : {}

#238
attribute -> '@' 'group' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#239
attribute -> '@' 'id' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#240
attribute -> '@' 'interpolate' '(' interpolation_type_name · ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'interpolate' '(' interpolation_type_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#241
interpolation_type_name -> 'perspective' · : {}

#242
interpolation_type_name -> 'linear' · : {}

#243
interpolation_type_name -> 'flat' · : {}

#244
attribute -> '@' 'location' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#245
attribute -> '@' 'size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#246
attribute -> '@' 'workgroup_size' '(' expression · ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#247
expression -> short_circuit_or_expression '||' relational_expression · : {}
short_circuit_or_expression -> short_circuit_or_expression '||' relational_expression · : {}

#248
multiplicative_expression -> unary_expression · : {}
shift_expression -> unary_expression · '<<' unary_expression : {}
shift_expression -> unary_expression · '>>' unary_expression : {}

#249
expression -> short_circuit_and_expression '&&' relational_expression · : {}
short_circuit_and_expression -> short_circuit_and_expression '&&' relational_expression · : {}

#250
relational_expression -> shift_expression '!=' shift_expression · : {}

#251
relational_expression -> shift_expression '==' shift_expression · : {}

#252
relational_expression -> shift_expression '>=' shift_expression · : {}

#253
relational_expression -> shift_expression '<=' shift_expression · : {}

#254
relational_expression -> shift_expression '>' shift_expression · : {}

#255
relational_expression -> shift_expression '<' shift_expression · : {}

#256
binary_and_expression -> binary_and_expression '&' unary_expression · : {}
bitwise_expression -> binary_and_expression '&' unary_expression · : {}

#257
binary_or_expression -> binary_or_expression '|' unary_expression · : {}
bitwise_expression -> binary_or_expression '|' unary_expression · : {}

#258
binary_xor_expression -> binary_xor_expression '^' unary_expression · : {}
bitwise_expression -> binary_xor_expression '^' unary_expression · : {}

#259
additive_expression -> additive_expression additive_operator multiplicative_expression · : {}
multiplicative_expression -> multiplicative_expression · multiplicative_operator unary_expression : {}
multiplicative_operator -> · '%' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '*' : {/0[xX][0-9a-fA-F]+[iu]?/}
multiplicative_operator -> · '/' : {/0[xX][0-9a-fA-F]+[iu]?/}

#260
multiplicative_expression -> unary_expression · : {}

#261
shift_expression -> unary_expression '>>' unary_expression · : {}

#262
shift_expression -> unary_expression '<<' unary_expression · : {}

#263
multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression · : {}

#264
component_or_swizzle_specifier -> '.' member_ident · component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/1.2 -> · component_or_swizzle_specifier : {}

#265
component_or_swizzle_specifier -> '.' swizzle_name · component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/2.2 -> · component_or_swizzle_specifier : {}

#266
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {}

#267
swizzle_name -> '/[rgba]/' · : {}

#268
swizzle_name -> '/[rgba][rgba]/' · : {}

#269
swizzle_name -> '/[rgba][rgba][rgba]/' · : {}

#270
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {}

#271
swizzle_name -> '/[xyzw]/' · : {}

#272
swizzle_name -> '/[xyzw][xyzw]/' · : {}

#273
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {}

#274
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {}

#275
component_or_swizzle_specifier -> '[' expression · ']' component_or_swizzle_specifier/0.3 : {}

#276
primary_expression -> 'bitcast' '<' type_specifier · '>' paren_expression : {}

#277
type_specifier -> ident · : {}

#278
type_specifier -> type_specifier_without_ident · : {}

#279
type_specifier_without_ident -> vec_prefix · '<' type_specifier '>' : {}

#280
type_specifier_without_ident -> mat_prefix · '<' type_specifier '>' : {}

#281
array_type_specifier -> 'array' · '<' type_specifier array_type_specifier/0.3 '>' : {}

#282
argument_expression_list -> '(' argument_expression_list/0.1 · ')' : {}

#283
argument_expression_list/0.1 -> expression_comma_list · : {}

#284
expression_comma_list -> expression · expression_comma_list/0.1 expression_comma_list/0.2 : {}
expression_comma_list/0.1 -> · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#285
paren_expression -> '(' expression ')' · : {}

#286
type_specifier_without_ident -> vec_prefix '<' type_specifier · '>' : {}

#287
type_specifier_without_ident -> mat_prefix '<' type_specifier · '>' : {}

#288
array_type_specifier -> 'array' '<' type_specifier · array_type_specifier/0.3 '>' : {}
array_type_specifier/0.3 -> · ',' element_count_expression : {}

#289
type_specifier_without_ident -> 'ptr' '<' address_space · ',' type_specifier type_specifier_without_ident/7.5 '>' : {}

#290
address_space -> 'function' · : {}

#291
address_space -> 'private' · : {}

#292
address_space -> 'workgroup' · : {}

#293
address_space -> 'uniform' · : {}

#294
address_space -> 'storage' · : {}

#295
type_specifier_without_ident -> 'atomic' '<' type_specifier · '>' : {}

#296
texture_and_sampler_types -> sampled_texture_type '<' type_specifier · '>' : {}

#297
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier · '>' : {}

#298
texture_and_sampler_types -> storage_texture_type '<' texel_format · ',' access_mode '>' : {}

#299
texel_format -> 'rgba8unorm' · : {}

#300
texel_format -> 'rgba8snorm' · : {}

#301
texel_format -> 'rgba8uint' · : {}

#302
texel_format -> 'rgba8sint' · : {}

#303
texel_format -> 'rgba16uint' · : {}

#304
texel_format -> 'rgba16sint' · : {}

#305
texel_format -> 'rgba16float' · : {}

#306
texel_format -> 'r32uint' · : {}

#307
texel_format -> 'r32sint' · : {}

#308
texel_format -> 'r32float' · : {}

#309
texel_format -> 'rg32uint' · : {}

#310
texel_format -> 'rg32sint' · : {}

#311
texel_format -> 'rg32float' · : {}

#312
texel_format -> 'rgba32uint' · : {}

#313
texel_format -> 'rgba32sint' · : {}

#314
texel_format -> 'rgba32float' · : {}

#315
compound_statement -> '{' compound_statement/0.1 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#316
compound_statement/0.1 -> compound_statement/0.1/0 · : {}

#317
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#318
statement -> ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#319
statement -> return_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#320
statement -> if_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#321
statement -> switch_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#322
statement -> loop_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#323
statement -> for_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#324
statement -> while_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#325
statement -> func_call_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#326
statement -> variable_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#327
statement -> break_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#328
statement -> continue_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#329
statement -> 'discard' · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#330
statement -> variable_updating_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#331
statement -> compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#332
statement -> static_assert_statement · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#333
return_statement -> 'return' · return_statement/0.1 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
return_statement/0.1 -> · expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#334
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.1 -> · if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#335
switch_statement -> 'switch' · expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#336
loop_statement -> 'loop' · '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#337
for_statement -> 'for' · '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#338
while_statement -> 'while' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#339
func_call_statement -> callable · argument_expression_list : {}
argument_expression_list -> · '(' argument_expression_list/0.1 ')' : {}

#340
variable_statement -> variable_decl · '=' expression : {}
variable_statement -> variable_decl · : {}

#341
variable_statement -> 'let' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#342
variable_statement -> 'const' · optionally_typed_ident '=' expression : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
optionally_typed_ident -> · ident optionally_typed_ident/0.1 : {}

#343
break_statement -> 'break' · : {}

#344
continue_statement -> 'continue' · : {}

#345
variable_updating_statement -> assignment_statement · : {}

#346
variable_updating_statement -> increment_statement · : {}

#347
variable_updating_statement -> decrement_statement · : {}

#348
if_clause -> 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#349
callable -> ident · : {}
core_lhs_expression -> ident · : {}

#350
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {}
decrement_statement -> lhs_expression · '--' : {}
increment_statement -> lhs_expression · '++' : {}
assignment_statement/0.1 -> · '=' : {/0[xX][0-9a-fA-F]+[iu]?/}
assignment_statement/0.1 -> · compound_assignment_operator : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '%=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '&=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '*=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '+=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '-=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '/=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '<<=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '>>=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '^=' : {/0[xX][0-9a-fA-F]+[iu]?/}
compound_assignment_operator -> · '|=' : {/0[xX][0-9a-fA-F]+[iu]?/}

#351
assignment_statement -> '_' · '=' expression : {}

#352
lhs_expression -> core_lhs_expression · lhs_expression/0.1 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
lhs_expression/0.1 -> · component_or_swizzle_specifier : {}

#353
lhs_expression -> '*' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#354
lhs_expression -> '&' · lhs_expression : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#355
core_lhs_expression -> '(' · lhs_expression ')' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}

#356
function_header -> 'fn' ident '(' · function_header/0.3 ')' function_header/0.5 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
function_header/0.3 -> · param_list : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}
param_list -> · param param_list/0.1 param_list/0.2 : {}

#357
struct_body_decl -> '{' struct_member · struct_body_decl/0.2 struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.2 -> · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#358
struct_member -> struct_member/0.0 · member_ident ':' type_specifier : {}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#359
struct_member/0.0 -> struct_member/0.0/0 · : {}

#360
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#361
type_alias_decl -> 'type' ident '=' type_specifier · : {}

#362
global_constant_decl -> global_constant_decl/1.0 'override' optionally_typed_ident global_constant_decl/1.3 · : {}

#363
global_constant_decl/1.3 -> '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#364
global_constant_decl -> 'const' optionally_typed_ident '=' expression · : {}

#365
optionally_typed_ident/0.1 -> ':' type_specifier · : {}

#366
global_variable_decl/0.2 -> '=' expression · : {}

#367
variable_qualifier -> '<' address_space · variable_qualifier/0.2 '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier/0.2 -> · ',' access_mode : {}

#368
variable_decl -> 'var' variable_decl/0.1 optionally_typed_ident · : {}

#369
variable_qualifier -> '<' address_space variable_qualifier/0.2 · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#370
variable_qualifier/0.2 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#371
global_constant_decl/1.3 -> '=' expression · : {}

#372
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#373
struct_member -> struct_member/0.0 member_ident · ':' type_specifier : {}

#374
struct_body_decl -> '{' struct_member struct_body_decl/0.2 · struct_body_decl/0.3 '}' : {EndOfText}
struct_body_decl/0.3 -> · ',' : {}

#375
struct_body_decl/0.2 -> struct_body_decl/0.2/0 · : {}

#376
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 · struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0 -> · struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 : {}
struct_body_decl/0.2/0/0.0 -> · ',' struct_member : {}

#377
struct_body_decl/0.2/0/0.0 -> ',' · struct_member : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
struct_member -> · struct_member/0.0 member_ident ':' type_specifier : {}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#378
function_header -> 'fn' ident '(' function_header/0.3 · ')' function_header/0.5 : {}

#379
function_header/0.3 -> param_list · : {}

#380
param_list -> param · param_list/0.1 param_list/0.2 : {}
param_list/0.1 -> · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#381
param -> param/0.0 · ident ':' type_specifier : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}

#382
param/0.0 -> param/0.0/0 · : {}

#383
param/0.0/0 -> attribute · param/0.0/0 : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#384
core_lhs_expression -> '(' lhs_expression · ')' : {}

#385
core_lhs_expression -> ident · : {}

#386
lhs_expression -> '&' lhs_expression · : {}

#387
lhs_expression -> '*' lhs_expression · : {}

#388
lhs_expression -> core_lhs_expression lhs_expression/0.1 · : {}

#389
lhs_expression/0.1 -> component_or_swizzle_specifier · : {}

#390
assignment_statement -> '_' '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#391
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#392
increment_statement -> lhs_expression '++' · : {}

#393
decrement_statement -> lhs_expression '--' · : {}

#394
assignment_statement/0.1 -> '=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#395
assignment_statement/0.1 -> compound_assignment_operator · : {/0[xX][0-9a-fA-F]+[iu]?/}

#396
compound_assignment_operator -> '+=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#397
compound_assignment_operator -> '-=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#398
compound_assignment_operator -> '*=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#399
compound_assignment_operator -> '/=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#400
compound_assignment_operator -> '%=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#401
compound_assignment_operator -> '&=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#402
compound_assignment_operator -> '|=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#403
compound_assignment_operator -> '^=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#404
compound_assignment_operator -> '>>=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#405
compound_assignment_operator -> '<<=' · : {/0[xX][0-9a-fA-F]+[iu]?/}

#406
if_clause -> 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#407
variable_statement -> 'const' optionally_typed_ident · '=' expression : {}

#408
variable_statement -> 'let' optionally_typed_ident · '=' expression : {}

#409
variable_statement -> variable_decl '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#410
func_call_statement -> callable argument_expression_list · : {}

#411
while_statement -> 'while' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#412
for_statement -> 'for' '(' · for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_header -> · for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 : {}
for_header/0.0 -> · for_init : {}
for_init -> · func_call_statement : {}
for_init -> · variable_statement : {}
for_init -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#413
loop_statement -> 'loop' '{' · loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.2 -> · loop_statement/0.2/0 : {}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#414
switch_statement -> 'switch' expression · '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#415
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_clause -> · 'else' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.2 -> · else_clause : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#416
if_statement/0.1 -> if_statement/0.1/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#417
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
else_if_clause -> · 'else' 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#418
else_if_clause -> 'else' · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#419
return_statement -> 'return' return_statement/0.1 · : {}

#420
return_statement/0.1 -> expression · : {}

#421
statement -> static_assert_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#422
statement -> variable_updating_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#423
statement -> 'discard' ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#424
statement -> continue_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#425
statement -> break_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#426
statement -> variable_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#427
statement -> func_call_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#428
statement -> return_statement ';' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#429
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {}

#430
compound_statement -> '{' compound_statement/0.1 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d' EndOfText}

#431
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' · access_mode '>' : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#432
texture_and_sampler_types -> multisampled_texture_type '<' type_specifier '>' · : {}

#433
texture_and_sampler_types -> sampled_texture_type '<' type_specifier '>' · : {}

#434
type_specifier_without_ident -> 'atomic' '<' type_specifier '>' · : {}

#435
type_specifier_without_ident -> 'ptr' '<' address_space ',' · type_specifier type_specifier_without_ident/7.5 '>' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#436
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 · '>' : {}

#437
array_type_specifier/0.3 -> ',' · element_count_expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
element_count_expression -> · additive_expression : {}
element_count_expression -> · bitwise_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#438
type_specifier_without_ident -> mat_prefix '<' type_specifier '>' · : {}

#439
type_specifier_without_ident -> vec_prefix '<' type_specifier '>' · : {}

#440
expression_comma_list -> expression expression_comma_list/0.1 · expression_comma_list/0.2 : {}
expression_comma_list/0.2 -> · ',' : {}

#441
expression_comma_list/0.1 -> expression_comma_list/0.1/0 · : {}

#442
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 · expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0 -> · expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 : {}
expression_comma_list/0.1/0/0.0 -> · ',' expression : {}

#443
expression_comma_list/0.1/0/0.0 -> ',' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#444
argument_expression_list -> '(' argument_expression_list/0.1 ')' · : {}

#445
primary_expression -> 'bitcast' '<' type_specifier '>' · paren_expression : {}
paren_expression -> · '(' expression ')' : {}

#446
component_or_swizzle_specifier -> '[' expression ']' · component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier -> · '.' member_ident component_or_swizzle_specifier/1.2 : {}
component_or_swizzle_specifier -> · '.' swizzle_name component_or_swizzle_specifier/2.2 : {}
component_or_swizzle_specifier -> · '[' expression ']' component_or_swizzle_specifier/0.3 : {}
component_or_swizzle_specifier/0.3 -> · component_or_swizzle_specifier : {}

#447
component_or_swizzle_specifier -> '.' swizzle_name component_or_swizzle_specifier/2.2 · : {}

#448
component_or_swizzle_specifier/2.2 -> component_or_swizzle_specifier · : {}

#449
component_or_swizzle_specifier -> '.' member_ident component_or_swizzle_specifier/1.2 · : {}

#450
component_or_swizzle_specifier/1.2 -> component_or_swizzle_specifier · : {}

#451
attribute -> '@' 'workgroup_size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#452
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#453
attrib_end -> attrib_end/0.0 · ')' : {'f16' 'texture_multisampled_2d'}

#454
attribute -> '@' 'size' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#455
attrib_end/0.0 -> ',' · : {}

#456
attribute -> '@' 'location' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#457
attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#458
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' · interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
interpolation_sample_name -> · 'center' : {}
interpolation_sample_name -> · 'centroid' : {}
interpolation_sample_name -> · 'sample' : {}

#459
attribute -> '@' 'id' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#460
attribute -> '@' 'group' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#461
attribute -> '@' 'builtin' '(' builtin_value_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#462
attribute -> '@' 'binding' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#463
attribute -> '@' 'align' '(' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#464
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#465
interpolation_sample_name -> 'center' · : {}

#466
interpolation_sample_name -> 'centroid' · : {}

#467
interpolation_sample_name -> 'sample' · : {}

#468
attrib_end -> attrib_end/0.0 ')' · : {'f16' 'texture_multisampled_2d'}

#469
attribute -> '@' 'workgroup_size' '(' expression ',' expression · ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> '@' 'workgroup_size' '(' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#470
component_or_swizzle_specifier -> '[' expression ']' component_or_swizzle_specifier/0.3 · : {}

#471
component_or_swizzle_specifier/0.3 -> component_or_swizzle_specifier · : {}

#472
primary_expression -> 'bitcast' '<' type_specifier '>' paren_expression · : {}

#473
expression_comma_list/0.1/0/0.0 -> ',' expression · : {}

#474
expression_comma_list/0.1/0 -> expression_comma_list/0.1/0/0.0 expression_comma_list/0.1/0 · : {}

#475
expression_comma_list -> expression expression_comma_list/0.1 expression_comma_list/0.2 · : {}

#476
expression_comma_list/0.2 -> ',' · : {}

#477
array_type_specifier/0.3 -> ',' element_count_expression · : {}

#478
additive_expression -> additive_expression · additive_operator multiplicative_expression : {}
element_count_expression -> additive_expression · : {}
additive_operator -> · '+' : {/0[xX][0-9a-fA-F]+[iu]?/}
additive_operator -> · '-' : {/0[xX][0-9a-fA-F]+[iu]?/}

#479
element_count_expression -> bitwise_expression · : {}

#480
binary_and_expression -> unary_expression · : {}
binary_or_expression -> unary_expression · : {}
binary_xor_expression -> unary_expression · : {}
multiplicative_expression -> unary_expression · : {}

#481
array_type_specifier -> 'array' '<' type_specifier array_type_specifier/0.3 '>' · : {}

#482
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier · type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident/7.5 -> · ',' access_mode : {}

#483
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode · '>' : {}

#484
access_mode -> 'read' · : {}

#485
access_mode -> 'write' · : {}

#486
access_mode -> 'read_write' · : {}

#487
else_if_clause -> 'else' 'if' · expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#488
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#489
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#490
if_statement/0.2 -> else_clause · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#491
else_clause -> 'else' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#492
switch_statement -> 'switch' expression '{' · switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body -> · case_clause : {}
switch_body -> · default_alone_clause : {}
switch_statement/0.3 -> · switch_statement/0.3/0 : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#493
loop_statement -> 'loop' '{' loop_statement/0.2 · loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continuing_statement -> · 'continuing' continuing_compound_statement : {}
loop_statement/0.3 -> · continuing_statement : {}

#494
loop_statement/0.2 -> loop_statement/0.2/0 · : {}

#495
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#496
for_statement -> 'for' '(' for_header · ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#497
for_header -> for_header/0.0 · ';' for_header/0.2 ';' for_header/0.4 : {}

#498
for_header/0.0 -> for_init · : {}

#499
for_init -> variable_statement · : {}

#500
for_init -> variable_updating_statement · : {}

#501
for_init -> func_call_statement · : {}

#502
while_statement -> 'while' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#503
variable_statement -> variable_decl '=' expression · : {}

#504
variable_statement -> 'let' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#505
variable_statement -> 'const' optionally_typed_ident '=' · expression : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#506
if_clause -> 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#507
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {}

#508
assignment_statement -> '_' '=' expression · : {}

#509
core_lhs_expression -> '(' lhs_expression ')' · : {}

#510
param/0.0/0 -> attribute param/0.0/0 · : {}

#511
param -> param/0.0 ident · ':' type_specifier : {}

#512
param_list -> param param_list/0.1 · param_list/0.2 : {}
param_list/0.2 -> · ',' : {}

#513
param_list/0.1 -> param_list/0.1/0 · : {}

#514
param_list/0.1/0 -> param_list/0.1/0/0.0 · param_list/0.1/0 : {}
param_list/0.1/0 -> · param_list/0.1/0/0.0 param_list/0.1/0 : {}
param_list/0.1/0/0.0 -> · ',' param : {}

#515
param_list/0.1/0/0.0 -> ',' · param : {}
attribute -> · '@' 'align' '(' expression attrib_end : {}
attribute -> · '@' 'binding' '(' expression attrib_end : {}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {}
attribute -> · '@' 'compute' : {}
attribute -> · '@' 'const' : {}
attribute -> · '@' 'fragment' : {}
attribute -> · '@' 'group' '(' expression attrib_end : {}
attribute -> · '@' 'id' '(' expression attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {}
attribute -> · '@' 'invariant' : {}
attribute -> · '@' 'location' '(' expression attrib_end : {}
attribute -> · '@' 'size' '(' expression attrib_end : {}
attribute -> · '@' 'vertex' : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {}
param -> · param/0.0 ident ':' type_specifier : {}
param/0.0 -> · param/0.0/0 : {}
param/0.0/0 -> · attribute param/0.0/0 : {}

#516
function_header -> 'fn' ident '(' function_header/0.3 ')' · function_header/0.5 : {}
function_header/0.5 -> · '->' function_header/0.5/0.1 type_specifier : {}

#517
struct_body_decl/0.2/0/0.0 -> ',' struct_member · : {}

#518
struct_body_decl/0.2/0 -> struct_body_decl/0.2/0/0.0 struct_body_decl/0.2/0 · : {}

#519
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 · '}' : {EndOfText}

#520
struct_body_decl/0.3 -> ',' · : {}

#521
struct_member -> struct_member/0.0 member_ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#522
variable_qualifier/0.2 -> ',' access_mode · : {}

#523
variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#524
struct_member -> struct_member/0.0 member_ident ':' type_specifier · : {}

#525
struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' · : {EndOfText}

#526
function_header -> 'fn' ident '(' function_header/0.3 ')' function_header/0.5 · : {}

#527
function_header/0.5 -> '->' · function_header/0.5/0.1 type_specifier : {}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#528
param_list/0.1/0/0.0 -> ',' param · : {}

#529
param_list/0.1/0 -> param_list/0.1/0/0.0 param_list/0.1/0 · : {}

#530
param_list -> param param_list/0.1 param_list/0.2 · : {}

#531
param_list/0.2 -> ',' · : {}

#532
param -> param/0.0 ident ':' · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#533
variable_statement -> 'const' optionally_typed_ident '=' expression · : {}

#534
variable_statement -> 'let' optionally_typed_ident '=' expression · : {}

#535
for_header -> for_header/0.0 ';' · for_header/0.2 ';' for_header/0.4 : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
for_header/0.2 -> · expression : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#536
for_statement -> 'for' '(' for_header ')' · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#537
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {}

#538
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#539
loop_statement/0.3 -> continuing_statement · : {}

#540
continuing_statement -> 'continuing' · continuing_compound_statement : {}
continuing_compound_statement -> · '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}

#541
switch_statement -> 'switch' expression '{' switch_statement/0.3 · '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#542
switch_statement/0.3 -> switch_statement/0.3/0 · : {}

#543
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {}
case_clause -> · 'case' case_selectors case_clause/0.2 compound_statement : {}
default_alone_clause -> · 'default' default_alone_clause/0.1 compound_statement : {}
switch_body -> · case_clause : {}
switch_body -> · default_alone_clause : {}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {}

#544
switch_body -> case_clause · : {}

#545
switch_body -> default_alone_clause · : {}

#546
case_clause -> 'case' · case_selectors case_clause/0.2 compound_statement : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
case_selectors -> · case_selector case_selectors/0.1 case_selectors/0.2 : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#547
default_alone_clause -> 'default' · default_alone_clause/0.1 compound_statement : {}
default_alone_clause/0.1 -> · ':' : {}

#548
else_clause -> 'else' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#549
else_if_clause -> 'else' 'if' expression · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#550
texture_and_sampler_types -> storage_texture_type '<' texel_format ',' access_mode '>' · : {}

#551
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 · '>' : {}

#552
type_specifier_without_ident/7.5 -> ',' · access_mode : {}
access_mode -> · 'read' : {}
access_mode -> · 'read_write' : {}
access_mode -> · 'write' : {}

#553
attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#554
attrib_end/0.0 -> ',' · : {}
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' · expression attrib_end : {'f16' 'texture_multisampled_2d'}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#555
attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end · : {'f16' 'texture_multisampled_2d'}

#556
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression · attrib_end : {'f16' 'texture_multisampled_2d'}
attrib_end -> · attrib_end/0.0 ')' : {'f16' 'texture_multisampled_2d'}
attrib_end/0.0 -> · ',' : {}

#557
type_specifier_without_ident/7.5 -> ',' access_mode · : {}

#558
type_specifier_without_ident -> 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' · : {}

#559
else_if_clause -> 'else' 'if' expression compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#560
default_alone_clause -> 'default' default_alone_clause/0.1 · compound_statement : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {}

#561
default_alone_clause/0.1 -> ':' · : {}

#562
case_clause -> 'case' case_selectors · case_clause/0.2 compound_statement : {}
case_clause/0.2 -> · ':' : {}

#563
case_selectors -> case_selector · case_selectors/0.1 case_selectors/0.2 : {}
case_selectors/0.1 -> · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#564
case_selector -> 'default' · : {}

#565
case_selector -> expression · : {}

#566
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {}

#567
switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#568
continuing_statement -> 'continuing' continuing_compound_statement · : {}

#569
continuing_compound_statement -> '{' · continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#570
loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#571
for_statement -> 'for' '(' for_header ')' compound_statement · : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#572
for_header -> for_header/0.0 ';' for_header/0.2 · ';' for_header/0.4 : {}

#573
for_header/0.2 -> expression · : {}

#574
param -> param/0.0 ident ':' type_specifier · : {}

#575
function_header/0.5 -> '->' function_header/0.5/0.1 · type_specifier : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier -> · ident : {}
type_specifier -> · type_specifier_without_ident : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#576
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#577
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'align' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'binding' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'builtin' '(' builtin_value_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'compute' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'const' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'fragment' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'group' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'id' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'interpolate' '(' interpolation_type_name attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'invariant' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'location' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'vertex' : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression ',' expression attrib_end : {'f16' 'texture_multisampled_2d'}
attribute -> · '@' 'workgroup_size' '(' expression attrib_end : {'f16' 'texture_multisampled_2d'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'f16' 'texture_multisampled_2d'}

#578
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'f16' 'texture_multisampled_2d'}

#579
function_header/0.5 -> '->' function_header/0.5/0.1 type_specifier · : {}

#580
for_header -> for_header/0.0 ';' for_header/0.2 ';' · for_header/0.4 : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_header/0.4 -> · for_update : {}
for_update -> · func_call_statement : {}
for_update -> · variable_updating_statement : {}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#581
continuing_compound_statement -> '{' continuing_compound_statement/0.1 · continuing_compound_statement/0.2 '}' : {}
break_if_statement -> · 'break' 'if' expression ';' : {}
continuing_compound_statement/0.2 -> · break_if_statement : {}

#582
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break'}

#583
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break'}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
assignment_statement -> · '_' '=' expression : {}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {}
break_statement -> · 'break' : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
continue_statement -> · 'continue' : {}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break'}
core_lhs_expression -> · '(' lhs_expression ')' : {}
core_lhs_expression -> · ident : {}
decrement_statement -> · lhs_expression '--' : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
for_statement -> · 'for' '(' for_header ')' compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
func_call_statement -> · callable argument_expression_list : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
if_clause -> · 'if' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
increment_statement -> · lhs_expression '++' : {}
lhs_expression -> · '&' lhs_expression : {}
lhs_expression -> · '*' lhs_expression : {}
lhs_expression -> · core_lhs_expression lhs_expression/0.1 : {}
loop_statement -> · 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
return_statement -> · 'return' return_statement/0.1 : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
statement -> · ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · 'discard' ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · break_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · continue_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · for_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · func_call_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · if_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · loop_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · return_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · static_assert_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · switch_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · variable_updating_statement ';' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
statement -> · while_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
static_assert_statement -> · 'static_assert' expression : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
switch_statement -> · 'switch' expression '{' switch_statement/0.3 '}' : {'break' 'continue' 'f16' 'texture_multisampled_2d'}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
variable_decl -> · 'var' variable_decl/0.1 optionally_typed_ident : {}
variable_statement -> · 'const' optionally_typed_ident '=' expression : {}
variable_statement -> · 'let' optionally_typed_ident '=' expression : {}
variable_statement -> · variable_decl '=' expression : {}
variable_statement -> · variable_decl : {}
variable_updating_statement -> · assignment_statement : {}
variable_updating_statement -> · decrement_statement : {}
variable_updating_statement -> · increment_statement : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}
while_statement -> · 'while' expression compound_statement : {'break' 'continue' 'f16' 'texture_multisampled_2d'}

#584
case_selectors -> case_selector case_selectors/0.1 · case_selectors/0.2 : {}
case_selectors/0.2 -> · ',' : {}

#585
case_selectors/0.1 -> case_selectors/0.1/0 · : {}

#586
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {}
case_selectors/0.1/0/0.0 -> · ',' case_selector : {}

#587
case_selectors/0.1/0/0.0 -> ',' · case_selector : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
case_selector -> · 'default' : {}
case_selector -> · expression : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#588
case_clause -> 'case' case_selectors case_clause/0.2 · compound_statement : {}
compound_statement -> · '{' compound_statement/0.1 '}' : {}

#589
case_clause/0.2 -> ':' · : {}

#590
default_alone_clause -> 'default' default_alone_clause/0.1 compound_statement · : {}

#591
attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end · : {'f16' 'texture_multisampled_2d'}

#592
case_clause -> 'case' case_selectors case_clause/0.2 compound_statement · : {}

#593
case_selectors/0.1/0/0.0 -> ',' case_selector · : {}

#594
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {}

#595
case_selectors -> case_selector case_selectors/0.1 case_selectors/0.2 · : {}

#596
case_selectors/0.2 -> ',' · : {}

#597
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break'}

#598
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 · '}' : {}

#599
continuing_compound_statement/0.2 -> break_if_statement · : {}

#600
break_if_statement -> 'break' · 'if' expression ';' : {}

#601
for_header -> for_header/0.0 ';' for_header/0.2 ';' for_header/0.4 · : {}

#602
for_header/0.4 -> for_update · : {}

#603
for_update -> variable_updating_statement · : {}

#604
for_update -> func_call_statement · : {}

#605
break_if_statement -> 'break' 'if' · expression ';' : {}
additive_expression -> · additive_expression additive_operator multiplicative_expression : {}
additive_expression -> · multiplicative_expression : {}
array_type_specifier -> · 'array' '<' type_specifier array_type_specifier/0.3 '>' : {}
binary_and_expression -> · binary_and_expression '&' unary_expression : {}
binary_and_expression -> · unary_expression : {}
binary_or_expression -> · binary_or_expression '|' unary_expression : {}
binary_or_expression -> · unary_expression : {}
binary_xor_expression -> · binary_xor_expression '^' unary_expression : {}
binary_xor_expression -> · unary_expression : {}
bitwise_expression -> · binary_and_expression '&' unary_expression : {}
bitwise_expression -> · binary_or_expression '|' unary_expression : {}
bitwise_expression -> · binary_xor_expression '^' unary_expression : {}
bool_literal -> · 'false' : {}
bool_literal -> · 'true' : {}
call_expression -> · callable argument_expression_list : {}
callable -> · 'array' : {}
callable -> · ident : {}
callable -> · mat_prefix : {}
callable -> · type_specifier_without_ident : {}
callable -> · vec_prefix : {}
decimal_float_literal -> · /0[fh]/ : {}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {}
decimal_int_literal -> · /0[iu]?/ : {}
decimal_int_literal -> · /[1-9][0-9]*[iu]?/ : {}
depth_texture_type -> · 'texture_depth_2d' : {}
depth_texture_type -> · 'texture_depth_2d_array' : {}
depth_texture_type -> · 'texture_depth_cube' : {}
depth_texture_type -> · 'texture_depth_cube_array' : {}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {}
expression -> · bitwise_expression : {}
expression -> · relational_expression : {}
expression -> · short_circuit_and_expression '&&' relational_expression : {}
expression -> · short_circuit_or_expression '||' relational_expression : {}
float_literal -> · decimal_float_literal : {}
float_literal -> · hex_float_literal : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {}
hex_int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {}
int_literal -> · decimal_int_literal : {}
int_literal -> · hex_int_literal : {}
literal -> · bool_literal : {}
literal -> · float_literal : {}
literal -> · int_literal : {}
mat_prefix -> · 'mat2x2' : {}
mat_prefix -> · 'mat2x3' : {}
mat_prefix -> · 'mat2x4' : {}
mat_prefix -> · 'mat3x2' : {}
mat_prefix -> · 'mat3x3' : {}
mat_prefix -> · 'mat3x4' : {}
mat_prefix -> · 'mat4x2' : {}
mat_prefix -> · 'mat4x3' : {}
mat_prefix -> · 'mat4x4' : {}
multiplicative_expression -> · multiplicative_expression multiplicative_operator unary_expression : {}
multiplicative_expression -> · unary_expression : {}
multisampled_texture_type -> · 'texture_multisampled_2d' : {}
paren_expression -> · '(' expression ')' : {}
primary_expression -> · 'bitcast' '<' type_specifier '>' paren_expression : {}
primary_expression -> · call_expression : {}
primary_expression -> · ident : {}
primary_expression -> · literal : {}
primary_expression -> · paren_expression : {}
relational_expression -> · shift_expression '!=' shift_expression : {}
relational_expression -> · shift_expression '<' shift_expression : {}
relational_expression -> · shift_expression '<=' shift_expression : {}
relational_expression -> · shift_expression '==' shift_expression : {}
relational_expression -> · shift_expression '>' shift_expression : {}
relational_expression -> · shift_expression '>=' shift_expression : {}
relational_expression -> · shift_expression : {}
sampled_texture_type -> · 'texture_1d' : {}
sampled_texture_type -> · 'texture_2d' : {}
sampled_texture_type -> · 'texture_2d_array' : {}
sampled_texture_type -> · 'texture_3d' : {}
sampled_texture_type -> · 'texture_cube' : {}
sampled_texture_type -> · 'texture_cube_array' : {}
sampler_type -> · 'sampler' : {}
sampler_type -> · 'sampler_comparison' : {}
shift_expression -> · additive_expression : {}
shift_expression -> · unary_expression '<<' unary_expression : {}
shift_expression -> · unary_expression '>>' unary_expression : {}
short_circuit_and_expression -> · relational_expression : {}
short_circuit_and_expression -> · short_circuit_and_expression '&&' relational_expression : {}
short_circuit_or_expression -> · relational_expression : {}
short_circuit_or_expression -> · short_circuit_or_expression '||' relational_expression : {}
singular_expression -> · primary_expression singular_expression/0.1 : {}
storage_texture_type -> · 'texture_storage_1d' : {}
storage_texture_type -> · 'texture_storage_2d' : {}
storage_texture_type -> · 'texture_storage_2d_array' : {}
storage_texture_type -> · 'texture_storage_3d' : {}
texture_and_sampler_types -> · depth_texture_type : {}
texture_and_sampler_types -> · multisampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampled_texture_type '<' type_specifier '>' : {}
texture_and_sampler_types -> · sampler_type : {}
texture_and_sampler_types -> · storage_texture_type '<' texel_format ',' access_mode '>' : {}
type_specifier_without_ident -> · 'atomic' '<' type_specifier '>' : {}
type_specifier_without_ident -> · 'bool' : {}
type_specifier_without_ident -> · 'f16' : {}
type_specifier_without_ident -> · 'f32' : {}
type_specifier_without_ident -> · 'i32' : {}
type_specifier_without_ident -> · 'ptr' '<' address_space ',' type_specifier type_specifier_without_ident/7.5 '>' : {}
type_specifier_without_ident -> · 'u32' : {}
type_specifier_without_ident -> · array_type_specifier : {}
type_specifier_without_ident -> · mat_prefix '<' type_specifier '>' : {}
type_specifier_without_ident -> · texture_and_sampler_types : {}
type_specifier_without_ident -> · vec_prefix '<' type_specifier '>' : {}
unary_expression -> · '!' unary_expression : {}
unary_expression -> · '&' unary_expression : {}
unary_expression -> · '*' unary_expression : {}
unary_expression -> · '-' unary_expression : {}
unary_expression -> · '~' unary_expression : {}
unary_expression -> · singular_expression : {}
vec_prefix -> · 'vec2' : {}
vec_prefix -> · 'vec3' : {}
vec_prefix -> · 'vec4' : {}

#606
continuing_compound_statement -> '{' continuing_compound_statement/0.1 continuing_compound_statement/0.2 '}' · : {}

#607
break_if_statement -> 'break' 'if' expression · ';' : {}

#608
break_if_statement -> 'break' 'if' expression ';' · : {}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#2 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#3 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#4 global_decl -> ';' ·
r#5 global_decl -> struct_decl ·
r#6 global_decl -> function_decl ·
r#7 attribute -> '@' 'const' ·
r#8 attribute -> '@' 'invariant' ·
r#9 attribute -> '@' 'vertex' ·
r#10 attribute -> '@' 'fragment' ·
r#11 attribute -> '@' 'compute' ·
r#12 global_decl -> static_assert_statement ';' ·
r#13 global_decl -> type_alias_decl ';' ·
r#14 global_decl -> global_constant_decl ';' ·
r#15 global_decl -> global_variable_decl ';' ·
r#16 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#17 global_directive -> 'enable' extension_name ';' ·
r#18 variable_decl/0.1 -> variable_qualifier ·
r#19 struct_decl -> 'struct' ident struct_body_decl ·
r#20 function_decl -> function_decl/0.0 function_header compound_statement ·
r#21 multiplicative_operator -> '*' ·
r#22 multiplicative_operator -> '/' ·
r#23 multiplicative_operator -> '%' ·
r#24 additive_operator -> '+' ·
r#25 additive_operator -> '-' ·
r#26 statement -> ';' ·
r#27 statement -> if_statement ·
r#28 statement -> switch_statement ·
r#29 statement -> loop_statement ·
r#30 statement -> for_statement ·
r#31 statement -> while_statement ·
r#32 statement -> compound_statement ·
r#33 assignment_statement/0.1 -> '=' ·
r#34 assignment_statement/0.1 -> compound_assignment_operator ·
r#35 compound_assignment_operator -> '+=' ·
r#36 compound_assignment_operator -> '-=' ·
r#37 compound_assignment_operator -> '*=' ·
r#38 compound_assignment_operator -> '/=' ·
r#39 compound_assignment_operator -> '%=' ·
r#40 compound_assignment_operator -> '&=' ·
r#41 compound_assignment_operator -> '|=' ·
r#42 compound_assignment_operator -> '^=' ·
r#43 compound_assignment_operator -> '>>=' ·
r#44 compound_assignment_operator -> '<<=' ·
r#45 if_statement/0.1 -> if_statement/0.1/0 ·
r#46 statement -> static_assert_statement ';' ·
r#47 statement -> variable_updating_statement ';' ·
r#48 statement -> 'discard' ';' ·
r#49 statement -> continue_statement ';' ·
r#50 statement -> break_statement ';' ·
r#51 statement -> variable_statement ';' ·
r#52 statement -> func_call_statement ';' ·
r#53 statement -> return_statement ';' ·
r#54 compound_statement -> '{' compound_statement/0.1 '}' ·
r#55 attribute -> '@' 'workgroup_size' '(' expression attrib_end ·
r#56 attribute -> '@' 'size' '(' expression attrib_end ·
r#57 attribute -> '@' 'location' '(' expression attrib_end ·
r#58 attribute -> '@' 'interpolate' '(' interpolation_type_name attrib_end ·
r#59 attribute -> '@' 'id' '(' expression attrib_end ·
r#60 attribute -> '@' 'group' '(' expression attrib_end ·
r#61 attribute -> '@' 'builtin' '(' builtin_value_name attrib_end ·
r#62 attribute -> '@' 'binding' '(' expression attrib_end ·
r#63 attribute -> '@' 'align' '(' expression attrib_end ·
r#64 attrib_end -> attrib_end/0.0 ')' ·
r#65 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#66 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#67 if_statement/0.2 -> else_clause ·
r#68 while_statement -> 'while' expression compound_statement ·
r#69 if_clause -> 'if' expression compound_statement ·
r#70 variable_qualifier -> '<' address_space variable_qualifier/0.2 '>' ·
r#71 struct_body_decl -> '{' struct_member struct_body_decl/0.2 struct_body_decl/0.3 '}' ·
r#72 else_clause -> 'else' compound_statement ·
r#73 attribute -> '@' 'workgroup_size' '(' expression ',' expression attrib_end ·
r#74 attribute -> '@' 'interpolate' '(' interpolation_type_name ',' interpolation_sample_name attrib_end ·
r#75 else_if_clause -> 'else' 'if' expression compound_statement ·
r#76 switch_statement -> 'switch' expression '{' switch_statement/0.3 '}' ·
r#77 loop_statement -> 'loop' '{' loop_statement/0.2 loop_statement/0.3 '}' ·
r#78 for_statement -> 'for' '(' for_header ')' compound_statement ·
r#79 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#80 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#81 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#82 attribute -> '@' 'workgroup_size' '(' expression ',' expression ',' expression attrib_end ·
r#83 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#12
[#2 '@']: s#30
[#2 'const']: s#20
[#2 'static_assert']: s#25
[#2 'struct']: s#23
[#2 'type']: s#22
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#157
[#8 EndOfText]: r#1
[#9 EndOfText]: r#2
[#10 EndOfText]: r#3
[#11 ';']: s#12
[#11 '@']: s#30
[#11 'const']: s#20
[#11 'static_assert']: s#25
[#11 'struct']: s#23
[#11 'type']: s#22
[#12 EndOfText]: r#4
[#13 ';']: s#155
[#14 ';']: s#154
[#15 ';']: s#153
[#16 EndOfText]: r#5
[#17 EndOfText]: r#6
[#18 ';']: s#152
[#19 'var']: s#151
[#20 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#21 'override']: s#147
[#22 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#24 'fn']: s#144
[#25 '!']: s#62
[#25 '&']: s#65
[#25 '(']: s#77
[#25 '*']: s#64
[#25 '-']: s#61
[#25 'array']: s#81
[#25 'atomic']: s#95
[#25 'bitcast']: s#71
[#25 'bool']: s#88
[#25 'f16']: s#90
[#25 'f32']: s#89
[#25 'false']: s#87
[#25 'i32']: s#91
[#25 'mat2x2']: s#100
[#25 'mat2x3']: s#101
[#25 'mat2x4']: s#102
[#25 'mat3x2']: s#103
[#25 'mat3x3']: s#104
[#25 'mat3x4']: s#105
[#25 'mat4x2']: s#106
[#25 'mat4x3']: s#107
[#25 'mat4x4']: s#108
[#25 'ptr']: s#93
[#25 'sampler']: s#125
[#25 'sampler_comparison']: s#126
[#25 'texture_1d']: s#132
[#25 'texture_2d']: s#133
[#25 'texture_2d_array']: s#134
[#25 'texture_3d']: s#135
[#25 'texture_cube']: s#136
[#25 'texture_cube_array']: s#137
[#25 'texture_depth_2d']: s#127
[#25 'texture_depth_2d_array']: s#128
[#25 'texture_depth_cube']: s#129
[#25 'texture_depth_cube_array']: s#130
[#25 'texture_depth_multisampled_2d']: s#131
[#25 'texture_multisampled_2d']: s#138
[#25 'texture_storage_1d']: s#139
[#25 'texture_storage_2d']: s#140
[#25 'texture_storage_2d_array']: s#141
[#25 'texture_storage_3d']: s#142
[#25 'true']: s#86
[#25 'u32']: s#92
[#25 'vec2']: s#97
[#25 'vec3']: s#98
[#25 'vec4']: s#99
[#25 '~']: s#63
[#25 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#25 /0[fh]/]: s#112
[#25 /0[iu]?/]: s#109
[#25 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#25 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#25 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#25 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#25 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#25 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#25 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#25 /[1-9][0-9]*[fh]/]: s#113
[#25 /[1-9][0-9]*[iu]?/]: s#110
[#29 '@']: s#30
[#30 'align']: s#31
[#30 'binding']: s#32
[#30 'builtin']: s#33
[#30 'compute']: s#44
[#30 'const']: s#34
[#30 'fragment']: s#43
[#30 'group']: s#35
[#30 'id']: s#36
[#30 'interpolate']: s#37
[#30 'invariant']: s#38
[#30 'location']: s#39
[#30 'size']: s#40
[#30 'vertex']: s#42
[#30 'workgroup_size']: s#41
[#31 '(']: s#222
[#32 '(']: s#221
[#33 '(']: s#220
[#34 'f16']: r#7
[#34 'texture_multisampled_2d']: r#7
[#35 '(']: s#219
[#36 '(']: s#218
[#37 '(']: s#217
[#38 'f16']: r#8
[#38 'texture_multisampled_2d']: r#8
[#39 '(']: s#216
[#40 '(']: s#215
[#41 '(']: s#214
[#42 'f16']: r#9
[#42 'texture_multisampled_2d']: r#9
[#43 'f16']: r#10
[#43 'texture_multisampled_2d']: r#10
[#44 'f16']: r#11
[#44 'texture_multisampled_2d']: r#11
[#50 '||']: s#213
[#51 '&&']: s#212
[#53 '!=']: s#211
[#53 '<']: s#206
[#53 '<=']: s#208
[#53 '==']: s#210
[#53 '>']: s#207
[#53 '>=']: s#209
[#54 '&']: s#205
[#55 '|']: s#204
[#56 '^']: s#203
[#57 '+']: s#201
[#57 '-']: s#202
[#58 '<<']: s#198
[#58 '>>']: s#199
[#59 '%']: s#197
[#59 '*']: s#195
[#59 '/']: s#196
[#61 '!']: s#62
[#61 '&']: s#65
[#61 '(']: s#77
[#61 '*']: s#64
[#61 '-']: s#61
[#61 'array']: s#81
[#61 'atomic']: s#95
[#61 'bitcast']: s#71
[#61 'bool']: s#88
[#61 'f16']: s#90
[#61 'f32']: s#89
[#61 'false']: s#87
[#61 'i32']: s#91
[#61 'mat2x2']: s#100
[#61 'mat2x3']: s#101
[#61 'mat2x4']: s#102
[#61 'mat3x2']: s#103
[#61 'mat3x3']: s#104
[#61 'mat3x4']: s#105
[#61 'mat4x2']: s#106
[#61 'mat4x3']: s#107
[#61 'mat4x4']: s#108
[#61 'ptr']: s#93
[#61 'sampler']: s#125
[#61 'sampler_comparison']: s#126
[#61 'texture_1d']: s#132
[#61 'texture_2d']: s#133
[#61 'texture_2d_array']: s#134
[#61 'texture_3d']: s#135
[#61 'texture_cube']: s#136
[#61 'texture_cube_array']: s#137
[#61 'texture_depth_2d']: s#127
[#61 'texture_depth_2d_array']: s#128
[#61 'texture_depth_cube']: s#129
[#61 'texture_depth_cube_array']: s#130
[#61 'texture_depth_multisampled_2d']: s#131
[#61 'texture_multisampled_2d']: s#138
[#61 'texture_storage_1d']: s#139
[#61 'texture_storage_2d']: s#140
[#61 'texture_storage_2d_array']: s#141
[#61 'texture_storage_3d']: s#142
[#61 'true']: s#86
[#61 'u32']: s#92
[#61 'vec2']: s#97
[#61 'vec3']: s#98
[#61 'vec4']: s#99
[#61 '~']: s#63
[#61 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#61 /0[fh]/]: s#112
[#61 /0[iu]?/]: s#109
[#61 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#61 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#61 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#61 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#61 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#61 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#61 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#61 /[1-9][0-9]*[fh]/]: s#113
[#61 /[1-9][0-9]*[iu]?/]: s#110
[#62 '!']: s#62
[#62 '&']: s#65
[#62 '(']: s#77
[#62 '*']: s#64
[#62 '-']: s#61
[#62 'array']: s#81
[#62 'atomic']: s#95
[#62 'bitcast']: s#71
[#62 'bool']: s#88
[#62 'f16']: s#90
[#62 'f32']: s#89
[#62 'false']: s#87
[#62 'i32']: s#91
[#62 'mat2x2']: s#100
[#62 'mat2x3']: s#101
[#62 'mat2x4']: s#102
[#62 'mat3x2']: s#103
[#62 'mat3x3']: s#104
[#62 'mat3x4']: s#105
[#62 'mat4x2']: s#106
[#62 'mat4x3']: s#107
[#62 'mat4x4']: s#108
[#62 'ptr']: s#93
[#62 'sampler']: s#125
[#62 'sampler_comparison']: s#126
[#62 'texture_1d']: s#132
[#62 'texture_2d']: s#133
[#62 'texture_2d_array']: s#134
[#62 'texture_3d']: s#135
[#62 'texture_cube']: s#136
[#62 'texture_cube_array']: s#137
[#62 'texture_depth_2d']: s#127
[#62 'texture_depth_2d_array']: s#128
[#62 'texture_depth_cube']: s#129
[#62 'texture_depth_cube_array']: s#130
[#62 'texture_depth_multisampled_2d']: s#131
[#62 'texture_multisampled_2d']: s#138
[#62 'texture_storage_1d']: s#139
[#62 'texture_storage_2d']: s#140
[#62 'texture_storage_2d_array']: s#141
[#62 'texture_storage_3d']: s#142
[#62 'true']: s#86
[#62 'u32']: s#92
[#62 'vec2']: s#97
[#62 'vec3']: s#98
[#62 'vec4']: s#99
[#62 '~']: s#63
[#62 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#62 /0[fh]/]: s#112
[#62 /0[iu]?/]: s#109
[#62 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#62 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#62 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#62 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#62 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#62 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#62 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#62 /[1-9][0-9]*[fh]/]: s#113
[#62 /[1-9][0-9]*[iu]?/]: s#110
[#63 '!']: s#62
[#63 '&']: s#65
[#63 '(']: s#77
[#63 '*']: s#64
[#63 '-']: s#61
[#63 'array']: s#81
[#63 'atomic']: s#95
[#63 'bitcast']: s#71
[#63 'bool']: s#88
[#63 'f16']: s#90
[#63 'f32']: s#89
[#63 'false']: s#87
[#63 'i32']: s#91
[#63 'mat2x2']: s#100
[#63 'mat2x3']: s#101
[#63 'mat2x4']: s#102
[#63 'mat3x2']: s#103
[#63 'mat3x3']: s#104
[#63 'mat3x4']: s#105
[#63 'mat4x2']: s#106
[#63 'mat4x3']: s#107
[#63 'mat4x4']: s#108
[#63 'ptr']: s#93
[#63 'sampler']: s#125
[#63 'sampler_comparison']: s#126
[#63 'texture_1d']: s#132
[#63 'texture_2d']: s#133
[#63 'texture_2d_array']: s#134
[#63 'texture_3d']: s#135
[#63 'texture_cube']: s#136
[#63 'texture_cube_array']: s#137
[#63 'texture_depth_2d']: s#127
[#63 'texture_depth_2d_array']: s#128
[#63 'texture_depth_cube']: s#129
[#63 'texture_depth_cube_array']: s#130
[#63 'texture_depth_multisampled_2d']: s#131
[#63 'texture_multisampled_2d']: s#138
[#63 'texture_storage_1d']: s#139
[#63 'texture_storage_2d']: s#140
[#63 'texture_storage_2d_array']: s#141
[#63 'texture_storage_3d']: s#142
[#63 'true']: s#86
[#63 'u32']: s#92
[#63 'vec2']: s#97
[#63 'vec3']: s#98
[#63 'vec4']: s#99
[#63 '~']: s#63
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#63 /0[fh]/]: s#112
[#63 /0[iu]?/]: s#109
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#63 /[1-9][0-9]*[fh]/]: s#113
[#63 /[1-9][0-9]*[iu]?/]: s#110
[#64 '!']: s#62
[#64 '&']: s#65
[#64 '(']: s#77
[#64 '*']: s#64
[#64 '-']: s#61
[#64 'array']: s#81
[#64 'atomic']: s#95
[#64 'bitcast']: s#71
[#64 'bool']: s#88
[#64 'f16']: s#90
[#64 'f32']: s#89
[#64 'false']: s#87
[#64 'i32']: s#91
[#64 'mat2x2']: s#100
[#64 'mat2x3']: s#101
[#64 'mat2x4']: s#102
[#64 'mat3x2']: s#103
[#64 'mat3x3']: s#104
[#64 'mat3x4']: s#105
[#64 'mat4x2']: s#106
[#64 'mat4x3']: s#107
[#64 'mat4x4']: s#108
[#64 'ptr']: s#93
[#64 'sampler']: s#125
[#64 'sampler_comparison']: s#126
[#64 'texture_1d']: s#132
[#64 'texture_2d']: s#133
[#64 'texture_2d_array']: s#134
[#64 'texture_3d']: s#135
[#64 'texture_cube']: s#136
[#64 'texture_cube_array']: s#137
[#64 'texture_depth_2d']: s#127
[#64 'texture_depth_2d_array']: s#128
[#64 'texture_depth_cube']: s#129
[#64 'texture_depth_cube_array']: s#130
[#64 'texture_depth_multisampled_2d']: s#131
[#64 'texture_multisampled_2d']: s#138
[#64 'texture_storage_1d']: s#139
[#64 'texture_storage_2d']: s#140
[#64 'texture_storage_2d_array']: s#141
[#64 'texture_storage_3d']: s#142
[#64 'true']: s#86
[#64 'u32']: s#92
[#64 'vec2']: s#97
[#64 'vec3']: s#98
[#64 'vec4']: s#99
[#64 '~']: s#63
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#64 /0[fh]/]: s#112
[#64 /0[iu]?/]: s#109
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#64 /[1-9][0-9]*[fh]/]: s#113
[#64 /[1-9][0-9]*[iu]?/]: s#110
[#65 '!']: s#62
[#65 '&']: s#65
[#65 '(']: s#77
[#65 '*']: s#64
[#65 '-']: s#61
[#65 'array']: s#81
[#65 'atomic']: s#95
[#65 'bitcast']: s#71
[#65 'bool']: s#88
[#65 'f16']: s#90
[#65 'f32']: s#89
[#65 'false']: s#87
[#65 'i32']: s#91
[#65 'mat2x2']: s#100
[#65 'mat2x3']: s#101
[#65 'mat2x4']: s#102
[#65 'mat3x2']: s#103
[#65 'mat3x3']: s#104
[#65 'mat3x4']: s#105
[#65 'mat4x2']: s#106
[#65 'mat4x3']: s#107
[#65 'mat4x4']: s#108
[#65 'ptr']: s#93
[#65 'sampler']: s#125
[#65 'sampler_comparison']: s#126
[#65 'texture_1d']: s#132
[#65 'texture_2d']: s#133
[#65 'texture_2d_array']: s#134
[#65 'texture_3d']: s#135
[#65 'texture_cube']: s#136
[#65 'texture_cube_array']: s#137
[#65 'texture_depth_2d']: s#127
[#65 'texture_depth_2d_array']: s#128
[#65 'texture_depth_cube']: s#129
[#65 'texture_depth_cube_array']: s#130
[#65 'texture_depth_multisampled_2d']: s#131
[#65 'texture_multisampled_2d']: s#138
[#65 'texture_storage_1d']: s#139
[#65 'texture_storage_2d']: s#140
[#65 'texture_storage_2d_array']: s#141
[#65 'texture_storage_3d']: s#142
[#65 'true']: s#86
[#65 'u32']: s#92
[#65 'vec2']: s#97
[#65 'vec3']: s#98
[#65 'vec4']: s#99
[#65 '~']: s#63
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#65 /0[fh]/]: s#112
[#65 /0[iu]?/]: s#109
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#65 /[1-9][0-9]*[fh]/]: s#113
[#65 /[1-9][0-9]*[iu]?/]: s#110
[#66 '.']: s#188
[#66 '[']: s#187
[#71 '<']: s#184
[#73 '(']: s#183
[#77 '!']: s#62
[#77 '&']: s#65
[#77 '(']: s#77
[#77 '*']: s#64
[#77 '-']: s#61
[#77 'array']: s#81
[#77 'atomic']: s#95
[#77 'bitcast']: s#71
[#77 'bool']: s#88
[#77 'f16']: s#90
[#77 'f32']: s#89
[#77 'false']: s#87
[#77 'i32']: s#91
[#77 'mat2x2']: s#100
[#77 'mat2x3']: s#101
[#77 'mat2x4']: s#102
[#77 'mat3x2']: s#103
[#77 'mat3x3']: s#104
[#77 'mat3x4']: s#105
[#77 'mat4x2']: s#106
[#77 'mat4x3']: s#107
[#77 'mat4x4']: s#108
[#77 'ptr']: s#93
[#77 'sampler']: s#125
[#77 'sampler_comparison']: s#126
[#77 'texture_1d']: s#132
[#77 'texture_2d']: s#133
[#77 'texture_2d_array']: s#134
[#77 'texture_3d']: s#135
[#77 'texture_cube']: s#136
[#77 'texture_cube_array']: s#137
[#77 'texture_depth_2d']: s#127
[#77 'texture_depth_2d_array']: s#128
[#77 'texture_depth_cube']: s#129
[#77 'texture_depth_cube_array']: s#130
[#77 'texture_depth_multisampled_2d']: s#131
[#77 'texture_multisampled_2d']: s#138
[#77 'texture_storage_1d']: s#139
[#77 'texture_storage_2d']: s#140
[#77 'texture_storage_2d_array']: s#141
[#77 'texture_storage_3d']: s#142
[#77 'true']: s#86
[#77 'u32']: s#92
[#77 'vec2']: s#97
[#77 'vec3']: s#98
[#77 'vec4']: s#99
[#77 '~']: s#63
[#77 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#77 /0[fh]/]: s#112
[#77 /0[iu]?/]: s#109
[#77 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#77 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#77 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#77 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#77 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#77 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#77 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#77 /[1-9][0-9]*[fh]/]: s#113
[#77 /[1-9][0-9]*[iu]?/]: s#110
[#79 '<']: s#180
[#80 '<']: s#179
[#81 '<']: s#178
[#93 '<']: s#177
[#95 '<']: s#176
[#122 '<']: s#175
[#123 '<']: s#174
[#124 '<']: s#173
[#143 '{']: s#172
[#144 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#145 '{']: s#169
[#146 '=']: s#167
[#147 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#148 '=']: s#165
[#149 ':']: s#164
[#150 '=']: s#162
[#151 '<']: s#160
[#152 EndOfText]: r#12
[#153 EndOfText]: r#13
[#154 EndOfText]: r#14
[#155 EndOfText]: r#15
[#156 EndOfText]: r#16
[#157 EndOfText]: r#17
[#158 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#159 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#18
[#160 'function']: s#290
[#160 'private']: s#291
[#160 'storage']: s#294
[#160 'uniform']: s#293
[#160 'workgroup']: s#292
[#162 '!']: s#62
[#162 '&']: s#65
[#162 '(']: s#77
[#162 '*']: s#64
[#162 '-']: s#61
[#162 'array']: s#81
[#162 'atomic']: s#95
[#162 'bitcast']: s#71
[#162 'bool']: s#88
[#162 'f16']: s#90
[#162 'f32']: s#89
[#162 'false']: s#87
[#162 'i32']: s#91
[#162 'mat2x2']: s#100
[#162 'mat2x3']: s#101
[#162 'mat2x4']: s#102
[#162 'mat3x2']: s#103
[#162 'mat3x3']: s#104
[#162 'mat3x4']: s#105
[#162 'mat4x2']: s#106
[#162 'mat4x3']: s#107
[#162 'mat4x4']: s#108
[#162 'ptr']: s#93
[#162 'sampler']: s#125
[#162 'sampler_comparison']: s#126
[#162 'texture_1d']: s#132
[#162 'texture_2d']: s#133
[#162 'texture_2d_array']: s#134
[#162 'texture_3d']: s#135
[#162 'texture_cube']: s#136
[#162 'texture_cube_array']: s#137
[#162 'texture_depth_2d']: s#127
[#162 'texture_depth_2d_array']: s#128
[#162 'texture_depth_cube']: s#129
[#162 'texture_depth_cube_array']: s#130
[#162 'texture_depth_multisampled_2d']: s#131
[#162 'texture_multisampled_2d']: s#138
[#162 'texture_storage_1d']: s#139
[#162 'texture_storage_2d']: s#140
[#162 'texture_storage_2d_array']: s#141
[#162 'texture_storage_3d']: s#142
[#162 'true']: s#86
[#162 'u32']: s#92
[#162 'vec2']: s#97
[#162 'vec3']: s#98
[#162 'vec4']: s#99
[#162 '~']: s#63
[#162 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#162 /0[fh]/]: s#112
[#162 /0[iu]?/]: s#109
[#162 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#162 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#162 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#162 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#162 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#162 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#162 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#162 /[1-9][0-9]*[fh]/]: s#113
[#162 /[1-9][0-9]*[iu]?/]: s#110
[#164 'array']: s#281
[#164 'atomic']: s#95
[#164 'bool']: s#88
[#164 'f16']: s#90
[#164 'f32']: s#89
[#164 'i32']: s#91
[#164 'mat2x2']: s#100
[#164 'mat2x3']: s#101
[#164 'mat2x4']: s#102
[#164 'mat3x2']: s#103
[#164 'mat3x3']: s#104
[#164 'mat3x4']: s#105
[#164 'mat4x2']: s#106
[#164 'mat4x3']: s#107
[#164 'mat4x4']: s#108
[#164 'ptr']: s#93
[#164 'sampler']: s#125
[#164 'sampler_comparison']: s#126
[#164 'texture_1d']: s#132
[#164 'texture_2d']: s#133
[#164 'texture_2d_array']: s#134
[#164 'texture_3d']: s#135
[#164 'texture_cube']: s#136
[#164 'texture_cube_array']: s#137
[#164 'texture_depth_2d']: s#127
[#164 'texture_depth_2d_array']: s#128
[#164 'texture_depth_cube']: s#129
[#164 'texture_depth_cube_array']: s#130
[#164 'texture_depth_multisampled_2d']: s#131
[#164 'texture_multisampled_2d']: s#138
[#164 'texture_storage_1d']: s#139
[#164 'texture_storage_2d']: s#140
[#164 'texture_storage_2d_array']: s#141
[#164 'texture_storage_3d']: s#142
[#164 'u32']: s#92
[#164 'vec2']: s#97
[#164 'vec3']: s#98
[#164 'vec4']: s#99
[#164 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#165 '!']: s#62
[#165 '&']: s#65
[#165 '(']: s#77
[#165 '*']: s#64
[#165 '-']: s#61
[#165 'array']: s#81
[#165 'atomic']: s#95
[#165 'bitcast']: s#71
[#165 'bool']: s#88
[#165 'f16']: s#90
[#165 'f32']: s#89
[#165 'false']: s#87
[#165 'i32']: s#91
[#165 'mat2x2']: s#100
[#165 'mat2x3']: s#101
[#165 'mat2x4']: s#102
[#165 'mat3x2']: s#103
[#165 'mat3x3']: s#104
[#165 'mat3x4']: s#105
[#165 'mat4x2']: s#106
[#165 'mat4x3']: s#107
[#165 'mat4x4']: s#108
[#165 'ptr']: s#93
[#165 'sampler']: s#125
[#165 'sampler_comparison']: s#126
[#165 'texture_1d']: s#132
[#165 'texture_2d']: s#133
[#165 'texture_2d_array']: s#134
[#165 'texture_3d']: s#135
[#165 'texture_cube']: s#136
[#165 'texture_cube_array']: s#137
[#165 'texture_depth_2d']: s#127
[#165 'texture_depth_2d_array']: s#128
[#165 'texture_depth_cube']: s#129
[#165 'texture_depth_cube_array']: s#130
[#165 'texture_depth_multisampled_2d']: s#131
[#165 'texture_multisampled_2d']: s#138
[#165 'texture_storage_1d']: s#139
[#165 'texture_storage_2d']: s#140
[#165 'texture_storage_2d_array']: s#141
[#165 'texture_storage_3d']: s#142
[#165 'true']: s#86
[#165 'u32']: s#92
[#165 'vec2']: s#97
[#165 'vec3']: s#98
[#165 'vec4']: s#99
[#165 '~']: s#63
[#165 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#165 /0[fh]/]: s#112
[#165 /0[iu]?/]: s#109
[#165 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#165 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#165 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#165 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#165 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#165 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#165 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#165 /[1-9][0-9]*[fh]/]: s#113
[#165 /[1-9][0-9]*[iu]?/]: s#110
[#166 '=']: s#363
[#167 'array']: s#281
[#167 'atomic']: s#95
[#167 'bool']: s#88
[#167 'f16']: s#90
[#167 'f32']: s#89
[#167 'i32']: s#91
[#167 'mat2x2']: s#100
[#167 'mat2x3']: s#101
[#167 'mat2x4']: s#102
[#167 'mat3x2']: s#103
[#167 'mat3x3']: s#104
[#167 'mat3x4']: s#105
[#167 'mat4x2']: s#106
[#167 'mat4x3']: s#107
[#167 'mat4x4']: s#108
[#167 'ptr']: s#93
[#167 'sampler']: s#125
[#167 'sampler_comparison']: s#126
[#167 'texture_1d']: s#132
[#167 'texture_2d']: s#133
[#167 'texture_2d_array']: s#134
[#167 'texture_3d']: s#135
[#167 'texture_cube']: s#136
[#167 'texture_cube_array']: s#137
[#167 'texture_depth_2d']: s#127
[#167 'texture_depth_2d_array']: s#128
[#167 'texture_depth_cube']: s#129
[#167 'texture_depth_cube_array']: s#130
[#167 'texture_depth_multisampled_2d']: s#131
[#167 'texture_multisampled_2d']: s#138
[#167 'texture_storage_1d']: s#139
[#167 'texture_storage_2d']: s#140
[#167 'texture_storage_2d_array']: s#141
[#167 'texture_storage_3d']: s#142
[#167 'u32']: s#92
[#167 'vec2']: s#97
[#167 'vec3']: s#98
[#167 'vec4']: s#99
[#167 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#168 EndOfText]: r#19
[#169 '@']: s#30
[#170 '(']: s#356
[#171 EndOfText]: r#20
[#172 '&']: s#354
[#172 '(']: s#355
[#172 '*']: s#353
[#172 ';']: s#318
[#172 '_']: s#351
[#172 'array']: s#81
[#172 'atomic']: s#95
[#172 'bool']: s#88
[#172 'break']: s#343
[#172 'const']: s#342
[#172 'continue']: s#344
[#172 'discard']: s#329
[#172 'f16']: s#90
[#172 'f32']: s#89
[#172 'for']: s#337
[#172 'i32']: s#91
[#172 'if']: s#348
[#172 'let']: s#341
[#172 'loop']: s#336
[#172 'mat2x2']: s#100
[#172 'mat2x3']: s#101
[#172 'mat2x4']: s#102
[#172 'mat3x2']: s#103
[#172 'mat3x3']: s#104
[#172 'mat3x4']: s#105
[#172 'mat4x2']: s#106
[#172 'mat4x3']: s#107
[#172 'mat4x4']: s#108
[#172 'ptr']: s#93
[#172 'return']: s#333
[#172 'sampler']: s#125
[#172 'sampler_comparison']: s#126
[#172 'static_assert']: s#25
[#172 'switch']: s#335
[#172 'texture_1d']: s#132
[#172 'texture_2d']: s#133
[#172 'texture_2d_array']: s#134
[#172 'texture_3d']: s#135
[#172 'texture_cube']: s#136
[#172 'texture_cube_array']: s#137
[#172 'texture_depth_2d']: s#127
[#172 'texture_depth_2d_array']: s#128
[#172 'texture_depth_cube']: s#129
[#172 'texture_depth_cube_array']: s#130
[#172 'texture_depth_multisampled_2d']: s#131
[#172 'texture_multisampled_2d']: s#138
[#172 'texture_storage_1d']: s#139
[#172 'texture_storage_2d']: s#140
[#172 'texture_storage_2d_array']: s#141
[#172 'texture_storage_3d']: s#142
[#172 'u32']: s#92
[#172 'var']: s#151
[#172 'vec2']: s#97
[#172 'vec3']: s#98
[#172 'vec4']: s#99
[#172 'while']: s#338
[#172 '{']: s#172
[#172 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#173 'r32float']: s#308
[#173 'r32sint']: s#307
[#173 'r32uint']: s#306
[#173 'rg32float']: s#311
[#173 'rg32sint']: s#310
[#173 'rg32uint']: s#309
[#173 'rgba16float']: s#305
[#173 'rgba16sint']: s#304
[#173 'rgba16uint']: s#303
[#173 'rgba32float']: s#314
[#173 'rgba32sint']: s#313
[#173 'rgba32uint']: s#312
[#173 'rgba8sint']: s#302
[#173 'rgba8snorm']: s#300
[#173 'rgba8uint']: s#301
[#173 'rgba8unorm']: s#299
[#174 'array']: s#281
[#174 'atomic']: s#95
[#174 'bool']: s#88
[#174 'f16']: s#90
[#174 'f32']: s#89
[#174 'i32']: s#91
[#174 'mat2x2']: s#100
[#174 'mat2x3']: s#101
[#174 'mat2x4']: s#102
[#174 'mat3x2']: s#103
[#174 'mat3x3']: s#104
[#174 'mat3x4']: s#105
[#174 'mat4x2']: s#106
[#174 'mat4x3']: s#107
[#174 'mat4x4']: s#108
[#174 'ptr']: s#93
[#174 'sampler']: s#125
[#174 'sampler_comparison']: s#126
[#174 'texture_1d']: s#132
[#174 'texture_2d']: s#133
[#174 'texture_2d_array']: s#134
[#174 'texture_3d']: s#135
[#174 'texture_cube']: s#136
[#174 'texture_cube_array']: s#137
[#174 'texture_depth_2d']: s#127
[#174 'texture_depth_2d_array']: s#128
[#174 'texture_depth_cube']: s#129
[#174 'texture_depth_cube_array']: s#130
[#174 'texture_depth_multisampled_2d']: s#131
[#174 'texture_multisampled_2d']: s#138
[#174 'texture_storage_1d']: s#139
[#174 'texture_storage_2d']: s#140
[#174 'texture_storage_2d_array']: s#141
[#174 'texture_storage_3d']: s#142
[#174 'u32']: s#92
[#174 'vec2']: s#97
[#174 'vec3']: s#98
[#174 'vec4']: s#99
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#175 'array']: s#281
[#175 'atomic']: s#95
[#175 'bool']: s#88
[#175 'f16']: s#90
[#175 'f32']: s#89
[#175 'i32']: s#91
[#175 'mat2x2']: s#100
[#175 'mat2x3']: s#101
[#175 'mat2x4']: s#102
[#175 'mat3x2']: s#103
[#175 'mat3x3']: s#104
[#175 'mat3x4']: s#105
[#175 'mat4x2']: s#106
[#175 'mat4x3']: s#107
[#175 'mat4x4']: s#108
[#175 'ptr']: s#93
[#175 'sampler']: s#125
[#175 'sampler_comparison']: s#126
[#175 'texture_1d']: s#132
[#175 'texture_2d']: s#133
[#175 'texture_2d_array']: s#134
[#175 'texture_3d']: s#135
[#175 'texture_cube']: s#136
[#175 'texture_cube_array']: s#137
[#175 'texture_depth_2d']: s#127
[#175 'texture_depth_2d_array']: s#128
[#175 'texture_depth_cube']: s#129
[#175 'texture_depth_cube_array']: s#130
[#175 'texture_depth_multisampled_2d']: s#131
[#175 'texture_multisampled_2d']: s#138
[#175 'texture_storage_1d']: s#139
[#175 'texture_storage_2d']: s#140
[#175 'texture_storage_2d_array']: s#141
[#175 'texture_storage_3d']: s#142
[#175 'u32']: s#92
[#175 'vec2']: s#97
[#175 'vec3']: s#98
[#175 'vec4']: s#99
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#176 'array']: s#281
[#176 'atomic']: s#95
[#176 'bool']: s#88
[#176 'f16']: s#90
[#176 'f32']: s#89
[#176 'i32']: s#91
[#176 'mat2x2']: s#100
[#176 'mat2x3']: s#101
[#176 'mat2x4']: s#102
[#176 'mat3x2']: s#103
[#176 'mat3x3']: s#104
[#176 'mat3x4']: s#105
[#176 'mat4x2']: s#106
[#176 'mat4x3']: s#107
[#176 'mat4x4']: s#108
[#176 'ptr']: s#93
[#176 'sampler']: s#125
[#176 'sampler_comparison']: s#126
[#176 'texture_1d']: s#132
[#176 'texture_2d']: s#133
[#176 'texture_2d_array']: s#134
[#176 'texture_3d']: s#135
[#176 'texture_cube']: s#136
[#176 'texture_cube_array']: s#137
[#176 'texture_depth_2d']: s#127
[#176 'texture_depth_2d_array']: s#128
[#176 'texture_depth_cube']: s#129
[#176 'texture_depth_cube_array']: s#130
[#176 'texture_depth_multisampled_2d']: s#131
[#176 'texture_multisampled_2d']: s#138
[#176 'texture_storage_1d']: s#139
[#176 'texture_storage_2d']: s#140
[#176 'texture_storage_2d_array']: s#141
[#176 'texture_storage_3d']: s#142
[#176 'u32']: s#92
[#176 'vec2']: s#97
[#176 'vec3']: s#98
[#176 'vec4']: s#99
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#177 'function']: s#290
[#177 'private']: s#291
[#177 'storage']: s#294
[#177 'uniform']: s#293
[#177 'workgroup']: s#292
[#178 'array']: s#281
[#178 'atomic']: s#95
[#178 'bool']: s#88
[#178 'f16']: s#90
[#178 'f32']: s#89
[#178 'i32']: s#91
[#178 'mat2x2']: s#100
[#178 'mat2x3']: s#101
[#178 'mat2x4']: s#102
[#178 'mat3x2']: s#103
[#178 'mat3x3']: s#104
[#178 'mat3x4']: s#105
[#178 'mat4x2']: s#106
[#178 'mat4x3']: s#107
[#178 'mat4x4']: s#108
[#178 'ptr']: s#93
[#178 'sampler']: s#125
[#178 'sampler_comparison']: s#126
[#178 'texture_1d']: s#132
[#178 'texture_2d']: s#133
[#178 'texture_2d_array']: s#134
[#178 'texture_3d']: s#135
[#178 'texture_cube']: s#136
[#178 'texture_cube_array']: s#137
[#178 'texture_depth_2d']: s#127
[#178 'texture_depth_2d_array']: s#128
[#178 'texture_depth_cube']: s#129
[#178 'texture_depth_cube_array']: s#130
[#178 'texture_depth_multisampled_2d']: s#131
[#178 'texture_multisampled_2d']: s#138
[#178 'texture_storage_1d']: s#139
[#178 'texture_storage_2d']: s#140
[#178 'texture_storage_2d_array']: s#141
[#178 'texture_storage_3d']: s#142
[#178 'u32']: s#92
[#178 'vec2']: s#97
[#178 'vec3']: s#98
[#178 'vec4']: s#99
[#178 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#179 'array']: s#281
[#179 'atomic']: s#95
[#179 'bool']: s#88
[#179 'f16']: s#90
[#179 'f32']: s#89
[#179 'i32']: s#91
[#179 'mat2x2']: s#100
[#179 'mat2x3']: s#101
[#179 'mat2x4']: s#102
[#179 'mat3x2']: s#103
[#179 'mat3x3']: s#104
[#179 'mat3x4']: s#105
[#179 'mat4x2']: s#106
[#179 'mat4x3']: s#107
[#179 'mat4x4']: s#108
[#179 'ptr']: s#93
[#179 'sampler']: s#125
[#179 'sampler_comparison']: s#126
[#179 'texture_1d']: s#132
[#179 'texture_2d']: s#133
[#179 'texture_2d_array']: s#134
[#179 'texture_3d']: s#135
[#179 'texture_cube']: s#136
[#179 'texture_cube_array']: s#137
[#179 'texture_depth_2d']: s#127
[#179 'texture_depth_2d_array']: s#128
[#179 'texture_depth_cube']: s#129
[#179 'texture_depth_cube_array']: s#130
[#179 'texture_depth_multisampled_2d']: s#131
[#179 'texture_multisampled_2d']: s#138
[#179 'texture_storage_1d']: s#139
[#179 'texture_storage_2d']: s#140
[#179 'texture_storage_2d_array']: s#141
[#179 'texture_storage_3d']: s#142
[#179 'u32']: s#92
[#179 'vec2']: s#97
[#179 'vec3']: s#98
[#179 'vec4']: s#99
[#179 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#180 'array']: s#281
[#180 'atomic']: s#95
[#180 'bool']: s#88
[#180 'f16']: s#90
[#180 'f32']: s#89
[#180 'i32']: s#91
[#180 'mat2x2']: s#100
[#180 'mat2x3']: s#101
[#180 'mat2x4']: s#102
[#180 'mat3x2']: s#103
[#180 'mat3x3']: s#104
[#180 'mat3x4']: s#105
[#180 'mat4x2']: s#106
[#180 'mat4x3']: s#107
[#180 'mat4x4']: s#108
[#180 'ptr']: s#93
[#180 'sampler']: s#125
[#180 'sampler_comparison']: s#126
[#180 'texture_1d']: s#132
[#180 'texture_2d']: s#133
[#180 'texture_2d_array']: s#134
[#180 'texture_3d']: s#135
[#180 'texture_cube']: s#136
[#180 'texture_cube_array']: s#137
[#180 'texture_depth_2d']: s#127
[#180 'texture_depth_2d_array']: s#128
[#180 'texture_depth_cube']: s#129
[#180 'texture_depth_cube_array']: s#130
[#180 'texture_depth_multisampled_2d']: s#131
[#180 'texture_multisampled_2d']: s#138
[#180 'texture_storage_1d']: s#139
[#180 'texture_storage_2d']: s#140
[#180 'texture_storage_2d_array']: s#141
[#180 'texture_storage_3d']: s#142
[#180 'u32']: s#92
[#180 'vec2']: s#97
[#180 'vec3']: s#98
[#180 'vec4']: s#99
[#180 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#181 ')']: s#285
[#183 '!']: s#62
[#183 '&']: s#65
[#183 '(']: s#77
[#183 '*']: s#64
[#183 '-']: s#61
[#183 'array']: s#81
[#183 'atomic']: s#95
[#183 'bitcast']: s#71
[#183 'bool']: s#88
[#183 'f16']: s#90
[#183 'f32']: s#89
[#183 'false']: s#87
[#183 'i32']: s#91
[#183 'mat2x2']: s#100
[#183 'mat2x3']: s#101
[#183 'mat2x4']: s#102
[#183 'mat3x2']: s#103
[#183 'mat3x3']: s#104
[#183 'mat3x4']: s#105
[#183 'mat4x2']: s#106
[#183 'mat4x3']: s#107
[#183 'mat4x4']: s#108
[#183 'ptr']: s#93
[#183 'sampler']: s#125
[#183 'sampler_comparison']: s#126
[#183 'texture_1d']: s#132
[#183 'texture_2d']: s#133
[#183 'texture_2d_array']: s#134
[#183 'texture_3d']: s#135
[#183 'texture_cube']: s#136
[#183 'texture_cube_array']: s#137
[#183 'texture_depth_2d']: s#127
[#183 'texture_depth_2d_array']: s#128
[#183 'texture_depth_cube']: s#129
[#183 'texture_depth_cube_array']: s#130
[#183 'texture_depth_multisampled_2d']: s#131
[#183 'texture_multisampled_2d']: s#138
[#183 'texture_storage_1d']: s#139
[#183 'texture_storage_2d']: s#140
[#183 'texture_storage_2d_array']: s#141
[#183 'texture_storage_3d']: s#142
[#183 'true']: s#86
[#183 'u32']: s#92
[#183 'vec2']: s#97
[#183 'vec3']: s#98
[#183 'vec4']: s#99
[#183 '~']: s#63
[#183 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#183 /0[fh]/]: s#112
[#183 /0[iu]?/]: s#109
[#183 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#183 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#183 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#183 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#183 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#183 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#183 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#183 /[1-9][0-9]*[fh]/]: s#113
[#183 /[1-9][0-9]*[iu]?/]: s#110
[#184 'array']: s#281
[#184 'atomic']: s#95
[#184 'bool']: s#88
[#184 'f16']: s#90
[#184 'f32']: s#89
[#184 'i32']: s#91
[#184 'mat2x2']: s#100
[#184 'mat2x3']: s#101
[#184 'mat2x4']: s#102
[#184 'mat3x2']: s#103
[#184 'mat3x3']: s#104
[#184 'mat3x4']: s#105
[#184 'mat4x2']: s#106
[#184 'mat4x3']: s#107
[#184 'mat4x4']: s#108
[#184 'ptr']: s#93
[#184 'sampler']: s#125
[#184 'sampler_comparison']: s#126
[#184 'texture_1d']: s#132
[#184 'texture_2d']: s#133
[#184 'texture_2d_array']: s#134
[#184 'texture_3d']: s#135
[#184 'texture_cube']: s#136
[#184 'texture_cube_array']: s#137
[#184 'texture_depth_2d']: s#127
[#184 'texture_depth_2d_array']: s#128
[#184 'texture_depth_cube']: s#129
[#184 'texture_depth_cube_array']: s#130
[#184 'texture_depth_multisampled_2d']: s#131
[#184 'texture_multisampled_2d']: s#138
[#184 'texture_storage_1d']: s#139
[#184 'texture_storage_2d']: s#140
[#184 'texture_storage_2d_array']: s#141
[#184 'texture_storage_3d']: s#142
[#184 'u32']: s#92
[#184 'vec2']: s#97
[#184 'vec3']: s#98
[#184 'vec4']: s#99
[#184 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#187 '!']: s#62
[#187 '&']: s#65
[#187 '(']: s#77
[#187 '*']: s#64
[#187 '-']: s#61
[#187 'array']: s#81
[#187 'atomic']: s#95
[#187 'bitcast']: s#71
[#187 'bool']: s#88
[#187 'f16']: s#90
[#187 'f32']: s#89
[#187 'false']: s#87
[#187 'i32']: s#91
[#187 'mat2x2']: s#100
[#187 'mat2x3']: s#101
[#187 'mat2x4']: s#102
[#187 'mat3x2']: s#103
[#187 'mat3x3']: s#104
[#187 'mat3x4']: s#105
[#187 'mat4x2']: s#106
[#187 'mat4x3']: s#107
[#187 'mat4x4']: s#108
[#187 'ptr']: s#93
[#187 'sampler']: s#125
[#187 'sampler_comparison']: s#126
[#187 'texture_1d']: s#132
[#187 'texture_2d']: s#133
[#187 'texture_2d_array']: s#134
[#187 'texture_3d']: s#135
[#187 'texture_cube']: s#136
[#187 'texture_cube_array']: s#137
[#187 'texture_depth_2d']: s#127
[#187 'texture_depth_2d_array']: s#128
[#187 'texture_depth_cube']: s#129
[#187 'texture_depth_cube_array']: s#130
[#187 'texture_depth_multisampled_2d']: s#131
[#187 'texture_multisampled_2d']: s#138
[#187 'texture_storage_1d']: s#139
[#187 'texture_storage_2d']: s#140
[#187 'texture_storage_2d_array']: s#141
[#187 'texture_storage_3d']: s#142
[#187 'true']: s#86
[#187 'u32']: s#92
[#187 'vec2']: s#97
[#187 'vec3']: s#98
[#187 'vec4']: s#99
[#187 '~']: s#63
[#187 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#187 /0[fh]/]: s#112
[#187 /0[iu]?/]: s#109
[#187 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#187 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#187 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#187 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#187 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#187 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#187 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#187 /[1-9][0-9]*[fh]/]: s#113
[#187 /[1-9][0-9]*[iu]?/]: s#110
[#188 '/[rgba]/']: s#267
[#188 '/[rgba][rgba]/']: s#268
[#188 '/[rgba][rgba][rgba]/']: s#269
[#188 '/[rgba][rgba][rgba][rgba]/']: s#270
[#188 '/[xyzw]/']: s#271
[#188 '/[xyzw][xyzw]/']: s#272
[#188 '/[xyzw][xyzw][xyzw]/']: s#273
[#188 '/[xyzw][xyzw][xyzw][xyzw]/']: s#274
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#266
[#194 '!']: s#62
[#194 '&']: s#65
[#194 '(']: s#77
[#194 '*']: s#64
[#194 '-']: s#61
[#194 'array']: s#81
[#194 'atomic']: s#95
[#194 'bitcast']: s#71
[#194 'bool']: s#88
[#194 'f16']: s#90
[#194 'f32']: s#89
[#194 'false']: s#87
[#194 'i32']: s#91
[#194 'mat2x2']: s#100
[#194 'mat2x3']: s#101
[#194 'mat2x4']: s#102
[#194 'mat3x2']: s#103
[#194 'mat3x3']: s#104
[#194 'mat3x4']: s#105
[#194 'mat4x2']: s#106
[#194 'mat4x3']: s#107
[#194 'mat4x4']: s#108
[#194 'ptr']: s#93
[#194 'sampler']: s#125
[#194 'sampler_comparison']: s#126
[#194 'texture_1d']: s#132
[#194 'texture_2d']: s#133
[#194 'texture_2d_array']: s#134
[#194 'texture_3d']: s#135
[#194 'texture_cube']: s#136
[#194 'texture_cube_array']: s#137
[#194 'texture_depth_2d']: s#127
[#194 'texture_depth_2d_array']: s#128
[#194 'texture_depth_cube']: s#129
[#194 'texture_depth_cube_array']: s#130
[#194 'texture_depth_multisampled_2d']: s#131
[#194 'texture_multisampled_2d']: s#138
[#194 'texture_storage_1d']: s#139
[#194 'texture_storage_2d']: s#140
[#194 'texture_storage_2d_array']: s#141
[#194 'texture_storage_3d']: s#142
[#194 'true']: s#86
[#194 'u32']: s#92
[#194 'vec2']: s#97
[#194 'vec3']: s#98
[#194 'vec4']: s#99
[#194 '~']: s#63
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#194 /0[fh]/]: s#112
[#194 /0[iu]?/]: s#109
[#194 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#194 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#194 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#194 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#194 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#194 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#194 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#194 /[1-9][0-9]*[fh]/]: s#113
[#194 /[1-9][0-9]*[iu]?/]: s#110
[#195 /0[xX][0-9a-fA-F]+[iu]?/]: r#21
[#196 /0[xX][0-9a-fA-F]+[iu]?/]: r#22
[#197 /0[xX][0-9a-fA-F]+[iu]?/]: r#23
[#198 '!']: s#62
[#198 '&']: s#65
[#198 '(']: s#77
[#198 '*']: s#64
[#198 '-']: s#61
[#198 'array']: s#81
[#198 'atomic']: s#95
[#198 'bitcast']: s#71
[#198 'bool']: s#88
[#198 'f16']: s#90
[#198 'f32']: s#89
[#198 'false']: s#87
[#198 'i32']: s#91
[#198 'mat2x2']: s#100
[#198 'mat2x3']: s#101
[#198 'mat2x4']: s#102
[#198 'mat3x2']: s#103
[#198 'mat3x3']: s#104
[#198 'mat3x4']: s#105
[#198 'mat4x2']: s#106
[#198 'mat4x3']: s#107
[#198 'mat4x4']: s#108
[#198 'ptr']: s#93
[#198 'sampler']: s#125
[#198 'sampler_comparison']: s#126
[#198 'texture_1d']: s#132
[#198 'texture_2d']: s#133
[#198 'texture_2d_array']: s#134
[#198 'texture_3d']: s#135
[#198 'texture_cube']: s#136
[#198 'texture_cube_array']: s#137
[#198 'texture_depth_2d']: s#127
[#198 'texture_depth_2d_array']: s#128
[#198 'texture_depth_cube']: s#129
[#198 'texture_depth_cube_array']: s#130
[#198 'texture_depth_multisampled_2d']: s#131
[#198 'texture_multisampled_2d']: s#138
[#198 'texture_storage_1d']: s#139
[#198 'texture_storage_2d']: s#140
[#198 'texture_storage_2d_array']: s#141
[#198 'texture_storage_3d']: s#142
[#198 'true']: s#86
[#198 'u32']: s#92
[#198 'vec2']: s#97
[#198 'vec3']: s#98
[#198 'vec4']: s#99
[#198 '~']: s#63
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#198 /0[fh]/]: s#112
[#198 /0[iu]?/]: s#109
[#198 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#198 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#198 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#198 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#198 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#198 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#198 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#198 /[1-9][0-9]*[fh]/]: s#113
[#198 /[1-9][0-9]*[iu]?/]: s#110
[#199 '!']: s#62
[#199 '&']: s#65
[#199 '(']: s#77
[#199 '*']: s#64
[#199 '-']: s#61
[#199 'array']: s#81
[#199 'atomic']: s#95
[#199 'bitcast']: s#71
[#199 'bool']: s#88
[#199 'f16']: s#90
[#199 'f32']: s#89
[#199 'false']: s#87
[#199 'i32']: s#91
[#199 'mat2x2']: s#100
[#199 'mat2x3']: s#101
[#199 'mat2x4']: s#102
[#199 'mat3x2']: s#103
[#199 'mat3x3']: s#104
[#199 'mat3x4']: s#105
[#199 'mat4x2']: s#106
[#199 'mat4x3']: s#107
[#199 'mat4x4']: s#108
[#199 'ptr']: s#93
[#199 'sampler']: s#125
[#199 'sampler_comparison']: s#126
[#199 'texture_1d']: s#132
[#199 'texture_2d']: s#133
[#199 'texture_2d_array']: s#134
[#199 'texture_3d']: s#135
[#199 'texture_cube']: s#136
[#199 'texture_cube_array']: s#137
[#199 'texture_depth_2d']: s#127
[#199 'texture_depth_2d_array']: s#128
[#199 'texture_depth_cube']: s#129
[#199 'texture_depth_cube_array']: s#130
[#199 'texture_depth_multisampled_2d']: s#131
[#199 'texture_multisampled_2d']: s#138
[#199 'texture_storage_1d']: s#139
[#199 'texture_storage_2d']: s#140
[#199 'texture_storage_2d_array']: s#141
[#199 'texture_storage_3d']: s#142
[#199 'true']: s#86
[#199 'u32']: s#92
[#199 'vec2']: s#97
[#199 'vec3']: s#98
[#199 'vec4']: s#99
[#199 '~']: s#63
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#199 /0[fh]/]: s#112
[#199 /0[iu]?/]: s#109
[#199 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#199 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#199 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#199 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#199 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#199 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#199 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#199 /[1-9][0-9]*[fh]/]: s#113
[#199 /[1-9][0-9]*[iu]?/]: s#110
[#200 '!']: s#62
[#200 '&']: s#65
[#200 '(']: s#77
[#200 '*']: s#64
[#200 '-']: s#61
[#200 'array']: s#81
[#200 'atomic']: s#95
[#200 'bitcast']: s#71
[#200 'bool']: s#88
[#200 'f16']: s#90
[#200 'f32']: s#89
[#200 'false']: s#87
[#200 'i32']: s#91
[#200 'mat2x2']: s#100
[#200 'mat2x3']: s#101
[#200 'mat2x4']: s#102
[#200 'mat3x2']: s#103
[#200 'mat3x3']: s#104
[#200 'mat3x4']: s#105
[#200 'mat4x2']: s#106
[#200 'mat4x3']: s#107
[#200 'mat4x4']: s#108
[#200 'ptr']: s#93
[#200 'sampler']: s#125
[#200 'sampler_comparison']: s#126
[#200 'texture_1d']: s#132
[#200 'texture_2d']: s#133
[#200 'texture_2d_array']: s#134
[#200 'texture_3d']: s#135
[#200 'texture_cube']: s#136
[#200 'texture_cube_array']: s#137
[#200 'texture_depth_2d']: s#127
[#200 'texture_depth_2d_array']: s#128
[#200 'texture_depth_cube']: s#129
[#200 'texture_depth_cube_array']: s#130
[#200 'texture_depth_multisampled_2d']: s#131
[#200 'texture_multisampled_2d']: s#138
[#200 'texture_storage_1d']: s#139
[#200 'texture_storage_2d']: s#140
[#200 'texture_storage_2d_array']: s#141
[#200 'texture_storage_3d']: s#142
[#200 'true']: s#86
[#200 'u32']: s#92
[#200 'vec2']: s#97
[#200 'vec3']: s#98
[#200 'vec4']: s#99
[#200 '~']: s#63
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#200 /0[fh]/]: s#112
[#200 /0[iu]?/]: s#109
[#200 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#200 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#200 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#200 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#200 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#200 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#200 /[1-9][0-9]*[fh]/]: s#113
[#200 /[1-9][0-9]*[iu]?/]: s#110
[#201 /0[xX][0-9a-fA-F]+[iu]?/]: r#24
[#202 /0[xX][0-9a-fA-F]+[iu]?/]: r#25
[#203 '!']: s#62
[#203 '&']: s#65
[#203 '(']: s#77
[#203 '*']: s#64
[#203 '-']: s#61
[#203 'array']: s#81
[#203 'atomic']: s#95
[#203 'bitcast']: s#71
[#203 'bool']: s#88
[#203 'f16']: s#90
[#203 'f32']: s#89
[#203 'false']: s#87
[#203 'i32']: s#91
[#203 'mat2x2']: s#100
[#203 'mat2x3']: s#101
[#203 'mat2x4']: s#102
[#203 'mat3x2']: s#103
[#203 'mat3x3']: s#104
[#203 'mat3x4']: s#105
[#203 'mat4x2']: s#106
[#203 'mat4x3']: s#107
[#203 'mat4x4']: s#108
[#203 'ptr']: s#93
[#203 'sampler']: s#125
[#203 'sampler_comparison']: s#126
[#203 'texture_1d']: s#132
[#203 'texture_2d']: s#133
[#203 'texture_2d_array']: s#134
[#203 'texture_3d']: s#135
[#203 'texture_cube']: s#136
[#203 'texture_cube_array']: s#137
[#203 'texture_depth_2d']: s#127
[#203 'texture_depth_2d_array']: s#128
[#203 'texture_depth_cube']: s#129
[#203 'texture_depth_cube_array']: s#130
[#203 'texture_depth_multisampled_2d']: s#131
[#203 'texture_multisampled_2d']: s#138
[#203 'texture_storage_1d']: s#139
[#203 'texture_storage_2d']: s#140
[#203 'texture_storage_2d_array']: s#141
[#203 'texture_storage_3d']: s#142
[#203 'true']: s#86
[#203 'u32']: s#92
[#203 'vec2']: s#97
[#203 'vec3']: s#98
[#203 'vec4']: s#99
[#203 '~']: s#63
[#203 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#203 /0[fh]/]: s#112
[#203 /0[iu]?/]: s#109
[#203 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#203 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#203 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#203 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#203 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#203 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#203 /[1-9][0-9]*[fh]/]: s#113
[#203 /[1-9][0-9]*[iu]?/]: s#110
[#204 '!']: s#62
[#204 '&']: s#65
[#204 '(']: s#77
[#204 '*']: s#64
[#204 '-']: s#61
[#204 'array']: s#81
[#204 'atomic']: s#95
[#204 'bitcast']: s#71
[#204 'bool']: s#88
[#204 'f16']: s#90
[#204 'f32']: s#89
[#204 'false']: s#87
[#204 'i32']: s#91
[#204 'mat2x2']: s#100
[#204 'mat2x3']: s#101
[#204 'mat2x4']: s#102
[#204 'mat3x2']: s#103
[#204 'mat3x3']: s#104
[#204 'mat3x4']: s#105
[#204 'mat4x2']: s#106
[#204 'mat4x3']: s#107
[#204 'mat4x4']: s#108
[#204 'ptr']: s#93
[#204 'sampler']: s#125
[#204 'sampler_comparison']: s#126
[#204 'texture_1d']: s#132
[#204 'texture_2d']: s#133
[#204 'texture_2d_array']: s#134
[#204 'texture_3d']: s#135
[#204 'texture_cube']: s#136
[#204 'texture_cube_array']: s#137
[#204 'texture_depth_2d']: s#127
[#204 'texture_depth_2d_array']: s#128
[#204 'texture_depth_cube']: s#129
[#204 'texture_depth_cube_array']: s#130
[#204 'texture_depth_multisampled_2d']: s#131
[#204 'texture_multisampled_2d']: s#138
[#204 'texture_storage_1d']: s#139
[#204 'texture_storage_2d']: s#140
[#204 'texture_storage_2d_array']: s#141
[#204 'texture_storage_3d']: s#142
[#204 'true']: s#86
[#204 'u32']: s#92
[#204 'vec2']: s#97
[#204 'vec3']: s#98
[#204 'vec4']: s#99
[#204 '~']: s#63
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#204 /0[fh]/]: s#112
[#204 /0[iu]?/]: s#109
[#204 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#204 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#204 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#204 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#204 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#204 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#204 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#204 /[1-9][0-9]*[fh]/]: s#113
[#204 /[1-9][0-9]*[iu]?/]: s#110
[#205 '!']: s#62
[#205 '&']: s#65
[#205 '(']: s#77
[#205 '*']: s#64
[#205 '-']: s#61
[#205 'array']: s#81
[#205 'atomic']: s#95
[#205 'bitcast']: s#71
[#205 'bool']: s#88
[#205 'f16']: s#90
[#205 'f32']: s#89
[#205 'false']: s#87
[#205 'i32']: s#91
[#205 'mat2x2']: s#100
[#205 'mat2x3']: s#101
[#205 'mat2x4']: s#102
[#205 'mat3x2']: s#103
[#205 'mat3x3']: s#104
[#205 'mat3x4']: s#105
[#205 'mat4x2']: s#106
[#205 'mat4x3']: s#107
[#205 'mat4x4']: s#108
[#205 'ptr']: s#93
[#205 'sampler']: s#125
[#205 'sampler_comparison']: s#126
[#205 'texture_1d']: s#132
[#205 'texture_2d']: s#133
[#205 'texture_2d_array']: s#134
[#205 'texture_3d']: s#135
[#205 'texture_cube']: s#136
[#205 'texture_cube_array']: s#137
[#205 'texture_depth_2d']: s#127
[#205 'texture_depth_2d_array']: s#128
[#205 'texture_depth_cube']: s#129
[#205 'texture_depth_cube_array']: s#130
[#205 'texture_depth_multisampled_2d']: s#131
[#205 'texture_multisampled_2d']: s#138
[#205 'texture_storage_1d']: s#139
[#205 'texture_storage_2d']: s#140
[#205 'texture_storage_2d_array']: s#141
[#205 'texture_storage_3d']: s#142
[#205 'true']: s#86
[#205 'u32']: s#92
[#205 'vec2']: s#97
[#205 'vec3']: s#98
[#205 'vec4']: s#99
[#205 '~']: s#63
[#205 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#205 /0[fh]/]: s#112
[#205 /0[iu]?/]: s#109
[#205 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#205 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#205 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#205 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#205 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#205 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#205 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#205 /[1-9][0-9]*[fh]/]: s#113
[#205 /[1-9][0-9]*[iu]?/]: s#110
[#206 '!']: s#62
[#206 '&']: s#65
[#206 '(']: s#77
[#206 '*']: s#64
[#206 '-']: s#61
[#206 'array']: s#81
[#206 'atomic']: s#95
[#206 'bitcast']: s#71
[#206 'bool']: s#88
[#206 'f16']: s#90
[#206 'f32']: s#89
[#206 'false']: s#87
[#206 'i32']: s#91
[#206 'mat2x2']: s#100
[#206 'mat2x3']: s#101
[#206 'mat2x4']: s#102
[#206 'mat3x2']: s#103
[#206 'mat3x3']: s#104
[#206 'mat3x4']: s#105
[#206 'mat4x2']: s#106
[#206 'mat4x3']: s#107
[#206 'mat4x4']: s#108
[#206 'ptr']: s#93
[#206 'sampler']: s#125
[#206 'sampler_comparison']: s#126
[#206 'texture_1d']: s#132
[#206 'texture_2d']: s#133
[#206 'texture_2d_array']: s#134
[#206 'texture_3d']: s#135
[#206 'texture_cube']: s#136
[#206 'texture_cube_array']: s#137
[#206 'texture_depth_2d']: s#127
[#206 'texture_depth_2d_array']: s#128
[#206 'texture_depth_cube']: s#129
[#206 'texture_depth_cube_array']: s#130
[#206 'texture_depth_multisampled_2d']: s#131
[#206 'texture_multisampled_2d']: s#138
[#206 'texture_storage_1d']: s#139
[#206 'texture_storage_2d']: s#140
[#206 'texture_storage_2d_array']: s#141
[#206 'texture_storage_3d']: s#142
[#206 'true']: s#86
[#206 'u32']: s#92
[#206 'vec2']: s#97
[#206 'vec3']: s#98
[#206 'vec4']: s#99
[#206 '~']: s#63
[#206 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#206 /0[fh]/]: s#112
[#206 /0[iu]?/]: s#109
[#206 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#206 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#206 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#206 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#206 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#206 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#206 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#206 /[1-9][0-9]*[fh]/]: s#113
[#206 /[1-9][0-9]*[iu]?/]: s#110
[#207 '!']: s#62
[#207 '&']: s#65
[#207 '(']: s#77
[#207 '*']: s#64
[#207 '-']: s#61
[#207 'array']: s#81
[#207 'atomic']: s#95
[#207 'bitcast']: s#71
[#207 'bool']: s#88
[#207 'f16']: s#90
[#207 'f32']: s#89
[#207 'false']: s#87
[#207 'i32']: s#91
[#207 'mat2x2']: s#100
[#207 'mat2x3']: s#101
[#207 'mat2x4']: s#102
[#207 'mat3x2']: s#103
[#207 'mat3x3']: s#104
[#207 'mat3x4']: s#105
[#207 'mat4x2']: s#106
[#207 'mat4x3']: s#107
[#207 'mat4x4']: s#108
[#207 'ptr']: s#93
[#207 'sampler']: s#125
[#207 'sampler_comparison']: s#126
[#207 'texture_1d']: s#132
[#207 'texture_2d']: s#133
[#207 'texture_2d_array']: s#134
[#207 'texture_3d']: s#135
[#207 'texture_cube']: s#136
[#207 'texture_cube_array']: s#137
[#207 'texture_depth_2d']: s#127
[#207 'texture_depth_2d_array']: s#128
[#207 'texture_depth_cube']: s#129
[#207 'texture_depth_cube_array']: s#130
[#207 'texture_depth_multisampled_2d']: s#131
[#207 'texture_multisampled_2d']: s#138
[#207 'texture_storage_1d']: s#139
[#207 'texture_storage_2d']: s#140
[#207 'texture_storage_2d_array']: s#141
[#207 'texture_storage_3d']: s#142
[#207 'true']: s#86
[#207 'u32']: s#92
[#207 'vec2']: s#97
[#207 'vec3']: s#98
[#207 'vec4']: s#99
[#207 '~']: s#63
[#207 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#207 /0[fh]/]: s#112
[#207 /0[iu]?/]: s#109
[#207 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#207 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#207 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#207 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#207 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#207 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#207 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#207 /[1-9][0-9]*[fh]/]: s#113
[#207 /[1-9][0-9]*[iu]?/]: s#110
[#208 '!']: s#62
[#208 '&']: s#65
[#208 '(']: s#77
[#208 '*']: s#64
[#208 '-']: s#61
[#208 'array']: s#81
[#208 'atomic']: s#95
[#208 'bitcast']: s#71
[#208 'bool']: s#88
[#208 'f16']: s#90
[#208 'f32']: s#89
[#208 'false']: s#87
[#208 'i32']: s#91
[#208 'mat2x2']: s#100
[#208 'mat2x3']: s#101
[#208 'mat2x4']: s#102
[#208 'mat3x2']: s#103
[#208 'mat3x3']: s#104
[#208 'mat3x4']: s#105
[#208 'mat4x2']: s#106
[#208 'mat4x3']: s#107
[#208 'mat4x4']: s#108
[#208 'ptr']: s#93
[#208 'sampler']: s#125
[#208 'sampler_comparison']: s#126
[#208 'texture_1d']: s#132
[#208 'texture_2d']: s#133
[#208 'texture_2d_array']: s#134
[#208 'texture_3d']: s#135
[#208 'texture_cube']: s#136
[#208 'texture_cube_array']: s#137
[#208 'texture_depth_2d']: s#127
[#208 'texture_depth_2d_array']: s#128
[#208 'texture_depth_cube']: s#129
[#208 'texture_depth_cube_array']: s#130
[#208 'texture_depth_multisampled_2d']: s#131
[#208 'texture_multisampled_2d']: s#138
[#208 'texture_storage_1d']: s#139
[#208 'texture_storage_2d']: s#140
[#208 'texture_storage_2d_array']: s#141
[#208 'texture_storage_3d']: s#142
[#208 'true']: s#86
[#208 'u32']: s#92
[#208 'vec2']: s#97
[#208 'vec3']: s#98
[#208 'vec4']: s#99
[#208 '~']: s#63
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#208 /0[fh]/]: s#112
[#208 /0[iu]?/]: s#109
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#208 /[1-9][0-9]*[fh]/]: s#113
[#208 /[1-9][0-9]*[iu]?/]: s#110
[#209 '!']: s#62
[#209 '&']: s#65
[#209 '(']: s#77
[#209 '*']: s#64
[#209 '-']: s#61
[#209 'array']: s#81
[#209 'atomic']: s#95
[#209 'bitcast']: s#71
[#209 'bool']: s#88
[#209 'f16']: s#90
[#209 'f32']: s#89
[#209 'false']: s#87
[#209 'i32']: s#91
[#209 'mat2x2']: s#100
[#209 'mat2x3']: s#101
[#209 'mat2x4']: s#102
[#209 'mat3x2']: s#103
[#209 'mat3x3']: s#104
[#209 'mat3x4']: s#105
[#209 'mat4x2']: s#106
[#209 'mat4x3']: s#107
[#209 'mat4x4']: s#108
[#209 'ptr']: s#93
[#209 'sampler']: s#125
[#209 'sampler_comparison']: s#126
[#209 'texture_1d']: s#132
[#209 'texture_2d']: s#133
[#209 'texture_2d_array']: s#134
[#209 'texture_3d']: s#135
[#209 'texture_cube']: s#136
[#209 'texture_cube_array']: s#137
[#209 'texture_depth_2d']: s#127
[#209 'texture_depth_2d_array']: s#128
[#209 'texture_depth_cube']: s#129
[#209 'texture_depth_cube_array']: s#130
[#209 'texture_depth_multisampled_2d']: s#131
[#209 'texture_multisampled_2d']: s#138
[#209 'texture_storage_1d']: s#139
[#209 'texture_storage_2d']: s#140
[#209 'texture_storage_2d_array']: s#141
[#209 'texture_storage_3d']: s#142
[#209 'true']: s#86
[#209 'u32']: s#92
[#209 'vec2']: s#97
[#209 'vec3']: s#98
[#209 'vec4']: s#99
[#209 '~']: s#63
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#209 /0[fh]/]: s#112
[#209 /0[iu]?/]: s#109
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#209 /[1-9][0-9]*[fh]/]: s#113
[#209 /[1-9][0-9]*[iu]?/]: s#110
[#210 '!']: s#62
[#210 '&']: s#65
[#210 '(']: s#77
[#210 '*']: s#64
[#210 '-']: s#61
[#210 'array']: s#81
[#210 'atomic']: s#95
[#210 'bitcast']: s#71
[#210 'bool']: s#88
[#210 'f16']: s#90
[#210 'f32']: s#89
[#210 'false']: s#87
[#210 'i32']: s#91
[#210 'mat2x2']: s#100
[#210 'mat2x3']: s#101
[#210 'mat2x4']: s#102
[#210 'mat3x2']: s#103
[#210 'mat3x3']: s#104
[#210 'mat3x4']: s#105
[#210 'mat4x2']: s#106
[#210 'mat4x3']: s#107
[#210 'mat4x4']: s#108
[#210 'ptr']: s#93
[#210 'sampler']: s#125
[#210 'sampler_comparison']: s#126
[#210 'texture_1d']: s#132
[#210 'texture_2d']: s#133
[#210 'texture_2d_array']: s#134
[#210 'texture_3d']: s#135
[#210 'texture_cube']: s#136
[#210 'texture_cube_array']: s#137
[#210 'texture_depth_2d']: s#127
[#210 'texture_depth_2d_array']: s#128
[#210 'texture_depth_cube']: s#129
[#210 'texture_depth_cube_array']: s#130
[#210 'texture_depth_multisampled_2d']: s#131
[#210 'texture_multisampled_2d']: s#138
[#210 'texture_storage_1d']: s#139
[#210 'texture_storage_2d']: s#140
[#210 'texture_storage_2d_array']: s#141
[#210 'texture_storage_3d']: s#142
[#210 'true']: s#86
[#210 'u32']: s#92
[#210 'vec2']: s#97
[#210 'vec3']: s#98
[#210 'vec4']: s#99
[#210 '~']: s#63
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#210 /0[fh]/]: s#112
[#210 /0[iu]?/]: s#109
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#210 /[1-9][0-9]*[fh]/]: s#113
[#210 /[1-9][0-9]*[iu]?/]: s#110
[#211 '!']: s#62
[#211 '&']: s#65
[#211 '(']: s#77
[#211 '*']: s#64
[#211 '-']: s#61
[#211 'array']: s#81
[#211 'atomic']: s#95
[#211 'bitcast']: s#71
[#211 'bool']: s#88
[#211 'f16']: s#90
[#211 'f32']: s#89
[#211 'false']: s#87
[#211 'i32']: s#91
[#211 'mat2x2']: s#100
[#211 'mat2x3']: s#101
[#211 'mat2x4']: s#102
[#211 'mat3x2']: s#103
[#211 'mat3x3']: s#104
[#211 'mat3x4']: s#105
[#211 'mat4x2']: s#106
[#211 'mat4x3']: s#107
[#211 'mat4x4']: s#108
[#211 'ptr']: s#93
[#211 'sampler']: s#125
[#211 'sampler_comparison']: s#126
[#211 'texture_1d']: s#132
[#211 'texture_2d']: s#133
[#211 'texture_2d_array']: s#134
[#211 'texture_3d']: s#135
[#211 'texture_cube']: s#136
[#211 'texture_cube_array']: s#137
[#211 'texture_depth_2d']: s#127
[#211 'texture_depth_2d_array']: s#128
[#211 'texture_depth_cube']: s#129
[#211 'texture_depth_cube_array']: s#130
[#211 'texture_depth_multisampled_2d']: s#131
[#211 'texture_multisampled_2d']: s#138
[#211 'texture_storage_1d']: s#139
[#211 'texture_storage_2d']: s#140
[#211 'texture_storage_2d_array']: s#141
[#211 'texture_storage_3d']: s#142
[#211 'true']: s#86
[#211 'u32']: s#92
[#211 'vec2']: s#97
[#211 'vec3']: s#98
[#211 'vec4']: s#99
[#211 '~']: s#63
[#211 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#211 /0[fh]/]: s#112
[#211 /0[iu]?/]: s#109
[#211 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#211 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#211 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#211 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#211 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#211 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#211 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#211 /[1-9][0-9]*[fh]/]: s#113
[#211 /[1-9][0-9]*[iu]?/]: s#110
[#212 '!']: s#62
[#212 '&']: s#65
[#212 '(']: s#77
[#212 '*']: s#64
[#212 '-']: s#61
[#212 'array']: s#81
[#212 'atomic']: s#95
[#212 'bitcast']: s#71
[#212 'bool']: s#88
[#212 'f16']: s#90
[#212 'f32']: s#89
[#212 'false']: s#87
[#212 'i32']: s#91
[#212 'mat2x2']: s#100
[#212 'mat2x3']: s#101
[#212 'mat2x4']: s#102
[#212 'mat3x2']: s#103
[#212 'mat3x3']: s#104
[#212 'mat3x4']: s#105
[#212 'mat4x2']: s#106
[#212 'mat4x3']: s#107
[#212 'mat4x4']: s#108
[#212 'ptr']: s#93
[#212 'sampler']: s#125
[#212 'sampler_comparison']: s#126
[#212 'texture_1d']: s#132
[#212 'texture_2d']: s#133
[#212 'texture_2d_array']: s#134
[#212 'texture_3d']: s#135
[#212 'texture_cube']: s#136
[#212 'texture_cube_array']: s#137
[#212 'texture_depth_2d']: s#127
[#212 'texture_depth_2d_array']: s#128
[#212 'texture_depth_cube']: s#129
[#212 'texture_depth_cube_array']: s#130
[#212 'texture_depth_multisampled_2d']: s#131
[#212 'texture_multisampled_2d']: s#138
[#212 'texture_storage_1d']: s#139
[#212 'texture_storage_2d']: s#140
[#212 'texture_storage_2d_array']: s#141
[#212 'texture_storage_3d']: s#142
[#212 'true']: s#86
[#212 'u32']: s#92
[#212 'vec2']: s#97
[#212 'vec3']: s#98
[#212 'vec4']: s#99
[#212 '~']: s#63
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#212 /0[fh]/]: s#112
[#212 /0[iu]?/]: s#109
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#212 /[1-9][0-9]*[fh]/]: s#113
[#212 /[1-9][0-9]*[iu]?/]: s#110
[#213 '!']: s#62
[#213 '&']: s#65
[#213 '(']: s#77
[#213 '*']: s#64
[#213 '-']: s#61
[#213 'array']: s#81
[#213 'atomic']: s#95
[#213 'bitcast']: s#71
[#213 'bool']: s#88
[#213 'f16']: s#90
[#213 'f32']: s#89
[#213 'false']: s#87
[#213 'i32']: s#91
[#213 'mat2x2']: s#100
[#213 'mat2x3']: s#101
[#213 'mat2x4']: s#102
[#213 'mat3x2']: s#103
[#213 'mat3x3']: s#104
[#213 'mat3x4']: s#105
[#213 'mat4x2']: s#106
[#213 'mat4x3']: s#107
[#213 'mat4x4']: s#108
[#213 'ptr']: s#93
[#213 'sampler']: s#125
[#213 'sampler_comparison']: s#126
[#213 'texture_1d']: s#132
[#213 'texture_2d']: s#133
[#213 'texture_2d_array']: s#134
[#213 'texture_3d']: s#135
[#213 'texture_cube']: s#136
[#213 'texture_cube_array']: s#137
[#213 'texture_depth_2d']: s#127
[#213 'texture_depth_2d_array']: s#128
[#213 'texture_depth_cube']: s#129
[#213 'texture_depth_cube_array']: s#130
[#213 'texture_depth_multisampled_2d']: s#131
[#213 'texture_multisampled_2d']: s#138
[#213 'texture_storage_1d']: s#139
[#213 'texture_storage_2d']: s#140
[#213 'texture_storage_2d_array']: s#141
[#213 'texture_storage_3d']: s#142
[#213 'true']: s#86
[#213 'u32']: s#92
[#213 'vec2']: s#97
[#213 'vec3']: s#98
[#213 'vec4']: s#99
[#213 '~']: s#63
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#213 /0[fh]/]: s#112
[#213 /0[iu]?/]: s#109
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#213 /[1-9][0-9]*[fh]/]: s#113
[#213 /[1-9][0-9]*[iu]?/]: s#110
[#214 '!']: s#62
[#214 '&']: s#65
[#214 '(']: s#77
[#214 '*']: s#64
[#214 '-']: s#61
[#214 'array']: s#81
[#214 'atomic']: s#95
[#214 'bitcast']: s#71
[#214 'bool']: s#88
[#214 'f16']: s#90
[#214 'f32']: s#89
[#214 'false']: s#87
[#214 'i32']: s#91
[#214 'mat2x2']: s#100
[#214 'mat2x3']: s#101
[#214 'mat2x4']: s#102
[#214 'mat3x2']: s#103
[#214 'mat3x3']: s#104
[#214 'mat3x4']: s#105
[#214 'mat4x2']: s#106
[#214 'mat4x3']: s#107
[#214 'mat4x4']: s#108
[#214 'ptr']: s#93
[#214 'sampler']: s#125
[#214 'sampler_comparison']: s#126
[#214 'texture_1d']: s#132
[#214 'texture_2d']: s#133
[#214 'texture_2d_array']: s#134
[#214 'texture_3d']: s#135
[#214 'texture_cube']: s#136
[#214 'texture_cube_array']: s#137
[#214 'texture_depth_2d']: s#127
[#214 'texture_depth_2d_array']: s#128
[#214 'texture_depth_cube']: s#129
[#214 'texture_depth_cube_array']: s#130
[#214 'texture_depth_multisampled_2d']: s#131
[#214 'texture_multisampled_2d']: s#138
[#214 'texture_storage_1d']: s#139
[#214 'texture_storage_2d']: s#140
[#214 'texture_storage_2d_array']: s#141
[#214 'texture_storage_3d']: s#142
[#214 'true']: s#86
[#214 'u32']: s#92
[#214 'vec2']: s#97
[#214 'vec3']: s#98
[#214 'vec4']: s#99
[#214 '~']: s#63
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#214 /0[fh]/]: s#112
[#214 /0[iu]?/]: s#109
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#214 /[1-9][0-9]*[fh]/]: s#113
[#214 /[1-9][0-9]*[iu]?/]: s#110
[#215 '!']: s#62
[#215 '&']: s#65
[#215 '(']: s#77
[#215 '*']: s#64
[#215 '-']: s#61
[#215 'array']: s#81
[#215 'atomic']: s#95
[#215 'bitcast']: s#71
[#215 'bool']: s#88
[#215 'f16']: s#90
[#215 'f32']: s#89
[#215 'false']: s#87
[#215 'i32']: s#91
[#215 'mat2x2']: s#100
[#215 'mat2x3']: s#101
[#215 'mat2x4']: s#102
[#215 'mat3x2']: s#103
[#215 'mat3x3']: s#104
[#215 'mat3x4']: s#105
[#215 'mat4x2']: s#106
[#215 'mat4x3']: s#107
[#215 'mat4x4']: s#108
[#215 'ptr']: s#93
[#215 'sampler']: s#125
[#215 'sampler_comparison']: s#126
[#215 'texture_1d']: s#132
[#215 'texture_2d']: s#133
[#215 'texture_2d_array']: s#134
[#215 'texture_3d']: s#135
[#215 'texture_cube']: s#136
[#215 'texture_cube_array']: s#137
[#215 'texture_depth_2d']: s#127
[#215 'texture_depth_2d_array']: s#128
[#215 'texture_depth_cube']: s#129
[#215 'texture_depth_cube_array']: s#130
[#215 'texture_depth_multisampled_2d']: s#131
[#215 'texture_multisampled_2d']: s#138
[#215 'texture_storage_1d']: s#139
[#215 'texture_storage_2d']: s#140
[#215 'texture_storage_2d_array']: s#141
[#215 'texture_storage_3d']: s#142
[#215 'true']: s#86
[#215 'u32']: s#92
[#215 'vec2']: s#97
[#215 'vec3']: s#98
[#215 'vec4']: s#99
[#215 '~']: s#63
[#215 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#215 /0[fh]/]: s#112
[#215 /0[iu]?/]: s#109
[#215 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#215 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#215 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#215 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#215 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#215 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#215 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#215 /[1-9][0-9]*[fh]/]: s#113
[#215 /[1-9][0-9]*[iu]?/]: s#110
[#216 '!']: s#62
[#216 '&']: s#65
[#216 '(']: s#77
[#216 '*']: s#64
[#216 '-']: s#61
[#216 'array']: s#81
[#216 'atomic']: s#95
[#216 'bitcast']: s#71
[#216 'bool']: s#88
[#216 'f16']: s#90
[#216 'f32']: s#89
[#216 'false']: s#87
[#216 'i32']: s#91
[#216 'mat2x2']: s#100
[#216 'mat2x3']: s#101
[#216 'mat2x4']: s#102
[#216 'mat3x2']: s#103
[#216 'mat3x3']: s#104
[#216 'mat3x4']: s#105
[#216 'mat4x2']: s#106
[#216 'mat4x3']: s#107
[#216 'mat4x4']: s#108
[#216 'ptr']: s#93
[#216 'sampler']: s#125
[#216 'sampler_comparison']: s#126
[#216 'texture_1d']: s#132
[#216 'texture_2d']: s#133
[#216 'texture_2d_array']: s#134
[#216 'texture_3d']: s#135
[#216 'texture_cube']: s#136
[#216 'texture_cube_array']: s#137
[#216 'texture_depth_2d']: s#127
[#216 'texture_depth_2d_array']: s#128
[#216 'texture_depth_cube']: s#129
[#216 'texture_depth_cube_array']: s#130
[#216 'texture_depth_multisampled_2d']: s#131
[#216 'texture_multisampled_2d']: s#138
[#216 'texture_storage_1d']: s#139
[#216 'texture_storage_2d']: s#140
[#216 'texture_storage_2d_array']: s#141
[#216 'texture_storage_3d']: s#142
[#216 'true']: s#86
[#216 'u32']: s#92
[#216 'vec2']: s#97
[#216 'vec3']: s#98
[#216 'vec4']: s#99
[#216 '~']: s#63
[#216 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#216 /0[fh]/]: s#112
[#216 /0[iu]?/]: s#109
[#216 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#216 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#216 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#216 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#216 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#216 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#216 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#216 /[1-9][0-9]*[fh]/]: s#113
[#216 /[1-9][0-9]*[iu]?/]: s#110
[#217 'flat']: s#243
[#217 'linear']: s#242
[#217 'perspective']: s#241
[#218 '!']: s#62
[#218 '&']: s#65
[#218 '(']: s#77
[#218 '*']: s#64
[#218 '-']: s#61
[#218 'array']: s#81
[#218 'atomic']: s#95
[#218 'bitcast']: s#71
[#218 'bool']: s#88
[#218 'f16']: s#90
[#218 'f32']: s#89
[#218 'false']: s#87
[#218 'i32']: s#91
[#218 'mat2x2']: s#100
[#218 'mat2x3']: s#101
[#218 'mat2x4']: s#102
[#218 'mat3x2']: s#103
[#218 'mat3x3']: s#104
[#218 'mat3x4']: s#105
[#218 'mat4x2']: s#106
[#218 'mat4x3']: s#107
[#218 'mat4x4']: s#108
[#218 'ptr']: s#93
[#218 'sampler']: s#125
[#218 'sampler_comparison']: s#126
[#218 'texture_1d']: s#132
[#218 'texture_2d']: s#133
[#218 'texture_2d_array']: s#134
[#218 'texture_3d']: s#135
[#218 'texture_cube']: s#136
[#218 'texture_cube_array']: s#137
[#218 'texture_depth_2d']: s#127
[#218 'texture_depth_2d_array']: s#128
[#218 'texture_depth_cube']: s#129
[#218 'texture_depth_cube_array']: s#130
[#218 'texture_depth_multisampled_2d']: s#131
[#218 'texture_multisampled_2d']: s#138
[#218 'texture_storage_1d']: s#139
[#218 'texture_storage_2d']: s#140
[#218 'texture_storage_2d_array']: s#141
[#218 'texture_storage_3d']: s#142
[#218 'true']: s#86
[#218 'u32']: s#92
[#218 'vec2']: s#97
[#218 'vec3']: s#98
[#218 'vec4']: s#99
[#218 '~']: s#63
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#218 /0[fh]/]: s#112
[#218 /0[iu]?/]: s#109
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#218 /[1-9][0-9]*[fh]/]: s#113
[#218 /[1-9][0-9]*[iu]?/]: s#110
[#219 '!']: s#62
[#219 '&']: s#65
[#219 '(']: s#77
[#219 '*']: s#64
[#219 '-']: s#61
[#219 'array']: s#81
[#219 'atomic']: s#95
[#219 'bitcast']: s#71
[#219 'bool']: s#88
[#219 'f16']: s#90
[#219 'f32']: s#89
[#219 'false']: s#87
[#219 'i32']: s#91
[#219 'mat2x2']: s#100
[#219 'mat2x3']: s#101
[#219 'mat2x4']: s#102
[#219 'mat3x2']: s#103
[#219 'mat3x3']: s#104
[#219 'mat3x4']: s#105
[#219 'mat4x2']: s#106
[#219 'mat4x3']: s#107
[#219 'mat4x4']: s#108
[#219 'ptr']: s#93
[#219 'sampler']: s#125
[#219 'sampler_comparison']: s#126
[#219 'texture_1d']: s#132
[#219 'texture_2d']: s#133
[#219 'texture_2d_array']: s#134
[#219 'texture_3d']: s#135
[#219 'texture_cube']: s#136
[#219 'texture_cube_array']: s#137
[#219 'texture_depth_2d']: s#127
[#219 'texture_depth_2d_array']: s#128
[#219 'texture_depth_cube']: s#129
[#219 'texture_depth_cube_array']: s#130
[#219 'texture_depth_multisampled_2d']: s#131
[#219 'texture_multisampled_2d']: s#138
[#219 'texture_storage_1d']: s#139
[#219 'texture_storage_2d']: s#140
[#219 'texture_storage_2d_array']: s#141
[#219 'texture_storage_3d']: s#142
[#219 'true']: s#86
[#219 'u32']: s#92
[#219 'vec2']: s#97
[#219 'vec3']: s#98
[#219 'vec4']: s#99
[#219 '~']: s#63
[#219 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#219 /0[fh]/]: s#112
[#219 /0[iu]?/]: s#109
[#219 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#219 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#219 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#219 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#219 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#219 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#219 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#219 /[1-9][0-9]*[fh]/]: s#113
[#219 /[1-9][0-9]*[iu]?/]: s#110
[#220 'frag_depth']: s#230
[#220 'front_facing']: s#229
[#220 'global_invocation_id']: s#233
[#220 'instance_index']: s#227
[#220 'local_invocation_id']: s#231
[#220 'local_invocation_index']: s#232
[#220 'num_workgroups']: s#235
[#220 'position']: s#228
[#220 'sample_index']: s#236
[#220 'sample_mask']: s#237
[#220 'vertex_index']: s#226
[#220 'workgroup_id']: s#234
[#221 '!']: s#62
[#221 '&']: s#65
[#221 '(']: s#77
[#221 '*']: s#64
[#221 '-']: s#61
[#221 'array']: s#81
[#221 'atomic']: s#95
[#221 'bitcast']: s#71
[#221 'bool']: s#88
[#221 'f16']: s#90
[#221 'f32']: s#89
[#221 'false']: s#87
[#221 'i32']: s#91
[#221 'mat2x2']: s#100
[#221 'mat2x3']: s#101
[#221 'mat2x4']: s#102
[#221 'mat3x2']: s#103
[#221 'mat3x3']: s#104
[#221 'mat3x4']: s#105
[#221 'mat4x2']: s#106
[#221 'mat4x3']: s#107
[#221 'mat4x4']: s#108
[#221 'ptr']: s#93
[#221 'sampler']: s#125
[#221 'sampler_comparison']: s#126
[#221 'texture_1d']: s#132
[#221 'texture_2d']: s#133
[#221 'texture_2d_array']: s#134
[#221 'texture_3d']: s#135
[#221 'texture_cube']: s#136
[#221 'texture_cube_array']: s#137
[#221 'texture_depth_2d']: s#127
[#221 'texture_depth_2d_array']: s#128
[#221 'texture_depth_cube']: s#129
[#221 'texture_depth_cube_array']: s#130
[#221 'texture_depth_multisampled_2d']: s#131
[#221 'texture_multisampled_2d']: s#138
[#221 'texture_storage_1d']: s#139
[#221 'texture_storage_2d']: s#140
[#221 'texture_storage_2d_array']: s#141
[#221 'texture_storage_3d']: s#142
[#221 'true']: s#86
[#221 'u32']: s#92
[#221 'vec2']: s#97
[#221 'vec3']: s#98
[#221 'vec4']: s#99
[#221 '~']: s#63
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#221 /0[fh]/]: s#112
[#221 /0[iu]?/]: s#109
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#221 /[1-9][0-9]*[fh]/]: s#113
[#221 /[1-9][0-9]*[iu]?/]: s#110
[#222 '!']: s#62
[#222 '&']: s#65
[#222 '(']: s#77
[#222 '*']: s#64
[#222 '-']: s#61
[#222 'array']: s#81
[#222 'atomic']: s#95
[#222 'bitcast']: s#71
[#222 'bool']: s#88
[#222 'f16']: s#90
[#222 'f32']: s#89
[#222 'false']: s#87
[#222 'i32']: s#91
[#222 'mat2x2']: s#100
[#222 'mat2x3']: s#101
[#222 'mat2x4']: s#102
[#222 'mat3x2']: s#103
[#222 'mat3x3']: s#104
[#222 'mat3x4']: s#105
[#222 'mat4x2']: s#106
[#222 'mat4x3']: s#107
[#222 'mat4x4']: s#108
[#222 'ptr']: s#93
[#222 'sampler']: s#125
[#222 'sampler_comparison']: s#126
[#222 'texture_1d']: s#132
[#222 'texture_2d']: s#133
[#222 'texture_2d_array']: s#134
[#222 'texture_3d']: s#135
[#222 'texture_cube']: s#136
[#222 'texture_cube_array']: s#137
[#222 'texture_depth_2d']: s#127
[#222 'texture_depth_2d_array']: s#128
[#222 'texture_depth_cube']: s#129
[#222 'texture_depth_cube_array']: s#130
[#222 'texture_depth_multisampled_2d']: s#131
[#222 'texture_multisampled_2d']: s#138
[#222 'texture_storage_1d']: s#139
[#222 'texture_storage_2d']: s#140
[#222 'texture_storage_2d_array']: s#141
[#222 'texture_storage_3d']: s#142
[#222 'true']: s#86
[#222 'u32']: s#92
[#222 'vec2']: s#97
[#222 'vec3']: s#98
[#222 'vec4']: s#99
[#222 '~']: s#63
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#222 /0[fh]/]: s#112
[#222 /0[iu]?/]: s#109
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#222 /[1-9][0-9]*[fh]/]: s#113
[#222 /[1-9][0-9]*[iu]?/]: s#110
[#223 ',']: s#455
[#224 ',']: s#455
[#225 ',']: s#455
[#238 ',']: s#455
[#239 ',']: s#455
[#240 ',']: s#458
[#244 ',']: s#455
[#245 ',']: s#455
[#246 ',']: s#452
[#248 '<<']: s#198
[#248 '>>']: s#199
[#259 '%']: s#197
[#259 '*']: s#195
[#259 '/']: s#196
[#264 '.']: s#188
[#264 '[']: s#187
[#265 '.']: s#188
[#265 '[']: s#187
[#275 ']']: s#446
[#276 '>']: s#445
[#279 '<']: s#180
[#280 '<']: s#179
[#281 '<']: s#178
[#282 ')']: s#444
[#284 ',']: s#443
[#286 '>']: s#439
[#287 '>']: s#438
[#288 ',']: s#437
[#289 ',']: s#435
[#295 '>']: s#434
[#296 '>']: s#433
[#297 '>']: s#432
[#298 ',']: s#431
[#315 '}']: s#430
[#317 '&']: s#354
[#317 '(']: s#355
[#317 '*']: s#353
[#317 ';']: s#318
[#317 '_']: s#351
[#317 'array']: s#81
[#317 'atomic']: s#95
[#317 'bool']: s#88
[#317 'break']: s#343
[#317 'const']: s#342
[#317 'continue']: s#344
[#317 'discard']: s#329
[#317 'f16']: s#90
[#317 'f32']: s#89
[#317 'for']: s#337
[#317 'i32']: s#91
[#317 'if']: s#348
[#317 'let']: s#341
[#317 'loop']: s#336
[#317 'mat2x2']: s#100
[#317 'mat2x3']: s#101
[#317 'mat2x4']: s#102
[#317 'mat3x2']: s#103
[#317 'mat3x3']: s#104
[#317 'mat3x4']: s#105
[#317 'mat4x2']: s#106
[#317 'mat4x3']: s#107
[#317 'mat4x4']: s#108
[#317 'ptr']: s#93
[#317 'return']: s#333
[#317 'sampler']: s#125
[#317 'sampler_comparison']: s#126
[#317 'static_assert']: s#25
[#317 'switch']: s#335
[#317 'texture_1d']: s#132
[#317 'texture_2d']: s#133
[#317 'texture_2d_array']: s#134
[#317 'texture_3d']: s#135
[#317 'texture_cube']: s#136
[#317 'texture_cube_array']: s#137
[#317 'texture_depth_2d']: s#127
[#317 'texture_depth_2d_array']: s#128
[#317 'texture_depth_cube']: s#129
[#317 'texture_depth_cube_array']: s#130
[#317 'texture_depth_multisampled_2d']: s#131
[#317 'texture_multisampled_2d']: s#138
[#317 'texture_storage_1d']: s#139
[#317 'texture_storage_2d']: s#140
[#317 'texture_storage_2d_array']: s#141
[#317 'texture_storage_3d']: s#142
[#317 'u32']: s#92
[#317 'var']: s#151
[#317 'vec2']: s#97
[#317 'vec3']: s#98
[#317 'vec4']: s#99
[#317 'while']: s#338
[#317 '{']: s#172
[#317 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#318 'break']: r#26
[#318 'continue']: r#26
[#318 'f16']: r#26
[#318 'texture_multisampled_2d']: r#26
[#319 ';']: s#428
[#320 'break']: r#27
[#320 'continue']: r#27
[#320 'f16']: r#27
[#320 'texture_multisampled_2d']: r#27
[#321 'break']: r#28
[#321 'continue']: r#28
[#321 'f16']: r#28
[#321 'texture_multisampled_2d']: r#28
[#322 'break']: r#29
[#322 'continue']: r#29
[#322 'f16']: r#29
[#322 'texture_multisampled_2d']: r#29
[#323 'break']: r#30
[#323 'continue']: r#30
[#323 'f16']: r#30
[#323 'texture_multisampled_2d']: r#30
[#324 'break']: r#31
[#324 'continue']: r#31
[#324 'f16']: r#31
[#324 'texture_multisampled_2d']: r#31
[#325 ';']: s#427
[#326 ';']: s#426
[#327 ';']: s#425
[#328 ';']: s#424
[#329 ';']: s#423
[#330 ';']: s#422
[#331 'break']: r#32
[#331 'continue']: r#32
[#331 'f16']: r#32
[#331 'texture_multisampled_2d']: r#32
[#332 ';']: s#421
[#333 '!']: s#62
[#333 '&']: s#65
[#333 '(']: s#77
[#333 '*']: s#64
[#333 '-']: s#61
[#333 'array']: s#81
[#333 'atomic']: s#95
[#333 'bitcast']: s#71
[#333 'bool']: s#88
[#333 'f16']: s#90
[#333 'f32']: s#89
[#333 'false']: s#87
[#333 'i32']: s#91
[#333 'mat2x2']: s#100
[#333 'mat2x3']: s#101
[#333 'mat2x4']: s#102
[#333 'mat3x2']: s#103
[#333 'mat3x3']: s#104
[#333 'mat3x4']: s#105
[#333 'mat4x2']: s#106
[#333 'mat4x3']: s#107
[#333 'mat4x4']: s#108
[#333 'ptr']: s#93
[#333 'sampler']: s#125
[#333 'sampler_comparison']: s#126
[#333 'texture_1d']: s#132
[#333 'texture_2d']: s#133
[#333 'texture_2d_array']: s#134
[#333 'texture_3d']: s#135
[#333 'texture_cube']: s#136
[#333 'texture_cube_array']: s#137
[#333 'texture_depth_2d']: s#127
[#333 'texture_depth_2d_array']: s#128
[#333 'texture_depth_cube']: s#129
[#333 'texture_depth_cube_array']: s#130
[#333 'texture_depth_multisampled_2d']: s#131
[#333 'texture_multisampled_2d']: s#138
[#333 'texture_storage_1d']: s#139
[#333 'texture_storage_2d']: s#140
[#333 'texture_storage_2d_array']: s#141
[#333 'texture_storage_3d']: s#142
[#333 'true']: s#86
[#333 'u32']: s#92
[#333 'vec2']: s#97
[#333 'vec3']: s#98
[#333 'vec4']: s#99
[#333 '~']: s#63
[#333 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#333 /0[fh]/]: s#112
[#333 /0[iu]?/]: s#109
[#333 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#333 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#333 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#333 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#333 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#333 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#333 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#333 /[1-9][0-9]*[fh]/]: s#113
[#333 /[1-9][0-9]*[iu]?/]: s#110
[#334 'else']: s#418
[#335 '!']: s#62
[#335 '&']: s#65
[#335 '(']: s#77
[#335 '*']: s#64
[#335 '-']: s#61
[#335 'array']: s#81
[#335 'atomic']: s#95
[#335 'bitcast']: s#71
[#335 'bool']: s#88
[#335 'f16']: s#90
[#335 'f32']: s#89
[#335 'false']: s#87
[#335 'i32']: s#91
[#335 'mat2x2']: s#100
[#335 'mat2x3']: s#101
[#335 'mat2x4']: s#102
[#335 'mat3x2']: s#103
[#335 'mat3x3']: s#104
[#335 'mat3x4']: s#105
[#335 'mat4x2']: s#106
[#335 'mat4x3']: s#107
[#335 'mat4x4']: s#108
[#335 'ptr']: s#93
[#335 'sampler']: s#125
[#335 'sampler_comparison']: s#126
[#335 'texture_1d']: s#132
[#335 'texture_2d']: s#133
[#335 'texture_2d_array']: s#134
[#335 'texture_3d']: s#135
[#335 'texture_cube']: s#136
[#335 'texture_cube_array']: s#137
[#335 'texture_depth_2d']: s#127
[#335 'texture_depth_2d_array']: s#128
[#335 'texture_depth_cube']: s#129
[#335 'texture_depth_cube_array']: s#130
[#335 'texture_depth_multisampled_2d']: s#131
[#335 'texture_multisampled_2d']: s#138
[#335 'texture_storage_1d']: s#139
[#335 'texture_storage_2d']: s#140
[#335 'texture_storage_2d_array']: s#141
[#335 'texture_storage_3d']: s#142
[#335 'true']: s#86
[#335 'u32']: s#92
[#335 'vec2']: s#97
[#335 'vec3']: s#98
[#335 'vec4']: s#99
[#335 '~']: s#63
[#335 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#335 /0[fh]/]: s#112
[#335 /0[iu]?/]: s#109
[#335 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#335 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#335 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#335 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#335 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#335 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#335 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#335 /[1-9][0-9]*[fh]/]: s#113
[#335 /[1-9][0-9]*[iu]?/]: s#110
[#336 '{']: s#413
[#337 '(']: s#412
[#338 '!']: s#62
[#338 '&']: s#65
[#338 '(']: s#77
[#338 '*']: s#64
[#338 '-']: s#61
[#338 'array']: s#81
[#338 'atomic']: s#95
[#338 'bitcast']: s#71
[#338 'bool']: s#88
[#338 'f16']: s#90
[#338 'f32']: s#89
[#338 'false']: s#87
[#338 'i32']: s#91
[#338 'mat2x2']: s#100
[#338 'mat2x3']: s#101
[#338 'mat2x4']: s#102
[#338 'mat3x2']: s#103
[#338 'mat3x3']: s#104
[#338 'mat3x4']: s#105
[#338 'mat4x2']: s#106
[#338 'mat4x3']: s#107
[#338 'mat4x4']: s#108
[#338 'ptr']: s#93
[#338 'sampler']: s#125
[#338 'sampler_comparison']: s#126
[#338 'texture_1d']: s#132
[#338 'texture_2d']: s#133
[#338 'texture_2d_array']: s#134
[#338 'texture_3d']: s#135
[#338 'texture_cube']: s#136
[#338 'texture_cube_array']: s#137
[#338 'texture_depth_2d']: s#127
[#338 'texture_depth_2d_array']: s#128
[#338 'texture_depth_cube']: s#129
[#338 'texture_depth_cube_array']: s#130
[#338 'texture_depth_multisampled_2d']: s#131
[#338 'texture_multisampled_2d']: s#138
[#338 'texture_storage_1d']: s#139
[#338 'texture_storage_2d']: s#140
[#338 'texture_storage_2d_array']: s#141
[#338 'texture_storage_3d']: s#142
[#338 'true']: s#86
[#338 'u32']: s#92
[#338 'vec2']: s#97
[#338 'vec3']: s#98
[#338 'vec4']: s#99
[#338 '~']: s#63
[#338 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#338 /0[fh]/]: s#112
[#338 /0[iu]?/]: s#109
[#338 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#338 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#338 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#338 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#338 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#338 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#338 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#338 /[1-9][0-9]*[fh]/]: s#113
[#338 /[1-9][0-9]*[iu]?/]: s#110
[#339 '(']: s#183
[#340 '=']: s#409
[#341 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#342 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#348 '!']: s#62
[#348 '&']: s#65
[#348 '(']: s#77
[#348 '*']: s#64
[#348 '-']: s#61
[#348 'array']: s#81
[#348 'atomic']: s#95
[#348 'bitcast']: s#71
[#348 'bool']: s#88
[#348 'f16']: s#90
[#348 'f32']: s#89
[#348 'false']: s#87
[#348 'i32']: s#91
[#348 'mat2x2']: s#100
[#348 'mat2x3']: s#101
[#348 'mat2x4']: s#102
[#348 'mat3x2']: s#103
[#348 'mat3x3']: s#104
[#348 'mat3x4']: s#105
[#348 'mat4x2']: s#106
[#348 'mat4x3']: s#107
[#348 'mat4x4']: s#108
[#348 'ptr']: s#93
[#348 'sampler']: s#125
[#348 'sampler_comparison']: s#126
[#348 'texture_1d']: s#132
[#348 'texture_2d']: s#133
[#348 'texture_2d_array']: s#134
[#348 'texture_3d']: s#135
[#348 'texture_cube']: s#136
[#348 'texture_cube_array']: s#137
[#348 'texture_depth_2d']: s#127
[#348 'texture_depth_2d_array']: s#128
[#348 'texture_depth_cube']: s#129
[#348 'texture_depth_cube_array']: s#130
[#348 'texture_depth_multisampled_2d']: s#131
[#348 'texture_multisampled_2d']: s#138
[#348 'texture_storage_1d']: s#139
[#348 'texture_storage_2d']: s#140
[#348 'texture_storage_2d_array']: s#141
[#348 'texture_storage_3d']: s#142
[#348 'true']: s#86
[#348 'u32']: s#92
[#348 'vec2']: s#97
[#348 'vec3']: s#98
[#348 'vec4']: s#99
[#348 '~']: s#63
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#348 /0[fh]/]: s#112
[#348 /0[iu]?/]: s#109
[#348 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#348 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#348 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#348 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#348 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#348 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#348 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#348 /[1-9][0-9]*[fh]/]: s#113
[#348 /[1-9][0-9]*[iu]?/]: s#110
[#350 '%=']: s#400
[#350 '&=']: s#401
[#350 '*=']: s#398
[#350 '++']: s#392
[#350 '+=']: s#396
[#350 '--']: s#393
[#350 '-=']: s#397
[#350 '/=']: s#399
[#350 '<<=']: s#405
[#350 '=']: s#394
[#350 '>>=']: s#404
[#350 '^=']: s#403
[#350 '|=']: s#402
[#351 '=']: s#390
[#352 '.']: s#188
[#352 '[']: s#187
[#353 '&']: s#354
[#353 '(']: s#355
[#353 '*']: s#353
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#354 '&']: s#354
[#354 '(']: s#355
[#354 '*']: s#353
[#354 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#355 '&']: s#354
[#355 '(']: s#355
[#355 '*']: s#353
[#355 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#356 '@']: s#30
[#357 ',']: s#377
[#358 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#266
[#360 '@']: s#30
[#363 '!']: s#62
[#363 '&']: s#65
[#363 '(']: s#77
[#363 '*']: s#64
[#363 '-']: s#61
[#363 'array']: s#81
[#363 'atomic']: s#95
[#363 'bitcast']: s#71
[#363 'bool']: s#88
[#363 'f16']: s#90
[#363 'f32']: s#89
[#363 'false']: s#87
[#363 'i32']: s#91
[#363 'mat2x2']: s#100
[#363 'mat2x3']: s#101
[#363 'mat2x4']: s#102
[#363 'mat3x2']: s#103
[#363 'mat3x3']: s#104
[#363 'mat3x4']: s#105
[#363 'mat4x2']: s#106
[#363 'mat4x3']: s#107
[#363 'mat4x4']: s#108
[#363 'ptr']: s#93
[#363 'sampler']: s#125
[#363 'sampler_comparison']: s#126
[#363 'texture_1d']: s#132
[#363 'texture_2d']: s#133
[#363 'texture_2d_array']: s#134
[#363 'texture_3d']: s#135
[#363 'texture_cube']: s#136
[#363 'texture_cube_array']: s#137
[#363 'texture_depth_2d']: s#127
[#363 'texture_depth_2d_array']: s#128
[#363 'texture_depth_cube']: s#129
[#363 'texture_depth_cube_array']: s#130
[#363 'texture_depth_multisampled_2d']: s#131
[#363 'texture_multisampled_2d']: s#138
[#363 'texture_storage_1d']: s#139
[#363 'texture_storage_2d']: s#140
[#363 'texture_storage_2d_array']: s#141
[#363 'texture_storage_3d']: s#142
[#363 'true']: s#86
[#363 'u32']: s#92
[#363 'vec2']: s#97
[#363 'vec3']: s#98
[#363 'vec4']: s#99
[#363 '~']: s#63
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#363 /0[fh]/]: s#112
[#363 /0[iu]?/]: s#109
[#363 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#363 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#363 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#363 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#363 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#363 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#363 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#363 /[1-9][0-9]*[fh]/]: s#113
[#363 /[1-9][0-9]*[iu]?/]: s#110
[#367 ',']: s#370
[#369 '>']: s#523
[#370 'read']: s#484
[#370 'read_write']: s#486
[#370 'write']: s#485
[#373 ':']: s#521
[#374 ',']: s#520
[#376 ',']: s#377
[#377 '@']: s#30
[#378 ')']: s#516
[#380 ',']: s#515
[#381 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#383 '@']: s#30
[#384 ')']: s#509
[#390 '!']: s#62
[#390 '&']: s#65
[#390 '(']: s#77
[#390 '*']: s#64
[#390 '-']: s#61
[#390 'array']: s#81
[#390 'atomic']: s#95
[#390 'bitcast']: s#71
[#390 'bool']: s#88
[#390 'f16']: s#90
[#390 'f32']: s#89
[#390 'false']: s#87
[#390 'i32']: s#91
[#390 'mat2x2']: s#100
[#390 'mat2x3']: s#101
[#390 'mat2x4']: s#102
[#390 'mat3x2']: s#103
[#390 'mat3x3']: s#104
[#390 'mat3x4']: s#105
[#390 'mat4x2']: s#106
[#390 'mat4x3']: s#107
[#390 'mat4x4']: s#108
[#390 'ptr']: s#93
[#390 'sampler']: s#125
[#390 'sampler_comparison']: s#126
[#390 'texture_1d']: s#132
[#390 'texture_2d']: s#133
[#390 'texture_2d_array']: s#134
[#390 'texture_3d']: s#135
[#390 'texture_cube']: s#136
[#390 'texture_cube_array']: s#137
[#390 'texture_depth_2d']: s#127
[#390 'texture_depth_2d_array']: s#128
[#390 'texture_depth_cube']: s#129
[#390 'texture_depth_cube_array']: s#130
[#390 'texture_depth_multisampled_2d']: s#131
[#390 'texture_multisampled_2d']: s#138
[#390 'texture_storage_1d']: s#139
[#390 'texture_storage_2d']: s#140
[#390 'texture_storage_2d_array']: s#141
[#390 'texture_storage_3d']: s#142
[#390 'true']: s#86
[#390 'u32']: s#92
[#390 'vec2']: s#97
[#390 'vec3']: s#98
[#390 'vec4']: s#99
[#390 '~']: s#63
[#390 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#390 /0[fh]/]: s#112
[#390 /0[iu]?/]: s#109
[#390 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#390 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#390 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#390 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#390 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#390 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#390 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#390 /[1-9][0-9]*[fh]/]: s#113
[#390 /[1-9][0-9]*[iu]?/]: s#110
[#391 '!']: s#62
[#391 '&']: s#65
[#391 '(']: s#77
[#391 '*']: s#64
[#391 '-']: s#61
[#391 'array']: s#81
[#391 'atomic']: s#95
[#391 'bitcast']: s#71
[#391 'bool']: s#88
[#391 'f16']: s#90
[#391 'f32']: s#89
[#391 'false']: s#87
[#391 'i32']: s#91
[#391 'mat2x2']: s#100
[#391 'mat2x3']: s#101
[#391 'mat2x4']: s#102
[#391 'mat3x2']: s#103
[#391 'mat3x3']: s#104
[#391 'mat3x4']: s#105
[#391 'mat4x2']: s#106
[#391 'mat4x3']: s#107
[#391 'mat4x4']: s#108
[#391 'ptr']: s#93
[#391 'sampler']: s#125
[#391 'sampler_comparison']: s#126
[#391 'texture_1d']: s#132
[#391 'texture_2d']: s#133
[#391 'texture_2d_array']: s#134
[#391 'texture_3d']: s#135
[#391 'texture_cube']: s#136
[#391 'texture_cube_array']: s#137
[#391 'texture_depth_2d']: s#127
[#391 'texture_depth_2d_array']: s#128
[#391 'texture_depth_cube']: s#129
[#391 'texture_depth_cube_array']: s#130
[#391 'texture_depth_multisampled_2d']: s#131
[#391 'texture_multisampled_2d']: s#138
[#391 'texture_storage_1d']: s#139
[#391 'texture_storage_2d']: s#140
[#391 'texture_storage_2d_array']: s#141
[#391 'texture_storage_3d']: s#142
[#391 'true']: s#86
[#391 'u32']: s#92
[#391 'vec2']: s#97
[#391 'vec3']: s#98
[#391 'vec4']: s#99
[#391 '~']: s#63
[#391 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#391 /0[fh]/]: s#112
[#391 /0[iu]?/]: s#109
[#391 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#391 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#391 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#391 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#391 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#391 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#391 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#391 /[1-9][0-9]*[fh]/]: s#113
[#391 /[1-9][0-9]*[iu]?/]: s#110
[#394 /0[xX][0-9a-fA-F]+[iu]?/]: r#33
[#395 /0[xX][0-9a-fA-F]+[iu]?/]: r#34
[#396 /0[xX][0-9a-fA-F]+[iu]?/]: r#35
[#397 /0[xX][0-9a-fA-F]+[iu]?/]: r#36
[#398 /0[xX][0-9a-fA-F]+[iu]?/]: r#37
[#399 /0[xX][0-9a-fA-F]+[iu]?/]: r#38
[#400 /0[xX][0-9a-fA-F]+[iu]?/]: r#39
[#401 /0[xX][0-9a-fA-F]+[iu]?/]: r#40
[#402 /0[xX][0-9a-fA-F]+[iu]?/]: r#41
[#403 /0[xX][0-9a-fA-F]+[iu]?/]: r#42
[#404 /0[xX][0-9a-fA-F]+[iu]?/]: r#43
[#405 /0[xX][0-9a-fA-F]+[iu]?/]: r#44
[#406 '{']: s#172
[#407 '=']: s#505
[#408 '=']: s#504
[#409 '!']: s#62
[#409 '&']: s#65
[#409 '(']: s#77
[#409 '*']: s#64
[#409 '-']: s#61
[#409 'array']: s#81
[#409 'atomic']: s#95
[#409 'bitcast']: s#71
[#409 'bool']: s#88
[#409 'f16']: s#90
[#409 'f32']: s#89
[#409 'false']: s#87
[#409 'i32']: s#91
[#409 'mat2x2']: s#100
[#409 'mat2x3']: s#101
[#409 'mat2x4']: s#102
[#409 'mat3x2']: s#103
[#409 'mat3x3']: s#104
[#409 'mat3x4']: s#105
[#409 'mat4x2']: s#106
[#409 'mat4x3']: s#107
[#409 'mat4x4']: s#108
[#409 'ptr']: s#93
[#409 'sampler']: s#125
[#409 'sampler_comparison']: s#126
[#409 'texture_1d']: s#132
[#409 'texture_2d']: s#133
[#409 'texture_2d_array']: s#134
[#409 'texture_3d']: s#135
[#409 'texture_cube']: s#136
[#409 'texture_cube_array']: s#137
[#409 'texture_depth_2d']: s#127
[#409 'texture_depth_2d_array']: s#128
[#409 'texture_depth_cube']: s#129
[#409 'texture_depth_cube_array']: s#130
[#409 'texture_depth_multisampled_2d']: s#131
[#409 'texture_multisampled_2d']: s#138
[#409 'texture_storage_1d']: s#139
[#409 'texture_storage_2d']: s#140
[#409 'texture_storage_2d_array']: s#141
[#409 'texture_storage_3d']: s#142
[#409 'true']: s#86
[#409 'u32']: s#92
[#409 'vec2']: s#97
[#409 'vec3']: s#98
[#409 'vec4']: s#99
[#409 '~']: s#63
[#409 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#409 /0[fh]/]: s#112
[#409 /0[iu]?/]: s#109
[#409 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#409 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#409 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#409 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#409 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#409 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#409 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#409 /[1-9][0-9]*[fh]/]: s#113
[#409 /[1-9][0-9]*[iu]?/]: s#110
[#411 '{']: s#172
[#412 '&']: s#354
[#412 '(']: s#355
[#412 '*']: s#353
[#412 '_']: s#351
[#412 'array']: s#81
[#412 'atomic']: s#95
[#412 'bool']: s#88
[#412 'const']: s#342
[#412 'f16']: s#90
[#412 'f32']: s#89
[#412 'i32']: s#91
[#412 'let']: s#341
[#412 'mat2x2']: s#100
[#412 'mat2x3']: s#101
[#412 'mat2x4']: s#102
[#412 'mat3x2']: s#103
[#412 'mat3x3']: s#104
[#412 'mat3x4']: s#105
[#412 'mat4x2']: s#106
[#412 'mat4x3']: s#107
[#412 'mat4x4']: s#108
[#412 'ptr']: s#93
[#412 'sampler']: s#125
[#412 'sampler_comparison']: s#126
[#412 'texture_1d']: s#132
[#412 'texture_2d']: s#133
[#412 'texture_2d_array']: s#134
[#412 'texture_3d']: s#135
[#412 'texture_cube']: s#136
[#412 'texture_cube_array']: s#137
[#412 'texture_depth_2d']: s#127
[#412 'texture_depth_2d_array']: s#128
[#412 'texture_depth_cube']: s#129
[#412 'texture_depth_cube_array']: s#130
[#412 'texture_depth_multisampled_2d']: s#131
[#412 'texture_multisampled_2d']: s#138
[#412 'texture_storage_1d']: s#139
[#412 'texture_storage_2d']: s#140
[#412 'texture_storage_2d_array']: s#141
[#412 'texture_storage_3d']: s#142
[#412 'u32']: s#92
[#412 'var']: s#151
[#412 'vec2']: s#97
[#412 'vec3']: s#98
[#412 'vec4']: s#99
[#412 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#413 '&']: s#354
[#413 '(']: s#355
[#413 '*']: s#353
[#413 ';']: s#318
[#413 '_']: s#351
[#413 'array']: s#81
[#413 'atomic']: s#95
[#413 'bool']: s#88
[#413 'break']: s#343
[#413 'const']: s#342
[#413 'continue']: s#344
[#413 'discard']: s#329
[#413 'f16']: s#90
[#413 'f32']: s#89
[#413 'for']: s#337
[#413 'i32']: s#91
[#413 'if']: s#348
[#413 'let']: s#341
[#413 'loop']: s#336
[#413 'mat2x2']: s#100
[#413 'mat2x3']: s#101
[#413 'mat2x4']: s#102
[#413 'mat3x2']: s#103
[#413 'mat3x3']: s#104
[#413 'mat3x4']: s#105
[#413 'mat4x2']: s#106
[#413 'mat4x3']: s#107
[#413 'mat4x4']: s#108
[#413 'ptr']: s#93
[#413 'return']: s#333
[#413 'sampler']: s#125
[#413 'sampler_comparison']: s#126
[#413 'static_assert']: s#25
[#413 'switch']: s#335
[#413 'texture_1d']: s#132
[#413 'texture_2d']: s#133
[#413 'texture_2d_array']: s#134
[#413 'texture_3d']: s#135
[#413 'texture_cube']: s#136
[#413 'texture_cube_array']: s#137
[#413 'texture_depth_2d']: s#127
[#413 'texture_depth_2d_array']: s#128
[#413 'texture_depth_cube']: s#129
[#413 'texture_depth_cube_array']: s#130
[#413 'texture_depth_multisampled_2d']: s#131
[#413 'texture_multisampled_2d']: s#138
[#413 'texture_storage_1d']: s#139
[#413 'texture_storage_2d']: s#140
[#413 'texture_storage_2d_array']: s#141
[#413 'texture_storage_3d']: s#142
[#413 'u32']: s#92
[#413 'var']: s#151
[#413 'vec2']: s#97
[#413 'vec3']: s#98
[#413 'vec4']: s#99
[#413 'while']: s#338
[#413 '{']: s#172
[#413 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#414 '{']: s#492
[#415 'else']: s#491
[#416 'break']: r#45
[#416 'continue']: r#45
[#416 'f16']: r#45
[#416 'texture_multisampled_2d']: r#45
[#417 'else']: s#418
[#418 'if']: s#487
[#421 'break']: r#46
[#421 'continue']: r#46
[#421 'f16']: r#46
[#421 'texture_multisampled_2d']: r#46
[#422 'break']: r#47
[#422 'continue']: r#47
[#422 'f16']: r#47
[#422 'texture_multisampled_2d']: r#47
[#423 'break']: r#48
[#423 'continue']: r#48
[#423 'f16']: r#48
[#423 'texture_multisampled_2d']: r#48
[#424 'break']: r#49
[#424 'continue']: r#49
[#424 'f16']: r#49
[#424 'texture_multisampled_2d']: r#49
[#425 'break']: r#50
[#425 'continue']: r#50
[#425 'f16']: r#50
[#425 'texture_multisampled_2d']: r#50
[#426 'break']: r#51
[#426 'continue']: r#51
[#426 'f16']: r#51
[#426 'texture_multisampled_2d']: r#51
[#427 'break']: r#52
[#427 'continue']: r#52
[#427 'f16']: r#52
[#427 'texture_multisampled_2d']: r#52
[#428 'break']: r#53
[#428 'continue']: r#53
[#428 'f16']: r#53
[#428 'texture_multisampled_2d']: r#53
[#430 'break']: r#54
[#430 'continue']: r#54
[#430 'f16']: r#54
[#430 'texture_multisampled_2d']: r#54
[#430 EndOfText]: r#54
[#431 'read']: s#484
[#431 'read_write']: s#486
[#431 'write']: s#485
[#435 'array']: s#281
[#435 'atomic']: s#95
[#435 'bool']: s#88
[#435 'f16']: s#90
[#435 'f32']: s#89
[#435 'i32']: s#91
[#435 'mat2x2']: s#100
[#435 'mat2x3']: s#101
[#435 'mat2x4']: s#102
[#435 'mat3x2']: s#103
[#435 'mat3x3']: s#104
[#435 'mat3x4']: s#105
[#435 'mat4x2']: s#106
[#435 'mat4x3']: s#107
[#435 'mat4x4']: s#108
[#435 'ptr']: s#93
[#435 'sampler']: s#125
[#435 'sampler_comparison']: s#126
[#435 'texture_1d']: s#132
[#435 'texture_2d']: s#133
[#435 'texture_2d_array']: s#134
[#435 'texture_3d']: s#135
[#435 'texture_cube']: s#136
[#435 'texture_cube_array']: s#137
[#435 'texture_depth_2d']: s#127
[#435 'texture_depth_2d_array']: s#128
[#435 'texture_depth_cube']: s#129
[#435 'texture_depth_cube_array']: s#130
[#435 'texture_depth_multisampled_2d']: s#131
[#435 'texture_multisampled_2d']: s#138
[#435 'texture_storage_1d']: s#139
[#435 'texture_storage_2d']: s#140
[#435 'texture_storage_2d_array']: s#141
[#435 'texture_storage_3d']: s#142
[#435 'u32']: s#92
[#435 'vec2']: s#97
[#435 'vec3']: s#98
[#435 'vec4']: s#99
[#435 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#436 '>']: s#481
[#437 '!']: s#62
[#437 '&']: s#65
[#437 '(']: s#77
[#437 '*']: s#64
[#437 '-']: s#61
[#437 'array']: s#81
[#437 'atomic']: s#95
[#437 'bitcast']: s#71
[#437 'bool']: s#88
[#437 'f16']: s#90
[#437 'f32']: s#89
[#437 'false']: s#87
[#437 'i32']: s#91
[#437 'mat2x2']: s#100
[#437 'mat2x3']: s#101
[#437 'mat2x4']: s#102
[#437 'mat3x2']: s#103
[#437 'mat3x3']: s#104
[#437 'mat3x4']: s#105
[#437 'mat4x2']: s#106
[#437 'mat4x3']: s#107
[#437 'mat4x4']: s#108
[#437 'ptr']: s#93
[#437 'sampler']: s#125
[#437 'sampler_comparison']: s#126
[#437 'texture_1d']: s#132
[#437 'texture_2d']: s#133
[#437 'texture_2d_array']: s#134
[#437 'texture_3d']: s#135
[#437 'texture_cube']: s#136
[#437 'texture_cube_array']: s#137
[#437 'texture_depth_2d']: s#127
[#437 'texture_depth_2d_array']: s#128
[#437 'texture_depth_cube']: s#129
[#437 'texture_depth_cube_array']: s#130
[#437 'texture_depth_multisampled_2d']: s#131
[#437 'texture_multisampled_2d']: s#138
[#437 'texture_storage_1d']: s#139
[#437 'texture_storage_2d']: s#140
[#437 'texture_storage_2d_array']: s#141
[#437 'texture_storage_3d']: s#142
[#437 'true']: s#86
[#437 'u32']: s#92
[#437 'vec2']: s#97
[#437 'vec3']: s#98
[#437 'vec4']: s#99
[#437 '~']: s#63
[#437 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#437 /0[fh]/]: s#112
[#437 /0[iu]?/]: s#109
[#437 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#437 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#437 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#437 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#437 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#437 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#437 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#437 /[1-9][0-9]*[fh]/]: s#113
[#437 /[1-9][0-9]*[iu]?/]: s#110
[#440 ',']: s#476
[#442 ',']: s#443
[#443 '!']: s#62
[#443 '&']: s#65
[#443 '(']: s#77
[#443 '*']: s#64
[#443 '-']: s#61
[#443 'array']: s#81
[#443 'atomic']: s#95
[#443 'bitcast']: s#71
[#443 'bool']: s#88
[#443 'f16']: s#90
[#443 'f32']: s#89
[#443 'false']: s#87
[#443 'i32']: s#91
[#443 'mat2x2']: s#100
[#443 'mat2x3']: s#101
[#443 'mat2x4']: s#102
[#443 'mat3x2']: s#103
[#443 'mat3x3']: s#104
[#443 'mat3x4']: s#105
[#443 'mat4x2']: s#106
[#443 'mat4x3']: s#107
[#443 'mat4x4']: s#108
[#443 'ptr']: s#93
[#443 'sampler']: s#125
[#443 'sampler_comparison']: s#126
[#443 'texture_1d']: s#132
[#443 'texture_2d']: s#133
[#443 'texture_2d_array']: s#134
[#443 'texture_3d']: s#135
[#443 'texture_cube']: s#136
[#443 'texture_cube_array']: s#137
[#443 'texture_depth_2d']: s#127
[#443 'texture_depth_2d_array']: s#128
[#443 'texture_depth_cube']: s#129
[#443 'texture_depth_cube_array']: s#130
[#443 'texture_depth_multisampled_2d']: s#131
[#443 'texture_multisampled_2d']: s#138
[#443 'texture_storage_1d']: s#139
[#443 'texture_storage_2d']: s#140
[#443 'texture_storage_2d_array']: s#141
[#443 'texture_storage_3d']: s#142
[#443 'true']: s#86
[#443 'u32']: s#92
[#443 'vec2']: s#97
[#443 'vec3']: s#98
[#443 'vec4']: s#99
[#443 '~']: s#63
[#443 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#443 /0[fh]/]: s#112
[#443 /0[iu]?/]: s#109
[#443 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#443 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#443 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#443 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#443 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#443 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#443 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#443 /[1-9][0-9]*[fh]/]: s#113
[#443 /[1-9][0-9]*[iu]?/]: s#110
[#445 '(']: s#77
[#446 '.']: s#188
[#446 '[']: s#187
[#451 'f16']: r#55
[#451 'texture_multisampled_2d']: r#55
[#452 '!']: s#62
[#452 '&']: s#65
[#452 '(']: s#77
[#452 '*']: s#64
[#452 '-']: s#61
[#452 'array']: s#81
[#452 'atomic']: s#95
[#452 'bitcast']: s#71
[#452 'bool']: s#88
[#452 'f16']: s#90
[#452 'f32']: s#89
[#452 'false']: s#87
[#452 'i32']: s#91
[#452 'mat2x2']: s#100
[#452 'mat2x3']: s#101
[#452 'mat2x4']: s#102
[#452 'mat3x2']: s#103
[#452 'mat3x3']: s#104
[#452 'mat3x4']: s#105
[#452 'mat4x2']: s#106
[#452 'mat4x3']: s#107
[#452 'mat4x4']: s#108
[#452 'ptr']: s#93
[#452 'sampler']: s#125
[#452 'sampler_comparison']: s#126
[#452 'texture_1d']: s#132
[#452 'texture_2d']: s#133
[#452 'texture_2d_array']: s#134
[#452 'texture_3d']: s#135
[#452 'texture_cube']: s#136
[#452 'texture_cube_array']: s#137
[#452 'texture_depth_2d']: s#127
[#452 'texture_depth_2d_array']: s#128
[#452 'texture_depth_cube']: s#129
[#452 'texture_depth_cube_array']: s#130
[#452 'texture_depth_multisampled_2d']: s#131
[#452 'texture_multisampled_2d']: s#138
[#452 'texture_storage_1d']: s#139
[#452 'texture_storage_2d']: s#140
[#452 'texture_storage_2d_array']: s#141
[#452 'texture_storage_3d']: s#142
[#452 'true']: s#86
[#452 'u32']: s#92
[#452 'vec2']: s#97
[#452 'vec3']: s#98
[#452 'vec4']: s#99
[#452 '~']: s#63
[#452 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#452 /0[fh]/]: s#112
[#452 /0[iu]?/]: s#109
[#452 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#452 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#452 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#452 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#452 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#452 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#452 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#452 /[1-9][0-9]*[fh]/]: s#113
[#452 /[1-9][0-9]*[iu]?/]: s#110
[#453 ')']: s#468
[#454 'f16']: r#56
[#454 'texture_multisampled_2d']: r#56
[#456 'f16']: r#57
[#456 'texture_multisampled_2d']: r#57
[#457 'f16']: r#58
[#457 'texture_multisampled_2d']: r#58
[#458 'center']: s#465
[#458 'centroid']: s#466
[#458 'sample']: s#467
[#459 'f16']: r#59
[#459 'texture_multisampled_2d']: r#59
[#460 'f16']: r#60
[#460 'texture_multisampled_2d']: r#60
[#461 'f16']: r#61
[#461 'texture_multisampled_2d']: r#61
[#462 'f16']: r#62
[#462 'texture_multisampled_2d']: r#62
[#463 'f16']: r#63
[#463 'texture_multisampled_2d']: r#63
[#464 ',']: s#455
[#468 'f16']: r#64
[#468 'texture_multisampled_2d']: r#64
[#469 ',']: s#554
[#478 '+']: s#201
[#478 '-']: s#202
[#482 ',']: s#552
[#483 '>']: s#550
[#487 '!']: s#62
[#487 '&']: s#65
[#487 '(']: s#77
[#487 '*']: s#64
[#487 '-']: s#61
[#487 'array']: s#81
[#487 'atomic']: s#95
[#487 'bitcast']: s#71
[#487 'bool']: s#88
[#487 'f16']: s#90
[#487 'f32']: s#89
[#487 'false']: s#87
[#487 'i32']: s#91
[#487 'mat2x2']: s#100
[#487 'mat2x3']: s#101
[#487 'mat2x4']: s#102
[#487 'mat3x2']: s#103
[#487 'mat3x3']: s#104
[#487 'mat3x4']: s#105
[#487 'mat4x2']: s#106
[#487 'mat4x3']: s#107
[#487 'mat4x4']: s#108
[#487 'ptr']: s#93
[#487 'sampler']: s#125
[#487 'sampler_comparison']: s#126
[#487 'texture_1d']: s#132
[#487 'texture_2d']: s#133
[#487 'texture_2d_array']: s#134
[#487 'texture_3d']: s#135
[#487 'texture_cube']: s#136
[#487 'texture_cube_array']: s#137
[#487 'texture_depth_2d']: s#127
[#487 'texture_depth_2d_array']: s#128
[#487 'texture_depth_cube']: s#129
[#487 'texture_depth_cube_array']: s#130
[#487 'texture_depth_multisampled_2d']: s#131
[#487 'texture_multisampled_2d']: s#138
[#487 'texture_storage_1d']: s#139
[#487 'texture_storage_2d']: s#140
[#487 'texture_storage_2d_array']: s#141
[#487 'texture_storage_3d']: s#142
[#487 'true']: s#86
[#487 'u32']: s#92
[#487 'vec2']: s#97
[#487 'vec3']: s#98
[#487 'vec4']: s#99
[#487 '~']: s#63
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#487 /0[fh]/]: s#112
[#487 /0[iu]?/]: s#109
[#487 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#487 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#487 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#487 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#487 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#487 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#487 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#487 /[1-9][0-9]*[fh]/]: s#113
[#487 /[1-9][0-9]*[iu]?/]: s#110
[#488 'break']: r#65
[#488 'continue']: r#65
[#488 'f16']: r#65
[#488 'texture_multisampled_2d']: r#65
[#489 'break']: r#66
[#489 'continue']: r#66
[#489 'f16']: r#66
[#489 'texture_multisampled_2d']: r#66
[#490 'break']: r#67
[#490 'continue']: r#67
[#490 'f16']: r#67
[#490 'texture_multisampled_2d']: r#67
[#491 '{']: s#172
[#492 'case']: s#546
[#492 'default']: s#547
[#493 'continuing']: s#540
[#495 '&']: s#354
[#495 '(']: s#355
[#495 '*']: s#353
[#495 ';']: s#318
[#495 '_']: s#351
[#495 'array']: s#81
[#495 'atomic']: s#95
[#495 'bool']: s#88
[#495 'break']: s#343
[#495 'const']: s#342
[#495 'continue']: s#344
[#495 'discard']: s#329
[#495 'f16']: s#90
[#495 'f32']: s#89
[#495 'for']: s#337
[#495 'i32']: s#91
[#495 'if']: s#348
[#495 'let']: s#341
[#495 'loop']: s#336
[#495 'mat2x2']: s#100
[#495 'mat2x3']: s#101
[#495 'mat2x4']: s#102
[#495 'mat3x2']: s#103
[#495 'mat3x3']: s#104
[#495 'mat3x4']: s#105
[#495 'mat4x2']: s#106
[#495 'mat4x3']: s#107
[#495 'mat4x4']: s#108
[#495 'ptr']: s#93
[#495 'return']: s#333
[#495 'sampler']: s#125
[#495 'sampler_comparison']: s#126
[#495 'static_assert']: s#25
[#495 'switch']: s#335
[#495 'texture_1d']: s#132
[#495 'texture_2d']: s#133
[#495 'texture_2d_array']: s#134
[#495 'texture_3d']: s#135
[#495 'texture_cube']: s#136
[#495 'texture_cube_array']: s#137
[#495 'texture_depth_2d']: s#127
[#495 'texture_depth_2d_array']: s#128
[#495 'texture_depth_cube']: s#129
[#495 'texture_depth_cube_array']: s#130
[#495 'texture_depth_multisampled_2d']: s#131
[#495 'texture_multisampled_2d']: s#138
[#495 'texture_storage_1d']: s#139
[#495 'texture_storage_2d']: s#140
[#495 'texture_storage_2d_array']: s#141
[#495 'texture_storage_3d']: s#142
[#495 'u32']: s#92
[#495 'var']: s#151
[#495 'vec2']: s#97
[#495 'vec3']: s#98
[#495 'vec4']: s#99
[#495 'while']: s#338
[#495 '{']: s#172
[#495 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#496 ')']: s#536
[#497 ';']: s#535
[#502 'break']: r#68
[#502 'continue']: r#68
[#502 'f16']: r#68
[#502 'texture_multisampled_2d']: r#68
[#504 '!']: s#62
[#504 '&']: s#65
[#504 '(']: s#77
[#504 '*']: s#64
[#504 '-']: s#61
[#504 'array']: s#81
[#504 'atomic']: s#95
[#504 'bitcast']: s#71
[#504 'bool']: s#88
[#504 'f16']: s#90
[#504 'f32']: s#89
[#504 'false']: s#87
[#504 'i32']: s#91
[#504 'mat2x2']: s#100
[#504 'mat2x3']: s#101
[#504 'mat2x4']: s#102
[#504 'mat3x2']: s#103
[#504 'mat3x3']: s#104
[#504 'mat3x4']: s#105
[#504 'mat4x2']: s#106
[#504 'mat4x3']: s#107
[#504 'mat4x4']: s#108
[#504 'ptr']: s#93
[#504 'sampler']: s#125
[#504 'sampler_comparison']: s#126
[#504 'texture_1d']: s#132
[#504 'texture_2d']: s#133
[#504 'texture_2d_array']: s#134
[#504 'texture_3d']: s#135
[#504 'texture_cube']: s#136
[#504 'texture_cube_array']: s#137
[#504 'texture_depth_2d']: s#127
[#504 'texture_depth_2d_array']: s#128
[#504 'texture_depth_cube']: s#129
[#504 'texture_depth_cube_array']: s#130
[#504 'texture_depth_multisampled_2d']: s#131
[#504 'texture_multisampled_2d']: s#138
[#504 'texture_storage_1d']: s#139
[#504 'texture_storage_2d']: s#140
[#504 'texture_storage_2d_array']: s#141
[#504 'texture_storage_3d']: s#142
[#504 'true']: s#86
[#504 'u32']: s#92
[#504 'vec2']: s#97
[#504 'vec3']: s#98
[#504 'vec4']: s#99
[#504 '~']: s#63
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#504 /0[fh]/]: s#112
[#504 /0[iu]?/]: s#109
[#504 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#504 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#504 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#504 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#504 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#504 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#504 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#504 /[1-9][0-9]*[fh]/]: s#113
[#504 /[1-9][0-9]*[iu]?/]: s#110
[#505 '!']: s#62
[#505 '&']: s#65
[#505 '(']: s#77
[#505 '*']: s#64
[#505 '-']: s#61
[#505 'array']: s#81
[#505 'atomic']: s#95
[#505 'bitcast']: s#71
[#505 'bool']: s#88
[#505 'f16']: s#90
[#505 'f32']: s#89
[#505 'false']: s#87
[#505 'i32']: s#91
[#505 'mat2x2']: s#100
[#505 'mat2x3']: s#101
[#505 'mat2x4']: s#102
[#505 'mat3x2']: s#103
[#505 'mat3x3']: s#104
[#505 'mat3x4']: s#105
[#505 'mat4x2']: s#106
[#505 'mat4x3']: s#107
[#505 'mat4x4']: s#108
[#505 'ptr']: s#93
[#505 'sampler']: s#125
[#505 'sampler_comparison']: s#126
[#505 'texture_1d']: s#132
[#505 'texture_2d']: s#133
[#505 'texture_2d_array']: s#134
[#505 'texture_3d']: s#135
[#505 'texture_cube']: s#136
[#505 'texture_cube_array']: s#137
[#505 'texture_depth_2d']: s#127
[#505 'texture_depth_2d_array']: s#128
[#505 'texture_depth_cube']: s#129
[#505 'texture_depth_cube_array']: s#130
[#505 'texture_depth_multisampled_2d']: s#131
[#505 'texture_multisampled_2d']: s#138
[#505 'texture_storage_1d']: s#139
[#505 'texture_storage_2d']: s#140
[#505 'texture_storage_2d_array']: s#141
[#505 'texture_storage_3d']: s#142
[#505 'true']: s#86
[#505 'u32']: s#92
[#505 'vec2']: s#97
[#505 'vec3']: s#98
[#505 'vec4']: s#99
[#505 '~']: s#63
[#505 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#505 /0[fh]/]: s#112
[#505 /0[iu]?/]: s#109
[#505 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#505 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#505 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#505 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#505 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#505 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#505 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#505 /[1-9][0-9]*[fh]/]: s#113
[#505 /[1-9][0-9]*[iu]?/]: s#110
[#506 'break']: r#69
[#506 'continue']: r#69
[#506 'f16']: r#69
[#506 'texture_multisampled_2d']: r#69
[#511 ':']: s#532
[#512 ',']: s#531
[#514 ',']: s#515
[#515 '@']: s#30
[#516 '->']: s#527
[#519 '}']: s#525
[#521 'array']: s#281
[#521 'atomic']: s#95
[#521 'bool']: s#88
[#521 'f16']: s#90
[#521 'f32']: s#89
[#521 'i32']: s#91
[#521 'mat2x2']: s#100
[#521 'mat2x3']: s#101
[#521 'mat2x4']: s#102
[#521 'mat3x2']: s#103
[#521 'mat3x3']: s#104
[#521 'mat3x4']: s#105
[#521 'mat4x2']: s#106
[#521 'mat4x3']: s#107
[#521 'mat4x4']: s#108
[#521 'ptr']: s#93
[#521 'sampler']: s#125
[#521 'sampler_comparison']: s#126
[#521 'texture_1d']: s#132
[#521 'texture_2d']: s#133
[#521 'texture_2d_array']: s#134
[#521 'texture_3d']: s#135
[#521 'texture_cube']: s#136
[#521 'texture_cube_array']: s#137
[#521 'texture_depth_2d']: s#127
[#521 'texture_depth_2d_array']: s#128
[#521 'texture_depth_cube']: s#129
[#521 'texture_depth_cube_array']: s#130
[#521 'texture_depth_multisampled_2d']: s#131
[#521 'texture_multisampled_2d']: s#138
[#521 'texture_storage_1d']: s#139
[#521 'texture_storage_2d']: s#140
[#521 'texture_storage_2d_array']: s#141
[#521 'texture_storage_3d']: s#142
[#521 'u32']: s#92
[#521 'vec2']: s#97
[#521 'vec3']: s#98
[#521 'vec4']: s#99
[#521 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#523 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#70
[#525 EndOfText]: r#71
[#527 '@']: s#30
[#532 'array']: s#281
[#532 'atomic']: s#95
[#532 'bool']: s#88
[#532 'f16']: s#90
[#532 'f32']: s#89
[#532 'i32']: s#91
[#532 'mat2x2']: s#100
[#532 'mat2x3']: s#101
[#532 'mat2x4']: s#102
[#532 'mat3x2']: s#103
[#532 'mat3x3']: s#104
[#532 'mat3x4']: s#105
[#532 'mat4x2']: s#106
[#532 'mat4x3']: s#107
[#532 'mat4x4']: s#108
[#532 'ptr']: s#93
[#532 'sampler']: s#125
[#532 'sampler_comparison']: s#126
[#532 'texture_1d']: s#132
[#532 'texture_2d']: s#133
[#532 'texture_2d_array']: s#134
[#532 'texture_3d']: s#135
[#532 'texture_cube']: s#136
[#532 'texture_cube_array']: s#137
[#532 'texture_depth_2d']: s#127
[#532 'texture_depth_2d_array']: s#128
[#532 'texture_depth_cube']: s#129
[#532 'texture_depth_cube_array']: s#130
[#532 'texture_depth_multisampled_2d']: s#131
[#532 'texture_multisampled_2d']: s#138
[#532 'texture_storage_1d']: s#139
[#532 'texture_storage_2d']: s#140
[#532 'texture_storage_2d_array']: s#141
[#532 'texture_storage_3d']: s#142
[#532 'u32']: s#92
[#532 'vec2']: s#97
[#532 'vec3']: s#98
[#532 'vec4']: s#99
[#532 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#535 '!']: s#62
[#535 '&']: s#65
[#535 '(']: s#77
[#535 '*']: s#64
[#535 '-']: s#61
[#535 'array']: s#81
[#535 'atomic']: s#95
[#535 'bitcast']: s#71
[#535 'bool']: s#88
[#535 'f16']: s#90
[#535 'f32']: s#89
[#535 'false']: s#87
[#535 'i32']: s#91
[#535 'mat2x2']: s#100
[#535 'mat2x3']: s#101
[#535 'mat2x4']: s#102
[#535 'mat3x2']: s#103
[#535 'mat3x3']: s#104
[#535 'mat3x4']: s#105
[#535 'mat4x2']: s#106
[#535 'mat4x3']: s#107
[#535 'mat4x4']: s#108
[#535 'ptr']: s#93
[#535 'sampler']: s#125
[#535 'sampler_comparison']: s#126
[#535 'texture_1d']: s#132
[#535 'texture_2d']: s#133
[#535 'texture_2d_array']: s#134
[#535 'texture_3d']: s#135
[#535 'texture_cube']: s#136
[#535 'texture_cube_array']: s#137
[#535 'texture_depth_2d']: s#127
[#535 'texture_depth_2d_array']: s#128
[#535 'texture_depth_cube']: s#129
[#535 'texture_depth_cube_array']: s#130
[#535 'texture_depth_multisampled_2d']: s#131
[#535 'texture_multisampled_2d']: s#138
[#535 'texture_storage_1d']: s#139
[#535 'texture_storage_2d']: s#140
[#535 'texture_storage_2d_array']: s#141
[#535 'texture_storage_3d']: s#142
[#535 'true']: s#86
[#535 'u32']: s#92
[#535 'vec2']: s#97
[#535 'vec3']: s#98
[#535 'vec4']: s#99
[#535 '~']: s#63
[#535 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#535 /0[fh]/]: s#112
[#535 /0[iu]?/]: s#109
[#535 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#535 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#535 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#535 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#535 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#535 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#535 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#535 /[1-9][0-9]*[fh]/]: s#113
[#535 /[1-9][0-9]*[iu]?/]: s#110
[#536 '{']: s#172
[#538 '}']: s#570
[#540 '{']: s#569
[#541 '}']: s#567
[#543 'case']: s#546
[#543 'default']: s#547
[#546 '!']: s#62
[#546 '&']: s#65
[#546 '(']: s#77
[#546 '*']: s#64
[#546 '-']: s#61
[#546 'array']: s#81
[#546 'atomic']: s#95
[#546 'bitcast']: s#71
[#546 'bool']: s#88
[#546 'default']: s#564
[#546 'f16']: s#90
[#546 'f32']: s#89
[#546 'false']: s#87
[#546 'i32']: s#91
[#546 'mat2x2']: s#100
[#546 'mat2x3']: s#101
[#546 'mat2x4']: s#102
[#546 'mat3x2']: s#103
[#546 'mat3x3']: s#104
[#546 'mat3x4']: s#105
[#546 'mat4x2']: s#106
[#546 'mat4x3']: s#107
[#546 'mat4x4']: s#108
[#546 'ptr']: s#93
[#546 'sampler']: s#125
[#546 'sampler_comparison']: s#126
[#546 'texture_1d']: s#132
[#546 'texture_2d']: s#133
[#546 'texture_2d_array']: s#134
[#546 'texture_3d']: s#135
[#546 'texture_cube']: s#136
[#546 'texture_cube_array']: s#137
[#546 'texture_depth_2d']: s#127
[#546 'texture_depth_2d_array']: s#128
[#546 'texture_depth_cube']: s#129
[#546 'texture_depth_cube_array']: s#130
[#546 'texture_depth_multisampled_2d']: s#131
[#546 'texture_multisampled_2d']: s#138
[#546 'texture_storage_1d']: s#139
[#546 'texture_storage_2d']: s#140
[#546 'texture_storage_2d_array']: s#141
[#546 'texture_storage_3d']: s#142
[#546 'true']: s#86
[#546 'u32']: s#92
[#546 'vec2']: s#97
[#546 'vec3']: s#98
[#546 'vec4']: s#99
[#546 '~']: s#63
[#546 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#546 /0[fh]/]: s#112
[#546 /0[iu]?/]: s#109
[#546 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#546 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#546 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#546 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#546 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#546 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#546 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#546 /[1-9][0-9]*[fh]/]: s#113
[#546 /[1-9][0-9]*[iu]?/]: s#110
[#547 ':']: s#561
[#548 'break']: r#72
[#548 'continue']: r#72
[#548 'f16']: r#72
[#548 'texture_multisampled_2d']: r#72
[#549 '{']: s#172
[#551 '>']: s#558
[#552 'read']: s#484
[#552 'read_write']: s#486
[#552 'write']: s#485
[#553 'f16']: r#73
[#553 'texture_multisampled_2d']: r#73
[#554 '!']: s#62
[#554 '&']: s#65
[#554 '(']: s#77
[#554 '*']: s#64
[#554 '-']: s#61
[#554 'array']: s#81
[#554 'atomic']: s#95
[#554 'bitcast']: s#71
[#554 'bool']: s#88
[#554 'f16']: s#90
[#554 'f32']: s#89
[#554 'false']: s#87
[#554 'i32']: s#91
[#554 'mat2x2']: s#100
[#554 'mat2x3']: s#101
[#554 'mat2x4']: s#102
[#554 'mat3x2']: s#103
[#554 'mat3x3']: s#104
[#554 'mat3x4']: s#105
[#554 'mat4x2']: s#106
[#554 'mat4x3']: s#107
[#554 'mat4x4']: s#108
[#554 'ptr']: s#93
[#554 'sampler']: s#125
[#554 'sampler_comparison']: s#126
[#554 'texture_1d']: s#132
[#554 'texture_2d']: s#133
[#554 'texture_2d_array']: s#134
[#554 'texture_3d']: s#135
[#554 'texture_cube']: s#136
[#554 'texture_cube_array']: s#137
[#554 'texture_depth_2d']: s#127
[#554 'texture_depth_2d_array']: s#128
[#554 'texture_depth_cube']: s#129
[#554 'texture_depth_cube_array']: s#130
[#554 'texture_depth_multisampled_2d']: s#131
[#554 'texture_multisampled_2d']: s#138
[#554 'texture_storage_1d']: s#139
[#554 'texture_storage_2d']: s#140
[#554 'texture_storage_2d_array']: s#141
[#554 'texture_storage_3d']: s#142
[#554 'true']: s#86
[#554 'u32']: s#92
[#554 'vec2']: s#97
[#554 'vec3']: s#98
[#554 'vec4']: s#99
[#554 '~']: s#63
[#554 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#554 /0[fh]/]: s#112
[#554 /0[iu]?/]: s#109
[#554 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#554 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#554 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#554 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#554 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#554 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#554 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#554 /[1-9][0-9]*[fh]/]: s#113
[#554 /[1-9][0-9]*[iu]?/]: s#110
[#555 'f16']: r#74
[#555 'texture_multisampled_2d']: r#74
[#556 ',']: s#455
[#559 'break']: r#75
[#559 'continue']: r#75
[#559 'f16']: r#75
[#559 'texture_multisampled_2d']: r#75
[#560 '{']: s#172
[#562 ':']: s#589
[#563 ',']: s#587
[#567 'break']: r#76
[#567 'continue']: r#76
[#567 'f16']: r#76
[#567 'texture_multisampled_2d']: r#76
[#569 '&']: s#354
[#569 '(']: s#355
[#569 '*']: s#353
[#569 ';']: s#318
[#569 '_']: s#351
[#569 'array']: s#81
[#569 'atomic']: s#95
[#569 'bool']: s#88
[#569 'break']: s#343
[#569 'const']: s#342
[#569 'continue']: s#344
[#569 'discard']: s#329
[#569 'f16']: s#90
[#569 'f32']: s#89
[#569 'for']: s#337
[#569 'i32']: s#91
[#569 'if']: s#348
[#569 'let']: s#341
[#569 'loop']: s#336
[#569 'mat2x2']: s#100
[#569 'mat2x3']: s#101
[#569 'mat2x4']: s#102
[#569 'mat3x2']: s#103
[#569 'mat3x3']: s#104
[#569 'mat3x4']: s#105
[#569 'mat4x2']: s#106
[#569 'mat4x3']: s#107
[#569 'mat4x4']: s#108
[#569 'ptr']: s#93
[#569 'return']: s#333
[#569 'sampler']: s#125
[#569 'sampler_comparison']: s#126
[#569 'static_assert']: s#25
[#569 'switch']: s#335
[#569 'texture_1d']: s#132
[#569 'texture_2d']: s#133
[#569 'texture_2d_array']: s#134
[#569 'texture_3d']: s#135
[#569 'texture_cube']: s#136
[#569 'texture_cube_array']: s#137
[#569 'texture_depth_2d']: s#127
[#569 'texture_depth_2d_array']: s#128
[#569 'texture_depth_cube']: s#129
[#569 'texture_depth_cube_array']: s#130
[#569 'texture_depth_multisampled_2d']: s#131
[#569 'texture_multisampled_2d']: s#138
[#569 'texture_storage_1d']: s#139
[#569 'texture_storage_2d']: s#140
[#569 'texture_storage_2d_array']: s#141
[#569 'texture_storage_3d']: s#142
[#569 'u32']: s#92
[#569 'var']: s#151
[#569 'vec2']: s#97
[#569 'vec3']: s#98
[#569 'vec4']: s#99
[#569 'while']: s#338
[#569 '{']: s#172
[#569 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#570 'break']: r#77
[#570 'continue']: r#77
[#570 'f16']: r#77
[#570 'texture_multisampled_2d']: r#77
[#571 'break']: r#78
[#571 'continue']: r#78
[#571 'f16']: r#78
[#571 'texture_multisampled_2d']: r#78
[#572 ';']: s#580
[#575 'array']: s#281
[#575 'atomic']: s#95
[#575 'bool']: s#88
[#575 'f16']: s#90
[#575 'f32']: s#89
[#575 'i32']: s#91
[#575 'mat2x2']: s#100
[#575 'mat2x3']: s#101
[#575 'mat2x4']: s#102
[#575 'mat3x2']: s#103
[#575 'mat3x3']: s#104
[#575 'mat3x4']: s#105
[#575 'mat4x2']: s#106
[#575 'mat4x3']: s#107
[#575 'mat4x4']: s#108
[#575 'ptr']: s#93
[#575 'sampler']: s#125
[#575 'sampler_comparison']: s#126
[#575 'texture_1d']: s#132
[#575 'texture_2d']: s#133
[#575 'texture_2d_array']: s#134
[#575 'texture_3d']: s#135
[#575 'texture_cube']: s#136
[#575 'texture_cube_array']: s#137
[#575 'texture_depth_2d']: s#127
[#575 'texture_depth_2d_array']: s#128
[#575 'texture_depth_cube']: s#129
[#575 'texture_depth_cube_array']: s#130
[#575 'texture_depth_multisampled_2d']: s#131
[#575 'texture_multisampled_2d']: s#138
[#575 'texture_storage_1d']: s#139
[#575 'texture_storage_2d']: s#140
[#575 'texture_storage_2d_array']: s#141
[#575 'texture_storage_3d']: s#142
[#575 'u32']: s#92
[#575 'vec2']: s#97
[#575 'vec3']: s#98
[#575 'vec4']: s#99
[#575 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#576 'f16']: r#79
[#576 'texture_multisampled_2d']: r#79
[#577 '@']: s#30
[#578 'f16']: r#80
[#578 'texture_multisampled_2d']: r#80
[#580 '&']: s#354
[#580 '(']: s#355
[#580 '*']: s#353
[#580 '_']: s#351
[#580 'array']: s#81
[#580 'atomic']: s#95
[#580 'bool']: s#88
[#580 'f16']: s#90
[#580 'f32']: s#89
[#580 'i32']: s#91
[#580 'mat2x2']: s#100
[#580 'mat2x3']: s#101
[#580 'mat2x4']: s#102
[#580 'mat3x2']: s#103
[#580 'mat3x3']: s#104
[#580 'mat3x4']: s#105
[#580 'mat4x2']: s#106
[#580 'mat4x3']: s#107
[#580 'mat4x4']: s#108
[#580 'ptr']: s#93
[#580 'sampler']: s#125
[#580 'sampler_comparison']: s#126
[#580 'texture_1d']: s#132
[#580 'texture_2d']: s#133
[#580 'texture_2d_array']: s#134
[#580 'texture_3d']: s#135
[#580 'texture_cube']: s#136
[#580 'texture_cube_array']: s#137
[#580 'texture_depth_2d']: s#127
[#580 'texture_depth_2d_array']: s#128
[#580 'texture_depth_cube']: s#129
[#580 'texture_depth_cube_array']: s#130
[#580 'texture_depth_multisampled_2d']: s#131
[#580 'texture_multisampled_2d']: s#138
[#580 'texture_storage_1d']: s#139
[#580 'texture_storage_2d']: s#140
[#580 'texture_storage_2d_array']: s#141
[#580 'texture_storage_3d']: s#142
[#580 'u32']: s#92
[#580 'vec2']: s#97
[#580 'vec3']: s#98
[#580 'vec4']: s#99
[#580 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#581 'break']: s#600
[#582 'break']: r#81
[#583 '&']: s#354
[#583 '(']: s#355
[#583 '*']: s#353
[#583 ';']: s#318
[#583 '_']: s#351
[#583 'array']: s#81
[#583 'atomic']: s#95
[#583 'bool']: s#88
[#583 'break']: s#343
[#583 'const']: s#342
[#583 'continue']: s#344
[#583 'discard']: s#329
[#583 'f16']: s#90
[#583 'f32']: s#89
[#583 'for']: s#337
[#583 'i32']: s#91
[#583 'if']: s#348
[#583 'let']: s#341
[#583 'loop']: s#336
[#583 'mat2x2']: s#100
[#583 'mat2x3']: s#101
[#583 'mat2x4']: s#102
[#583 'mat3x2']: s#103
[#583 'mat3x3']: s#104
[#583 'mat3x4']: s#105
[#583 'mat4x2']: s#106
[#583 'mat4x3']: s#107
[#583 'mat4x4']: s#108
[#583 'ptr']: s#93
[#583 'return']: s#333
[#583 'sampler']: s#125
[#583 'sampler_comparison']: s#126
[#583 'static_assert']: s#25
[#583 'switch']: s#335
[#583 'texture_1d']: s#132
[#583 'texture_2d']: s#133
[#583 'texture_2d_array']: s#134
[#583 'texture_3d']: s#135
[#583 'texture_cube']: s#136
[#583 'texture_cube_array']: s#137
[#583 'texture_depth_2d']: s#127
[#583 'texture_depth_2d_array']: s#128
[#583 'texture_depth_cube']: s#129
[#583 'texture_depth_cube_array']: s#130
[#583 'texture_depth_multisampled_2d']: s#131
[#583 'texture_multisampled_2d']: s#138
[#583 'texture_storage_1d']: s#139
[#583 'texture_storage_2d']: s#140
[#583 'texture_storage_2d_array']: s#141
[#583 'texture_storage_3d']: s#142
[#583 'u32']: s#92
[#583 'var']: s#151
[#583 'vec2']: s#97
[#583 'vec3']: s#98
[#583 'vec4']: s#99
[#583 'while']: s#338
[#583 '{']: s#172
[#583 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#584 ',']: s#596
[#586 ',']: s#587
[#587 '!']: s#62
[#587 '&']: s#65
[#587 '(']: s#77
[#587 '*']: s#64
[#587 '-']: s#61
[#587 'array']: s#81
[#587 'atomic']: s#95
[#587 'bitcast']: s#71
[#587 'bool']: s#88
[#587 'default']: s#564
[#587 'f16']: s#90
[#587 'f32']: s#89
[#587 'false']: s#87
[#587 'i32']: s#91
[#587 'mat2x2']: s#100
[#587 'mat2x3']: s#101
[#587 'mat2x4']: s#102
[#587 'mat3x2']: s#103
[#587 'mat3x3']: s#104
[#587 'mat3x4']: s#105
[#587 'mat4x2']: s#106
[#587 'mat4x3']: s#107
[#587 'mat4x4']: s#108
[#587 'ptr']: s#93
[#587 'sampler']: s#125
[#587 'sampler_comparison']: s#126
[#587 'texture_1d']: s#132
[#587 'texture_2d']: s#133
[#587 'texture_2d_array']: s#134
[#587 'texture_3d']: s#135
[#587 'texture_cube']: s#136
[#587 'texture_cube_array']: s#137
[#587 'texture_depth_2d']: s#127
[#587 'texture_depth_2d_array']: s#128
[#587 'texture_depth_cube']: s#129
[#587 'texture_depth_cube_array']: s#130
[#587 'texture_depth_multisampled_2d']: s#131
[#587 'texture_multisampled_2d']: s#138
[#587 'texture_storage_1d']: s#139
[#587 'texture_storage_2d']: s#140
[#587 'texture_storage_2d_array']: s#141
[#587 'texture_storage_3d']: s#142
[#587 'true']: s#86
[#587 'u32']: s#92
[#587 'vec2']: s#97
[#587 'vec3']: s#98
[#587 'vec4']: s#99
[#587 '~']: s#63
[#587 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#587 /0[fh]/]: s#112
[#587 /0[iu]?/]: s#109
[#587 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#587 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#587 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#587 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#587 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#587 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#587 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#587 /[1-9][0-9]*[fh]/]: s#113
[#587 /[1-9][0-9]*[iu]?/]: s#110
[#588 '{']: s#172
[#591 'f16']: r#82
[#591 'texture_multisampled_2d']: r#82
[#597 'break']: r#83
[#598 '}']: s#606
[#600 'if']: s#605
[#605 '!']: s#62
[#605 '&']: s#65
[#605 '(']: s#77
[#605 '*']: s#64
[#605 '-']: s#61
[#605 'array']: s#81
[#605 'atomic']: s#95
[#605 'bitcast']: s#71
[#605 'bool']: s#88
[#605 'f16']: s#90
[#605 'f32']: s#89
[#605 'false']: s#87
[#605 'i32']: s#91
[#605 'mat2x2']: s#100
[#605 'mat2x3']: s#101
[#605 'mat2x4']: s#102
[#605 'mat3x2']: s#103
[#605 'mat3x3']: s#104
[#605 'mat3x4']: s#105
[#605 'mat4x2']: s#106
[#605 'mat4x3']: s#107
[#605 'mat4x4']: s#108
[#605 'ptr']: s#93
[#605 'sampler']: s#125
[#605 'sampler_comparison']: s#126
[#605 'texture_1d']: s#132
[#605 'texture_2d']: s#133
[#605 'texture_2d_array']: s#134
[#605 'texture_3d']: s#135
[#605 'texture_cube']: s#136
[#605 'texture_cube_array']: s#137
[#605 'texture_depth_2d']: s#127
[#605 'texture_depth_2d_array']: s#128
[#605 'texture_depth_cube']: s#129
[#605 'texture_depth_cube_array']: s#130
[#605 'texture_depth_multisampled_2d']: s#131
[#605 'texture_multisampled_2d']: s#138
[#605 'texture_storage_1d']: s#139
[#605 'texture_storage_2d']: s#140
[#605 'texture_storage_2d_array']: s#141
[#605 'texture_storage_3d']: s#142
[#605 'true']: s#86
[#605 'u32']: s#92
[#605 'vec2']: s#97
[#605 'vec3']: s#98
[#605 'vec4']: s#99
[#605 '~']: s#63
[#605 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#72
[#605 /0[fh]/]: s#112
[#605 /0[iu]?/]: s#109
[#605 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#117
[#605 /0[xX][0-9a-fA-F]+[iu]?/]: s#111
[#605 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#119
[#605 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#118
[#605 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#114
[#605 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#116
[#605 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#115
[#605 /[1-9][0-9]*[fh]/]: s#113
[#605 /[1-9][0-9]*[iu]?/]: s#110
[#607 ';']: s#608

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attribute]: #29
[#2 function_decl]: #17
[#2 function_decl/0.0]: #24
[#2 function_decl/0.0/0]: #28
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #21
[#2 global_constant_decl/1.0/0]: #27
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #19
[#2 global_variable_decl/0.0/0]: #26
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#11 attribute]: #29
[#11 function_decl]: #17
[#11 function_decl/0.0]: #24
[#11 function_decl/0.0/0]: #28
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #21
[#11 global_constant_decl/1.0/0]: #27
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #19
[#11 global_variable_decl/0.0/0]: #26
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #156
[#11 type_alias_decl]: #15
[#19 variable_decl]: #150
[#20 ident]: #149
[#20 optionally_typed_ident]: #148
[#22 ident]: #146
[#23 ident]: #145
[#24 function_header]: #143
[#25 additive_expression]: #57
[#25 array_type_specifier]: #94
[#25 binary_and_expression]: #54
[#25 binary_or_expression]: #55
[#25 binary_xor_expression]: #56
[#25 bitwise_expression]: #52
[#25 bool_literal]: #76
[#25 call_expression]: #68
[#25 callable]: #73
[#25 decimal_float_literal]: #84
[#25 decimal_int_literal]: #82
[#25 depth_texture_type]: #121
[#25 expression]: #48
[#25 float_literal]: #75
[#25 hex_float_literal]: #85
[#25 hex_int_literal]: #83
[#25 ident]: #67
[#25 int_literal]: #74
[#25 literal]: #69
[#25 mat_prefix]: #80
[#25 multiplicative_expression]: #59
[#25 multisampled_texture_type]: #123
[#25 paren_expression]: #70
[#25 primary_expression]: #66
[#25 relational_expression]: #49
[#25 sampled_texture_type]: #122
[#25 sampler_type]: #120
[#25 shift_expression]: #53
[#25 short_circuit_and_expression]: #51
[#25 short_circuit_or_expression]: #50
[#25 singular_expression]: #60
[#25 storage_texture_type]: #124
[#25 texture_and_sampler_types]: #96
[#25 type_specifier_without_ident]: #78
[#25 unary_expression]: #58
[#25 vec_prefix]: #79
[#29 attribute]: #29
[#29 function_decl/0.0/0]: #47
[#29 global_constant_decl/1.0/0]: #46
[#29 global_variable_decl/0.0/0]: #45
[#57 additive_operator]: #200
[#59 multiplicative_operator]: #194
[#61 array_type_specifier]: #94
[#61 bool_literal]: #76
[#61 call_expression]: #68
[#61 callable]: #73
[#61 decimal_float_literal]: #84
[#61 decimal_int_literal]: #82
[#61 depth_texture_type]: #121
[#61 float_literal]: #75
[#61 hex_float_literal]: #85
[#61 hex_int_literal]: #83
[#61 ident]: #67
[#61 int_literal]: #74
[#61 literal]: #69
[#61 mat_prefix]: #80
[#61 multisampled_texture_type]: #123
[#61 paren_expression]: #70
[#61 primary_expression]: #66
[#61 sampled_texture_type]: #122
[#61 sampler_type]: #120
[#61 singular_expression]: #60
[#61 storage_texture_type]: #124
[#61 texture_and_sampler_types]: #96
[#61 type_specifier_without_ident]: #78
[#61 unary_expression]: #193
[#61 vec_prefix]: #79
[#62 array_type_specifier]: #94
[#62 bool_literal]: #76
[#62 call_expression]: #68
[#62 callable]: #73
[#62 decimal_float_literal]: #84
[#62 decimal_int_literal]: #82
[#62 depth_texture_type]: #121
[#62 float_literal]: #75
[#62 hex_float_literal]: #85
[#62 hex_int_literal]: #83
[#62 ident]: #67
[#62 int_literal]: #74
[#62 literal]: #69
[#62 mat_prefix]: #80
[#62 multisampled_texture_type]: #123
[#62 paren_expression]: #70
[#62 primary_expression]: #66
[#62 sampled_texture_type]: #122
[#62 sampler_type]: #120
[#62 singular_expression]: #60
[#62 storage_texture_type]: #124
[#62 texture_and_sampler_types]: #96
[#62 type_specifier_without_ident]: #78
[#62 unary_expression]: #192
[#62 vec_prefix]: #79
[#63 array_type_specifier]: #94
[#63 bool_literal]: #76
[#63 call_expression]: #68
[#63 callable]: #73
[#63 decimal_float_literal]: #84
[#63 decimal_int_literal]: #82
[#63 depth_texture_type]: #121
[#63 float_literal]: #75
[#63 hex_float_literal]: #85
[#63 hex_int_literal]: #83
[#63 ident]: #67
[#63 int_literal]: #74
[#63 literal]: #69
[#63 mat_prefix]: #80
[#63 multisampled_texture_type]: #123
[#63 paren_expression]: #70
[#63 primary_expression]: #66
[#63 sampled_texture_type]: #122
[#63 sampler_type]: #120
[#63 singular_expression]: #60
[#63 storage_texture_type]: #124
[#63 texture_and_sampler_types]: #96
[#63 type_specifier_without_ident]: #78
[#63 unary_expression]: #191
[#63 vec_prefix]: #79
[#64 array_type_specifier]: #94
[#64 bool_literal]: #76
[#64 call_expression]: #68
[#64 callable]: #73
[#64 decimal_float_literal]: #84
[#64 decimal_int_literal]: #82
[#64 depth_texture_type]: #121
[#64 float_literal]: #75
[#64 hex_float_literal]: #85
[#64 hex_int_literal]: #83
[#64 ident]: #67
[#64 int_literal]: #74
[#64 literal]: #69
[#64 mat_prefix]: #80
[#64 multisampled_texture_type]: #123
[#64 paren_expression]: #70
[#64 primary_expression]: #66
[#64 sampled_texture_type]: #122
[#64 sampler_type]: #120
[#64 singular_expression]: #60
[#64 storage_texture_type]: #124
[#64 texture_and_sampler_types]: #96
[#64 type_specifier_without_ident]: #78
[#64 unary_expression]: #190
[#64 vec_prefix]: #79
[#65 array_type_specifier]: #94
[#65 bool_literal]: #76
[#65 call_expression]: #68
[#65 callable]: #73
[#65 decimal_float_literal]: #84
[#65 decimal_int_literal]: #82
[#65 depth_texture_type]: #121
[#65 float_literal]: #75
[#65 hex_float_literal]: #85
[#65 hex_int_literal]: #83
[#65 ident]: #67
[#65 int_literal]: #74
[#65 literal]: #69
[#65 mat_prefix]: #80
[#65 multisampled_texture_type]: #123
[#65 paren_expression]: #70
[#65 primary_expression]: #66
[#65 sampled_texture_type]: #122
[#65 sampler_type]: #120
[#65 singular_expression]: #60
[#65 storage_texture_type]: #124
[#65 texture_and_sampler_types]: #96
[#65 type_specifier_without_ident]: #78
[#65 unary_expression]: #189
[#65 vec_prefix]: #79
[#66 component_or_swizzle_specifier]: #186
[#66 singular_expression/0.1]: #185
[#73 argument_expression_list]: #182
[#77 additive_expression]: #57
[#77 array_type_specifier]: #94
[#77 binary_and_expression]: #54
[#77 binary_or_expression]: #55
[#77 binary_xor_expression]: #56
[#77 bitwise_expression]: #52
[#77 bool_literal]: #76
[#77 call_expression]: #68
[#77 callable]: #73
[#77 decimal_float_literal]: #84
[#77 decimal_int_literal]: #82
[#77 depth_texture_type]: #121
[#77 expression]: #181
[#77 float_literal]: #75
[#77 hex_float_literal]: #85
[#77 hex_int_literal]: #83
[#77 ident]: #67
[#77 int_literal]: #74
[#77 literal]: #69
[#77 mat_prefix]: #80
[#77 multiplicative_expression]: #59
[#77 multisampled_texture_type]: #123
[#77 paren_expression]: #70
[#77 primary_expression]: #66
[#77 relational_expression]: #49
[#77 sampled_texture_type]: #122
[#77 sampler_type]: #120
[#77 shift_expression]: #53
[#77 short_circuit_and_expression]: #51
[#77 short_circuit_or_expression]: #50
[#77 singular_expression]: #60
[#77 storage_texture_type]: #124
[#77 texture_and_sampler_types]: #96
[#77 type_specifier_without_ident]: #78
[#77 unary_expression]: #58
[#77 vec_prefix]: #79
[#143 compound_statement]: #171
[#144 ident]: #170
[#145 struct_body_decl]: #168
[#147 ident]: #149
[#147 optionally_typed_ident]: #166
[#149 optionally_typed_ident/0.1]: #163
[#150 global_variable_decl/0.2]: #161
[#151 variable_decl/0.1]: #158
[#151 variable_qualifier]: #159
[#158 ident]: #149
[#158 optionally_typed_ident]: #368
[#160 address_space]: #367
[#162 additive_expression]: #57
[#162 array_type_specifier]: #94
[#162 binary_and_expression]: #54
[#162 binary_or_expression]: #55
[#162 binary_xor_expression]: #56
[#162 bitwise_expression]: #52
[#162 bool_literal]: #76
[#162 call_expression]: #68
[#162 callable]: #73
[#162 decimal_float_literal]: #84
[#162 decimal_int_literal]: #82
[#162 depth_texture_type]: #121
[#162 expression]: #366
[#162 float_literal]: #75
[#162 hex_float_literal]: #85
[#162 hex_int_literal]: #83
[#162 ident]: #67
[#162 int_literal]: #74
[#162 literal]: #69
[#162 mat_prefix]: #80
[#162 multiplicative_expression]: #59
[#162 multisampled_texture_type]: #123
[#162 paren_expression]: #70
[#162 primary_expression]: #66
[#162 relational_expression]: #49
[#162 sampled_texture_type]: #122
[#162 sampler_type]: #120
[#162 shift_expression]: #53
[#162 short_circuit_and_expression]: #51
[#162 short_circuit_or_expression]: #50
[#162 singular_expression]: #60
[#162 storage_texture_type]: #124
[#162 texture_and_sampler_types]: #96
[#162 type_specifier_without_ident]: #78
[#162 unary_expression]: #58
[#162 vec_prefix]: #79
[#164 array_type_specifier]: #94
[#164 depth_texture_type]: #121
[#164 ident]: #277
[#164 mat_prefix]: #280
[#164 multisampled_texture_type]: #123
[#164 sampled_texture_type]: #122
[#164 sampler_type]: #120
[#164 storage_texture_type]: #124
[#164 texture_and_sampler_types]: #96
[#164 type_specifier]: #365
[#164 type_specifier_without_ident]: #278
[#164 vec_prefix]: #279
[#165 additive_expression]: #57
[#165 array_type_specifier]: #94
[#165 binary_and_expression]: #54
[#165 binary_or_expression]: #55
[#165 binary_xor_expression]: #56
[#165 bitwise_expression]: #52
[#165 bool_literal]: #76
[#165 call_expression]: #68
[#165 callable]: #73
[#165 decimal_float_literal]: #84
[#165 decimal_int_literal]: #82
[#165 depth_texture_type]: #121
[#165 expression]: #364
[#165 float_literal]: #75
[#165 hex_float_literal]: #85
[#165 hex_int_literal]: #83
[#165 ident]: #67
[#165 int_literal]: #74
[#165 literal]: #69
[#165 mat_prefix]: #80
[#165 multiplicative_expression]: #59
[#165 multisampled_texture_type]: #123
[#165 paren_expression]: #70
[#165 primary_expression]: #66
[#165 relational_expression]: #49
[#165 sampled_texture_type]: #122
[#165 sampler_type]: #120
[#165 shift_expression]: #53
[#165 short_circuit_and_expression]: #51
[#165 short_circuit_or_expression]: #50
[#165 singular_expression]: #60
[#165 storage_texture_type]: #124
[#165 texture_and_sampler_types]: #96
[#165 type_specifier_without_ident]: #78
[#165 unary_expression]: #58
[#165 vec_prefix]: #79
[#166 global_constant_decl/1.3]: #362
[#167 array_type_specifier]: #94
[#167 depth_texture_type]: #121
[#167 ident]: #277
[#167 mat_prefix]: #280
[#167 multisampled_texture_type]: #123
[#167 sampled_texture_type]: #122
[#167 sampler_type]: #120
[#167 storage_texture_type]: #124
[#167 texture_and_sampler_types]: #96
[#167 type_specifier]: #361
[#167 type_specifier_without_ident]: #278
[#167 vec_prefix]: #279
[#169 attribute]: #360
[#169 struct_member]: #357
[#169 struct_member/0.0]: #358
[#169 struct_member/0.0/0]: #359
[#172 array_type_specifier]: #94
[#172 assignment_statement]: #345
[#172 break_statement]: #327
[#172 callable]: #339
[#172 compound_statement]: #331
[#172 compound_statement/0.1]: #315
[#172 compound_statement/0.1/0]: #316
[#172 continue_statement]: #328
[#172 core_lhs_expression]: #352
[#172 decrement_statement]: #347
[#172 depth_texture_type]: #121
[#172 for_statement]: #323
[#172 func_call_statement]: #325
[#172 ident]: #349
[#172 if_clause]: #334
[#172 if_statement]: #320
[#172 increment_statement]: #346
[#172 lhs_expression]: #350
[#172 loop_statement]: #322
[#172 mat_prefix]: #80
[#172 multisampled_texture_type]: #123
[#172 return_statement]: #319
[#172 sampled_texture_type]: #122
[#172 sampler_type]: #120
[#172 statement]: #317
[#172 static_assert_statement]: #332
[#172 storage_texture_type]: #124
[#172 switch_statement]: #321
[#172 texture_and_sampler_types]: #96
[#172 type_specifier_without_ident]: #78
[#172 variable_decl]: #340
[#172 variable_statement]: #326
[#172 variable_updating_statement]: #330
[#172 vec_prefix]: #79
[#172 while_statement]: #324
[#173 texel_format]: #298
[#174 array_type_specifier]: #94
[#174 depth_texture_type]: #121
[#174 ident]: #277
[#174 mat_prefix]: #280
[#174 multisampled_texture_type]: #123
[#174 sampled_texture_type]: #122
[#174 sampler_type]: #120
[#174 storage_texture_type]: #124
[#174 texture_and_sampler_types]: #96
[#174 type_specifier]: #297
[#174 type_specifier_without_ident]: #278
[#174 vec_prefix]: #279
[#175 array_type_specifier]: #94
[#175 depth_texture_type]: #121
[#175 ident]: #277
[#175 mat_prefix]: #280
[#175 multisampled_texture_type]: #123
[#175 sampled_texture_type]: #122
[#175 sampler_type]: #120
[#175 storage_texture_type]: #124
[#175 texture_and_sampler_types]: #96
[#175 type_specifier]: #296
[#175 type_specifier_without_ident]: #278
[#175 vec_prefix]: #279
[#176 array_type_specifier]: #94
[#176 depth_texture_type]: #121
[#176 ident]: #277
[#176 mat_prefix]: #280
[#176 multisampled_texture_type]: #123
[#176 sampled_texture_type]: #122
[#176 sampler_type]: #120
[#176 storage_texture_type]: #124
[#176 texture_and_sampler_types]: #96
[#176 type_specifier]: #295
[#176 type_specifier_without_ident]: #278
[#176 vec_prefix]: #279
[#177 address_space]: #289
[#178 array_type_specifier]: #94
[#178 depth_texture_type]: #121
[#178 ident]: #277
[#178 mat_prefix]: #280
[#178 multisampled_texture_type]: #123
[#178 sampled_texture_type]: #122
[#178 sampler_type]: #120
[#178 storage_texture_type]: #124
[#178 texture_and_sampler_types]: #96
[#178 type_specifier]: #288
[#178 type_specifier_without_ident]: #278
[#178 vec_prefix]: #279
[#179 array_type_specifier]: #94
[#179 depth_texture_type]: #121
[#179 ident]: #277
[#179 mat_prefix]: #280
[#179 multisampled_texture_type]: #123
[#179 sampled_texture_type]: #122
[#179 sampler_type]: #120
[#179 storage_texture_type]: #124
[#179 texture_and_sampler_types]: #96
[#179 type_specifier]: #287
[#179 type_specifier_without_ident]: #278
[#179 vec_prefix]: #279
[#180 array_type_specifier]: #94
[#180 depth_texture_type]: #121
[#180 ident]: #277
[#180 mat_prefix]: #280
[#180 multisampled_texture_type]: #123
[#180 sampled_texture_type]: #122
[#180 sampler_type]: #120
[#180 storage_texture_type]: #124
[#180 texture_and_sampler_types]: #96
[#180 type_specifier]: #286
[#180 type_specifier_without_ident]: #278
[#180 vec_prefix]: #279
[#183 additive_expression]: #57
[#183 argument_expression_list/0.1]: #282
[#183 array_type_specifier]: #94
[#183 binary_and_expression]: #54
[#183 binary_or_expression]: #55
[#183 binary_xor_expression]: #56
[#183 bitwise_expression]: #52
[#183 bool_literal]: #76
[#183 call_expression]: #68
[#183 callable]: #73
[#183 decimal_float_literal]: #84
[#183 decimal_int_literal]: #82
[#183 depth_texture_type]: #121
[#183 expression]: #284
[#183 expression_comma_list]: #283
[#183 float_literal]: #75
[#183 hex_float_literal]: #85
[#183 hex_int_literal]: #83
[#183 ident]: #67
[#183 int_literal]: #74
[#183 literal]: #69
[#183 mat_prefix]: #80
[#183 multiplicative_expression]: #59
[#183 multisampled_texture_type]: #123
[#183 paren_expression]: #70
[#183 primary_expression]: #66
[#183 relational_expression]: #49
[#183 sampled_texture_type]: #122
[#183 sampler_type]: #120
[#183 shift_expression]: #53
[#183 short_circuit_and_expression]: #51
[#183 short_circuit_or_expression]: #50
[#183 singular_expression]: #60
[#183 storage_texture_type]: #124
[#183 texture_and_sampler_types]: #96
[#183 type_specifier_without_ident]: #78
[#183 unary_expression]: #58
[#183 vec_prefix]: #79
[#184 array_type_specifier]: #94
[#184 depth_texture_type]: #121
[#184 ident]: #277
[#184 mat_prefix]: #280
[#184 multisampled_texture_type]: #123
[#184 sampled_texture_type]: #122
[#184 sampler_type]: #120
[#184 storage_texture_type]: #124
[#184 texture_and_sampler_types]: #96
[#184 type_specifier]: #276
[#184 type_specifier_without_ident]: #278
[#184 vec_prefix]: #279
[#187 additive_expression]: #57
[#187 array_type_specifier]: #94
[#187 binary_and_expression]: #54
[#187 binary_or_expression]: #55
[#187 binary_xor_expression]: #56
[#187 bitwise_expression]: #52
[#187 bool_literal]: #76
[#187 call_expression]: #68
[#187 callable]: #73
[#187 decimal_float_literal]: #84
[#187 decimal_int_literal]: #82
[#187 depth_texture_type]: #121
[#187 expression]: #275
[#187 float_literal]: #75
[#187 hex_float_literal]: #85
[#187 hex_int_literal]: #83
[#187 ident]: #67
[#187 int_literal]: #74
[#187 literal]: #69
[#187 mat_prefix]: #80
[#187 multiplicative_expression]: #59
[#187 multisampled_texture_type]: #123
[#187 paren_expression]: #70
[#187 primary_expression]: #66
[#187 relational_expression]: #49
[#187 sampled_texture_type]: #122
[#187 sampler_type]: #120
[#187 shift_expression]: #53
[#187 short_circuit_and_expression]: #51
[#187 short_circuit_or_expression]: #50
[#187 singular_expression]: #60
[#187 storage_texture_type]: #124
[#187 texture_and_sampler_types]: #96
[#187 type_specifier_without_ident]: #78
[#187 unary_expression]: #58
[#187 vec_prefix]: #79
[#188 member_ident]: #264
[#188 swizzle_name]: #265
[#194 array_type_specifier]: #94
[#194 bool_literal]: #76
[#194 call_expression]: #68
[#194 callable]: #73
[#194 decimal_float_literal]: #84
[#194 decimal_int_literal]: #82
[#194 depth_texture_type]: #121
[#194 float_literal]: #75
[#194 hex_float_literal]: #85
[#194 hex_int_literal]: #83
[#194 ident]: #67
[#194 int_literal]: #74
[#194 literal]: #69
[#194 mat_prefix]: #80
[#194 multisampled_texture_type]: #123
[#194 paren_expression]: #70
[#194 primary_expression]: #66
[#194 sampled_texture_type]: #122
[#194 sampler_type]: #120
[#194 singular_expression]: #60
[#194 storage_texture_type]: #124
[#194 texture_and_sampler_types]: #96
[#194 type_specifier_without_ident]: #78
[#194 unary_expression]: #263
[#194 vec_prefix]: #79
[#198 array_type_specifier]: #94
[#198 bool_literal]: #76
[#198 call_expression]: #68
[#198 callable]: #73
[#198 decimal_float_literal]: #84
[#198 decimal_int_literal]: #82
[#198 depth_texture_type]: #121
[#198 float_literal]: #75
[#198 hex_float_literal]: #85
[#198 hex_int_literal]: #83
[#198 ident]: #67
[#198 int_literal]: #74
[#198 literal]: #69
[#198 mat_prefix]: #80
[#198 multisampled_texture_type]: #123
[#198 paren_expression]: #70
[#198 primary_expression]: #66
[#198 sampled_texture_type]: #122
[#198 sampler_type]: #120
[#198 singular_expression]: #60
[#198 storage_texture_type]: #124
[#198 texture_and_sampler_types]: #96
[#198 type_specifier_without_ident]: #78
[#198 unary_expression]: #262
[#198 vec_prefix]: #79
[#199 array_type_specifier]: #94
[#199 bool_literal]: #76
[#199 call_expression]: #68
[#199 callable]: #73
[#199 decimal_float_literal]: #84
[#199 decimal_int_literal]: #82
[#199 depth_texture_type]: #121
[#199 float_literal]: #75
[#199 hex_float_literal]: #85
[#199 hex_int_literal]: #83
[#199 ident]: #67
[#199 int_literal]: #74
[#199 literal]: #69
[#199 mat_prefix]: #80
[#199 multisampled_texture_type]: #123
[#199 paren_expression]: #70
[#199 primary_expression]: #66
[#199 sampled_texture_type]: #122
[#199 sampler_type]: #120
[#199 singular_expression]: #60
[#199 storage_texture_type]: #124
[#199 texture_and_sampler_types]: #96
[#199 type_specifier_without_ident]: #78
[#199 unary_expression]: #261
[#199 vec_prefix]: #79
[#200 array_type_specifier]: #94
[#200 bool_literal]: #76
[#200 call_expression]: #68
[#200 callable]: #73
[#200 decimal_float_literal]: #84
[#200 decimal_int_literal]: #82
[#200 depth_texture_type]: #121
[#200 float_literal]: #75
[#200 hex_float_literal]: #85
[#200 hex_int_literal]: #83
[#200 ident]: #67
[#200 int_literal]: #74
[#200 literal]: #69
[#200 mat_prefix]: #80
[#200 multiplicative_expression]: #259
[#200 multisampled_texture_type]: #123
[#200 paren_expression]: #70
[#200 primary_expression]: #66
[#200 sampled_texture_type]: #122
[#200 sampler_type]: #120
[#200 singular_expression]: #60
[#200 storage_texture_type]: #124
[#200 texture_and_sampler_types]: #96
[#200 type_specifier_without_ident]: #78
[#200 unary_expression]: #260
[#200 vec_prefix]: #79
[#203 array_type_specifier]: #94
[#203 bool_literal]: #76
[#203 call_expression]: #68
[#203 callable]: #73
[#203 decimal_float_literal]: #84
[#203 decimal_int_literal]: #82
[#203 depth_texture_type]: #121
[#203 float_literal]: #75
[#203 hex_float_literal]: #85
[#203 hex_int_literal]: #83
[#203 ident]: #67
[#203 int_literal]: #74
[#203 literal]: #69
[#203 mat_prefix]: #80
[#203 multisampled_texture_type]: #123
[#203 paren_expression]: #70
[#203 primary_expression]: #66
[#203 sampled_texture_type]: #122
[#203 sampler_type]: #120
[#203 singular_expression]: #60
[#203 storage_texture_type]: #124
[#203 texture_and_sampler_types]: #96
[#203 type_specifier_without_ident]: #78
[#203 unary_expression]: #258
[#203 vec_prefix]: #79
[#204 array_type_specifier]: #94
[#204 bool_literal]: #76
[#204 call_expression]: #68
[#204 callable]: #73
[#204 decimal_float_literal]: #84
[#204 decimal_int_literal]: #82
[#204 depth_texture_type]: #121
[#204 float_literal]: #75
[#204 hex_float_literal]: #85
[#204 hex_int_literal]: #83
[#204 ident]: #67
[#204 int_literal]: #74
[#204 literal]: #69
[#204 mat_prefix]: #80
[#204 multisampled_texture_type]: #123
[#204 paren_expression]: #70
[#204 primary_expression]: #66
[#204 sampled_texture_type]: #122
[#204 sampler_type]: #120
[#204 singular_expression]: #60
[#204 storage_texture_type]: #124
[#204 texture_and_sampler_types]: #96
[#204 type_specifier_without_ident]: #78
[#204 unary_expression]: #257
[#204 vec_prefix]: #79
[#205 array_type_specifier]: #94
[#205 bool_literal]: #76
[#205 call_expression]: #68
[#205 callable]: #73
[#205 decimal_float_literal]: #84
[#205 decimal_int_literal]: #82
[#205 depth_texture_type]: #121
[#205 float_literal]: #75
[#205 hex_float_literal]: #85
[#205 hex_int_literal]: #83
[#205 ident]: #67
[#205 int_literal]: #74
[#205 literal]: #69
[#205 mat_prefix]: #80
[#205 multisampled_texture_type]: #123
[#205 paren_expression]: #70
[#205 primary_expression]: #66
[#205 sampled_texture_type]: #122
[#205 sampler_type]: #120
[#205 singular_expression]: #60
[#205 storage_texture_type]: #124
[#205 texture_and_sampler_types]: #96
[#205 type_specifier_without_ident]: #78
[#205 unary_expression]: #256
[#205 vec_prefix]: #79
[#206 additive_expression]: #57
[#206 array_type_specifier]: #94
[#206 bool_literal]: #76
[#206 call_expression]: #68
[#206 callable]: #73
[#206 decimal_float_literal]: #84
[#206 decimal_int_literal]: #82
[#206 depth_texture_type]: #121
[#206 float_literal]: #75
[#206 hex_float_literal]: #85
[#206 hex_int_literal]: #83
[#206 ident]: #67
[#206 int_literal]: #74
[#206 literal]: #69
[#206 mat_prefix]: #80
[#206 multiplicative_expression]: #59
[#206 multisampled_texture_type]: #123
[#206 paren_expression]: #70
[#206 primary_expression]: #66
[#206 sampled_texture_type]: #122
[#206 sampler_type]: #120
[#206 shift_expression]: #255
[#206 singular_expression]: #60
[#206 storage_texture_type]: #124
[#206 texture_and_sampler_types]: #96
[#206 type_specifier_without_ident]: #78
[#206 unary_expression]: #248
[#206 vec_prefix]: #79
[#207 additive_expression]: #57
[#207 array_type_specifier]: #94
[#207 bool_literal]: #76
[#207 call_expression]: #68
[#207 callable]: #73
[#207 decimal_float_literal]: #84
[#207 decimal_int_literal]: #82
[#207 depth_texture_type]: #121
[#207 float_literal]: #75
[#207 hex_float_literal]: #85
[#207 hex_int_literal]: #83
[#207 ident]: #67
[#207 int_literal]: #74
[#207 literal]: #69
[#207 mat_prefix]: #80
[#207 multiplicative_expression]: #59
[#207 multisampled_texture_type]: #123
[#207 paren_expression]: #70
[#207 primary_expression]: #66
[#207 sampled_texture_type]: #122
[#207 sampler_type]: #120
[#207 shift_expression]: #254
[#207 singular_expression]: #60
[#207 storage_texture_type]: #124
[#207 texture_and_sampler_types]: #96
[#207 type_specifier_without_ident]: #78
[#207 unary_expression]: #248
[#207 vec_prefix]: #79
[#208 additive_expression]: #57
[#208 array_type_specifier]: #94
[#208 bool_literal]: #76
[#208 call_expression]: #68
[#208 callable]: #73
[#208 decimal_float_literal]: #84
[#208 decimal_int_literal]: #82
[#208 depth_texture_type]: #121
[#208 float_literal]: #75
[#208 hex_float_literal]: #85
[#208 hex_int_literal]: #83
[#208 ident]: #67
[#208 int_literal]: #74
[#208 literal]: #69
[#208 mat_prefix]: #80
[#208 multiplicative_expression]: #59
[#208 multisampled_texture_type]: #123
[#208 paren_expression]: #70
[#208 primary_expression]: #66
[#208 sampled_texture_type]: #122
[#208 sampler_type]: #120
[#208 shift_expression]: #253
[#208 singular_expression]: #60
[#208 storage_texture_type]: #124
[#208 texture_and_sampler_types]: #96
[#208 type_specifier_without_ident]: #78
[#208 unary_expression]: #248
[#208 vec_prefix]: #79
[#209 additive_expression]: #57
[#209 array_type_specifier]: #94
[#209 bool_literal]: #76
[#209 call_expression]: #68
[#209 callable]: #73
[#209 decimal_float_literal]: #84
[#209 decimal_int_literal]: #82
[#209 depth_texture_type]: #121
[#209 float_literal]: #75
[#209 hex_float_literal]: #85
[#209 hex_int_literal]: #83
[#209 ident]: #67
[#209 int_literal]: #74
[#209 literal]: #69
[#209 mat_prefix]: #80
[#209 multiplicative_expression]: #59
[#209 multisampled_texture_type]: #123
[#209 paren_expression]: #70
[#209 primary_expression]: #66
[#209 sampled_texture_type]: #122
[#209 sampler_type]: #120
[#209 shift_expression]: #252
[#209 singular_expression]: #60
[#209 storage_texture_type]: #124
[#209 texture_and_sampler_types]: #96
[#209 type_specifier_without_ident]: #78
[#209 unary_expression]: #248
[#209 vec_prefix]: #79
[#210 additive_expression]: #57
[#210 array_type_specifier]: #94
[#210 bool_literal]: #76
[#210 call_expression]: #68
[#210 callable]: #73
[#210 decimal_float_literal]: #84
[#210 decimal_int_literal]: #82
[#210 depth_texture_type]: #121
[#210 float_literal]: #75
[#210 hex_float_literal]: #85
[#210 hex_int_literal]: #83
[#210 ident]: #67
[#210 int_literal]: #74
[#210 literal]: #69
[#210 mat_prefix]: #80
[#210 multiplicative_expression]: #59
[#210 multisampled_texture_type]: #123
[#210 paren_expression]: #70
[#210 primary_expression]: #66
[#210 sampled_texture_type]: #122
[#210 sampler_type]: #120
[#210 shift_expression]: #251
[#210 singular_expression]: #60
[#210 storage_texture_type]: #124
[#210 texture_and_sampler_types]: #96
[#210 type_specifier_without_ident]: #78
[#210 unary_expression]: #248
[#210 vec_prefix]: #79
[#211 additive_expression]: #57
[#211 array_type_specifier]: #94
[#211 bool_literal]: #76
[#211 call_expression]: #68
[#211 callable]: #73
[#211 decimal_float_literal]: #84
[#211 decimal_int_literal]: #82
[#211 depth_texture_type]: #121
[#211 float_literal]: #75
[#211 hex_float_literal]: #85
[#211 hex_int_literal]: #83
[#211 ident]: #67
[#211 int_literal]: #74
[#211 literal]: #69
[#211 mat_prefix]: #80
[#211 multiplicative_expression]: #59
[#211 multisampled_texture_type]: #123
[#211 paren_expression]: #70
[#211 primary_expression]: #66
[#211 sampled_texture_type]: #122
[#211 sampler_type]: #120
[#211 shift_expression]: #250
[#211 singular_expression]: #60
[#211 storage_texture_type]: #124
[#211 texture_and_sampler_types]: #96
[#211 type_specifier_without_ident]: #78
[#211 unary_expression]: #248
[#211 vec_prefix]: #79
[#212 additive_expression]: #57
[#212 array_type_specifier]: #94
[#212 bool_literal]: #76
[#212 call_expression]: #68
[#212 callable]: #73
[#212 decimal_float_literal]: #84
[#212 decimal_int_literal]: #82
[#212 depth_texture_type]: #121
[#212 float_literal]: #75
[#212 hex_float_literal]: #85
[#212 hex_int_literal]: #83
[#212 ident]: #67
[#212 int_literal]: #74
[#212 literal]: #69
[#212 mat_prefix]: #80
[#212 multiplicative_expression]: #59
[#212 multisampled_texture_type]: #123
[#212 paren_expression]: #70
[#212 primary_expression]: #66
[#212 relational_expression]: #249
[#212 sampled_texture_type]: #122
[#212 sampler_type]: #120
[#212 shift_expression]: #53
[#212 singular_expression]: #60
[#212 storage_texture_type]: #124
[#212 texture_and_sampler_types]: #96
[#212 type_specifier_without_ident]: #78
[#212 unary_expression]: #248
[#212 vec_prefix]: #79
[#213 additive_expression]: #57
[#213 array_type_specifier]: #94
[#213 bool_literal]: #76
[#213 call_expression]: #68
[#213 callable]: #73
[#213 decimal_float_literal]: #84
[#213 decimal_int_literal]: #82
[#213 depth_texture_type]: #121
[#213 float_literal]: #75
[#213 hex_float_literal]: #85
[#213 hex_int_literal]: #83
[#213 ident]: #67
[#213 int_literal]: #74
[#213 literal]: #69
[#213 mat_prefix]: #80
[#213 multiplicative_expression]: #59
[#213 multisampled_texture_type]: #123
[#213 paren_expression]: #70
[#213 primary_expression]: #66
[#213 relational_expression]: #247
[#213 sampled_texture_type]: #122
[#213 sampler_type]: #120
[#213 shift_expression]: #53
[#213 singular_expression]: #60
[#213 storage_texture_type]: #124
[#213 texture_and_sampler_types]: #96
[#213 type_specifier_without_ident]: #78
[#213 unary_expression]: #248
[#213 vec_prefix]: #79
[#214 additive_expression]: #57
[#214 array_type_specifier]: #94
[#214 binary_and_expression]: #54
[#214 binary_or_expression]: #55
[#214 binary_xor_expression]: #56
[#214 bitwise_expression]: #52
[#214 bool_literal]: #76
[#214 call_expression]: #68
[#214 callable]: #73
[#214 decimal_float_literal]: #84
[#214 decimal_int_literal]: #82
[#214 depth_texture_type]: #121
[#214 expression]: #246
[#214 float_literal]: #75
[#214 hex_float_literal]: #85
[#214 hex_int_literal]: #83
[#214 ident]: #67
[#214 int_literal]: #74
[#214 literal]: #69
[#214 mat_prefix]: #80
[#214 multiplicative_expression]: #59
[#214 multisampled_texture_type]: #123
[#214 paren_expression]: #70
[#214 primary_expression]: #66
[#214 relational_expression]: #49
[#214 sampled_texture_type]: #122
[#214 sampler_type]: #120
[#214 shift_expression]: #53
[#214 short_circuit_and_expression]: #51
[#214 short_circuit_or_expression]: #50
[#214 singular_expression]: #60
[#214 storage_texture_type]: #124
[#214 texture_and_sampler_types]: #96
[#214 type_specifier_without_ident]: #78
[#214 unary_expression]: #58
[#214 vec_prefix]: #79
[#215 additive_expression]: #57
[#215 array_type_specifier]: #94
[#215 binary_and_expression]: #54
[#215 binary_or_expression]: #55
[#215 binary_xor_expression]: #56
[#215 bitwise_expression]: #52
[#215 bool_literal]: #76
[#215 call_expression]: #68
[#215 callable]: #73
[#215 decimal_float_literal]: #84
[#215 decimal_int_literal]: #82
[#215 depth_texture_type]: #121
[#215 expression]: #245
[#215 float_literal]: #75
[#215 hex_float_literal]: #85
[#215 hex_int_literal]: #83
[#215 ident]: #67
[#215 int_literal]: #74
[#215 literal]: #69
[#215 mat_prefix]: #80
[#215 multiplicative_expression]: #59
[#215 multisampled_texture_type]: #123
[#215 paren_expression]: #70
[#215 primary_expression]: #66
[#215 relational_expression]: #49
[#215 sampled_texture_type]: #122
[#215 sampler_type]: #120
[#215 shift_expression]: #53
[#215 short_circuit_and_expression]: #51
[#215 short_circuit_or_expression]: #50
[#215 singular_expression]: #60
[#215 storage_texture_type]: #124
[#215 texture_and_sampler_types]: #96
[#215 type_specifier_without_ident]: #78
[#215 unary_expression]: #58
[#215 vec_prefix]: #79
[#216 additive_expression]: #57
[#216 array_type_specifier]: #94
[#216 binary_and_expression]: #54
[#216 binary_or_expression]: #55
[#216 binary_xor_expression]: #56
[#216 bitwise_expression]: #52
[#216 bool_literal]: #76
[#216 call_expression]: #68
[#216 callable]: #73
[#216 decimal_float_literal]: #84
[#216 decimal_int_literal]: #82
[#216 depth_texture_type]: #121
[#216 expression]: #244
[#216 float_literal]: #75
[#216 hex_float_literal]: #85
[#216 hex_int_literal]: #83
[#216 ident]: #67
[#216 int_literal]: #74
[#216 literal]: #69
[#216 mat_prefix]: #80
[#216 multiplicative_expression]: #59
[#216 multisampled_texture_type]: #123
[#216 paren_expression]: #70
[#216 primary_expression]: #66
[#216 relational_expression]: #49
[#216 sampled_texture_type]: #122
[#216 sampler_type]: #120
[#216 shift_expression]: #53
[#216 short_circuit_and_expression]: #51
[#216 short_circuit_or_expression]: #50
[#216 singular_expression]: #60
[#216 storage_texture_type]: #124
[#216 texture_and_sampler_types]: #96
[#216 type_specifier_without_ident]: #78
[#216 unary_expression]: #58
[#216 vec_prefix]: #79
[#217 interpolation_type_name]: #240
[#218 additive_expression]: #57
[#218 array_type_specifier]: #94
[#218 binary_and_expression]: #54
[#218 binary_or_expression]: #55
[#218 binary_xor_expression]: #56
[#218 bitwise_expression]: #52
[#218 bool_literal]: #76
[#218 call_expression]: #68
[#218 callable]: #73
[#218 decimal_float_literal]: #84
[#218 decimal_int_literal]: #82
[#218 depth_texture_type]: #121
[#218 expression]: #239
[#218 float_literal]: #75
[#218 hex_float_literal]: #85
[#218 hex_int_literal]: #83
[#218 ident]: #67
[#218 int_literal]: #74
[#218 literal]: #69
[#218 mat_prefix]: #80
[#218 multiplicative_expression]: #59
[#218 multisampled_texture_type]: #123
[#218 paren_expression]: #70
[#218 primary_expression]: #66
[#218 relational_expression]: #49
[#218 sampled_texture_type]: #122
[#218 sampler_type]: #120
[#218 shift_expression]: #53
[#218 short_circuit_and_expression]: #51
[#218 short_circuit_or_expression]: #50
[#218 singular_expression]: #60
[#218 storage_texture_type]: #124
[#218 texture_and_sampler_types]: #96
[#218 type_specifier_without_ident]: #78
[#218 unary_expression]: #58
[#218 vec_prefix]: #79
[#219 additive_expression]: #57
[#219 array_type_specifier]: #94
[#219 binary_and_expression]: #54
[#219 binary_or_expression]: #55
[#219 binary_xor_expression]: #56
[#219 bitwise_expression]: #52
[#219 bool_literal]: #76
[#219 call_expression]: #68
[#219 callable]: #73
[#219 decimal_float_literal]: #84
[#219 decimal_int_literal]: #82
[#219 depth_texture_type]: #121
[#219 expression]: #238
[#219 float_literal]: #75
[#219 hex_float_literal]: #85
[#219 hex_int_literal]: #83
[#219 ident]: #67
[#219 int_literal]: #74
[#219 literal]: #69
[#219 mat_prefix]: #80
[#219 multiplicative_expression]: #59
[#219 multisampled_texture_type]: #123
[#219 paren_expression]: #70
[#219 primary_expression]: #66
[#219 relational_expression]: #49
[#219 sampled_texture_type]: #122
[#219 sampler_type]: #120
[#219 shift_expression]: #53
[#219 short_circuit_and_expression]: #51
[#219 short_circuit_or_expression]: #50
[#219 singular_expression]: #60
[#219 storage_texture_type]: #124
[#219 texture_and_sampler_types]: #96
[#219 type_specifier_without_ident]: #78
[#219 unary_expression]: #58
[#219 vec_prefix]: #79
[#220 builtin_value_name]: #225
[#221 additive_expression]: #57
[#221 array_type_specifier]: #94
[#221 binary_and_expression]: #54
[#221 binary_or_expression]: #55
[#221 binary_xor_expression]: #56
[#221 bitwise_expression]: #52
[#221 bool_literal]: #76
[#221 call_expression]: #68
[#221 callable]: #73
[#221 decimal_float_literal]: #84
[#221 decimal_int_literal]: #82
[#221 depth_texture_type]: #121
[#221 expression]: #224
[#221 float_literal]: #75
[#221 hex_float_literal]: #85
[#221 hex_int_literal]: #83
[#221 ident]: #67
[#221 int_literal]: #74
[#221 literal]: #69
[#221 mat_prefix]: #80
[#221 multiplicative_expression]: #59
[#221 multisampled_texture_type]: #123
[#221 paren_expression]: #70
[#221 primary_expression]: #66
[#221 relational_expression]: #49
[#221 sampled_texture_type]: #122
[#221 sampler_type]: #120
[#221 shift_expression]: #53
[#221 short_circuit_and_expression]: #51
[#221 short_circuit_or_expression]: #50
[#221 singular_expression]: #60
[#221 storage_texture_type]: #124
[#221 texture_and_sampler_types]: #96
[#221 type_specifier_without_ident]: #78
[#221 unary_expression]: #58
[#221 vec_prefix]: #79
[#222 additive_expression]: #57
[#222 array_type_specifier]: #94
[#222 binary_and_expression]: #54
[#222 binary_or_expression]: #55
[#222 binary_xor_expression]: #56
[#222 bitwise_expression]: #52
[#222 bool_literal]: #76
[#222 call_expression]: #68
[#222 callable]: #73
[#222 decimal_float_literal]: #84
[#222 decimal_int_literal]: #82
[#222 depth_texture_type]: #121
[#222 expression]: #223
[#222 float_literal]: #75
[#222 hex_float_literal]: #85
[#222 hex_int_literal]: #83
[#222 ident]: #67
[#222 int_literal]: #74
[#222 literal]: #69
[#222 mat_prefix]: #80
[#222 multiplicative_expression]: #59
[#222 multisampled_texture_type]: #123
[#222 paren_expression]: #70
[#222 primary_expression]: #66
[#222 relational_expression]: #49
[#222 sampled_texture_type]: #122
[#222 sampler_type]: #120
[#222 shift_expression]: #53
[#222 short_circuit_and_expression]: #51
[#222 short_circuit_or_expression]: #50
[#222 singular_expression]: #60
[#222 storage_texture_type]: #124
[#222 texture_and_sampler_types]: #96
[#222 type_specifier_without_ident]: #78
[#222 unary_expression]: #58
[#222 vec_prefix]: #79
[#223 attrib_end]: #463
[#223 attrib_end/0.0]: #453
[#224 attrib_end]: #462
[#224 attrib_end/0.0]: #453
[#225 attrib_end]: #461
[#225 attrib_end/0.0]: #453
[#238 attrib_end]: #460
[#238 attrib_end/0.0]: #453
[#239 attrib_end]: #459
[#239 attrib_end/0.0]: #453
[#240 attrib_end]: #457
[#240 attrib_end/0.0]: #453
[#244 attrib_end]: #456
[#244 attrib_end/0.0]: #453
[#245 attrib_end]: #454
[#245 attrib_end/0.0]: #453
[#246 attrib_end]: #451
[#246 attrib_end/0.0]: #453
[#259 multiplicative_operator]: #194
[#264 component_or_swizzle_specifier]: #450
[#264 component_or_swizzle_specifier/1.2]: #449
[#265 component_or_swizzle_specifier]: #448
[#265 component_or_swizzle_specifier/2.2]: #447
[#284 expression_comma_list/0.1]: #440
[#284 expression_comma_list/0.1/0]: #441
[#284 expression_comma_list/0.1/0/0.0]: #442
[#288 array_type_specifier/0.3]: #436
[#317 array_type_specifier]: #94
[#317 assignment_statement]: #345
[#317 break_statement]: #327
[#317 callable]: #339
[#317 compound_statement]: #331
[#317 compound_statement/0.1/0]: #429
[#317 continue_statement]: #328
[#317 core_lhs_expression]: #352
[#317 decrement_statement]: #347
[#317 depth_texture_type]: #121
[#317 for_statement]: #323
[#317 func_call_statement]: #325
[#317 ident]: #349
[#317 if_clause]: #334
[#317 if_statement]: #320
[#317 increment_statement]: #346
[#317 lhs_expression]: #350
[#317 loop_statement]: #322
[#317 mat_prefix]: #80
[#317 multisampled_texture_type]: #123
[#317 return_statement]: #319
[#317 sampled_texture_type]: #122
[#317 sampler_type]: #120
[#317 statement]: #317
[#317 static_assert_statement]: #332
[#317 storage_texture_type]: #124
[#317 switch_statement]: #321
[#317 texture_and_sampler_types]: #96
[#317 type_specifier_without_ident]: #78
[#317 variable_decl]: #340
[#317 variable_statement]: #326
[#317 variable_updating_statement]: #330
[#317 vec_prefix]: #79
[#317 while_statement]: #324
[#333 additive_expression]: #57
[#333 array_type_specifier]: #94
[#333 binary_and_expression]: #54
[#333 binary_or_expression]: #55
[#333 binary_xor_expression]: #56
[#333 bitwise_expression]: #52
[#333 bool_literal]: #76
[#333 call_expression]: #68
[#333 callable]: #73
[#333 decimal_float_literal]: #84
[#333 decimal_int_literal]: #82
[#333 depth_texture_type]: #121
[#333 expression]: #420
[#333 float_literal]: #75
[#333 hex_float_literal]: #85
[#333 hex_int_literal]: #83
[#333 ident]: #67
[#333 int_literal]: #74
[#333 literal]: #69
[#333 mat_prefix]: #80
[#333 multiplicative_expression]: #59
[#333 multisampled_texture_type]: #123
[#333 paren_expression]: #70
[#333 primary_expression]: #66
[#333 relational_expression]: #49
[#333 return_statement/0.1]: #419
[#333 sampled_texture_type]: #122
[#333 sampler_type]: #120
[#333 shift_expression]: #53
[#333 short_circuit_and_expression]: #51
[#333 short_circuit_or_expression]: #50
[#333 singular_expression]: #60
[#333 storage_texture_type]: #124
[#333 texture_and_sampler_types]: #96
[#333 type_specifier_without_ident]: #78
[#333 unary_expression]: #58
[#333 vec_prefix]: #79
[#334 else_if_clause]: #417
[#334 if_statement/0.1]: #415
[#334 if_statement/0.1/0]: #416
[#335 additive_expression]: #57
[#335 array_type_specifier]: #94
[#335 binary_and_expression]: #54
[#335 binary_or_expression]: #55
[#335 binary_xor_expression]: #56
[#335 bitwise_expression]: #52
[#335 bool_literal]: #76
[#335 call_expression]: #68
[#335 callable]: #73
[#335 decimal_float_literal]: #84
[#335 decimal_int_literal]: #82
[#335 depth_texture_type]: #121
[#335 expression]: #414
[#335 float_literal]: #75
[#335 hex_float_literal]: #85
[#335 hex_int_literal]: #83
[#335 ident]: #67
[#335 int_literal]: #74
[#335 literal]: #69
[#335 mat_prefix]: #80
[#335 multiplicative_expression]: #59
[#335 multisampled_texture_type]: #123
[#335 paren_expression]: #70
[#335 primary_expression]: #66
[#335 relational_expression]: #49
[#335 sampled_texture_type]: #122
[#335 sampler_type]: #120
[#335 shift_expression]: #53
[#335 short_circuit_and_expression]: #51
[#335 short_circuit_or_expression]: #50
[#335 singular_expression]: #60
[#335 storage_texture_type]: #124
[#335 texture_and_sampler_types]: #96
[#335 type_specifier_without_ident]: #78
[#335 unary_expression]: #58
[#335 vec_prefix]: #79
[#338 additive_expression]: #57
[#338 array_type_specifier]: #94
[#338 binary_and_expression]: #54
[#338 binary_or_expression]: #55
[#338 binary_xor_expression]: #56
[#338 bitwise_expression]: #52
[#338 bool_literal]: #76
[#338 call_expression]: #68
[#338 callable]: #73
[#338 decimal_float_literal]: #84
[#338 decimal_int_literal]: #82
[#338 depth_texture_type]: #121
[#338 expression]: #411
[#338 float_literal]: #75
[#338 hex_float_literal]: #85
[#338 hex_int_literal]: #83
[#338 ident]: #67
[#338 int_literal]: #74
[#338 literal]: #69
[#338 mat_prefix]: #80
[#338 multiplicative_expression]: #59
[#338 multisampled_texture_type]: #123
[#338 paren_expression]: #70
[#338 primary_expression]: #66
[#338 relational_expression]: #49
[#338 sampled_texture_type]: #122
[#338 sampler_type]: #120
[#338 shift_expression]: #53
[#338 short_circuit_and_expression]: #51
[#338 short_circuit_or_expression]: #50
[#338 singular_expression]: #60
[#338 storage_texture_type]: #124
[#338 texture_and_sampler_types]: #96
[#338 type_specifier_without_ident]: #78
[#338 unary_expression]: #58
[#338 vec_prefix]: #79
[#339 argument_expression_list]: #410
[#341 ident]: #149
[#341 optionally_typed_ident]: #408
[#342 ident]: #149
[#342 optionally_typed_ident]: #407
[#348 additive_expression]: #57
[#348 array_type_specifier]: #94
[#348 binary_and_expression]: #54
[#348 binary_or_expression]: #55
[#348 binary_xor_expression]: #56
[#348 bitwise_expression]: #52
[#348 bool_literal]: #76
[#348 call_expression]: #68
[#348 callable]: #73
[#348 decimal_float_literal]: #84
[#348 decimal_int_literal]: #82
[#348 depth_texture_type]: #121
[#348 expression]: #406
[#348 float_literal]: #75
[#348 hex_float_literal]: #85
[#348 hex_int_literal]: #83
[#348 ident]: #67
[#348 int_literal]: #74
[#348 literal]: #69
[#348 mat_prefix]: #80
[#348 multiplicative_expression]: #59
[#348 multisampled_texture_type]: #123
[#348 paren_expression]: #70
[#348 primary_expression]: #66
[#348 relational_expression]: #49
[#348 sampled_texture_type]: #122
[#348 sampler_type]: #120
[#348 shift_expression]: #53
[#348 short_circuit_and_expression]: #51
[#348 short_circuit_or_expression]: #50
[#348 singular_expression]: #60
[#348 storage_texture_type]: #124
[#348 texture_and_sampler_types]: #96
[#348 type_specifier_without_ident]: #78
[#348 unary_expression]: #58
[#348 vec_prefix]: #79
[#350 assignment_statement/0.1]: #391
[#350 compound_assignment_operator]: #395
[#352 component_or_swizzle_specifier]: #389
[#352 lhs_expression/0.1]: #388
[#353 core_lhs_expression]: #352
[#353 ident]: #385
[#353 lhs_expression]: #387
[#354 core_lhs_expression]: #352
[#354 ident]: #385
[#354 lhs_expression]: #386
[#355 core_lhs_expression]: #352
[#355 ident]: #385
[#355 lhs_expression]: #384
[#356 attribute]: #383
[#356 function_header/0.3]: #378
[#356 param]: #380
[#356 param/0.0]: #381
[#356 param/0.0/0]: #382
[#356 param_list]: #379
[#357 struct_body_decl/0.2]: #374
[#357 struct_body_decl/0.2/0]: #375
[#357 struct_body_decl/0.2/0/0.0]: #376
[#358 member_ident]: #373
[#360 attribute]: #360
[#360 struct_member/0.0/0]: #372
[#363 additive_expression]: #57
[#363 array_type_specifier]: #94
[#363 binary_and_expression]: #54
[#363 binary_or_expression]: #55
[#363 binary_xor_expression]: #56
[#363 bitwise_expression]: #52
[#363 bool_literal]: #76
[#363 call_expression]: #68
[#363 callable]: #73
[#363 decimal_float_literal]: #84
[#363 decimal_int_literal]: #82
[#363 depth_texture_type]: #121
[#363 expression]: #371
[#363 float_literal]: #75
[#363 hex_float_literal]: #85
[#363 hex_int_literal]: #83
[#363 ident]: #67
[#363 int_literal]: #74
[#363 literal]: #69
[#363 mat_prefix]: #80
[#363 multiplicative_expression]: #59
[#363 multisampled_texture_type]: #123
[#363 paren_expression]: #70
[#363 primary_expression]: #66
[#363 relational_expression]: #49
[#363 sampled_texture_type]: #122
[#363 sampler_type]: #120
[#363 shift_expression]: #53
[#363 short_circuit_and_expression]: #51
[#363 short_circuit_or_expression]: #50
[#363 singular_expression]: #60
[#363 storage_texture_type]: #124
[#363 texture_and_sampler_types]: #96
[#363 type_specifier_without_ident]: #78
[#363 unary_expression]: #58
[#363 vec_prefix]: #79
[#367 variable_qualifier/0.2]: #369
[#370 access_mode]: #522
[#374 struct_body_decl/0.3]: #519
[#376 struct_body_decl/0.2/0]: #518
[#376 struct_body_decl/0.2/0/0.0]: #376
[#377 attribute]: #360
[#377 struct_member]: #517
[#377 struct_member/0.0]: #358
[#377 struct_member/0.0/0]: #359
[#380 param_list/0.1]: #512
[#380 param_list/0.1/0]: #513
[#380 param_list/0.1/0/0.0]: #514
[#381 ident]: #511
[#383 attribute]: #383
[#383 param/0.0/0]: #510
[#390 additive_expression]: #57
[#390 array_type_specifier]: #94
[#390 binary_and_expression]: #54
[#390 binary_or_expression]: #55
[#390 binary_xor_expression]: #56
[#390 bitwise_expression]: #52
[#390 bool_literal]: #76
[#390 call_expression]: #68
[#390 callable]: #73
[#390 decimal_float_literal]: #84
[#390 decimal_int_literal]: #82
[#390 depth_texture_type]: #121
[#390 expression]: #508
[#390 float_literal]: #75
[#390 hex_float_literal]: #85
[#390 hex_int_literal]: #83
[#390 ident]: #67
[#390 int_literal]: #74
[#390 literal]: #69
[#390 mat_prefix]: #80
[#390 multiplicative_expression]: #59
[#390 multisampled_texture_type]: #123
[#390 paren_expression]: #70
[#390 primary_expression]: #66
[#390 relational_expression]: #49
[#390 sampled_texture_type]: #122
[#390 sampler_type]: #120
[#390 shift_expression]: #53
[#390 short_circuit_and_expression]: #51
[#390 short_circuit_or_expression]: #50
[#390 singular_expression]: #60
[#390 storage_texture_type]: #124
[#390 texture_and_sampler_types]: #96
[#390 type_specifier_without_ident]: #78
[#390 unary_expression]: #58
[#390 vec_prefix]: #79
[#391 additive_expression]: #57
[#391 array_type_specifier]: #94
[#391 binary_and_expression]: #54
[#391 binary_or_expression]: #55
[#391 binary_xor_expression]: #56
[#391 bitwise_expression]: #52
[#391 bool_literal]: #76
[#391 call_expression]: #68
[#391 callable]: #73
[#391 decimal_float_literal]: #84
[#391 decimal_int_literal]: #82
[#391 depth_texture_type]: #121
[#391 expression]: #507
[#391 float_literal]: #75
[#391 hex_float_literal]: #85
[#391 hex_int_literal]: #83
[#391 ident]: #67
[#391 int_literal]: #74
[#391 literal]: #69
[#391 mat_prefix]: #80
[#391 multiplicative_expression]: #59
[#391 multisampled_texture_type]: #123
[#391 paren_expression]: #70
[#391 primary_expression]: #66
[#391 relational_expression]: #49
[#391 sampled_texture_type]: #122
[#391 sampler_type]: #120
[#391 shift_expression]: #53
[#391 short_circuit_and_expression]: #51
[#391 short_circuit_or_expression]: #50
[#391 singular_expression]: #60
[#391 storage_texture_type]: #124
[#391 texture_and_sampler_types]: #96
[#391 type_specifier_without_ident]: #78
[#391 unary_expression]: #58
[#391 vec_prefix]: #79
[#406 compound_statement]: #506
[#409 additive_expression]: #57
[#409 array_type_specifier]: #94
[#409 binary_and_expression]: #54
[#409 binary_or_expression]: #55
[#409 binary_xor_expression]: #56
[#409 bitwise_expression]: #52
[#409 bool_literal]: #76
[#409 call_expression]: #68
[#409 callable]: #73
[#409 decimal_float_literal]: #84
[#409 decimal_int_literal]: #82
[#409 depth_texture_type]: #121
[#409 expression]: #503
[#409 float_literal]: #75
[#409 hex_float_literal]: #85
[#409 hex_int_literal]: #83
[#409 ident]: #67
[#409 int_literal]: #74
[#409 literal]: #69
[#409 mat_prefix]: #80
[#409 multiplicative_expression]: #59
[#409 multisampled_texture_type]: #123
[#409 paren_expression]: #70
[#409 primary_expression]: #66
[#409 relational_expression]: #49
[#409 sampled_texture_type]: #122
[#409 sampler_type]: #120
[#409 shift_expression]: #53
[#409 short_circuit_and_expression]: #51
[#409 short_circuit_or_expression]: #50
[#409 singular_expression]: #60
[#409 storage_texture_type]: #124
[#409 texture_and_sampler_types]: #96
[#409 type_specifier_without_ident]: #78
[#409 unary_expression]: #58
[#409 vec_prefix]: #79
[#411 compound_statement]: #502
[#412 array_type_specifier]: #94
[#412 assignment_statement]: #345
[#412 callable]: #339
[#412 core_lhs_expression]: #352
[#412 decrement_statement]: #347
[#412 depth_texture_type]: #121
[#412 for_header]: #496
[#412 for_header/0.0]: #497
[#412 for_init]: #498
[#412 func_call_statement]: #501
[#412 ident]: #349
[#412 increment_statement]: #346
[#412 lhs_expression]: #350
[#412 mat_prefix]: #80
[#412 multisampled_texture_type]: #123
[#412 sampled_texture_type]: #122
[#412 sampler_type]: #120
[#412 storage_texture_type]: #124
[#412 texture_and_sampler_types]: #96
[#412 type_specifier_without_ident]: #78
[#412 variable_decl]: #340
[#412 variable_statement]: #499
[#412 variable_updating_statement]: #500
[#412 vec_prefix]: #79
[#413 array_type_specifier]: #94
[#413 assignment_statement]: #345
[#413 break_statement]: #327
[#413 callable]: #339
[#413 compound_statement]: #331
[#413 continue_statement]: #328
[#413 core_lhs_expression]: #352
[#413 decrement_statement]: #347
[#413 depth_texture_type]: #121
[#413 for_statement]: #323
[#413 func_call_statement]: #325
[#413 ident]: #349
[#413 if_clause]: #334
[#413 if_statement]: #320
[#413 increment_statement]: #346
[#413 lhs_expression]: #350
[#413 loop_statement]: #322
[#413 loop_statement/0.2]: #493
[#413 loop_statement/0.2/0]: #494
[#413 mat_prefix]: #80
[#413 multisampled_texture_type]: #123
[#413 return_statement]: #319
[#413 sampled_texture_type]: #122
[#413 sampler_type]: #120
[#413 statement]: #495
[#413 static_assert_statement]: #332
[#413 storage_texture_type]: #124
[#413 switch_statement]: #321
[#413 texture_and_sampler_types]: #96
[#413 type_specifier_without_ident]: #78
[#413 variable_decl]: #340
[#413 variable_statement]: #326
[#413 variable_updating_statement]: #330
[#413 vec_prefix]: #79
[#413 while_statement]: #324
[#415 else_clause]: #490
[#415 if_statement/0.2]: #489
[#417 else_if_clause]: #417
[#417 if_statement/0.1/0]: #488
[#431 access_mode]: #483
[#435 array_type_specifier]: #94
[#435 depth_texture_type]: #121
[#435 ident]: #277
[#435 mat_prefix]: #280
[#435 multisampled_texture_type]: #123
[#435 sampled_texture_type]: #122
[#435 sampler_type]: #120
[#435 storage_texture_type]: #124
[#435 texture_and_sampler_types]: #96
[#435 type_specifier]: #482
[#435 type_specifier_without_ident]: #278
[#435 vec_prefix]: #279
[#437 additive_expression]: #478
[#437 array_type_specifier]: #94
[#437 binary_and_expression]: #54
[#437 binary_or_expression]: #55
[#437 binary_xor_expression]: #56
[#437 bitwise_expression]: #479
[#437 bool_literal]: #76
[#437 call_expression]: #68
[#437 callable]: #73
[#437 decimal_float_literal]: #84
[#437 decimal_int_literal]: #82
[#437 depth_texture_type]: #121
[#437 element_count_expression]: #477
[#437 float_literal]: #75
[#437 hex_float_literal]: #85
[#437 hex_int_literal]: #83
[#437 ident]: #67
[#437 int_literal]: #74
[#437 literal]: #69
[#437 mat_prefix]: #80
[#437 multiplicative_expression]: #59
[#437 multisampled_texture_type]: #123
[#437 paren_expression]: #70
[#437 primary_expression]: #66
[#437 sampled_texture_type]: #122
[#437 sampler_type]: #120
[#437 singular_expression]: #60
[#437 storage_texture_type]: #124
[#437 texture_and_sampler_types]: #96
[#437 type_specifier_without_ident]: #78
[#437 unary_expression]: #480
[#437 vec_prefix]: #79
[#440 expression_comma_list/0.2]: #475
[#442 expression_comma_list/0.1/0]: #474
[#442 expression_comma_list/0.1/0/0.0]: #442
[#443 additive_expression]: #57
[#443 array_type_specifier]: #94
[#443 binary_and_expression]: #54
[#443 binary_or_expression]: #55
[#443 binary_xor_expression]: #56
[#443 bitwise_expression]: #52
[#443 bool_literal]: #76
[#443 call_expression]: #68
[#443 callable]: #73
[#443 decimal_float_literal]: #84
[#443 decimal_int_literal]: #82
[#443 depth_texture_type]: #121
[#443 expression]: #473
[#443 float_literal]: #75
[#443 hex_float_literal]: #85
[#443 hex_int_literal]: #83
[#443 ident]: #67
[#443 int_literal]: #74
[#443 literal]: #69
[#443 mat_prefix]: #80
[#443 multiplicative_expression]: #59
[#443 multisampled_texture_type]: #123
[#443 paren_expression]: #70
[#443 primary_expression]: #66
[#443 relational_expression]: #49
[#443 sampled_texture_type]: #122
[#443 sampler_type]: #120
[#443 shift_expression]: #53
[#443 short_circuit_and_expression]: #51
[#443 short_circuit_or_expression]: #50
[#443 singular_expression]: #60
[#443 storage_texture_type]: #124
[#443 texture_and_sampler_types]: #96
[#443 type_specifier_without_ident]: #78
[#443 unary_expression]: #58
[#443 vec_prefix]: #79
[#445 paren_expression]: #472
[#446 component_or_swizzle_specifier]: #471
[#446 component_or_swizzle_specifier/0.3]: #470
[#452 additive_expression]: #57
[#452 array_type_specifier]: #94
[#452 binary_and_expression]: #54
[#452 binary_or_expression]: #55
[#452 binary_xor_expression]: #56
[#452 bitwise_expression]: #52
[#452 bool_literal]: #76
[#452 call_expression]: #68
[#452 callable]: #73
[#452 decimal_float_literal]: #84
[#452 decimal_int_literal]: #82
[#452 depth_texture_type]: #121
[#452 expression]: #469
[#452 float_literal]: #75
[#452 hex_float_literal]: #85
[#452 hex_int_literal]: #83
[#452 ident]: #67
[#452 int_literal]: #74
[#452 literal]: #69
[#452 mat_prefix]: #80
[#452 multiplicative_expression]: #59
[#452 multisampled_texture_type]: #123
[#452 paren_expression]: #70
[#452 primary_expression]: #66
[#452 relational_expression]: #49
[#452 sampled_texture_type]: #122
[#452 sampler_type]: #120
[#452 shift_expression]: #53
[#452 short_circuit_and_expression]: #51
[#452 short_circuit_or_expression]: #50
[#452 singular_expression]: #60
[#452 storage_texture_type]: #124
[#452 texture_and_sampler_types]: #96
[#452 type_specifier_without_ident]: #78
[#452 unary_expression]: #58
[#452 vec_prefix]: #79
[#458 interpolation_sample_name]: #464
[#464 attrib_end]: #555
[#464 attrib_end/0.0]: #453
[#469 attrib_end]: #553
[#469 attrib_end/0.0]: #453
[#478 additive_operator]: #200
[#482 type_specifier_without_ident/7.5]: #551
[#487 additive_expression]: #57
[#487 array_type_specifier]: #94
[#487 binary_and_expression]: #54
[#487 binary_or_expression]: #55
[#487 binary_xor_expression]: #56
[#487 bitwise_expression]: #52
[#487 bool_literal]: #76
[#487 call_expression]: #68
[#487 callable]: #73
[#487 decimal_float_literal]: #84
[#487 decimal_int_literal]: #82
[#487 depth_texture_type]: #121
[#487 expression]: #549
[#487 float_literal]: #75
[#487 hex_float_literal]: #85
[#487 hex_int_literal]: #83
[#487 ident]: #67
[#487 int_literal]: #74
[#487 literal]: #69
[#487 mat_prefix]: #80
[#487 multiplicative_expression]: #59
[#487 multisampled_texture_type]: #123
[#487 paren_expression]: #70
[#487 primary_expression]: #66
[#487 relational_expression]: #49
[#487 sampled_texture_type]: #122
[#487 sampler_type]: #120
[#487 shift_expression]: #53
[#487 short_circuit_and_expression]: #51
[#487 short_circuit_or_expression]: #50
[#487 singular_expression]: #60
[#487 storage_texture_type]: #124
[#487 texture_and_sampler_types]: #96
[#487 type_specifier_without_ident]: #78
[#487 unary_expression]: #58
[#487 vec_prefix]: #79
[#491 compound_statement]: #548
[#492 case_clause]: #544
[#492 default_alone_clause]: #545
[#492 switch_body]: #543
[#492 switch_statement/0.3]: #541
[#492 switch_statement/0.3/0]: #542
[#493 continuing_statement]: #539
[#493 loop_statement/0.3]: #538
[#495 array_type_specifier]: #94
[#495 assignment_statement]: #345
[#495 break_statement]: #327
[#495 callable]: #339
[#495 compound_statement]: #331
[#495 continue_statement]: #328
[#495 core_lhs_expression]: #352
[#495 decrement_statement]: #347
[#495 depth_texture_type]: #121
[#495 for_statement]: #323
[#495 func_call_statement]: #325
[#495 ident]: #349
[#495 if_clause]: #334
[#495 if_statement]: #320
[#495 increment_statement]: #346
[#495 lhs_expression]: #350
[#495 loop_statement]: #322
[#495 loop_statement/0.2/0]: #537
[#495 mat_prefix]: #80
[#495 multisampled_texture_type]: #123
[#495 return_statement]: #319
[#495 sampled_texture_type]: #122
[#495 sampler_type]: #120
[#495 statement]: #495
[#495 static_assert_statement]: #332
[#495 storage_texture_type]: #124
[#495 switch_statement]: #321
[#495 texture_and_sampler_types]: #96
[#495 type_specifier_without_ident]: #78
[#495 variable_decl]: #340
[#495 variable_statement]: #326
[#495 variable_updating_statement]: #330
[#495 vec_prefix]: #79
[#495 while_statement]: #324
[#504 additive_expression]: #57
[#504 array_type_specifier]: #94
[#504 binary_and_expression]: #54
[#504 binary_or_expression]: #55
[#504 binary_xor_expression]: #56
[#504 bitwise_expression]: #52
[#504 bool_literal]: #76
[#504 call_expression]: #68
[#504 callable]: #73
[#504 decimal_float_literal]: #84
[#504 decimal_int_literal]: #82
[#504 depth_texture_type]: #121
[#504 expression]: #534
[#504 float_literal]: #75
[#504 hex_float_literal]: #85
[#504 hex_int_literal]: #83
[#504 ident]: #67
[#504 int_literal]: #74
[#504 literal]: #69
[#504 mat_prefix]: #80
[#504 multiplicative_expression]: #59
[#504 multisampled_texture_type]: #123
[#504 paren_expression]: #70
[#504 primary_expression]: #66
[#504 relational_expression]: #49
[#504 sampled_texture_type]: #122
[#504 sampler_type]: #120
[#504 shift_expression]: #53
[#504 short_circuit_and_expression]: #51
[#504 short_circuit_or_expression]: #50
[#504 singular_expression]: #60
[#504 storage_texture_type]: #124
[#504 texture_and_sampler_types]: #96
[#504 type_specifier_without_ident]: #78
[#504 unary_expression]: #58
[#504 vec_prefix]: #79
[#505 additive_expression]: #57
[#505 array_type_specifier]: #94
[#505 binary_and_expression]: #54
[#505 binary_or_expression]: #55
[#505 binary_xor_expression]: #56
[#505 bitwise_expression]: #52
[#505 bool_literal]: #76
[#505 call_expression]: #68
[#505 callable]: #73
[#505 decimal_float_literal]: #84
[#505 decimal_int_literal]: #82
[#505 depth_texture_type]: #121
[#505 expression]: #533
[#505 float_literal]: #75
[#505 hex_float_literal]: #85
[#505 hex_int_literal]: #83
[#505 ident]: #67
[#505 int_literal]: #74
[#505 literal]: #69
[#505 mat_prefix]: #80
[#505 multiplicative_expression]: #59
[#505 multisampled_texture_type]: #123
[#505 paren_expression]: #70
[#505 primary_expression]: #66
[#505 relational_expression]: #49
[#505 sampled_texture_type]: #122
[#505 sampler_type]: #120
[#505 shift_expression]: #53
[#505 short_circuit_and_expression]: #51
[#505 short_circuit_or_expression]: #50
[#505 singular_expression]: #60
[#505 storage_texture_type]: #124
[#505 texture_and_sampler_types]: #96
[#505 type_specifier_without_ident]: #78
[#505 unary_expression]: #58
[#505 vec_prefix]: #79
[#512 param_list/0.2]: #530
[#514 param_list/0.1/0]: #529
[#514 param_list/0.1/0/0.0]: #514
[#515 attribute]: #383
[#515 param]: #528
[#515 param/0.0]: #381
[#515 param/0.0/0]: #382
[#516 function_header/0.5]: #526
[#521 array_type_specifier]: #94
[#521 depth_texture_type]: #121
[#521 ident]: #277
[#521 mat_prefix]: #280
[#521 multisampled_texture_type]: #123
[#521 sampled_texture_type]: #122
[#521 sampler_type]: #120
[#521 storage_texture_type]: #124
[#521 texture_and_sampler_types]: #96
[#521 type_specifier]: #524
[#521 type_specifier_without_ident]: #278
[#521 vec_prefix]: #279
[#527 attribute]: #577
[#527 function_header/0.5/0.1]: #575
[#527 function_header/0.5/0.1/0]: #576
[#532 array_type_specifier]: #94
[#532 depth_texture_type]: #121
[#532 ident]: #277
[#532 mat_prefix]: #280
[#532 multisampled_texture_type]: #123
[#532 sampled_texture_type]: #122
[#532 sampler_type]: #120
[#532 storage_texture_type]: #124
[#532 texture_and_sampler_types]: #96
[#532 type_specifier]: #574
[#532 type_specifier_without_ident]: #278
[#532 vec_prefix]: #279
[#535 additive_expression]: #57
[#535 array_type_specifier]: #94
[#535 binary_and_expression]: #54
[#535 binary_or_expression]: #55
[#535 binary_xor_expression]: #56
[#535 bitwise_expression]: #52
[#535 bool_literal]: #76
[#535 call_expression]: #68
[#535 callable]: #73
[#535 decimal_float_literal]: #84
[#535 decimal_int_literal]: #82
[#535 depth_texture_type]: #121
[#535 expression]: #573
[#535 float_literal]: #75
[#535 for_header/0.2]: #572
[#535 hex_float_literal]: #85
[#535 hex_int_literal]: #83
[#535 ident]: #67
[#535 int_literal]: #74
[#535 literal]: #69
[#535 mat_prefix]: #80
[#535 multiplicative_expression]: #59
[#535 multisampled_texture_type]: #123
[#535 paren_expression]: #70
[#535 primary_expression]: #66
[#535 relational_expression]: #49
[#535 sampled_texture_type]: #122
[#535 sampler_type]: #120
[#535 shift_expression]: #53
[#535 short_circuit_and_expression]: #51
[#535 short_circuit_or_expression]: #50
[#535 singular_expression]: #60
[#535 storage_texture_type]: #124
[#535 texture_and_sampler_types]: #96
[#535 type_specifier_without_ident]: #78
[#535 unary_expression]: #58
[#535 vec_prefix]: #79
[#536 compound_statement]: #571
[#540 continuing_compound_statement]: #568
[#543 case_clause]: #544
[#543 default_alone_clause]: #545
[#543 switch_body]: #543
[#543 switch_statement/0.3/0]: #566
[#546 additive_expression]: #57
[#546 array_type_specifier]: #94
[#546 binary_and_expression]: #54
[#546 binary_or_expression]: #55
[#546 binary_xor_expression]: #56
[#546 bitwise_expression]: #52
[#546 bool_literal]: #76
[#546 call_expression]: #68
[#546 callable]: #73
[#546 case_selector]: #563
[#546 case_selectors]: #562
[#546 decimal_float_literal]: #84
[#546 decimal_int_literal]: #82
[#546 depth_texture_type]: #121
[#546 expression]: #565
[#546 float_literal]: #75
[#546 hex_float_literal]: #85
[#546 hex_int_literal]: #83
[#546 ident]: #67
[#546 int_literal]: #74
[#546 literal]: #69
[#546 mat_prefix]: #80
[#546 multiplicative_expression]: #59
[#546 multisampled_texture_type]: #123
[#546 paren_expression]: #70
[#546 primary_expression]: #66
[#546 relational_expression]: #49
[#546 sampled_texture_type]: #122
[#546 sampler_type]: #120
[#546 shift_expression]: #53
[#546 short_circuit_and_expression]: #51
[#546 short_circuit_or_expression]: #50
[#546 singular_expression]: #60
[#546 storage_texture_type]: #124
[#546 texture_and_sampler_types]: #96
[#546 type_specifier_without_ident]: #78
[#546 unary_expression]: #58
[#546 vec_prefix]: #79
[#547 default_alone_clause/0.1]: #560
[#549 compound_statement]: #559
[#552 access_mode]: #557
[#554 additive_expression]: #57
[#554 array_type_specifier]: #94
[#554 binary_and_expression]: #54
[#554 binary_or_expression]: #55
[#554 binary_xor_expression]: #56
[#554 bitwise_expression]: #52
[#554 bool_literal]: #76
[#554 call_expression]: #68
[#554 callable]: #73
[#554 decimal_float_literal]: #84
[#554 decimal_int_literal]: #82
[#554 depth_texture_type]: #121
[#554 expression]: #556
[#554 float_literal]: #75
[#554 hex_float_literal]: #85
[#554 hex_int_literal]: #83
[#554 ident]: #67
[#554 int_literal]: #74
[#554 literal]: #69
[#554 mat_prefix]: #80
[#554 multiplicative_expression]: #59
[#554 multisampled_texture_type]: #123
[#554 paren_expression]: #70
[#554 primary_expression]: #66
[#554 relational_expression]: #49
[#554 sampled_texture_type]: #122
[#554 sampler_type]: #120
[#554 shift_expression]: #53
[#554 short_circuit_and_expression]: #51
[#554 short_circuit_or_expression]: #50
[#554 singular_expression]: #60
[#554 storage_texture_type]: #124
[#554 texture_and_sampler_types]: #96
[#554 type_specifier_without_ident]: #78
[#554 unary_expression]: #58
[#554 vec_prefix]: #79
[#556 attrib_end]: #591
[#556 attrib_end/0.0]: #453
[#560 compound_statement]: #590
[#562 case_clause/0.2]: #588
[#563 case_selectors/0.1]: #584
[#563 case_selectors/0.1/0]: #585
[#563 case_selectors/0.1/0/0.0]: #586
[#569 array_type_specifier]: #94
[#569 assignment_statement]: #345
[#569 break_statement]: #327
[#569 callable]: #339
[#569 compound_statement]: #331
[#569 continue_statement]: #328
[#569 continuing_compound_statement/0.1]: #581
[#569 continuing_compound_statement/0.1/0]: #582
[#569 core_lhs_expression]: #352
[#569 decrement_statement]: #347
[#569 depth_texture_type]: #121
[#569 for_statement]: #323
[#569 func_call_statement]: #325
[#569 ident]: #349
[#569 if_clause]: #334
[#569 if_statement]: #320
[#569 increment_statement]: #346
[#569 lhs_expression]: #350
[#569 loop_statement]: #322
[#569 mat_prefix]: #80
[#569 multisampled_texture_type]: #123
[#569 return_statement]: #319
[#569 sampled_texture_type]: #122
[#569 sampler_type]: #120
[#569 statement]: #583
[#569 static_assert_statement]: #332
[#569 storage_texture_type]: #124
[#569 switch_statement]: #321
[#569 texture_and_sampler_types]: #96
[#569 type_specifier_without_ident]: #78
[#569 variable_decl]: #340
[#569 variable_statement]: #326
[#569 variable_updating_statement]: #330
[#569 vec_prefix]: #79
[#569 while_statement]: #324
[#575 array_type_specifier]: #94
[#575 depth_texture_type]: #121
[#575 ident]: #277
[#575 mat_prefix]: #280
[#575 multisampled_texture_type]: #123
[#575 sampled_texture_type]: #122
[#575 sampler_type]: #120
[#575 storage_texture_type]: #124
[#575 texture_and_sampler_types]: #96
[#575 type_specifier]: #579
[#575 type_specifier_without_ident]: #278
[#575 vec_prefix]: #279
[#577 attribute]: #577
[#577 function_header/0.5/0.1/0]: #578
[#580 array_type_specifier]: #94
[#580 assignment_statement]: #345
[#580 callable]: #339
[#580 core_lhs_expression]: #352
[#580 decrement_statement]: #347
[#580 depth_texture_type]: #121
[#580 for_header/0.4]: #601
[#580 for_update]: #602
[#580 func_call_statement]: #604
[#580 ident]: #349
[#580 increment_statement]: #346
[#580 lhs_expression]: #350
[#580 mat_prefix]: #80
[#580 multisampled_texture_type]: #123
[#580 sampled_texture_type]: #122
[#580 sampler_type]: #120
[#580 storage_texture_type]: #124
[#580 texture_and_sampler_types]: #96
[#580 type_specifier_without_ident]: #78
[#580 variable_updating_statement]: #603
[#580 vec_prefix]: #79
[#581 break_if_statement]: #599
[#581 continuing_compound_statement/0.2]: #598
[#583 array_type_specifier]: #94
[#583 assignment_statement]: #345
[#583 break_statement]: #327
[#583 callable]: #339
[#583 compound_statement]: #331
[#583 continue_statement]: #328
[#583 continuing_compound_statement/0.1/0]: #597
[#583 core_lhs_expression]: #352
[#583 decrement_statement]: #347
[#583 depth_texture_type]: #121
[#583 for_statement]: #323
[#583 func_call_statement]: #325
[#583 ident]: #349
[#583 if_clause]: #334
[#583 if_statement]: #320
[#583 increment_statement]: #346
[#583 lhs_expression]: #350
[#583 loop_statement]: #322
[#583 mat_prefix]: #80
[#583 multisampled_texture_type]: #123
[#583 return_statement]: #319
[#583 sampled_texture_type]: #122
[#583 sampler_type]: #120
[#583 statement]: #583
[#583 static_assert_statement]: #332
[#583 storage_texture_type]: #124
[#583 switch_statement]: #321
[#583 texture_and_sampler_types]: #96
[#583 type_specifier_without_ident]: #78
[#583 variable_decl]: #340
[#583 variable_statement]: #326
[#583 variable_updating_statement]: #330
[#583 vec_prefix]: #79
[#583 while_statement]: #324
[#584 case_selectors/0.2]: #595
[#586 case_selectors/0.1/0]: #594
[#586 case_selectors/0.1/0/0.0]: #586
[#587 additive_expression]: #57
[#587 array_type_specifier]: #94
[#587 binary_and_expression]: #54
[#587 binary_or_expression]: #55
[#587 binary_xor_expression]: #56
[#587 bitwise_expression]: #52
[#587 bool_literal]: #76
[#587 call_expression]: #68
[#587 callable]: #73
[#587 case_selector]: #593
[#587 decimal_float_literal]: #84
[#587 decimal_int_literal]: #82
[#587 depth_texture_type]: #121
[#587 expression]: #565
[#587 float_literal]: #75
[#587 hex_float_literal]: #85
[#587 hex_int_literal]: #83
[#587 ident]: #67
[#587 int_literal]: #74
[#587 literal]: #69
[#587 mat_prefix]: #80
[#587 multiplicative_expression]: #59
[#587 multisampled_texture_type]: #123
[#587 paren_expression]: #70
[#587 primary_expression]: #66
[#587 relational_expression]: #49
[#587 sampled_texture_type]: #122
[#587 sampler_type]: #120
[#587 shift_expression]: #53
[#587 short_circuit_and_expression]: #51
[#587 short_circuit_or_expression]: #50
[#587 singular_expression]: #60
[#587 storage_texture_type]: #124
[#587 texture_and_sampler_types]: #96
[#587 type_specifier_without_ident]: #78
[#587 unary_expression]: #58
[#587 vec_prefix]: #79
[#588 compound_statement]: #592
[#605 additive_expression]: #57
[#605 array_type_specifier]: #94
[#605 binary_and_expression]: #54
[#605 binary_or_expression]: #55
[#605 binary_xor_expression]: #56
[#605 bitwise_expression]: #52
[#605 bool_literal]: #76
[#605 call_expression]: #68
[#605 callable]: #73
[#605 decimal_float_literal]: #84
[#605 decimal_int_literal]: #82
[#605 depth_texture_type]: #121
[#605 expression]: #607
[#605 float_literal]: #75
[#605 hex_float_literal]: #85
[#605 hex_int_literal]: #83
[#605 ident]: #67
[#605 int_literal]: #74
[#605 literal]: #69
[#605 mat_prefix]: #80
[#605 multiplicative_expression]: #59
[#605 multisampled_texture_type]: #123
[#605 paren_expression]: #70
[#605 primary_expression]: #66
[#605 relational_expression]: #49
[#605 sampled_texture_type]: #122
[#605 sampler_type]: #120
[#605 shift_expression]: #53
[#605 short_circuit_and_expression]: #51
[#605 short_circuit_or_expression]: #50
[#605 singular_expression]: #60
[#605 storage_texture_type]: #124
[#605 texture_and_sampler_types]: #96
[#605 type_specifier_without_ident]: #78
[#605 unary_expression]: #58
[#605 vec_prefix]: #79
