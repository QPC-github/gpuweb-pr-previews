=Grammar:

_blankspace:/[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment:
   '//' /.*/
access_mode:
   'read'
 | 'read_write'
 | 'write'
additive_expression:
   additive_expression minus multiplicative_expression
 | additive_expression plus multiplicative_expression
 | multiplicative_expression
address_space:
   'function'
 | 'private'
 | 'storage'
 | 'uniform'
 | 'workgroup'
and:'&'
and_and:'&&'
and_equal:'&='
argument_expression_list:
   paren_left ( ( expression comma ) * ? expression comma ? )? paren_right
argument_expression_list/0.1/0.0/0/0.0:
   expression comma
array:'array'
array_type_decl:
   'array' less_than type_decl ( comma element_count_expression )? greater_than
arrow:'->'
assignment_statement:
   lhs_expression ( equal | compound_assignment_operator ) expression
 | underscore equal expression
atomic:'atomic'
attr:'@'
attrib_end:
   comma ? paren_right
attribute:
   attr 'align' paren_left expression attrib_end
 | attr 'binding' paren_left expression attrib_end
 | attr 'builtin' paren_left builtin_value_name attrib_end
 | attr 'compute'
 | attr 'const'
 | attr 'fragment'
 | attr 'group' paren_left expression attrib_end
 | attr 'id' paren_left expression attrib_end
 | attr 'interpolate' paren_left interpolation_type_name attrib_end
 | attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end
 | attr 'invariant'
 | attr 'location' paren_left expression attrib_end
 | attr 'size' paren_left expression attrib_end
 | attr 'vertex'
 | attr 'workgroup_size' paren_left expression attrib_end
 | attr 'workgroup_size' paren_left expression comma expression attrib_end
 | attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end
bang:'!'
binary_and_expression:
   binary_and_expression and unary_expression
 | unary_expression
binary_or_expression:
   binary_or_expression or unary_expression
 | unary_expression
binary_xor_expression:
   binary_xor_expression xor unary_expression
 | unary_expression
bitcast:'bitcast'
bitwise_expression:
   binary_and_expression and unary_expression
 | binary_or_expression or unary_expression
 | binary_xor_expression xor unary_expression
bool:'bool'
bool_literal:
   'false'
 | 'true'
brace_left:'{'
brace_right:'}'
bracket_left:'['
bracket_right:']'
break:'break'
break_if_statement:
   'break' 'if' expression semicolon
break_statement:'break'
builtin_value_name:
   'frag_depth'
 | 'front_facing'
 | 'global_invocation_id'
 | 'instance_index'
 | 'local_invocation_id'
 | 'local_invocation_index'
 | 'num_workgroups'
 | 'position'
 | 'sample_index'
 | 'sample_mask'
 | 'vertex_index'
 | 'workgroup_id'
callable:
   'array'
 | ident
 | mat_prefix
 | type_decl_without_ident
 | vec_prefix
case:'case'
case_compound_statement:
   brace_left statement * ? fallthrough_statement ? brace_right
case_selectors:
   expression ( comma expression ) * ? comma ?
case_selectors/0.1/0/0.0:
   comma expression
colon:':'
comma:','
compound_assignment_operator:
   and_equal
 | division_equal
 | minus_equal
 | modulo_equal
 | or_equal
 | plus_equal
 | shift_left_equal
 | shift_right_equal
 | times_equal
 | xor_equal
compound_statement:
   brace_left statement * ? brace_right
const:'const'
const_literal:
   bool_literal
 | float_literal
 | int_literal
continue:'continue'
continue_statement:'continue'
continuing:'continuing'
continuing_compound_statement:
   brace_left statement * ? break_if_statement ? brace_right
continuing_statement:
   'continuing' continuing_compound_statement
core_lhs_expression:
   ident
 | paren_left lhs_expression paren_right
decimal_float_literal:
   /0[fh]/
 | /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/
 | /[0-9]+[eE][+-]?[0-9]+[fh]?/
 | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/
 | /[1-9][0-9]*[fh]/
decrement_statement:
   lhs_expression minus_minus
default:'default'
depth_texture_type:
   'texture_depth_2d'
 | 'texture_depth_2d_array'
 | 'texture_depth_cube'
 | 'texture_depth_cube_array'
 | 'texture_depth_multisampled_2d'
discard:'discard'
division_equal:'/='
element_count_expression:
   additive_expression
 | bitwise_expression
else:'else'
else_clause:
   'else' compound_statement
else_if_clause:
   'else' 'if' expression compound_statement
enable:'enable'
enable_directive:
   'enable' extension_name semicolon
equal:'='
equal_equal:'=='
expression:
   bitwise_expression
 | relational_expression
 | short_circuit_and_expression and_and relational_expression
 | short_circuit_or_expression or_or relational_expression
extension_name:'f16'
fallthrough:'fallthrough'
fallthrough_statement:
   'fallthrough' semicolon
false:'false'
float16:'f16'
float32:'f32'
float_literal:
   decimal_float_literal
 | hex_float_literal
fn:'fn'
for:'for'
for_header:
   for_init ? semicolon expression ? semicolon for_update ?
for_init:
   assignment_statement
 | decrement_statement
 | func_call_statement
 | increment_statement
 | variable_statement
for_statement:
   'for' paren_left for_header paren_right compound_statement
for_update:
   assignment_statement
 | decrement_statement
 | func_call_statement
 | increment_statement
forward_slash:'/'
func_call_statement:
   ident argument_expression_list
function:'function'
function_decl:
   attribute * ? function_header compound_statement
function_header:
   'fn' ident paren_left param_list ? paren_right ( arrow attribute * ? type_decl )?
global_constant_decl:
   'const' ( ident | variable_ident_decl ) equal expression
 | attribute * ? 'override' ( ident | variable_ident_decl ) ( equal expression )?
global_decl:
   function_decl
 | global_constant_decl semicolon
 | global_variable_decl semicolon
 | semicolon
 | static_assert_statement semicolon
 | struct_decl
 | type_alias_decl semicolon
global_directive:enable_directive
global_variable_decl:
   attribute * ? variable_decl ( equal expression )?
greater_than:'>'
greater_than_equal:'>='
hex_float_literal:
   /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/
 | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
 | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/
ident:ident_pattern_token
ident_pattern_token:/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if:'if'
if_clause:
   'if' expression compound_statement
if_statement:
   if_clause else_if_clause * ? else_clause ?
increment_statement:
   lhs_expression plus_plus
int32:'i32'
int_literal:
   /0[iu]?/
 | /0[xX][0-9a-fA-F]+[iu]?/
 | /[1-9][0-9]*[iu]?/
interpolation_sample_name:
   'center'
 | 'centroid'
 | 'sample'
interpolation_type_name:
   'flat'
 | 'linear'
 | 'perspective'
less_than:'<'
less_than_equal:'<='
let:'let'
lhs_expression:
   ( star | and ) * ? core_lhs_expression postfix_expression ?
loop:'loop'
loop_statement:
   'loop' brace_left statement * ? continuing_statement ? brace_right
mat2x2:'mat2x2'
mat2x3:'mat2x3'
mat2x4:'mat2x4'
mat3x2:'mat3x2'
mat3x3:'mat3x3'
mat3x4:'mat3x4'
mat4x2:'mat4x2'
mat4x3:'mat4x3'
mat4x4:'mat4x4'
mat_prefix:
   'mat2x2'
 | 'mat2x3'
 | 'mat2x4'
 | 'mat3x2'
 | 'mat3x3'
 | 'mat3x4'
 | 'mat4x2'
 | 'mat4x3'
 | 'mat4x4'
member_ident:ident_pattern_token
minus:'-'
minus_equal:'-='
minus_minus:'--'
modulo:'%'
modulo_equal:'%='
multiplicative_expression:
   multiplicative_expression forward_slash unary_expression
 | multiplicative_expression modulo unary_expression
 | multiplicative_expression star unary_expression
 | unary_expression
multisampled_texture_type:'texture_multisampled_2d'
not_equal:'!='
or:'|'
or_equal:'|='
or_or:'||'
override:'override'
param:
   attribute * ? variable_ident_decl
param_list:
   ( param comma ) * ? param comma ?
param_list/0.0/0/0.0:
   param comma
paren_expression:
   paren_left expression paren_right
paren_left:'('
paren_right:')'
period:'.'
plus:'+'
plus_equal:'+='
plus_plus:'++'
pointer:'ptr'
postfix_expression:
   bracket_left expression bracket_right postfix_expression ?
 | period member_ident postfix_expression ?
 | period swizzle_name postfix_expression ?
primary_expression:
   'bitcast' less_than type_decl greater_than paren_expression
 | callable argument_expression_list
 | const_literal
 | ident
 | paren_expression
private:'private'
relational_expression:
   shift_expression
 | shift_expression equal_equal shift_expression
 | shift_expression greater_than shift_expression
 | shift_expression greater_than_equal shift_expression
 | shift_expression less_than shift_expression
 | shift_expression less_than_equal shift_expression
 | shift_expression not_equal shift_expression
return:'return'
return_statement:
   'return' expression ?
sampled_texture_type:
   'texture_1d'
 | 'texture_2d'
 | 'texture_2d_array'
 | 'texture_3d'
 | 'texture_cube'
 | 'texture_cube_array'
sampler:'sampler'
sampler_comparison:'sampler_comparison'
sampler_type:
   'sampler'
 | 'sampler_comparison'
semicolon:';'
shift_expression:
   additive_expression
 | unary_expression shift_left unary_expression
 | unary_expression shift_right unary_expression
shift_left:'<<'
shift_left_equal:'<<='
shift_right:'>>'
shift_right_equal:'>>='
short_circuit_and_expression:
   relational_expression
 | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression:
   relational_expression
 | short_circuit_or_expression or_or relational_expression
singular_expression:
   primary_expression postfix_expression ?
star:'*'
statement:
   'discard' semicolon
 | assignment_statement semicolon
 | break_statement semicolon
 | compound_statement
 | continue_statement semicolon
 | decrement_statement semicolon
 | for_statement
 | func_call_statement semicolon
 | if_statement
 | increment_statement semicolon
 | loop_statement
 | return_statement semicolon
 | semicolon
 | static_assert_statement semicolon
 | switch_statement
 | variable_statement semicolon
 | while_statement
static_assert:'static_assert'
static_assert_statement:
   'static_assert' expression
storage:'storage'
storage_texture_type:
   'texture_storage_1d'
 | 'texture_storage_2d'
 | 'texture_storage_2d_array'
 | 'texture_storage_3d'
struct:'struct'
struct_body_decl:
   brace_left ( struct_member comma ) * ? struct_member comma ? brace_right
struct_body_decl/0.1/0/0.0:
   struct_member comma
struct_decl:
   'struct' ident struct_body_decl
struct_member:
   attribute * ? member_ident colon type_decl
switch:'switch'
switch_body:
   'case' case_selectors colon ? case_compound_statement
 | 'default' colon ? case_compound_statement
switch_statement:
   'switch' expression brace_left ( switch_body * ) brace_right
switch_statement/0.3:
   switch_body *
swizzle_name:
   '/[rgba]/'
 | '/[rgba][rgba]/'
 | '/[rgba][rgba][rgba]/'
 | '/[rgba][rgba][rgba][rgba]/'
 | '/[xyzw]/'
 | '/[xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw]/'
 | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format:
   'r32float'
 | 'r32sint'
 | 'r32uint'
 | 'rg32float'
 | 'rg32sint'
 | 'rg32uint'
 | 'rgba16float'
 | 'rgba16sint'
 | 'rgba16uint'
 | 'rgba32float'
 | 'rgba32sint'
 | 'rgba32uint'
 | 'rgba8sint'
 | 'rgba8snorm'
 | 'rgba8uint'
 | 'rgba8unorm'
texture_1d:'texture_1d'
texture_2d:'texture_2d'
texture_2d_array:'texture_2d_array'
texture_3d:'texture_3d'
texture_and_sampler_types:
   depth_texture_type
 | multisampled_texture_type less_than type_decl greater_than
 | sampled_texture_type less_than type_decl greater_than
 | sampler_type
 | storage_texture_type less_than texel_format comma access_mode greater_than
texture_cube:'texture_cube'
texture_cube_array:'texture_cube_array'
texture_depth_2d:'texture_depth_2d'
texture_depth_2d_array:'texture_depth_2d_array'
texture_depth_cube:'texture_depth_cube'
texture_depth_cube_array:'texture_depth_cube_array'
texture_depth_multisampled_2d:'texture_depth_multisampled_2d'
texture_multisampled_2d:'texture_multisampled_2d'
texture_storage_1d:'texture_storage_1d'
texture_storage_2d:'texture_storage_2d'
texture_storage_2d_array:'texture_storage_2d_array'
texture_storage_3d:'texture_storage_3d'
tilde:'~'
times_equal:'*='
translation_unit:
   global_directive * ? global_decl * ?
true:'true'
type:'type'
type_alias_decl:
   'type' ident equal type_decl
type_decl:
   ident
 | type_decl_without_ident
type_decl_without_ident:
   'atomic' less_than type_decl greater_than
 | 'bool'
 | array_type_decl
 | float16
 | float32
 | int32
 | mat_prefix less_than type_decl greater_than
 | pointer less_than address_space comma type_decl ( comma access_mode )? greater_than
 | texture_and_sampler_types
 | uint32
 | vec_prefix less_than type_decl greater_than
uint32:'u32'
unary_expression:
   and unary_expression
 | bang unary_expression
 | minus unary_expression
 | singular_expression
 | star unary_expression
 | tilde unary_expression
underscore:'_'
uniform:'uniform'
var:'var'
variable_decl:
   'var' variable_qualifier ? ( ident | variable_ident_decl )
variable_ident_decl:
   ident colon type_decl
variable_qualifier:
   less_than address_space ( comma access_mode )? greater_than
variable_statement:
   'const' ( ident | variable_ident_decl ) equal expression
 | 'let' ( ident | variable_ident_decl ) equal expression
 | variable_decl
 | variable_decl equal expression
vec2:'vec2'
vec3:'vec3'
vec4:'vec4'
vec_prefix:
   'vec2'
 | 'vec3'
 | 'vec4'
while:'while'
while_statement:
   'while' expression compound_statement
workgroup:'workgroup'
xor:'^'
xor_equal:'^='
=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'static_assert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#12
global_decl -> semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> static_assert_statement · semicolon : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#19
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' '_' 'array' 'atomic' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'fallthrough' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'static_assert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}

#21
global_constant_decl -> 'const' · global_constant_decl/0.1 equal expression : {';'}
global_constant_decl/0.1 -> · ident : {'='}
global_constant_decl/0.1 -> · variable_ident_decl : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}

#22
global_constant_decl -> global_constant_decl/1.0 · 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}

#23
type_alias_decl -> 'type' · ident equal type_decl : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#24
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#25
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#26
static_assert_statement -> 'static_assert' · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#27
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#28
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#29
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#30
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#31
attribute -> attr · 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#32
attr -> '@' · : {'const'}

#33
attribute -> attr 'align' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#34
attribute -> attr 'binding' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#35
attribute -> attr 'builtin' · paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#36
attribute -> attr 'const' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#37
attribute -> attr 'group' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#38
attribute -> attr 'id' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#39
attribute -> attr 'interpolate' · paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' · paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#40
attribute -> attr 'invariant' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
attribute -> attr 'location' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#42
attribute -> attr 'size' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#43
attribute -> attr 'workgroup_size' · paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' · paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' · paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#44
attribute -> attr 'vertex' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#45
attribute -> attr 'fragment' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#46
attribute -> attr 'compute' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#47
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#48
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#49
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#50
static_assert_statement -> 'static_assert' expression · : {';'}

#51
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#52
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#53
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#54
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#55
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#56
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#57
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#58
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#59
additive_expression -> additive_expression · minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> additive_expression · plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#60
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#61
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#62
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#63
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#64
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#65
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#66
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#67
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#68
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · postfix_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#69
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#70
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#71
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#72
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#73
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#74
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#75
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#76
primary_expression -> const_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#77
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#78
primary_expression -> 'bitcast' · less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#79
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#80
callable -> type_decl_without_ident · : {'('}

#81
callable -> vec_prefix · : {'('}
type_decl_without_ident -> vec_prefix · less_than type_decl greater_than : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#82
callable -> mat_prefix · : {'('}
type_decl_without_ident -> mat_prefix · less_than type_decl greater_than : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#83
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {'('}
callable -> 'array' · : {'('}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#84
const_literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#85
const_literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
const_literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#87
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#88
type_decl_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#89
type_decl_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_decl_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_decl_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_decl_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#93
type_decl_without_ident -> pointer · less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}

#94
type_decl_without_ident -> array_type_decl · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#95
type_decl_without_ident -> 'atomic' · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#96
type_decl_without_ident -> texture_and_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#97
vec_prefix -> 'vec2' · : {'(' '<'}

#98
vec_prefix -> 'vec3' · : {'(' '<'}

#99
vec_prefix -> 'vec4' · : {'(' '<'}

#100
mat_prefix -> 'mat2x2' · : {'(' '<'}

#101
mat_prefix -> 'mat2x3' · : {'(' '<'}

#102
mat_prefix -> 'mat2x4' · : {'(' '<'}

#103
mat_prefix -> 'mat3x2' · : {'(' '<'}

#104
mat_prefix -> 'mat3x3' · : {'(' '<'}

#105
mat_prefix -> 'mat3x4' · : {'(' '<'}

#106
mat_prefix -> 'mat4x2' · : {'(' '<'}

#107
mat_prefix -> 'mat4x3' · : {'(' '<'}

#108
mat_prefix -> 'mat4x4' · : {'(' '<'}

#109
int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#110
int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#115
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#116
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' '_' 'array' 'atomic' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#117
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#118
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#119
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#120
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#121
pointer -> 'ptr' · : {'<'}

#122
texture_and_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
texture_and_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#124
texture_and_sampler_types -> sampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#125
texture_and_sampler_types -> multisampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#126
texture_and_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#127
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#128
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#129
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#130
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#131
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#132
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#133
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#134
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#135
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#136
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#137
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#138
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#139
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#140
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#141
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#142
sampled_texture_type -> 'texture_1d' · : {'<'}

#143
sampled_texture_type -> 'texture_2d' · : {'<'}

#144
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#145
sampled_texture_type -> 'texture_3d' · : {'<'}

#146
sampled_texture_type -> 'texture_cube' · : {'<'}

#147
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#148
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#149
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#150
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#151
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#152
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#153
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#154
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#155
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#156
type_alias_decl -> 'type' ident · equal type_decl : {';'}
equal -> · '=' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#157
global_constant_decl -> global_constant_decl/1.0 'override' · global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.2 -> · ident : {';' '='}
global_constant_decl/1.2 -> · variable_ident_decl : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#158
global_constant_decl -> 'const' global_constant_decl/0.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#159
global_constant_decl/0.1 -> ident · : {'='}
variable_ident_decl -> ident · colon type_decl : {'='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#160
global_constant_decl/0.1 -> variable_ident_decl · : {'='}

#161
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_variable_decl/0.2 -> · equal expression : {';'}

#162
variable_decl -> 'var' · variable_decl/0.1 variable_decl/0.2 : {';' '='}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#163
global_decl -> static_assert_statement semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#164
global_decl -> type_alias_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#165
global_decl -> global_constant_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#166
global_decl -> global_variable_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#167
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#168
global_directive -> 'enable' extension_name semicolon · : {';' '@' 'const' 'enable' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#169
variable_decl -> 'var' variable_decl/0.1 · variable_decl/0.2 : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_decl/0.2 -> · ident : {';' '='}
variable_decl/0.2 -> · variable_ident_decl : {';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#170
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#171
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#172
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'function' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'private' 'ptr' 'sampler' 'sampler_comparison' 'storage' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'uniform' 'vec2' 'vec3' 'vec4' 'workgroup' '~'}

#173
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#174
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#175
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#176
variable_ident_decl -> ident colon · type_decl : {')' ',' ';' '='}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_2d' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_cube' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ',' ';' '='}
float16 -> · 'f16' : {')' ',' ';' '='}
float32 -> · 'f32' : {')' ',' ';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ',' ';' '='}
int32 -> · 'i32' : {')' ',' ';' '='}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ',' ';' '='}
sampler_type -> · 'sampler_comparison' : {')' ',' ';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {')' ',' ';' '='}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {')' ',' ';' '='}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {')' ',' ';' '='}
texture_and_sampler_types -> · sampler_type : {')' ',' ';' '='}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ',' ';' '='}
type_decl -> · ident : {')' ',' ';' '='}
type_decl -> · type_decl_without_ident : {')' ',' ';' '='}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {')' ',' ';' '='}
type_decl_without_ident -> · 'bool' : {')' ',' ';' '='}
type_decl_without_ident -> · array_type_decl : {')' ',' ';' '='}
type_decl_without_ident -> · float16 : {')' ',' ';' '='}
type_decl_without_ident -> · float32 : {')' ',' ';' '='}
type_decl_without_ident -> · int32 : {')' ',' ';' '='}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {')' ',' ';' '='}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {')' ',' ';' '='}
type_decl_without_ident -> · texture_and_sampler_types : {')' ',' ';' '='}
type_decl_without_ident -> · uint32 : {')' ',' ';' '='}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {')' ',' ';' '='}
uint32 -> · 'u32' : {')' ',' ';' '='}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#177
colon -> ':' · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4' '{'}

#178
global_constant_decl -> 'const' global_constant_decl/0.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#179
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_constant_decl/1.3 -> · equal expression : {';'}

#180
global_constant_decl/1.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#181
global_constant_decl/1.2 -> variable_ident_decl · : {';' '='}

#182
type_alias_decl -> 'type' ident equal · type_decl : {';'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {';'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {';'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {';'}
texture_and_sampler_types -> · sampler_type : {';'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_decl -> · ident : {';'}
type_decl -> · type_decl_without_ident : {';'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {';'}
type_decl_without_ident -> · 'bool' : {';'}
type_decl_without_ident -> · array_type_decl : {';'}
type_decl_without_ident -> · float16 : {';'}
type_decl_without_ident -> · float32 : {';'}
type_decl_without_ident -> · int32 : {';'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {';'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {';'}
type_decl_without_ident -> · texture_and_sampler_types : {';'}
type_decl_without_ident -> · uint32 : {';'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {';'}
uint32 -> · 'u32' : {';'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#183
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#184
struct_body_decl -> brace_left · struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_body_decl/0.1 -> · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#185
brace_left -> '{' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#186
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#187
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#188
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#189
texture_and_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#190
texture_and_sampler_types -> multisampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#191
texture_and_sampler_types -> sampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#192
type_decl_without_ident -> 'atomic' less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#193
type_decl_without_ident -> pointer less_than · address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#194
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#195
array_type_decl -> 'array' less_than · type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {',' '>'}
uint32 -> · 'u32' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#196
type_decl_without_ident -> mat_prefix less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#197
type_decl_without_ident -> vec_prefix less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#198
primary_expression -> 'bitcast' less_than · type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_and_sampler_types -> · sampler_type : {'>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_and_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'>'}
uint32 -> · 'u32' : {'>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#199
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#200
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1 -> · argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.0 -> · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#201
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#202
singular_expression/0.1 -> postfix_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#203
postfix_expression -> bracket_left · expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#204
postfix_expression -> period · member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> period · swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#205
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#206
period -> '.' · : {}

#207
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#208
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#209
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#210
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#211
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#212
multiplicative_expression -> multiplicative_expression star · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#213
multiplicative_expression -> multiplicative_expression forward_slash · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#214
multiplicative_expression -> multiplicative_expression modulo · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#215
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#216
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#217
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#218
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#219
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#220
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#221
additive_expression -> additive_expression plus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#222
additive_expression -> additive_expression minus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#223
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#224
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#225
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#226
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#227
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#228
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · const_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#229
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#230
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#231
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#232
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#233
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#234
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#235
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#236
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#237
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#238
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#239
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#240
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#241
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#242
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#243
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#244
attribute -> attr 'workgroup_size' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left · expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left · expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#245
attribute -> attr 'size' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#246
attribute -> attr 'location' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#247
attribute -> attr 'interpolate' paren_left · interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' paren_left · interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#248
attribute -> attr 'id' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#249
attribute -> attr 'group' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#250
attribute -> attr 'builtin' paren_left · builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#251
attribute -> attr 'binding' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#252
attribute -> attr 'align' paren_left · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#253
attribute -> attr 'align' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#254
attribute -> attr 'binding' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#255
attribute -> attr 'builtin' paren_left builtin_value_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#256
builtin_value_name -> 'vertex_index' · : {')' ','}

#257
builtin_value_name -> 'instance_index' · : {')' ','}

#258
builtin_value_name -> 'position' · : {')' ','}

#259
builtin_value_name -> 'front_facing' · : {')' ','}

#260
builtin_value_name -> 'frag_depth' · : {')' ','}

#261
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#262
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#263
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#264
builtin_value_name -> 'workgroup_id' · : {')' ','}

#265
builtin_value_name -> 'num_workgroups' · : {')' ','}

#266
builtin_value_name -> 'sample_index' · : {')' ','}

#267
builtin_value_name -> 'sample_mask' · : {')' ','}

#268
attribute -> attr 'group' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#269
attribute -> attr 'id' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#270
attribute -> attr 'interpolate' paren_left interpolation_type_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' paren_left interpolation_type_name · comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#271
interpolation_type_name -> 'perspective' · : {')' ','}

#272
interpolation_type_name -> 'linear' · : {')' ','}

#273
interpolation_type_name -> 'flat' · : {')' ','}

#274
attribute -> attr 'location' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#275
attribute -> attr 'size' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#276
attribute -> attr 'workgroup_size' paren_left expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression · comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression · comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#277
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#278
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#279
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#280
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#281
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#282
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#283
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#284
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#285
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#286
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#287
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#288
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#289
additive_expression -> additive_expression minus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#290
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#291
additive_expression -> additive_expression plus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#292
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#293
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#294
multiplicative_expression -> multiplicative_expression modulo unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#295
multiplicative_expression -> multiplicative_expression forward_slash unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#296
multiplicative_expression -> multiplicative_expression star unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#297
postfix_expression -> period member_ident · postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/1.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#298
postfix_expression -> period swizzle_name · postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/2.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#299
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#300
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#301
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#302
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#303
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#304
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#305
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#306
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#307
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#308
postfix_expression -> bracket_left expression · bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#309
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#310
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 · expression argument_expression_list/0.1/0.2 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#311
argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#312
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#313
argument_expression_list/0.1/0.0/0/0.0 -> expression · comma : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#314
primary_expression -> 'bitcast' less_than type_decl · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#315
type_decl -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#316
type_decl -> type_decl_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#317
type_decl_without_ident -> vec_prefix · less_than type_decl greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#318
type_decl_without_ident -> mat_prefix · less_than type_decl greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#319
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#320
type_decl_without_ident -> vec_prefix less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#321
type_decl_without_ident -> mat_prefix less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#322
array_type_decl -> 'array' less_than type_decl · array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#323
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#324
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' '{' '|' '|=' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#325
type_decl_without_ident -> pointer less_than address_space · comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#326
address_space -> 'function' · : {',' '>'}

#327
address_space -> 'private' · : {',' '>'}

#328
address_space -> 'workgroup' · : {',' '>'}

#329
address_space -> 'uniform' · : {',' '>'}

#330
address_space -> 'storage' · : {',' '>'}

#331
type_decl_without_ident -> 'atomic' less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#332
texture_and_sampler_types -> sampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#333
texture_and_sampler_types -> multisampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#334
texture_and_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#335
texel_format -> 'rgba8unorm' · : {','}

#336
texel_format -> 'rgba8snorm' · : {','}

#337
texel_format -> 'rgba8uint' · : {','}

#338
texel_format -> 'rgba8sint' · : {','}

#339
texel_format -> 'rgba16uint' · : {','}

#340
texel_format -> 'rgba16sint' · : {','}

#341
texel_format -> 'rgba16float' · : {','}

#342
texel_format -> 'r32uint' · : {','}

#343
texel_format -> 'r32sint' · : {','}

#344
texel_format -> 'r32float' · : {','}

#345
texel_format -> 'rg32uint' · : {','}

#346
texel_format -> 'rg32sint' · : {','}

#347
texel_format -> 'rg32float' · : {','}

#348
texel_format -> 'rgba32uint' · : {','}

#349
texel_format -> 'rgba32sint' · : {','}

#350
texel_format -> 'rgba32float' · : {','}

#351
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#352
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#353
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#354
statement -> semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#355
statement -> return_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
statement -> if_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#357
statement -> switch_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#358
statement -> loop_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#359
statement -> for_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#360
statement -> while_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#362
statement -> variable_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#363
statement -> break_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#364
statement -> continue_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#365
statement -> 'discard' · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#366
statement -> assignment_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
statement -> compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#368
statement -> increment_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#369
statement -> decrement_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#370
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#371
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#372
if_statement -> if_clause · if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1 -> · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#373
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#374
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#375
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' '_' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#376
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#377
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#378
variable_statement -> variable_decl · : {';'}
variable_statement -> variable_decl · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#379
variable_statement -> 'let' · variable_statement/2.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/2.1 -> · ident : {'='}
variable_statement/2.1 -> · variable_ident_decl : {'='}

#380
variable_statement -> 'const' · variable_statement/3.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/3.1 -> · ident : {'='}
variable_statement/3.1 -> · variable_ident_decl : {'='}

#381
break_statement -> 'break' · : {';'}

#382
continue_statement -> 'continue' · : {';'}

#383
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#384
assignment_statement -> underscore · equal expression : {')' ';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#385
if_clause -> 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#386
lhs_expression -> lhs_expression/0.0 · core_lhs_expression lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}

#387
underscore -> '_' · : {'='}

#388
lhs_expression/0.0 -> lhs_expression/0.0/0 · : {'('}

#389
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 · lhs_expression/0.0/0 : {'('}
and -> · '&' : {'&' '(' '*'}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#390
lhs_expression/0.0/0/0.0 -> star · : {'&' '(' '*'}

#391
lhs_expression/0.0/0/0.0 -> and · : {'&' '(' '*'}

#392
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> · param_list/0.0 param param_list/0.2 : {')'}
param_list/0.0 -> · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#393
struct_body_decl -> brace_left struct_body_decl/0.1 · struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#394
struct_body_decl/0.1 -> struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#395
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#396
struct_body_decl/0.1/0/0.0 -> struct_member · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#397
struct_member -> struct_member/0.0 · member_ident colon type_decl : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#398
struct_member/0.0 -> struct_member/0.0/0 · : {}

#399
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#400
type_alias_decl -> 'type' ident equal type_decl · : {';'}

#401
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 · : {';'}

#402
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#403
global_constant_decl -> 'const' global_constant_decl/0.1 equal expression · : {';'}

#404
variable_ident_decl -> ident colon type_decl · : {')' ',' ';' '='}

#405
global_variable_decl/0.2 -> equal expression · : {';'}

#406
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#407
variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 · : {';' '='}

#408
variable_decl/0.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#409
variable_decl/0.2 -> variable_ident_decl · : {';' '='}

#410
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#411
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#412
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#413
global_constant_decl/1.3 -> equal expression · : {';'}

#414
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#415
struct_member -> struct_member/0.0 member_ident · colon type_decl : {',' '}'}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#416
struct_body_decl/0.1/0/0.0 -> struct_member comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#417
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#418
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member · struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#419
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#420
function_header/0.3 -> param_list · : {')'}

#421
param_list -> param_list/0.0 · param param_list/0.2 : {')'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#422
param_list/0.0 -> param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#423
param_list/0.0/0 -> param_list/0.0/0/0.0 · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#424
param_list/0.0/0/0.0 -> param · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#425
param -> param/0.0 · variable_ident_decl : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
variable_ident_decl -> · ident colon type_decl : {')' ','}

#426
param/0.0 -> param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#427
param/0.0/0 -> attribute · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#428
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 · : {'('}

#429
lhs_expression -> lhs_expression/0.0 core_lhs_expression · lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
lhs_expression/0.2 -> · postfix_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#430
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#431
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {')'}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#432
if_clause -> 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#433
assignment_statement -> underscore equal · expression : {')' ';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#434
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#435
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#436
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#437
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#438
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#439
plus_plus -> '++' · : {')' ';'}

#440
minus_minus -> '--' · : {')' ';'}

#441
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#442
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#443
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#444
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#445
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#446
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#447
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#448
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#449
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#450
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#451
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#452
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#453
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#454
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#455
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#456
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#457
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#458
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#459
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#460
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#461
variable_statement -> 'const' variable_statement/3.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#462
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/3.1 -> ident · : {'='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#463
variable_statement/3.1 -> variable_ident_decl · : {'='}

#464
variable_statement -> 'let' variable_statement/2.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#465
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/2.1 -> ident · : {'='}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#466
variable_statement/2.1 -> variable_ident_decl · : {'='}

#467
variable_statement -> variable_decl equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#468
func_call_statement -> ident argument_expression_list · : {')' ';'}

#469
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#470
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · assignment_statement : {';'}
for_init -> · decrement_statement : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · increment_statement : {';'}
for_init -> · variable_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}

#471
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#472
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#473
if_statement -> if_clause if_statement/0.1 · if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_clause -> · 'else' compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.2 -> · else_clause : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#474
if_statement/0.1 -> if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#475
if_statement/0.1/0 -> else_if_clause · if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_if_clause -> · 'else' 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.1/0 -> · else_if_clause if_statement/0.1/0 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#476
else_if_clause -> 'else' · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#477
return_statement -> 'return' return_statement/0.1 · : {';'}

#478
return_statement/0.1 -> expression · : {';'}

#479
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#480
statement -> decrement_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#481
statement -> increment_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#482
statement -> assignment_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#483
statement -> 'discard' semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#484
statement -> continue_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#485
statement -> break_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#486
statement -> variable_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#487
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#488
statement -> return_statement semicolon · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#489
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#490
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#491
brace_right -> '}' · : {'&' '(' '*' ';' '@' '_' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'static_assert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#492
texture_and_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#493
texture_and_sampler_types -> multisampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#494
texture_and_sampler_types -> sampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#495
type_decl_without_ident -> 'atomic' less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#496
type_decl_without_ident -> pointer less_than address_space comma · type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '>'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_and_sampler_types -> · sampler_type : {',' '>'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {',' '>'}
uint32 -> · 'u32' : {',' '>'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#497
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#498
array_type_decl/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · additive_expression plus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · const_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#499
type_decl_without_ident -> mat_prefix less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#500
type_decl_without_ident -> vec_prefix less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#501
primary_expression -> 'bitcast' less_than type_decl greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#502
argument_expression_list/0.1/0.0/0/0.0 -> expression comma · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#503
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#504
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression · argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.2 -> · comma : {')'}
comma -> · ',' : {')'}

#505
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#506
postfix_expression -> bracket_left expression bracket_right · postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/0.3 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#507
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#508
postfix_expression -> period swizzle_name postfix_expression/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#509
postfix_expression/2.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#510
postfix_expression -> period member_ident postfix_expression/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#511
postfix_expression/1.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#512
attribute -> attr 'workgroup_size' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#513
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression comma · expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#514
attrib_end -> attrib_end/0.0 · paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#515
attribute -> attr 'size' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#516
attrib_end/0.0 -> comma · : {')'}

#517
attribute -> attr 'location' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#518
attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#519
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'interpolate' paren_left interpolation_type_name comma · interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#520
attribute -> attr 'id' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#521
attribute -> attr 'group' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#522
attribute -> attr 'builtin' paren_left builtin_value_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#523
attribute -> attr 'binding' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#524
attribute -> attr 'align' paren_left expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#525
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#526
interpolation_sample_name -> 'center' · : {')' ','}

#527
interpolation_sample_name -> 'centroid' · : {')' ','}

#528
interpolation_sample_name -> 'sample' · : {')' ','}

#529
attrib_end -> attrib_end/0.0 paren_right · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#530
attribute -> attr 'workgroup_size' paren_left expression comma expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left expression comma expression · comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {'!' '&' '(' ')' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#531
postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#532
postfix_expression/0.3 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#533
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 · : {')'}

#534
argument_expression_list/0.1/0.2 -> comma · : {')'}

#535
primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#536
array_type_decl/0.3 -> comma element_count_expression · : {'>'}

#537
additive_expression -> additive_expression · minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> additive_expression · plus multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#538
element_count_expression -> bitwise_expression · : {'>'}

#539
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#540
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#541
type_decl_without_ident -> pointer less_than address_space comma type_decl · type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_decl_without_ident/7.5 -> · comma access_mode : {'>'}

#542
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#543
access_mode -> 'read' · : {'>'}

#544
access_mode -> 'write' · : {'>'}

#545
access_mode -> 'read_write' · : {'>'}

#546
else_if_clause -> 'else' 'if' · expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#547
if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#548
if_statement -> if_clause if_statement/0.1 if_statement/0.2 · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#549
if_statement/0.2 -> else_clause · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#550
else_clause -> 'else' · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#551
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#552
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#553
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#554
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#555
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#556
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#557
for_header/0.0 -> for_init · : {';'}

#558
for_init -> variable_statement · : {';'}

#559
for_init -> increment_statement · : {';'}

#560
for_init -> decrement_statement · : {';'}

#561
for_init -> assignment_statement · : {';'}

#562
for_init -> func_call_statement · : {';'}

#563
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#564
variable_statement -> variable_decl equal expression · : {';'}

#565
variable_statement -> 'let' variable_statement/2.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#566
variable_statement -> 'const' variable_statement/3.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#567
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#568
assignment_statement -> underscore equal expression · : {')' ';'}

#569
if_clause -> 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#570
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#571
lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#572
lhs_expression/0.2 -> postfix_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#573
param/0.0/0 -> attribute param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#574
param -> param/0.0 variable_ident_decl · : {')' ','}

#575
variable_ident_decl -> ident · colon type_decl : {')' ','}
colon -> · ':' : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#576
param_list/0.0/0/0.0 -> param comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#577
param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#578
param_list -> param_list/0.0 param · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#579
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_decl : {'{'}

#580
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 · brace_right : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#581
struct_body_decl/0.3 -> comma · : {'}'}

#582
struct_member -> struct_member/0.0 member_ident colon · type_decl : {',' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
float16 -> · 'f16' : {',' '}'}
float32 -> · 'f32' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
int32 -> · 'i32' : {',' '}'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {',' '}'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_and_sampler_types -> · sampler_type : {',' '}'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '}'}
type_decl -> · ident : {',' '}'}
type_decl -> · type_decl_without_ident : {',' '}'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {',' '}'}
type_decl_without_ident -> · 'bool' : {',' '}'}
type_decl_without_ident -> · array_type_decl : {',' '}'}
type_decl_without_ident -> · float16 : {',' '}'}
type_decl_without_ident -> · float32 : {',' '}'}
type_decl_without_ident -> · int32 : {',' '}'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {',' '}'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '}'}
type_decl_without_ident -> · texture_and_sampler_types : {',' '}'}
type_decl_without_ident -> · uint32 : {',' '}'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {',' '}'}
uint32 -> · 'u32' : {',' '}'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#583
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#584
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#585
struct_member -> struct_member/0.0 member_ident colon type_decl · : {',' '}'}

#586
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right · : {';' '@' 'const' 'fn' 'override' 'static_assert' 'struct' 'type' 'var' EndOfText}

#587
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#588
function_header/0.5 -> arrow · function_header/0.5/0.1 type_decl : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#589
arrow -> '->' · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#590
param_list -> param_list/0.0 param param_list/0.2 · : {')'}

#591
param_list/0.2 -> comma · : {')'}

#592
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#593
variable_statement -> 'const' variable_statement/3.1 equal expression · : {';'}

#594
variable_statement -> 'let' variable_statement/2.1 equal expression · : {';'}

#595
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#596
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#597
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#598
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#599
loop_statement/0.3 -> continuing_statement · : {'}'}

#600
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#601
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#602
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#603
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#604
switch_body -> 'case' · case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selectors -> · expression case_selectors/0.1 case_selectors/0.2 : {':' '{'}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#605
switch_body -> 'default' · switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/1.1 -> · colon : {'{'}

#606
else_clause -> 'else' compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#607
else_if_clause -> 'else' 'if' expression · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#608
texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#609
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#610
type_decl_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#611
attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#612
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left expression comma expression comma · expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#613
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#614
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression · attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#615
type_decl_without_ident/7.5 -> comma access_mode · : {'>'}

#616
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#617
else_if_clause -> 'else' 'if' expression compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#618
switch_body -> 'default' switch_body/1.1 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#619
switch_body/1.1 -> colon · : {'{'}

#620
switch_body -> 'case' case_selectors · switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/0.2 -> · colon : {'{'}

#621
case_selectors -> expression · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#622
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#623
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#624
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#625
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#626
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#627
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#628
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' '_' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#629
for_header/0.2 -> expression · : {';'}

#630
function_header/0.5 -> arrow function_header/0.5/0.1 · type_decl : {'{'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
mat_prefix -> · 'mat2x2' : {'<'}
mat_prefix -> · 'mat2x3' : {'<'}
mat_prefix -> · 'mat2x4' : {'<'}
mat_prefix -> · 'mat3x2' : {'<'}
mat_prefix -> · 'mat3x3' : {'<'}
mat_prefix -> · 'mat3x4' : {'<'}
mat_prefix -> · 'mat4x2' : {'<'}
mat_prefix -> · 'mat4x3' : {'<'}
mat_prefix -> · 'mat4x4' : {'<'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'{'}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'{'}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'{'}
texture_and_sampler_types -> · sampler_type : {'{'}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_decl -> · ident : {'{'}
type_decl -> · type_decl_without_ident : {'{'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'{'}
type_decl_without_ident -> · 'bool' : {'{'}
type_decl_without_ident -> · array_type_decl : {'{'}
type_decl_without_ident -> · float16 : {'{'}
type_decl_without_ident -> · float32 : {'{'}
type_decl_without_ident -> · int32 : {'{'}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'{'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'{'}
type_decl_without_ident -> · texture_and_sampler_types : {'{'}
type_decl_without_ident -> · uint32 : {'{'}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'{'}
uint32 -> · 'u32' : {'{'}
vec_prefix -> · 'vec2' : {'<'}
vec_prefix -> · 'vec3' : {'<'}
vec_prefix -> · 'vec4' : {'<'}

#631
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#632
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'binding' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'compute' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'const' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'fragment' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'group' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'id' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'invariant' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'location' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'vertex' : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
attribute -> · attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#633
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'atomic' 'bool' 'f16' 'f32' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'vec2' 'vec3' 'vec4'}

#634
function_header/0.5 -> arrow function_header/0.5/0.1 type_decl · : {'{'}

#635
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
assignment_statement -> · underscore equal expression : {')'}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · assignment_statement : {')'}
for_update -> · decrement_statement : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · increment_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
underscore -> · '_' : {'='}

#636
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#637
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#638
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#639
case_selectors -> expression case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#640
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#641
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#642
case_selectors/0.1/0/0.0 -> comma · expression : {',' ':' '{'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#643
switch_body -> 'case' case_selectors switch_body/0.2 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#644
switch_body/0.2 -> colon · : {'{'}

#645
switch_body -> 'default' switch_body/1.1 case_compound_statement · : {'case' 'default' '}'}

#646
case_compound_statement -> brace_left · case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1 -> · case_compound_statement/0.1/0 : {'fallthrough' '}'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#647
attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end · : {'@' 'array' 'atomic' 'bool' 'f16' 'f32' 'fn' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' 'vec2' 'vec3' 'vec4' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#648
case_compound_statement -> brace_left case_compound_statement/0.1 · case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
case_compound_statement/0.2 -> · fallthrough_statement : {'}'}
fallthrough_statement -> · 'fallthrough' semicolon : {'}'}

#649
case_compound_statement/0.1 -> case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#650
case_compound_statement/0.1/0 -> statement · case_compound_statement/0.1/0 : {'fallthrough' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
assignment_statement -> · underscore equal expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_clause -> · 'if' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · if_clause if_statement/0.1 if_statement/0.2 : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'static_assert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
underscore -> · '_' : {'='}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
variable_statement -> · variable_decl equal expression : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' '_' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'static_assert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#651
switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement · : {'case' 'default' '}'}

#652
case_selectors/0.1/0/0.0 -> comma expression · : {',' ':' '{'}

#653
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#654
case_selectors -> expression case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#655
case_selectors/0.2 -> comma · : {':' '{'}

#656
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#657
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#658
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#659
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#660
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#661
for_header/0.4 -> for_update · : {')'}

#662
for_update -> increment_statement · : {')'}

#663
for_update -> decrement_statement · : {')'}

#664
for_update -> assignment_statement · : {')'}

#665
for_update -> func_call_statement · : {')'}

#666
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · 'array' : {'('}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'(' '<'}
mat_prefix -> · 'mat2x3' : {'(' '<'}
mat_prefix -> · 'mat2x4' : {'(' '<'}
mat_prefix -> · 'mat3x2' : {'(' '<'}
mat_prefix -> · 'mat3x3' : {'(' '<'}
mat_prefix -> · 'mat3x4' : {'(' '<'}
mat_prefix -> · 'mat4x2' : {'(' '<'}
mat_prefix -> · 'mat4x3' : {'(' '<'}
mat_prefix -> · 'mat4x4' : {'(' '<'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_and_sampler_types -> · depth_texture_type : {'('}
texture_and_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_and_sampler_types -> · sampler_type : {'('}
texture_and_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'atomic' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'atomic' less_than type_decl greater_than : {'('}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · mat_prefix less_than type_decl greater_than : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_and_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
type_decl_without_ident -> · vec_prefix less_than type_decl greater_than : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'(' '<'}
vec_prefix -> · 'vec3' : {'(' '<'}
vec_prefix -> · 'vec4' : {'(' '<'}

#667
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#668
case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#669
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 · brace_right : {'case' 'default' '}'}
brace_right -> · '}' : {'case' 'default' '}'}

#670
case_compound_statement/0.2 -> fallthrough_statement · : {'}'}

#671
fallthrough_statement -> 'fallthrough' · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#672
fallthrough_statement -> 'fallthrough' semicolon · : {'}'}

#673
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right · : {'case' 'default' '}'}

#674
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#675
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#3 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#4 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#5 global_decl -> semicolon ·
r#6 global_decl -> struct_decl ·
r#7 global_decl -> function_decl ·
r#8 semicolon -> ';' ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attr -> '@' ·
r#13 attribute -> attr 'const' ·
r#14 attribute -> attr 'invariant' ·
r#15 attribute -> attr 'vertex' ·
r#16 attribute -> attr 'fragment' ·
r#17 attribute -> attr 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 static_assert_statement -> 'static_assert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 minus -> '-' ·
r#35 bang -> '!' ·
r#36 tilde -> '~' ·
r#37 star -> '*' ·
r#38 and -> '&' ·
r#39 primary_expression -> ident ·
r#40 callable -> ident ·
r#41 primary_expression -> const_literal ·
r#42 primary_expression -> paren_expression ·
r#43 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#44 callable -> type_decl_without_ident ·
r#45 callable -> vec_prefix ·
r#46 callable -> mat_prefix ·
r#47 callable -> 'array' ·
r#48 const_literal -> int_literal ·
r#49 const_literal -> float_literal ·
r#50 const_literal -> bool_literal ·
r#51 type_decl_without_ident -> 'bool' ·
r#52 type_decl_without_ident -> float32 ·
r#53 type_decl_without_ident -> float16 ·
r#54 type_decl_without_ident -> int32 ·
r#55 type_decl_without_ident -> uint32 ·
r#56 type_decl_without_ident -> array_type_decl ·
r#57 type_decl_without_ident -> texture_and_sampler_types ·
r#58 vec_prefix -> 'vec2' ·
r#59 vec_prefix -> 'vec3' ·
r#60 vec_prefix -> 'vec4' ·
r#61 mat_prefix -> 'mat2x2' ·
r#62 mat_prefix -> 'mat2x3' ·
r#63 mat_prefix -> 'mat2x4' ·
r#64 mat_prefix -> 'mat3x2' ·
r#65 mat_prefix -> 'mat3x3' ·
r#66 mat_prefix -> 'mat3x4' ·
r#67 mat_prefix -> 'mat4x2' ·
r#68 mat_prefix -> 'mat4x3' ·
r#69 mat_prefix -> 'mat4x4' ·
r#70 int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#71 int_literal -> /0[iu]?/ ·
r#72 int_literal -> /[1-9][0-9]*[iu]?/ ·
r#73 float_literal -> decimal_float_literal ·
r#74 float_literal -> hex_float_literal ·
r#75 bool_literal -> 'true' ·
r#76 bool_literal -> 'false' ·
r#77 paren_left -> '(' ·
r#78 float32 -> 'f32' ·
r#79 float16 -> 'f16' ·
r#80 int32 -> 'i32' ·
r#81 uint32 -> 'u32' ·
r#82 pointer -> 'ptr' ·
r#83 texture_and_sampler_types -> sampler_type ·
r#84 texture_and_sampler_types -> depth_texture_type ·
r#85 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#86 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#87 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#88 decimal_float_literal -> /0[fh]/ ·
r#89 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#90 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#91 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#92 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#93 sampler_type -> 'sampler' ·
r#94 sampler_type -> 'sampler_comparison' ·
r#95 depth_texture_type -> 'texture_depth_2d' ·
r#96 depth_texture_type -> 'texture_depth_2d_array' ·
r#97 depth_texture_type -> 'texture_depth_cube' ·
r#98 depth_texture_type -> 'texture_depth_cube_array' ·
r#99 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#100 sampled_texture_type -> 'texture_1d' ·
r#101 sampled_texture_type -> 'texture_2d' ·
r#102 sampled_texture_type -> 'texture_2d_array' ·
r#103 sampled_texture_type -> 'texture_3d' ·
r#104 sampled_texture_type -> 'texture_cube' ·
r#105 sampled_texture_type -> 'texture_cube_array' ·
r#106 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#107 storage_texture_type -> 'texture_storage_1d' ·
r#108 storage_texture_type -> 'texture_storage_2d' ·
r#109 storage_texture_type -> 'texture_storage_2d_array' ·
r#110 storage_texture_type -> 'texture_storage_3d' ·
r#111 global_constant_decl/0.1 -> ident ·
r#112 global_constant_decl/0.1 -> variable_ident_decl ·
r#113 global_decl -> static_assert_statement semicolon ·
r#114 global_decl -> type_alias_decl semicolon ·
r#115 global_decl -> global_constant_decl semicolon ·
r#116 global_decl -> global_variable_decl semicolon ·
r#117 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#118 global_directive -> 'enable' extension_name semicolon ·
r#119 variable_decl/0.1 -> variable_qualifier ·
r#120 less_than -> '<' ·
r#121 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#122 equal -> '=' ·
r#123 colon -> ':' ·
r#124 global_constant_decl/1.2 -> ident ·
r#125 global_constant_decl/1.2 -> variable_ident_decl ·
r#126 struct_decl -> 'struct' ident struct_body_decl ·
r#127 brace_left -> '{' ·
r#128 function_decl -> function_decl/0.0 function_header compound_statement ·
r#129 primary_expression -> callable argument_expression_list ·
r#130 singular_expression -> primary_expression singular_expression/0.1 ·
r#131 singular_expression/0.1 -> postfix_expression ·
r#132 bracket_left -> '[' ·
r#133 unary_expression -> and unary_expression ·
r#134 unary_expression -> star unary_expression ·
r#135 unary_expression -> tilde unary_expression ·
r#136 unary_expression -> bang unary_expression ·
r#137 unary_expression -> minus unary_expression ·
r#138 forward_slash -> '/' ·
r#139 modulo -> '%' ·
r#140 shift_left -> '<<' ·
r#141 shift_right -> '>>' ·
r#142 plus -> '+' ·
r#143 xor -> '^' ·
r#144 or -> '|' ·
r#145 greater_than -> '>' ·
r#146 less_than_equal -> '<=' ·
r#147 greater_than_equal -> '>=' ·
r#148 equal_equal -> '==' ·
r#149 not_equal -> '!=' ·
r#150 and_and -> '&&' ·
r#151 or_or -> '||' ·
r#152 builtin_value_name -> 'vertex_index' ·
r#153 builtin_value_name -> 'instance_index' ·
r#154 builtin_value_name -> 'position' ·
r#155 builtin_value_name -> 'front_facing' ·
r#156 builtin_value_name -> 'frag_depth' ·
r#157 builtin_value_name -> 'local_invocation_id' ·
r#158 builtin_value_name -> 'local_invocation_index' ·
r#159 builtin_value_name -> 'global_invocation_id' ·
r#160 builtin_value_name -> 'workgroup_id' ·
r#161 builtin_value_name -> 'num_workgroups' ·
r#162 builtin_value_name -> 'sample_index' ·
r#163 builtin_value_name -> 'sample_mask' ·
r#164 interpolation_type_name -> 'perspective' ·
r#165 interpolation_type_name -> 'linear' ·
r#166 interpolation_type_name -> 'flat' ·
r#167 expression -> short_circuit_or_expression or_or relational_expression ·
r#168 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#169 expression -> short_circuit_and_expression and_and relational_expression ·
r#170 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#171 relational_expression -> shift_expression not_equal shift_expression ·
r#172 relational_expression -> shift_expression equal_equal shift_expression ·
r#173 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#174 relational_expression -> shift_expression less_than_equal shift_expression ·
r#175 relational_expression -> shift_expression greater_than shift_expression ·
r#176 relational_expression -> shift_expression less_than shift_expression ·
r#177 bitwise_expression -> binary_and_expression and unary_expression ·
r#178 binary_and_expression -> binary_and_expression and unary_expression ·
r#179 bitwise_expression -> binary_or_expression or unary_expression ·
r#180 binary_or_expression -> binary_or_expression or unary_expression ·
r#181 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#182 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#183 additive_expression -> additive_expression minus multiplicative_expression ·
r#184 additive_expression -> additive_expression plus multiplicative_expression ·
r#185 shift_expression -> unary_expression shift_right unary_expression ·
r#186 shift_expression -> unary_expression shift_left unary_expression ·
r#187 multiplicative_expression -> multiplicative_expression modulo unary_expression ·
r#188 multiplicative_expression -> multiplicative_expression forward_slash unary_expression ·
r#189 multiplicative_expression -> multiplicative_expression star unary_expression ·
r#190 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#191 swizzle_name -> '/[rgba]/' ·
r#192 swizzle_name -> '/[rgba][rgba]/' ·
r#193 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#194 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#195 swizzle_name -> '/[xyzw]/' ·
r#196 swizzle_name -> '/[xyzw][xyzw]/' ·
r#197 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#198 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#199 argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 ·
r#200 type_decl -> ident ·
r#201 type_decl -> type_decl_without_ident ·
r#202 paren_expression -> paren_left expression paren_right ·
r#203 paren_right -> ')' ·
r#204 address_space -> 'function' ·
r#205 address_space -> 'private' ·
r#206 address_space -> 'workgroup' ·
r#207 address_space -> 'uniform' ·
r#208 address_space -> 'storage' ·
r#209 texel_format -> 'rgba8unorm' ·
r#210 texel_format -> 'rgba8snorm' ·
r#211 texel_format -> 'rgba8uint' ·
r#212 texel_format -> 'rgba8sint' ·
r#213 texel_format -> 'rgba16uint' ·
r#214 texel_format -> 'rgba16sint' ·
r#215 texel_format -> 'rgba16float' ·
r#216 texel_format -> 'r32uint' ·
r#217 texel_format -> 'r32sint' ·
r#218 texel_format -> 'r32float' ·
r#219 texel_format -> 'rg32uint' ·
r#220 texel_format -> 'rg32sint' ·
r#221 texel_format -> 'rg32float' ·
r#222 texel_format -> 'rgba32uint' ·
r#223 texel_format -> 'rgba32sint' ·
r#224 texel_format -> 'rgba32float' ·
r#225 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#226 statement -> semicolon ·
r#227 statement -> if_statement ·
r#228 statement -> switch_statement ·
r#229 statement -> loop_statement ·
r#230 statement -> for_statement ·
r#231 statement -> while_statement ·
r#232 statement -> compound_statement ·
r#233 variable_statement -> variable_decl ·
r#234 break_statement -> 'break' ·
r#235 continue_statement -> 'continue' ·
r#236 underscore -> '_' ·
r#237 lhs_expression/0.0 -> lhs_expression/0.0/0 ·
r#238 lhs_expression/0.0/0/0.0 -> star ·
r#239 lhs_expression/0.0/0/0.0 -> and ·
r#240 struct_body_decl/0.1 -> struct_body_decl/0.1/0 ·
r#241 type_alias_decl -> 'type' ident equal type_decl ·
r#242 global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 ·
r#243 global_constant_decl -> 'const' global_constant_decl/0.1 equal expression ·
r#244 variable_ident_decl -> ident colon type_decl ·
r#245 global_variable_decl/0.2 -> equal expression ·
r#246 variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 ·
r#247 variable_decl/0.2 -> ident ·
r#248 variable_decl/0.2 -> variable_ident_decl ·
r#249 comma -> ',' ·
r#250 global_constant_decl/1.3 -> equal expression ·
r#251 struct_body_decl/0.1/0/0.0 -> struct_member comma ·
r#252 struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 ·
r#253 function_header/0.3 -> param_list ·
r#254 param_list/0.0 -> param_list/0.0/0 ·
r#255 param/0.0 -> param/0.0/0 ·
r#256 lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 ·
r#257 core_lhs_expression -> ident ·
r#258 increment_statement -> lhs_expression plus_plus ·
r#259 decrement_statement -> lhs_expression minus_minus ·
r#260 assignment_statement/0.1 -> equal ·
r#261 assignment_statement/0.1 -> compound_assignment_operator ·
r#262 plus_plus -> '++' ·
r#263 minus_minus -> '--' ·
r#264 compound_assignment_operator -> plus_equal ·
r#265 compound_assignment_operator -> minus_equal ·
r#266 compound_assignment_operator -> times_equal ·
r#267 compound_assignment_operator -> division_equal ·
r#268 compound_assignment_operator -> modulo_equal ·
r#269 compound_assignment_operator -> and_equal ·
r#270 compound_assignment_operator -> or_equal ·
r#271 compound_assignment_operator -> xor_equal ·
r#272 compound_assignment_operator -> shift_right_equal ·
r#273 compound_assignment_operator -> shift_left_equal ·
r#274 plus_equal -> '+=' ·
r#275 minus_equal -> '-=' ·
r#276 times_equal -> '*=' ·
r#277 division_equal -> '/=' ·
r#278 modulo_equal -> '%=' ·
r#279 and_equal -> '&=' ·
r#280 or_equal -> '|=' ·
r#281 xor_equal -> '^=' ·
r#282 shift_right_equal -> '>>=' ·
r#283 shift_left_equal -> '<<=' ·
r#284 variable_statement/3.1 -> ident ·
r#285 variable_statement/3.1 -> variable_ident_decl ·
r#286 variable_statement/2.1 -> ident ·
r#287 variable_statement/2.1 -> variable_ident_decl ·
r#288 func_call_statement -> ident argument_expression_list ·
r#289 if_statement/0.1 -> if_statement/0.1/0 ·
r#290 return_statement -> 'return' return_statement/0.1 ·
r#291 return_statement/0.1 -> expression ·
r#292 statement -> static_assert_statement semicolon ·
r#293 statement -> decrement_statement semicolon ·
r#294 statement -> increment_statement semicolon ·
r#295 statement -> assignment_statement semicolon ·
r#296 statement -> 'discard' semicolon ·
r#297 statement -> continue_statement semicolon ·
r#298 statement -> break_statement semicolon ·
r#299 statement -> variable_statement semicolon ·
r#300 statement -> func_call_statement semicolon ·
r#301 statement -> return_statement semicolon ·
r#302 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#303 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#304 brace_right -> '}' ·
r#305 texture_and_sampler_types -> multisampled_texture_type less_than type_decl greater_than ·
r#306 texture_and_sampler_types -> sampled_texture_type less_than type_decl greater_than ·
r#307 type_decl_without_ident -> 'atomic' less_than type_decl greater_than ·
r#308 type_decl_without_ident -> mat_prefix less_than type_decl greater_than ·
r#309 type_decl_without_ident -> vec_prefix less_than type_decl greater_than ·
r#310 argument_expression_list/0.1/0.0/0/0.0 -> expression comma ·
r#311 argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 ·
r#312 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#313 bracket_right -> ']' ·
r#314 postfix_expression -> period swizzle_name postfix_expression/2.2 ·
r#315 postfix_expression/2.2 -> postfix_expression ·
r#316 postfix_expression -> period member_ident postfix_expression/1.2 ·
r#317 postfix_expression/1.2 -> postfix_expression ·
r#318 attribute -> attr 'workgroup_size' paren_left expression attrib_end ·
r#319 attrib_end/0.0 -> comma ·
r#320 attribute -> attr 'size' paren_left expression attrib_end ·
r#321 attribute -> attr 'location' paren_left expression attrib_end ·
r#322 attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end ·
r#323 attribute -> attr 'id' paren_left expression attrib_end ·
r#324 attribute -> attr 'group' paren_left expression attrib_end ·
r#325 attribute -> attr 'builtin' paren_left builtin_value_name attrib_end ·
r#326 attribute -> attr 'binding' paren_left expression attrib_end ·
r#327 attribute -> attr 'align' paren_left expression attrib_end ·
r#328 interpolation_sample_name -> 'center' ·
r#329 interpolation_sample_name -> 'centroid' ·
r#330 interpolation_sample_name -> 'sample' ·
r#331 attrib_end -> attrib_end/0.0 paren_right ·
r#332 postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 ·
r#333 postfix_expression/0.3 -> postfix_expression ·
r#334 argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 ·
r#335 argument_expression_list/0.1/0.2 -> comma ·
r#336 primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression ·
r#337 array_type_decl/0.3 -> comma element_count_expression ·
r#338 element_count_expression -> additive_expression ·
r#339 element_count_expression -> bitwise_expression ·
r#340 array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than ·
r#341 access_mode -> 'read' ·
r#342 access_mode -> 'write' ·
r#343 access_mode -> 'read_write' ·
r#344 if_statement/0.1/0 -> else_if_clause if_statement/0.1/0 ·
r#345 if_statement -> if_clause if_statement/0.1 if_statement/0.2 ·
r#346 if_statement/0.2 -> else_clause ·
r#347 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#348 for_header/0.0 -> for_init ·
r#349 for_init -> variable_statement ·
r#350 for_init -> increment_statement ·
r#351 for_init -> decrement_statement ·
r#352 for_init -> assignment_statement ·
r#353 for_init -> func_call_statement ·
r#354 while_statement -> 'while' expression compound_statement ·
r#355 variable_statement -> variable_decl equal expression ·
r#356 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#357 assignment_statement -> underscore equal expression ·
r#358 if_clause -> 'if' expression compound_statement ·
r#359 lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 ·
r#360 lhs_expression/0.2 -> postfix_expression ·
r#361 param/0.0/0 -> attribute param/0.0/0 ·
r#362 param -> param/0.0 variable_ident_decl ·
r#363 param_list/0.0/0/0.0 -> param comma ·
r#364 param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 ·
r#365 struct_body_decl/0.3 -> comma ·
r#366 variable_qualifier/0.2 -> comma access_mode ·
r#367 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#368 struct_member -> struct_member/0.0 member_ident colon type_decl ·
r#369 struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right ·
r#370 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#371 arrow -> '->' ·
r#372 param_list -> param_list/0.0 param param_list/0.2 ·
r#373 param_list/0.2 -> comma ·
r#374 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#375 variable_statement -> 'const' variable_statement/3.1 equal expression ·
r#376 variable_statement -> 'let' variable_statement/2.1 equal expression ·
r#377 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#378 loop_statement/0.3 -> continuing_statement ·
r#379 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#380 else_clause -> 'else' compound_statement ·
r#381 texture_and_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#382 attribute -> attr 'workgroup_size' paren_left expression comma expression attrib_end ·
r#383 attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end ·
r#384 type_decl_without_ident/7.5 -> comma access_mode ·
r#385 type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than ·
r#386 else_if_clause -> 'else' 'if' expression compound_statement ·
r#387 switch_body/1.1 -> colon ·
r#388 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#389 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#390 continuing_statement -> 'continuing' continuing_compound_statement ·
r#391 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#392 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#393 for_header/0.2 -> expression ·
r#394 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#395 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#396 function_header/0.5 -> arrow function_header/0.5/0.1 type_decl ·
r#397 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#398 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#399 switch_body/0.2 -> colon ·
r#400 switch_body -> 'default' switch_body/1.1 case_compound_statement ·
r#401 attribute -> attr 'workgroup_size' paren_left expression comma expression comma expression attrib_end ·
r#402 case_compound_statement/0.1 -> case_compound_statement/0.1/0 ·
r#403 switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement ·
r#404 case_selectors/0.1/0/0.0 -> comma expression ·
r#405 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#406 case_selectors -> expression case_selectors/0.1 case_selectors/0.2 ·
r#407 case_selectors/0.2 -> comma ·
r#408 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#409 continuing_compound_statement/0.2 -> break_if_statement ·
r#410 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#411 for_header/0.4 -> for_update ·
r#412 for_update -> increment_statement ·
r#413 for_update -> decrement_statement ·
r#414 for_update -> assignment_statement ·
r#415 for_update -> func_call_statement ·
r#416 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#417 case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 ·
r#418 case_compound_statement/0.2 -> fallthrough_statement ·
r#419 fallthrough_statement -> 'fallthrough' semicolon ·
r#420 case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right ·
r#421 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#19
[#2 '@']: s#32
[#2 'const']: s#21
[#2 'static_assert']: s#26
[#2 'struct']: s#24
[#2 'type']: s#23
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'static_assert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#19
[#7 ';']: r#1
[#8 ';']: r#2
[#8 '@']: r#2
[#8 'const']: r#2
[#8 'fn']: r#2
[#8 'override']: r#2
[#8 'static_assert']: r#2
[#8 'struct']: r#2
[#8 'type']: r#2
[#8 'var']: r#2
[#8 EndOfText]: r#2
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 ';']: s#19
[#11 '@']: s#32
[#11 'const']: s#21
[#11 'static_assert']: s#26
[#11 'struct']: s#24
[#11 'type']: s#23
[#12 ';']: r#5
[#12 '@']: r#5
[#12 'const']: r#5
[#12 'fn']: r#5
[#12 'override']: r#5
[#12 'static_assert']: r#5
[#12 'struct']: r#5
[#12 'type']: r#5
[#12 'var']: r#5
[#12 EndOfText]: r#5
[#13 ';']: s#19
[#14 ';']: s#19
[#15 ';']: s#19
[#16 ';']: r#6
[#16 '@']: r#6
[#16 'const']: r#6
[#16 'fn']: r#6
[#16 'override']: r#6
[#16 'static_assert']: r#6
[#16 'struct']: r#6
[#16 'type']: r#6
[#16 'var']: r#6
[#16 EndOfText]: r#6
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'const']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'static_assert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#19
[#19 '!']: r#8
[#19 '&']: r#8
[#19 '(']: r#8
[#19 ')']: r#8
[#19 '*']: r#8
[#19 '-']: r#8
[#19 ';']: r#8
[#19 '@']: r#8
[#19 '_']: r#8
[#19 'array']: r#8
[#19 'atomic']: r#8
[#19 'bitcast']: r#8
[#19 'bool']: r#8
[#19 'break']: r#8
[#19 'const']: r#8
[#19 'continue']: r#8
[#19 'continuing']: r#8
[#19 'discard']: r#8
[#19 'enable']: r#8
[#19 'f16']: r#8
[#19 'f32']: r#8
[#19 'fallthrough']: r#8
[#19 'false']: r#8
[#19 'fn']: r#8
[#19 'for']: r#8
[#19 'i32']: r#8
[#19 'if']: r#8
[#19 'let']: r#8
[#19 'loop']: r#8
[#19 'mat2x2']: r#8
[#19 'mat2x3']: r#8
[#19 'mat2x4']: r#8
[#19 'mat3x2']: r#8
[#19 'mat3x3']: r#8
[#19 'mat3x4']: r#8
[#19 'mat4x2']: r#8
[#19 'mat4x3']: r#8
[#19 'mat4x4']: r#8
[#19 'override']: r#8
[#19 'ptr']: r#8
[#19 'return']: r#8
[#19 'sampler']: r#8
[#19 'sampler_comparison']: r#8
[#19 'static_assert']: r#8
[#19 'struct']: r#8
[#19 'switch']: r#8
[#19 'texture_1d']: r#8
[#19 'texture_2d']: r#8
[#19 'texture_2d_array']: r#8
[#19 'texture_3d']: r#8
[#19 'texture_cube']: r#8
[#19 'texture_cube_array']: r#8
[#19 'texture_depth_2d']: r#8
[#19 'texture_depth_2d_array']: r#8
[#19 'texture_depth_cube']: r#8
[#19 'texture_depth_cube_array']: r#8
[#19 'texture_depth_multisampled_2d']: r#8
[#19 'texture_multisampled_2d']: r#8
[#19 'texture_storage_1d']: r#8
[#19 'texture_storage_2d']: r#8
[#19 'texture_storage_2d_array']: r#8
[#19 'texture_storage_3d']: r#8
[#19 'true']: r#8
[#19 'type']: r#8
[#19 'u32']: r#8
[#19 'var']: r#8
[#19 'vec2']: r#8
[#19 'vec3']: r#8
[#19 'vec4']: r#8
[#19 'while']: r#8
[#19 '{']: r#8
[#19 '}']: r#8
[#19 '~']: r#8
[#19 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#8
[#19 EndOfText]: r#8
[#20 'var']: s#162
[#21 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#22 'override']: s#157
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#25 'fn']: s#154
[#26 '!']: s#70
[#26 '&']: s#73
[#26 '(']: s#116
[#26 '*']: s#72
[#26 '-']: s#69
[#26 'array']: s#83
[#26 'atomic']: s#95
[#26 'bitcast']: s#78
[#26 'bool']: s#88
[#26 'f16']: s#118
[#26 'f32']: s#117
[#26 'false']: s#115
[#26 'i32']: s#119
[#26 'mat2x2']: s#100
[#26 'mat2x3']: s#101
[#26 'mat2x4']: s#102
[#26 'mat3x2']: s#103
[#26 'mat3x3']: s#104
[#26 'mat3x4']: s#105
[#26 'mat4x2']: s#106
[#26 'mat4x3']: s#107
[#26 'mat4x4']: s#108
[#26 'ptr']: s#121
[#26 'sampler']: s#135
[#26 'sampler_comparison']: s#136
[#26 'texture_1d']: s#142
[#26 'texture_2d']: s#143
[#26 'texture_2d_array']: s#144
[#26 'texture_3d']: s#145
[#26 'texture_cube']: s#146
[#26 'texture_cube_array']: s#147
[#26 'texture_depth_2d']: s#137
[#26 'texture_depth_2d_array']: s#138
[#26 'texture_depth_cube']: s#139
[#26 'texture_depth_cube_array']: s#140
[#26 'texture_depth_multisampled_2d']: s#141
[#26 'texture_multisampled_2d']: s#148
[#26 'texture_storage_1d']: s#149
[#26 'texture_storage_2d']: s#150
[#26 'texture_storage_2d_array']: s#151
[#26 'texture_storage_3d']: s#152
[#26 'true']: s#114
[#26 'u32']: s#120
[#26 'vec2']: s#97
[#26 'vec3']: s#98
[#26 'vec4']: s#99
[#26 '~']: s#71
[#26 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#26 /0[fh]/]: s#130
[#26 /0[iu]?/]: s#110
[#26 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#26 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#26 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#26 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#26 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#26 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#26 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#26 /[1-9][0-9]*[fh]/]: s#131
[#26 /[1-9][0-9]*[iu]?/]: s#111
[#27 'var']: r#9
[#28 'override']: r#10
[#29 'fn']: r#11
[#30 '@']: s#32
[#31 'align']: s#33
[#31 'binding']: s#34
[#31 'builtin']: s#35
[#31 'compute']: s#46
[#31 'const']: s#36
[#31 'fragment']: s#45
[#31 'group']: s#37
[#31 'id']: s#38
[#31 'interpolate']: s#39
[#31 'invariant']: s#40
[#31 'location']: s#41
[#31 'size']: s#42
[#31 'vertex']: s#44
[#31 'workgroup_size']: s#43
[#32 'const']: r#12
[#33 '(']: s#116
[#34 '(']: s#116
[#35 '(']: s#116
[#36 '@']: r#13
[#36 'array']: r#13
[#36 'atomic']: r#13
[#36 'bool']: r#13
[#36 'f16']: r#13
[#36 'f32']: r#13
[#36 'fn']: r#13
[#36 'i32']: r#13
[#36 'mat2x2']: r#13
[#36 'mat2x3']: r#13
[#36 'mat2x4']: r#13
[#36 'mat3x2']: r#13
[#36 'mat3x3']: r#13
[#36 'mat3x4']: r#13
[#36 'mat4x2']: r#13
[#36 'mat4x3']: r#13
[#36 'mat4x4']: r#13
[#36 'override']: r#13
[#36 'ptr']: r#13
[#36 'sampler']: r#13
[#36 'sampler_comparison']: r#13
[#36 'texture_1d']: r#13
[#36 'texture_2d']: r#13
[#36 'texture_2d_array']: r#13
[#36 'texture_3d']: r#13
[#36 'texture_cube']: r#13
[#36 'texture_cube_array']: r#13
[#36 'texture_depth_2d']: r#13
[#36 'texture_depth_2d_array']: r#13
[#36 'texture_depth_cube']: r#13
[#36 'texture_depth_cube_array']: r#13
[#36 'texture_depth_multisampled_2d']: r#13
[#36 'texture_multisampled_2d']: r#13
[#36 'texture_storage_1d']: r#13
[#36 'texture_storage_2d']: r#13
[#36 'texture_storage_2d_array']: r#13
[#36 'texture_storage_3d']: r#13
[#36 'u32']: r#13
[#36 'var']: r#13
[#36 'vec2']: r#13
[#36 'vec3']: r#13
[#36 'vec4']: r#13
[#36 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#13
[#37 '(']: s#116
[#38 '(']: s#116
[#39 '(']: s#116
[#40 '@']: r#14
[#40 'array']: r#14
[#40 'atomic']: r#14
[#40 'bool']: r#14
[#40 'f16']: r#14
[#40 'f32']: r#14
[#40 'fn']: r#14
[#40 'i32']: r#14
[#40 'mat2x2']: r#14
[#40 'mat2x3']: r#14
[#40 'mat2x4']: r#14
[#40 'mat3x2']: r#14
[#40 'mat3x3']: r#14
[#40 'mat3x4']: r#14
[#40 'mat4x2']: r#14
[#40 'mat4x3']: r#14
[#40 'mat4x4']: r#14
[#40 'override']: r#14
[#40 'ptr']: r#14
[#40 'sampler']: r#14
[#40 'sampler_comparison']: r#14
[#40 'texture_1d']: r#14
[#40 'texture_2d']: r#14
[#40 'texture_2d_array']: r#14
[#40 'texture_3d']: r#14
[#40 'texture_cube']: r#14
[#40 'texture_cube_array']: r#14
[#40 'texture_depth_2d']: r#14
[#40 'texture_depth_2d_array']: r#14
[#40 'texture_depth_cube']: r#14
[#40 'texture_depth_cube_array']: r#14
[#40 'texture_depth_multisampled_2d']: r#14
[#40 'texture_multisampled_2d']: r#14
[#40 'texture_storage_1d']: r#14
[#40 'texture_storage_2d']: r#14
[#40 'texture_storage_2d_array']: r#14
[#40 'texture_storage_3d']: r#14
[#40 'u32']: r#14
[#40 'var']: r#14
[#40 'vec2']: r#14
[#40 'vec3']: r#14
[#40 'vec4']: r#14
[#40 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#14
[#41 '(']: s#116
[#42 '(']: s#116
[#43 '(']: s#116
[#44 '@']: r#15
[#44 'array']: r#15
[#44 'atomic']: r#15
[#44 'bool']: r#15
[#44 'f16']: r#15
[#44 'f32']: r#15
[#44 'fn']: r#15
[#44 'i32']: r#15
[#44 'mat2x2']: r#15
[#44 'mat2x3']: r#15
[#44 'mat2x4']: r#15
[#44 'mat3x2']: r#15
[#44 'mat3x3']: r#15
[#44 'mat3x4']: r#15
[#44 'mat4x2']: r#15
[#44 'mat4x3']: r#15
[#44 'mat4x4']: r#15
[#44 'override']: r#15
[#44 'ptr']: r#15
[#44 'sampler']: r#15
[#44 'sampler_comparison']: r#15
[#44 'texture_1d']: r#15
[#44 'texture_2d']: r#15
[#44 'texture_2d_array']: r#15
[#44 'texture_3d']: r#15
[#44 'texture_cube']: r#15
[#44 'texture_cube_array']: r#15
[#44 'texture_depth_2d']: r#15
[#44 'texture_depth_2d_array']: r#15
[#44 'texture_depth_cube']: r#15
[#44 'texture_depth_cube_array']: r#15
[#44 'texture_depth_multisampled_2d']: r#15
[#44 'texture_multisampled_2d']: r#15
[#44 'texture_storage_1d']: r#15
[#44 'texture_storage_2d']: r#15
[#44 'texture_storage_2d_array']: r#15
[#44 'texture_storage_3d']: r#15
[#44 'u32']: r#15
[#44 'var']: r#15
[#44 'vec2']: r#15
[#44 'vec3']: r#15
[#44 'vec4']: r#15
[#44 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#15
[#45 '@']: r#16
[#45 'array']: r#16
[#45 'atomic']: r#16
[#45 'bool']: r#16
[#45 'f16']: r#16
[#45 'f32']: r#16
[#45 'fn']: r#16
[#45 'i32']: r#16
[#45 'mat2x2']: r#16
[#45 'mat2x3']: r#16
[#45 'mat2x4']: r#16
[#45 'mat3x2']: r#16
[#45 'mat3x3']: r#16
[#45 'mat3x4']: r#16
[#45 'mat4x2']: r#16
[#45 'mat4x3']: r#16
[#45 'mat4x4']: r#16
[#45 'override']: r#16
[#45 'ptr']: r#16
[#45 'sampler']: r#16
[#45 'sampler_comparison']: r#16
[#45 'texture_1d']: r#16
[#45 'texture_2d']: r#16
[#45 'texture_2d_array']: r#16
[#45 'texture_3d']: r#16
[#45 'texture_cube']: r#16
[#45 'texture_cube_array']: r#16
[#45 'texture_depth_2d']: r#16
[#45 'texture_depth_2d_array']: r#16
[#45 'texture_depth_cube']: r#16
[#45 'texture_depth_cube_array']: r#16
[#45 'texture_depth_multisampled_2d']: r#16
[#45 'texture_multisampled_2d']: r#16
[#45 'texture_storage_1d']: r#16
[#45 'texture_storage_2d']: r#16
[#45 'texture_storage_2d_array']: r#16
[#45 'texture_storage_3d']: r#16
[#45 'u32']: r#16
[#45 'var']: r#16
[#45 'vec2']: r#16
[#45 'vec3']: r#16
[#45 'vec4']: r#16
[#45 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#16
[#46 '@']: r#17
[#46 'array']: r#17
[#46 'atomic']: r#17
[#46 'bool']: r#17
[#46 'f16']: r#17
[#46 'f32']: r#17
[#46 'fn']: r#17
[#46 'i32']: r#17
[#46 'mat2x2']: r#17
[#46 'mat2x3']: r#17
[#46 'mat2x4']: r#17
[#46 'mat3x2']: r#17
[#46 'mat3x3']: r#17
[#46 'mat3x4']: r#17
[#46 'mat4x2']: r#17
[#46 'mat4x3']: r#17
[#46 'mat4x4']: r#17
[#46 'override']: r#17
[#46 'ptr']: r#17
[#46 'sampler']: r#17
[#46 'sampler_comparison']: r#17
[#46 'texture_1d']: r#17
[#46 'texture_2d']: r#17
[#46 'texture_2d_array']: r#17
[#46 'texture_3d']: r#17
[#46 'texture_cube']: r#17
[#46 'texture_cube_array']: r#17
[#46 'texture_depth_2d']: r#17
[#46 'texture_depth_2d_array']: r#17
[#46 'texture_depth_cube']: r#17
[#46 'texture_depth_cube_array']: r#17
[#46 'texture_depth_multisampled_2d']: r#17
[#46 'texture_multisampled_2d']: r#17
[#46 'texture_storage_1d']: r#17
[#46 'texture_storage_2d']: r#17
[#46 'texture_storage_2d_array']: r#17
[#46 'texture_storage_3d']: r#17
[#46 'u32']: r#17
[#46 'var']: r#17
[#46 'vec2']: r#17
[#46 'vec3']: r#17
[#46 'vec4']: r#17
[#46 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#17
[#47 'var']: r#18
[#48 'override']: r#19
[#49 'fn']: r#20
[#50 ';']: r#21
[#51 '&&']: r#24
[#51 ')']: r#22
[#51 ',']: r#22
[#51 ':']: r#22
[#51 ';']: r#22
[#51 ']']: r#22
[#51 '{']: r#22
[#51 '||']: r#23
[#52 '||']: s#243
[#53 '&&']: s#241
[#54 ')']: r#25
[#54 ',']: r#25
[#54 ':']: r#25
[#54 ';']: r#25
[#54 ']']: r#25
[#54 '{']: r#25
[#55 '!=']: s#239
[#55 '&&']: r#26
[#55 ')']: r#26
[#55 ',']: r#26
[#55 ':']: r#26
[#55 ';']: r#26
[#55 '<']: s#172
[#55 '<=']: s#236
[#55 '==']: s#238
[#55 '>']: s#235
[#55 '>=']: s#237
[#55 ']']: r#26
[#55 '{']: r#26
[#55 '||']: r#26
[#56 '&']: s#73
[#57 '|']: s#227
[#58 '^']: s#225
[#59 '!=']: r#27
[#59 '&&']: r#27
[#59 ')']: r#27
[#59 '+']: s#223
[#59 ',']: r#27
[#59 '-']: s#69
[#59 ':']: r#27
[#59 ';']: r#27
[#59 '<']: r#27
[#59 '<=']: r#27
[#59 '==']: r#27
[#59 '>']: r#27
[#59 '>=']: r#27
[#59 ']']: r#27
[#59 '{']: r#27
[#59 '||']: r#27
[#60 '!=']: r#31
[#60 '%']: r#31
[#60 '&&']: r#31
[#60 '&']: r#28
[#60 ')']: r#31
[#60 '*']: r#31
[#60 '+']: r#31
[#60 ',']: r#31
[#60 '-']: r#31
[#60 '/']: r#31
[#60 ':']: r#31
[#60 ';']: r#31
[#60 '<']: r#31
[#60 '<<']: s#219
[#60 '<=']: r#31
[#60 '==']: r#31
[#60 '>']: r#31
[#60 '>=']: r#31
[#60 '>>']: s#220
[#60 ']']: r#31
[#60 '^']: r#30
[#60 '{']: r#31
[#60 '|']: r#29
[#60 '||']: r#31
[#61 '!=']: r#32
[#61 '%']: s#216
[#61 '&&']: r#32
[#61 ')']: r#32
[#61 '*']: s#72
[#61 '+']: r#32
[#61 ',']: r#32
[#61 '-']: r#32
[#61 '/']: s#215
[#61 ':']: r#32
[#61 ';']: r#32
[#61 '<']: r#32
[#61 '<=']: r#32
[#61 '==']: r#32
[#61 '>']: r#32
[#61 '>=']: r#32
[#61 ']']: r#32
[#61 '{']: r#32
[#61 '||']: r#32
[#62 '!=']: r#33
[#62 '%']: r#33
[#62 '&&']: r#33
[#62 '&']: r#33
[#62 ')']: r#33
[#62 '*']: r#33
[#62 '+']: r#33
[#62 ',']: r#33
[#62 '-']: r#33
[#62 '/']: r#33
[#62 ':']: r#33
[#62 ';']: r#33
[#62 '<']: r#33
[#62 '<<']: r#33
[#62 '<=']: r#33
[#62 '==']: r#33
[#62 '>']: r#33
[#62 '>=']: r#33
[#62 '>>']: r#33
[#62 ']']: r#33
[#62 '^']: r#33
[#62 '{']: r#33
[#62 '|']: r#33
[#62 '||']: r#33
[#63 '!']: s#70
[#63 '&']: s#73
[#63 '(']: s#116
[#63 '*']: s#72
[#63 '-']: s#69
[#63 'array']: s#83
[#63 'atomic']: s#95
[#63 'bitcast']: s#78
[#63 'bool']: s#88
[#63 'f16']: s#118
[#63 'f32']: s#117
[#63 'false']: s#115
[#63 'i32']: s#119
[#63 'mat2x2']: s#100
[#63 'mat2x3']: s#101
[#63 'mat2x4']: s#102
[#63 'mat3x2']: s#103
[#63 'mat3x3']: s#104
[#63 'mat3x4']: s#105
[#63 'mat4x2']: s#106
[#63 'mat4x3']: s#107
[#63 'mat4x4']: s#108
[#63 'ptr']: s#121
[#63 'sampler']: s#135
[#63 'sampler_comparison']: s#136
[#63 'texture_1d']: s#142
[#63 'texture_2d']: s#143
[#63 'texture_2d_array']: s#144
[#63 'texture_3d']: s#145
[#63 'texture_cube']: s#146
[#63 'texture_cube_array']: s#147
[#63 'texture_depth_2d']: s#137
[#63 'texture_depth_2d_array']: s#138
[#63 'texture_depth_cube']: s#139
[#63 'texture_depth_cube_array']: s#140
[#63 'texture_depth_multisampled_2d']: s#141
[#63 'texture_multisampled_2d']: s#148
[#63 'texture_storage_1d']: s#149
[#63 'texture_storage_2d']: s#150
[#63 'texture_storage_2d_array']: s#151
[#63 'texture_storage_3d']: s#152
[#63 'true']: s#114
[#63 'u32']: s#120
[#63 'vec2']: s#97
[#63 'vec3']: s#98
[#63 'vec4']: s#99
[#63 '~']: s#71
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#63 /0[fh]/]: s#130
[#63 /0[iu]?/]: s#110
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#63 /[1-9][0-9]*[fh]/]: s#131
[#63 /[1-9][0-9]*[iu]?/]: s#111
[#64 '!']: s#70
[#64 '&']: s#73
[#64 '(']: s#116
[#64 '*']: s#72
[#64 '-']: s#69
[#64 'array']: s#83
[#64 'atomic']: s#95
[#64 'bitcast']: s#78
[#64 'bool']: s#88
[#64 'f16']: s#118
[#64 'f32']: s#117
[#64 'false']: s#115
[#64 'i32']: s#119
[#64 'mat2x2']: s#100
[#64 'mat2x3']: s#101
[#64 'mat2x4']: s#102
[#64 'mat3x2']: s#103
[#64 'mat3x3']: s#104
[#64 'mat3x4']: s#105
[#64 'mat4x2']: s#106
[#64 'mat4x3']: s#107
[#64 'mat4x4']: s#108
[#64 'ptr']: s#121
[#64 'sampler']: s#135
[#64 'sampler_comparison']: s#136
[#64 'texture_1d']: s#142
[#64 'texture_2d']: s#143
[#64 'texture_2d_array']: s#144
[#64 'texture_3d']: s#145
[#64 'texture_cube']: s#146
[#64 'texture_cube_array']: s#147
[#64 'texture_depth_2d']: s#137
[#64 'texture_depth_2d_array']: s#138
[#64 'texture_depth_cube']: s#139
[#64 'texture_depth_cube_array']: s#140
[#64 'texture_depth_multisampled_2d']: s#141
[#64 'texture_multisampled_2d']: s#148
[#64 'texture_storage_1d']: s#149
[#64 'texture_storage_2d']: s#150
[#64 'texture_storage_2d_array']: s#151
[#64 'texture_storage_3d']: s#152
[#64 'true']: s#114
[#64 'u32']: s#120
[#64 'vec2']: s#97
[#64 'vec3']: s#98
[#64 'vec4']: s#99
[#64 '~']: s#71
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#64 /0[fh]/]: s#130
[#64 /0[iu]?/]: s#110
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#64 /[1-9][0-9]*[fh]/]: s#131
[#64 /[1-9][0-9]*[iu]?/]: s#111
[#65 '!']: s#70
[#65 '&']: s#73
[#65 '(']: s#116
[#65 '*']: s#72
[#65 '-']: s#69
[#65 'array']: s#83
[#65 'atomic']: s#95
[#65 'bitcast']: s#78
[#65 'bool']: s#88
[#65 'f16']: s#118
[#65 'f32']: s#117
[#65 'false']: s#115
[#65 'i32']: s#119
[#65 'mat2x2']: s#100
[#65 'mat2x3']: s#101
[#65 'mat2x4']: s#102
[#65 'mat3x2']: s#103
[#65 'mat3x3']: s#104
[#65 'mat3x4']: s#105
[#65 'mat4x2']: s#106
[#65 'mat4x3']: s#107
[#65 'mat4x4']: s#108
[#65 'ptr']: s#121
[#65 'sampler']: s#135
[#65 'sampler_comparison']: s#136
[#65 'texture_1d']: s#142
[#65 'texture_2d']: s#143
[#65 'texture_2d_array']: s#144
[#65 'texture_3d']: s#145
[#65 'texture_cube']: s#146
[#65 'texture_cube_array']: s#147
[#65 'texture_depth_2d']: s#137
[#65 'texture_depth_2d_array']: s#138
[#65 'texture_depth_cube']: s#139
[#65 'texture_depth_cube_array']: s#140
[#65 'texture_depth_multisampled_2d']: s#141
[#65 'texture_multisampled_2d']: s#148
[#65 'texture_storage_1d']: s#149
[#65 'texture_storage_2d']: s#150
[#65 'texture_storage_2d_array']: s#151
[#65 'texture_storage_3d']: s#152
[#65 'true']: s#114
[#65 'u32']: s#120
[#65 'vec2']: s#97
[#65 'vec3']: s#98
[#65 'vec4']: s#99
[#65 '~']: s#71
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#65 /0[fh]/]: s#130
[#65 /0[iu]?/]: s#110
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#65 /[1-9][0-9]*[fh]/]: s#131
[#65 /[1-9][0-9]*[iu]?/]: s#111
[#66 '!']: s#70
[#66 '&']: s#73
[#66 '(']: s#116
[#66 '*']: s#72
[#66 '-']: s#69
[#66 'array']: s#83
[#66 'atomic']: s#95
[#66 'bitcast']: s#78
[#66 'bool']: s#88
[#66 'f16']: s#118
[#66 'f32']: s#117
[#66 'false']: s#115
[#66 'i32']: s#119
[#66 'mat2x2']: s#100
[#66 'mat2x3']: s#101
[#66 'mat2x4']: s#102
[#66 'mat3x2']: s#103
[#66 'mat3x3']: s#104
[#66 'mat3x4']: s#105
[#66 'mat4x2']: s#106
[#66 'mat4x3']: s#107
[#66 'mat4x4']: s#108
[#66 'ptr']: s#121
[#66 'sampler']: s#135
[#66 'sampler_comparison']: s#136
[#66 'texture_1d']: s#142
[#66 'texture_2d']: s#143
[#66 'texture_2d_array']: s#144
[#66 'texture_3d']: s#145
[#66 'texture_cube']: s#146
[#66 'texture_cube_array']: s#147
[#66 'texture_depth_2d']: s#137
[#66 'texture_depth_2d_array']: s#138
[#66 'texture_depth_cube']: s#139
[#66 'texture_depth_cube_array']: s#140
[#66 'texture_depth_multisampled_2d']: s#141
[#66 'texture_multisampled_2d']: s#148
[#66 'texture_storage_1d']: s#149
[#66 'texture_storage_2d']: s#150
[#66 'texture_storage_2d_array']: s#151
[#66 'texture_storage_3d']: s#152
[#66 'true']: s#114
[#66 'u32']: s#120
[#66 'vec2']: s#97
[#66 'vec3']: s#98
[#66 'vec4']: s#99
[#66 '~']: s#71
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#66 /0[fh]/]: s#130
[#66 /0[iu]?/]: s#110
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#66 /[1-9][0-9]*[fh]/]: s#131
[#66 /[1-9][0-9]*[iu]?/]: s#111
[#67 '!']: s#70
[#67 '&']: s#73
[#67 '(']: s#116
[#67 '*']: s#72
[#67 '-']: s#69
[#67 'array']: s#83
[#67 'atomic']: s#95
[#67 'bitcast']: s#78
[#67 'bool']: s#88
[#67 'f16']: s#118
[#67 'f32']: s#117
[#67 'false']: s#115
[#67 'i32']: s#119
[#67 'mat2x2']: s#100
[#67 'mat2x3']: s#101
[#67 'mat2x4']: s#102
[#67 'mat3x2']: s#103
[#67 'mat3x3']: s#104
[#67 'mat3x4']: s#105
[#67 'mat4x2']: s#106
[#67 'mat4x3']: s#107
[#67 'mat4x4']: s#108
[#67 'ptr']: s#121
[#67 'sampler']: s#135
[#67 'sampler_comparison']: s#136
[#67 'texture_1d']: s#142
[#67 'texture_2d']: s#143
[#67 'texture_2d_array']: s#144
[#67 'texture_3d']: s#145
[#67 'texture_cube']: s#146
[#67 'texture_cube_array']: s#147
[#67 'texture_depth_2d']: s#137
[#67 'texture_depth_2d_array']: s#138
[#67 'texture_depth_cube']: s#139
[#67 'texture_depth_cube_array']: s#140
[#67 'texture_depth_multisampled_2d']: s#141
[#67 'texture_multisampled_2d']: s#148
[#67 'texture_storage_1d']: s#149
[#67 'texture_storage_2d']: s#150
[#67 'texture_storage_2d_array']: s#151
[#67 'texture_storage_3d']: s#152
[#67 'true']: s#114
[#67 'u32']: s#120
[#67 'vec2']: s#97
[#67 'vec3']: s#98
[#67 'vec4']: s#99
[#67 '~']: s#71
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#67 /0[fh]/]: s#130
[#67 /0[iu]?/]: s#110
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#67 /[1-9][0-9]*[fh]/]: s#131
[#67 /[1-9][0-9]*[iu]?/]: s#111
[#68 '.']: s#206
[#68 '[']: s#205
[#69 '!']: r#34
[#69 '&']: r#34
[#69 '(']: r#34
[#69 '*']: r#34
[#69 '-']: r#34
[#69 'array']: r#34
[#69 'atomic']: r#34
[#69 'bitcast']: r#34
[#69 'bool']: r#34
[#69 'f16']: r#34
[#69 'f32']: r#34
[#69 'false']: r#34
[#69 'i32']: r#34
[#69 'mat2x2']: r#34
[#69 'mat2x3']: r#34
[#69 'mat2x4']: r#34
[#69 'mat3x2']: r#34
[#69 'mat3x3']: r#34
[#69 'mat3x4']: r#34
[#69 'mat4x2']: r#34
[#69 'mat4x3']: r#34
[#69 'mat4x4']: r#34
[#69 'ptr']: r#34
[#69 'sampler']: r#34
[#69 'sampler_comparison']: r#34
[#69 'texture_1d']: r#34
[#69 'texture_2d']: r#34
[#69 'texture_2d_array']: r#34
[#69 'texture_3d']: r#34
[#69 'texture_cube']: r#34
[#69 'texture_cube_array']: r#34
[#69 'texture_depth_2d']: r#34
[#69 'texture_depth_2d_array']: r#34
[#69 'texture_depth_cube']: r#34
[#69 'texture_depth_cube_array']: r#34
[#69 'texture_depth_multisampled_2d']: r#34
[#69 'texture_multisampled_2d']: r#34
[#69 'texture_storage_1d']: r#34
[#69 'texture_storage_2d']: r#34
[#69 'texture_storage_2d_array']: r#34
[#69 'texture_storage_3d']: r#34
[#69 'true']: r#34
[#69 'u32']: r#34
[#69 'vec2']: r#34
[#69 'vec3']: r#34
[#69 'vec4']: r#34
[#69 '~']: r#34
[#70 '!']: r#35
[#70 '&']: r#35
[#70 '(']: r#35
[#70 '*']: r#35
[#70 '-']: r#35
[#70 'array']: r#35
[#70 'atomic']: r#35
[#70 'bitcast']: r#35
[#70 'bool']: r#35
[#70 'f16']: r#35
[#70 'f32']: r#35
[#70 'false']: r#35
[#70 'i32']: r#35
[#70 'mat2x2']: r#35
[#70 'mat2x3']: r#35
[#70 'mat2x4']: r#35
[#70 'mat3x2']: r#35
[#70 'mat3x3']: r#35
[#70 'mat3x4']: r#35
[#70 'mat4x2']: r#35
[#70 'mat4x3']: r#35
[#70 'mat4x4']: r#35
[#70 'ptr']: r#35
[#70 'sampler']: r#35
[#70 'sampler_comparison']: r#35
[#70 'texture_1d']: r#35
[#70 'texture_2d']: r#35
[#70 'texture_2d_array']: r#35
[#70 'texture_3d']: r#35
[#70 'texture_cube']: r#35
[#70 'texture_cube_array']: r#35
[#70 'texture_depth_2d']: r#35
[#70 'texture_depth_2d_array']: r#35
[#70 'texture_depth_cube']: r#35
[#70 'texture_depth_cube_array']: r#35
[#70 'texture_depth_multisampled_2d']: r#35
[#70 'texture_multisampled_2d']: r#35
[#70 'texture_storage_1d']: r#35
[#70 'texture_storage_2d']: r#35
[#70 'texture_storage_2d_array']: r#35
[#70 'texture_storage_3d']: r#35
[#70 'true']: r#35
[#70 'u32']: r#35
[#70 'vec2']: r#35
[#70 'vec3']: r#35
[#70 'vec4']: r#35
[#70 '~']: r#35
[#71 '!']: r#36
[#71 '&']: r#36
[#71 '(']: r#36
[#71 '*']: r#36
[#71 '-']: r#36
[#71 'array']: r#36
[#71 'atomic']: r#36
[#71 'bitcast']: r#36
[#71 'bool']: r#36
[#71 'f16']: r#36
[#71 'f32']: r#36
[#71 'false']: r#36
[#71 'i32']: r#36
[#71 'mat2x2']: r#36
[#71 'mat2x3']: r#36
[#71 'mat2x4']: r#36
[#71 'mat3x2']: r#36
[#71 'mat3x3']: r#36
[#71 'mat3x4']: r#36
[#71 'mat4x2']: r#36
[#71 'mat4x3']: r#36
[#71 'mat4x4']: r#36
[#71 'ptr']: r#36
[#71 'sampler']: r#36
[#71 'sampler_comparison']: r#36
[#71 'texture_1d']: r#36
[#71 'texture_2d']: r#36
[#71 'texture_2d_array']: r#36
[#71 'texture_3d']: r#36
[#71 'texture_cube']: r#36
[#71 'texture_cube_array']: r#36
[#71 'texture_depth_2d']: r#36
[#71 'texture_depth_2d_array']: r#36
[#71 'texture_depth_cube']: r#36
[#71 'texture_depth_cube_array']: r#36
[#71 'texture_depth_multisampled_2d']: r#36
[#71 'texture_multisampled_2d']: r#36
[#71 'texture_storage_1d']: r#36
[#71 'texture_storage_2d']: r#36
[#71 'texture_storage_2d_array']: r#36
[#71 'texture_storage_3d']: r#36
[#71 'true']: r#36
[#71 'u32']: r#36
[#71 'vec2']: r#36
[#71 'vec3']: r#36
[#71 'vec4']: r#36
[#71 '~']: r#36
[#72 '!']: r#37
[#72 '&']: r#37
[#72 '(']: r#37
[#72 '*']: r#37
[#72 '-']: r#37
[#72 'array']: r#37
[#72 'atomic']: r#37
[#72 'bitcast']: r#37
[#72 'bool']: r#37
[#72 'f16']: r#37
[#72 'f32']: r#37
[#72 'false']: r#37
[#72 'i32']: r#37
[#72 'mat2x2']: r#37
[#72 'mat2x3']: r#37
[#72 'mat2x4']: r#37
[#72 'mat3x2']: r#37
[#72 'mat3x3']: r#37
[#72 'mat3x4']: r#37
[#72 'mat4x2']: r#37
[#72 'mat4x3']: r#37
[#72 'mat4x4']: r#37
[#72 'ptr']: r#37
[#72 'sampler']: r#37
[#72 'sampler_comparison']: r#37
[#72 'texture_1d']: r#37
[#72 'texture_2d']: r#37
[#72 'texture_2d_array']: r#37
[#72 'texture_3d']: r#37
[#72 'texture_cube']: r#37
[#72 'texture_cube_array']: r#37
[#72 'texture_depth_2d']: r#37
[#72 'texture_depth_2d_array']: r#37
[#72 'texture_depth_cube']: r#37
[#72 'texture_depth_cube_array']: r#37
[#72 'texture_depth_multisampled_2d']: r#37
[#72 'texture_multisampled_2d']: r#37
[#72 'texture_storage_1d']: r#37
[#72 'texture_storage_2d']: r#37
[#72 'texture_storage_2d_array']: r#37
[#72 'texture_storage_3d']: r#37
[#72 'true']: r#37
[#72 'u32']: r#37
[#72 'vec2']: r#37
[#72 'vec3']: r#37
[#72 'vec4']: r#37
[#72 '~']: r#37
[#73 '!']: r#38
[#73 '&']: r#38
[#73 '(']: r#38
[#73 '*']: r#38
[#73 '-']: r#38
[#73 'array']: r#38
[#73 'atomic']: r#38
[#73 'bitcast']: r#38
[#73 'bool']: r#38
[#73 'f16']: r#38
[#73 'f32']: r#38
[#73 'false']: r#38
[#73 'i32']: r#38
[#73 'mat2x2']: r#38
[#73 'mat2x3']: r#38
[#73 'mat2x4']: r#38
[#73 'mat3x2']: r#38
[#73 'mat3x3']: r#38
[#73 'mat3x4']: r#38
[#73 'mat4x2']: r#38
[#73 'mat4x3']: r#38
[#73 'mat4x4']: r#38
[#73 'ptr']: r#38
[#73 'sampler']: r#38
[#73 'sampler_comparison']: r#38
[#73 'texture_1d']: r#38
[#73 'texture_2d']: r#38
[#73 'texture_2d_array']: r#38
[#73 'texture_3d']: r#38
[#73 'texture_cube']: r#38
[#73 'texture_cube_array']: r#38
[#73 'texture_depth_2d']: r#38
[#73 'texture_depth_2d_array']: r#38
[#73 'texture_depth_cube']: r#38
[#73 'texture_depth_cube_array']: r#38
[#73 'texture_depth_multisampled_2d']: r#38
[#73 'texture_multisampled_2d']: r#38
[#73 'texture_storage_1d']: r#38
[#73 'texture_storage_2d']: r#38
[#73 'texture_storage_2d_array']: r#38
[#73 'texture_storage_3d']: r#38
[#73 'true']: r#38
[#73 'u32']: r#38
[#73 'vec2']: r#38
[#73 'vec3']: r#38
[#73 'vec4']: r#38
[#73 '~']: r#38
[#74 '!=']: r#39
[#74 '%']: r#39
[#74 '&&']: r#39
[#74 '&']: r#39
[#74 '(']: r#40
[#74 ')']: r#39
[#74 '*']: r#39
[#74 '+']: r#39
[#74 ',']: r#39
[#74 '-']: r#39
[#74 '.']: r#39
[#74 '/']: r#39
[#74 ':']: r#39
[#74 ';']: r#39
[#74 '<']: r#39
[#74 '<<']: r#39
[#74 '<=']: r#39
[#74 '==']: r#39
[#74 '>']: r#39
[#74 '>=']: r#39
[#74 '>>']: r#39
[#74 '[']: r#39
[#74 ']']: r#39
[#74 '^']: r#39
[#74 '{']: r#39
[#74 '|']: r#39
[#74 '||']: r#39
[#75 '(']: s#116
[#76 '!=']: r#41
[#76 '%']: r#41
[#76 '&&']: r#41
[#76 '&']: r#41
[#76 ')']: r#41
[#76 '*']: r#41
[#76 '+']: r#41
[#76 ',']: r#41
[#76 '-']: r#41
[#76 '.']: r#41
[#76 '/']: r#41
[#76 ':']: r#41
[#76 ';']: r#41
[#76 '<']: r#41
[#76 '<<']: r#41
[#76 '<=']: r#41
[#76 '==']: r#41
[#76 '>']: r#41
[#76 '>=']: r#41
[#76 '>>']: r#41
[#76 '[']: r#41
[#76 ']']: r#41
[#76 '^']: r#41
[#76 '{']: r#41
[#76 '|']: r#41
[#76 '||']: r#41
[#77 '!=']: r#42
[#77 '%']: r#42
[#77 '&&']: r#42
[#77 '&']: r#42
[#77 ')']: r#42
[#77 '*']: r#42
[#77 '+']: r#42
[#77 ',']: r#42
[#77 '-']: r#42
[#77 '.']: r#42
[#77 '/']: r#42
[#77 ':']: r#42
[#77 ';']: r#42
[#77 '<']: r#42
[#77 '<<']: r#42
[#77 '<=']: r#42
[#77 '==']: r#42
[#77 '>']: r#42
[#77 '>=']: r#42
[#77 '>>']: r#42
[#77 '[']: r#42
[#77 ']']: r#42
[#77 '^']: r#42
[#77 '{']: r#42
[#77 '|']: r#42
[#77 '||']: r#42
[#78 '<']: s#172
[#79 '!=']: r#43
[#79 '%']: r#43
[#79 '%=']: r#43
[#79 '&&']: r#43
[#79 '&']: r#43
[#79 '&=']: r#43
[#79 '(']: r#43
[#79 ')']: r#43
[#79 '*']: r#43
[#79 '*=']: r#43
[#79 '+']: r#43
[#79 '++']: r#43
[#79 '+=']: r#43
[#79 ',']: r#43
[#79 '-']: r#43
[#79 '--']: r#43
[#79 '-=']: r#43
[#79 '.']: r#43
[#79 '/']: r#43
[#79 '/=']: r#43
[#79 ':']: r#43
[#79 ';']: r#43
[#79 '<']: r#43
[#79 '<<']: r#43
[#79 '<<=']: r#43
[#79 '<=']: r#43
[#79 '=']: r#43
[#79 '==']: r#43
[#79 '>']: r#43
[#79 '>=']: r#43
[#79 '>>']: r#43
[#79 '>>=']: r#43
[#79 '[']: r#43
[#79 ']']: r#43
[#79 '^']: r#43
[#79 '^=']: r#43
[#79 '{']: r#43
[#79 '|']: r#43
[#79 '|=']: r#43
[#79 '||']: r#43
[#79 '}']: r#43
[#80 '(']: r#44
[#81 '(']: r#45
[#81 '<']: s#172
[#82 '(']: r#46
[#82 '<']: s#172
[#83 '(']: r#47
[#83 '<']: s#172
[#84 '!=']: r#48
[#84 '%']: r#48
[#84 '&&']: r#48
[#84 '&']: r#48
[#84 ')']: r#48
[#84 '*']: r#48
[#84 '+']: r#48
[#84 ',']: r#48
[#84 '-']: r#48
[#84 '.']: r#48
[#84 '/']: r#48
[#84 ':']: r#48
[#84 ';']: r#48
[#84 '<']: r#48
[#84 '<<']: r#48
[#84 '<=']: r#48
[#84 '==']: r#48
[#84 '>']: r#48
[#84 '>=']: r#48
[#84 '>>']: r#48
[#84 '[']: r#48
[#84 ']']: r#48
[#84 '^']: r#48
[#84 '{']: r#48
[#84 '|']: r#48
[#84 '||']: r#48
[#85 '!=']: r#49
[#85 '%']: r#49
[#85 '&&']: r#49
[#85 '&']: r#49
[#85 ')']: r#49
[#85 '*']: r#49
[#85 '+']: r#49
[#85 ',']: r#49
[#85 '-']: r#49
[#85 '.']: r#49
[#85 '/']: r#49
[#85 ':']: r#49
[#85 ';']: r#49
[#85 '<']: r#49
[#85 '<<']: r#49
[#85 '<=']: r#49
[#85 '==']: r#49
[#85 '>']: r#49
[#85 '>=']: r#49
[#85 '>>']: r#49
[#85 '[']: r#49
[#85 ']']: r#49
[#85 '^']: r#49
[#85 '{']: r#49
[#85 '|']: r#49
[#85 '||']: r#49
[#86 '!=']: r#50
[#86 '%']: r#50
[#86 '&&']: r#50
[#86 '&']: r#50
[#86 ')']: r#50
[#86 '*']: r#50
[#86 '+']: r#50
[#86 ',']: r#50
[#86 '-']: r#50
[#86 '.']: r#50
[#86 '/']: r#50
[#86 ':']: r#50
[#86 ';']: r#50
[#86 '<']: r#50
[#86 '<<']: r#50
[#86 '<=']: r#50
[#86 '==']: r#50
[#86 '>']: r#50
[#86 '>=']: r#50
[#86 '>>']: r#50
[#86 '[']: r#50
[#86 ']']: r#50
[#86 '^']: r#50
[#86 '{']: r#50
[#86 '|']: r#50
[#86 '||']: r#50
[#87 '!']: s#70
[#87 '&']: s#73
[#87 '(']: s#116
[#87 '*']: s#72
[#87 '-']: s#69
[#87 'array']: s#83
[#87 'atomic']: s#95
[#87 'bitcast']: s#78
[#87 'bool']: s#88
[#87 'f16']: s#118
[#87 'f32']: s#117
[#87 'false']: s#115
[#87 'i32']: s#119
[#87 'mat2x2']: s#100
[#87 'mat2x3']: s#101
[#87 'mat2x4']: s#102
[#87 'mat3x2']: s#103
[#87 'mat3x3']: s#104
[#87 'mat3x4']: s#105
[#87 'mat4x2']: s#106
[#87 'mat4x3']: s#107
[#87 'mat4x4']: s#108
[#87 'ptr']: s#121
[#87 'sampler']: s#135
[#87 'sampler_comparison']: s#136
[#87 'texture_1d']: s#142
[#87 'texture_2d']: s#143
[#87 'texture_2d_array']: s#144
[#87 'texture_3d']: s#145
[#87 'texture_cube']: s#146
[#87 'texture_cube_array']: s#147
[#87 'texture_depth_2d']: s#137
[#87 'texture_depth_2d_array']: s#138
[#87 'texture_depth_cube']: s#139
[#87 'texture_depth_cube_array']: s#140
[#87 'texture_depth_multisampled_2d']: s#141
[#87 'texture_multisampled_2d']: s#148
[#87 'texture_storage_1d']: s#149
[#87 'texture_storage_2d']: s#150
[#87 'texture_storage_2d_array']: s#151
[#87 'texture_storage_3d']: s#152
[#87 'true']: s#114
[#87 'u32']: s#120
[#87 'vec2']: s#97
[#87 'vec3']: s#98
[#87 'vec4']: s#99
[#87 '~']: s#71
[#87 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#87 /0[fh]/]: s#130
[#87 /0[iu]?/]: s#110
[#87 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#87 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#87 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#87 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#87 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#87 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#87 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#87 /[1-9][0-9]*[fh]/]: s#131
[#87 /[1-9][0-9]*[iu]?/]: s#111
[#88 '(']: r#51
[#88 ')']: r#51
[#88 ',']: r#51
[#88 ';']: r#51
[#88 '=']: r#51
[#88 '>']: r#51
[#88 '{']: r#51
[#88 '}']: r#51
[#89 '(']: r#52
[#89 ')']: r#52
[#89 ',']: r#52
[#89 ';']: r#52
[#89 '=']: r#52
[#89 '>']: r#52
[#89 '{']: r#52
[#89 '}']: r#52
[#90 '(']: r#53
[#90 ')']: r#53
[#90 ',']: r#53
[#90 ';']: r#53
[#90 '=']: r#53
[#90 '>']: r#53
[#90 '{']: r#53
[#90 '}']: r#53
[#91 '(']: r#54
[#91 ')']: r#54
[#91 ',']: r#54
[#91 ';']: r#54
[#91 '=']: r#54
[#91 '>']: r#54
[#91 '{']: r#54
[#91 '}']: r#54
[#92 '(']: r#55
[#92 ')']: r#55
[#92 ',']: r#55
[#92 ';']: r#55
[#92 '=']: r#55
[#92 '>']: r#55
[#92 '{']: r#55
[#92 '}']: r#55
[#93 '<']: s#172
[#94 '(']: r#56
[#94 ')']: r#56
[#94 ',']: r#56
[#94 ';']: r#56
[#94 '=']: r#56
[#94 '>']: r#56
[#94 '{']: r#56
[#94 '}']: r#56
[#95 '<']: s#172
[#96 '(']: r#57
[#96 ')']: r#57
[#96 ',']: r#57
[#96 ';']: r#57
[#96 '=']: r#57
[#96 '>']: r#57
[#96 '{']: r#57
[#96 '}']: r#57
[#97 '(']: r#58
[#97 '<']: r#58
[#98 '(']: r#59
[#98 '<']: r#59
[#99 '(']: r#60
[#99 '<']: r#60
[#100 '(']: r#61
[#100 '<']: r#61
[#101 '(']: r#62
[#101 '<']: r#62
[#102 '(']: r#63
[#102 '<']: r#63
[#103 '(']: r#64
[#103 '<']: r#64
[#104 '(']: r#65
[#104 '<']: r#65
[#105 '(']: r#66
[#105 '<']: r#66
[#106 '(']: r#67
[#106 '<']: r#67
[#107 '(']: r#68
[#107 '<']: r#68
[#108 '(']: r#69
[#108 '<']: r#69
[#109 '!=']: r#70
[#109 '%']: r#70
[#109 '&&']: r#70
[#109 '&']: r#70
[#109 ')']: r#70
[#109 '*']: r#70
[#109 '+']: r#70
[#109 ',']: r#70
[#109 '-']: r#70
[#109 '.']: r#70
[#109 '/']: r#70
[#109 ':']: r#70
[#109 ';']: r#70
[#109 '<']: r#70
[#109 '<<']: r#70
[#109 '<=']: r#70
[#109 '==']: r#70
[#109 '>']: r#70
[#109 '>=']: r#70
[#109 '>>']: r#70
[#109 '[']: r#70
[#109 ']']: r#70
[#109 '^']: r#70
[#109 '{']: r#70
[#109 '|']: r#70
[#109 '||']: r#70
[#110 '!=']: r#71
[#110 '%']: r#71
[#110 '&&']: r#71
[#110 '&']: r#71
[#110 ')']: r#71
[#110 '*']: r#71
[#110 '+']: r#71
[#110 ',']: r#71
[#110 '-']: r#71
[#110 '.']: r#71
[#110 '/']: r#71
[#110 ':']: r#71
[#110 ';']: r#71
[#110 '<']: r#71
[#110 '<<']: r#71
[#110 '<=']: r#71
[#110 '==']: r#71
[#110 '>']: r#71
[#110 '>=']: r#71
[#110 '>>']: r#71
[#110 '[']: r#71
[#110 ']']: r#71
[#110 '^']: r#71
[#110 '{']: r#71
[#110 '|']: r#71
[#110 '||']: r#71
[#111 '!=']: r#72
[#111 '%']: r#72
[#111 '&&']: r#72
[#111 '&']: r#72
[#111 ')']: r#72
[#111 '*']: r#72
[#111 '+']: r#72
[#111 ',']: r#72
[#111 '-']: r#72
[#111 '.']: r#72
[#111 '/']: r#72
[#111 ':']: r#72
[#111 ';']: r#72
[#111 '<']: r#72
[#111 '<<']: r#72
[#111 '<=']: r#72
[#111 '==']: r#72
[#111 '>']: r#72
[#111 '>=']: r#72
[#111 '>>']: r#72
[#111 '[']: r#72
[#111 ']']: r#72
[#111 '^']: r#72
[#111 '{']: r#72
[#111 '|']: r#72
[#111 '||']: r#72
[#112 '!=']: r#73
[#112 '%']: r#73
[#112 '&&']: r#73
[#112 '&']: r#73
[#112 ')']: r#73
[#112 '*']: r#73
[#112 '+']: r#73
[#112 ',']: r#73
[#112 '-']: r#73
[#112 '.']: r#73
[#112 '/']: r#73
[#112 ':']: r#73
[#112 ';']: r#73
[#112 '<']: r#73
[#112 '<<']: r#73
[#112 '<=']: r#73
[#112 '==']: r#73
[#112 '>']: r#73
[#112 '>=']: r#73
[#112 '>>']: r#73
[#112 '[']: r#73
[#112 ']']: r#73
[#112 '^']: r#73
[#112 '{']: r#73
[#112 '|']: r#73
[#112 '||']: r#73
[#113 '!=']: r#74
[#113 '%']: r#74
[#113 '&&']: r#74
[#113 '&']: r#74
[#113 ')']: r#74
[#113 '*']: r#74
[#113 '+']: r#74
[#113 ',']: r#74
[#113 '-']: r#74
[#113 '.']: r#74
[#113 '/']: r#74
[#113 ':']: r#74
[#113 ';']: r#74
[#113 '<']: r#74
[#113 '<<']: r#74
[#113 '<=']: r#74
[#113 '==']: r#74
[#113 '>']: r#74
[#113 '>=']: r#74
[#113 '>>']: r#74
[#113 '[']: r#74
[#113 ']']: r#74
[#113 '^']: r#74
[#113 '{']: r#74
[#113 '|']: r#74
[#113 '||']: r#74
[#114 '!=']: r#75
[#114 '%']: r#75
[#114 '&&']: r#75
[#114 '&']: r#75
[#114 ')']: r#75
[#114 '*']: r#75
[#114 '+']: r#75
[#114 ',']: r#75
[#114 '-']: r#75
[#114 '.']: r#75
[#114 '/']: r#75
[#114 ':']: r#75
[#114 ';']: r#75
[#114 '<']: r#75
[#114 '<<']: r#75
[#114 '<=']: r#75
[#114 '==']: r#75
[#114 '>']: r#75
[#114 '>=']: r#75
[#114 '>>']: r#75
[#114 '[']: r#75
[#114 ']']: r#75
[#114 '^']: r#75
[#114 '{']: r#75
[#114 '|']: r#75
[#114 '||']: r#75
[#115 '!=']: r#76
[#115 '%']: r#76
[#115 '&&']: r#76
[#115 '&']: r#76
[#115 ')']: r#76
[#115 '*']: r#76
[#115 '+']: r#76
[#115 ',']: r#76
[#115 '-']: r#76
[#115 '.']: r#76
[#115 '/']: r#76
[#115 ':']: r#76
[#115 ';']: r#76
[#115 '<']: r#76
[#115 '<<']: r#76
[#115 '<=']: r#76
[#115 '==']: r#76
[#115 '>']: r#76
[#115 '>=']: r#76
[#115 '>>']: r#76
[#115 '[']: r#76
[#115 ']']: r#76
[#115 '^']: r#76
[#115 '{']: r#76
[#115 '|']: r#76
[#115 '||']: r#76
[#116 '!']: r#77
[#116 '&']: r#77
[#116 '(']: r#77
[#116 ')']: r#77
[#116 '*']: r#77
[#116 '-']: r#77
[#116 ';']: r#77
[#116 '@']: r#77
[#116 '_']: r#77
[#116 'array']: r#77
[#116 'atomic']: r#77
[#116 'bitcast']: r#77
[#116 'bool']: r#77
[#116 'const']: r#77
[#116 'f16']: r#77
[#116 'f32']: r#77
[#116 'false']: r#77
[#116 'i32']: r#77
[#116 'let']: r#77
[#116 'mat2x2']: r#77
[#116 'mat2x3']: r#77
[#116 'mat2x4']: r#77
[#116 'mat3x2']: r#77
[#116 'mat3x3']: r#77
[#116 'mat3x4']: r#77
[#116 'mat4x2']: r#77
[#116 'mat4x3']: r#77
[#116 'mat4x4']: r#77
[#116 'ptr']: r#77
[#116 'sampler']: r#77
[#116 'sampler_comparison']: r#77
[#116 'texture_1d']: r#77
[#116 'texture_2d']: r#77
[#116 'texture_2d_array']: r#77
[#116 'texture_3d']: r#77
[#116 'texture_cube']: r#77
[#116 'texture_cube_array']: r#77
[#116 'texture_depth_2d']: r#77
[#116 'texture_depth_2d_array']: r#77
[#116 'texture_depth_cube']: r#77
[#116 'texture_depth_cube_array']: r#77
[#116 'texture_depth_multisampled_2d']: r#77
[#116 'texture_multisampled_2d']: r#77
[#116 'texture_storage_1d']: r#77
[#116 'texture_storage_2d']: r#77
[#116 'texture_storage_2d_array']: r#77
[#116 'texture_storage_3d']: r#77
[#116 'true']: r#77
[#116 'u32']: r#77
[#116 'var']: r#77
[#116 'vec2']: r#77
[#116 'vec3']: r#77
[#116 'vec4']: r#77
[#116 '~']: r#77
[#116 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#77
[#117 '(']: r#78
[#117 ')']: r#78
[#117 ',']: r#78
[#117 ';']: r#78
[#117 '=']: r#78
[#117 '>']: r#78
[#117 '{']: r#78
[#117 '}']: r#78
[#118 '(']: r#79
[#118 ')']: r#79
[#118 ',']: r#79
[#118 ';']: r#79
[#118 '=']: r#79
[#118 '>']: r#79
[#118 '{']: r#79
[#118 '}']: r#79
[#119 '(']: r#80
[#119 ')']: r#80
[#119 ',']: r#80
[#119 ';']: r#80
[#119 '=']: r#80
[#119 '>']: r#80
[#119 '{']: r#80
[#119 '}']: r#80
[#120 '(']: r#81
[#120 ')']: r#81
[#120 ',']: r#81
[#120 ';']: r#81
[#120 '=']: r#81
[#120 '>']: r#81
[#120 '{']: r#81
[#120 '}']: r#81
[#121 '<']: r#82
[#122 '(']: r#83
[#122 ')']: r#83
[#122 ',']: r#83
[#122 ';']: r#83
[#122 '=']: r#83
[#122 '>']: r#83
[#122 '{']: r#83
[#122 '}']: r#83
[#123 '(']: r#84
[#123 ')']: r#84
[#123 ',']: r#84
[#123 ';']: r#84
[#123 '=']: r#84
[#123 '>']: r#84
[#123 '{']: r#84
[#123 '}']: r#84
[#124 '<']: s#172
[#125 '<']: s#172
[#126 '<']: s#172
[#127 '!=']: r#85
[#127 '%']: r#85
[#127 '&&']: r#85
[#127 '&']: r#85
[#127 ')']: r#85
[#127 '*']: r#85
[#127 '+']: r#85
[#127 ',']: r#85
[#127 '-']: r#85
[#127 '.']: r#85
[#127 '/']: r#85
[#127 ':']: r#85
[#127 ';']: r#85
[#127 '<']: r#85
[#127 '<<']: r#85
[#127 '<=']: r#85
[#127 '==']: r#85
[#127 '>']: r#85
[#127 '>=']: r#85
[#127 '>>']: r#85
[#127 '[']: r#85
[#127 ']']: r#85
[#127 '^']: r#85
[#127 '{']: r#85
[#127 '|']: r#85
[#127 '||']: r#85
[#128 '!=']: r#86
[#128 '%']: r#86
[#128 '&&']: r#86
[#128 '&']: r#86
[#128 ')']: r#86
[#128 '*']: r#86
[#128 '+']: r#86
[#128 ',']: r#86
[#128 '-']: r#86
[#128 '.']: r#86
[#128 '/']: r#86
[#128 ':']: r#86
[#128 ';']: r#86
[#128 '<']: r#86
[#128 '<<']: r#86
[#128 '<=']: r#86
[#128 '==']: r#86
[#128 '>']: r#86
[#128 '>=']: r#86
[#128 '>>']: r#86
[#128 '[']: r#86
[#128 ']']: r#86
[#128 '^']: r#86
[#128 '{']: r#86
[#128 '|']: r#86
[#128 '||']: r#86
[#129 '!=']: r#87
[#129 '%']: r#87
[#129 '&&']: r#87
[#129 '&']: r#87
[#129 ')']: r#87
[#129 '*']: r#87
[#129 '+']: r#87
[#129 ',']: r#87
[#129 '-']: r#87
[#129 '.']: r#87
[#129 '/']: r#87
[#129 ':']: r#87
[#129 ';']: r#87
[#129 '<']: r#87
[#129 '<<']: r#87
[#129 '<=']: r#87
[#129 '==']: r#87
[#129 '>']: r#87
[#129 '>=']: r#87
[#129 '>>']: r#87
[#129 '[']: r#87
[#129 ']']: r#87
[#129 '^']: r#87
[#129 '{']: r#87
[#129 '|']: r#87
[#129 '||']: r#87
[#130 '!=']: r#88
[#130 '%']: r#88
[#130 '&&']: r#88
[#130 '&']: r#88
[#130 ')']: r#88
[#130 '*']: r#88
[#130 '+']: r#88
[#130 ',']: r#88
[#130 '-']: r#88
[#130 '.']: r#88
[#130 '/']: r#88
[#130 ':']: r#88
[#130 ';']: r#88
[#130 '<']: r#88
[#130 '<<']: r#88
[#130 '<=']: r#88
[#130 '==']: r#88
[#130 '>']: r#88
[#130 '>=']: r#88
[#130 '>>']: r#88
[#130 '[']: r#88
[#130 ']']: r#88
[#130 '^']: r#88
[#130 '{']: r#88
[#130 '|']: r#88
[#130 '||']: r#88
[#131 '!=']: r#89
[#131 '%']: r#89
[#131 '&&']: r#89
[#131 '&']: r#89
[#131 ')']: r#89
[#131 '*']: r#89
[#131 '+']: r#89
[#131 ',']: r#89
[#131 '-']: r#89
[#131 '.']: r#89
[#131 '/']: r#89
[#131 ':']: r#89
[#131 ';']: r#89
[#131 '<']: r#89
[#131 '<<']: r#89
[#131 '<=']: r#89
[#131 '==']: r#89
[#131 '>']: r#89
[#131 '>=']: r#89
[#131 '>>']: r#89
[#131 '[']: r#89
[#131 ']']: r#89
[#131 '^']: r#89
[#131 '{']: r#89
[#131 '|']: r#89
[#131 '||']: r#89
[#132 '!=']: r#90
[#132 '%']: r#90
[#132 '&&']: r#90
[#132 '&']: r#90
[#132 ')']: r#90
[#132 '*']: r#90
[#132 '+']: r#90
[#132 ',']: r#90
[#132 '-']: r#90
[#132 '.']: r#90
[#132 '/']: r#90
[#132 ':']: r#90
[#132 ';']: r#90
[#132 '<']: r#90
[#132 '<<']: r#90
[#132 '<=']: r#90
[#132 '==']: r#90
[#132 '>']: r#90
[#132 '>=']: r#90
[#132 '>>']: r#90
[#132 '[']: r#90
[#132 ']']: r#90
[#132 '^']: r#90
[#132 '{']: r#90
[#132 '|']: r#90
[#132 '||']: r#90
[#133 '!=']: r#91
[#133 '%']: r#91
[#133 '&&']: r#91
[#133 '&']: r#91
[#133 ')']: r#91
[#133 '*']: r#91
[#133 '+']: r#91
[#133 ',']: r#91
[#133 '-']: r#91
[#133 '.']: r#91
[#133 '/']: r#91
[#133 ':']: r#91
[#133 ';']: r#91
[#133 '<']: r#91
[#133 '<<']: r#91
[#133 '<=']: r#91
[#133 '==']: r#91
[#133 '>']: r#91
[#133 '>=']: r#91
[#133 '>>']: r#91
[#133 '[']: r#91
[#133 ']']: r#91
[#133 '^']: r#91
[#133 '{']: r#91
[#133 '|']: r#91
[#133 '||']: r#91
[#134 '!=']: r#92
[#134 '%']: r#92
[#134 '&&']: r#92
[#134 '&']: r#92
[#134 ')']: r#92
[#134 '*']: r#92
[#134 '+']: r#92
[#134 ',']: r#92
[#134 '-']: r#92
[#134 '.']: r#92
[#134 '/']: r#92
[#134 ':']: r#92
[#134 ';']: r#92
[#134 '<']: r#92
[#134 '<<']: r#92
[#134 '<=']: r#92
[#134 '==']: r#92
[#134 '>']: r#92
[#134 '>=']: r#92
[#134 '>>']: r#92
[#134 '[']: r#92
[#134 ']']: r#92
[#134 '^']: r#92
[#134 '{']: r#92
[#134 '|']: r#92
[#134 '||']: r#92
[#135 '(']: r#93
[#135 ')']: r#93
[#135 ',']: r#93
[#135 ';']: r#93
[#135 '=']: r#93
[#135 '>']: r#93
[#135 '{']: r#93
[#135 '}']: r#93
[#136 '(']: r#94
[#136 ')']: r#94
[#136 ',']: r#94
[#136 ';']: r#94
[#136 '=']: r#94
[#136 '>']: r#94
[#136 '{']: r#94
[#136 '}']: r#94
[#137 '(']: r#95
[#137 ')']: r#95
[#137 ',']: r#95
[#137 ';']: r#95
[#137 '=']: r#95
[#137 '>']: r#95
[#137 '{']: r#95
[#137 '}']: r#95
[#138 '(']: r#96
[#138 ')']: r#96
[#138 ',']: r#96
[#138 ';']: r#96
[#138 '=']: r#96
[#138 '>']: r#96
[#138 '{']: r#96
[#138 '}']: r#96
[#139 '(']: r#97
[#139 ')']: r#97
[#139 ',']: r#97
[#139 ';']: r#97
[#139 '=']: r#97
[#139 '>']: r#97
[#139 '{']: r#97
[#139 '}']: r#97
[#140 '(']: r#98
[#140 ')']: r#98
[#140 ',']: r#98
[#140 ';']: r#98
[#140 '=']: r#98
[#140 '>']: r#98
[#140 '{']: r#98
[#140 '}']: r#98
[#141 '(']: r#99
[#141 ')']: r#99
[#141 ',']: r#99
[#141 ';']: r#99
[#141 '=']: r#99
[#141 '>']: r#99
[#141 '{']: r#99
[#141 '}']: r#99
[#142 '<']: r#100
[#143 '<']: r#101
[#144 '<']: r#102
[#145 '<']: r#103
[#146 '<']: r#104
[#147 '<']: r#105
[#148 '<']: r#106
[#149 '<']: r#107
[#150 '<']: r#108
[#151 '<']: r#109
[#152 '<']: r#110
[#153 '{']: s#185
[#154 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#155 '{']: s#185
[#156 '=']: s#175
[#157 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#158 '=']: s#175
[#159 ':']: s#177
[#159 '=']: r#111
[#160 '=']: r#112
[#161 '=']: s#175
[#162 '<']: s#172
[#163 ';']: r#113
[#163 '@']: r#113
[#163 'const']: r#113
[#163 'fn']: r#113
[#163 'override']: r#113
[#163 'static_assert']: r#113
[#163 'struct']: r#113
[#163 'type']: r#113
[#163 'var']: r#113
[#163 EndOfText]: r#113
[#164 ';']: r#114
[#164 '@']: r#114
[#164 'const']: r#114
[#164 'fn']: r#114
[#164 'override']: r#114
[#164 'static_assert']: r#114
[#164 'struct']: r#114
[#164 'type']: r#114
[#164 'var']: r#114
[#164 EndOfText]: r#114
[#165 ';']: r#115
[#165 '@']: r#115
[#165 'const']: r#115
[#165 'fn']: r#115
[#165 'override']: r#115
[#165 'static_assert']: r#115
[#165 'struct']: r#115
[#165 'type']: r#115
[#165 'var']: r#115
[#165 EndOfText]: r#115
[#166 ';']: r#116
[#166 '@']: r#116
[#166 'const']: r#116
[#166 'fn']: r#116
[#166 'override']: r#116
[#166 'static_assert']: r#116
[#166 'struct']: r#116
[#166 'type']: r#116
[#166 'var']: r#116
[#166 EndOfText]: r#116
[#167 EndOfText]: r#117
[#168 ';']: r#118
[#168 '@']: r#118
[#168 'const']: r#118
[#168 'enable']: r#118
[#168 'fn']: r#118
[#168 'override']: r#118
[#168 'static_assert']: r#118
[#168 'struct']: r#118
[#168 'type']: r#118
[#168 'var']: r#118
[#168 EndOfText]: r#118
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#170 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#119
[#171 'function']: s#326
[#171 'private']: s#327
[#171 'storage']: s#330
[#171 'uniform']: s#329
[#171 'workgroup']: s#328
[#172 '!']: r#120
[#172 '&']: r#120
[#172 '(']: r#120
[#172 '*']: r#120
[#172 '-']: r#120
[#172 'array']: r#120
[#172 'atomic']: r#120
[#172 'bitcast']: r#120
[#172 'bool']: r#120
[#172 'f16']: r#120
[#172 'f32']: r#120
[#172 'false']: r#120
[#172 'function']: r#120
[#172 'i32']: r#120
[#172 'mat2x2']: r#120
[#172 'mat2x3']: r#120
[#172 'mat2x4']: r#120
[#172 'mat3x2']: r#120
[#172 'mat3x3']: r#120
[#172 'mat3x4']: r#120
[#172 'mat4x2']: r#120
[#172 'mat4x3']: r#120
[#172 'mat4x4']: r#120
[#172 'private']: r#120
[#172 'ptr']: r#120
[#172 'sampler']: r#120
[#172 'sampler_comparison']: r#120
[#172 'storage']: r#120
[#172 'texture_1d']: r#120
[#172 'texture_2d']: r#120
[#172 'texture_2d_array']: r#120
[#172 'texture_3d']: r#120
[#172 'texture_cube']: r#120
[#172 'texture_cube_array']: r#120
[#172 'texture_depth_2d']: r#120
[#172 'texture_depth_2d_array']: r#120
[#172 'texture_depth_cube']: r#120
[#172 'texture_depth_cube_array']: r#120
[#172 'texture_depth_multisampled_2d']: r#120
[#172 'texture_multisampled_2d']: r#120
[#172 'texture_storage_1d']: r#120
[#172 'texture_storage_2d']: r#120
[#172 'texture_storage_2d_array']: r#120
[#172 'texture_storage_3d']: r#120
[#172 'true']: r#120
[#172 'u32']: r#120
[#172 'uniform']: r#120
[#172 'vec2']: r#120
[#172 'vec3']: r#120
[#172 'vec4']: r#120
[#172 'workgroup']: r#120
[#172 '~']: r#120
[#173 ';']: r#121
[#174 '!']: s#70
[#174 '&']: s#73
[#174 '(']: s#116
[#174 '*']: s#72
[#174 '-']: s#69
[#174 'array']: s#83
[#174 'atomic']: s#95
[#174 'bitcast']: s#78
[#174 'bool']: s#88
[#174 'f16']: s#118
[#174 'f32']: s#117
[#174 'false']: s#115
[#174 'i32']: s#119
[#174 'mat2x2']: s#100
[#174 'mat2x3']: s#101
[#174 'mat2x4']: s#102
[#174 'mat3x2']: s#103
[#174 'mat3x3']: s#104
[#174 'mat3x4']: s#105
[#174 'mat4x2']: s#106
[#174 'mat4x3']: s#107
[#174 'mat4x4']: s#108
[#174 'ptr']: s#121
[#174 'sampler']: s#135
[#174 'sampler_comparison']: s#136
[#174 'texture_1d']: s#142
[#174 'texture_2d']: s#143
[#174 'texture_2d_array']: s#144
[#174 'texture_3d']: s#145
[#174 'texture_cube']: s#146
[#174 'texture_cube_array']: s#147
[#174 'texture_depth_2d']: s#137
[#174 'texture_depth_2d_array']: s#138
[#174 'texture_depth_cube']: s#139
[#174 'texture_depth_cube_array']: s#140
[#174 'texture_depth_multisampled_2d']: s#141
[#174 'texture_multisampled_2d']: s#148
[#174 'texture_storage_1d']: s#149
[#174 'texture_storage_2d']: s#150
[#174 'texture_storage_2d_array']: s#151
[#174 'texture_storage_3d']: s#152
[#174 'true']: s#114
[#174 'u32']: s#120
[#174 'vec2']: s#97
[#174 'vec3']: s#98
[#174 'vec4']: s#99
[#174 '~']: s#71
[#174 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#174 /0[fh]/]: s#130
[#174 /0[iu]?/]: s#110
[#174 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#174 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#174 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#174 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#174 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#174 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#174 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#174 /[1-9][0-9]*[fh]/]: s#131
[#174 /[1-9][0-9]*[iu]?/]: s#111
[#175 '!']: r#122
[#175 '&']: r#122
[#175 '(']: r#122
[#175 '*']: r#122
[#175 '-']: r#122
[#175 'array']: r#122
[#175 'atomic']: r#122
[#175 'bitcast']: r#122
[#175 'bool']: r#122
[#175 'f16']: r#122
[#175 'f32']: r#122
[#175 'false']: r#122
[#175 'i32']: r#122
[#175 'mat2x2']: r#122
[#175 'mat2x3']: r#122
[#175 'mat2x4']: r#122
[#175 'mat3x2']: r#122
[#175 'mat3x3']: r#122
[#175 'mat3x4']: r#122
[#175 'mat4x2']: r#122
[#175 'mat4x3']: r#122
[#175 'mat4x4']: r#122
[#175 'ptr']: r#122
[#175 'sampler']: r#122
[#175 'sampler_comparison']: r#122
[#175 'texture_1d']: r#122
[#175 'texture_2d']: r#122
[#175 'texture_2d_array']: r#122
[#175 'texture_3d']: r#122
[#175 'texture_cube']: r#122
[#175 'texture_cube_array']: r#122
[#175 'texture_depth_2d']: r#122
[#175 'texture_depth_2d_array']: r#122
[#175 'texture_depth_cube']: r#122
[#175 'texture_depth_cube_array']: r#122
[#175 'texture_depth_multisampled_2d']: r#122
[#175 'texture_multisampled_2d']: r#122
[#175 'texture_storage_1d']: r#122
[#175 'texture_storage_2d']: r#122
[#175 'texture_storage_2d_array']: r#122
[#175 'texture_storage_3d']: r#122
[#175 'true']: r#122
[#175 'u32']: r#122
[#175 'vec2']: r#122
[#175 'vec3']: r#122
[#175 'vec4']: r#122
[#175 '~']: r#122
[#176 'array']: s#319
[#176 'atomic']: s#95
[#176 'bool']: s#88
[#176 'f16']: s#118
[#176 'f32']: s#117
[#176 'i32']: s#119
[#176 'mat2x2']: s#100
[#176 'mat2x3']: s#101
[#176 'mat2x4']: s#102
[#176 'mat3x2']: s#103
[#176 'mat3x3']: s#104
[#176 'mat3x4']: s#105
[#176 'mat4x2']: s#106
[#176 'mat4x3']: s#107
[#176 'mat4x4']: s#108
[#176 'ptr']: s#121
[#176 'sampler']: s#135
[#176 'sampler_comparison']: s#136
[#176 'texture_1d']: s#142
[#176 'texture_2d']: s#143
[#176 'texture_2d_array']: s#144
[#176 'texture_3d']: s#145
[#176 'texture_cube']: s#146
[#176 'texture_cube_array']: s#147
[#176 'texture_depth_2d']: s#137
[#176 'texture_depth_2d_array']: s#138
[#176 'texture_depth_cube']: s#139
[#176 'texture_depth_cube_array']: s#140
[#176 'texture_depth_multisampled_2d']: s#141
[#176 'texture_multisampled_2d']: s#148
[#176 'texture_storage_1d']: s#149
[#176 'texture_storage_2d']: s#150
[#176 'texture_storage_2d_array']: s#151
[#176 'texture_storage_3d']: s#152
[#176 'u32']: s#120
[#176 'vec2']: s#97
[#176 'vec3']: s#98
[#176 'vec4']: s#99
[#176 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#177 'array']: r#123
[#177 'atomic']: r#123
[#177 'bool']: r#123
[#177 'f16']: r#123
[#177 'f32']: r#123
[#177 'i32']: r#123
[#177 'mat2x2']: r#123
[#177 'mat2x3']: r#123
[#177 'mat2x4']: r#123
[#177 'mat3x2']: r#123
[#177 'mat3x3']: r#123
[#177 'mat3x4']: r#123
[#177 'mat4x2']: r#123
[#177 'mat4x3']: r#123
[#177 'mat4x4']: r#123
[#177 'ptr']: r#123
[#177 'sampler']: r#123
[#177 'sampler_comparison']: r#123
[#177 'texture_1d']: r#123
[#177 'texture_2d']: r#123
[#177 'texture_2d_array']: r#123
[#177 'texture_3d']: r#123
[#177 'texture_cube']: r#123
[#177 'texture_cube_array']: r#123
[#177 'texture_depth_2d']: r#123
[#177 'texture_depth_2d_array']: r#123
[#177 'texture_depth_cube']: r#123
[#177 'texture_depth_cube_array']: r#123
[#177 'texture_depth_multisampled_2d']: r#123
[#177 'texture_multisampled_2d']: r#123
[#177 'texture_storage_1d']: r#123
[#177 'texture_storage_2d']: r#123
[#177 'texture_storage_2d_array']: r#123
[#177 'texture_storage_3d']: r#123
[#177 'u32']: r#123
[#177 'vec2']: r#123
[#177 'vec3']: r#123
[#177 'vec4']: r#123
[#177 '{']: r#123
[#178 '!']: s#70
[#178 '&']: s#73
[#178 '(']: s#116
[#178 '*']: s#72
[#178 '-']: s#69
[#178 'array']: s#83
[#178 'atomic']: s#95
[#178 'bitcast']: s#78
[#178 'bool']: s#88
[#178 'f16']: s#118
[#178 'f32']: s#117
[#178 'false']: s#115
[#178 'i32']: s#119
[#178 'mat2x2']: s#100
[#178 'mat2x3']: s#101
[#178 'mat2x4']: s#102
[#178 'mat3x2']: s#103
[#178 'mat3x3']: s#104
[#178 'mat3x4']: s#105
[#178 'mat4x2']: s#106
[#178 'mat4x3']: s#107
[#178 'mat4x4']: s#108
[#178 'ptr']: s#121
[#178 'sampler']: s#135
[#178 'sampler_comparison']: s#136
[#178 'texture_1d']: s#142
[#178 'texture_2d']: s#143
[#178 'texture_2d_array']: s#144
[#178 'texture_3d']: s#145
[#178 'texture_cube']: s#146
[#178 'texture_cube_array']: s#147
[#178 'texture_depth_2d']: s#137
[#178 'texture_depth_2d_array']: s#138
[#178 'texture_depth_cube']: s#139
[#178 'texture_depth_cube_array']: s#140
[#178 'texture_depth_multisampled_2d']: s#141
[#178 'texture_multisampled_2d']: s#148
[#178 'texture_storage_1d']: s#149
[#178 'texture_storage_2d']: s#150
[#178 'texture_storage_2d_array']: s#151
[#178 'texture_storage_3d']: s#152
[#178 'true']: s#114
[#178 'u32']: s#120
[#178 'vec2']: s#97
[#178 'vec3']: s#98
[#178 'vec4']: s#99
[#178 '~']: s#71
[#178 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#178 /0[fh]/]: s#130
[#178 /0[iu]?/]: s#110
[#178 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#178 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#178 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#178 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#178 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#178 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#178 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#178 /[1-9][0-9]*[fh]/]: s#131
[#178 /[1-9][0-9]*[iu]?/]: s#111
[#179 '=']: s#175
[#180 ':']: s#177
[#180 ';']: r#124
[#180 '=']: r#124
[#181 ';']: r#125
[#181 '=']: r#125
[#182 'array']: s#319
[#182 'atomic']: s#95
[#182 'bool']: s#88
[#182 'f16']: s#118
[#182 'f32']: s#117
[#182 'i32']: s#119
[#182 'mat2x2']: s#100
[#182 'mat2x3']: s#101
[#182 'mat2x4']: s#102
[#182 'mat3x2']: s#103
[#182 'mat3x3']: s#104
[#182 'mat3x4']: s#105
[#182 'mat4x2']: s#106
[#182 'mat4x3']: s#107
[#182 'mat4x4']: s#108
[#182 'ptr']: s#121
[#182 'sampler']: s#135
[#182 'sampler_comparison']: s#136
[#182 'texture_1d']: s#142
[#182 'texture_2d']: s#143
[#182 'texture_2d_array']: s#144
[#182 'texture_3d']: s#145
[#182 'texture_cube']: s#146
[#182 'texture_cube_array']: s#147
[#182 'texture_depth_2d']: s#137
[#182 'texture_depth_2d_array']: s#138
[#182 'texture_depth_cube']: s#139
[#182 'texture_depth_cube_array']: s#140
[#182 'texture_depth_multisampled_2d']: s#141
[#182 'texture_multisampled_2d']: s#148
[#182 'texture_storage_1d']: s#149
[#182 'texture_storage_2d']: s#150
[#182 'texture_storage_2d_array']: s#151
[#182 'texture_storage_3d']: s#152
[#182 'u32']: s#120
[#182 'vec2']: s#97
[#182 'vec3']: s#98
[#182 'vec4']: s#99
[#182 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#183 ';']: r#126
[#183 '@']: r#126
[#183 'const']: r#126
[#183 'fn']: r#126
[#183 'override']: r#126
[#183 'static_assert']: r#126
[#183 'struct']: r#126
[#183 'type']: r#126
[#183 'var']: r#126
[#183 EndOfText]: r#126
[#184 '@']: s#32
[#185 '&']: r#127
[#185 '(']: r#127
[#185 '*']: r#127
[#185 ';']: r#127
[#185 '@']: r#127
[#185 '_']: r#127
[#185 'break']: r#127
[#185 'case']: r#127
[#185 'const']: r#127
[#185 'continue']: r#127
[#185 'continuing']: r#127
[#185 'default']: r#127
[#185 'discard']: r#127
[#185 'fallthrough']: r#127
[#185 'for']: r#127
[#185 'if']: r#127
[#185 'let']: r#127
[#185 'loop']: r#127
[#185 'return']: r#127
[#185 'static_assert']: r#127
[#185 'switch']: r#127
[#185 'var']: r#127
[#185 'while']: r#127
[#185 '{']: r#127
[#185 '}']: r#127
[#185 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#127
[#186 '(']: s#116
[#187 ';']: r#128
[#187 '@']: r#128
[#187 'const']: r#128
[#187 'fn']: r#128
[#187 'override']: r#128
[#187 'static_assert']: r#128
[#187 'struct']: r#128
[#187 'type']: r#128
[#187 'var']: r#128
[#187 EndOfText]: r#128
[#188 '&']: s#73
[#188 '*']: s#72
[#188 ';']: s#19
[#188 '_']: s#387
[#188 'break']: s#381
[#188 'const']: s#380
[#188 'continue']: s#382
[#188 'discard']: s#365
[#188 'for']: s#375
[#188 'if']: s#385
[#188 'let']: s#379
[#188 'loop']: s#374
[#188 'return']: s#371
[#188 'static_assert']: s#26
[#188 'switch']: s#373
[#188 'var']: s#162
[#188 'while']: s#376
[#188 '{']: s#185
[#188 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#189 'r32float']: s#344
[#189 'r32sint']: s#343
[#189 'r32uint']: s#342
[#189 'rg32float']: s#347
[#189 'rg32sint']: s#346
[#189 'rg32uint']: s#345
[#189 'rgba16float']: s#341
[#189 'rgba16sint']: s#340
[#189 'rgba16uint']: s#339
[#189 'rgba32float']: s#350
[#189 'rgba32sint']: s#349
[#189 'rgba32uint']: s#348
[#189 'rgba8sint']: s#338
[#189 'rgba8snorm']: s#336
[#189 'rgba8uint']: s#337
[#189 'rgba8unorm']: s#335
[#190 'array']: s#319
[#190 'atomic']: s#95
[#190 'bool']: s#88
[#190 'f16']: s#118
[#190 'f32']: s#117
[#190 'i32']: s#119
[#190 'mat2x2']: s#100
[#190 'mat2x3']: s#101
[#190 'mat2x4']: s#102
[#190 'mat3x2']: s#103
[#190 'mat3x3']: s#104
[#190 'mat3x4']: s#105
[#190 'mat4x2']: s#106
[#190 'mat4x3']: s#107
[#190 'mat4x4']: s#108
[#190 'ptr']: s#121
[#190 'sampler']: s#135
[#190 'sampler_comparison']: s#136
[#190 'texture_1d']: s#142
[#190 'texture_2d']: s#143
[#190 'texture_2d_array']: s#144
[#190 'texture_3d']: s#145
[#190 'texture_cube']: s#146
[#190 'texture_cube_array']: s#147
[#190 'texture_depth_2d']: s#137
[#190 'texture_depth_2d_array']: s#138
[#190 'texture_depth_cube']: s#139
[#190 'texture_depth_cube_array']: s#140
[#190 'texture_depth_multisampled_2d']: s#141
[#190 'texture_multisampled_2d']: s#148
[#190 'texture_storage_1d']: s#149
[#190 'texture_storage_2d']: s#150
[#190 'texture_storage_2d_array']: s#151
[#190 'texture_storage_3d']: s#152
[#190 'u32']: s#120
[#190 'vec2']: s#97
[#190 'vec3']: s#98
[#190 'vec4']: s#99
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#191 'array']: s#319
[#191 'atomic']: s#95
[#191 'bool']: s#88
[#191 'f16']: s#118
[#191 'f32']: s#117
[#191 'i32']: s#119
[#191 'mat2x2']: s#100
[#191 'mat2x3']: s#101
[#191 'mat2x4']: s#102
[#191 'mat3x2']: s#103
[#191 'mat3x3']: s#104
[#191 'mat3x4']: s#105
[#191 'mat4x2']: s#106
[#191 'mat4x3']: s#107
[#191 'mat4x4']: s#108
[#191 'ptr']: s#121
[#191 'sampler']: s#135
[#191 'sampler_comparison']: s#136
[#191 'texture_1d']: s#142
[#191 'texture_2d']: s#143
[#191 'texture_2d_array']: s#144
[#191 'texture_3d']: s#145
[#191 'texture_cube']: s#146
[#191 'texture_cube_array']: s#147
[#191 'texture_depth_2d']: s#137
[#191 'texture_depth_2d_array']: s#138
[#191 'texture_depth_cube']: s#139
[#191 'texture_depth_cube_array']: s#140
[#191 'texture_depth_multisampled_2d']: s#141
[#191 'texture_multisampled_2d']: s#148
[#191 'texture_storage_1d']: s#149
[#191 'texture_storage_2d']: s#150
[#191 'texture_storage_2d_array']: s#151
[#191 'texture_storage_3d']: s#152
[#191 'u32']: s#120
[#191 'vec2']: s#97
[#191 'vec3']: s#98
[#191 'vec4']: s#99
[#191 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#192 'array']: s#319
[#192 'atomic']: s#95
[#192 'bool']: s#88
[#192 'f16']: s#118
[#192 'f32']: s#117
[#192 'i32']: s#119
[#192 'mat2x2']: s#100
[#192 'mat2x3']: s#101
[#192 'mat2x4']: s#102
[#192 'mat3x2']: s#103
[#192 'mat3x3']: s#104
[#192 'mat3x4']: s#105
[#192 'mat4x2']: s#106
[#192 'mat4x3']: s#107
[#192 'mat4x4']: s#108
[#192 'ptr']: s#121
[#192 'sampler']: s#135
[#192 'sampler_comparison']: s#136
[#192 'texture_1d']: s#142
[#192 'texture_2d']: s#143
[#192 'texture_2d_array']: s#144
[#192 'texture_3d']: s#145
[#192 'texture_cube']: s#146
[#192 'texture_cube_array']: s#147
[#192 'texture_depth_2d']: s#137
[#192 'texture_depth_2d_array']: s#138
[#192 'texture_depth_cube']: s#139
[#192 'texture_depth_cube_array']: s#140
[#192 'texture_depth_multisampled_2d']: s#141
[#192 'texture_multisampled_2d']: s#148
[#192 'texture_storage_1d']: s#149
[#192 'texture_storage_2d']: s#150
[#192 'texture_storage_2d_array']: s#151
[#192 'texture_storage_3d']: s#152
[#192 'u32']: s#120
[#192 'vec2']: s#97
[#192 'vec3']: s#98
[#192 'vec4']: s#99
[#192 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#193 'function']: s#326
[#193 'private']: s#327
[#193 'storage']: s#330
[#193 'uniform']: s#329
[#193 'workgroup']: s#328
[#194 ')']: s#324
[#195 'array']: s#319
[#195 'atomic']: s#95
[#195 'bool']: s#88
[#195 'f16']: s#118
[#195 'f32']: s#117
[#195 'i32']: s#119
[#195 'mat2x2']: s#100
[#195 'mat2x3']: s#101
[#195 'mat2x4']: s#102
[#195 'mat3x2']: s#103
[#195 'mat3x3']: s#104
[#195 'mat3x4']: s#105
[#195 'mat4x2']: s#106
[#195 'mat4x3']: s#107
[#195 'mat4x4']: s#108
[#195 'ptr']: s#121
[#195 'sampler']: s#135
[#195 'sampler_comparison']: s#136
[#195 'texture_1d']: s#142
[#195 'texture_2d']: s#143
[#195 'texture_2d_array']: s#144
[#195 'texture_3d']: s#145
[#195 'texture_cube']: s#146
[#195 'texture_cube_array']: s#147
[#195 'texture_depth_2d']: s#137
[#195 'texture_depth_2d_array']: s#138
[#195 'texture_depth_cube']: s#139
[#195 'texture_depth_cube_array']: s#140
[#195 'texture_depth_multisampled_2d']: s#141
[#195 'texture_multisampled_2d']: s#148
[#195 'texture_storage_1d']: s#149
[#195 'texture_storage_2d']: s#150
[#195 'texture_storage_2d_array']: s#151
[#195 'texture_storage_3d']: s#152
[#195 'u32']: s#120
[#195 'vec2']: s#97
[#195 'vec3']: s#98
[#195 'vec4']: s#99
[#195 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#196 'array']: s#319
[#196 'atomic']: s#95
[#196 'bool']: s#88
[#196 'f16']: s#118
[#196 'f32']: s#117
[#196 'i32']: s#119
[#196 'mat2x2']: s#100
[#196 'mat2x3']: s#101
[#196 'mat2x4']: s#102
[#196 'mat3x2']: s#103
[#196 'mat3x3']: s#104
[#196 'mat3x4']: s#105
[#196 'mat4x2']: s#106
[#196 'mat4x3']: s#107
[#196 'mat4x4']: s#108
[#196 'ptr']: s#121
[#196 'sampler']: s#135
[#196 'sampler_comparison']: s#136
[#196 'texture_1d']: s#142
[#196 'texture_2d']: s#143
[#196 'texture_2d_array']: s#144
[#196 'texture_3d']: s#145
[#196 'texture_cube']: s#146
[#196 'texture_cube_array']: s#147
[#196 'texture_depth_2d']: s#137
[#196 'texture_depth_2d_array']: s#138
[#196 'texture_depth_cube']: s#139
[#196 'texture_depth_cube_array']: s#140
[#196 'texture_depth_multisampled_2d']: s#141
[#196 'texture_multisampled_2d']: s#148
[#196 'texture_storage_1d']: s#149
[#196 'texture_storage_2d']: s#150
[#196 'texture_storage_2d_array']: s#151
[#196 'texture_storage_3d']: s#152
[#196 'u32']: s#120
[#196 'vec2']: s#97
[#196 'vec3']: s#98
[#196 'vec4']: s#99
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#197 'array']: s#319
[#197 'atomic']: s#95
[#197 'bool']: s#88
[#197 'f16']: s#118
[#197 'f32']: s#117
[#197 'i32']: s#119
[#197 'mat2x2']: s#100
[#197 'mat2x3']: s#101
[#197 'mat2x4']: s#102
[#197 'mat3x2']: s#103
[#197 'mat3x3']: s#104
[#197 'mat3x4']: s#105
[#197 'mat4x2']: s#106
[#197 'mat4x3']: s#107
[#197 'mat4x4']: s#108
[#197 'ptr']: s#121
[#197 'sampler']: s#135
[#197 'sampler_comparison']: s#136
[#197 'texture_1d']: s#142
[#197 'texture_2d']: s#143
[#197 'texture_2d_array']: s#144
[#197 'texture_3d']: s#145
[#197 'texture_cube']: s#146
[#197 'texture_cube_array']: s#147
[#197 'texture_depth_2d']: s#137
[#197 'texture_depth_2d_array']: s#138
[#197 'texture_depth_cube']: s#139
[#197 'texture_depth_cube_array']: s#140
[#197 'texture_depth_multisampled_2d']: s#141
[#197 'texture_multisampled_2d']: s#148
[#197 'texture_storage_1d']: s#149
[#197 'texture_storage_2d']: s#150
[#197 'texture_storage_2d_array']: s#151
[#197 'texture_storage_3d']: s#152
[#197 'u32']: s#120
[#197 'vec2']: s#97
[#197 'vec3']: s#98
[#197 'vec4']: s#99
[#197 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#198 'array']: s#319
[#198 'atomic']: s#95
[#198 'bool']: s#88
[#198 'f16']: s#118
[#198 'f32']: s#117
[#198 'i32']: s#119
[#198 'mat2x2']: s#100
[#198 'mat2x3']: s#101
[#198 'mat2x4']: s#102
[#198 'mat3x2']: s#103
[#198 'mat3x3']: s#104
[#198 'mat3x4']: s#105
[#198 'mat4x2']: s#106
[#198 'mat4x3']: s#107
[#198 'mat4x4']: s#108
[#198 'ptr']: s#121
[#198 'sampler']: s#135
[#198 'sampler_comparison']: s#136
[#198 'texture_1d']: s#142
[#198 'texture_2d']: s#143
[#198 'texture_2d_array']: s#144
[#198 'texture_3d']: s#145
[#198 'texture_cube']: s#146
[#198 'texture_cube_array']: s#147
[#198 'texture_depth_2d']: s#137
[#198 'texture_depth_2d_array']: s#138
[#198 'texture_depth_cube']: s#139
[#198 'texture_depth_cube_array']: s#140
[#198 'texture_depth_multisampled_2d']: s#141
[#198 'texture_multisampled_2d']: s#148
[#198 'texture_storage_1d']: s#149
[#198 'texture_storage_2d']: s#150
[#198 'texture_storage_2d_array']: s#151
[#198 'texture_storage_3d']: s#152
[#198 'u32']: s#120
[#198 'vec2']: s#97
[#198 'vec3']: s#98
[#198 'vec4']: s#99
[#198 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#199 '!=']: r#129
[#199 '%']: r#129
[#199 '&&']: r#129
[#199 '&']: r#129
[#199 ')']: r#129
[#199 '*']: r#129
[#199 '+']: r#129
[#199 ',']: r#129
[#199 '-']: r#129
[#199 '.']: r#129
[#199 '/']: r#129
[#199 ':']: r#129
[#199 ';']: r#129
[#199 '<']: r#129
[#199 '<<']: r#129
[#199 '<=']: r#129
[#199 '==']: r#129
[#199 '>']: r#129
[#199 '>=']: r#129
[#199 '>>']: r#129
[#199 '[']: r#129
[#199 ']']: r#129
[#199 '^']: r#129
[#199 '{']: r#129
[#199 '|']: r#129
[#199 '||']: r#129
[#200 '!']: s#70
[#200 '&']: s#73
[#200 '(']: s#116
[#200 '*']: s#72
[#200 '-']: s#69
[#200 'array']: s#83
[#200 'atomic']: s#95
[#200 'bitcast']: s#78
[#200 'bool']: s#88
[#200 'f16']: s#118
[#200 'f32']: s#117
[#200 'false']: s#115
[#200 'i32']: s#119
[#200 'mat2x2']: s#100
[#200 'mat2x3']: s#101
[#200 'mat2x4']: s#102
[#200 'mat3x2']: s#103
[#200 'mat3x3']: s#104
[#200 'mat3x4']: s#105
[#200 'mat4x2']: s#106
[#200 'mat4x3']: s#107
[#200 'mat4x4']: s#108
[#200 'ptr']: s#121
[#200 'sampler']: s#135
[#200 'sampler_comparison']: s#136
[#200 'texture_1d']: s#142
[#200 'texture_2d']: s#143
[#200 'texture_2d_array']: s#144
[#200 'texture_3d']: s#145
[#200 'texture_cube']: s#146
[#200 'texture_cube_array']: s#147
[#200 'texture_depth_2d']: s#137
[#200 'texture_depth_2d_array']: s#138
[#200 'texture_depth_cube']: s#139
[#200 'texture_depth_cube_array']: s#140
[#200 'texture_depth_multisampled_2d']: s#141
[#200 'texture_multisampled_2d']: s#148
[#200 'texture_storage_1d']: s#149
[#200 'texture_storage_2d']: s#150
[#200 'texture_storage_2d_array']: s#151
[#200 'texture_storage_3d']: s#152
[#200 'true']: s#114
[#200 'u32']: s#120
[#200 'vec2']: s#97
[#200 'vec3']: s#98
[#200 'vec4']: s#99
[#200 '~']: s#71
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#200 /0[fh]/]: s#130
[#200 /0[iu]?/]: s#110
[#200 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#200 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#200 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#200 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#200 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#200 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#200 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#200 /[1-9][0-9]*[fh]/]: s#131
[#200 /[1-9][0-9]*[iu]?/]: s#111
[#201 '!=']: r#130
[#201 '%']: r#130
[#201 '&&']: r#130
[#201 '&']: r#130
[#201 ')']: r#130
[#201 '*']: r#130
[#201 '+']: r#130
[#201 ',']: r#130
[#201 '-']: r#130
[#201 '/']: r#130
[#201 ':']: r#130
[#201 ';']: r#130
[#201 '<']: r#130
[#201 '<<']: r#130
[#201 '<=']: r#130
[#201 '==']: r#130
[#201 '>']: r#130
[#201 '>=']: r#130
[#201 '>>']: r#130
[#201 ']']: r#130
[#201 '^']: r#130
[#201 '{']: r#130
[#201 '|']: r#130
[#201 '||']: r#130
[#202 '!=']: r#131
[#202 '%']: r#131
[#202 '&&']: r#131
[#202 '&']: r#131
[#202 ')']: r#131
[#202 '*']: r#131
[#202 '+']: r#131
[#202 ',']: r#131
[#202 '-']: r#131
[#202 '/']: r#131
[#202 ':']: r#131
[#202 ';']: r#131
[#202 '<']: r#131
[#202 '<<']: r#131
[#202 '<=']: r#131
[#202 '==']: r#131
[#202 '>']: r#131
[#202 '>=']: r#131
[#202 '>>']: r#131
[#202 ']']: r#131
[#202 '^']: r#131
[#202 '{']: r#131
[#202 '|']: r#131
[#202 '||']: r#131
[#203 '!']: s#70
[#203 '&']: s#73
[#203 '(']: s#116
[#203 '*']: s#72
[#203 '-']: s#69
[#203 'array']: s#83
[#203 'atomic']: s#95
[#203 'bitcast']: s#78
[#203 'bool']: s#88
[#203 'f16']: s#118
[#203 'f32']: s#117
[#203 'false']: s#115
[#203 'i32']: s#119
[#203 'mat2x2']: s#100
[#203 'mat2x3']: s#101
[#203 'mat2x4']: s#102
[#203 'mat3x2']: s#103
[#203 'mat3x3']: s#104
[#203 'mat3x4']: s#105
[#203 'mat4x2']: s#106
[#203 'mat4x3']: s#107
[#203 'mat4x4']: s#108
[#203 'ptr']: s#121
[#203 'sampler']: s#135
[#203 'sampler_comparison']: s#136
[#203 'texture_1d']: s#142
[#203 'texture_2d']: s#143
[#203 'texture_2d_array']: s#144
[#203 'texture_3d']: s#145
[#203 'texture_cube']: s#146
[#203 'texture_cube_array']: s#147
[#203 'texture_depth_2d']: s#137
[#203 'texture_depth_2d_array']: s#138
[#203 'texture_depth_cube']: s#139
[#203 'texture_depth_cube_array']: s#140
[#203 'texture_depth_multisampled_2d']: s#141
[#203 'texture_multisampled_2d']: s#148
[#203 'texture_storage_1d']: s#149
[#203 'texture_storage_2d']: s#150
[#203 'texture_storage_2d_array']: s#151
[#203 'texture_storage_3d']: s#152
[#203 'true']: s#114
[#203 'u32']: s#120
[#203 'vec2']: s#97
[#203 'vec3']: s#98
[#203 'vec4']: s#99
[#203 '~']: s#71
[#203 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#203 /0[fh]/]: s#130
[#203 /0[iu]?/]: s#110
[#203 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#203 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#203 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#203 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#203 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#203 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#203 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#203 /[1-9][0-9]*[fh]/]: s#131
[#203 /[1-9][0-9]*[iu]?/]: s#111
[#204 '/[rgba]/']: s#300
[#204 '/[rgba][rgba]/']: s#301
[#204 '/[rgba][rgba][rgba]/']: s#302
[#204 '/[rgba][rgba][rgba][rgba]/']: s#303
[#204 '/[xyzw]/']: s#304
[#204 '/[xyzw][xyzw]/']: s#305
[#204 '/[xyzw][xyzw][xyzw]/']: s#306
[#204 '/[xyzw][xyzw][xyzw][xyzw]/']: s#307
[#204 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#299
[#205 '!']: r#132
[#205 '&']: r#132
[#205 '(']: r#132
[#205 '*']: r#132
[#205 '-']: r#132
[#205 'array']: r#132
[#205 'atomic']: r#132
[#205 'bitcast']: r#132
[#205 'bool']: r#132
[#205 'f16']: r#132
[#205 'f32']: r#132
[#205 'false']: r#132
[#205 'i32']: r#132
[#205 'mat2x2']: r#132
[#205 'mat2x3']: r#132
[#205 'mat2x4']: r#132
[#205 'mat3x2']: r#132
[#205 'mat3x3']: r#132
[#205 'mat3x4']: r#132
[#205 'mat4x2']: r#132
[#205 'mat4x3']: r#132
[#205 'mat4x4']: r#132
[#205 'ptr']: r#132
[#205 'sampler']: r#132
[#205 'sampler_comparison']: r#132
[#205 'texture_1d']: r#132
[#205 'texture_2d']: r#132
[#205 'texture_2d_array']: r#132
[#205 'texture_3d']: r#132
[#205 'texture_cube']: r#132
[#205 'texture_cube_array']: r#132
[#205 'texture_depth_2d']: r#132
[#205 'texture_depth_2d_array']: r#132
[#205 'texture_depth_cube']: r#132
[#205 'texture_depth_cube_array']: r#132
[#205 'texture_depth_multisampled_2d']: r#132
[#205 'texture_multisampled_2d']: r#132
[#205 'texture_storage_1d']: r#132
[#205 'texture_storage_2d']: r#132
[#205 'texture_storage_2d_array']: r#132
[#205 'texture_storage_3d']: r#132
[#205 'true']: r#132
[#205 'u32']: r#132
[#205 'vec2']: r#132
[#205 'vec3']: r#132
[#205 'vec4']: r#132
[#205 '~']: r#132
[#207 '!=']: r#133
[#207 '%']: r#133
[#207 '&&']: r#133
[#207 '&']: r#133
[#207 ')']: r#133
[#207 '*']: r#133
[#207 '+']: r#133
[#207 ',']: r#133
[#207 '-']: r#133
[#207 '/']: r#133
[#207 ':']: r#133
[#207 ';']: r#133
[#207 '<']: r#133
[#207 '<<']: r#133
[#207 '<=']: r#133
[#207 '==']: r#133
[#207 '>']: r#133
[#207 '>=']: r#133
[#207 '>>']: r#133
[#207 ']']: r#133
[#207 '^']: r#133
[#207 '{']: r#133
[#207 '|']: r#133
[#207 '||']: r#133
[#208 '!=']: r#134
[#208 '%']: r#134
[#208 '&&']: r#134
[#208 '&']: r#134
[#208 ')']: r#134
[#208 '*']: r#134
[#208 '+']: r#134
[#208 ',']: r#134
[#208 '-']: r#134
[#208 '/']: r#134
[#208 ':']: r#134
[#208 ';']: r#134
[#208 '<']: r#134
[#208 '<<']: r#134
[#208 '<=']: r#134
[#208 '==']: r#134
[#208 '>']: r#134
[#208 '>=']: r#134
[#208 '>>']: r#134
[#208 ']']: r#134
[#208 '^']: r#134
[#208 '{']: r#134
[#208 '|']: r#134
[#208 '||']: r#134
[#209 '!=']: r#135
[#209 '%']: r#135
[#209 '&&']: r#135
[#209 '&']: r#135
[#209 ')']: r#135
[#209 '*']: r#135
[#209 '+']: r#135
[#209 ',']: r#135
[#209 '-']: r#135
[#209 '/']: r#135
[#209 ':']: r#135
[#209 ';']: r#135
[#209 '<']: r#135
[#209 '<<']: r#135
[#209 '<=']: r#135
[#209 '==']: r#135
[#209 '>']: r#135
[#209 '>=']: r#135
[#209 '>>']: r#135
[#209 ']']: r#135
[#209 '^']: r#135
[#209 '{']: r#135
[#209 '|']: r#135
[#209 '||']: r#135
[#210 '!=']: r#136
[#210 '%']: r#136
[#210 '&&']: r#136
[#210 '&']: r#136
[#210 ')']: r#136
[#210 '*']: r#136
[#210 '+']: r#136
[#210 ',']: r#136
[#210 '-']: r#136
[#210 '/']: r#136
[#210 ':']: r#136
[#210 ';']: r#136
[#210 '<']: r#136
[#210 '<<']: r#136
[#210 '<=']: r#136
[#210 '==']: r#136
[#210 '>']: r#136
[#210 '>=']: r#136
[#210 '>>']: r#136
[#210 ']']: r#136
[#210 '^']: r#136
[#210 '{']: r#136
[#210 '|']: r#136
[#210 '||']: r#136
[#211 '!=']: r#137
[#211 '%']: r#137
[#211 '&&']: r#137
[#211 '&']: r#137
[#211 ')']: r#137
[#211 '*']: r#137
[#211 '+']: r#137
[#211 ',']: r#137
[#211 '-']: r#137
[#211 '/']: r#137
[#211 ':']: r#137
[#211 ';']: r#137
[#211 '<']: r#137
[#211 '<<']: r#137
[#211 '<=']: r#137
[#211 '==']: r#137
[#211 '>']: r#137
[#211 '>=']: r#137
[#211 '>>']: r#137
[#211 ']']: r#137
[#211 '^']: r#137
[#211 '{']: r#137
[#211 '|']: r#137
[#211 '||']: r#137
[#212 '!']: s#70
[#212 '&']: s#73
[#212 '(']: s#116
[#212 '*']: s#72
[#212 '-']: s#69
[#212 'array']: s#83
[#212 'atomic']: s#95
[#212 'bitcast']: s#78
[#212 'bool']: s#88
[#212 'f16']: s#118
[#212 'f32']: s#117
[#212 'false']: s#115
[#212 'i32']: s#119
[#212 'mat2x2']: s#100
[#212 'mat2x3']: s#101
[#212 'mat2x4']: s#102
[#212 'mat3x2']: s#103
[#212 'mat3x3']: s#104
[#212 'mat3x4']: s#105
[#212 'mat4x2']: s#106
[#212 'mat4x3']: s#107
[#212 'mat4x4']: s#108
[#212 'ptr']: s#121
[#212 'sampler']: s#135
[#212 'sampler_comparison']: s#136
[#212 'texture_1d']: s#142
[#212 'texture_2d']: s#143
[#212 'texture_2d_array']: s#144
[#212 'texture_3d']: s#145
[#212 'texture_cube']: s#146
[#212 'texture_cube_array']: s#147
[#212 'texture_depth_2d']: s#137
[#212 'texture_depth_2d_array']: s#138
[#212 'texture_depth_cube']: s#139
[#212 'texture_depth_cube_array']: s#140
[#212 'texture_depth_multisampled_2d']: s#141
[#212 'texture_multisampled_2d']: s#148
[#212 'texture_storage_1d']: s#149
[#212 'texture_storage_2d']: s#150
[#212 'texture_storage_2d_array']: s#151
[#212 'texture_storage_3d']: s#152
[#212 'true']: s#114
[#212 'u32']: s#120
[#212 'vec2']: s#97
[#212 'vec3']: s#98
[#212 'vec4']: s#99
[#212 '~']: s#71
[#212 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#212 /0[fh]/]: s#130
[#212 /0[iu]?/]: s#110
[#212 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#212 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#212 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#212 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#212 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#212 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#212 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#212 /[1-9][0-9]*[fh]/]: s#131
[#212 /[1-9][0-9]*[iu]?/]: s#111
[#213 '!']: s#70
[#213 '&']: s#73
[#213 '(']: s#116
[#213 '*']: s#72
[#213 '-']: s#69
[#213 'array']: s#83
[#213 'atomic']: s#95
[#213 'bitcast']: s#78
[#213 'bool']: s#88
[#213 'f16']: s#118
[#213 'f32']: s#117
[#213 'false']: s#115
[#213 'i32']: s#119
[#213 'mat2x2']: s#100
[#213 'mat2x3']: s#101
[#213 'mat2x4']: s#102
[#213 'mat3x2']: s#103
[#213 'mat3x3']: s#104
[#213 'mat3x4']: s#105
[#213 'mat4x2']: s#106
[#213 'mat4x3']: s#107
[#213 'mat4x4']: s#108
[#213 'ptr']: s#121
[#213 'sampler']: s#135
[#213 'sampler_comparison']: s#136
[#213 'texture_1d']: s#142
[#213 'texture_2d']: s#143
[#213 'texture_2d_array']: s#144
[#213 'texture_3d']: s#145
[#213 'texture_cube']: s#146
[#213 'texture_cube_array']: s#147
[#213 'texture_depth_2d']: s#137
[#213 'texture_depth_2d_array']: s#138
[#213 'texture_depth_cube']: s#139
[#213 'texture_depth_cube_array']: s#140
[#213 'texture_depth_multisampled_2d']: s#141
[#213 'texture_multisampled_2d']: s#148
[#213 'texture_storage_1d']: s#149
[#213 'texture_storage_2d']: s#150
[#213 'texture_storage_2d_array']: s#151
[#213 'texture_storage_3d']: s#152
[#213 'true']: s#114
[#213 'u32']: s#120
[#213 'vec2']: s#97
[#213 'vec3']: s#98
[#213 'vec4']: s#99
[#213 '~']: s#71
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#213 /0[fh]/]: s#130
[#213 /0[iu]?/]: s#110
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#213 /[1-9][0-9]*[fh]/]: s#131
[#213 /[1-9][0-9]*[iu]?/]: s#111
[#214 '!']: s#70
[#214 '&']: s#73
[#214 '(']: s#116
[#214 '*']: s#72
[#214 '-']: s#69
[#214 'array']: s#83
[#214 'atomic']: s#95
[#214 'bitcast']: s#78
[#214 'bool']: s#88
[#214 'f16']: s#118
[#214 'f32']: s#117
[#214 'false']: s#115
[#214 'i32']: s#119
[#214 'mat2x2']: s#100
[#214 'mat2x3']: s#101
[#214 'mat2x4']: s#102
[#214 'mat3x2']: s#103
[#214 'mat3x3']: s#104
[#214 'mat3x4']: s#105
[#214 'mat4x2']: s#106
[#214 'mat4x3']: s#107
[#214 'mat4x4']: s#108
[#214 'ptr']: s#121
[#214 'sampler']: s#135
[#214 'sampler_comparison']: s#136
[#214 'texture_1d']: s#142
[#214 'texture_2d']: s#143
[#214 'texture_2d_array']: s#144
[#214 'texture_3d']: s#145
[#214 'texture_cube']: s#146
[#214 'texture_cube_array']: s#147
[#214 'texture_depth_2d']: s#137
[#214 'texture_depth_2d_array']: s#138
[#214 'texture_depth_cube']: s#139
[#214 'texture_depth_cube_array']: s#140
[#214 'texture_depth_multisampled_2d']: s#141
[#214 'texture_multisampled_2d']: s#148
[#214 'texture_storage_1d']: s#149
[#214 'texture_storage_2d']: s#150
[#214 'texture_storage_2d_array']: s#151
[#214 'texture_storage_3d']: s#152
[#214 'true']: s#114
[#214 'u32']: s#120
[#214 'vec2']: s#97
[#214 'vec3']: s#98
[#214 'vec4']: s#99
[#214 '~']: s#71
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#214 /0[fh]/]: s#130
[#214 /0[iu]?/]: s#110
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#214 /[1-9][0-9]*[fh]/]: s#131
[#214 /[1-9][0-9]*[iu]?/]: s#111
[#215 '!']: r#138
[#215 '&']: r#138
[#215 '(']: r#138
[#215 '*']: r#138
[#215 '-']: r#138
[#215 'array']: r#138
[#215 'atomic']: r#138
[#215 'bitcast']: r#138
[#215 'bool']: r#138
[#215 'f16']: r#138
[#215 'f32']: r#138
[#215 'false']: r#138
[#215 'i32']: r#138
[#215 'mat2x2']: r#138
[#215 'mat2x3']: r#138
[#215 'mat2x4']: r#138
[#215 'mat3x2']: r#138
[#215 'mat3x3']: r#138
[#215 'mat3x4']: r#138
[#215 'mat4x2']: r#138
[#215 'mat4x3']: r#138
[#215 'mat4x4']: r#138
[#215 'ptr']: r#138
[#215 'sampler']: r#138
[#215 'sampler_comparison']: r#138
[#215 'texture_1d']: r#138
[#215 'texture_2d']: r#138
[#215 'texture_2d_array']: r#138
[#215 'texture_3d']: r#138
[#215 'texture_cube']: r#138
[#215 'texture_cube_array']: r#138
[#215 'texture_depth_2d']: r#138
[#215 'texture_depth_2d_array']: r#138
[#215 'texture_depth_cube']: r#138
[#215 'texture_depth_cube_array']: r#138
[#215 'texture_depth_multisampled_2d']: r#138
[#215 'texture_multisampled_2d']: r#138
[#215 'texture_storage_1d']: r#138
[#215 'texture_storage_2d']: r#138
[#215 'texture_storage_2d_array']: r#138
[#215 'texture_storage_3d']: r#138
[#215 'true']: r#138
[#215 'u32']: r#138
[#215 'vec2']: r#138
[#215 'vec3']: r#138
[#215 'vec4']: r#138
[#215 '~']: r#138
[#216 '!']: r#139
[#216 '&']: r#139
[#216 '(']: r#139
[#216 '*']: r#139
[#216 '-']: r#139
[#216 'array']: r#139
[#216 'atomic']: r#139
[#216 'bitcast']: r#139
[#216 'bool']: r#139
[#216 'f16']: r#139
[#216 'f32']: r#139
[#216 'false']: r#139
[#216 'i32']: r#139
[#216 'mat2x2']: r#139
[#216 'mat2x3']: r#139
[#216 'mat2x4']: r#139
[#216 'mat3x2']: r#139
[#216 'mat3x3']: r#139
[#216 'mat3x4']: r#139
[#216 'mat4x2']: r#139
[#216 'mat4x3']: r#139
[#216 'mat4x4']: r#139
[#216 'ptr']: r#139
[#216 'sampler']: r#139
[#216 'sampler_comparison']: r#139
[#216 'texture_1d']: r#139
[#216 'texture_2d']: r#139
[#216 'texture_2d_array']: r#139
[#216 'texture_3d']: r#139
[#216 'texture_cube']: r#139
[#216 'texture_cube_array']: r#139
[#216 'texture_depth_2d']: r#139
[#216 'texture_depth_2d_array']: r#139
[#216 'texture_depth_cube']: r#139
[#216 'texture_depth_cube_array']: r#139
[#216 'texture_depth_multisampled_2d']: r#139
[#216 'texture_multisampled_2d']: r#139
[#216 'texture_storage_1d']: r#139
[#216 'texture_storage_2d']: r#139
[#216 'texture_storage_2d_array']: r#139
[#216 'texture_storage_3d']: r#139
[#216 'true']: r#139
[#216 'u32']: r#139
[#216 'vec2']: r#139
[#216 'vec3']: r#139
[#216 'vec4']: r#139
[#216 '~']: r#139
[#217 '!']: s#70
[#217 '&']: s#73
[#217 '(']: s#116
[#217 '*']: s#72
[#217 '-']: s#69
[#217 'array']: s#83
[#217 'atomic']: s#95
[#217 'bitcast']: s#78
[#217 'bool']: s#88
[#217 'f16']: s#118
[#217 'f32']: s#117
[#217 'false']: s#115
[#217 'i32']: s#119
[#217 'mat2x2']: s#100
[#217 'mat2x3']: s#101
[#217 'mat2x4']: s#102
[#217 'mat3x2']: s#103
[#217 'mat3x3']: s#104
[#217 'mat3x4']: s#105
[#217 'mat4x2']: s#106
[#217 'mat4x3']: s#107
[#217 'mat4x4']: s#108
[#217 'ptr']: s#121
[#217 'sampler']: s#135
[#217 'sampler_comparison']: s#136
[#217 'texture_1d']: s#142
[#217 'texture_2d']: s#143
[#217 'texture_2d_array']: s#144
[#217 'texture_3d']: s#145
[#217 'texture_cube']: s#146
[#217 'texture_cube_array']: s#147
[#217 'texture_depth_2d']: s#137
[#217 'texture_depth_2d_array']: s#138
[#217 'texture_depth_cube']: s#139
[#217 'texture_depth_cube_array']: s#140
[#217 'texture_depth_multisampled_2d']: s#141
[#217 'texture_multisampled_2d']: s#148
[#217 'texture_storage_1d']: s#149
[#217 'texture_storage_2d']: s#150
[#217 'texture_storage_2d_array']: s#151
[#217 'texture_storage_3d']: s#152
[#217 'true']: s#114
[#217 'u32']: s#120
[#217 'vec2']: s#97
[#217 'vec3']: s#98
[#217 'vec4']: s#99
[#217 '~']: s#71
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#217 /0[fh]/]: s#130
[#217 /0[iu]?/]: s#110
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#217 /[1-9][0-9]*[fh]/]: s#131
[#217 /[1-9][0-9]*[iu]?/]: s#111
[#218 '!']: s#70
[#218 '&']: s#73
[#218 '(']: s#116
[#218 '*']: s#72
[#218 '-']: s#69
[#218 'array']: s#83
[#218 'atomic']: s#95
[#218 'bitcast']: s#78
[#218 'bool']: s#88
[#218 'f16']: s#118
[#218 'f32']: s#117
[#218 'false']: s#115
[#218 'i32']: s#119
[#218 'mat2x2']: s#100
[#218 'mat2x3']: s#101
[#218 'mat2x4']: s#102
[#218 'mat3x2']: s#103
[#218 'mat3x3']: s#104
[#218 'mat3x4']: s#105
[#218 'mat4x2']: s#106
[#218 'mat4x3']: s#107
[#218 'mat4x4']: s#108
[#218 'ptr']: s#121
[#218 'sampler']: s#135
[#218 'sampler_comparison']: s#136
[#218 'texture_1d']: s#142
[#218 'texture_2d']: s#143
[#218 'texture_2d_array']: s#144
[#218 'texture_3d']: s#145
[#218 'texture_cube']: s#146
[#218 'texture_cube_array']: s#147
[#218 'texture_depth_2d']: s#137
[#218 'texture_depth_2d_array']: s#138
[#218 'texture_depth_cube']: s#139
[#218 'texture_depth_cube_array']: s#140
[#218 'texture_depth_multisampled_2d']: s#141
[#218 'texture_multisampled_2d']: s#148
[#218 'texture_storage_1d']: s#149
[#218 'texture_storage_2d']: s#150
[#218 'texture_storage_2d_array']: s#151
[#218 'texture_storage_3d']: s#152
[#218 'true']: s#114
[#218 'u32']: s#120
[#218 'vec2']: s#97
[#218 'vec3']: s#98
[#218 'vec4']: s#99
[#218 '~']: s#71
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#218 /0[fh]/]: s#130
[#218 /0[iu]?/]: s#110
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#218 /[1-9][0-9]*[fh]/]: s#131
[#218 /[1-9][0-9]*[iu]?/]: s#111
[#219 '!']: r#140
[#219 '&']: r#140
[#219 '(']: r#140
[#219 '*']: r#140
[#219 '-']: r#140
[#219 'array']: r#140
[#219 'atomic']: r#140
[#219 'bitcast']: r#140
[#219 'bool']: r#140
[#219 'f16']: r#140
[#219 'f32']: r#140
[#219 'false']: r#140
[#219 'i32']: r#140
[#219 'mat2x2']: r#140
[#219 'mat2x3']: r#140
[#219 'mat2x4']: r#140
[#219 'mat3x2']: r#140
[#219 'mat3x3']: r#140
[#219 'mat3x4']: r#140
[#219 'mat4x2']: r#140
[#219 'mat4x3']: r#140
[#219 'mat4x4']: r#140
[#219 'ptr']: r#140
[#219 'sampler']: r#140
[#219 'sampler_comparison']: r#140
[#219 'texture_1d']: r#140
[#219 'texture_2d']: r#140
[#219 'texture_2d_array']: r#140
[#219 'texture_3d']: r#140
[#219 'texture_cube']: r#140
[#219 'texture_cube_array']: r#140
[#219 'texture_depth_2d']: r#140
[#219 'texture_depth_2d_array']: r#140
[#219 'texture_depth_cube']: r#140
[#219 'texture_depth_cube_array']: r#140
[#219 'texture_depth_multisampled_2d']: r#140
[#219 'texture_multisampled_2d']: r#140
[#219 'texture_storage_1d']: r#140
[#219 'texture_storage_2d']: r#140
[#219 'texture_storage_2d_array']: r#140
[#219 'texture_storage_3d']: r#140
[#219 'true']: r#140
[#219 'u32']: r#140
[#219 'vec2']: r#140
[#219 'vec3']: r#140
[#219 'vec4']: r#140
[#219 '~']: r#140
[#220 '!']: r#141
[#220 '&']: r#141
[#220 '(']: r#141
[#220 '*']: r#141
[#220 '-']: r#141
[#220 'array']: r#141
[#220 'atomic']: r#141
[#220 'bitcast']: r#141
[#220 'bool']: r#141
[#220 'f16']: r#141
[#220 'f32']: r#141
[#220 'false']: r#141
[#220 'i32']: r#141
[#220 'mat2x2']: r#141
[#220 'mat2x3']: r#141
[#220 'mat2x4']: r#141
[#220 'mat3x2']: r#141
[#220 'mat3x3']: r#141
[#220 'mat3x4']: r#141
[#220 'mat4x2']: r#141
[#220 'mat4x3']: r#141
[#220 'mat4x4']: r#141
[#220 'ptr']: r#141
[#220 'sampler']: r#141
[#220 'sampler_comparison']: r#141
[#220 'texture_1d']: r#141
[#220 'texture_2d']: r#141
[#220 'texture_2d_array']: r#141
[#220 'texture_3d']: r#141
[#220 'texture_cube']: r#141
[#220 'texture_cube_array']: r#141
[#220 'texture_depth_2d']: r#141
[#220 'texture_depth_2d_array']: r#141
[#220 'texture_depth_cube']: r#141
[#220 'texture_depth_cube_array']: r#141
[#220 'texture_depth_multisampled_2d']: r#141
[#220 'texture_multisampled_2d']: r#141
[#220 'texture_storage_1d']: r#141
[#220 'texture_storage_2d']: r#141
[#220 'texture_storage_2d_array']: r#141
[#220 'texture_storage_3d']: r#141
[#220 'true']: r#141
[#220 'u32']: r#141
[#220 'vec2']: r#141
[#220 'vec3']: r#141
[#220 'vec4']: r#141
[#220 '~']: r#141
[#221 '!']: s#70
[#221 '&']: s#73
[#221 '(']: s#116
[#221 '*']: s#72
[#221 '-']: s#69
[#221 'array']: s#83
[#221 'atomic']: s#95
[#221 'bitcast']: s#78
[#221 'bool']: s#88
[#221 'f16']: s#118
[#221 'f32']: s#117
[#221 'false']: s#115
[#221 'i32']: s#119
[#221 'mat2x2']: s#100
[#221 'mat2x3']: s#101
[#221 'mat2x4']: s#102
[#221 'mat3x2']: s#103
[#221 'mat3x3']: s#104
[#221 'mat3x4']: s#105
[#221 'mat4x2']: s#106
[#221 'mat4x3']: s#107
[#221 'mat4x4']: s#108
[#221 'ptr']: s#121
[#221 'sampler']: s#135
[#221 'sampler_comparison']: s#136
[#221 'texture_1d']: s#142
[#221 'texture_2d']: s#143
[#221 'texture_2d_array']: s#144
[#221 'texture_3d']: s#145
[#221 'texture_cube']: s#146
[#221 'texture_cube_array']: s#147
[#221 'texture_depth_2d']: s#137
[#221 'texture_depth_2d_array']: s#138
[#221 'texture_depth_cube']: s#139
[#221 'texture_depth_cube_array']: s#140
[#221 'texture_depth_multisampled_2d']: s#141
[#221 'texture_multisampled_2d']: s#148
[#221 'texture_storage_1d']: s#149
[#221 'texture_storage_2d']: s#150
[#221 'texture_storage_2d_array']: s#151
[#221 'texture_storage_3d']: s#152
[#221 'true']: s#114
[#221 'u32']: s#120
[#221 'vec2']: s#97
[#221 'vec3']: s#98
[#221 'vec4']: s#99
[#221 '~']: s#71
[#221 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#221 /0[fh]/]: s#130
[#221 /0[iu]?/]: s#110
[#221 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#221 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#221 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#221 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#221 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#221 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#221 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#221 /[1-9][0-9]*[fh]/]: s#131
[#221 /[1-9][0-9]*[iu]?/]: s#111
[#222 '!']: s#70
[#222 '&']: s#73
[#222 '(']: s#116
[#222 '*']: s#72
[#222 '-']: s#69
[#222 'array']: s#83
[#222 'atomic']: s#95
[#222 'bitcast']: s#78
[#222 'bool']: s#88
[#222 'f16']: s#118
[#222 'f32']: s#117
[#222 'false']: s#115
[#222 'i32']: s#119
[#222 'mat2x2']: s#100
[#222 'mat2x3']: s#101
[#222 'mat2x4']: s#102
[#222 'mat3x2']: s#103
[#222 'mat3x3']: s#104
[#222 'mat3x4']: s#105
[#222 'mat4x2']: s#106
[#222 'mat4x3']: s#107
[#222 'mat4x4']: s#108
[#222 'ptr']: s#121
[#222 'sampler']: s#135
[#222 'sampler_comparison']: s#136
[#222 'texture_1d']: s#142
[#222 'texture_2d']: s#143
[#222 'texture_2d_array']: s#144
[#222 'texture_3d']: s#145
[#222 'texture_cube']: s#146
[#222 'texture_cube_array']: s#147
[#222 'texture_depth_2d']: s#137
[#222 'texture_depth_2d_array']: s#138
[#222 'texture_depth_cube']: s#139
[#222 'texture_depth_cube_array']: s#140
[#222 'texture_depth_multisampled_2d']: s#141
[#222 'texture_multisampled_2d']: s#148
[#222 'texture_storage_1d']: s#149
[#222 'texture_storage_2d']: s#150
[#222 'texture_storage_2d_array']: s#151
[#222 'texture_storage_3d']: s#152
[#222 'true']: s#114
[#222 'u32']: s#120
[#222 'vec2']: s#97
[#222 'vec3']: s#98
[#222 'vec4']: s#99
[#222 '~']: s#71
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#222 /0[fh]/]: s#130
[#222 /0[iu]?/]: s#110
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#222 /[1-9][0-9]*[fh]/]: s#131
[#222 /[1-9][0-9]*[iu]?/]: s#111
[#223 '!']: r#142
[#223 '&']: r#142
[#223 '(']: r#142
[#223 '*']: r#142
[#223 '-']: r#142
[#223 'array']: r#142
[#223 'atomic']: r#142
[#223 'bitcast']: r#142
[#223 'bool']: r#142
[#223 'f16']: r#142
[#223 'f32']: r#142
[#223 'false']: r#142
[#223 'i32']: r#142
[#223 'mat2x2']: r#142
[#223 'mat2x3']: r#142
[#223 'mat2x4']: r#142
[#223 'mat3x2']: r#142
[#223 'mat3x3']: r#142
[#223 'mat3x4']: r#142
[#223 'mat4x2']: r#142
[#223 'mat4x3']: r#142
[#223 'mat4x4']: r#142
[#223 'ptr']: r#142
[#223 'sampler']: r#142
[#223 'sampler_comparison']: r#142
[#223 'texture_1d']: r#142
[#223 'texture_2d']: r#142
[#223 'texture_2d_array']: r#142
[#223 'texture_3d']: r#142
[#223 'texture_cube']: r#142
[#223 'texture_cube_array']: r#142
[#223 'texture_depth_2d']: r#142
[#223 'texture_depth_2d_array']: r#142
[#223 'texture_depth_cube']: r#142
[#223 'texture_depth_cube_array']: r#142
[#223 'texture_depth_multisampled_2d']: r#142
[#223 'texture_multisampled_2d']: r#142
[#223 'texture_storage_1d']: r#142
[#223 'texture_storage_2d']: r#142
[#223 'texture_storage_2d_array']: r#142
[#223 'texture_storage_3d']: r#142
[#223 'true']: r#142
[#223 'u32']: r#142
[#223 'vec2']: r#142
[#223 'vec3']: r#142
[#223 'vec4']: r#142
[#223 '~']: r#142
[#224 '!']: s#70
[#224 '&']: s#73
[#224 '(']: s#116
[#224 '*']: s#72
[#224 '-']: s#69
[#224 'array']: s#83
[#224 'atomic']: s#95
[#224 'bitcast']: s#78
[#224 'bool']: s#88
[#224 'f16']: s#118
[#224 'f32']: s#117
[#224 'false']: s#115
[#224 'i32']: s#119
[#224 'mat2x2']: s#100
[#224 'mat2x3']: s#101
[#224 'mat2x4']: s#102
[#224 'mat3x2']: s#103
[#224 'mat3x3']: s#104
[#224 'mat3x4']: s#105
[#224 'mat4x2']: s#106
[#224 'mat4x3']: s#107
[#224 'mat4x4']: s#108
[#224 'ptr']: s#121
[#224 'sampler']: s#135
[#224 'sampler_comparison']: s#136
[#224 'texture_1d']: s#142
[#224 'texture_2d']: s#143
[#224 'texture_2d_array']: s#144
[#224 'texture_3d']: s#145
[#224 'texture_cube']: s#146
[#224 'texture_cube_array']: s#147
[#224 'texture_depth_2d']: s#137
[#224 'texture_depth_2d_array']: s#138
[#224 'texture_depth_cube']: s#139
[#224 'texture_depth_cube_array']: s#140
[#224 'texture_depth_multisampled_2d']: s#141
[#224 'texture_multisampled_2d']: s#148
[#224 'texture_storage_1d']: s#149
[#224 'texture_storage_2d']: s#150
[#224 'texture_storage_2d_array']: s#151
[#224 'texture_storage_3d']: s#152
[#224 'true']: s#114
[#224 'u32']: s#120
[#224 'vec2']: s#97
[#224 'vec3']: s#98
[#224 'vec4']: s#99
[#224 '~']: s#71
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#224 /0[fh]/]: s#130
[#224 /0[iu]?/]: s#110
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#224 /[1-9][0-9]*[fh]/]: s#131
[#224 /[1-9][0-9]*[iu]?/]: s#111
[#225 '!']: r#143
[#225 '&']: r#143
[#225 '(']: r#143
[#225 '*']: r#143
[#225 '-']: r#143
[#225 'array']: r#143
[#225 'atomic']: r#143
[#225 'bitcast']: r#143
[#225 'bool']: r#143
[#225 'f16']: r#143
[#225 'f32']: r#143
[#225 'false']: r#143
[#225 'i32']: r#143
[#225 'mat2x2']: r#143
[#225 'mat2x3']: r#143
[#225 'mat2x4']: r#143
[#225 'mat3x2']: r#143
[#225 'mat3x3']: r#143
[#225 'mat3x4']: r#143
[#225 'mat4x2']: r#143
[#225 'mat4x3']: r#143
[#225 'mat4x4']: r#143
[#225 'ptr']: r#143
[#225 'sampler']: r#143
[#225 'sampler_comparison']: r#143
[#225 'texture_1d']: r#143
[#225 'texture_2d']: r#143
[#225 'texture_2d_array']: r#143
[#225 'texture_3d']: r#143
[#225 'texture_cube']: r#143
[#225 'texture_cube_array']: r#143
[#225 'texture_depth_2d']: r#143
[#225 'texture_depth_2d_array']: r#143
[#225 'texture_depth_cube']: r#143
[#225 'texture_depth_cube_array']: r#143
[#225 'texture_depth_multisampled_2d']: r#143
[#225 'texture_multisampled_2d']: r#143
[#225 'texture_storage_1d']: r#143
[#225 'texture_storage_2d']: r#143
[#225 'texture_storage_2d_array']: r#143
[#225 'texture_storage_3d']: r#143
[#225 'true']: r#143
[#225 'u32']: r#143
[#225 'vec2']: r#143
[#225 'vec3']: r#143
[#225 'vec4']: r#143
[#225 '~']: r#143
[#226 '!']: s#70
[#226 '&']: s#73
[#226 '(']: s#116
[#226 '*']: s#72
[#226 '-']: s#69
[#226 'array']: s#83
[#226 'atomic']: s#95
[#226 'bitcast']: s#78
[#226 'bool']: s#88
[#226 'f16']: s#118
[#226 'f32']: s#117
[#226 'false']: s#115
[#226 'i32']: s#119
[#226 'mat2x2']: s#100
[#226 'mat2x3']: s#101
[#226 'mat2x4']: s#102
[#226 'mat3x2']: s#103
[#226 'mat3x3']: s#104
[#226 'mat3x4']: s#105
[#226 'mat4x2']: s#106
[#226 'mat4x3']: s#107
[#226 'mat4x4']: s#108
[#226 'ptr']: s#121
[#226 'sampler']: s#135
[#226 'sampler_comparison']: s#136
[#226 'texture_1d']: s#142
[#226 'texture_2d']: s#143
[#226 'texture_2d_array']: s#144
[#226 'texture_3d']: s#145
[#226 'texture_cube']: s#146
[#226 'texture_cube_array']: s#147
[#226 'texture_depth_2d']: s#137
[#226 'texture_depth_2d_array']: s#138
[#226 'texture_depth_cube']: s#139
[#226 'texture_depth_cube_array']: s#140
[#226 'texture_depth_multisampled_2d']: s#141
[#226 'texture_multisampled_2d']: s#148
[#226 'texture_storage_1d']: s#149
[#226 'texture_storage_2d']: s#150
[#226 'texture_storage_2d_array']: s#151
[#226 'texture_storage_3d']: s#152
[#226 'true']: s#114
[#226 'u32']: s#120
[#226 'vec2']: s#97
[#226 'vec3']: s#98
[#226 'vec4']: s#99
[#226 '~']: s#71
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#226 /0[fh]/]: s#130
[#226 /0[iu]?/]: s#110
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#226 /[1-9][0-9]*[fh]/]: s#131
[#226 /[1-9][0-9]*[iu]?/]: s#111
[#227 '!']: r#144
[#227 '&']: r#144
[#227 '(']: r#144
[#227 '*']: r#144
[#227 '-']: r#144
[#227 'array']: r#144
[#227 'atomic']: r#144
[#227 'bitcast']: r#144
[#227 'bool']: r#144
[#227 'f16']: r#144
[#227 'f32']: r#144
[#227 'false']: r#144
[#227 'i32']: r#144
[#227 'mat2x2']: r#144
[#227 'mat2x3']: r#144
[#227 'mat2x4']: r#144
[#227 'mat3x2']: r#144
[#227 'mat3x3']: r#144
[#227 'mat3x4']: r#144
[#227 'mat4x2']: r#144
[#227 'mat4x3']: r#144
[#227 'mat4x4']: r#144
[#227 'ptr']: r#144
[#227 'sampler']: r#144
[#227 'sampler_comparison']: r#144
[#227 'texture_1d']: r#144
[#227 'texture_2d']: r#144
[#227 'texture_2d_array']: r#144
[#227 'texture_3d']: r#144
[#227 'texture_cube']: r#144
[#227 'texture_cube_array']: r#144
[#227 'texture_depth_2d']: r#144
[#227 'texture_depth_2d_array']: r#144
[#227 'texture_depth_cube']: r#144
[#227 'texture_depth_cube_array']: r#144
[#227 'texture_depth_multisampled_2d']: r#144
[#227 'texture_multisampled_2d']: r#144
[#227 'texture_storage_1d']: r#144
[#227 'texture_storage_2d']: r#144
[#227 'texture_storage_2d_array']: r#144
[#227 'texture_storage_3d']: r#144
[#227 'true']: r#144
[#227 'u32']: r#144
[#227 'vec2']: r#144
[#227 'vec3']: r#144
[#227 'vec4']: r#144
[#227 '~']: r#144
[#228 '!']: s#70
[#228 '&']: s#73
[#228 '(']: s#116
[#228 '*']: s#72
[#228 '-']: s#69
[#228 'array']: s#83
[#228 'atomic']: s#95
[#228 'bitcast']: s#78
[#228 'bool']: s#88
[#228 'f16']: s#118
[#228 'f32']: s#117
[#228 'false']: s#115
[#228 'i32']: s#119
[#228 'mat2x2']: s#100
[#228 'mat2x3']: s#101
[#228 'mat2x4']: s#102
[#228 'mat3x2']: s#103
[#228 'mat3x3']: s#104
[#228 'mat3x4']: s#105
[#228 'mat4x2']: s#106
[#228 'mat4x3']: s#107
[#228 'mat4x4']: s#108
[#228 'ptr']: s#121
[#228 'sampler']: s#135
[#228 'sampler_comparison']: s#136
[#228 'texture_1d']: s#142
[#228 'texture_2d']: s#143
[#228 'texture_2d_array']: s#144
[#228 'texture_3d']: s#145
[#228 'texture_cube']: s#146
[#228 'texture_cube_array']: s#147
[#228 'texture_depth_2d']: s#137
[#228 'texture_depth_2d_array']: s#138
[#228 'texture_depth_cube']: s#139
[#228 'texture_depth_cube_array']: s#140
[#228 'texture_depth_multisampled_2d']: s#141
[#228 'texture_multisampled_2d']: s#148
[#228 'texture_storage_1d']: s#149
[#228 'texture_storage_2d']: s#150
[#228 'texture_storage_2d_array']: s#151
[#228 'texture_storage_3d']: s#152
[#228 'true']: s#114
[#228 'u32']: s#120
[#228 'vec2']: s#97
[#228 'vec3']: s#98
[#228 'vec4']: s#99
[#228 '~']: s#71
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#228 /0[fh]/]: s#130
[#228 /0[iu]?/]: s#110
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#228 /[1-9][0-9]*[fh]/]: s#131
[#228 /[1-9][0-9]*[iu]?/]: s#111
[#229 '!']: s#70
[#229 '&']: s#73
[#229 '(']: s#116
[#229 '*']: s#72
[#229 '-']: s#69
[#229 'array']: s#83
[#229 'atomic']: s#95
[#229 'bitcast']: s#78
[#229 'bool']: s#88
[#229 'f16']: s#118
[#229 'f32']: s#117
[#229 'false']: s#115
[#229 'i32']: s#119
[#229 'mat2x2']: s#100
[#229 'mat2x3']: s#101
[#229 'mat2x4']: s#102
[#229 'mat3x2']: s#103
[#229 'mat3x3']: s#104
[#229 'mat3x4']: s#105
[#229 'mat4x2']: s#106
[#229 'mat4x3']: s#107
[#229 'mat4x4']: s#108
[#229 'ptr']: s#121
[#229 'sampler']: s#135
[#229 'sampler_comparison']: s#136
[#229 'texture_1d']: s#142
[#229 'texture_2d']: s#143
[#229 'texture_2d_array']: s#144
[#229 'texture_3d']: s#145
[#229 'texture_cube']: s#146
[#229 'texture_cube_array']: s#147
[#229 'texture_depth_2d']: s#137
[#229 'texture_depth_2d_array']: s#138
[#229 'texture_depth_cube']: s#139
[#229 'texture_depth_cube_array']: s#140
[#229 'texture_depth_multisampled_2d']: s#141
[#229 'texture_multisampled_2d']: s#148
[#229 'texture_storage_1d']: s#149
[#229 'texture_storage_2d']: s#150
[#229 'texture_storage_2d_array']: s#151
[#229 'texture_storage_3d']: s#152
[#229 'true']: s#114
[#229 'u32']: s#120
[#229 'vec2']: s#97
[#229 'vec3']: s#98
[#229 'vec4']: s#99
[#229 '~']: s#71
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#229 /0[fh]/]: s#130
[#229 /0[iu]?/]: s#110
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#229 /[1-9][0-9]*[fh]/]: s#131
[#229 /[1-9][0-9]*[iu]?/]: s#111
[#230 '!']: s#70
[#230 '&']: s#73
[#230 '(']: s#116
[#230 '*']: s#72
[#230 '-']: s#69
[#230 'array']: s#83
[#230 'atomic']: s#95
[#230 'bitcast']: s#78
[#230 'bool']: s#88
[#230 'f16']: s#118
[#230 'f32']: s#117
[#230 'false']: s#115
[#230 'i32']: s#119
[#230 'mat2x2']: s#100
[#230 'mat2x3']: s#101
[#230 'mat2x4']: s#102
[#230 'mat3x2']: s#103
[#230 'mat3x3']: s#104
[#230 'mat3x4']: s#105
[#230 'mat4x2']: s#106
[#230 'mat4x3']: s#107
[#230 'mat4x4']: s#108
[#230 'ptr']: s#121
[#230 'sampler']: s#135
[#230 'sampler_comparison']: s#136
[#230 'texture_1d']: s#142
[#230 'texture_2d']: s#143
[#230 'texture_2d_array']: s#144
[#230 'texture_3d']: s#145
[#230 'texture_cube']: s#146
[#230 'texture_cube_array']: s#147
[#230 'texture_depth_2d']: s#137
[#230 'texture_depth_2d_array']: s#138
[#230 'texture_depth_cube']: s#139
[#230 'texture_depth_cube_array']: s#140
[#230 'texture_depth_multisampled_2d']: s#141
[#230 'texture_multisampled_2d']: s#148
[#230 'texture_storage_1d']: s#149
[#230 'texture_storage_2d']: s#150
[#230 'texture_storage_2d_array']: s#151
[#230 'texture_storage_3d']: s#152
[#230 'true']: s#114
[#230 'u32']: s#120
[#230 'vec2']: s#97
[#230 'vec3']: s#98
[#230 'vec4']: s#99
[#230 '~']: s#71
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#230 /0[fh]/]: s#130
[#230 /0[iu]?/]: s#110
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#230 /[1-9][0-9]*[fh]/]: s#131
[#230 /[1-9][0-9]*[iu]?/]: s#111
[#231 '!']: s#70
[#231 '&']: s#73
[#231 '(']: s#116
[#231 '*']: s#72
[#231 '-']: s#69
[#231 'array']: s#83
[#231 'atomic']: s#95
[#231 'bitcast']: s#78
[#231 'bool']: s#88
[#231 'f16']: s#118
[#231 'f32']: s#117
[#231 'false']: s#115
[#231 'i32']: s#119
[#231 'mat2x2']: s#100
[#231 'mat2x3']: s#101
[#231 'mat2x4']: s#102
[#231 'mat3x2']: s#103
[#231 'mat3x3']: s#104
[#231 'mat3x4']: s#105
[#231 'mat4x2']: s#106
[#231 'mat4x3']: s#107
[#231 'mat4x4']: s#108
[#231 'ptr']: s#121
[#231 'sampler']: s#135
[#231 'sampler_comparison']: s#136
[#231 'texture_1d']: s#142
[#231 'texture_2d']: s#143
[#231 'texture_2d_array']: s#144
[#231 'texture_3d']: s#145
[#231 'texture_cube']: s#146
[#231 'texture_cube_array']: s#147
[#231 'texture_depth_2d']: s#137
[#231 'texture_depth_2d_array']: s#138
[#231 'texture_depth_cube']: s#139
[#231 'texture_depth_cube_array']: s#140
[#231 'texture_depth_multisampled_2d']: s#141
[#231 'texture_multisampled_2d']: s#148
[#231 'texture_storage_1d']: s#149
[#231 'texture_storage_2d']: s#150
[#231 'texture_storage_2d_array']: s#151
[#231 'texture_storage_3d']: s#152
[#231 'true']: s#114
[#231 'u32']: s#120
[#231 'vec2']: s#97
[#231 'vec3']: s#98
[#231 'vec4']: s#99
[#231 '~']: s#71
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#231 /0[fh]/]: s#130
[#231 /0[iu]?/]: s#110
[#231 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#231 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#231 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#231 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#231 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#231 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#231 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#231 /[1-9][0-9]*[fh]/]: s#131
[#231 /[1-9][0-9]*[iu]?/]: s#111
[#232 '!']: s#70
[#232 '&']: s#73
[#232 '(']: s#116
[#232 '*']: s#72
[#232 '-']: s#69
[#232 'array']: s#83
[#232 'atomic']: s#95
[#232 'bitcast']: s#78
[#232 'bool']: s#88
[#232 'f16']: s#118
[#232 'f32']: s#117
[#232 'false']: s#115
[#232 'i32']: s#119
[#232 'mat2x2']: s#100
[#232 'mat2x3']: s#101
[#232 'mat2x4']: s#102
[#232 'mat3x2']: s#103
[#232 'mat3x3']: s#104
[#232 'mat3x4']: s#105
[#232 'mat4x2']: s#106
[#232 'mat4x3']: s#107
[#232 'mat4x4']: s#108
[#232 'ptr']: s#121
[#232 'sampler']: s#135
[#232 'sampler_comparison']: s#136
[#232 'texture_1d']: s#142
[#232 'texture_2d']: s#143
[#232 'texture_2d_array']: s#144
[#232 'texture_3d']: s#145
[#232 'texture_cube']: s#146
[#232 'texture_cube_array']: s#147
[#232 'texture_depth_2d']: s#137
[#232 'texture_depth_2d_array']: s#138
[#232 'texture_depth_cube']: s#139
[#232 'texture_depth_cube_array']: s#140
[#232 'texture_depth_multisampled_2d']: s#141
[#232 'texture_multisampled_2d']: s#148
[#232 'texture_storage_1d']: s#149
[#232 'texture_storage_2d']: s#150
[#232 'texture_storage_2d_array']: s#151
[#232 'texture_storage_3d']: s#152
[#232 'true']: s#114
[#232 'u32']: s#120
[#232 'vec2']: s#97
[#232 'vec3']: s#98
[#232 'vec4']: s#99
[#232 '~']: s#71
[#232 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#232 /0[fh]/]: s#130
[#232 /0[iu]?/]: s#110
[#232 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#232 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#232 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#232 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#232 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#232 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#232 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#232 /[1-9][0-9]*[fh]/]: s#131
[#232 /[1-9][0-9]*[iu]?/]: s#111
[#233 '!']: s#70
[#233 '&']: s#73
[#233 '(']: s#116
[#233 '*']: s#72
[#233 '-']: s#69
[#233 'array']: s#83
[#233 'atomic']: s#95
[#233 'bitcast']: s#78
[#233 'bool']: s#88
[#233 'f16']: s#118
[#233 'f32']: s#117
[#233 'false']: s#115
[#233 'i32']: s#119
[#233 'mat2x2']: s#100
[#233 'mat2x3']: s#101
[#233 'mat2x4']: s#102
[#233 'mat3x2']: s#103
[#233 'mat3x3']: s#104
[#233 'mat3x4']: s#105
[#233 'mat4x2']: s#106
[#233 'mat4x3']: s#107
[#233 'mat4x4']: s#108
[#233 'ptr']: s#121
[#233 'sampler']: s#135
[#233 'sampler_comparison']: s#136
[#233 'texture_1d']: s#142
[#233 'texture_2d']: s#143
[#233 'texture_2d_array']: s#144
[#233 'texture_3d']: s#145
[#233 'texture_cube']: s#146
[#233 'texture_cube_array']: s#147
[#233 'texture_depth_2d']: s#137
[#233 'texture_depth_2d_array']: s#138
[#233 'texture_depth_cube']: s#139
[#233 'texture_depth_cube_array']: s#140
[#233 'texture_depth_multisampled_2d']: s#141
[#233 'texture_multisampled_2d']: s#148
[#233 'texture_storage_1d']: s#149
[#233 'texture_storage_2d']: s#150
[#233 'texture_storage_2d_array']: s#151
[#233 'texture_storage_3d']: s#152
[#233 'true']: s#114
[#233 'u32']: s#120
[#233 'vec2']: s#97
[#233 'vec3']: s#98
[#233 'vec4']: s#99
[#233 '~']: s#71
[#233 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#233 /0[fh]/]: s#130
[#233 /0[iu]?/]: s#110
[#233 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#233 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#233 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#233 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#233 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#233 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#233 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#233 /[1-9][0-9]*[fh]/]: s#131
[#233 /[1-9][0-9]*[iu]?/]: s#111
[#234 '!']: s#70
[#234 '&']: s#73
[#234 '(']: s#116
[#234 '*']: s#72
[#234 '-']: s#69
[#234 'array']: s#83
[#234 'atomic']: s#95
[#234 'bitcast']: s#78
[#234 'bool']: s#88
[#234 'f16']: s#118
[#234 'f32']: s#117
[#234 'false']: s#115
[#234 'i32']: s#119
[#234 'mat2x2']: s#100
[#234 'mat2x3']: s#101
[#234 'mat2x4']: s#102
[#234 'mat3x2']: s#103
[#234 'mat3x3']: s#104
[#234 'mat3x4']: s#105
[#234 'mat4x2']: s#106
[#234 'mat4x3']: s#107
[#234 'mat4x4']: s#108
[#234 'ptr']: s#121
[#234 'sampler']: s#135
[#234 'sampler_comparison']: s#136
[#234 'texture_1d']: s#142
[#234 'texture_2d']: s#143
[#234 'texture_2d_array']: s#144
[#234 'texture_3d']: s#145
[#234 'texture_cube']: s#146
[#234 'texture_cube_array']: s#147
[#234 'texture_depth_2d']: s#137
[#234 'texture_depth_2d_array']: s#138
[#234 'texture_depth_cube']: s#139
[#234 'texture_depth_cube_array']: s#140
[#234 'texture_depth_multisampled_2d']: s#141
[#234 'texture_multisampled_2d']: s#148
[#234 'texture_storage_1d']: s#149
[#234 'texture_storage_2d']: s#150
[#234 'texture_storage_2d_array']: s#151
[#234 'texture_storage_3d']: s#152
[#234 'true']: s#114
[#234 'u32']: s#120
[#234 'vec2']: s#97
[#234 'vec3']: s#98
[#234 'vec4']: s#99
[#234 '~']: s#71
[#234 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#234 /0[fh]/]: s#130
[#234 /0[iu]?/]: s#110
[#234 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#234 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#234 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#234 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#234 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#234 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#234 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#234 /[1-9][0-9]*[fh]/]: s#131
[#234 /[1-9][0-9]*[iu]?/]: s#111
[#235 '!']: r#145
[#235 '&']: r#145
[#235 '(']: r#145
[#235 ')']: r#145
[#235 '*']: r#145
[#235 ',']: r#145
[#235 '-']: r#145
[#235 ';']: r#145
[#235 '=']: r#145
[#235 '>']: r#145
[#235 'array']: r#145
[#235 'atomic']: r#145
[#235 'bitcast']: r#145
[#235 'bool']: r#145
[#235 'f16']: r#145
[#235 'f32']: r#145
[#235 'false']: r#145
[#235 'i32']: r#145
[#235 'mat2x2']: r#145
[#235 'mat2x3']: r#145
[#235 'mat2x4']: r#145
[#235 'mat3x2']: r#145
[#235 'mat3x3']: r#145
[#235 'mat3x4']: r#145
[#235 'mat4x2']: r#145
[#235 'mat4x3']: r#145
[#235 'mat4x4']: r#145
[#235 'ptr']: r#145
[#235 'sampler']: r#145
[#235 'sampler_comparison']: r#145
[#235 'texture_1d']: r#145
[#235 'texture_2d']: r#145
[#235 'texture_2d_array']: r#145
[#235 'texture_3d']: r#145
[#235 'texture_cube']: r#145
[#235 'texture_cube_array']: r#145
[#235 'texture_depth_2d']: r#145
[#235 'texture_depth_2d_array']: r#145
[#235 'texture_depth_cube']: r#145
[#235 'texture_depth_cube_array']: r#145
[#235 'texture_depth_multisampled_2d']: r#145
[#235 'texture_multisampled_2d']: r#145
[#235 'texture_storage_1d']: r#145
[#235 'texture_storage_2d']: r#145
[#235 'texture_storage_2d_array']: r#145
[#235 'texture_storage_3d']: r#145
[#235 'true']: r#145
[#235 'u32']: r#145
[#235 'vec2']: r#145
[#235 'vec3']: r#145
[#235 'vec4']: r#145
[#235 '{']: r#145
[#235 '}']: r#145
[#235 '~']: r#145
[#235 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#145
[#236 '!']: r#146
[#236 '&']: r#146
[#236 '(']: r#146
[#236 '*']: r#146
[#236 '-']: r#146
[#236 'array']: r#146
[#236 'atomic']: r#146
[#236 'bitcast']: r#146
[#236 'bool']: r#146
[#236 'f16']: r#146
[#236 'f32']: r#146
[#236 'false']: r#146
[#236 'i32']: r#146
[#236 'mat2x2']: r#146
[#236 'mat2x3']: r#146
[#236 'mat2x4']: r#146
[#236 'mat3x2']: r#146
[#236 'mat3x3']: r#146
[#236 'mat3x4']: r#146
[#236 'mat4x2']: r#146
[#236 'mat4x3']: r#146
[#236 'mat4x4']: r#146
[#236 'ptr']: r#146
[#236 'sampler']: r#146
[#236 'sampler_comparison']: r#146
[#236 'texture_1d']: r#146
[#236 'texture_2d']: r#146
[#236 'texture_2d_array']: r#146
[#236 'texture_3d']: r#146
[#236 'texture_cube']: r#146
[#236 'texture_cube_array']: r#146
[#236 'texture_depth_2d']: r#146
[#236 'texture_depth_2d_array']: r#146
[#236 'texture_depth_cube']: r#146
[#236 'texture_depth_cube_array']: r#146
[#236 'texture_depth_multisampled_2d']: r#146
[#236 'texture_multisampled_2d']: r#146
[#236 'texture_storage_1d']: r#146
[#236 'texture_storage_2d']: r#146
[#236 'texture_storage_2d_array']: r#146
[#236 'texture_storage_3d']: r#146
[#236 'true']: r#146
[#236 'u32']: r#146
[#236 'vec2']: r#146
[#236 'vec3']: r#146
[#236 'vec4']: r#146
[#236 '~']: r#146
[#237 '!']: r#147
[#237 '&']: r#147
[#237 '(']: r#147
[#237 '*']: r#147
[#237 '-']: r#147
[#237 'array']: r#147
[#237 'atomic']: r#147
[#237 'bitcast']: r#147
[#237 'bool']: r#147
[#237 'f16']: r#147
[#237 'f32']: r#147
[#237 'false']: r#147
[#237 'i32']: r#147
[#237 'mat2x2']: r#147
[#237 'mat2x3']: r#147
[#237 'mat2x4']: r#147
[#237 'mat3x2']: r#147
[#237 'mat3x3']: r#147
[#237 'mat3x4']: r#147
[#237 'mat4x2']: r#147
[#237 'mat4x3']: r#147
[#237 'mat4x4']: r#147
[#237 'ptr']: r#147
[#237 'sampler']: r#147
[#237 'sampler_comparison']: r#147
[#237 'texture_1d']: r#147
[#237 'texture_2d']: r#147
[#237 'texture_2d_array']: r#147
[#237 'texture_3d']: r#147
[#237 'texture_cube']: r#147
[#237 'texture_cube_array']: r#147
[#237 'texture_depth_2d']: r#147
[#237 'texture_depth_2d_array']: r#147
[#237 'texture_depth_cube']: r#147
[#237 'texture_depth_cube_array']: r#147
[#237 'texture_depth_multisampled_2d']: r#147
[#237 'texture_multisampled_2d']: r#147
[#237 'texture_storage_1d']: r#147
[#237 'texture_storage_2d']: r#147
[#237 'texture_storage_2d_array']: r#147
[#237 'texture_storage_3d']: r#147
[#237 'true']: r#147
[#237 'u32']: r#147
[#237 'vec2']: r#147
[#237 'vec3']: r#147
[#237 'vec4']: r#147
[#237 '~']: r#147
[#238 '!']: r#148
[#238 '&']: r#148
[#238 '(']: r#148
[#238 '*']: r#148
[#238 '-']: r#148
[#238 'array']: r#148
[#238 'atomic']: r#148
[#238 'bitcast']: r#148
[#238 'bool']: r#148
[#238 'f16']: r#148
[#238 'f32']: r#148
[#238 'false']: r#148
[#238 'i32']: r#148
[#238 'mat2x2']: r#148
[#238 'mat2x3']: r#148
[#238 'mat2x4']: r#148
[#238 'mat3x2']: r#148
[#238 'mat3x3']: r#148
[#238 'mat3x4']: r#148
[#238 'mat4x2']: r#148
[#238 'mat4x3']: r#148
[#238 'mat4x4']: r#148
[#238 'ptr']: r#148
[#238 'sampler']: r#148
[#238 'sampler_comparison']: r#148
[#238 'texture_1d']: r#148
[#238 'texture_2d']: r#148
[#238 'texture_2d_array']: r#148
[#238 'texture_3d']: r#148
[#238 'texture_cube']: r#148
[#238 'texture_cube_array']: r#148
[#238 'texture_depth_2d']: r#148
[#238 'texture_depth_2d_array']: r#148
[#238 'texture_depth_cube']: r#148
[#238 'texture_depth_cube_array']: r#148
[#238 'texture_depth_multisampled_2d']: r#148
[#238 'texture_multisampled_2d']: r#148
[#238 'texture_storage_1d']: r#148
[#238 'texture_storage_2d']: r#148
[#238 'texture_storage_2d_array']: r#148
[#238 'texture_storage_3d']: r#148
[#238 'true']: r#148
[#238 'u32']: r#148
[#238 'vec2']: r#148
[#238 'vec3']: r#148
[#238 'vec4']: r#148
[#238 '~']: r#148
[#239 '!']: r#149
[#239 '&']: r#149
[#239 '(']: r#149
[#239 '*']: r#149
[#239 '-']: r#149
[#239 'array']: r#149
[#239 'atomic']: r#149
[#239 'bitcast']: r#149
[#239 'bool']: r#149
[#239 'f16']: r#149
[#239 'f32']: r#149
[#239 'false']: r#149
[#239 'i32']: r#149
[#239 'mat2x2']: r#149
[#239 'mat2x3']: r#149
[#239 'mat2x4']: r#149
[#239 'mat3x2']: r#149
[#239 'mat3x3']: r#149
[#239 'mat3x4']: r#149
[#239 'mat4x2']: r#149
[#239 'mat4x3']: r#149
[#239 'mat4x4']: r#149
[#239 'ptr']: r#149
[#239 'sampler']: r#149
[#239 'sampler_comparison']: r#149
[#239 'texture_1d']: r#149
[#239 'texture_2d']: r#149
[#239 'texture_2d_array']: r#149
[#239 'texture_3d']: r#149
[#239 'texture_cube']: r#149
[#239 'texture_cube_array']: r#149
[#239 'texture_depth_2d']: r#149
[#239 'texture_depth_2d_array']: r#149
[#239 'texture_depth_cube']: r#149
[#239 'texture_depth_cube_array']: r#149
[#239 'texture_depth_multisampled_2d']: r#149
[#239 'texture_multisampled_2d']: r#149
[#239 'texture_storage_1d']: r#149
[#239 'texture_storage_2d']: r#149
[#239 'texture_storage_2d_array']: r#149
[#239 'texture_storage_3d']: r#149
[#239 'true']: r#149
[#239 'u32']: r#149
[#239 'vec2']: r#149
[#239 'vec3']: r#149
[#239 'vec4']: r#149
[#239 '~']: r#149
[#240 '!']: s#70
[#240 '&']: s#73
[#240 '(']: s#116
[#240 '*']: s#72
[#240 '-']: s#69
[#240 'array']: s#83
[#240 'atomic']: s#95
[#240 'bitcast']: s#78
[#240 'bool']: s#88
[#240 'f16']: s#118
[#240 'f32']: s#117
[#240 'false']: s#115
[#240 'i32']: s#119
[#240 'mat2x2']: s#100
[#240 'mat2x3']: s#101
[#240 'mat2x4']: s#102
[#240 'mat3x2']: s#103
[#240 'mat3x3']: s#104
[#240 'mat3x4']: s#105
[#240 'mat4x2']: s#106
[#240 'mat4x3']: s#107
[#240 'mat4x4']: s#108
[#240 'ptr']: s#121
[#240 'sampler']: s#135
[#240 'sampler_comparison']: s#136
[#240 'texture_1d']: s#142
[#240 'texture_2d']: s#143
[#240 'texture_2d_array']: s#144
[#240 'texture_3d']: s#145
[#240 'texture_cube']: s#146
[#240 'texture_cube_array']: s#147
[#240 'texture_depth_2d']: s#137
[#240 'texture_depth_2d_array']: s#138
[#240 'texture_depth_cube']: s#139
[#240 'texture_depth_cube_array']: s#140
[#240 'texture_depth_multisampled_2d']: s#141
[#240 'texture_multisampled_2d']: s#148
[#240 'texture_storage_1d']: s#149
[#240 'texture_storage_2d']: s#150
[#240 'texture_storage_2d_array']: s#151
[#240 'texture_storage_3d']: s#152
[#240 'true']: s#114
[#240 'u32']: s#120
[#240 'vec2']: s#97
[#240 'vec3']: s#98
[#240 'vec4']: s#99
[#240 '~']: s#71
[#240 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#240 /0[fh]/]: s#130
[#240 /0[iu]?/]: s#110
[#240 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#240 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#240 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#240 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#240 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#240 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#240 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#240 /[1-9][0-9]*[fh]/]: s#131
[#240 /[1-9][0-9]*[iu]?/]: s#111
[#241 '!']: r#150
[#241 '&']: r#150
[#241 '(']: r#150
[#241 '*']: r#150
[#241 '-']: r#150
[#241 'array']: r#150
[#241 'atomic']: r#150
[#241 'bitcast']: r#150
[#241 'bool']: r#150
[#241 'f16']: r#150
[#241 'f32']: r#150
[#241 'false']: r#150
[#241 'i32']: r#150
[#241 'mat2x2']: r#150
[#241 'mat2x3']: r#150
[#241 'mat2x4']: r#150
[#241 'mat3x2']: r#150
[#241 'mat3x3']: r#150
[#241 'mat3x4']: r#150
[#241 'mat4x2']: r#150
[#241 'mat4x3']: r#150
[#241 'mat4x4']: r#150
[#241 'ptr']: r#150
[#241 'sampler']: r#150
[#241 'sampler_comparison']: r#150
[#241 'texture_1d']: r#150
[#241 'texture_2d']: r#150
[#241 'texture_2d_array']: r#150
[#241 'texture_3d']: r#150
[#241 'texture_cube']: r#150
[#241 'texture_cube_array']: r#150
[#241 'texture_depth_2d']: r#150
[#241 'texture_depth_2d_array']: r#150
[#241 'texture_depth_cube']: r#150
[#241 'texture_depth_cube_array']: r#150
[#241 'texture_depth_multisampled_2d']: r#150
[#241 'texture_multisampled_2d']: r#150
[#241 'texture_storage_1d']: r#150
[#241 'texture_storage_2d']: r#150
[#241 'texture_storage_2d_array']: r#150
[#241 'texture_storage_3d']: r#150
[#241 'true']: r#150
[#241 'u32']: r#150
[#241 'vec2']: r#150
[#241 'vec3']: r#150
[#241 'vec4']: r#150
[#241 '~']: r#150
[#242 '!']: s#70
[#242 '&']: s#73
[#242 '(']: s#116
[#242 '*']: s#72
[#242 '-']: s#69
[#242 'array']: s#83
[#242 'atomic']: s#95
[#242 'bitcast']: s#78
[#242 'bool']: s#88
[#242 'f16']: s#118
[#242 'f32']: s#117
[#242 'false']: s#115
[#242 'i32']: s#119
[#242 'mat2x2']: s#100
[#242 'mat2x3']: s#101
[#242 'mat2x4']: s#102
[#242 'mat3x2']: s#103
[#242 'mat3x3']: s#104
[#242 'mat3x4']: s#105
[#242 'mat4x2']: s#106
[#242 'mat4x3']: s#107
[#242 'mat4x4']: s#108
[#242 'ptr']: s#121
[#242 'sampler']: s#135
[#242 'sampler_comparison']: s#136
[#242 'texture_1d']: s#142
[#242 'texture_2d']: s#143
[#242 'texture_2d_array']: s#144
[#242 'texture_3d']: s#145
[#242 'texture_cube']: s#146
[#242 'texture_cube_array']: s#147
[#242 'texture_depth_2d']: s#137
[#242 'texture_depth_2d_array']: s#138
[#242 'texture_depth_cube']: s#139
[#242 'texture_depth_cube_array']: s#140
[#242 'texture_depth_multisampled_2d']: s#141
[#242 'texture_multisampled_2d']: s#148
[#242 'texture_storage_1d']: s#149
[#242 'texture_storage_2d']: s#150
[#242 'texture_storage_2d_array']: s#151
[#242 'texture_storage_3d']: s#152
[#242 'true']: s#114
[#242 'u32']: s#120
[#242 'vec2']: s#97
[#242 'vec3']: s#98
[#242 'vec4']: s#99
[#242 '~']: s#71
[#242 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#242 /0[fh]/]: s#130
[#242 /0[iu]?/]: s#110
[#242 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#242 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#242 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#242 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#242 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#242 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#242 /[1-9][0-9]*[fh]/]: s#131
[#242 /[1-9][0-9]*[iu]?/]: s#111
[#243 '!']: r#151
[#243 '&']: r#151
[#243 '(']: r#151
[#243 '*']: r#151
[#243 '-']: r#151
[#243 'array']: r#151
[#243 'atomic']: r#151
[#243 'bitcast']: r#151
[#243 'bool']: r#151
[#243 'f16']: r#151
[#243 'f32']: r#151
[#243 'false']: r#151
[#243 'i32']: r#151
[#243 'mat2x2']: r#151
[#243 'mat2x3']: r#151
[#243 'mat2x4']: r#151
[#243 'mat3x2']: r#151
[#243 'mat3x3']: r#151
[#243 'mat3x4']: r#151
[#243 'mat4x2']: r#151
[#243 'mat4x3']: r#151
[#243 'mat4x4']: r#151
[#243 'ptr']: r#151
[#243 'sampler']: r#151
[#243 'sampler_comparison']: r#151
[#243 'texture_1d']: r#151
[#243 'texture_2d']: r#151
[#243 'texture_2d_array']: r#151
[#243 'texture_3d']: r#151
[#243 'texture_cube']: r#151
[#243 'texture_cube_array']: r#151
[#243 'texture_depth_2d']: r#151
[#243 'texture_depth_2d_array']: r#151
[#243 'texture_depth_cube']: r#151
[#243 'texture_depth_cube_array']: r#151
[#243 'texture_depth_multisampled_2d']: r#151
[#243 'texture_multisampled_2d']: r#151
[#243 'texture_storage_1d']: r#151
[#243 'texture_storage_2d']: r#151
[#243 'texture_storage_2d_array']: r#151
[#243 'texture_storage_3d']: r#151
[#243 'true']: r#151
[#243 'u32']: r#151
[#243 'vec2']: r#151
[#243 'vec3']: r#151
[#243 'vec4']: r#151
[#243 '~']: r#151
[#244 '!']: s#70
[#244 '&']: s#73
[#244 '(']: s#116
[#244 '*']: s#72
[#244 '-']: s#69
[#244 'array']: s#83
[#244 'atomic']: s#95
[#244 'bitcast']: s#78
[#244 'bool']: s#88
[#244 'f16']: s#118
[#244 'f32']: s#117
[#244 'false']: s#115
[#244 'i32']: s#119
[#244 'mat2x2']: s#100
[#244 'mat2x3']: s#101
[#244 'mat2x4']: s#102
[#244 'mat3x2']: s#103
[#244 'mat3x3']: s#104
[#244 'mat3x4']: s#105
[#244 'mat4x2']: s#106
[#244 'mat4x3']: s#107
[#244 'mat4x4']: s#108
[#244 'ptr']: s#121
[#244 'sampler']: s#135
[#244 'sampler_comparison']: s#136
[#244 'texture_1d']: s#142
[#244 'texture_2d']: s#143
[#244 'texture_2d_array']: s#144
[#244 'texture_3d']: s#145
[#244 'texture_cube']: s#146
[#244 'texture_cube_array']: s#147
[#244 'texture_depth_2d']: s#137
[#244 'texture_depth_2d_array']: s#138
[#244 'texture_depth_cube']: s#139
[#244 'texture_depth_cube_array']: s#140
[#244 'texture_depth_multisampled_2d']: s#141
[#244 'texture_multisampled_2d']: s#148
[#244 'texture_storage_1d']: s#149
[#244 'texture_storage_2d']: s#150
[#244 'texture_storage_2d_array']: s#151
[#244 'texture_storage_3d']: s#152
[#244 'true']: s#114
[#244 'u32']: s#120
[#244 'vec2']: s#97
[#244 'vec3']: s#98
[#244 'vec4']: s#99
[#244 '~']: s#71
[#244 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#244 /0[fh]/]: s#130
[#244 /0[iu]?/]: s#110
[#244 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#244 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#244 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#244 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#244 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#244 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#244 /[1-9][0-9]*[fh]/]: s#131
[#244 /[1-9][0-9]*[iu]?/]: s#111
[#245 '!']: s#70
[#245 '&']: s#73
[#245 '(']: s#116
[#245 '*']: s#72
[#245 '-']: s#69
[#245 'array']: s#83
[#245 'atomic']: s#95
[#245 'bitcast']: s#78
[#245 'bool']: s#88
[#245 'f16']: s#118
[#245 'f32']: s#117
[#245 'false']: s#115
[#245 'i32']: s#119
[#245 'mat2x2']: s#100
[#245 'mat2x3']: s#101
[#245 'mat2x4']: s#102
[#245 'mat3x2']: s#103
[#245 'mat3x3']: s#104
[#245 'mat3x4']: s#105
[#245 'mat4x2']: s#106
[#245 'mat4x3']: s#107
[#245 'mat4x4']: s#108
[#245 'ptr']: s#121
[#245 'sampler']: s#135
[#245 'sampler_comparison']: s#136
[#245 'texture_1d']: s#142
[#245 'texture_2d']: s#143
[#245 'texture_2d_array']: s#144
[#245 'texture_3d']: s#145
[#245 'texture_cube']: s#146
[#245 'texture_cube_array']: s#147
[#245 'texture_depth_2d']: s#137
[#245 'texture_depth_2d_array']: s#138
[#245 'texture_depth_cube']: s#139
[#245 'texture_depth_cube_array']: s#140
[#245 'texture_depth_multisampled_2d']: s#141
[#245 'texture_multisampled_2d']: s#148
[#245 'texture_storage_1d']: s#149
[#245 'texture_storage_2d']: s#150
[#245 'texture_storage_2d_array']: s#151
[#245 'texture_storage_3d']: s#152
[#245 'true']: s#114
[#245 'u32']: s#120
[#245 'vec2']: s#97
[#245 'vec3']: s#98
[#245 'vec4']: s#99
[#245 '~']: s#71
[#245 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#245 /0[fh]/]: s#130
[#245 /0[iu]?/]: s#110
[#245 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#245 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#245 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#245 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#245 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#245 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#245 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#245 /[1-9][0-9]*[fh]/]: s#131
[#245 /[1-9][0-9]*[iu]?/]: s#111
[#246 '!']: s#70
[#246 '&']: s#73
[#246 '(']: s#116
[#246 '*']: s#72
[#246 '-']: s#69
[#246 'array']: s#83
[#246 'atomic']: s#95
[#246 'bitcast']: s#78
[#246 'bool']: s#88
[#246 'f16']: s#118
[#246 'f32']: s#117
[#246 'false']: s#115
[#246 'i32']: s#119
[#246 'mat2x2']: s#100
[#246 'mat2x3']: s#101
[#246 'mat2x4']: s#102
[#246 'mat3x2']: s#103
[#246 'mat3x3']: s#104
[#246 'mat3x4']: s#105
[#246 'mat4x2']: s#106
[#246 'mat4x3']: s#107
[#246 'mat4x4']: s#108
[#246 'ptr']: s#121
[#246 'sampler']: s#135
[#246 'sampler_comparison']: s#136
[#246 'texture_1d']: s#142
[#246 'texture_2d']: s#143
[#246 'texture_2d_array']: s#144
[#246 'texture_3d']: s#145
[#246 'texture_cube']: s#146
[#246 'texture_cube_array']: s#147
[#246 'texture_depth_2d']: s#137
[#246 'texture_depth_2d_array']: s#138
[#246 'texture_depth_cube']: s#139
[#246 'texture_depth_cube_array']: s#140
[#246 'texture_depth_multisampled_2d']: s#141
[#246 'texture_multisampled_2d']: s#148
[#246 'texture_storage_1d']: s#149
[#246 'texture_storage_2d']: s#150
[#246 'texture_storage_2d_array']: s#151
[#246 'texture_storage_3d']: s#152
[#246 'true']: s#114
[#246 'u32']: s#120
[#246 'vec2']: s#97
[#246 'vec3']: s#98
[#246 'vec4']: s#99
[#246 '~']: s#71
[#246 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#246 /0[fh]/]: s#130
[#246 /0[iu]?/]: s#110
[#246 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#246 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#246 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#246 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#246 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#246 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#246 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#246 /[1-9][0-9]*[fh]/]: s#131
[#246 /[1-9][0-9]*[iu]?/]: s#111
[#247 'flat']: s#273
[#247 'linear']: s#272
[#247 'perspective']: s#271
[#248 '!']: s#70
[#248 '&']: s#73
[#248 '(']: s#116
[#248 '*']: s#72
[#248 '-']: s#69
[#248 'array']: s#83
[#248 'atomic']: s#95
[#248 'bitcast']: s#78
[#248 'bool']: s#88
[#248 'f16']: s#118
[#248 'f32']: s#117
[#248 'false']: s#115
[#248 'i32']: s#119
[#248 'mat2x2']: s#100
[#248 'mat2x3']: s#101
[#248 'mat2x4']: s#102
[#248 'mat3x2']: s#103
[#248 'mat3x3']: s#104
[#248 'mat3x4']: s#105
[#248 'mat4x2']: s#106
[#248 'mat4x3']: s#107
[#248 'mat4x4']: s#108
[#248 'ptr']: s#121
[#248 'sampler']: s#135
[#248 'sampler_comparison']: s#136
[#248 'texture_1d']: s#142
[#248 'texture_2d']: s#143
[#248 'texture_2d_array']: s#144
[#248 'texture_3d']: s#145
[#248 'texture_cube']: s#146
[#248 'texture_cube_array']: s#147
[#248 'texture_depth_2d']: s#137
[#248 'texture_depth_2d_array']: s#138
[#248 'texture_depth_cube']: s#139
[#248 'texture_depth_cube_array']: s#140
[#248 'texture_depth_multisampled_2d']: s#141
[#248 'texture_multisampled_2d']: s#148
[#248 'texture_storage_1d']: s#149
[#248 'texture_storage_2d']: s#150
[#248 'texture_storage_2d_array']: s#151
[#248 'texture_storage_3d']: s#152
[#248 'true']: s#114
[#248 'u32']: s#120
[#248 'vec2']: s#97
[#248 'vec3']: s#98
[#248 'vec4']: s#99
[#248 '~']: s#71
[#248 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#248 /0[fh]/]: s#130
[#248 /0[iu]?/]: s#110
[#248 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#248 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#248 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#248 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#248 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#248 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#248 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#248 /[1-9][0-9]*[fh]/]: s#131
[#248 /[1-9][0-9]*[iu]?/]: s#111
[#249 '!']: s#70
[#249 '&']: s#73
[#249 '(']: s#116
[#249 '*']: s#72
[#249 '-']: s#69
[#249 'array']: s#83
[#249 'atomic']: s#95
[#249 'bitcast']: s#78
[#249 'bool']: s#88
[#249 'f16']: s#118
[#249 'f32']: s#117
[#249 'false']: s#115
[#249 'i32']: s#119
[#249 'mat2x2']: s#100
[#249 'mat2x3']: s#101
[#249 'mat2x4']: s#102
[#249 'mat3x2']: s#103
[#249 'mat3x3']: s#104
[#249 'mat3x4']: s#105
[#249 'mat4x2']: s#106
[#249 'mat4x3']: s#107
[#249 'mat4x4']: s#108
[#249 'ptr']: s#121
[#249 'sampler']: s#135
[#249 'sampler_comparison']: s#136
[#249 'texture_1d']: s#142
[#249 'texture_2d']: s#143
[#249 'texture_2d_array']: s#144
[#249 'texture_3d']: s#145
[#249 'texture_cube']: s#146
[#249 'texture_cube_array']: s#147
[#249 'texture_depth_2d']: s#137
[#249 'texture_depth_2d_array']: s#138
[#249 'texture_depth_cube']: s#139
[#249 'texture_depth_cube_array']: s#140
[#249 'texture_depth_multisampled_2d']: s#141
[#249 'texture_multisampled_2d']: s#148
[#249 'texture_storage_1d']: s#149
[#249 'texture_storage_2d']: s#150
[#249 'texture_storage_2d_array']: s#151
[#249 'texture_storage_3d']: s#152
[#249 'true']: s#114
[#249 'u32']: s#120
[#249 'vec2']: s#97
[#249 'vec3']: s#98
[#249 'vec4']: s#99
[#249 '~']: s#71
[#249 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#249 /0[fh]/]: s#130
[#249 /0[iu]?/]: s#110
[#249 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#249 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#249 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#249 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#249 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#249 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#249 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#249 /[1-9][0-9]*[fh]/]: s#131
[#249 /[1-9][0-9]*[iu]?/]: s#111
[#250 'frag_depth']: s#260
[#250 'front_facing']: s#259
[#250 'global_invocation_id']: s#263
[#250 'instance_index']: s#257
[#250 'local_invocation_id']: s#261
[#250 'local_invocation_index']: s#262
[#250 'num_workgroups']: s#265
[#250 'position']: s#258
[#250 'sample_index']: s#266
[#250 'sample_mask']: s#267
[#250 'vertex_index']: s#256
[#250 'workgroup_id']: s#264
[#251 '!']: s#70
[#251 '&']: s#73
[#251 '(']: s#116
[#251 '*']: s#72
[#251 '-']: s#69
[#251 'array']: s#83
[#251 'atomic']: s#95
[#251 'bitcast']: s#78
[#251 'bool']: s#88
[#251 'f16']: s#118
[#251 'f32']: s#117
[#251 'false']: s#115
[#251 'i32']: s#119
[#251 'mat2x2']: s#100
[#251 'mat2x3']: s#101
[#251 'mat2x4']: s#102
[#251 'mat3x2']: s#103
[#251 'mat3x3']: s#104
[#251 'mat3x4']: s#105
[#251 'mat4x2']: s#106
[#251 'mat4x3']: s#107
[#251 'mat4x4']: s#108
[#251 'ptr']: s#121
[#251 'sampler']: s#135
[#251 'sampler_comparison']: s#136
[#251 'texture_1d']: s#142
[#251 'texture_2d']: s#143
[#251 'texture_2d_array']: s#144
[#251 'texture_3d']: s#145
[#251 'texture_cube']: s#146
[#251 'texture_cube_array']: s#147
[#251 'texture_depth_2d']: s#137
[#251 'texture_depth_2d_array']: s#138
[#251 'texture_depth_cube']: s#139
[#251 'texture_depth_cube_array']: s#140
[#251 'texture_depth_multisampled_2d']: s#141
[#251 'texture_multisampled_2d']: s#148
[#251 'texture_storage_1d']: s#149
[#251 'texture_storage_2d']: s#150
[#251 'texture_storage_2d_array']: s#151
[#251 'texture_storage_3d']: s#152
[#251 'true']: s#114
[#251 'u32']: s#120
[#251 'vec2']: s#97
[#251 'vec3']: s#98
[#251 'vec4']: s#99
[#251 '~']: s#71
[#251 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#251 /0[fh]/]: s#130
[#251 /0[iu]?/]: s#110
[#251 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#251 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#251 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#251 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#251 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#251 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#251 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#251 /[1-9][0-9]*[fh]/]: s#131
[#251 /[1-9][0-9]*[iu]?/]: s#111
[#252 '!']: s#70
[#252 '&']: s#73
[#252 '(']: s#116
[#252 '*']: s#72
[#252 '-']: s#69
[#252 'array']: s#83
[#252 'atomic']: s#95
[#252 'bitcast']: s#78
[#252 'bool']: s#88
[#252 'f16']: s#118
[#252 'f32']: s#117
[#252 'false']: s#115
[#252 'i32']: s#119
[#252 'mat2x2']: s#100
[#252 'mat2x3']: s#101
[#252 'mat2x4']: s#102
[#252 'mat3x2']: s#103
[#252 'mat3x3']: s#104
[#252 'mat3x4']: s#105
[#252 'mat4x2']: s#106
[#252 'mat4x3']: s#107
[#252 'mat4x4']: s#108
[#252 'ptr']: s#121
[#252 'sampler']: s#135
[#252 'sampler_comparison']: s#136
[#252 'texture_1d']: s#142
[#252 'texture_2d']: s#143
[#252 'texture_2d_array']: s#144
[#252 'texture_3d']: s#145
[#252 'texture_cube']: s#146
[#252 'texture_cube_array']: s#147
[#252 'texture_depth_2d']: s#137
[#252 'texture_depth_2d_array']: s#138
[#252 'texture_depth_cube']: s#139
[#252 'texture_depth_cube_array']: s#140
[#252 'texture_depth_multisampled_2d']: s#141
[#252 'texture_multisampled_2d']: s#148
[#252 'texture_storage_1d']: s#149
[#252 'texture_storage_2d']: s#150
[#252 'texture_storage_2d_array']: s#151
[#252 'texture_storage_3d']: s#152
[#252 'true']: s#114
[#252 'u32']: s#120
[#252 'vec2']: s#97
[#252 'vec3']: s#98
[#252 'vec4']: s#99
[#252 '~']: s#71
[#252 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#252 /0[fh]/]: s#130
[#252 /0[iu]?/]: s#110
[#252 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#252 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#252 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#252 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#252 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#252 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#252 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#252 /[1-9][0-9]*[fh]/]: s#131
[#252 /[1-9][0-9]*[iu]?/]: s#111
[#253 ',']: s#412
[#254 ',']: s#412
[#255 ',']: s#412
[#256 ')']: r#152
[#256 ',']: r#152
[#257 ')']: r#153
[#257 ',']: r#153
[#258 ')']: r#154
[#258 ',']: r#154
[#259 ')']: r#155
[#259 ',']: r#155
[#260 ')']: r#156
[#260 ',']: r#156
[#261 ')']: r#157
[#261 ',']: r#157
[#262 ')']: r#158
[#262 ',']: r#158
[#263 ')']: r#159
[#263 ',']: r#159
[#264 ')']: r#160
[#264 ',']: r#160
[#265 ')']: r#161
[#265 ',']: r#161
[#266 ')']: r#162
[#266 ',']: r#162
[#267 ')']: r#163
[#267 ',']: r#163
[#268 ',']: s#412
[#269 ',']: s#412
[#270 ',']: s#412
[#271 ')']: r#164
[#271 ',']: r#164
[#272 ')']: r#165
[#272 ',']: r#165
[#273 ')']: r#166
[#273 ',']: r#166
[#274 ',']: s#412
[#275 ',']: s#412
[#276 ',']: s#412
[#277 ')']: r#167
[#277 ',']: r#167
[#277 ':']: r#167
[#277 ';']: r#167
[#277 ']']: r#167
[#277 '{']: r#167
[#277 '||']: r#168
[#278 '!=']: r#31
[#278 '%']: r#31
[#278 '&&']: r#31
[#278 ')']: r#31
[#278 '*']: r#31
[#278 '+']: r#31
[#278 ',']: r#31
[#278 '-']: r#31
[#278 '/']: r#31
[#278 ':']: r#31
[#278 ';']: r#31
[#278 '<']: r#31
[#278 '<<']: s#219
[#278 '<=']: r#31
[#278 '==']: r#31
[#278 '>']: r#31
[#278 '>=']: r#31
[#278 '>>']: s#220
[#278 ']']: r#31
[#278 '{']: r#31
[#278 '||']: r#31
[#279 '&&']: r#170
[#279 ')']: r#169
[#279 ',']: r#169
[#279 ':']: r#169
[#279 ';']: r#169
[#279 ']']: r#169
[#279 '{']: r#169
[#280 '&&']: r#171
[#280 ')']: r#171
[#280 ',']: r#171
[#280 ':']: r#171
[#280 ';']: r#171
[#280 ']']: r#171
[#280 '{']: r#171
[#280 '||']: r#171
[#281 '&&']: r#172
[#281 ')']: r#172
[#281 ',']: r#172
[#281 ':']: r#172
[#281 ';']: r#172
[#281 ']']: r#172
[#281 '{']: r#172
[#281 '||']: r#172
[#282 '&&']: r#173
[#282 ')']: r#173
[#282 ',']: r#173
[#282 ':']: r#173
[#282 ';']: r#173
[#282 ']']: r#173
[#282 '{']: r#173
[#282 '||']: r#173
[#283 '&&']: r#174
[#283 ')']: r#174
[#283 ',']: r#174
[#283 ':']: r#174
[#283 ';']: r#174
[#283 ']']: r#174
[#283 '{']: r#174
[#283 '||']: r#174
[#284 '&&']: r#175
[#284 ')']: r#175
[#284 ',']: r#175
[#284 ':']: r#175
[#284 ';']: r#175
[#284 ']']: r#175
[#284 '{']: r#175
[#284 '||']: r#175
[#285 '&&']: r#176
[#285 ')']: r#176
[#285 ',']: r#176
[#285 ':']: r#176
[#285 ';']: r#176
[#285 ']']: r#176
[#285 '{']: r#176
[#285 '||']: r#176
[#286 '&']: r#178
[#286 ')']: r#177
[#286 ',']: r#177
[#286 ':']: r#177
[#286 ';']: r#177
[#286 '>']: r#177
[#286 ']']: r#177
[#286 '{']: r#177
[#287 ')']: r#179
[#287 ',']: r#179
[#287 ':']: r#179
[#287 ';']: r#179
[#287 '>']: r#179
[#287 ']']: r#179
[#287 '{']: r#179
[#287 '|']: r#180
[#288 ')']: r#181
[#288 ',']: r#181
[#288 ':']: r#181
[#288 ';']: r#181
[#288 '>']: r#181
[#288 ']']: r#181
[#288 '^']: r#182
[#288 '{']: r#181
[#289 '!=']: r#183
[#289 '%']: s#216
[#289 '&&']: r#183
[#289 ')']: r#183
[#289 '*']: s#72
[#289 '+']: r#183
[#289 ',']: r#183
[#289 '-']: r#183
[#289 '/']: s#215
[#289 ':']: r#183
[#289 ';']: r#183
[#289 '<']: r#183
[#289 '<=']: r#183
[#289 '==']: r#183
[#289 '>']: r#183
[#289 '>=']: r#183
[#289 ']']: r#183
[#289 '{']: r#183
[#289 '||']: r#183
[#290 '!=']: r#31
[#290 '%']: r#31
[#290 '&&']: r#31
[#290 ')']: r#31
[#290 '*']: r#31
[#290 '+']: r#31
[#290 ',']: r#31
[#290 '-']: r#31
[#290 '/']: r#31
[#290 ':']: r#31
[#290 ';']: r#31
[#290 '<']: r#31
[#290 '<=']: r#31
[#290 '==']: r#31
[#290 '>']: r#31
[#290 '>=']: r#31
[#290 ']']: r#31
[#290 '{']: r#31
[#290 '||']: r#31
[#291 '!=']: r#184
[#291 '%']: s#216
[#291 '&&']: r#184
[#291 ')']: r#184
[#291 '*']: s#72
[#291 '+']: r#184
[#291 ',']: r#184
[#291 '-']: r#184
[#291 '/']: s#215
[#291 ':']: r#184
[#291 ';']: r#184
[#291 '<']: r#184
[#291 '<=']: r#184
[#291 '==']: r#184
[#291 '>']: r#184
[#291 '>=']: r#184
[#291 ']']: r#184
[#291 '{']: r#184
[#291 '||']: r#184
[#292 '!=']: r#185
[#292 '&&']: r#185
[#292 ')']: r#185
[#292 ',']: r#185
[#292 ':']: r#185
[#292 ';']: r#185
[#292 '<']: r#185
[#292 '<=']: r#185
[#292 '==']: r#185
[#292 '>']: r#185
[#292 '>=']: r#185
[#292 ']']: r#185
[#292 '{']: r#185
[#292 '||']: r#185
[#293 '!=']: r#186
[#293 '&&']: r#186
[#293 ')']: r#186
[#293 ',']: r#186
[#293 ':']: r#186
[#293 ';']: r#186
[#293 '<']: r#186
[#293 '<=']: r#186
[#293 '==']: r#186
[#293 '>']: r#186
[#293 '>=']: r#186
[#293 ']']: r#186
[#293 '{']: r#186
[#293 '||']: r#186
[#294 '!=']: r#187
[#294 '%']: r#187
[#294 '&&']: r#187
[#294 ')']: r#187
[#294 '*']: r#187
[#294 '+']: r#187
[#294 ',']: r#187
[#294 '-']: r#187
[#294 '/']: r#187
[#294 ':']: r#187
[#294 ';']: r#187
[#294 '<']: r#187
[#294 '<=']: r#187
[#294 '==']: r#187
[#294 '>']: r#187
[#294 '>=']: r#187
[#294 ']']: r#187
[#294 '{']: r#187
[#294 '||']: r#187
[#295 '!=']: r#188
[#295 '%']: r#188
[#295 '&&']: r#188
[#295 ')']: r#188
[#295 '*']: r#188
[#295 '+']: r#188
[#295 ',']: r#188
[#295 '-']: r#188
[#295 '/']: r#188
[#295 ':']: r#188
[#295 ';']: r#188
[#295 '<']: r#188
[#295 '<=']: r#188
[#295 '==']: r#188
[#295 '>']: r#188
[#295 '>=']: r#188
[#295 ']']: r#188
[#295 '{']: r#188
[#295 '||']: r#188
[#296 '!=']: r#189
[#296 '%']: r#189
[#296 '&&']: r#189
[#296 ')']: r#189
[#296 '*']: r#189
[#296 '+']: r#189
[#296 ',']: r#189
[#296 '-']: r#189
[#296 '/']: r#189
[#296 ':']: r#189
[#296 ';']: r#189
[#296 '<']: r#189
[#296 '<=']: r#189
[#296 '==']: r#189
[#296 '>']: r#189
[#296 '>=']: r#189
[#296 ']']: r#189
[#296 '{']: r#189
[#296 '||']: r#189
[#297 '.']: s#206
[#297 '[']: s#205
[#298 '.']: s#206
[#298 '[']: s#205
[#299 '!=']: r#190
[#299 '%']: r#190
[#299 '%=']: r#190
[#299 '&&']: r#190
[#299 '&']: r#190
[#299 '&=']: r#190
[#299 ')']: r#190
[#299 '*']: r#190
[#299 '*=']: r#190
[#299 '+']: r#190
[#299 '++']: r#190
[#299 '+=']: r#190
[#299 ',']: r#190
[#299 '-']: r#190
[#299 '--']: r#190
[#299 '-=']: r#190
[#299 '.']: r#190
[#299 '/']: r#190
[#299 '/=']: r#190
[#299 ':']: r#190
[#299 ';']: r#190
[#299 '<']: r#190
[#299 '<<']: r#190
[#299 '<<=']: r#190
[#299 '<=']: r#190
[#299 '=']: r#190
[#299 '==']: r#190
[#299 '>']: r#190
[#299 '>=']: r#190
[#299 '>>']: r#190
[#299 '>>=']: r#190
[#299 '[']: r#190
[#299 ']']: r#190
[#299 '^']: r#190
[#299 '^=']: r#190
[#299 '{']: r#190
[#299 '|']: r#190
[#299 '|=']: r#190
[#299 '||']: r#190
[#300 '!=']: r#191
[#300 '%']: r#191
[#300 '%=']: r#191
[#300 '&&']: r#191
[#300 '&']: r#191
[#300 '&=']: r#191
[#300 ')']: r#191
[#300 '*']: r#191
[#300 '*=']: r#191
[#300 '+']: r#191
[#300 '++']: r#191
[#300 '+=']: r#191
[#300 ',']: r#191
[#300 '-']: r#191
[#300 '--']: r#191
[#300 '-=']: r#191
[#300 '.']: r#191
[#300 '/']: r#191
[#300 '/=']: r#191
[#300 ':']: r#191
[#300 ';']: r#191
[#300 '<']: r#191
[#300 '<<']: r#191
[#300 '<<=']: r#191
[#300 '<=']: r#191
[#300 '=']: r#191
[#300 '==']: r#191
[#300 '>']: r#191
[#300 '>=']: r#191
[#300 '>>']: r#191
[#300 '>>=']: r#191
[#300 '[']: r#191
[#300 ']']: r#191
[#300 '^']: r#191
[#300 '^=']: r#191
[#300 '{']: r#191
[#300 '|']: r#191
[#300 '|=']: r#191
[#300 '||']: r#191
[#301 '!=']: r#192
[#301 '%']: r#192
[#301 '%=']: r#192
[#301 '&&']: r#192
[#301 '&']: r#192
[#301 '&=']: r#192
[#301 ')']: r#192
[#301 '*']: r#192
[#301 '*=']: r#192
[#301 '+']: r#192
[#301 '++']: r#192
[#301 '+=']: r#192
[#301 ',']: r#192
[#301 '-']: r#192
[#301 '--']: r#192
[#301 '-=']: r#192
[#301 '.']: r#192
[#301 '/']: r#192
[#301 '/=']: r#192
[#301 ':']: r#192
[#301 ';']: r#192
[#301 '<']: r#192
[#301 '<<']: r#192
[#301 '<<=']: r#192
[#301 '<=']: r#192
[#301 '=']: r#192
[#301 '==']: r#192
[#301 '>']: r#192
[#301 '>=']: r#192
[#301 '>>']: r#192
[#301 '>>=']: r#192
[#301 '[']: r#192
[#301 ']']: r#192
[#301 '^']: r#192
[#301 '^=']: r#192
[#301 '{']: r#192
[#301 '|']: r#192
[#301 '|=']: r#192
[#301 '||']: r#192
[#302 '!=']: r#193
[#302 '%']: r#193
[#302 '%=']: r#193
[#302 '&&']: r#193
[#302 '&']: r#193
[#302 '&=']: r#193
[#302 ')']: r#193
[#302 '*']: r#193
[#302 '*=']: r#193
[#302 '+']: r#193
[#302 '++']: r#193
[#302 '+=']: r#193
[#302 ',']: r#193
[#302 '-']: r#193
[#302 '--']: r#193
[#302 '-=']: r#193
[#302 '.']: r#193
[#302 '/']: r#193
[#302 '/=']: r#193
[#302 ':']: r#193
[#302 ';']: r#193
[#302 '<']: r#193
[#302 '<<']: r#193
[#302 '<<=']: r#193
[#302 '<=']: r#193
[#302 '=']: r#193
[#302 '==']: r#193
[#302 '>']: r#193
[#302 '>=']: r#193
[#302 '>>']: r#193
[#302 '>>=']: r#193
[#302 '[']: r#193
[#302 ']']: r#193
[#302 '^']: r#193
[#302 '^=']: r#193
[#302 '{']: r#193
[#302 '|']: r#193
[#302 '|=']: r#193
[#302 '||']: r#193
[#303 '!=']: r#194
[#303 '%']: r#194
[#303 '%=']: r#194
[#303 '&&']: r#194
[#303 '&']: r#194
[#303 '&=']: r#194
[#303 ')']: r#194
[#303 '*']: r#194
[#303 '*=']: r#194
[#303 '+']: r#194
[#303 '++']: r#194
[#303 '+=']: r#194
[#303 ',']: r#194
[#303 '-']: r#194
[#303 '--']: r#194
[#303 '-=']: r#194
[#303 '.']: r#194
[#303 '/']: r#194
[#303 '/=']: r#194
[#303 ':']: r#194
[#303 ';']: r#194
[#303 '<']: r#194
[#303 '<<']: r#194
[#303 '<<=']: r#194
[#303 '<=']: r#194
[#303 '=']: r#194
[#303 '==']: r#194
[#303 '>']: r#194
[#303 '>=']: r#194
[#303 '>>']: r#194
[#303 '>>=']: r#194
[#303 '[']: r#194
[#303 ']']: r#194
[#303 '^']: r#194
[#303 '^=']: r#194
[#303 '{']: r#194
[#303 '|']: r#194
[#303 '|=']: r#194
[#303 '||']: r#194
[#304 '!=']: r#195
[#304 '%']: r#195
[#304 '%=']: r#195
[#304 '&&']: r#195
[#304 '&']: r#195
[#304 '&=']: r#195
[#304 ')']: r#195
[#304 '*']: r#195
[#304 '*=']: r#195
[#304 '+']: r#195
[#304 '++']: r#195
[#304 '+=']: r#195
[#304 ',']: r#195
[#304 '-']: r#195
[#304 '--']: r#195
[#304 '-=']: r#195
[#304 '.']: r#195
[#304 '/']: r#195
[#304 '/=']: r#195
[#304 ':']: r#195
[#304 ';']: r#195
[#304 '<']: r#195
[#304 '<<']: r#195
[#304 '<<=']: r#195
[#304 '<=']: r#195
[#304 '=']: r#195
[#304 '==']: r#195
[#304 '>']: r#195
[#304 '>=']: r#195
[#304 '>>']: r#195
[#304 '>>=']: r#195
[#304 '[']: r#195
[#304 ']']: r#195
[#304 '^']: r#195
[#304 '^=']: r#195
[#304 '{']: r#195
[#304 '|']: r#195
[#304 '|=']: r#195
[#304 '||']: r#195
[#305 '!=']: r#196
[#305 '%']: r#196
[#305 '%=']: r#196
[#305 '&&']: r#196
[#305 '&']: r#196
[#305 '&=']: r#196
[#305 ')']: r#196
[#305 '*']: r#196
[#305 '*=']: r#196
[#305 '+']: r#196
[#305 '++']: r#196
[#305 '+=']: r#196
[#305 ',']: r#196
[#305 '-']: r#196
[#305 '--']: r#196
[#305 '-=']: r#196
[#305 '.']: r#196
[#305 '/']: r#196
[#305 '/=']: r#196
[#305 ':']: r#196
[#305 ';']: r#196
[#305 '<']: r#196
[#305 '<<']: r#196
[#305 '<<=']: r#196
[#305 '<=']: r#196
[#305 '=']: r#196
[#305 '==']: r#196
[#305 '>']: r#196
[#305 '>=']: r#196
[#305 '>>']: r#196
[#305 '>>=']: r#196
[#305 '[']: r#196
[#305 ']']: r#196
[#305 '^']: r#196
[#305 '^=']: r#196
[#305 '{']: r#196
[#305 '|']: r#196
[#305 '|=']: r#196
[#305 '||']: r#196
[#306 '!=']: r#197
[#306 '%']: r#197
[#306 '%=']: r#197
[#306 '&&']: r#197
[#306 '&']: r#197
[#306 '&=']: r#197
[#306 ')']: r#197
[#306 '*']: r#197
[#306 '*=']: r#197
[#306 '+']: r#197
[#306 '++']: r#197
[#306 '+=']: r#197
[#306 ',']: r#197
[#306 '-']: r#197
[#306 '--']: r#197
[#306 '-=']: r#197
[#306 '.']: r#197
[#306 '/']: r#197
[#306 '/=']: r#197
[#306 ':']: r#197
[#306 ';']: r#197
[#306 '<']: r#197
[#306 '<<']: r#197
[#306 '<<=']: r#197
[#306 '<=']: r#197
[#306 '=']: r#197
[#306 '==']: r#197
[#306 '>']: r#197
[#306 '>=']: r#197
[#306 '>>']: r#197
[#306 '>>=']: r#197
[#306 '[']: r#197
[#306 ']']: r#197
[#306 '^']: r#197
[#306 '^=']: r#197
[#306 '{']: r#197
[#306 '|']: r#197
[#306 '|=']: r#197
[#306 '||']: r#197
[#307 '!=']: r#198
[#307 '%']: r#198
[#307 '%=']: r#198
[#307 '&&']: r#198
[#307 '&']: r#198
[#307 '&=']: r#198
[#307 ')']: r#198
[#307 '*']: r#198
[#307 '*=']: r#198
[#307 '+']: r#198
[#307 '++']: r#198
[#307 '+=']: r#198
[#307 ',']: r#198
[#307 '-']: r#198
[#307 '--']: r#198
[#307 '-=']: r#198
[#307 '.']: r#198
[#307 '/']: r#198
[#307 '/=']: r#198
[#307 ':']: r#198
[#307 ';']: r#198
[#307 '<']: r#198
[#307 '<<']: r#198
[#307 '<<=']: r#198
[#307 '<=']: r#198
[#307 '=']: r#198
[#307 '==']: r#198
[#307 '>']: r#198
[#307 '>=']: r#198
[#307 '>>']: r#198
[#307 '>>=']: r#198
[#307 '[']: r#198
[#307 ']']: r#198
[#307 '^']: r#198
[#307 '^=']: r#198
[#307 '{']: r#198
[#307 '|']: r#198
[#307 '|=']: r#198
[#307 '||']: r#198
[#308 ']']: s#507
[#309 ')']: s#324
[#310 '!']: s#70
[#310 '&']: s#73
[#310 '(']: s#116
[#310 '*']: s#72
[#310 '-']: s#69
[#310 'array']: s#83
[#310 'atomic']: s#95
[#310 'bitcast']: s#78
[#310 'bool']: s#88
[#310 'f16']: s#118
[#310 'f32']: s#117
[#310 'false']: s#115
[#310 'i32']: s#119
[#310 'mat2x2']: s#100
[#310 'mat2x3']: s#101
[#310 'mat2x4']: s#102
[#310 'mat3x2']: s#103
[#310 'mat3x3']: s#104
[#310 'mat3x4']: s#105
[#310 'mat4x2']: s#106
[#310 'mat4x3']: s#107
[#310 'mat4x4']: s#108
[#310 'ptr']: s#121
[#310 'sampler']: s#135
[#310 'sampler_comparison']: s#136
[#310 'texture_1d']: s#142
[#310 'texture_2d']: s#143
[#310 'texture_2d_array']: s#144
[#310 'texture_3d']: s#145
[#310 'texture_cube']: s#146
[#310 'texture_cube_array']: s#147
[#310 'texture_depth_2d']: s#137
[#310 'texture_depth_2d_array']: s#138
[#310 'texture_depth_cube']: s#139
[#310 'texture_depth_cube_array']: s#140
[#310 'texture_depth_multisampled_2d']: s#141
[#310 'texture_multisampled_2d']: s#148
[#310 'texture_storage_1d']: s#149
[#310 'texture_storage_2d']: s#150
[#310 'texture_storage_2d_array']: s#151
[#310 'texture_storage_3d']: s#152
[#310 'true']: s#114
[#310 'u32']: s#120
[#310 'vec2']: s#97
[#310 'vec3']: s#98
[#310 'vec4']: s#99
[#310 '~']: s#71
[#310 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#310 /0[fh]/]: s#130
[#310 /0[iu]?/]: s#110
[#310 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#310 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#310 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#310 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#310 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#310 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#310 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#310 /[1-9][0-9]*[fh]/]: s#131
[#310 /[1-9][0-9]*[iu]?/]: s#111
[#311 '!']: r#199
[#311 '&']: r#199
[#311 '(']: r#199
[#311 '*']: r#199
[#311 '-']: r#199
[#311 'array']: r#199
[#311 'atomic']: r#199
[#311 'bitcast']: r#199
[#311 'bool']: r#199
[#311 'f16']: r#199
[#311 'f32']: r#199
[#311 'false']: r#199
[#311 'i32']: r#199
[#311 'mat2x2']: r#199
[#311 'mat2x3']: r#199
[#311 'mat2x4']: r#199
[#311 'mat3x2']: r#199
[#311 'mat3x3']: r#199
[#311 'mat3x4']: r#199
[#311 'mat4x2']: r#199
[#311 'mat4x3']: r#199
[#311 'mat4x4']: r#199
[#311 'ptr']: r#199
[#311 'sampler']: r#199
[#311 'sampler_comparison']: r#199
[#311 'texture_1d']: r#199
[#311 'texture_2d']: r#199
[#311 'texture_2d_array']: r#199
[#311 'texture_3d']: r#199
[#311 'texture_cube']: r#199
[#311 'texture_cube_array']: r#199
[#311 'texture_depth_2d']: r#199
[#311 'texture_depth_2d_array']: r#199
[#311 'texture_depth_cube']: r#199
[#311 'texture_depth_cube_array']: r#199
[#311 'texture_depth_multisampled_2d']: r#199
[#311 'texture_multisampled_2d']: r#199
[#311 'texture_storage_1d']: r#199
[#311 'texture_storage_2d']: r#199
[#311 'texture_storage_2d_array']: r#199
[#311 'texture_storage_3d']: r#199
[#311 'true']: r#199
[#311 'u32']: r#199
[#311 'vec2']: r#199
[#311 'vec3']: r#199
[#311 'vec4']: r#199
[#311 '~']: r#199
[#312 '!']: s#70
[#312 '&']: s#73
[#312 '(']: s#116
[#312 '*']: s#72
[#312 '-']: s#69
[#312 'array']: s#83
[#312 'atomic']: s#95
[#312 'bitcast']: s#78
[#312 'bool']: s#88
[#312 'f16']: s#118
[#312 'f32']: s#117
[#312 'false']: s#115
[#312 'i32']: s#119
[#312 'mat2x2']: s#100
[#312 'mat2x3']: s#101
[#312 'mat2x4']: s#102
[#312 'mat3x2']: s#103
[#312 'mat3x3']: s#104
[#312 'mat3x4']: s#105
[#312 'mat4x2']: s#106
[#312 'mat4x3']: s#107
[#312 'mat4x4']: s#108
[#312 'ptr']: s#121
[#312 'sampler']: s#135
[#312 'sampler_comparison']: s#136
[#312 'texture_1d']: s#142
[#312 'texture_2d']: s#143
[#312 'texture_2d_array']: s#144
[#312 'texture_3d']: s#145
[#312 'texture_cube']: s#146
[#312 'texture_cube_array']: s#147
[#312 'texture_depth_2d']: s#137
[#312 'texture_depth_2d_array']: s#138
[#312 'texture_depth_cube']: s#139
[#312 'texture_depth_cube_array']: s#140
[#312 'texture_depth_multisampled_2d']: s#141
[#312 'texture_multisampled_2d']: s#148
[#312 'texture_storage_1d']: s#149
[#312 'texture_storage_2d']: s#150
[#312 'texture_storage_2d_array']: s#151
[#312 'texture_storage_3d']: s#152
[#312 'true']: s#114
[#312 'u32']: s#120
[#312 'vec2']: s#97
[#312 'vec3']: s#98
[#312 'vec4']: s#99
[#312 '~']: s#71
[#312 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#312 /0[fh]/]: s#130
[#312 /0[iu]?/]: s#110
[#312 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#312 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#312 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#312 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#312 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#312 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#312 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#312 /[1-9][0-9]*[fh]/]: s#131
[#312 /[1-9][0-9]*[iu]?/]: s#111
[#313 ',']: s#412
[#314 '>']: s#235
[#315 ')']: r#200
[#315 ',']: r#200
[#315 ';']: r#200
[#315 '=']: r#200
[#315 '>']: r#200
[#315 '{']: r#200
[#315 '}']: r#200
[#316 ')']: r#201
[#316 ',']: r#201
[#316 ';']: r#201
[#316 '=']: r#201
[#316 '>']: r#201
[#316 '{']: r#201
[#316 '}']: r#201
[#317 '<']: s#172
[#318 '<']: s#172
[#319 '<']: s#172
[#320 '>']: s#235
[#321 '>']: s#235
[#322 ',']: s#412
[#323 '!=']: r#202
[#323 '%']: r#202
[#323 '&&']: r#202
[#323 '&']: r#202
[#323 ')']: r#202
[#323 '*']: r#202
[#323 '+']: r#202
[#323 ',']: r#202
[#323 '-']: r#202
[#323 '.']: r#202
[#323 '/']: r#202
[#323 ':']: r#202
[#323 ';']: r#202
[#323 '<']: r#202
[#323 '<<']: r#202
[#323 '<=']: r#202
[#323 '==']: r#202
[#323 '>']: r#202
[#323 '>=']: r#202
[#323 '>>']: r#202
[#323 '[']: r#202
[#323 ']']: r#202
[#323 '^']: r#202
[#323 '{']: r#202
[#323 '|']: r#202
[#323 '||']: r#202
[#324 '!=']: r#203
[#324 '%']: r#203
[#324 '%=']: r#203
[#324 '&&']: r#203
[#324 '&']: r#203
[#324 '&=']: r#203
[#324 ')']: r#203
[#324 '*']: r#203
[#324 '*=']: r#203
[#324 '+']: r#203
[#324 '++']: r#203
[#324 '+=']: r#203
[#324 ',']: r#203
[#324 '-']: r#203
[#324 '--']: r#203
[#324 '-=']: r#203
[#324 '->']: r#203
[#324 '.']: r#203
[#324 '/']: r#203
[#324 '/=']: r#203
[#324 ':']: r#203
[#324 ';']: r#203
[#324 '<']: r#203
[#324 '<<']: r#203
[#324 '<<=']: r#203
[#324 '<=']: r#203
[#324 '=']: r#203
[#324 '==']: r#203
[#324 '>']: r#203
[#324 '>=']: r#203
[#324 '>>']: r#203
[#324 '>>=']: r#203
[#324 '@']: r#203
[#324 '[']: r#203
[#324 ']']: r#203
[#324 '^']: r#203
[#324 '^=']: r#203
[#324 'array']: r#203
[#324 'atomic']: r#203
[#324 'bool']: r#203
[#324 'f16']: r#203
[#324 'f32']: r#203
[#324 'fn']: r#203
[#324 'i32']: r#203
[#324 'mat2x2']: r#203
[#324 'mat2x3']: r#203
[#324 'mat2x4']: r#203
[#324 'mat3x2']: r#203
[#324 'mat3x3']: r#203
[#324 'mat3x4']: r#203
[#324 'mat4x2']: r#203
[#324 'mat4x3']: r#203
[#324 'mat4x4']: r#203
[#324 'override']: r#203
[#324 'ptr']: r#203
[#324 'sampler']: r#203
[#324 'sampler_comparison']: r#203
[#324 'texture_1d']: r#203
[#324 'texture_2d']: r#203
[#324 'texture_2d_array']: r#203
[#324 'texture_3d']: r#203
[#324 'texture_cube']: r#203
[#324 'texture_cube_array']: r#203
[#324 'texture_depth_2d']: r#203
[#324 'texture_depth_2d_array']: r#203
[#324 'texture_depth_cube']: r#203
[#324 'texture_depth_cube_array']: r#203
[#324 'texture_depth_multisampled_2d']: r#203
[#324 'texture_multisampled_2d']: r#203
[#324 'texture_storage_1d']: r#203
[#324 'texture_storage_2d']: r#203
[#324 'texture_storage_2d_array']: r#203
[#324 'texture_storage_3d']: r#203
[#324 'u32']: r#203
[#324 'var']: r#203
[#324 'vec2']: r#203
[#324 'vec3']: r#203
[#324 'vec4']: r#203
[#324 '{']: r#203
[#324 '|']: r#203
[#324 '|=']: r#203
[#324 '||']: r#203
[#324 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#203
[#325 ',']: s#412
[#326 ',']: r#204
[#326 '>']: r#204
[#327 ',']: r#205
[#327 '>']: r#205
[#328 ',']: r#206
[#328 '>']: r#206
[#329 ',']: r#207
[#329 '>']: r#207
[#330 ',']: r#208
[#330 '>']: r#208
[#331 '>']: s#235
[#332 '>']: s#235
[#333 '>']: s#235
[#334 ',']: s#412
[#335 ',']: r#209
[#336 ',']: r#210
[#337 ',']: r#211
[#338 ',']: r#212
[#339 ',']: r#213
[#340 ',']: r#214
[#341 ',']: r#215
[#342 ',']: r#216
[#343 ',']: r#217
[#344 ',']: r#218
[#345 ',']: r#219
[#346 ',']: r#220
[#347 ',']: r#221
[#348 ',']: r#222
[#349 ',']: r#223
[#350 ',']: r#224
[#351 '}']: s#491
[#352 '}']: r#225
[#353 '&']: s#73
[#353 '*']: s#72
[#353 ';']: s#19
[#353 '_']: s#387
[#353 'break']: s#381
[#353 'const']: s#380
[#353 'continue']: s#382
[#353 'discard']: s#365
[#353 'for']: s#375
[#353 'if']: s#385
[#353 'let']: s#379
[#353 'loop']: s#374
[#353 'return']: s#371
[#353 'static_assert']: s#26
[#353 'switch']: s#373
[#353 'var']: s#162
[#353 'while']: s#376
[#353 '{']: s#185
[#353 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#354 '&']: r#226
[#354 '(']: r#226
[#354 '*']: r#226
[#354 ';']: r#226
[#354 '_']: r#226
[#354 'break']: r#226
[#354 'const']: r#226
[#354 'continue']: r#226
[#354 'continuing']: r#226
[#354 'discard']: r#226
[#354 'fallthrough']: r#226
[#354 'for']: r#226
[#354 'if']: r#226
[#354 'let']: r#226
[#354 'loop']: r#226
[#354 'return']: r#226
[#354 'static_assert']: r#226
[#354 'switch']: r#226
[#354 'var']: r#226
[#354 'while']: r#226
[#354 '{']: r#226
[#354 '}']: r#226
[#354 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#226
[#355 ';']: s#19
[#356 '&']: r#227
[#356 '(']: r#227
[#356 '*']: r#227
[#356 ';']: r#227
[#356 '_']: r#227
[#356 'break']: r#227
[#356 'const']: r#227
[#356 'continue']: r#227
[#356 'continuing']: r#227
[#356 'discard']: r#227
[#356 'fallthrough']: r#227
[#356 'for']: r#227
[#356 'if']: r#227
[#356 'let']: r#227
[#356 'loop']: r#227
[#356 'return']: r#227
[#356 'static_assert']: r#227
[#356 'switch']: r#227
[#356 'var']: r#227
[#356 'while']: r#227
[#356 '{']: r#227
[#356 '}']: r#227
[#356 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#357 '&']: r#228
[#357 '(']: r#228
[#357 '*']: r#228
[#357 ';']: r#228
[#357 '_']: r#228
[#357 'break']: r#228
[#357 'const']: r#228
[#357 'continue']: r#228
[#357 'continuing']: r#228
[#357 'discard']: r#228
[#357 'fallthrough']: r#228
[#357 'for']: r#228
[#357 'if']: r#228
[#357 'let']: r#228
[#357 'loop']: r#228
[#357 'return']: r#228
[#357 'static_assert']: r#228
[#357 'switch']: r#228
[#357 'var']: r#228
[#357 'while']: r#228
[#357 '{']: r#228
[#357 '}']: r#228
[#357 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#228
[#358 '&']: r#229
[#358 '(']: r#229
[#358 '*']: r#229
[#358 ';']: r#229
[#358 '_']: r#229
[#358 'break']: r#229
[#358 'const']: r#229
[#358 'continue']: r#229
[#358 'continuing']: r#229
[#358 'discard']: r#229
[#358 'fallthrough']: r#229
[#358 'for']: r#229
[#358 'if']: r#229
[#358 'let']: r#229
[#358 'loop']: r#229
[#358 'return']: r#229
[#358 'static_assert']: r#229
[#358 'switch']: r#229
[#358 'var']: r#229
[#358 'while']: r#229
[#358 '{']: r#229
[#358 '}']: r#229
[#358 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#229
[#359 '&']: r#230
[#359 '(']: r#230
[#359 '*']: r#230
[#359 ';']: r#230
[#359 '_']: r#230
[#359 'break']: r#230
[#359 'const']: r#230
[#359 'continue']: r#230
[#359 'continuing']: r#230
[#359 'discard']: r#230
[#359 'fallthrough']: r#230
[#359 'for']: r#230
[#359 'if']: r#230
[#359 'let']: r#230
[#359 'loop']: r#230
[#359 'return']: r#230
[#359 'static_assert']: r#230
[#359 'switch']: r#230
[#359 'var']: r#230
[#359 'while']: r#230
[#359 '{']: r#230
[#359 '}']: r#230
[#359 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#230
[#360 '&']: r#231
[#360 '(']: r#231
[#360 '*']: r#231
[#360 ';']: r#231
[#360 '_']: r#231
[#360 'break']: r#231
[#360 'const']: r#231
[#360 'continue']: r#231
[#360 'continuing']: r#231
[#360 'discard']: r#231
[#360 'fallthrough']: r#231
[#360 'for']: r#231
[#360 'if']: r#231
[#360 'let']: r#231
[#360 'loop']: r#231
[#360 'return']: r#231
[#360 'static_assert']: r#231
[#360 'switch']: r#231
[#360 'var']: r#231
[#360 'while']: r#231
[#360 '{']: r#231
[#360 '}']: r#231
[#360 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#231
[#361 ';']: s#19
[#362 ';']: s#19
[#363 ';']: s#19
[#364 ';']: s#19
[#365 ';']: s#19
[#366 ';']: s#19
[#367 '&']: r#232
[#367 '(']: r#232
[#367 '*']: r#232
[#367 ';']: r#232
[#367 '_']: r#232
[#367 'break']: r#232
[#367 'const']: r#232
[#367 'continue']: r#232
[#367 'continuing']: r#232
[#367 'discard']: r#232
[#367 'fallthrough']: r#232
[#367 'for']: r#232
[#367 'if']: r#232
[#367 'let']: r#232
[#367 'loop']: r#232
[#367 'return']: r#232
[#367 'static_assert']: r#232
[#367 'switch']: r#232
[#367 'var']: r#232
[#367 'while']: r#232
[#367 '{']: r#232
[#367 '}']: r#232
[#367 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#232
[#368 ';']: s#19
[#369 ';']: s#19
[#370 ';']: s#19
[#371 '!']: s#70
[#371 '&']: s#73
[#371 '(']: s#116
[#371 '*']: s#72
[#371 '-']: s#69
[#371 'array']: s#83
[#371 'atomic']: s#95
[#371 'bitcast']: s#78
[#371 'bool']: s#88
[#371 'f16']: s#118
[#371 'f32']: s#117
[#371 'false']: s#115
[#371 'i32']: s#119
[#371 'mat2x2']: s#100
[#371 'mat2x3']: s#101
[#371 'mat2x4']: s#102
[#371 'mat3x2']: s#103
[#371 'mat3x3']: s#104
[#371 'mat3x4']: s#105
[#371 'mat4x2']: s#106
[#371 'mat4x3']: s#107
[#371 'mat4x4']: s#108
[#371 'ptr']: s#121
[#371 'sampler']: s#135
[#371 'sampler_comparison']: s#136
[#371 'texture_1d']: s#142
[#371 'texture_2d']: s#143
[#371 'texture_2d_array']: s#144
[#371 'texture_3d']: s#145
[#371 'texture_cube']: s#146
[#371 'texture_cube_array']: s#147
[#371 'texture_depth_2d']: s#137
[#371 'texture_depth_2d_array']: s#138
[#371 'texture_depth_cube']: s#139
[#371 'texture_depth_cube_array']: s#140
[#371 'texture_depth_multisampled_2d']: s#141
[#371 'texture_multisampled_2d']: s#148
[#371 'texture_storage_1d']: s#149
[#371 'texture_storage_2d']: s#150
[#371 'texture_storage_2d_array']: s#151
[#371 'texture_storage_3d']: s#152
[#371 'true']: s#114
[#371 'u32']: s#120
[#371 'vec2']: s#97
[#371 'vec3']: s#98
[#371 'vec4']: s#99
[#371 '~']: s#71
[#371 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#371 /0[fh]/]: s#130
[#371 /0[iu]?/]: s#110
[#371 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#371 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#371 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#371 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#371 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#371 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#371 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#371 /[1-9][0-9]*[fh]/]: s#131
[#371 /[1-9][0-9]*[iu]?/]: s#111
[#372 'else']: s#476
[#373 '!']: s#70
[#373 '&']: s#73
[#373 '(']: s#116
[#373 '*']: s#72
[#373 '-']: s#69
[#373 'array']: s#83
[#373 'atomic']: s#95
[#373 'bitcast']: s#78
[#373 'bool']: s#88
[#373 'f16']: s#118
[#373 'f32']: s#117
[#373 'false']: s#115
[#373 'i32']: s#119
[#373 'mat2x2']: s#100
[#373 'mat2x3']: s#101
[#373 'mat2x4']: s#102
[#373 'mat3x2']: s#103
[#373 'mat3x3']: s#104
[#373 'mat3x4']: s#105
[#373 'mat4x2']: s#106
[#373 'mat4x3']: s#107
[#373 'mat4x4']: s#108
[#373 'ptr']: s#121
[#373 'sampler']: s#135
[#373 'sampler_comparison']: s#136
[#373 'texture_1d']: s#142
[#373 'texture_2d']: s#143
[#373 'texture_2d_array']: s#144
[#373 'texture_3d']: s#145
[#373 'texture_cube']: s#146
[#373 'texture_cube_array']: s#147
[#373 'texture_depth_2d']: s#137
[#373 'texture_depth_2d_array']: s#138
[#373 'texture_depth_cube']: s#139
[#373 'texture_depth_cube_array']: s#140
[#373 'texture_depth_multisampled_2d']: s#141
[#373 'texture_multisampled_2d']: s#148
[#373 'texture_storage_1d']: s#149
[#373 'texture_storage_2d']: s#150
[#373 'texture_storage_2d_array']: s#151
[#373 'texture_storage_3d']: s#152
[#373 'true']: s#114
[#373 'u32']: s#120
[#373 'vec2']: s#97
[#373 'vec3']: s#98
[#373 'vec4']: s#99
[#373 '~']: s#71
[#373 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#373 /0[fh]/]: s#130
[#373 /0[iu]?/]: s#110
[#373 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#373 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#373 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#373 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#373 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#373 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#373 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#373 /[1-9][0-9]*[fh]/]: s#131
[#373 /[1-9][0-9]*[iu]?/]: s#111
[#374 '{']: s#185
[#375 '(']: s#116
[#376 '!']: s#70
[#376 '&']: s#73
[#376 '(']: s#116
[#376 '*']: s#72
[#376 '-']: s#69
[#376 'array']: s#83
[#376 'atomic']: s#95
[#376 'bitcast']: s#78
[#376 'bool']: s#88
[#376 'f16']: s#118
[#376 'f32']: s#117
[#376 'false']: s#115
[#376 'i32']: s#119
[#376 'mat2x2']: s#100
[#376 'mat2x3']: s#101
[#376 'mat2x4']: s#102
[#376 'mat3x2']: s#103
[#376 'mat3x3']: s#104
[#376 'mat3x4']: s#105
[#376 'mat4x2']: s#106
[#376 'mat4x3']: s#107
[#376 'mat4x4']: s#108
[#376 'ptr']: s#121
[#376 'sampler']: s#135
[#376 'sampler_comparison']: s#136
[#376 'texture_1d']: s#142
[#376 'texture_2d']: s#143
[#376 'texture_2d_array']: s#144
[#376 'texture_3d']: s#145
[#376 'texture_cube']: s#146
[#376 'texture_cube_array']: s#147
[#376 'texture_depth_2d']: s#137
[#376 'texture_depth_2d_array']: s#138
[#376 'texture_depth_cube']: s#139
[#376 'texture_depth_cube_array']: s#140
[#376 'texture_depth_multisampled_2d']: s#141
[#376 'texture_multisampled_2d']: s#148
[#376 'texture_storage_1d']: s#149
[#376 'texture_storage_2d']: s#150
[#376 'texture_storage_2d_array']: s#151
[#376 'texture_storage_3d']: s#152
[#376 'true']: s#114
[#376 'u32']: s#120
[#376 'vec2']: s#97
[#376 'vec3']: s#98
[#376 'vec4']: s#99
[#376 '~']: s#71
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#376 /0[fh]/]: s#130
[#376 /0[iu]?/]: s#110
[#376 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#376 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#376 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#376 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#376 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#376 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#376 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#376 /[1-9][0-9]*[fh]/]: s#131
[#376 /[1-9][0-9]*[iu]?/]: s#111
[#377 '(']: s#116
[#378 ';']: r#233
[#378 '=']: s#175
[#379 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#380 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#381 ';']: r#234
[#382 ';']: r#235
[#383 '%=']: s#455
[#383 '&=']: s#456
[#383 '*=']: s#453
[#383 '++']: s#439
[#383 '+=']: s#451
[#383 '--']: s#440
[#383 '-=']: s#452
[#383 '/=']: s#454
[#383 '<<=']: s#460
[#383 '=']: s#175
[#383 '>>=']: s#459
[#383 '^=']: s#458
[#383 '|=']: s#457
[#384 '=']: s#175
[#385 '!']: s#70
[#385 '&']: s#73
[#385 '(']: s#116
[#385 '*']: s#72
[#385 '-']: s#69
[#385 'array']: s#83
[#385 'atomic']: s#95
[#385 'bitcast']: s#78
[#385 'bool']: s#88
[#385 'f16']: s#118
[#385 'f32']: s#117
[#385 'false']: s#115
[#385 'i32']: s#119
[#385 'mat2x2']: s#100
[#385 'mat2x3']: s#101
[#385 'mat2x4']: s#102
[#385 'mat3x2']: s#103
[#385 'mat3x3']: s#104
[#385 'mat3x4']: s#105
[#385 'mat4x2']: s#106
[#385 'mat4x3']: s#107
[#385 'mat4x4']: s#108
[#385 'ptr']: s#121
[#385 'sampler']: s#135
[#385 'sampler_comparison']: s#136
[#385 'texture_1d']: s#142
[#385 'texture_2d']: s#143
[#385 'texture_2d_array']: s#144
[#385 'texture_3d']: s#145
[#385 'texture_cube']: s#146
[#385 'texture_cube_array']: s#147
[#385 'texture_depth_2d']: s#137
[#385 'texture_depth_2d_array']: s#138
[#385 'texture_depth_cube']: s#139
[#385 'texture_depth_cube_array']: s#140
[#385 'texture_depth_multisampled_2d']: s#141
[#385 'texture_multisampled_2d']: s#148
[#385 'texture_storage_1d']: s#149
[#385 'texture_storage_2d']: s#150
[#385 'texture_storage_2d_array']: s#151
[#385 'texture_storage_3d']: s#152
[#385 'true']: s#114
[#385 'u32']: s#120
[#385 'vec2']: s#97
[#385 'vec3']: s#98
[#385 'vec4']: s#99
[#385 '~']: s#71
[#385 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#385 /0[fh]/]: s#130
[#385 /0[iu]?/]: s#110
[#385 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#385 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#385 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#385 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#385 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#385 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#385 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#385 /[1-9][0-9]*[fh]/]: s#131
[#385 /[1-9][0-9]*[iu]?/]: s#111
[#386 '(']: s#116
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#387 '=']: r#236
[#388 '(']: r#237
[#389 '&']: s#73
[#389 '*']: s#72
[#390 '&']: r#238
[#390 '(']: r#238
[#390 '*']: r#238
[#391 '&']: r#239
[#391 '(']: r#239
[#391 '*']: r#239
[#392 '@']: s#32
[#393 '@']: s#32
[#394 '@']: r#240
[#394 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#240
[#395 '@']: s#32
[#396 ',']: s#412
[#397 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#299
[#399 '@']: s#32
[#400 ';']: r#241
[#401 ';']: r#242
[#402 '!']: s#70
[#402 '&']: s#73
[#402 '(']: s#116
[#402 '*']: s#72
[#402 '-']: s#69
[#402 'array']: s#83
[#402 'atomic']: s#95
[#402 'bitcast']: s#78
[#402 'bool']: s#88
[#402 'f16']: s#118
[#402 'f32']: s#117
[#402 'false']: s#115
[#402 'i32']: s#119
[#402 'mat2x2']: s#100
[#402 'mat2x3']: s#101
[#402 'mat2x4']: s#102
[#402 'mat3x2']: s#103
[#402 'mat3x3']: s#104
[#402 'mat3x4']: s#105
[#402 'mat4x2']: s#106
[#402 'mat4x3']: s#107
[#402 'mat4x4']: s#108
[#402 'ptr']: s#121
[#402 'sampler']: s#135
[#402 'sampler_comparison']: s#136
[#402 'texture_1d']: s#142
[#402 'texture_2d']: s#143
[#402 'texture_2d_array']: s#144
[#402 'texture_3d']: s#145
[#402 'texture_cube']: s#146
[#402 'texture_cube_array']: s#147
[#402 'texture_depth_2d']: s#137
[#402 'texture_depth_2d_array']: s#138
[#402 'texture_depth_cube']: s#139
[#402 'texture_depth_cube_array']: s#140
[#402 'texture_depth_multisampled_2d']: s#141
[#402 'texture_multisampled_2d']: s#148
[#402 'texture_storage_1d']: s#149
[#402 'texture_storage_2d']: s#150
[#402 'texture_storage_2d_array']: s#151
[#402 'texture_storage_3d']: s#152
[#402 'true']: s#114
[#402 'u32']: s#120
[#402 'vec2']: s#97
[#402 'vec3']: s#98
[#402 'vec4']: s#99
[#402 '~']: s#71
[#402 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#402 /0[fh]/]: s#130
[#402 /0[iu]?/]: s#110
[#402 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#402 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#402 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#402 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#402 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#402 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#402 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#402 /[1-9][0-9]*[fh]/]: s#131
[#402 /[1-9][0-9]*[iu]?/]: s#111
[#403 ';']: r#243
[#404 ')']: r#244
[#404 ',']: r#244
[#404 ';']: r#244
[#404 '=']: r#244
[#405 ';']: r#245
[#406 ',']: s#412
[#407 ';']: r#246
[#407 '=']: r#246
[#408 ':']: s#177
[#408 ';']: r#247
[#408 '=']: r#247
[#409 ';']: r#248
[#409 '=']: r#248
[#410 '>']: s#235
[#411 'read']: s#543
[#411 'read_write']: s#545
[#411 'write']: s#544
[#412 '!']: r#249
[#412 '&']: r#249
[#412 '(']: r#249
[#412 ')']: r#249
[#412 '*']: r#249
[#412 '-']: r#249
[#412 ':']: r#249
[#412 '@']: r#249
[#412 'array']: r#249
[#412 'atomic']: r#249
[#412 'bitcast']: r#249
[#412 'bool']: r#249
[#412 'f16']: r#249
[#412 'f32']: r#249
[#412 'false']: r#249
[#412 'i32']: r#249
[#412 'mat2x2']: r#249
[#412 'mat2x3']: r#249
[#412 'mat2x4']: r#249
[#412 'mat3x2']: r#249
[#412 'mat3x3']: r#249
[#412 'mat3x4']: r#249
[#412 'mat4x2']: r#249
[#412 'mat4x3']: r#249
[#412 'mat4x4']: r#249
[#412 'ptr']: r#249
[#412 'sampler']: r#249
[#412 'sampler_comparison']: r#249
[#412 'texture_1d']: r#249
[#412 'texture_2d']: r#249
[#412 'texture_2d_array']: r#249
[#412 'texture_3d']: r#249
[#412 'texture_cube']: r#249
[#412 'texture_cube_array']: r#249
[#412 'texture_depth_2d']: r#249
[#412 'texture_depth_2d_array']: r#249
[#412 'texture_depth_cube']: r#249
[#412 'texture_depth_cube_array']: r#249
[#412 'texture_depth_multisampled_2d']: r#249
[#412 'texture_multisampled_2d']: r#249
[#412 'texture_storage_1d']: r#249
[#412 'texture_storage_2d']: r#249
[#412 'texture_storage_2d_array']: r#249
[#412 'texture_storage_3d']: r#249
[#412 'true']: r#249
[#412 'u32']: r#249
[#412 'vec2']: r#249
[#412 'vec3']: r#249
[#412 'vec4']: r#249
[#412 '{']: r#249
[#412 '}']: r#249
[#412 '~']: r#249
[#412 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#249
[#413 ';']: r#250
[#415 ':']: s#177
[#416 '@']: r#251
[#416 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#251
[#417 '@']: r#252
[#417 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#252
[#418 ',']: s#412
[#419 ')']: s#324
[#420 ')']: r#253
[#421 '@']: s#32
[#422 '@']: r#254
[#422 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#254
[#423 '@']: s#32
[#424 ',']: s#412
[#425 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#426 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#255
[#427 '@']: s#32
[#428 '(']: r#256
[#429 '.']: s#206
[#429 '[']: s#205
[#430 '%=']: r#257
[#430 '&=']: r#257
[#430 ')']: r#257
[#430 '*=']: r#257
[#430 '++']: r#257
[#430 '+=']: r#257
[#430 '--']: r#257
[#430 '-=']: r#257
[#430 '.']: r#257
[#430 '/=']: r#257
[#430 '<<=']: r#257
[#430 '=']: r#257
[#430 '>>=']: r#257
[#430 '[']: r#257
[#430 '^=']: r#257
[#430 '|=']: r#257
[#431 '&']: s#73
[#431 '*']: s#72
[#432 '{']: s#185
[#433 '!']: s#70
[#433 '&']: s#73
[#433 '(']: s#116
[#433 '*']: s#72
[#433 '-']: s#69
[#433 'array']: s#83
[#433 'atomic']: s#95
[#433 'bitcast']: s#78
[#433 'bool']: s#88
[#433 'f16']: s#118
[#433 'f32']: s#117
[#433 'false']: s#115
[#433 'i32']: s#119
[#433 'mat2x2']: s#100
[#433 'mat2x3']: s#101
[#433 'mat2x4']: s#102
[#433 'mat3x2']: s#103
[#433 'mat3x3']: s#104
[#433 'mat3x4']: s#105
[#433 'mat4x2']: s#106
[#433 'mat4x3']: s#107
[#433 'mat4x4']: s#108
[#433 'ptr']: s#121
[#433 'sampler']: s#135
[#433 'sampler_comparison']: s#136
[#433 'texture_1d']: s#142
[#433 'texture_2d']: s#143
[#433 'texture_2d_array']: s#144
[#433 'texture_3d']: s#145
[#433 'texture_cube']: s#146
[#433 'texture_cube_array']: s#147
[#433 'texture_depth_2d']: s#137
[#433 'texture_depth_2d_array']: s#138
[#433 'texture_depth_cube']: s#139
[#433 'texture_depth_cube_array']: s#140
[#433 'texture_depth_multisampled_2d']: s#141
[#433 'texture_multisampled_2d']: s#148
[#433 'texture_storage_1d']: s#149
[#433 'texture_storage_2d']: s#150
[#433 'texture_storage_2d_array']: s#151
[#433 'texture_storage_3d']: s#152
[#433 'true']: s#114
[#433 'u32']: s#120
[#433 'vec2']: s#97
[#433 'vec3']: s#98
[#433 'vec4']: s#99
[#433 '~']: s#71
[#433 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#433 /0[fh]/]: s#130
[#433 /0[iu]?/]: s#110
[#433 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#433 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#433 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#433 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#433 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#433 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#433 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#433 /[1-9][0-9]*[fh]/]: s#131
[#433 /[1-9][0-9]*[iu]?/]: s#111
[#434 '!']: s#70
[#434 '&']: s#73
[#434 '(']: s#116
[#434 '*']: s#72
[#434 '-']: s#69
[#434 'array']: s#83
[#434 'atomic']: s#95
[#434 'bitcast']: s#78
[#434 'bool']: s#88
[#434 'f16']: s#118
[#434 'f32']: s#117
[#434 'false']: s#115
[#434 'i32']: s#119
[#434 'mat2x2']: s#100
[#434 'mat2x3']: s#101
[#434 'mat2x4']: s#102
[#434 'mat3x2']: s#103
[#434 'mat3x3']: s#104
[#434 'mat3x4']: s#105
[#434 'mat4x2']: s#106
[#434 'mat4x3']: s#107
[#434 'mat4x4']: s#108
[#434 'ptr']: s#121
[#434 'sampler']: s#135
[#434 'sampler_comparison']: s#136
[#434 'texture_1d']: s#142
[#434 'texture_2d']: s#143
[#434 'texture_2d_array']: s#144
[#434 'texture_3d']: s#145
[#434 'texture_cube']: s#146
[#434 'texture_cube_array']: s#147
[#434 'texture_depth_2d']: s#137
[#434 'texture_depth_2d_array']: s#138
[#434 'texture_depth_cube']: s#139
[#434 'texture_depth_cube_array']: s#140
[#434 'texture_depth_multisampled_2d']: s#141
[#434 'texture_multisampled_2d']: s#148
[#434 'texture_storage_1d']: s#149
[#434 'texture_storage_2d']: s#150
[#434 'texture_storage_2d_array']: s#151
[#434 'texture_storage_3d']: s#152
[#434 'true']: s#114
[#434 'u32']: s#120
[#434 'vec2']: s#97
[#434 'vec3']: s#98
[#434 'vec4']: s#99
[#434 '~']: s#71
[#434 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#434 /0[fh]/]: s#130
[#434 /0[iu]?/]: s#110
[#434 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#434 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#434 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#434 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#434 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#434 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#434 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#434 /[1-9][0-9]*[fh]/]: s#131
[#434 /[1-9][0-9]*[iu]?/]: s#111
[#435 ')']: r#258
[#435 ';']: r#258
[#436 ')']: r#259
[#436 ';']: r#259
[#437 '!']: r#260
[#437 '&']: r#260
[#437 '(']: r#260
[#437 '*']: r#260
[#437 '-']: r#260
[#437 'array']: r#260
[#437 'atomic']: r#260
[#437 'bitcast']: r#260
[#437 'bool']: r#260
[#437 'f16']: r#260
[#437 'f32']: r#260
[#437 'false']: r#260
[#437 'i32']: r#260
[#437 'mat2x2']: r#260
[#437 'mat2x3']: r#260
[#437 'mat2x4']: r#260
[#437 'mat3x2']: r#260
[#437 'mat3x3']: r#260
[#437 'mat3x4']: r#260
[#437 'mat4x2']: r#260
[#437 'mat4x3']: r#260
[#437 'mat4x4']: r#260
[#437 'ptr']: r#260
[#437 'sampler']: r#260
[#437 'sampler_comparison']: r#260
[#437 'texture_1d']: r#260
[#437 'texture_2d']: r#260
[#437 'texture_2d_array']: r#260
[#437 'texture_3d']: r#260
[#437 'texture_cube']: r#260
[#437 'texture_cube_array']: r#260
[#437 'texture_depth_2d']: r#260
[#437 'texture_depth_2d_array']: r#260
[#437 'texture_depth_cube']: r#260
[#437 'texture_depth_cube_array']: r#260
[#437 'texture_depth_multisampled_2d']: r#260
[#437 'texture_multisampled_2d']: r#260
[#437 'texture_storage_1d']: r#260
[#437 'texture_storage_2d']: r#260
[#437 'texture_storage_2d_array']: r#260
[#437 'texture_storage_3d']: r#260
[#437 'true']: r#260
[#437 'u32']: r#260
[#437 'vec2']: r#260
[#437 'vec3']: r#260
[#437 'vec4']: r#260
[#437 '~']: r#260
[#438 '!']: r#261
[#438 '&']: r#261
[#438 '(']: r#261
[#438 '*']: r#261
[#438 '-']: r#261
[#438 'array']: r#261
[#438 'atomic']: r#261
[#438 'bitcast']: r#261
[#438 'bool']: r#261
[#438 'f16']: r#261
[#438 'f32']: r#261
[#438 'false']: r#261
[#438 'i32']: r#261
[#438 'mat2x2']: r#261
[#438 'mat2x3']: r#261
[#438 'mat2x4']: r#261
[#438 'mat3x2']: r#261
[#438 'mat3x3']: r#261
[#438 'mat3x4']: r#261
[#438 'mat4x2']: r#261
[#438 'mat4x3']: r#261
[#438 'mat4x4']: r#261
[#438 'ptr']: r#261
[#438 'sampler']: r#261
[#438 'sampler_comparison']: r#261
[#438 'texture_1d']: r#261
[#438 'texture_2d']: r#261
[#438 'texture_2d_array']: r#261
[#438 'texture_3d']: r#261
[#438 'texture_cube']: r#261
[#438 'texture_cube_array']: r#261
[#438 'texture_depth_2d']: r#261
[#438 'texture_depth_2d_array']: r#261
[#438 'texture_depth_cube']: r#261
[#438 'texture_depth_cube_array']: r#261
[#438 'texture_depth_multisampled_2d']: r#261
[#438 'texture_multisampled_2d']: r#261
[#438 'texture_storage_1d']: r#261
[#438 'texture_storage_2d']: r#261
[#438 'texture_storage_2d_array']: r#261
[#438 'texture_storage_3d']: r#261
[#438 'true']: r#261
[#438 'u32']: r#261
[#438 'vec2']: r#261
[#438 'vec3']: r#261
[#438 'vec4']: r#261
[#438 '~']: r#261
[#439 ')']: r#262
[#439 ';']: r#262
[#440 ')']: r#263
[#440 ';']: r#263
[#441 '!']: r#264
[#441 '&']: r#264
[#441 '(']: r#264
[#441 '*']: r#264
[#441 '-']: r#264
[#441 'array']: r#264
[#441 'atomic']: r#264
[#441 'bitcast']: r#264
[#441 'bool']: r#264
[#441 'f16']: r#264
[#441 'f32']: r#264
[#441 'false']: r#264
[#441 'i32']: r#264
[#441 'mat2x2']: r#264
[#441 'mat2x3']: r#264
[#441 'mat2x4']: r#264
[#441 'mat3x2']: r#264
[#441 'mat3x3']: r#264
[#441 'mat3x4']: r#264
[#441 'mat4x2']: r#264
[#441 'mat4x3']: r#264
[#441 'mat4x4']: r#264
[#441 'ptr']: r#264
[#441 'sampler']: r#264
[#441 'sampler_comparison']: r#264
[#441 'texture_1d']: r#264
[#441 'texture_2d']: r#264
[#441 'texture_2d_array']: r#264
[#441 'texture_3d']: r#264
[#441 'texture_cube']: r#264
[#441 'texture_cube_array']: r#264
[#441 'texture_depth_2d']: r#264
[#441 'texture_depth_2d_array']: r#264
[#441 'texture_depth_cube']: r#264
[#441 'texture_depth_cube_array']: r#264
[#441 'texture_depth_multisampled_2d']: r#264
[#441 'texture_multisampled_2d']: r#264
[#441 'texture_storage_1d']: r#264
[#441 'texture_storage_2d']: r#264
[#441 'texture_storage_2d_array']: r#264
[#441 'texture_storage_3d']: r#264
[#441 'true']: r#264
[#441 'u32']: r#264
[#441 'vec2']: r#264
[#441 'vec3']: r#264
[#441 'vec4']: r#264
[#441 '~']: r#264
[#442 '!']: r#265
[#442 '&']: r#265
[#442 '(']: r#265
[#442 '*']: r#265
[#442 '-']: r#265
[#442 'array']: r#265
[#442 'atomic']: r#265
[#442 'bitcast']: r#265
[#442 'bool']: r#265
[#442 'f16']: r#265
[#442 'f32']: r#265
[#442 'false']: r#265
[#442 'i32']: r#265
[#442 'mat2x2']: r#265
[#442 'mat2x3']: r#265
[#442 'mat2x4']: r#265
[#442 'mat3x2']: r#265
[#442 'mat3x3']: r#265
[#442 'mat3x4']: r#265
[#442 'mat4x2']: r#265
[#442 'mat4x3']: r#265
[#442 'mat4x4']: r#265
[#442 'ptr']: r#265
[#442 'sampler']: r#265
[#442 'sampler_comparison']: r#265
[#442 'texture_1d']: r#265
[#442 'texture_2d']: r#265
[#442 'texture_2d_array']: r#265
[#442 'texture_3d']: r#265
[#442 'texture_cube']: r#265
[#442 'texture_cube_array']: r#265
[#442 'texture_depth_2d']: r#265
[#442 'texture_depth_2d_array']: r#265
[#442 'texture_depth_cube']: r#265
[#442 'texture_depth_cube_array']: r#265
[#442 'texture_depth_multisampled_2d']: r#265
[#442 'texture_multisampled_2d']: r#265
[#442 'texture_storage_1d']: r#265
[#442 'texture_storage_2d']: r#265
[#442 'texture_storage_2d_array']: r#265
[#442 'texture_storage_3d']: r#265
[#442 'true']: r#265
[#442 'u32']: r#265
[#442 'vec2']: r#265
[#442 'vec3']: r#265
[#442 'vec4']: r#265
[#442 '~']: r#265
[#443 '!']: r#266
[#443 '&']: r#266
[#443 '(']: r#266
[#443 '*']: r#266
[#443 '-']: r#266
[#443 'array']: r#266
[#443 'atomic']: r#266
[#443 'bitcast']: r#266
[#443 'bool']: r#266
[#443 'f16']: r#266
[#443 'f32']: r#266
[#443 'false']: r#266
[#443 'i32']: r#266
[#443 'mat2x2']: r#266
[#443 'mat2x3']: r#266
[#443 'mat2x4']: r#266
[#443 'mat3x2']: r#266
[#443 'mat3x3']: r#266
[#443 'mat3x4']: r#266
[#443 'mat4x2']: r#266
[#443 'mat4x3']: r#266
[#443 'mat4x4']: r#266
[#443 'ptr']: r#266
[#443 'sampler']: r#266
[#443 'sampler_comparison']: r#266
[#443 'texture_1d']: r#266
[#443 'texture_2d']: r#266
[#443 'texture_2d_array']: r#266
[#443 'texture_3d']: r#266
[#443 'texture_cube']: r#266
[#443 'texture_cube_array']: r#266
[#443 'texture_depth_2d']: r#266
[#443 'texture_depth_2d_array']: r#266
[#443 'texture_depth_cube']: r#266
[#443 'texture_depth_cube_array']: r#266
[#443 'texture_depth_multisampled_2d']: r#266
[#443 'texture_multisampled_2d']: r#266
[#443 'texture_storage_1d']: r#266
[#443 'texture_storage_2d']: r#266
[#443 'texture_storage_2d_array']: r#266
[#443 'texture_storage_3d']: r#266
[#443 'true']: r#266
[#443 'u32']: r#266
[#443 'vec2']: r#266
[#443 'vec3']: r#266
[#443 'vec4']: r#266
[#443 '~']: r#266
[#444 '!']: r#267
[#444 '&']: r#267
[#444 '(']: r#267
[#444 '*']: r#267
[#444 '-']: r#267
[#444 'array']: r#267
[#444 'atomic']: r#267
[#444 'bitcast']: r#267
[#444 'bool']: r#267
[#444 'f16']: r#267
[#444 'f32']: r#267
[#444 'false']: r#267
[#444 'i32']: r#267
[#444 'mat2x2']: r#267
[#444 'mat2x3']: r#267
[#444 'mat2x4']: r#267
[#444 'mat3x2']: r#267
[#444 'mat3x3']: r#267
[#444 'mat3x4']: r#267
[#444 'mat4x2']: r#267
[#444 'mat4x3']: r#267
[#444 'mat4x4']: r#267
[#444 'ptr']: r#267
[#444 'sampler']: r#267
[#444 'sampler_comparison']: r#267
[#444 'texture_1d']: r#267
[#444 'texture_2d']: r#267
[#444 'texture_2d_array']: r#267
[#444 'texture_3d']: r#267
[#444 'texture_cube']: r#267
[#444 'texture_cube_array']: r#267
[#444 'texture_depth_2d']: r#267
[#444 'texture_depth_2d_array']: r#267
[#444 'texture_depth_cube']: r#267
[#444 'texture_depth_cube_array']: r#267
[#444 'texture_depth_multisampled_2d']: r#267
[#444 'texture_multisampled_2d']: r#267
[#444 'texture_storage_1d']: r#267
[#444 'texture_storage_2d']: r#267
[#444 'texture_storage_2d_array']: r#267
[#444 'texture_storage_3d']: r#267
[#444 'true']: r#267
[#444 'u32']: r#267
[#444 'vec2']: r#267
[#444 'vec3']: r#267
[#444 'vec4']: r#267
[#444 '~']: r#267
[#445 '!']: r#268
[#445 '&']: r#268
[#445 '(']: r#268
[#445 '*']: r#268
[#445 '-']: r#268
[#445 'array']: r#268
[#445 'atomic']: r#268
[#445 'bitcast']: r#268
[#445 'bool']: r#268
[#445 'f16']: r#268
[#445 'f32']: r#268
[#445 'false']: r#268
[#445 'i32']: r#268
[#445 'mat2x2']: r#268
[#445 'mat2x3']: r#268
[#445 'mat2x4']: r#268
[#445 'mat3x2']: r#268
[#445 'mat3x3']: r#268
[#445 'mat3x4']: r#268
[#445 'mat4x2']: r#268
[#445 'mat4x3']: r#268
[#445 'mat4x4']: r#268
[#445 'ptr']: r#268
[#445 'sampler']: r#268
[#445 'sampler_comparison']: r#268
[#445 'texture_1d']: r#268
[#445 'texture_2d']: r#268
[#445 'texture_2d_array']: r#268
[#445 'texture_3d']: r#268
[#445 'texture_cube']: r#268
[#445 'texture_cube_array']: r#268
[#445 'texture_depth_2d']: r#268
[#445 'texture_depth_2d_array']: r#268
[#445 'texture_depth_cube']: r#268
[#445 'texture_depth_cube_array']: r#268
[#445 'texture_depth_multisampled_2d']: r#268
[#445 'texture_multisampled_2d']: r#268
[#445 'texture_storage_1d']: r#268
[#445 'texture_storage_2d']: r#268
[#445 'texture_storage_2d_array']: r#268
[#445 'texture_storage_3d']: r#268
[#445 'true']: r#268
[#445 'u32']: r#268
[#445 'vec2']: r#268
[#445 'vec3']: r#268
[#445 'vec4']: r#268
[#445 '~']: r#268
[#446 '!']: r#269
[#446 '&']: r#269
[#446 '(']: r#269
[#446 '*']: r#269
[#446 '-']: r#269
[#446 'array']: r#269
[#446 'atomic']: r#269
[#446 'bitcast']: r#269
[#446 'bool']: r#269
[#446 'f16']: r#269
[#446 'f32']: r#269
[#446 'false']: r#269
[#446 'i32']: r#269
[#446 'mat2x2']: r#269
[#446 'mat2x3']: r#269
[#446 'mat2x4']: r#269
[#446 'mat3x2']: r#269
[#446 'mat3x3']: r#269
[#446 'mat3x4']: r#269
[#446 'mat4x2']: r#269
[#446 'mat4x3']: r#269
[#446 'mat4x4']: r#269
[#446 'ptr']: r#269
[#446 'sampler']: r#269
[#446 'sampler_comparison']: r#269
[#446 'texture_1d']: r#269
[#446 'texture_2d']: r#269
[#446 'texture_2d_array']: r#269
[#446 'texture_3d']: r#269
[#446 'texture_cube']: r#269
[#446 'texture_cube_array']: r#269
[#446 'texture_depth_2d']: r#269
[#446 'texture_depth_2d_array']: r#269
[#446 'texture_depth_cube']: r#269
[#446 'texture_depth_cube_array']: r#269
[#446 'texture_depth_multisampled_2d']: r#269
[#446 'texture_multisampled_2d']: r#269
[#446 'texture_storage_1d']: r#269
[#446 'texture_storage_2d']: r#269
[#446 'texture_storage_2d_array']: r#269
[#446 'texture_storage_3d']: r#269
[#446 'true']: r#269
[#446 'u32']: r#269
[#446 'vec2']: r#269
[#446 'vec3']: r#269
[#446 'vec4']: r#269
[#446 '~']: r#269
[#447 '!']: r#270
[#447 '&']: r#270
[#447 '(']: r#270
[#447 '*']: r#270
[#447 '-']: r#270
[#447 'array']: r#270
[#447 'atomic']: r#270
[#447 'bitcast']: r#270
[#447 'bool']: r#270
[#447 'f16']: r#270
[#447 'f32']: r#270
[#447 'false']: r#270
[#447 'i32']: r#270
[#447 'mat2x2']: r#270
[#447 'mat2x3']: r#270
[#447 'mat2x4']: r#270
[#447 'mat3x2']: r#270
[#447 'mat3x3']: r#270
[#447 'mat3x4']: r#270
[#447 'mat4x2']: r#270
[#447 'mat4x3']: r#270
[#447 'mat4x4']: r#270
[#447 'ptr']: r#270
[#447 'sampler']: r#270
[#447 'sampler_comparison']: r#270
[#447 'texture_1d']: r#270
[#447 'texture_2d']: r#270
[#447 'texture_2d_array']: r#270
[#447 'texture_3d']: r#270
[#447 'texture_cube']: r#270
[#447 'texture_cube_array']: r#270
[#447 'texture_depth_2d']: r#270
[#447 'texture_depth_2d_array']: r#270
[#447 'texture_depth_cube']: r#270
[#447 'texture_depth_cube_array']: r#270
[#447 'texture_depth_multisampled_2d']: r#270
[#447 'texture_multisampled_2d']: r#270
[#447 'texture_storage_1d']: r#270
[#447 'texture_storage_2d']: r#270
[#447 'texture_storage_2d_array']: r#270
[#447 'texture_storage_3d']: r#270
[#447 'true']: r#270
[#447 'u32']: r#270
[#447 'vec2']: r#270
[#447 'vec3']: r#270
[#447 'vec4']: r#270
[#447 '~']: r#270
[#448 '!']: r#271
[#448 '&']: r#271
[#448 '(']: r#271
[#448 '*']: r#271
[#448 '-']: r#271
[#448 'array']: r#271
[#448 'atomic']: r#271
[#448 'bitcast']: r#271
[#448 'bool']: r#271
[#448 'f16']: r#271
[#448 'f32']: r#271
[#448 'false']: r#271
[#448 'i32']: r#271
[#448 'mat2x2']: r#271
[#448 'mat2x3']: r#271
[#448 'mat2x4']: r#271
[#448 'mat3x2']: r#271
[#448 'mat3x3']: r#271
[#448 'mat3x4']: r#271
[#448 'mat4x2']: r#271
[#448 'mat4x3']: r#271
[#448 'mat4x4']: r#271
[#448 'ptr']: r#271
[#448 'sampler']: r#271
[#448 'sampler_comparison']: r#271
[#448 'texture_1d']: r#271
[#448 'texture_2d']: r#271
[#448 'texture_2d_array']: r#271
[#448 'texture_3d']: r#271
[#448 'texture_cube']: r#271
[#448 'texture_cube_array']: r#271
[#448 'texture_depth_2d']: r#271
[#448 'texture_depth_2d_array']: r#271
[#448 'texture_depth_cube']: r#271
[#448 'texture_depth_cube_array']: r#271
[#448 'texture_depth_multisampled_2d']: r#271
[#448 'texture_multisampled_2d']: r#271
[#448 'texture_storage_1d']: r#271
[#448 'texture_storage_2d']: r#271
[#448 'texture_storage_2d_array']: r#271
[#448 'texture_storage_3d']: r#271
[#448 'true']: r#271
[#448 'u32']: r#271
[#448 'vec2']: r#271
[#448 'vec3']: r#271
[#448 'vec4']: r#271
[#448 '~']: r#271
[#449 '!']: r#272
[#449 '&']: r#272
[#449 '(']: r#272
[#449 '*']: r#272
[#449 '-']: r#272
[#449 'array']: r#272
[#449 'atomic']: r#272
[#449 'bitcast']: r#272
[#449 'bool']: r#272
[#449 'f16']: r#272
[#449 'f32']: r#272
[#449 'false']: r#272
[#449 'i32']: r#272
[#449 'mat2x2']: r#272
[#449 'mat2x3']: r#272
[#449 'mat2x4']: r#272
[#449 'mat3x2']: r#272
[#449 'mat3x3']: r#272
[#449 'mat3x4']: r#272
[#449 'mat4x2']: r#272
[#449 'mat4x3']: r#272
[#449 'mat4x4']: r#272
[#449 'ptr']: r#272
[#449 'sampler']: r#272
[#449 'sampler_comparison']: r#272
[#449 'texture_1d']: r#272
[#449 'texture_2d']: r#272
[#449 'texture_2d_array']: r#272
[#449 'texture_3d']: r#272
[#449 'texture_cube']: r#272
[#449 'texture_cube_array']: r#272
[#449 'texture_depth_2d']: r#272
[#449 'texture_depth_2d_array']: r#272
[#449 'texture_depth_cube']: r#272
[#449 'texture_depth_cube_array']: r#272
[#449 'texture_depth_multisampled_2d']: r#272
[#449 'texture_multisampled_2d']: r#272
[#449 'texture_storage_1d']: r#272
[#449 'texture_storage_2d']: r#272
[#449 'texture_storage_2d_array']: r#272
[#449 'texture_storage_3d']: r#272
[#449 'true']: r#272
[#449 'u32']: r#272
[#449 'vec2']: r#272
[#449 'vec3']: r#272
[#449 'vec4']: r#272
[#449 '~']: r#272
[#450 '!']: r#273
[#450 '&']: r#273
[#450 '(']: r#273
[#450 '*']: r#273
[#450 '-']: r#273
[#450 'array']: r#273
[#450 'atomic']: r#273
[#450 'bitcast']: r#273
[#450 'bool']: r#273
[#450 'f16']: r#273
[#450 'f32']: r#273
[#450 'false']: r#273
[#450 'i32']: r#273
[#450 'mat2x2']: r#273
[#450 'mat2x3']: r#273
[#450 'mat2x4']: r#273
[#450 'mat3x2']: r#273
[#450 'mat3x3']: r#273
[#450 'mat3x4']: r#273
[#450 'mat4x2']: r#273
[#450 'mat4x3']: r#273
[#450 'mat4x4']: r#273
[#450 'ptr']: r#273
[#450 'sampler']: r#273
[#450 'sampler_comparison']: r#273
[#450 'texture_1d']: r#273
[#450 'texture_2d']: r#273
[#450 'texture_2d_array']: r#273
[#450 'texture_3d']: r#273
[#450 'texture_cube']: r#273
[#450 'texture_cube_array']: r#273
[#450 'texture_depth_2d']: r#273
[#450 'texture_depth_2d_array']: r#273
[#450 'texture_depth_cube']: r#273
[#450 'texture_depth_cube_array']: r#273
[#450 'texture_depth_multisampled_2d']: r#273
[#450 'texture_multisampled_2d']: r#273
[#450 'texture_storage_1d']: r#273
[#450 'texture_storage_2d']: r#273
[#450 'texture_storage_2d_array']: r#273
[#450 'texture_storage_3d']: r#273
[#450 'true']: r#273
[#450 'u32']: r#273
[#450 'vec2']: r#273
[#450 'vec3']: r#273
[#450 'vec4']: r#273
[#450 '~']: r#273
[#451 '!']: r#274
[#451 '&']: r#274
[#451 '(']: r#274
[#451 '*']: r#274
[#451 '-']: r#274
[#451 'array']: r#274
[#451 'atomic']: r#274
[#451 'bitcast']: r#274
[#451 'bool']: r#274
[#451 'f16']: r#274
[#451 'f32']: r#274
[#451 'false']: r#274
[#451 'i32']: r#274
[#451 'mat2x2']: r#274
[#451 'mat2x3']: r#274
[#451 'mat2x4']: r#274
[#451 'mat3x2']: r#274
[#451 'mat3x3']: r#274
[#451 'mat3x4']: r#274
[#451 'mat4x2']: r#274
[#451 'mat4x3']: r#274
[#451 'mat4x4']: r#274
[#451 'ptr']: r#274
[#451 'sampler']: r#274
[#451 'sampler_comparison']: r#274
[#451 'texture_1d']: r#274
[#451 'texture_2d']: r#274
[#451 'texture_2d_array']: r#274
[#451 'texture_3d']: r#274
[#451 'texture_cube']: r#274
[#451 'texture_cube_array']: r#274
[#451 'texture_depth_2d']: r#274
[#451 'texture_depth_2d_array']: r#274
[#451 'texture_depth_cube']: r#274
[#451 'texture_depth_cube_array']: r#274
[#451 'texture_depth_multisampled_2d']: r#274
[#451 'texture_multisampled_2d']: r#274
[#451 'texture_storage_1d']: r#274
[#451 'texture_storage_2d']: r#274
[#451 'texture_storage_2d_array']: r#274
[#451 'texture_storage_3d']: r#274
[#451 'true']: r#274
[#451 'u32']: r#274
[#451 'vec2']: r#274
[#451 'vec3']: r#274
[#451 'vec4']: r#274
[#451 '~']: r#274
[#452 '!']: r#275
[#452 '&']: r#275
[#452 '(']: r#275
[#452 '*']: r#275
[#452 '-']: r#275
[#452 'array']: r#275
[#452 'atomic']: r#275
[#452 'bitcast']: r#275
[#452 'bool']: r#275
[#452 'f16']: r#275
[#452 'f32']: r#275
[#452 'false']: r#275
[#452 'i32']: r#275
[#452 'mat2x2']: r#275
[#452 'mat2x3']: r#275
[#452 'mat2x4']: r#275
[#452 'mat3x2']: r#275
[#452 'mat3x3']: r#275
[#452 'mat3x4']: r#275
[#452 'mat4x2']: r#275
[#452 'mat4x3']: r#275
[#452 'mat4x4']: r#275
[#452 'ptr']: r#275
[#452 'sampler']: r#275
[#452 'sampler_comparison']: r#275
[#452 'texture_1d']: r#275
[#452 'texture_2d']: r#275
[#452 'texture_2d_array']: r#275
[#452 'texture_3d']: r#275
[#452 'texture_cube']: r#275
[#452 'texture_cube_array']: r#275
[#452 'texture_depth_2d']: r#275
[#452 'texture_depth_2d_array']: r#275
[#452 'texture_depth_cube']: r#275
[#452 'texture_depth_cube_array']: r#275
[#452 'texture_depth_multisampled_2d']: r#275
[#452 'texture_multisampled_2d']: r#275
[#452 'texture_storage_1d']: r#275
[#452 'texture_storage_2d']: r#275
[#452 'texture_storage_2d_array']: r#275
[#452 'texture_storage_3d']: r#275
[#452 'true']: r#275
[#452 'u32']: r#275
[#452 'vec2']: r#275
[#452 'vec3']: r#275
[#452 'vec4']: r#275
[#452 '~']: r#275
[#453 '!']: r#276
[#453 '&']: r#276
[#453 '(']: r#276
[#453 '*']: r#276
[#453 '-']: r#276
[#453 'array']: r#276
[#453 'atomic']: r#276
[#453 'bitcast']: r#276
[#453 'bool']: r#276
[#453 'f16']: r#276
[#453 'f32']: r#276
[#453 'false']: r#276
[#453 'i32']: r#276
[#453 'mat2x2']: r#276
[#453 'mat2x3']: r#276
[#453 'mat2x4']: r#276
[#453 'mat3x2']: r#276
[#453 'mat3x3']: r#276
[#453 'mat3x4']: r#276
[#453 'mat4x2']: r#276
[#453 'mat4x3']: r#276
[#453 'mat4x4']: r#276
[#453 'ptr']: r#276
[#453 'sampler']: r#276
[#453 'sampler_comparison']: r#276
[#453 'texture_1d']: r#276
[#453 'texture_2d']: r#276
[#453 'texture_2d_array']: r#276
[#453 'texture_3d']: r#276
[#453 'texture_cube']: r#276
[#453 'texture_cube_array']: r#276
[#453 'texture_depth_2d']: r#276
[#453 'texture_depth_2d_array']: r#276
[#453 'texture_depth_cube']: r#276
[#453 'texture_depth_cube_array']: r#276
[#453 'texture_depth_multisampled_2d']: r#276
[#453 'texture_multisampled_2d']: r#276
[#453 'texture_storage_1d']: r#276
[#453 'texture_storage_2d']: r#276
[#453 'texture_storage_2d_array']: r#276
[#453 'texture_storage_3d']: r#276
[#453 'true']: r#276
[#453 'u32']: r#276
[#453 'vec2']: r#276
[#453 'vec3']: r#276
[#453 'vec4']: r#276
[#453 '~']: r#276
[#454 '!']: r#277
[#454 '&']: r#277
[#454 '(']: r#277
[#454 '*']: r#277
[#454 '-']: r#277
[#454 'array']: r#277
[#454 'atomic']: r#277
[#454 'bitcast']: r#277
[#454 'bool']: r#277
[#454 'f16']: r#277
[#454 'f32']: r#277
[#454 'false']: r#277
[#454 'i32']: r#277
[#454 'mat2x2']: r#277
[#454 'mat2x3']: r#277
[#454 'mat2x4']: r#277
[#454 'mat3x2']: r#277
[#454 'mat3x3']: r#277
[#454 'mat3x4']: r#277
[#454 'mat4x2']: r#277
[#454 'mat4x3']: r#277
[#454 'mat4x4']: r#277
[#454 'ptr']: r#277
[#454 'sampler']: r#277
[#454 'sampler_comparison']: r#277
[#454 'texture_1d']: r#277
[#454 'texture_2d']: r#277
[#454 'texture_2d_array']: r#277
[#454 'texture_3d']: r#277
[#454 'texture_cube']: r#277
[#454 'texture_cube_array']: r#277
[#454 'texture_depth_2d']: r#277
[#454 'texture_depth_2d_array']: r#277
[#454 'texture_depth_cube']: r#277
[#454 'texture_depth_cube_array']: r#277
[#454 'texture_depth_multisampled_2d']: r#277
[#454 'texture_multisampled_2d']: r#277
[#454 'texture_storage_1d']: r#277
[#454 'texture_storage_2d']: r#277
[#454 'texture_storage_2d_array']: r#277
[#454 'texture_storage_3d']: r#277
[#454 'true']: r#277
[#454 'u32']: r#277
[#454 'vec2']: r#277
[#454 'vec3']: r#277
[#454 'vec4']: r#277
[#454 '~']: r#277
[#455 '!']: r#278
[#455 '&']: r#278
[#455 '(']: r#278
[#455 '*']: r#278
[#455 '-']: r#278
[#455 'array']: r#278
[#455 'atomic']: r#278
[#455 'bitcast']: r#278
[#455 'bool']: r#278
[#455 'f16']: r#278
[#455 'f32']: r#278
[#455 'false']: r#278
[#455 'i32']: r#278
[#455 'mat2x2']: r#278
[#455 'mat2x3']: r#278
[#455 'mat2x4']: r#278
[#455 'mat3x2']: r#278
[#455 'mat3x3']: r#278
[#455 'mat3x4']: r#278
[#455 'mat4x2']: r#278
[#455 'mat4x3']: r#278
[#455 'mat4x4']: r#278
[#455 'ptr']: r#278
[#455 'sampler']: r#278
[#455 'sampler_comparison']: r#278
[#455 'texture_1d']: r#278
[#455 'texture_2d']: r#278
[#455 'texture_2d_array']: r#278
[#455 'texture_3d']: r#278
[#455 'texture_cube']: r#278
[#455 'texture_cube_array']: r#278
[#455 'texture_depth_2d']: r#278
[#455 'texture_depth_2d_array']: r#278
[#455 'texture_depth_cube']: r#278
[#455 'texture_depth_cube_array']: r#278
[#455 'texture_depth_multisampled_2d']: r#278
[#455 'texture_multisampled_2d']: r#278
[#455 'texture_storage_1d']: r#278
[#455 'texture_storage_2d']: r#278
[#455 'texture_storage_2d_array']: r#278
[#455 'texture_storage_3d']: r#278
[#455 'true']: r#278
[#455 'u32']: r#278
[#455 'vec2']: r#278
[#455 'vec3']: r#278
[#455 'vec4']: r#278
[#455 '~']: r#278
[#456 '!']: r#279
[#456 '&']: r#279
[#456 '(']: r#279
[#456 '*']: r#279
[#456 '-']: r#279
[#456 'array']: r#279
[#456 'atomic']: r#279
[#456 'bitcast']: r#279
[#456 'bool']: r#279
[#456 'f16']: r#279
[#456 'f32']: r#279
[#456 'false']: r#279
[#456 'i32']: r#279
[#456 'mat2x2']: r#279
[#456 'mat2x3']: r#279
[#456 'mat2x4']: r#279
[#456 'mat3x2']: r#279
[#456 'mat3x3']: r#279
[#456 'mat3x4']: r#279
[#456 'mat4x2']: r#279
[#456 'mat4x3']: r#279
[#456 'mat4x4']: r#279
[#456 'ptr']: r#279
[#456 'sampler']: r#279
[#456 'sampler_comparison']: r#279
[#456 'texture_1d']: r#279
[#456 'texture_2d']: r#279
[#456 'texture_2d_array']: r#279
[#456 'texture_3d']: r#279
[#456 'texture_cube']: r#279
[#456 'texture_cube_array']: r#279
[#456 'texture_depth_2d']: r#279
[#456 'texture_depth_2d_array']: r#279
[#456 'texture_depth_cube']: r#279
[#456 'texture_depth_cube_array']: r#279
[#456 'texture_depth_multisampled_2d']: r#279
[#456 'texture_multisampled_2d']: r#279
[#456 'texture_storage_1d']: r#279
[#456 'texture_storage_2d']: r#279
[#456 'texture_storage_2d_array']: r#279
[#456 'texture_storage_3d']: r#279
[#456 'true']: r#279
[#456 'u32']: r#279
[#456 'vec2']: r#279
[#456 'vec3']: r#279
[#456 'vec4']: r#279
[#456 '~']: r#279
[#457 '!']: r#280
[#457 '&']: r#280
[#457 '(']: r#280
[#457 '*']: r#280
[#457 '-']: r#280
[#457 'array']: r#280
[#457 'atomic']: r#280
[#457 'bitcast']: r#280
[#457 'bool']: r#280
[#457 'f16']: r#280
[#457 'f32']: r#280
[#457 'false']: r#280
[#457 'i32']: r#280
[#457 'mat2x2']: r#280
[#457 'mat2x3']: r#280
[#457 'mat2x4']: r#280
[#457 'mat3x2']: r#280
[#457 'mat3x3']: r#280
[#457 'mat3x4']: r#280
[#457 'mat4x2']: r#280
[#457 'mat4x3']: r#280
[#457 'mat4x4']: r#280
[#457 'ptr']: r#280
[#457 'sampler']: r#280
[#457 'sampler_comparison']: r#280
[#457 'texture_1d']: r#280
[#457 'texture_2d']: r#280
[#457 'texture_2d_array']: r#280
[#457 'texture_3d']: r#280
[#457 'texture_cube']: r#280
[#457 'texture_cube_array']: r#280
[#457 'texture_depth_2d']: r#280
[#457 'texture_depth_2d_array']: r#280
[#457 'texture_depth_cube']: r#280
[#457 'texture_depth_cube_array']: r#280
[#457 'texture_depth_multisampled_2d']: r#280
[#457 'texture_multisampled_2d']: r#280
[#457 'texture_storage_1d']: r#280
[#457 'texture_storage_2d']: r#280
[#457 'texture_storage_2d_array']: r#280
[#457 'texture_storage_3d']: r#280
[#457 'true']: r#280
[#457 'u32']: r#280
[#457 'vec2']: r#280
[#457 'vec3']: r#280
[#457 'vec4']: r#280
[#457 '~']: r#280
[#458 '!']: r#281
[#458 '&']: r#281
[#458 '(']: r#281
[#458 '*']: r#281
[#458 '-']: r#281
[#458 'array']: r#281
[#458 'atomic']: r#281
[#458 'bitcast']: r#281
[#458 'bool']: r#281
[#458 'f16']: r#281
[#458 'f32']: r#281
[#458 'false']: r#281
[#458 'i32']: r#281
[#458 'mat2x2']: r#281
[#458 'mat2x3']: r#281
[#458 'mat2x4']: r#281
[#458 'mat3x2']: r#281
[#458 'mat3x3']: r#281
[#458 'mat3x4']: r#281
[#458 'mat4x2']: r#281
[#458 'mat4x3']: r#281
[#458 'mat4x4']: r#281
[#458 'ptr']: r#281
[#458 'sampler']: r#281
[#458 'sampler_comparison']: r#281
[#458 'texture_1d']: r#281
[#458 'texture_2d']: r#281
[#458 'texture_2d_array']: r#281
[#458 'texture_3d']: r#281
[#458 'texture_cube']: r#281
[#458 'texture_cube_array']: r#281
[#458 'texture_depth_2d']: r#281
[#458 'texture_depth_2d_array']: r#281
[#458 'texture_depth_cube']: r#281
[#458 'texture_depth_cube_array']: r#281
[#458 'texture_depth_multisampled_2d']: r#281
[#458 'texture_multisampled_2d']: r#281
[#458 'texture_storage_1d']: r#281
[#458 'texture_storage_2d']: r#281
[#458 'texture_storage_2d_array']: r#281
[#458 'texture_storage_3d']: r#281
[#458 'true']: r#281
[#458 'u32']: r#281
[#458 'vec2']: r#281
[#458 'vec3']: r#281
[#458 'vec4']: r#281
[#458 '~']: r#281
[#459 '!']: r#282
[#459 '&']: r#282
[#459 '(']: r#282
[#459 '*']: r#282
[#459 '-']: r#282
[#459 'array']: r#282
[#459 'atomic']: r#282
[#459 'bitcast']: r#282
[#459 'bool']: r#282
[#459 'f16']: r#282
[#459 'f32']: r#282
[#459 'false']: r#282
[#459 'i32']: r#282
[#459 'mat2x2']: r#282
[#459 'mat2x3']: r#282
[#459 'mat2x4']: r#282
[#459 'mat3x2']: r#282
[#459 'mat3x3']: r#282
[#459 'mat3x4']: r#282
[#459 'mat4x2']: r#282
[#459 'mat4x3']: r#282
[#459 'mat4x4']: r#282
[#459 'ptr']: r#282
[#459 'sampler']: r#282
[#459 'sampler_comparison']: r#282
[#459 'texture_1d']: r#282
[#459 'texture_2d']: r#282
[#459 'texture_2d_array']: r#282
[#459 'texture_3d']: r#282
[#459 'texture_cube']: r#282
[#459 'texture_cube_array']: r#282
[#459 'texture_depth_2d']: r#282
[#459 'texture_depth_2d_array']: r#282
[#459 'texture_depth_cube']: r#282
[#459 'texture_depth_cube_array']: r#282
[#459 'texture_depth_multisampled_2d']: r#282
[#459 'texture_multisampled_2d']: r#282
[#459 'texture_storage_1d']: r#282
[#459 'texture_storage_2d']: r#282
[#459 'texture_storage_2d_array']: r#282
[#459 'texture_storage_3d']: r#282
[#459 'true']: r#282
[#459 'u32']: r#282
[#459 'vec2']: r#282
[#459 'vec3']: r#282
[#459 'vec4']: r#282
[#459 '~']: r#282
[#460 '!']: r#283
[#460 '&']: r#283
[#460 '(']: r#283
[#460 '*']: r#283
[#460 '-']: r#283
[#460 'array']: r#283
[#460 'atomic']: r#283
[#460 'bitcast']: r#283
[#460 'bool']: r#283
[#460 'f16']: r#283
[#460 'f32']: r#283
[#460 'false']: r#283
[#460 'i32']: r#283
[#460 'mat2x2']: r#283
[#460 'mat2x3']: r#283
[#460 'mat2x4']: r#283
[#460 'mat3x2']: r#283
[#460 'mat3x3']: r#283
[#460 'mat3x4']: r#283
[#460 'mat4x2']: r#283
[#460 'mat4x3']: r#283
[#460 'mat4x4']: r#283
[#460 'ptr']: r#283
[#460 'sampler']: r#283
[#460 'sampler_comparison']: r#283
[#460 'texture_1d']: r#283
[#460 'texture_2d']: r#283
[#460 'texture_2d_array']: r#283
[#460 'texture_3d']: r#283
[#460 'texture_cube']: r#283
[#460 'texture_cube_array']: r#283
[#460 'texture_depth_2d']: r#283
[#460 'texture_depth_2d_array']: r#283
[#460 'texture_depth_cube']: r#283
[#460 'texture_depth_cube_array']: r#283
[#460 'texture_depth_multisampled_2d']: r#283
[#460 'texture_multisampled_2d']: r#283
[#460 'texture_storage_1d']: r#283
[#460 'texture_storage_2d']: r#283
[#460 'texture_storage_2d_array']: r#283
[#460 'texture_storage_3d']: r#283
[#460 'true']: r#283
[#460 'u32']: r#283
[#460 'vec2']: r#283
[#460 'vec3']: r#283
[#460 'vec4']: r#283
[#460 '~']: r#283
[#461 '=']: s#175
[#462 ':']: s#177
[#462 '=']: r#284
[#463 '=']: r#285
[#464 '=']: s#175
[#465 ':']: s#177
[#465 '=']: r#286
[#466 '=']: r#287
[#467 '!']: s#70
[#467 '&']: s#73
[#467 '(']: s#116
[#467 '*']: s#72
[#467 '-']: s#69
[#467 'array']: s#83
[#467 'atomic']: s#95
[#467 'bitcast']: s#78
[#467 'bool']: s#88
[#467 'f16']: s#118
[#467 'f32']: s#117
[#467 'false']: s#115
[#467 'i32']: s#119
[#467 'mat2x2']: s#100
[#467 'mat2x3']: s#101
[#467 'mat2x4']: s#102
[#467 'mat3x2']: s#103
[#467 'mat3x3']: s#104
[#467 'mat3x4']: s#105
[#467 'mat4x2']: s#106
[#467 'mat4x3']: s#107
[#467 'mat4x4']: s#108
[#467 'ptr']: s#121
[#467 'sampler']: s#135
[#467 'sampler_comparison']: s#136
[#467 'texture_1d']: s#142
[#467 'texture_2d']: s#143
[#467 'texture_2d_array']: s#144
[#467 'texture_3d']: s#145
[#467 'texture_cube']: s#146
[#467 'texture_cube_array']: s#147
[#467 'texture_depth_2d']: s#137
[#467 'texture_depth_2d_array']: s#138
[#467 'texture_depth_cube']: s#139
[#467 'texture_depth_cube_array']: s#140
[#467 'texture_depth_multisampled_2d']: s#141
[#467 'texture_multisampled_2d']: s#148
[#467 'texture_storage_1d']: s#149
[#467 'texture_storage_2d']: s#150
[#467 'texture_storage_2d_array']: s#151
[#467 'texture_storage_3d']: s#152
[#467 'true']: s#114
[#467 'u32']: s#120
[#467 'vec2']: s#97
[#467 'vec3']: s#98
[#467 'vec4']: s#99
[#467 '~']: s#71
[#467 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#467 /0[fh]/]: s#130
[#467 /0[iu]?/]: s#110
[#467 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#467 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#467 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#467 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#467 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#467 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#467 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#467 /[1-9][0-9]*[fh]/]: s#131
[#467 /[1-9][0-9]*[iu]?/]: s#111
[#468 ')']: r#288
[#468 ';']: r#288
[#469 '{']: s#185
[#470 '&']: s#73
[#470 '*']: s#72
[#470 '_']: s#387
[#470 'const']: s#380
[#470 'let']: s#379
[#470 'var']: s#162
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#471 '&']: s#73
[#471 '*']: s#72
[#471 ';']: s#19
[#471 '_']: s#387
[#471 'break']: s#381
[#471 'const']: s#380
[#471 'continue']: s#382
[#471 'discard']: s#365
[#471 'for']: s#375
[#471 'if']: s#385
[#471 'let']: s#379
[#471 'loop']: s#374
[#471 'return']: s#371
[#471 'static_assert']: s#26
[#471 'switch']: s#373
[#471 'var']: s#162
[#471 'while']: s#376
[#471 '{']: s#185
[#471 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#472 '{']: s#185
[#473 'else']: s#550
[#474 '&']: r#289
[#474 '(']: r#289
[#474 '*']: r#289
[#474 ';']: r#289
[#474 '_']: r#289
[#474 'break']: r#289
[#474 'const']: r#289
[#474 'continue']: r#289
[#474 'continuing']: r#289
[#474 'discard']: r#289
[#474 'else']: r#289
[#474 'fallthrough']: r#289
[#474 'for']: r#289
[#474 'if']: r#289
[#474 'let']: r#289
[#474 'loop']: r#289
[#474 'return']: r#289
[#474 'static_assert']: r#289
[#474 'switch']: r#289
[#474 'var']: r#289
[#474 'while']: r#289
[#474 '{']: r#289
[#474 '}']: r#289
[#474 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#289
[#475 'else']: s#476
[#476 'if']: s#546
[#477 ';']: r#290
[#478 ';']: r#291
[#479 '&']: r#292
[#479 '(']: r#292
[#479 '*']: r#292
[#479 ';']: r#292
[#479 '_']: r#292
[#479 'break']: r#292
[#479 'const']: r#292
[#479 'continue']: r#292
[#479 'continuing']: r#292
[#479 'discard']: r#292
[#479 'fallthrough']: r#292
[#479 'for']: r#292
[#479 'if']: r#292
[#479 'let']: r#292
[#479 'loop']: r#292
[#479 'return']: r#292
[#479 'static_assert']: r#292
[#479 'switch']: r#292
[#479 'var']: r#292
[#479 'while']: r#292
[#479 '{']: r#292
[#479 '}']: r#292
[#479 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#480 '&']: r#293
[#480 '(']: r#293
[#480 '*']: r#293
[#480 ';']: r#293
[#480 '_']: r#293
[#480 'break']: r#293
[#480 'const']: r#293
[#480 'continue']: r#293
[#480 'continuing']: r#293
[#480 'discard']: r#293
[#480 'fallthrough']: r#293
[#480 'for']: r#293
[#480 'if']: r#293
[#480 'let']: r#293
[#480 'loop']: r#293
[#480 'return']: r#293
[#480 'static_assert']: r#293
[#480 'switch']: r#293
[#480 'var']: r#293
[#480 'while']: r#293
[#480 '{']: r#293
[#480 '}']: r#293
[#480 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#293
[#481 '&']: r#294
[#481 '(']: r#294
[#481 '*']: r#294
[#481 ';']: r#294
[#481 '_']: r#294
[#481 'break']: r#294
[#481 'const']: r#294
[#481 'continue']: r#294
[#481 'continuing']: r#294
[#481 'discard']: r#294
[#481 'fallthrough']: r#294
[#481 'for']: r#294
[#481 'if']: r#294
[#481 'let']: r#294
[#481 'loop']: r#294
[#481 'return']: r#294
[#481 'static_assert']: r#294
[#481 'switch']: r#294
[#481 'var']: r#294
[#481 'while']: r#294
[#481 '{']: r#294
[#481 '}']: r#294
[#481 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#482 '&']: r#295
[#482 '(']: r#295
[#482 '*']: r#295
[#482 ';']: r#295
[#482 '_']: r#295
[#482 'break']: r#295
[#482 'const']: r#295
[#482 'continue']: r#295
[#482 'continuing']: r#295
[#482 'discard']: r#295
[#482 'fallthrough']: r#295
[#482 'for']: r#295
[#482 'if']: r#295
[#482 'let']: r#295
[#482 'loop']: r#295
[#482 'return']: r#295
[#482 'static_assert']: r#295
[#482 'switch']: r#295
[#482 'var']: r#295
[#482 'while']: r#295
[#482 '{']: r#295
[#482 '}']: r#295
[#482 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#483 '&']: r#296
[#483 '(']: r#296
[#483 '*']: r#296
[#483 ';']: r#296
[#483 '_']: r#296
[#483 'break']: r#296
[#483 'const']: r#296
[#483 'continue']: r#296
[#483 'continuing']: r#296
[#483 'discard']: r#296
[#483 'fallthrough']: r#296
[#483 'for']: r#296
[#483 'if']: r#296
[#483 'let']: r#296
[#483 'loop']: r#296
[#483 'return']: r#296
[#483 'static_assert']: r#296
[#483 'switch']: r#296
[#483 'var']: r#296
[#483 'while']: r#296
[#483 '{']: r#296
[#483 '}']: r#296
[#483 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#296
[#484 '&']: r#297
[#484 '(']: r#297
[#484 '*']: r#297
[#484 ';']: r#297
[#484 '_']: r#297
[#484 'break']: r#297
[#484 'const']: r#297
[#484 'continue']: r#297
[#484 'continuing']: r#297
[#484 'discard']: r#297
[#484 'fallthrough']: r#297
[#484 'for']: r#297
[#484 'if']: r#297
[#484 'let']: r#297
[#484 'loop']: r#297
[#484 'return']: r#297
[#484 'static_assert']: r#297
[#484 'switch']: r#297
[#484 'var']: r#297
[#484 'while']: r#297
[#484 '{']: r#297
[#484 '}']: r#297
[#484 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#297
[#485 '&']: r#298
[#485 '(']: r#298
[#485 '*']: r#298
[#485 ';']: r#298
[#485 '_']: r#298
[#485 'break']: r#298
[#485 'const']: r#298
[#485 'continue']: r#298
[#485 'continuing']: r#298
[#485 'discard']: r#298
[#485 'fallthrough']: r#298
[#485 'for']: r#298
[#485 'if']: r#298
[#485 'let']: r#298
[#485 'loop']: r#298
[#485 'return']: r#298
[#485 'static_assert']: r#298
[#485 'switch']: r#298
[#485 'var']: r#298
[#485 'while']: r#298
[#485 '{']: r#298
[#485 '}']: r#298
[#485 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#298
[#486 '&']: r#299
[#486 '(']: r#299
[#486 '*']: r#299
[#486 ';']: r#299
[#486 '_']: r#299
[#486 'break']: r#299
[#486 'const']: r#299
[#486 'continue']: r#299
[#486 'continuing']: r#299
[#486 'discard']: r#299
[#486 'fallthrough']: r#299
[#486 'for']: r#299
[#486 'if']: r#299
[#486 'let']: r#299
[#486 'loop']: r#299
[#486 'return']: r#299
[#486 'static_assert']: r#299
[#486 'switch']: r#299
[#486 'var']: r#299
[#486 'while']: r#299
[#486 '{']: r#299
[#486 '}']: r#299
[#486 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#299
[#487 '&']: r#300
[#487 '(']: r#300
[#487 '*']: r#300
[#487 ';']: r#300
[#487 '_']: r#300
[#487 'break']: r#300
[#487 'const']: r#300
[#487 'continue']: r#300
[#487 'continuing']: r#300
[#487 'discard']: r#300
[#487 'fallthrough']: r#300
[#487 'for']: r#300
[#487 'if']: r#300
[#487 'let']: r#300
[#487 'loop']: r#300
[#487 'return']: r#300
[#487 'static_assert']: r#300
[#487 'switch']: r#300
[#487 'var']: r#300
[#487 'while']: r#300
[#487 '{']: r#300
[#487 '}']: r#300
[#487 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#300
[#488 '&']: r#301
[#488 '(']: r#301
[#488 '*']: r#301
[#488 ';']: r#301
[#488 '_']: r#301
[#488 'break']: r#301
[#488 'const']: r#301
[#488 'continue']: r#301
[#488 'continuing']: r#301
[#488 'discard']: r#301
[#488 'fallthrough']: r#301
[#488 'for']: r#301
[#488 'if']: r#301
[#488 'let']: r#301
[#488 'loop']: r#301
[#488 'return']: r#301
[#488 'static_assert']: r#301
[#488 'switch']: r#301
[#488 'var']: r#301
[#488 'while']: r#301
[#488 '{']: r#301
[#488 '}']: r#301
[#488 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#301
[#489 '}']: r#302
[#490 '&']: r#303
[#490 '(']: r#303
[#490 '*']: r#303
[#490 ';']: r#303
[#490 '@']: r#303
[#490 '_']: r#303
[#490 'break']: r#303
[#490 'const']: r#303
[#490 'continue']: r#303
[#490 'continuing']: r#303
[#490 'discard']: r#303
[#490 'else']: r#303
[#490 'fallthrough']: r#303
[#490 'fn']: r#303
[#490 'for']: r#303
[#490 'if']: r#303
[#490 'let']: r#303
[#490 'loop']: r#303
[#490 'override']: r#303
[#490 'return']: r#303
[#490 'static_assert']: r#303
[#490 'struct']: r#303
[#490 'switch']: r#303
[#490 'type']: r#303
[#490 'var']: r#303
[#490 'while']: r#303
[#490 '{']: r#303
[#490 '}']: r#303
[#490 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#303
[#490 EndOfText]: r#303
[#491 '&']: r#304
[#491 '(']: r#304
[#491 '*']: r#304
[#491 ';']: r#304
[#491 '@']: r#304
[#491 '_']: r#304
[#491 'break']: r#304
[#491 'case']: r#304
[#491 'const']: r#304
[#491 'continue']: r#304
[#491 'continuing']: r#304
[#491 'default']: r#304
[#491 'discard']: r#304
[#491 'else']: r#304
[#491 'fallthrough']: r#304
[#491 'fn']: r#304
[#491 'for']: r#304
[#491 'if']: r#304
[#491 'let']: r#304
[#491 'loop']: r#304
[#491 'override']: r#304
[#491 'return']: r#304
[#491 'static_assert']: r#304
[#491 'struct']: r#304
[#491 'switch']: r#304
[#491 'type']: r#304
[#491 'var']: r#304
[#491 'while']: r#304
[#491 '{']: r#304
[#491 '}']: r#304
[#491 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#304
[#491 EndOfText]: r#304
[#492 'read']: s#543
[#492 'read_write']: s#545
[#492 'write']: s#544
[#493 '(']: r#305
[#493 ')']: r#305
[#493 ',']: r#305
[#493 ';']: r#305
[#493 '=']: r#305
[#493 '>']: r#305
[#493 '{']: r#305
[#493 '}']: r#305
[#494 '(']: r#306
[#494 ')']: r#306
[#494 ',']: r#306
[#494 ';']: r#306
[#494 '=']: r#306
[#494 '>']: r#306
[#494 '{']: r#306
[#494 '}']: r#306
[#495 '(']: r#307
[#495 ')']: r#307
[#495 ',']: r#307
[#495 ';']: r#307
[#495 '=']: r#307
[#495 '>']: r#307
[#495 '{']: r#307
[#495 '}']: r#307
[#496 'array']: s#319
[#496 'atomic']: s#95
[#496 'bool']: s#88
[#496 'f16']: s#118
[#496 'f32']: s#117
[#496 'i32']: s#119
[#496 'mat2x2']: s#100
[#496 'mat2x3']: s#101
[#496 'mat2x4']: s#102
[#496 'mat3x2']: s#103
[#496 'mat3x3']: s#104
[#496 'mat3x4']: s#105
[#496 'mat4x2']: s#106
[#496 'mat4x3']: s#107
[#496 'mat4x4']: s#108
[#496 'ptr']: s#121
[#496 'sampler']: s#135
[#496 'sampler_comparison']: s#136
[#496 'texture_1d']: s#142
[#496 'texture_2d']: s#143
[#496 'texture_2d_array']: s#144
[#496 'texture_3d']: s#145
[#496 'texture_cube']: s#146
[#496 'texture_cube_array']: s#147
[#496 'texture_depth_2d']: s#137
[#496 'texture_depth_2d_array']: s#138
[#496 'texture_depth_cube']: s#139
[#496 'texture_depth_cube_array']: s#140
[#496 'texture_depth_multisampled_2d']: s#141
[#496 'texture_multisampled_2d']: s#148
[#496 'texture_storage_1d']: s#149
[#496 'texture_storage_2d']: s#150
[#496 'texture_storage_2d_array']: s#151
[#496 'texture_storage_3d']: s#152
[#496 'u32']: s#120
[#496 'vec2']: s#97
[#496 'vec3']: s#98
[#496 'vec4']: s#99
[#496 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#497 '>']: s#235
[#498 '!']: s#70
[#498 '&']: s#73
[#498 '(']: s#116
[#498 '*']: s#72
[#498 '-']: s#69
[#498 'array']: s#83
[#498 'atomic']: s#95
[#498 'bitcast']: s#78
[#498 'bool']: s#88
[#498 'f16']: s#118
[#498 'f32']: s#117
[#498 'false']: s#115
[#498 'i32']: s#119
[#498 'mat2x2']: s#100
[#498 'mat2x3']: s#101
[#498 'mat2x4']: s#102
[#498 'mat3x2']: s#103
[#498 'mat3x3']: s#104
[#498 'mat3x4']: s#105
[#498 'mat4x2']: s#106
[#498 'mat4x3']: s#107
[#498 'mat4x4']: s#108
[#498 'ptr']: s#121
[#498 'sampler']: s#135
[#498 'sampler_comparison']: s#136
[#498 'texture_1d']: s#142
[#498 'texture_2d']: s#143
[#498 'texture_2d_array']: s#144
[#498 'texture_3d']: s#145
[#498 'texture_cube']: s#146
[#498 'texture_cube_array']: s#147
[#498 'texture_depth_2d']: s#137
[#498 'texture_depth_2d_array']: s#138
[#498 'texture_depth_cube']: s#139
[#498 'texture_depth_cube_array']: s#140
[#498 'texture_depth_multisampled_2d']: s#141
[#498 'texture_multisampled_2d']: s#148
[#498 'texture_storage_1d']: s#149
[#498 'texture_storage_2d']: s#150
[#498 'texture_storage_2d_array']: s#151
[#498 'texture_storage_3d']: s#152
[#498 'true']: s#114
[#498 'u32']: s#120
[#498 'vec2']: s#97
[#498 'vec3']: s#98
[#498 'vec4']: s#99
[#498 '~']: s#71
[#498 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#498 /0[fh]/]: s#130
[#498 /0[iu]?/]: s#110
[#498 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#498 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#498 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#498 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#498 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#498 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#498 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#498 /[1-9][0-9]*[fh]/]: s#131
[#498 /[1-9][0-9]*[iu]?/]: s#111
[#499 '(']: r#308
[#499 ')']: r#308
[#499 ',']: r#308
[#499 ';']: r#308
[#499 '=']: r#308
[#499 '>']: r#308
[#499 '{']: r#308
[#499 '}']: r#308
[#500 '(']: r#309
[#500 ')']: r#309
[#500 ',']: r#309
[#500 ';']: r#309
[#500 '=']: r#309
[#500 '>']: r#309
[#500 '{']: r#309
[#500 '}']: r#309
[#501 '(']: s#116
[#502 '!']: r#310
[#502 '&']: r#310
[#502 '(']: r#310
[#502 '*']: r#310
[#502 '-']: r#310
[#502 'array']: r#310
[#502 'atomic']: r#310
[#502 'bitcast']: r#310
[#502 'bool']: r#310
[#502 'f16']: r#310
[#502 'f32']: r#310
[#502 'false']: r#310
[#502 'i32']: r#310
[#502 'mat2x2']: r#310
[#502 'mat2x3']: r#310
[#502 'mat2x4']: r#310
[#502 'mat3x2']: r#310
[#502 'mat3x3']: r#310
[#502 'mat3x4']: r#310
[#502 'mat4x2']: r#310
[#502 'mat4x3']: r#310
[#502 'mat4x4']: r#310
[#502 'ptr']: r#310
[#502 'sampler']: r#310
[#502 'sampler_comparison']: r#310
[#502 'texture_1d']: r#310
[#502 'texture_2d']: r#310
[#502 'texture_2d_array']: r#310
[#502 'texture_3d']: r#310
[#502 'texture_cube']: r#310
[#502 'texture_cube_array']: r#310
[#502 'texture_depth_2d']: r#310
[#502 'texture_depth_2d_array']: r#310
[#502 'texture_depth_cube']: r#310
[#502 'texture_depth_cube_array']: r#310
[#502 'texture_depth_multisampled_2d']: r#310
[#502 'texture_multisampled_2d']: r#310
[#502 'texture_storage_1d']: r#310
[#502 'texture_storage_2d']: r#310
[#502 'texture_storage_2d_array']: r#310
[#502 'texture_storage_3d']: r#310
[#502 'true']: r#310
[#502 'u32']: r#310
[#502 'vec2']: r#310
[#502 'vec3']: r#310
[#502 'vec4']: r#310
[#502 '~']: r#310
[#503 '!']: r#311
[#503 '&']: r#311
[#503 '(']: r#311
[#503 '*']: r#311
[#503 '-']: r#311
[#503 'array']: r#311
[#503 'atomic']: r#311
[#503 'bitcast']: r#311
[#503 'bool']: r#311
[#503 'f16']: r#311
[#503 'f32']: r#311
[#503 'false']: r#311
[#503 'i32']: r#311
[#503 'mat2x2']: r#311
[#503 'mat2x3']: r#311
[#503 'mat2x4']: r#311
[#503 'mat3x2']: r#311
[#503 'mat3x3']: r#311
[#503 'mat3x4']: r#311
[#503 'mat4x2']: r#311
[#503 'mat4x3']: r#311
[#503 'mat4x4']: r#311
[#503 'ptr']: r#311
[#503 'sampler']: r#311
[#503 'sampler_comparison']: r#311
[#503 'texture_1d']: r#311
[#503 'texture_2d']: r#311
[#503 'texture_2d_array']: r#311
[#503 'texture_3d']: r#311
[#503 'texture_cube']: r#311
[#503 'texture_cube_array']: r#311
[#503 'texture_depth_2d']: r#311
[#503 'texture_depth_2d_array']: r#311
[#503 'texture_depth_cube']: r#311
[#503 'texture_depth_cube_array']: r#311
[#503 'texture_depth_multisampled_2d']: r#311
[#503 'texture_multisampled_2d']: r#311
[#503 'texture_storage_1d']: r#311
[#503 'texture_storage_2d']: r#311
[#503 'texture_storage_2d_array']: r#311
[#503 'texture_storage_3d']: r#311
[#503 'true']: r#311
[#503 'u32']: r#311
[#503 'vec2']: r#311
[#503 'vec3']: r#311
[#503 'vec4']: r#311
[#503 '~']: r#311
[#504 ',']: s#412
[#505 '!=']: r#312
[#505 '%']: r#312
[#505 '&&']: r#312
[#505 '&']: r#312
[#505 ')']: r#312
[#505 '*']: r#312
[#505 '+']: r#312
[#505 ',']: r#312
[#505 '-']: r#312
[#505 '.']: r#312
[#505 '/']: r#312
[#505 ':']: r#312
[#505 ';']: r#312
[#505 '<']: r#312
[#505 '<<']: r#312
[#505 '<=']: r#312
[#505 '==']: r#312
[#505 '>']: r#312
[#505 '>=']: r#312
[#505 '>>']: r#312
[#505 '[']: r#312
[#505 ']']: r#312
[#505 '^']: r#312
[#505 '{']: r#312
[#505 '|']: r#312
[#505 '||']: r#312
[#506 '.']: s#206
[#506 '[']: s#205
[#507 '!=']: r#313
[#507 '%']: r#313
[#507 '%=']: r#313
[#507 '&&']: r#313
[#507 '&']: r#313
[#507 '&=']: r#313
[#507 ')']: r#313
[#507 '*']: r#313
[#507 '*=']: r#313
[#507 '+']: r#313
[#507 '++']: r#313
[#507 '+=']: r#313
[#507 ',']: r#313
[#507 '-']: r#313
[#507 '--']: r#313
[#507 '-=']: r#313
[#507 '.']: r#313
[#507 '/']: r#313
[#507 '/=']: r#313
[#507 ':']: r#313
[#507 ';']: r#313
[#507 '<']: r#313
[#507 '<<']: r#313
[#507 '<<=']: r#313
[#507 '<=']: r#313
[#507 '=']: r#313
[#507 '==']: r#313
[#507 '>']: r#313
[#507 '>=']: r#313
[#507 '>>']: r#313
[#507 '>>=']: r#313
[#507 '[']: r#313
[#507 ']']: r#313
[#507 '^']: r#313
[#507 '^=']: r#313
[#507 '{']: r#313
[#507 '|']: r#313
[#507 '|=']: r#313
[#507 '||']: r#313
[#508 '!=']: r#314
[#508 '%']: r#314
[#508 '%=']: r#314
[#508 '&&']: r#314
[#508 '&']: r#314
[#508 '&=']: r#314
[#508 ')']: r#314
[#508 '*']: r#314
[#508 '*=']: r#314
[#508 '+']: r#314
[#508 '++']: r#314
[#508 '+=']: r#314
[#508 ',']: r#314
[#508 '-']: r#314
[#508 '--']: r#314
[#508 '-=']: r#314
[#508 '/']: r#314
[#508 '/=']: r#314
[#508 ':']: r#314
[#508 ';']: r#314
[#508 '<']: r#314
[#508 '<<']: r#314
[#508 '<<=']: r#314
[#508 '<=']: r#314
[#508 '=']: r#314
[#508 '==']: r#314
[#508 '>']: r#314
[#508 '>=']: r#314
[#508 '>>']: r#314
[#508 '>>=']: r#314
[#508 ']']: r#314
[#508 '^']: r#314
[#508 '^=']: r#314
[#508 '{']: r#314
[#508 '|']: r#314
[#508 '|=']: r#314
[#508 '||']: r#314
[#509 '!=']: r#315
[#509 '%']: r#315
[#509 '%=']: r#315
[#509 '&&']: r#315
[#509 '&']: r#315
[#509 '&=']: r#315
[#509 ')']: r#315
[#509 '*']: r#315
[#509 '*=']: r#315
[#509 '+']: r#315
[#509 '++']: r#315
[#509 '+=']: r#315
[#509 ',']: r#315
[#509 '-']: r#315
[#509 '--']: r#315
[#509 '-=']: r#315
[#509 '/']: r#315
[#509 '/=']: r#315
[#509 ':']: r#315
[#509 ';']: r#315
[#509 '<']: r#315
[#509 '<<']: r#315
[#509 '<<=']: r#315
[#509 '<=']: r#315
[#509 '=']: r#315
[#509 '==']: r#315
[#509 '>']: r#315
[#509 '>=']: r#315
[#509 '>>']: r#315
[#509 '>>=']: r#315
[#509 ']']: r#315
[#509 '^']: r#315
[#509 '^=']: r#315
[#509 '{']: r#315
[#509 '|']: r#315
[#509 '|=']: r#315
[#509 '||']: r#315
[#510 '!=']: r#316
[#510 '%']: r#316
[#510 '%=']: r#316
[#510 '&&']: r#316
[#510 '&']: r#316
[#510 '&=']: r#316
[#510 ')']: r#316
[#510 '*']: r#316
[#510 '*=']: r#316
[#510 '+']: r#316
[#510 '++']: r#316
[#510 '+=']: r#316
[#510 ',']: r#316
[#510 '-']: r#316
[#510 '--']: r#316
[#510 '-=']: r#316
[#510 '/']: r#316
[#510 '/=']: r#316
[#510 ':']: r#316
[#510 ';']: r#316
[#510 '<']: r#316
[#510 '<<']: r#316
[#510 '<<=']: r#316
[#510 '<=']: r#316
[#510 '=']: r#316
[#510 '==']: r#316
[#510 '>']: r#316
[#510 '>=']: r#316
[#510 '>>']: r#316
[#510 '>>=']: r#316
[#510 ']']: r#316
[#510 '^']: r#316
[#510 '^=']: r#316
[#510 '{']: r#316
[#510 '|']: r#316
[#510 '|=']: r#316
[#510 '||']: r#316
[#511 '!=']: r#317
[#511 '%']: r#317
[#511 '%=']: r#317
[#511 '&&']: r#317
[#511 '&']: r#317
[#511 '&=']: r#317
[#511 ')']: r#317
[#511 '*']: r#317
[#511 '*=']: r#317
[#511 '+']: r#317
[#511 '++']: r#317
[#511 '+=']: r#317
[#511 ',']: r#317
[#511 '-']: r#317
[#511 '--']: r#317
[#511 '-=']: r#317
[#511 '/']: r#317
[#511 '/=']: r#317
[#511 ':']: r#317
[#511 ';']: r#317
[#511 '<']: r#317
[#511 '<<']: r#317
[#511 '<<=']: r#317
[#511 '<=']: r#317
[#511 '=']: r#317
[#511 '==']: r#317
[#511 '>']: r#317
[#511 '>=']: r#317
[#511 '>>']: r#317
[#511 '>>=']: r#317
[#511 ']']: r#317
[#511 '^']: r#317
[#511 '^=']: r#317
[#511 '{']: r#317
[#511 '|']: r#317
[#511 '|=']: r#317
[#511 '||']: r#317
[#512 '@']: r#318
[#512 'array']: r#318
[#512 'atomic']: r#318
[#512 'bool']: r#318
[#512 'f16']: r#318
[#512 'f32']: r#318
[#512 'fn']: r#318
[#512 'i32']: r#318
[#512 'mat2x2']: r#318
[#512 'mat2x3']: r#318
[#512 'mat2x4']: r#318
[#512 'mat3x2']: r#318
[#512 'mat3x3']: r#318
[#512 'mat3x4']: r#318
[#512 'mat4x2']: r#318
[#512 'mat4x3']: r#318
[#512 'mat4x4']: r#318
[#512 'override']: r#318
[#512 'ptr']: r#318
[#512 'sampler']: r#318
[#512 'sampler_comparison']: r#318
[#512 'texture_1d']: r#318
[#512 'texture_2d']: r#318
[#512 'texture_2d_array']: r#318
[#512 'texture_3d']: r#318
[#512 'texture_cube']: r#318
[#512 'texture_cube_array']: r#318
[#512 'texture_depth_2d']: r#318
[#512 'texture_depth_2d_array']: r#318
[#512 'texture_depth_cube']: r#318
[#512 'texture_depth_cube_array']: r#318
[#512 'texture_depth_multisampled_2d']: r#318
[#512 'texture_multisampled_2d']: r#318
[#512 'texture_storage_1d']: r#318
[#512 'texture_storage_2d']: r#318
[#512 'texture_storage_2d_array']: r#318
[#512 'texture_storage_3d']: r#318
[#512 'u32']: r#318
[#512 'var']: r#318
[#512 'vec2']: r#318
[#512 'vec3']: r#318
[#512 'vec4']: r#318
[#512 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#318
[#513 '!']: s#70
[#513 '&']: s#73
[#513 '(']: s#116
[#513 ')']: r#319
[#513 '*']: s#72
[#513 '-']: s#69
[#513 'array']: s#83
[#513 'atomic']: s#95
[#513 'bitcast']: s#78
[#513 'bool']: s#88
[#513 'f16']: s#118
[#513 'f32']: s#117
[#513 'false']: s#115
[#513 'i32']: s#119
[#513 'mat2x2']: s#100
[#513 'mat2x3']: s#101
[#513 'mat2x4']: s#102
[#513 'mat3x2']: s#103
[#513 'mat3x3']: s#104
[#513 'mat3x4']: s#105
[#513 'mat4x2']: s#106
[#513 'mat4x3']: s#107
[#513 'mat4x4']: s#108
[#513 'ptr']: s#121
[#513 'sampler']: s#135
[#513 'sampler_comparison']: s#136
[#513 'texture_1d']: s#142
[#513 'texture_2d']: s#143
[#513 'texture_2d_array']: s#144
[#513 'texture_3d']: s#145
[#513 'texture_cube']: s#146
[#513 'texture_cube_array']: s#147
[#513 'texture_depth_2d']: s#137
[#513 'texture_depth_2d_array']: s#138
[#513 'texture_depth_cube']: s#139
[#513 'texture_depth_cube_array']: s#140
[#513 'texture_depth_multisampled_2d']: s#141
[#513 'texture_multisampled_2d']: s#148
[#513 'texture_storage_1d']: s#149
[#513 'texture_storage_2d']: s#150
[#513 'texture_storage_2d_array']: s#151
[#513 'texture_storage_3d']: s#152
[#513 'true']: s#114
[#513 'u32']: s#120
[#513 'vec2']: s#97
[#513 'vec3']: s#98
[#513 'vec4']: s#99
[#513 '~']: s#71
[#513 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#513 /0[fh]/]: s#130
[#513 /0[iu]?/]: s#110
[#513 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#513 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#513 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#513 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#513 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#513 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#513 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#513 /[1-9][0-9]*[fh]/]: s#131
[#513 /[1-9][0-9]*[iu]?/]: s#111
[#514 ')']: s#324
[#515 '@']: r#320
[#515 'array']: r#320
[#515 'atomic']: r#320
[#515 'bool']: r#320
[#515 'f16']: r#320
[#515 'f32']: r#320
[#515 'fn']: r#320
[#515 'i32']: r#320
[#515 'mat2x2']: r#320
[#515 'mat2x3']: r#320
[#515 'mat2x4']: r#320
[#515 'mat3x2']: r#320
[#515 'mat3x3']: r#320
[#515 'mat3x4']: r#320
[#515 'mat4x2']: r#320
[#515 'mat4x3']: r#320
[#515 'mat4x4']: r#320
[#515 'override']: r#320
[#515 'ptr']: r#320
[#515 'sampler']: r#320
[#515 'sampler_comparison']: r#320
[#515 'texture_1d']: r#320
[#515 'texture_2d']: r#320
[#515 'texture_2d_array']: r#320
[#515 'texture_3d']: r#320
[#515 'texture_cube']: r#320
[#515 'texture_cube_array']: r#320
[#515 'texture_depth_2d']: r#320
[#515 'texture_depth_2d_array']: r#320
[#515 'texture_depth_cube']: r#320
[#515 'texture_depth_cube_array']: r#320
[#515 'texture_depth_multisampled_2d']: r#320
[#515 'texture_multisampled_2d']: r#320
[#515 'texture_storage_1d']: r#320
[#515 'texture_storage_2d']: r#320
[#515 'texture_storage_2d_array']: r#320
[#515 'texture_storage_3d']: r#320
[#515 'u32']: r#320
[#515 'var']: r#320
[#515 'vec2']: r#320
[#515 'vec3']: r#320
[#515 'vec4']: r#320
[#515 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#320
[#516 ')']: r#319
[#517 '@']: r#321
[#517 'array']: r#321
[#517 'atomic']: r#321
[#517 'bool']: r#321
[#517 'f16']: r#321
[#517 'f32']: r#321
[#517 'fn']: r#321
[#517 'i32']: r#321
[#517 'mat2x2']: r#321
[#517 'mat2x3']: r#321
[#517 'mat2x4']: r#321
[#517 'mat3x2']: r#321
[#517 'mat3x3']: r#321
[#517 'mat3x4']: r#321
[#517 'mat4x2']: r#321
[#517 'mat4x3']: r#321
[#517 'mat4x4']: r#321
[#517 'override']: r#321
[#517 'ptr']: r#321
[#517 'sampler']: r#321
[#517 'sampler_comparison']: r#321
[#517 'texture_1d']: r#321
[#517 'texture_2d']: r#321
[#517 'texture_2d_array']: r#321
[#517 'texture_3d']: r#321
[#517 'texture_cube']: r#321
[#517 'texture_cube_array']: r#321
[#517 'texture_depth_2d']: r#321
[#517 'texture_depth_2d_array']: r#321
[#517 'texture_depth_cube']: r#321
[#517 'texture_depth_cube_array']: r#321
[#517 'texture_depth_multisampled_2d']: r#321
[#517 'texture_multisampled_2d']: r#321
[#517 'texture_storage_1d']: r#321
[#517 'texture_storage_2d']: r#321
[#517 'texture_storage_2d_array']: r#321
[#517 'texture_storage_3d']: r#321
[#517 'u32']: r#321
[#517 'var']: r#321
[#517 'vec2']: r#321
[#517 'vec3']: r#321
[#517 'vec4']: r#321
[#517 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#321
[#518 '@']: r#322
[#518 'array']: r#322
[#518 'atomic']: r#322
[#518 'bool']: r#322
[#518 'f16']: r#322
[#518 'f32']: r#322
[#518 'fn']: r#322
[#518 'i32']: r#322
[#518 'mat2x2']: r#322
[#518 'mat2x3']: r#322
[#518 'mat2x4']: r#322
[#518 'mat3x2']: r#322
[#518 'mat3x3']: r#322
[#518 'mat3x4']: r#322
[#518 'mat4x2']: r#322
[#518 'mat4x3']: r#322
[#518 'mat4x4']: r#322
[#518 'override']: r#322
[#518 'ptr']: r#322
[#518 'sampler']: r#322
[#518 'sampler_comparison']: r#322
[#518 'texture_1d']: r#322
[#518 'texture_2d']: r#322
[#518 'texture_2d_array']: r#322
[#518 'texture_3d']: r#322
[#518 'texture_cube']: r#322
[#518 'texture_cube_array']: r#322
[#518 'texture_depth_2d']: r#322
[#518 'texture_depth_2d_array']: r#322
[#518 'texture_depth_cube']: r#322
[#518 'texture_depth_cube_array']: r#322
[#518 'texture_depth_multisampled_2d']: r#322
[#518 'texture_multisampled_2d']: r#322
[#518 'texture_storage_1d']: r#322
[#518 'texture_storage_2d']: r#322
[#518 'texture_storage_2d_array']: r#322
[#518 'texture_storage_3d']: r#322
[#518 'u32']: r#322
[#518 'var']: r#322
[#518 'vec2']: r#322
[#518 'vec3']: r#322
[#518 'vec4']: r#322
[#518 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#322
[#519 ')']: r#319
[#519 'center']: s#526
[#519 'centroid']: s#527
[#519 'sample']: s#528
[#520 '@']: r#323
[#520 'array']: r#323
[#520 'atomic']: r#323
[#520 'bool']: r#323
[#520 'f16']: r#323
[#520 'f32']: r#323
[#520 'fn']: r#323
[#520 'i32']: r#323
[#520 'mat2x2']: r#323
[#520 'mat2x3']: r#323
[#520 'mat2x4']: r#323
[#520 'mat3x2']: r#323
[#520 'mat3x3']: r#323
[#520 'mat3x4']: r#323
[#520 'mat4x2']: r#323
[#520 'mat4x3']: r#323
[#520 'mat4x4']: r#323
[#520 'override']: r#323
[#520 'ptr']: r#323
[#520 'sampler']: r#323
[#520 'sampler_comparison']: r#323
[#520 'texture_1d']: r#323
[#520 'texture_2d']: r#323
[#520 'texture_2d_array']: r#323
[#520 'texture_3d']: r#323
[#520 'texture_cube']: r#323
[#520 'texture_cube_array']: r#323
[#520 'texture_depth_2d']: r#323
[#520 'texture_depth_2d_array']: r#323
[#520 'texture_depth_cube']: r#323
[#520 'texture_depth_cube_array']: r#323
[#520 'texture_depth_multisampled_2d']: r#323
[#520 'texture_multisampled_2d']: r#323
[#520 'texture_storage_1d']: r#323
[#520 'texture_storage_2d']: r#323
[#520 'texture_storage_2d_array']: r#323
[#520 'texture_storage_3d']: r#323
[#520 'u32']: r#323
[#520 'var']: r#323
[#520 'vec2']: r#323
[#520 'vec3']: r#323
[#520 'vec4']: r#323
[#520 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#323
[#521 '@']: r#324
[#521 'array']: r#324
[#521 'atomic']: r#324
[#521 'bool']: r#324
[#521 'f16']: r#324
[#521 'f32']: r#324
[#521 'fn']: r#324
[#521 'i32']: r#324
[#521 'mat2x2']: r#324
[#521 'mat2x3']: r#324
[#521 'mat2x4']: r#324
[#521 'mat3x2']: r#324
[#521 'mat3x3']: r#324
[#521 'mat3x4']: r#324
[#521 'mat4x2']: r#324
[#521 'mat4x3']: r#324
[#521 'mat4x4']: r#324
[#521 'override']: r#324
[#521 'ptr']: r#324
[#521 'sampler']: r#324
[#521 'sampler_comparison']: r#324
[#521 'texture_1d']: r#324
[#521 'texture_2d']: r#324
[#521 'texture_2d_array']: r#324
[#521 'texture_3d']: r#324
[#521 'texture_cube']: r#324
[#521 'texture_cube_array']: r#324
[#521 'texture_depth_2d']: r#324
[#521 'texture_depth_2d_array']: r#324
[#521 'texture_depth_cube']: r#324
[#521 'texture_depth_cube_array']: r#324
[#521 'texture_depth_multisampled_2d']: r#324
[#521 'texture_multisampled_2d']: r#324
[#521 'texture_storage_1d']: r#324
[#521 'texture_storage_2d']: r#324
[#521 'texture_storage_2d_array']: r#324
[#521 'texture_storage_3d']: r#324
[#521 'u32']: r#324
[#521 'var']: r#324
[#521 'vec2']: r#324
[#521 'vec3']: r#324
[#521 'vec4']: r#324
[#521 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#324
[#522 '@']: r#325
[#522 'array']: r#325
[#522 'atomic']: r#325
[#522 'bool']: r#325
[#522 'f16']: r#325
[#522 'f32']: r#325
[#522 'fn']: r#325
[#522 'i32']: r#325
[#522 'mat2x2']: r#325
[#522 'mat2x3']: r#325
[#522 'mat2x4']: r#325
[#522 'mat3x2']: r#325
[#522 'mat3x3']: r#325
[#522 'mat3x4']: r#325
[#522 'mat4x2']: r#325
[#522 'mat4x3']: r#325
[#522 'mat4x4']: r#325
[#522 'override']: r#325
[#522 'ptr']: r#325
[#522 'sampler']: r#325
[#522 'sampler_comparison']: r#325
[#522 'texture_1d']: r#325
[#522 'texture_2d']: r#325
[#522 'texture_2d_array']: r#325
[#522 'texture_3d']: r#325
[#522 'texture_cube']: r#325
[#522 'texture_cube_array']: r#325
[#522 'texture_depth_2d']: r#325
[#522 'texture_depth_2d_array']: r#325
[#522 'texture_depth_cube']: r#325
[#522 'texture_depth_cube_array']: r#325
[#522 'texture_depth_multisampled_2d']: r#325
[#522 'texture_multisampled_2d']: r#325
[#522 'texture_storage_1d']: r#325
[#522 'texture_storage_2d']: r#325
[#522 'texture_storage_2d_array']: r#325
[#522 'texture_storage_3d']: r#325
[#522 'u32']: r#325
[#522 'var']: r#325
[#522 'vec2']: r#325
[#522 'vec3']: r#325
[#522 'vec4']: r#325
[#522 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#325
[#523 '@']: r#326
[#523 'array']: r#326
[#523 'atomic']: r#326
[#523 'bool']: r#326
[#523 'f16']: r#326
[#523 'f32']: r#326
[#523 'fn']: r#326
[#523 'i32']: r#326
[#523 'mat2x2']: r#326
[#523 'mat2x3']: r#326
[#523 'mat2x4']: r#326
[#523 'mat3x2']: r#326
[#523 'mat3x3']: r#326
[#523 'mat3x4']: r#326
[#523 'mat4x2']: r#326
[#523 'mat4x3']: r#326
[#523 'mat4x4']: r#326
[#523 'override']: r#326
[#523 'ptr']: r#326
[#523 'sampler']: r#326
[#523 'sampler_comparison']: r#326
[#523 'texture_1d']: r#326
[#523 'texture_2d']: r#326
[#523 'texture_2d_array']: r#326
[#523 'texture_3d']: r#326
[#523 'texture_cube']: r#326
[#523 'texture_cube_array']: r#326
[#523 'texture_depth_2d']: r#326
[#523 'texture_depth_2d_array']: r#326
[#523 'texture_depth_cube']: r#326
[#523 'texture_depth_cube_array']: r#326
[#523 'texture_depth_multisampled_2d']: r#326
[#523 'texture_multisampled_2d']: r#326
[#523 'texture_storage_1d']: r#326
[#523 'texture_storage_2d']: r#326
[#523 'texture_storage_2d_array']: r#326
[#523 'texture_storage_3d']: r#326
[#523 'u32']: r#326
[#523 'var']: r#326
[#523 'vec2']: r#326
[#523 'vec3']: r#326
[#523 'vec4']: r#326
[#523 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#326
[#524 '@']: r#327
[#524 'array']: r#327
[#524 'atomic']: r#327
[#524 'bool']: r#327
[#524 'f16']: r#327
[#524 'f32']: r#327
[#524 'fn']: r#327
[#524 'i32']: r#327
[#524 'mat2x2']: r#327
[#524 'mat2x3']: r#327
[#524 'mat2x4']: r#327
[#524 'mat3x2']: r#327
[#524 'mat3x3']: r#327
[#524 'mat3x4']: r#327
[#524 'mat4x2']: r#327
[#524 'mat4x3']: r#327
[#524 'mat4x4']: r#327
[#524 'override']: r#327
[#524 'ptr']: r#327
[#524 'sampler']: r#327
[#524 'sampler_comparison']: r#327
[#524 'texture_1d']: r#327
[#524 'texture_2d']: r#327
[#524 'texture_2d_array']: r#327
[#524 'texture_3d']: r#327
[#524 'texture_cube']: r#327
[#524 'texture_cube_array']: r#327
[#524 'texture_depth_2d']: r#327
[#524 'texture_depth_2d_array']: r#327
[#524 'texture_depth_cube']: r#327
[#524 'texture_depth_cube_array']: r#327
[#524 'texture_depth_multisampled_2d']: r#327
[#524 'texture_multisampled_2d']: r#327
[#524 'texture_storage_1d']: r#327
[#524 'texture_storage_2d']: r#327
[#524 'texture_storage_2d_array']: r#327
[#524 'texture_storage_3d']: r#327
[#524 'u32']: r#327
[#524 'var']: r#327
[#524 'vec2']: r#327
[#524 'vec3']: r#327
[#524 'vec4']: r#327
[#524 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#327
[#525 ',']: s#412
[#526 ')']: r#328
[#526 ',']: r#328
[#527 ')']: r#329
[#527 ',']: r#329
[#528 ')']: r#330
[#528 ',']: r#330
[#529 '@']: r#331
[#529 'array']: r#331
[#529 'atomic']: r#331
[#529 'bool']: r#331
[#529 'f16']: r#331
[#529 'f32']: r#331
[#529 'fn']: r#331
[#529 'i32']: r#331
[#529 'mat2x2']: r#331
[#529 'mat2x3']: r#331
[#529 'mat2x4']: r#331
[#529 'mat3x2']: r#331
[#529 'mat3x3']: r#331
[#529 'mat3x4']: r#331
[#529 'mat4x2']: r#331
[#529 'mat4x3']: r#331
[#529 'mat4x4']: r#331
[#529 'override']: r#331
[#529 'ptr']: r#331
[#529 'sampler']: r#331
[#529 'sampler_comparison']: r#331
[#529 'texture_1d']: r#331
[#529 'texture_2d']: r#331
[#529 'texture_2d_array']: r#331
[#529 'texture_3d']: r#331
[#529 'texture_cube']: r#331
[#529 'texture_cube_array']: r#331
[#529 'texture_depth_2d']: r#331
[#529 'texture_depth_2d_array']: r#331
[#529 'texture_depth_cube']: r#331
[#529 'texture_depth_cube_array']: r#331
[#529 'texture_depth_multisampled_2d']: r#331
[#529 'texture_multisampled_2d']: r#331
[#529 'texture_storage_1d']: r#331
[#529 'texture_storage_2d']: r#331
[#529 'texture_storage_2d_array']: r#331
[#529 'texture_storage_3d']: r#331
[#529 'u32']: r#331
[#529 'var']: r#331
[#529 'vec2']: r#331
[#529 'vec3']: r#331
[#529 'vec4']: r#331
[#529 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#331
[#530 ',']: s#412
[#531 '!=']: r#332
[#531 '%']: r#332
[#531 '%=']: r#332
[#531 '&&']: r#332
[#531 '&']: r#332
[#531 '&=']: r#332
[#531 ')']: r#332
[#531 '*']: r#332
[#531 '*=']: r#332
[#531 '+']: r#332
[#531 '++']: r#332
[#531 '+=']: r#332
[#531 ',']: r#332
[#531 '-']: r#332
[#531 '--']: r#332
[#531 '-=']: r#332
[#531 '/']: r#332
[#531 '/=']: r#332
[#531 ':']: r#332
[#531 ';']: r#332
[#531 '<']: r#332
[#531 '<<']: r#332
[#531 '<<=']: r#332
[#531 '<=']: r#332
[#531 '=']: r#332
[#531 '==']: r#332
[#531 '>']: r#332
[#531 '>=']: r#332
[#531 '>>']: r#332
[#531 '>>=']: r#332
[#531 ']']: r#332
[#531 '^']: r#332
[#531 '^=']: r#332
[#531 '{']: r#332
[#531 '|']: r#332
[#531 '|=']: r#332
[#531 '||']: r#332
[#532 '!=']: r#333
[#532 '%']: r#333
[#532 '%=']: r#333
[#532 '&&']: r#333
[#532 '&']: r#333
[#532 '&=']: r#333
[#532 ')']: r#333
[#532 '*']: r#333
[#532 '*=']: r#333
[#532 '+']: r#333
[#532 '++']: r#333
[#532 '+=']: r#333
[#532 ',']: r#333
[#532 '-']: r#333
[#532 '--']: r#333
[#532 '-=']: r#333
[#532 '/']: r#333
[#532 '/=']: r#333
[#532 ':']: r#333
[#532 ';']: r#333
[#532 '<']: r#333
[#532 '<<']: r#333
[#532 '<<=']: r#333
[#532 '<=']: r#333
[#532 '=']: r#333
[#532 '==']: r#333
[#532 '>']: r#333
[#532 '>=']: r#333
[#532 '>>']: r#333
[#532 '>>=']: r#333
[#532 ']']: r#333
[#532 '^']: r#333
[#532 '^=']: r#333
[#532 '{']: r#333
[#532 '|']: r#333
[#532 '|=']: r#333
[#532 '||']: r#333
[#533 ')']: r#334
[#534 ')']: r#335
[#535 '!=']: r#336
[#535 '%']: r#336
[#535 '&&']: r#336
[#535 '&']: r#336
[#535 ')']: r#336
[#535 '*']: r#336
[#535 '+']: r#336
[#535 ',']: r#336
[#535 '-']: r#336
[#535 '.']: r#336
[#535 '/']: r#336
[#535 ':']: r#336
[#535 ';']: r#336
[#535 '<']: r#336
[#535 '<<']: r#336
[#535 '<=']: r#336
[#535 '==']: r#336
[#535 '>']: r#336
[#535 '>=']: r#336
[#535 '>>']: r#336
[#535 '[']: r#336
[#535 ']']: r#336
[#535 '^']: r#336
[#535 '{']: r#336
[#535 '|']: r#336
[#535 '||']: r#336
[#536 '>']: r#337
[#537 '+']: s#223
[#537 '-']: s#69
[#537 '>']: r#338
[#538 '>']: r#339
[#539 '%']: r#31
[#539 '&']: r#28
[#539 '*']: r#31
[#539 '+']: r#31
[#539 '-']: r#31
[#539 '/']: r#31
[#539 '>']: r#31
[#539 '^']: r#30
[#539 '|']: r#29
[#540 '(']: r#340
[#540 ')']: r#340
[#540 ',']: r#340
[#540 ';']: r#340
[#540 '=']: r#340
[#540 '>']: r#340
[#540 '{']: r#340
[#540 '}']: r#340
[#541 ',']: s#412
[#542 '>']: s#235
[#543 '>']: r#341
[#544 '>']: r#342
[#545 '>']: r#343
[#546 '!']: s#70
[#546 '&']: s#73
[#546 '(']: s#116
[#546 '*']: s#72
[#546 '-']: s#69
[#546 'array']: s#83
[#546 'atomic']: s#95
[#546 'bitcast']: s#78
[#546 'bool']: s#88
[#546 'f16']: s#118
[#546 'f32']: s#117
[#546 'false']: s#115
[#546 'i32']: s#119
[#546 'mat2x2']: s#100
[#546 'mat2x3']: s#101
[#546 'mat2x4']: s#102
[#546 'mat3x2']: s#103
[#546 'mat3x3']: s#104
[#546 'mat3x4']: s#105
[#546 'mat4x2']: s#106
[#546 'mat4x3']: s#107
[#546 'mat4x4']: s#108
[#546 'ptr']: s#121
[#546 'sampler']: s#135
[#546 'sampler_comparison']: s#136
[#546 'texture_1d']: s#142
[#546 'texture_2d']: s#143
[#546 'texture_2d_array']: s#144
[#546 'texture_3d']: s#145
[#546 'texture_cube']: s#146
[#546 'texture_cube_array']: s#147
[#546 'texture_depth_2d']: s#137
[#546 'texture_depth_2d_array']: s#138
[#546 'texture_depth_cube']: s#139
[#546 'texture_depth_cube_array']: s#140
[#546 'texture_depth_multisampled_2d']: s#141
[#546 'texture_multisampled_2d']: s#148
[#546 'texture_storage_1d']: s#149
[#546 'texture_storage_2d']: s#150
[#546 'texture_storage_2d_array']: s#151
[#546 'texture_storage_3d']: s#152
[#546 'true']: s#114
[#546 'u32']: s#120
[#546 'vec2']: s#97
[#546 'vec3']: s#98
[#546 'vec4']: s#99
[#546 '~']: s#71
[#546 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#546 /0[fh]/]: s#130
[#546 /0[iu]?/]: s#110
[#546 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#546 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#546 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#546 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#546 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#546 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#546 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#546 /[1-9][0-9]*[fh]/]: s#131
[#546 /[1-9][0-9]*[iu]?/]: s#111
[#547 '&']: r#344
[#547 '(']: r#344
[#547 '*']: r#344
[#547 ';']: r#344
[#547 '_']: r#344
[#547 'break']: r#344
[#547 'const']: r#344
[#547 'continue']: r#344
[#547 'continuing']: r#344
[#547 'discard']: r#344
[#547 'else']: r#344
[#547 'fallthrough']: r#344
[#547 'for']: r#344
[#547 'if']: r#344
[#547 'let']: r#344
[#547 'loop']: r#344
[#547 'return']: r#344
[#547 'static_assert']: r#344
[#547 'switch']: r#344
[#547 'var']: r#344
[#547 'while']: r#344
[#547 '{']: r#344
[#547 '}']: r#344
[#547 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#344
[#548 '&']: r#345
[#548 '(']: r#345
[#548 '*']: r#345
[#548 ';']: r#345
[#548 '_']: r#345
[#548 'break']: r#345
[#548 'const']: r#345
[#548 'continue']: r#345
[#548 'continuing']: r#345
[#548 'discard']: r#345
[#548 'fallthrough']: r#345
[#548 'for']: r#345
[#548 'if']: r#345
[#548 'let']: r#345
[#548 'loop']: r#345
[#548 'return']: r#345
[#548 'static_assert']: r#345
[#548 'switch']: r#345
[#548 'var']: r#345
[#548 'while']: r#345
[#548 '{']: r#345
[#548 '}']: r#345
[#548 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#345
[#549 '&']: r#346
[#549 '(']: r#346
[#549 '*']: r#346
[#549 ';']: r#346
[#549 '_']: r#346
[#549 'break']: r#346
[#549 'const']: r#346
[#549 'continue']: r#346
[#549 'continuing']: r#346
[#549 'discard']: r#346
[#549 'fallthrough']: r#346
[#549 'for']: r#346
[#549 'if']: r#346
[#549 'let']: r#346
[#549 'loop']: r#346
[#549 'return']: r#346
[#549 'static_assert']: r#346
[#549 'switch']: r#346
[#549 'var']: r#346
[#549 'while']: r#346
[#549 '{']: r#346
[#549 '}']: r#346
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#346
[#550 '{']: s#185
[#551 'case']: s#604
[#551 'default']: s#605
[#552 'continuing']: s#600
[#553 'continuing']: r#347
[#553 '}']: r#347
[#554 '&']: s#73
[#554 '*']: s#72
[#554 ';']: s#19
[#554 '_']: s#387
[#554 'break']: s#381
[#554 'const']: s#380
[#554 'continue']: s#382
[#554 'discard']: s#365
[#554 'for']: s#375
[#554 'if']: s#385
[#554 'let']: s#379
[#554 'loop']: s#374
[#554 'return']: s#371
[#554 'static_assert']: s#26
[#554 'switch']: s#373
[#554 'var']: s#162
[#554 'while']: s#376
[#554 '{']: s#185
[#554 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#555 ')']: s#324
[#556 ';']: s#19
[#557 ';']: r#348
[#558 ';']: r#349
[#559 ';']: r#350
[#560 ';']: r#351
[#561 ';']: r#352
[#562 ';']: r#353
[#563 '&']: r#354
[#563 '(']: r#354
[#563 '*']: r#354
[#563 ';']: r#354
[#563 '_']: r#354
[#563 'break']: r#354
[#563 'const']: r#354
[#563 'continue']: r#354
[#563 'continuing']: r#354
[#563 'discard']: r#354
[#563 'fallthrough']: r#354
[#563 'for']: r#354
[#563 'if']: r#354
[#563 'let']: r#354
[#563 'loop']: r#354
[#563 'return']: r#354
[#563 'static_assert']: r#354
[#563 'switch']: r#354
[#563 'var']: r#354
[#563 'while']: r#354
[#563 '{']: r#354
[#563 '}']: r#354
[#563 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#354
[#564 ';']: r#355
[#565 '!']: s#70
[#565 '&']: s#73
[#565 '(']: s#116
[#565 '*']: s#72
[#565 '-']: s#69
[#565 'array']: s#83
[#565 'atomic']: s#95
[#565 'bitcast']: s#78
[#565 'bool']: s#88
[#565 'f16']: s#118
[#565 'f32']: s#117
[#565 'false']: s#115
[#565 'i32']: s#119
[#565 'mat2x2']: s#100
[#565 'mat2x3']: s#101
[#565 'mat2x4']: s#102
[#565 'mat3x2']: s#103
[#565 'mat3x3']: s#104
[#565 'mat3x4']: s#105
[#565 'mat4x2']: s#106
[#565 'mat4x3']: s#107
[#565 'mat4x4']: s#108
[#565 'ptr']: s#121
[#565 'sampler']: s#135
[#565 'sampler_comparison']: s#136
[#565 'texture_1d']: s#142
[#565 'texture_2d']: s#143
[#565 'texture_2d_array']: s#144
[#565 'texture_3d']: s#145
[#565 'texture_cube']: s#146
[#565 'texture_cube_array']: s#147
[#565 'texture_depth_2d']: s#137
[#565 'texture_depth_2d_array']: s#138
[#565 'texture_depth_cube']: s#139
[#565 'texture_depth_cube_array']: s#140
[#565 'texture_depth_multisampled_2d']: s#141
[#565 'texture_multisampled_2d']: s#148
[#565 'texture_storage_1d']: s#149
[#565 'texture_storage_2d']: s#150
[#565 'texture_storage_2d_array']: s#151
[#565 'texture_storage_3d']: s#152
[#565 'true']: s#114
[#565 'u32']: s#120
[#565 'vec2']: s#97
[#565 'vec3']: s#98
[#565 'vec4']: s#99
[#565 '~']: s#71
[#565 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#565 /0[fh]/]: s#130
[#565 /0[iu]?/]: s#110
[#565 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#565 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#565 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#565 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#565 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#565 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#565 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#565 /[1-9][0-9]*[fh]/]: s#131
[#565 /[1-9][0-9]*[iu]?/]: s#111
[#566 '!']: s#70
[#566 '&']: s#73
[#566 '(']: s#116
[#566 '*']: s#72
[#566 '-']: s#69
[#566 'array']: s#83
[#566 'atomic']: s#95
[#566 'bitcast']: s#78
[#566 'bool']: s#88
[#566 'f16']: s#118
[#566 'f32']: s#117
[#566 'false']: s#115
[#566 'i32']: s#119
[#566 'mat2x2']: s#100
[#566 'mat2x3']: s#101
[#566 'mat2x4']: s#102
[#566 'mat3x2']: s#103
[#566 'mat3x3']: s#104
[#566 'mat3x4']: s#105
[#566 'mat4x2']: s#106
[#566 'mat4x3']: s#107
[#566 'mat4x4']: s#108
[#566 'ptr']: s#121
[#566 'sampler']: s#135
[#566 'sampler_comparison']: s#136
[#566 'texture_1d']: s#142
[#566 'texture_2d']: s#143
[#566 'texture_2d_array']: s#144
[#566 'texture_3d']: s#145
[#566 'texture_cube']: s#146
[#566 'texture_cube_array']: s#147
[#566 'texture_depth_2d']: s#137
[#566 'texture_depth_2d_array']: s#138
[#566 'texture_depth_cube']: s#139
[#566 'texture_depth_cube_array']: s#140
[#566 'texture_depth_multisampled_2d']: s#141
[#566 'texture_multisampled_2d']: s#148
[#566 'texture_storage_1d']: s#149
[#566 'texture_storage_2d']: s#150
[#566 'texture_storage_2d_array']: s#151
[#566 'texture_storage_3d']: s#152
[#566 'true']: s#114
[#566 'u32']: s#120
[#566 'vec2']: s#97
[#566 'vec3']: s#98
[#566 'vec4']: s#99
[#566 '~']: s#71
[#566 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#566 /0[fh]/]: s#130
[#566 /0[iu]?/]: s#110
[#566 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#566 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#566 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#566 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#566 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#566 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#566 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#566 /[1-9][0-9]*[fh]/]: s#131
[#566 /[1-9][0-9]*[iu]?/]: s#111
[#567 ')']: r#356
[#567 ';']: r#356
[#568 ')']: r#357
[#568 ';']: r#357
[#569 '&']: r#358
[#569 '(']: r#358
[#569 '*']: r#358
[#569 ';']: r#358
[#569 '_']: r#358
[#569 'break']: r#358
[#569 'const']: r#358
[#569 'continue']: r#358
[#569 'continuing']: r#358
[#569 'discard']: r#358
[#569 'else']: r#358
[#569 'fallthrough']: r#358
[#569 'for']: r#358
[#569 'if']: r#358
[#569 'let']: r#358
[#569 'loop']: r#358
[#569 'return']: r#358
[#569 'static_assert']: r#358
[#569 'switch']: r#358
[#569 'var']: r#358
[#569 'while']: r#358
[#569 '{']: r#358
[#569 '}']: r#358
[#569 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#358
[#570 ')']: s#324
[#571 '%=']: r#359
[#571 '&=']: r#359
[#571 ')']: r#359
[#571 '*=']: r#359
[#571 '++']: r#359
[#571 '+=']: r#359
[#571 '--']: r#359
[#571 '-=']: r#359
[#571 '/=']: r#359
[#571 '<<=']: r#359
[#571 '=']: r#359
[#571 '>>=']: r#359
[#571 '^=']: r#359
[#571 '|=']: r#359
[#572 '%=']: r#360
[#572 '&=']: r#360
[#572 ')']: r#360
[#572 '*=']: r#360
[#572 '++']: r#360
[#572 '+=']: r#360
[#572 '--']: r#360
[#572 '-=']: r#360
[#572 '/=']: r#360
[#572 '<<=']: r#360
[#572 '=']: r#360
[#572 '>>=']: r#360
[#572 '^=']: r#360
[#572 '|=']: r#360
[#573 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#361
[#574 ')']: r#362
[#574 ',']: r#362
[#575 ':']: s#177
[#576 '@']: r#363
[#576 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#363
[#577 '@']: r#364
[#577 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#364
[#578 ',']: s#412
[#579 '->']: s#589
[#580 '}']: s#491
[#581 '}']: r#365
[#582 'array']: s#319
[#582 'atomic']: s#95
[#582 'bool']: s#88
[#582 'f16']: s#118
[#582 'f32']: s#117
[#582 'i32']: s#119
[#582 'mat2x2']: s#100
[#582 'mat2x3']: s#101
[#582 'mat2x4']: s#102
[#582 'mat3x2']: s#103
[#582 'mat3x3']: s#104
[#582 'mat3x4']: s#105
[#582 'mat4x2']: s#106
[#582 'mat4x3']: s#107
[#582 'mat4x4']: s#108
[#582 'ptr']: s#121
[#582 'sampler']: s#135
[#582 'sampler_comparison']: s#136
[#582 'texture_1d']: s#142
[#582 'texture_2d']: s#143
[#582 'texture_2d_array']: s#144
[#582 'texture_3d']: s#145
[#582 'texture_cube']: s#146
[#582 'texture_cube_array']: s#147
[#582 'texture_depth_2d']: s#137
[#582 'texture_depth_2d_array']: s#138
[#582 'texture_depth_cube']: s#139
[#582 'texture_depth_cube_array']: s#140
[#582 'texture_depth_multisampled_2d']: s#141
[#582 'texture_multisampled_2d']: s#148
[#582 'texture_storage_1d']: s#149
[#582 'texture_storage_2d']: s#150
[#582 'texture_storage_2d_array']: s#151
[#582 'texture_storage_3d']: s#152
[#582 'u32']: s#120
[#582 'vec2']: s#97
[#582 'vec3']: s#98
[#582 'vec4']: s#99
[#582 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#583 '>']: r#366
[#584 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#367
[#585 ',']: r#368
[#585 '}']: r#368
[#586 ';']: r#369
[#586 '@']: r#369
[#586 'const']: r#369
[#586 'fn']: r#369
[#586 'override']: r#369
[#586 'static_assert']: r#369
[#586 'struct']: r#369
[#586 'type']: r#369
[#586 'var']: r#369
[#586 EndOfText]: r#369
[#587 '{']: r#370
[#588 '@']: s#32
[#589 '@']: r#371
[#589 'array']: r#371
[#589 'atomic']: r#371
[#589 'bool']: r#371
[#589 'f16']: r#371
[#589 'f32']: r#371
[#589 'i32']: r#371
[#589 'mat2x2']: r#371
[#589 'mat2x3']: r#371
[#589 'mat2x4']: r#371
[#589 'mat3x2']: r#371
[#589 'mat3x3']: r#371
[#589 'mat3x4']: r#371
[#589 'mat4x2']: r#371
[#589 'mat4x3']: r#371
[#589 'mat4x4']: r#371
[#589 'ptr']: r#371
[#589 'sampler']: r#371
[#589 'sampler_comparison']: r#371
[#589 'texture_1d']: r#371
[#589 'texture_2d']: r#371
[#589 'texture_2d_array']: r#371
[#589 'texture_3d']: r#371
[#589 'texture_cube']: r#371
[#589 'texture_cube_array']: r#371
[#589 'texture_depth_2d']: r#371
[#589 'texture_depth_2d_array']: r#371
[#589 'texture_depth_cube']: r#371
[#589 'texture_depth_cube_array']: r#371
[#589 'texture_depth_multisampled_2d']: r#371
[#589 'texture_multisampled_2d']: r#371
[#589 'texture_storage_1d']: r#371
[#589 'texture_storage_2d']: r#371
[#589 'texture_storage_2d_array']: r#371
[#589 'texture_storage_3d']: r#371
[#589 'u32']: r#371
[#589 'vec2']: r#371
[#589 'vec3']: r#371
[#589 'vec4']: r#371
[#590 ')']: r#372
[#591 ')']: r#373
[#592 '%=']: r#374
[#592 '&=']: r#374
[#592 ')']: r#374
[#592 '*=']: r#374
[#592 '++']: r#374
[#592 '+=']: r#374
[#592 '--']: r#374
[#592 '-=']: r#374
[#592 '.']: r#374
[#592 '/=']: r#374
[#592 '<<=']: r#374
[#592 '=']: r#374
[#592 '>>=']: r#374
[#592 '[']: r#374
[#592 '^=']: r#374
[#592 '|=']: r#374
[#593 ';']: r#375
[#594 ';']: r#376
[#595 '!']: s#70
[#595 '&']: s#73
[#595 '(']: s#116
[#595 '*']: s#72
[#595 '-']: s#69
[#595 'array']: s#83
[#595 'atomic']: s#95
[#595 'bitcast']: s#78
[#595 'bool']: s#88
[#595 'f16']: s#118
[#595 'f32']: s#117
[#595 'false']: s#115
[#595 'i32']: s#119
[#595 'mat2x2']: s#100
[#595 'mat2x3']: s#101
[#595 'mat2x4']: s#102
[#595 'mat3x2']: s#103
[#595 'mat3x3']: s#104
[#595 'mat3x4']: s#105
[#595 'mat4x2']: s#106
[#595 'mat4x3']: s#107
[#595 'mat4x4']: s#108
[#595 'ptr']: s#121
[#595 'sampler']: s#135
[#595 'sampler_comparison']: s#136
[#595 'texture_1d']: s#142
[#595 'texture_2d']: s#143
[#595 'texture_2d_array']: s#144
[#595 'texture_3d']: s#145
[#595 'texture_cube']: s#146
[#595 'texture_cube_array']: s#147
[#595 'texture_depth_2d']: s#137
[#595 'texture_depth_2d_array']: s#138
[#595 'texture_depth_cube']: s#139
[#595 'texture_depth_cube_array']: s#140
[#595 'texture_depth_multisampled_2d']: s#141
[#595 'texture_multisampled_2d']: s#148
[#595 'texture_storage_1d']: s#149
[#595 'texture_storage_2d']: s#150
[#595 'texture_storage_2d_array']: s#151
[#595 'texture_storage_3d']: s#152
[#595 'true']: s#114
[#595 'u32']: s#120
[#595 'vec2']: s#97
[#595 'vec3']: s#98
[#595 'vec4']: s#99
[#595 '~']: s#71
[#595 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#595 /0[fh]/]: s#130
[#595 /0[iu]?/]: s#110
[#595 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#595 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#595 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#595 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#595 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#595 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#595 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#595 /[1-9][0-9]*[fh]/]: s#131
[#595 /[1-9][0-9]*[iu]?/]: s#111
[#596 '{']: s#185
[#597 'continuing']: r#377
[#597 '}']: r#377
[#598 '}']: s#491
[#599 '}']: r#378
[#600 '{']: s#185
[#601 '}']: s#491
[#602 '}']: r#379
[#603 'case']: s#604
[#603 'default']: s#605
[#604 '!']: s#70
[#604 '&']: s#73
[#604 '(']: s#116
[#604 '*']: s#72
[#604 '-']: s#69
[#604 'array']: s#83
[#604 'atomic']: s#95
[#604 'bitcast']: s#78
[#604 'bool']: s#88
[#604 'f16']: s#118
[#604 'f32']: s#117
[#604 'false']: s#115
[#604 'i32']: s#119
[#604 'mat2x2']: s#100
[#604 'mat2x3']: s#101
[#604 'mat2x4']: s#102
[#604 'mat3x2']: s#103
[#604 'mat3x3']: s#104
[#604 'mat3x4']: s#105
[#604 'mat4x2']: s#106
[#604 'mat4x3']: s#107
[#604 'mat4x4']: s#108
[#604 'ptr']: s#121
[#604 'sampler']: s#135
[#604 'sampler_comparison']: s#136
[#604 'texture_1d']: s#142
[#604 'texture_2d']: s#143
[#604 'texture_2d_array']: s#144
[#604 'texture_3d']: s#145
[#604 'texture_cube']: s#146
[#604 'texture_cube_array']: s#147
[#604 'texture_depth_2d']: s#137
[#604 'texture_depth_2d_array']: s#138
[#604 'texture_depth_cube']: s#139
[#604 'texture_depth_cube_array']: s#140
[#604 'texture_depth_multisampled_2d']: s#141
[#604 'texture_multisampled_2d']: s#148
[#604 'texture_storage_1d']: s#149
[#604 'texture_storage_2d']: s#150
[#604 'texture_storage_2d_array']: s#151
[#604 'texture_storage_3d']: s#152
[#604 'true']: s#114
[#604 'u32']: s#120
[#604 'vec2']: s#97
[#604 'vec3']: s#98
[#604 'vec4']: s#99
[#604 '~']: s#71
[#604 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#604 /0[fh]/]: s#130
[#604 /0[iu]?/]: s#110
[#604 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#604 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#604 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#604 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#604 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#604 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#604 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#604 /[1-9][0-9]*[fh]/]: s#131
[#604 /[1-9][0-9]*[iu]?/]: s#111
[#605 ':']: s#177
[#606 '&']: r#380
[#606 '(']: r#380
[#606 '*']: r#380
[#606 ';']: r#380
[#606 '_']: r#380
[#606 'break']: r#380
[#606 'const']: r#380
[#606 'continue']: r#380
[#606 'continuing']: r#380
[#606 'discard']: r#380
[#606 'fallthrough']: r#380
[#606 'for']: r#380
[#606 'if']: r#380
[#606 'let']: r#380
[#606 'loop']: r#380
[#606 'return']: r#380
[#606 'static_assert']: r#380
[#606 'switch']: r#380
[#606 'var']: r#380
[#606 'while']: r#380
[#606 '{']: r#380
[#606 '}']: r#380
[#606 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#380
[#607 '{']: s#185
[#608 '(']: r#381
[#608 ')']: r#381
[#608 ',']: r#381
[#608 ';']: r#381
[#608 '=']: r#381
[#608 '>']: r#381
[#608 '{']: r#381
[#608 '}']: r#381
[#609 '>']: s#235
[#610 'read']: s#543
[#610 'read_write']: s#545
[#610 'write']: s#544
[#611 '@']: r#382
[#611 'array']: r#382
[#611 'atomic']: r#382
[#611 'bool']: r#382
[#611 'f16']: r#382
[#611 'f32']: r#382
[#611 'fn']: r#382
[#611 'i32']: r#382
[#611 'mat2x2']: r#382
[#611 'mat2x3']: r#382
[#611 'mat2x4']: r#382
[#611 'mat3x2']: r#382
[#611 'mat3x3']: r#382
[#611 'mat3x4']: r#382
[#611 'mat4x2']: r#382
[#611 'mat4x3']: r#382
[#611 'mat4x4']: r#382
[#611 'override']: r#382
[#611 'ptr']: r#382
[#611 'sampler']: r#382
[#611 'sampler_comparison']: r#382
[#611 'texture_1d']: r#382
[#611 'texture_2d']: r#382
[#611 'texture_2d_array']: r#382
[#611 'texture_3d']: r#382
[#611 'texture_cube']: r#382
[#611 'texture_cube_array']: r#382
[#611 'texture_depth_2d']: r#382
[#611 'texture_depth_2d_array']: r#382
[#611 'texture_depth_cube']: r#382
[#611 'texture_depth_cube_array']: r#382
[#611 'texture_depth_multisampled_2d']: r#382
[#611 'texture_multisampled_2d']: r#382
[#611 'texture_storage_1d']: r#382
[#611 'texture_storage_2d']: r#382
[#611 'texture_storage_2d_array']: r#382
[#611 'texture_storage_3d']: r#382
[#611 'u32']: r#382
[#611 'var']: r#382
[#611 'vec2']: r#382
[#611 'vec3']: r#382
[#611 'vec4']: r#382
[#611 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#382
[#612 '!']: s#70
[#612 '&']: s#73
[#612 '(']: s#116
[#612 ')']: r#319
[#612 '*']: s#72
[#612 '-']: s#69
[#612 'array']: s#83
[#612 'atomic']: s#95
[#612 'bitcast']: s#78
[#612 'bool']: s#88
[#612 'f16']: s#118
[#612 'f32']: s#117
[#612 'false']: s#115
[#612 'i32']: s#119
[#612 'mat2x2']: s#100
[#612 'mat2x3']: s#101
[#612 'mat2x4']: s#102
[#612 'mat3x2']: s#103
[#612 'mat3x3']: s#104
[#612 'mat3x4']: s#105
[#612 'mat4x2']: s#106
[#612 'mat4x3']: s#107
[#612 'mat4x4']: s#108
[#612 'ptr']: s#121
[#612 'sampler']: s#135
[#612 'sampler_comparison']: s#136
[#612 'texture_1d']: s#142
[#612 'texture_2d']: s#143
[#612 'texture_2d_array']: s#144
[#612 'texture_3d']: s#145
[#612 'texture_cube']: s#146
[#612 'texture_cube_array']: s#147
[#612 'texture_depth_2d']: s#137
[#612 'texture_depth_2d_array']: s#138
[#612 'texture_depth_cube']: s#139
[#612 'texture_depth_cube_array']: s#140
[#612 'texture_depth_multisampled_2d']: s#141
[#612 'texture_multisampled_2d']: s#148
[#612 'texture_storage_1d']: s#149
[#612 'texture_storage_2d']: s#150
[#612 'texture_storage_2d_array']: s#151
[#612 'texture_storage_3d']: s#152
[#612 'true']: s#114
[#612 'u32']: s#120
[#612 'vec2']: s#97
[#612 'vec3']: s#98
[#612 'vec4']: s#99
[#612 '~']: s#71
[#612 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#612 /0[fh]/]: s#130
[#612 /0[iu]?/]: s#110
[#612 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#612 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#612 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#612 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#612 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#612 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#612 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#612 /[1-9][0-9]*[fh]/]: s#131
[#612 /[1-9][0-9]*[iu]?/]: s#111
[#613 '@']: r#383
[#613 'array']: r#383
[#613 'atomic']: r#383
[#613 'bool']: r#383
[#613 'f16']: r#383
[#613 'f32']: r#383
[#613 'fn']: r#383
[#613 'i32']: r#383
[#613 'mat2x2']: r#383
[#613 'mat2x3']: r#383
[#613 'mat2x4']: r#383
[#613 'mat3x2']: r#383
[#613 'mat3x3']: r#383
[#613 'mat3x4']: r#383
[#613 'mat4x2']: r#383
[#613 'mat4x3']: r#383
[#613 'mat4x4']: r#383
[#613 'override']: r#383
[#613 'ptr']: r#383
[#613 'sampler']: r#383
[#613 'sampler_comparison']: r#383
[#613 'texture_1d']: r#383
[#613 'texture_2d']: r#383
[#613 'texture_2d_array']: r#383
[#613 'texture_3d']: r#383
[#613 'texture_cube']: r#383
[#613 'texture_cube_array']: r#383
[#613 'texture_depth_2d']: r#383
[#613 'texture_depth_2d_array']: r#383
[#613 'texture_depth_cube']: r#383
[#613 'texture_depth_cube_array']: r#383
[#613 'texture_depth_multisampled_2d']: r#383
[#613 'texture_multisampled_2d']: r#383
[#613 'texture_storage_1d']: r#383
[#613 'texture_storage_2d']: r#383
[#613 'texture_storage_2d_array']: r#383
[#613 'texture_storage_3d']: r#383
[#613 'u32']: r#383
[#613 'var']: r#383
[#613 'vec2']: r#383
[#613 'vec3']: r#383
[#613 'vec4']: r#383
[#613 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#383
[#614 ',']: s#412
[#615 '>']: r#384
[#616 '(']: r#385
[#616 ')']: r#385
[#616 ',']: r#385
[#616 ';']: r#385
[#616 '=']: r#385
[#616 '>']: r#385
[#616 '{']: r#385
[#616 '}']: r#385
[#617 '&']: r#386
[#617 '(']: r#386
[#617 '*']: r#386
[#617 ';']: r#386
[#617 '_']: r#386
[#617 'break']: r#386
[#617 'const']: r#386
[#617 'continue']: r#386
[#617 'continuing']: r#386
[#617 'discard']: r#386
[#617 'else']: r#386
[#617 'fallthrough']: r#386
[#617 'for']: r#386
[#617 'if']: r#386
[#617 'let']: r#386
[#617 'loop']: r#386
[#617 'return']: r#386
[#617 'static_assert']: r#386
[#617 'switch']: r#386
[#617 'var']: r#386
[#617 'while']: r#386
[#617 '{']: r#386
[#617 '}']: r#386
[#617 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#386
[#618 '{']: s#185
[#619 '{']: r#387
[#620 ':']: s#177
[#621 ',']: s#412
[#622 '}']: r#388
[#623 '&']: r#389
[#623 '(']: r#389
[#623 '*']: r#389
[#623 ';']: r#389
[#623 '_']: r#389
[#623 'break']: r#389
[#623 'const']: r#389
[#623 'continue']: r#389
[#623 'continuing']: r#389
[#623 'discard']: r#389
[#623 'fallthrough']: r#389
[#623 'for']: r#389
[#623 'if']: r#389
[#623 'let']: r#389
[#623 'loop']: r#389
[#623 'return']: r#389
[#623 'static_assert']: r#389
[#623 'switch']: r#389
[#623 'var']: r#389
[#623 'while']: r#389
[#623 '{']: r#389
[#623 '}']: r#389
[#623 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#389
[#624 '}']: r#390
[#625 '&']: s#73
[#625 '*']: s#72
[#625 ';']: s#19
[#625 '_']: s#387
[#625 'break']: s#381
[#625 'const']: s#380
[#625 'continue']: s#382
[#625 'discard']: s#365
[#625 'for']: s#375
[#625 'if']: s#385
[#625 'let']: s#379
[#625 'loop']: s#374
[#625 'return']: s#371
[#625 'static_assert']: s#26
[#625 'switch']: s#373
[#625 'var']: s#162
[#625 'while']: s#376
[#625 '{']: s#185
[#625 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#626 '&']: r#391
[#626 '(']: r#391
[#626 '*']: r#391
[#626 ';']: r#391
[#626 '_']: r#391
[#626 'break']: r#391
[#626 'const']: r#391
[#626 'continue']: r#391
[#626 'continuing']: r#391
[#626 'discard']: r#391
[#626 'fallthrough']: r#391
[#626 'for']: r#391
[#626 'if']: r#391
[#626 'let']: r#391
[#626 'loop']: r#391
[#626 'return']: r#391
[#626 'static_assert']: r#391
[#626 'switch']: r#391
[#626 'var']: r#391
[#626 'while']: r#391
[#626 '{']: r#391
[#626 '}']: r#391
[#626 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#391
[#627 '&']: r#392
[#627 '(']: r#392
[#627 '*']: r#392
[#627 ';']: r#392
[#627 '_']: r#392
[#627 'break']: r#392
[#627 'const']: r#392
[#627 'continue']: r#392
[#627 'continuing']: r#392
[#627 'discard']: r#392
[#627 'fallthrough']: r#392
[#627 'for']: r#392
[#627 'if']: r#392
[#627 'let']: r#392
[#627 'loop']: r#392
[#627 'return']: r#392
[#627 'static_assert']: r#392
[#627 'switch']: r#392
[#627 'var']: r#392
[#627 'while']: r#392
[#627 '{']: r#392
[#627 '}']: r#392
[#627 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#392
[#628 ';']: s#19
[#629 ';']: r#393
[#630 'array']: s#319
[#630 'atomic']: s#95
[#630 'bool']: s#88
[#630 'f16']: s#118
[#630 'f32']: s#117
[#630 'i32']: s#119
[#630 'mat2x2']: s#100
[#630 'mat2x3']: s#101
[#630 'mat2x4']: s#102
[#630 'mat3x2']: s#103
[#630 'mat3x3']: s#104
[#630 'mat3x4']: s#105
[#630 'mat4x2']: s#106
[#630 'mat4x3']: s#107
[#630 'mat4x4']: s#108
[#630 'ptr']: s#121
[#630 'sampler']: s#135
[#630 'sampler_comparison']: s#136
[#630 'texture_1d']: s#142
[#630 'texture_2d']: s#143
[#630 'texture_2d_array']: s#144
[#630 'texture_3d']: s#145
[#630 'texture_cube']: s#146
[#630 'texture_cube_array']: s#147
[#630 'texture_depth_2d']: s#137
[#630 'texture_depth_2d_array']: s#138
[#630 'texture_depth_cube']: s#139
[#630 'texture_depth_cube_array']: s#140
[#630 'texture_depth_multisampled_2d']: s#141
[#630 'texture_multisampled_2d']: s#148
[#630 'texture_storage_1d']: s#149
[#630 'texture_storage_2d']: s#150
[#630 'texture_storage_2d_array']: s#151
[#630 'texture_storage_3d']: s#152
[#630 'u32']: s#120
[#630 'vec2']: s#97
[#630 'vec3']: s#98
[#630 'vec4']: s#99
[#630 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#631 'array']: r#394
[#631 'atomic']: r#394
[#631 'bool']: r#394
[#631 'f16']: r#394
[#631 'f32']: r#394
[#631 'i32']: r#394
[#631 'mat2x2']: r#394
[#631 'mat2x3']: r#394
[#631 'mat2x4']: r#394
[#631 'mat3x2']: r#394
[#631 'mat3x3']: r#394
[#631 'mat3x4']: r#394
[#631 'mat4x2']: r#394
[#631 'mat4x3']: r#394
[#631 'mat4x4']: r#394
[#631 'ptr']: r#394
[#631 'sampler']: r#394
[#631 'sampler_comparison']: r#394
[#631 'texture_1d']: r#394
[#631 'texture_2d']: r#394
[#631 'texture_2d_array']: r#394
[#631 'texture_3d']: r#394
[#631 'texture_cube']: r#394
[#631 'texture_cube_array']: r#394
[#631 'texture_depth_2d']: r#394
[#631 'texture_depth_2d_array']: r#394
[#631 'texture_depth_cube']: r#394
[#631 'texture_depth_cube_array']: r#394
[#631 'texture_depth_multisampled_2d']: r#394
[#631 'texture_multisampled_2d']: r#394
[#631 'texture_storage_1d']: r#394
[#631 'texture_storage_2d']: r#394
[#631 'texture_storage_2d_array']: r#394
[#631 'texture_storage_3d']: r#394
[#631 'u32']: r#394
[#631 'vec2']: r#394
[#631 'vec3']: r#394
[#631 'vec4']: r#394
[#632 '@']: s#32
[#633 'array']: r#395
[#633 'atomic']: r#395
[#633 'bool']: r#395
[#633 'f16']: r#395
[#633 'f32']: r#395
[#633 'i32']: r#395
[#633 'mat2x2']: r#395
[#633 'mat2x3']: r#395
[#633 'mat2x4']: r#395
[#633 'mat3x2']: r#395
[#633 'mat3x3']: r#395
[#633 'mat3x4']: r#395
[#633 'mat4x2']: r#395
[#633 'mat4x3']: r#395
[#633 'mat4x4']: r#395
[#633 'ptr']: r#395
[#633 'sampler']: r#395
[#633 'sampler_comparison']: r#395
[#633 'texture_1d']: r#395
[#633 'texture_2d']: r#395
[#633 'texture_2d_array']: r#395
[#633 'texture_3d']: r#395
[#633 'texture_cube']: r#395
[#633 'texture_cube_array']: r#395
[#633 'texture_depth_2d']: r#395
[#633 'texture_depth_2d_array']: r#395
[#633 'texture_depth_cube']: r#395
[#633 'texture_depth_cube_array']: r#395
[#633 'texture_depth_multisampled_2d']: r#395
[#633 'texture_multisampled_2d']: r#395
[#633 'texture_storage_1d']: r#395
[#633 'texture_storage_2d']: r#395
[#633 'texture_storage_2d_array']: r#395
[#633 'texture_storage_3d']: r#395
[#633 'u32']: r#395
[#633 'vec2']: r#395
[#633 'vec3']: r#395
[#633 'vec4']: r#395
[#634 '{']: r#396
[#635 '&']: s#73
[#635 '*']: s#72
[#635 '_']: s#387
[#635 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#636 'break']: s#659
[#637 'break']: r#397
[#637 '}']: r#397
[#638 '&']: s#73
[#638 '*']: s#72
[#638 ';']: s#19
[#638 '_']: s#387
[#638 'break']: s#381
[#638 'const']: s#380
[#638 'continue']: s#382
[#638 'discard']: s#365
[#638 'for']: s#375
[#638 'if']: s#385
[#638 'let']: s#379
[#638 'loop']: s#374
[#638 'return']: s#371
[#638 'static_assert']: s#26
[#638 'switch']: s#373
[#638 'var']: s#162
[#638 'while']: s#376
[#638 '{']: s#185
[#638 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#639 ',']: s#412
[#640 ',']: r#398
[#640 ':']: r#398
[#640 '{']: r#398
[#641 ',']: s#412
[#642 '!']: s#70
[#642 '&']: s#73
[#642 '(']: s#116
[#642 '*']: s#72
[#642 '-']: s#69
[#642 'array']: s#83
[#642 'atomic']: s#95
[#642 'bitcast']: s#78
[#642 'bool']: s#88
[#642 'f16']: s#118
[#642 'f32']: s#117
[#642 'false']: s#115
[#642 'i32']: s#119
[#642 'mat2x2']: s#100
[#642 'mat2x3']: s#101
[#642 'mat2x4']: s#102
[#642 'mat3x2']: s#103
[#642 'mat3x3']: s#104
[#642 'mat3x4']: s#105
[#642 'mat4x2']: s#106
[#642 'mat4x3']: s#107
[#642 'mat4x4']: s#108
[#642 'ptr']: s#121
[#642 'sampler']: s#135
[#642 'sampler_comparison']: s#136
[#642 'texture_1d']: s#142
[#642 'texture_2d']: s#143
[#642 'texture_2d_array']: s#144
[#642 'texture_3d']: s#145
[#642 'texture_cube']: s#146
[#642 'texture_cube_array']: s#147
[#642 'texture_depth_2d']: s#137
[#642 'texture_depth_2d_array']: s#138
[#642 'texture_depth_cube']: s#139
[#642 'texture_depth_cube_array']: s#140
[#642 'texture_depth_multisampled_2d']: s#141
[#642 'texture_multisampled_2d']: s#148
[#642 'texture_storage_1d']: s#149
[#642 'texture_storage_2d']: s#150
[#642 'texture_storage_2d_array']: s#151
[#642 'texture_storage_3d']: s#152
[#642 'true']: s#114
[#642 'u32']: s#120
[#642 'vec2']: s#97
[#642 'vec3']: s#98
[#642 'vec4']: s#99
[#642 '~']: s#71
[#642 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#642 /0[fh]/]: s#130
[#642 /0[iu]?/]: s#110
[#642 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#642 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#642 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#642 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#642 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#642 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#642 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#642 /[1-9][0-9]*[fh]/]: s#131
[#642 /[1-9][0-9]*[iu]?/]: s#111
[#643 '{']: s#185
[#644 '{']: r#399
[#645 'case']: r#400
[#645 'default']: r#400
[#645 '}']: r#400
[#646 '&']: s#73
[#646 '*']: s#72
[#646 ';']: s#19
[#646 '_']: s#387
[#646 'break']: s#381
[#646 'const']: s#380
[#646 'continue']: s#382
[#646 'discard']: s#365
[#646 'for']: s#375
[#646 'if']: s#385
[#646 'let']: s#379
[#646 'loop']: s#374
[#646 'return']: s#371
[#646 'static_assert']: s#26
[#646 'switch']: s#373
[#646 'var']: s#162
[#646 'while']: s#376
[#646 '{']: s#185
[#646 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#647 '@']: r#401
[#647 'array']: r#401
[#647 'atomic']: r#401
[#647 'bool']: r#401
[#647 'f16']: r#401
[#647 'f32']: r#401
[#647 'fn']: r#401
[#647 'i32']: r#401
[#647 'mat2x2']: r#401
[#647 'mat2x3']: r#401
[#647 'mat2x4']: r#401
[#647 'mat3x2']: r#401
[#647 'mat3x3']: r#401
[#647 'mat3x4']: r#401
[#647 'mat4x2']: r#401
[#647 'mat4x3']: r#401
[#647 'mat4x4']: r#401
[#647 'override']: r#401
[#647 'ptr']: r#401
[#647 'sampler']: r#401
[#647 'sampler_comparison']: r#401
[#647 'texture_1d']: r#401
[#647 'texture_2d']: r#401
[#647 'texture_2d_array']: r#401
[#647 'texture_3d']: r#401
[#647 'texture_cube']: r#401
[#647 'texture_cube_array']: r#401
[#647 'texture_depth_2d']: r#401
[#647 'texture_depth_2d_array']: r#401
[#647 'texture_depth_cube']: r#401
[#647 'texture_depth_cube_array']: r#401
[#647 'texture_depth_multisampled_2d']: r#401
[#647 'texture_multisampled_2d']: r#401
[#647 'texture_storage_1d']: r#401
[#647 'texture_storage_2d']: r#401
[#647 'texture_storage_2d_array']: r#401
[#647 'texture_storage_3d']: r#401
[#647 'u32']: r#401
[#647 'var']: r#401
[#647 'vec2']: r#401
[#647 'vec3']: r#401
[#647 'vec4']: r#401
[#647 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#401
[#648 'fallthrough']: s#671
[#649 'fallthrough']: r#402
[#649 '}']: r#402
[#650 '&']: s#73
[#650 '*']: s#72
[#650 ';']: s#19
[#650 '_']: s#387
[#650 'break']: s#381
[#650 'const']: s#380
[#650 'continue']: s#382
[#650 'discard']: s#365
[#650 'for']: s#375
[#650 'if']: s#385
[#650 'let']: s#379
[#650 'loop']: s#374
[#650 'return']: s#371
[#650 'static_assert']: s#26
[#650 'switch']: s#373
[#650 'var']: s#162
[#650 'while']: s#376
[#650 '{']: s#185
[#650 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#651 'case']: r#403
[#651 'default']: r#403
[#651 '}']: r#403
[#652 ',']: r#404
[#652 ':']: r#404
[#652 '{']: r#404
[#653 ',']: r#405
[#653 ':']: r#405
[#653 '{']: r#405
[#654 ':']: r#406
[#654 '{']: r#406
[#655 ':']: r#407
[#655 '{']: r#407
[#656 'break']: r#408
[#656 '}']: r#408
[#657 '}']: s#491
[#658 '}']: r#409
[#659 'if']: s#666
[#660 ')']: r#410
[#661 ')']: r#411
[#662 ')']: r#412
[#663 ')']: r#413
[#664 ')']: r#414
[#665 ')']: r#415
[#666 '!']: s#70
[#666 '&']: s#73
[#666 '(']: s#116
[#666 '*']: s#72
[#666 '-']: s#69
[#666 'array']: s#83
[#666 'atomic']: s#95
[#666 'bitcast']: s#78
[#666 'bool']: s#88
[#666 'f16']: s#118
[#666 'f32']: s#117
[#666 'false']: s#115
[#666 'i32']: s#119
[#666 'mat2x2']: s#100
[#666 'mat2x3']: s#101
[#666 'mat2x4']: s#102
[#666 'mat3x2']: s#103
[#666 'mat3x3']: s#104
[#666 'mat3x4']: s#105
[#666 'mat4x2']: s#106
[#666 'mat4x3']: s#107
[#666 'mat4x4']: s#108
[#666 'ptr']: s#121
[#666 'sampler']: s#135
[#666 'sampler_comparison']: s#136
[#666 'texture_1d']: s#142
[#666 'texture_2d']: s#143
[#666 'texture_2d_array']: s#144
[#666 'texture_3d']: s#145
[#666 'texture_cube']: s#146
[#666 'texture_cube_array']: s#147
[#666 'texture_depth_2d']: s#137
[#666 'texture_depth_2d_array']: s#138
[#666 'texture_depth_cube']: s#139
[#666 'texture_depth_cube_array']: s#140
[#666 'texture_depth_multisampled_2d']: s#141
[#666 'texture_multisampled_2d']: s#148
[#666 'texture_storage_1d']: s#149
[#666 'texture_storage_2d']: s#150
[#666 'texture_storage_2d_array']: s#151
[#666 'texture_storage_3d']: s#152
[#666 'true']: s#114
[#666 'u32']: s#120
[#666 'vec2']: s#97
[#666 'vec3']: s#98
[#666 'vec4']: s#99
[#666 '~']: s#71
[#666 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#666 /0[fh]/]: s#130
[#666 /0[iu]?/]: s#110
[#666 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#666 /0[xX][0-9a-fA-F]+[iu]?/]: s#109
[#666 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#134
[#666 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#133
[#666 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#666 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#129
[#666 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#128
[#666 /[1-9][0-9]*[fh]/]: s#131
[#666 /[1-9][0-9]*[iu]?/]: s#111
[#667 '}']: r#416
[#668 'fallthrough']: r#417
[#668 '}']: r#417
[#669 '}']: s#491
[#670 '}']: r#418
[#671 ';']: s#19
[#672 '}']: r#419
[#673 'case']: r#420
[#673 'default']: r#420
[#673 '}']: r#420
[#674 ';']: s#19
[#675 '}']: r#421

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #31
[#2 attribute]: #30
[#2 function_decl]: #17
[#2 function_decl/0.0]: #25
[#2 function_decl/0.0/0]: #29
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #22
[#2 global_constant_decl/1.0/0]: #28
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #27
[#2 semicolon]: #12
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#6 semicolon]: #168
[#11 attr]: #31
[#11 attribute]: #30
[#11 function_decl]: #17
[#11 function_decl/0.0]: #25
[#11 function_decl/0.0/0]: #29
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #22
[#11 global_constant_decl/1.0/0]: #28
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #20
[#11 global_variable_decl/0.0/0]: #27
[#11 semicolon]: #12
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #167
[#11 type_alias_decl]: #15
[#13 semicolon]: #166
[#14 semicolon]: #165
[#15 semicolon]: #164
[#18 semicolon]: #163
[#20 variable_decl]: #161
[#21 global_constant_decl/0.1]: #158
[#21 ident]: #159
[#21 variable_ident_decl]: #160
[#23 ident]: #156
[#24 ident]: #155
[#25 function_header]: #153
[#26 additive_expression]: #59
[#26 and]: #67
[#26 array_type_decl]: #94
[#26 bang]: #64
[#26 binary_and_expression]: #56
[#26 binary_or_expression]: #57
[#26 binary_xor_expression]: #58
[#26 bitwise_expression]: #54
[#26 bool_literal]: #86
[#26 callable]: #75
[#26 const_literal]: #76
[#26 decimal_float_literal]: #112
[#26 depth_texture_type]: #123
[#26 expression]: #50
[#26 float16]: #90
[#26 float32]: #89
[#26 float_literal]: #85
[#26 hex_float_literal]: #113
[#26 ident]: #74
[#26 int32]: #91
[#26 int_literal]: #84
[#26 mat_prefix]: #82
[#26 minus]: #63
[#26 multiplicative_expression]: #61
[#26 multisampled_texture_type]: #125
[#26 paren_expression]: #77
[#26 paren_left]: #87
[#26 pointer]: #93
[#26 primary_expression]: #68
[#26 relational_expression]: #51
[#26 sampled_texture_type]: #124
[#26 sampler_type]: #122
[#26 shift_expression]: #55
[#26 short_circuit_and_expression]: #53
[#26 short_circuit_or_expression]: #52
[#26 singular_expression]: #62
[#26 star]: #66
[#26 storage_texture_type]: #126
[#26 texture_and_sampler_types]: #96
[#26 tilde]: #65
[#26 type_decl_without_ident]: #80
[#26 uint32]: #92
[#26 unary_expression]: #60
[#26 vec_prefix]: #81
[#30 attr]: #31
[#30 attribute]: #30
[#30 function_decl/0.0/0]: #49
[#30 global_constant_decl/1.0/0]: #48
[#30 global_variable_decl/0.0/0]: #47
[#33 paren_left]: #252
[#34 paren_left]: #251
[#35 paren_left]: #250
[#37 paren_left]: #249
[#38 paren_left]: #248
[#39 paren_left]: #247
[#41 paren_left]: #246
[#42 paren_left]: #245
[#43 paren_left]: #244
[#52 or_or]: #242
[#53 and_and]: #240
[#55 equal_equal]: #233
[#55 greater_than]: #230
[#55 greater_than_equal]: #232
[#55 less_than]: #229
[#55 less_than_equal]: #231
[#55 not_equal]: #234
[#56 and]: #228
[#57 or]: #226
[#58 xor]: #224
[#59 minus]: #222
[#59 plus]: #221
[#60 shift_left]: #217
[#60 shift_right]: #218
[#61 forward_slash]: #213
[#61 modulo]: #214
[#61 star]: #212
[#63 and]: #67
[#63 array_type_decl]: #94
[#63 bang]: #64
[#63 bool_literal]: #86
[#63 callable]: #75
[#63 const_literal]: #76
[#63 decimal_float_literal]: #112
[#63 depth_texture_type]: #123
[#63 float16]: #90
[#63 float32]: #89
[#63 float_literal]: #85
[#63 hex_float_literal]: #113
[#63 ident]: #74
[#63 int32]: #91
[#63 int_literal]: #84
[#63 mat_prefix]: #82
[#63 minus]: #63
[#63 multisampled_texture_type]: #125
[#63 paren_expression]: #77
[#63 paren_left]: #87
[#63 pointer]: #93
[#63 primary_expression]: #68
[#63 sampled_texture_type]: #124
[#63 sampler_type]: #122
[#63 singular_expression]: #62
[#63 star]: #66
[#63 storage_texture_type]: #126
[#63 texture_and_sampler_types]: #96
[#63 tilde]: #65
[#63 type_decl_without_ident]: #80
[#63 uint32]: #92
[#63 unary_expression]: #211
[#63 vec_prefix]: #81
[#64 and]: #67
[#64 array_type_decl]: #94
[#64 bang]: #64
[#64 bool_literal]: #86
[#64 callable]: #75
[#64 const_literal]: #76
[#64 decimal_float_literal]: #112
[#64 depth_texture_type]: #123
[#64 float16]: #90
[#64 float32]: #89
[#64 float_literal]: #85
[#64 hex_float_literal]: #113
[#64 ident]: #74
[#64 int32]: #91
[#64 int_literal]: #84
[#64 mat_prefix]: #82
[#64 minus]: #63
[#64 multisampled_texture_type]: #125
[#64 paren_expression]: #77
[#64 paren_left]: #87
[#64 pointer]: #93
[#64 primary_expression]: #68
[#64 sampled_texture_type]: #124
[#64 sampler_type]: #122
[#64 singular_expression]: #62
[#64 star]: #66
[#64 storage_texture_type]: #126
[#64 texture_and_sampler_types]: #96
[#64 tilde]: #65
[#64 type_decl_without_ident]: #80
[#64 uint32]: #92
[#64 unary_expression]: #210
[#64 vec_prefix]: #81
[#65 and]: #67
[#65 array_type_decl]: #94
[#65 bang]: #64
[#65 bool_literal]: #86
[#65 callable]: #75
[#65 const_literal]: #76
[#65 decimal_float_literal]: #112
[#65 depth_texture_type]: #123
[#65 float16]: #90
[#65 float32]: #89
[#65 float_literal]: #85
[#65 hex_float_literal]: #113
[#65 ident]: #74
[#65 int32]: #91
[#65 int_literal]: #84
[#65 mat_prefix]: #82
[#65 minus]: #63
[#65 multisampled_texture_type]: #125
[#65 paren_expression]: #77
[#65 paren_left]: #87
[#65 pointer]: #93
[#65 primary_expression]: #68
[#65 sampled_texture_type]: #124
[#65 sampler_type]: #122
[#65 singular_expression]: #62
[#65 star]: #66
[#65 storage_texture_type]: #126
[#65 texture_and_sampler_types]: #96
[#65 tilde]: #65
[#65 type_decl_without_ident]: #80
[#65 uint32]: #92
[#65 unary_expression]: #209
[#65 vec_prefix]: #81
[#66 and]: #67
[#66 array_type_decl]: #94
[#66 bang]: #64
[#66 bool_literal]: #86
[#66 callable]: #75
[#66 const_literal]: #76
[#66 decimal_float_literal]: #112
[#66 depth_texture_type]: #123
[#66 float16]: #90
[#66 float32]: #89
[#66 float_literal]: #85
[#66 hex_float_literal]: #113
[#66 ident]: #74
[#66 int32]: #91
[#66 int_literal]: #84
[#66 mat_prefix]: #82
[#66 minus]: #63
[#66 multisampled_texture_type]: #125
[#66 paren_expression]: #77
[#66 paren_left]: #87
[#66 pointer]: #93
[#66 primary_expression]: #68
[#66 sampled_texture_type]: #124
[#66 sampler_type]: #122
[#66 singular_expression]: #62
[#66 star]: #66
[#66 storage_texture_type]: #126
[#66 texture_and_sampler_types]: #96
[#66 tilde]: #65
[#66 type_decl_without_ident]: #80
[#66 uint32]: #92
[#66 unary_expression]: #208
[#66 vec_prefix]: #81
[#67 and]: #67
[#67 array_type_decl]: #94
[#67 bang]: #64
[#67 bool_literal]: #86
[#67 callable]: #75
[#67 const_literal]: #76
[#67 decimal_float_literal]: #112
[#67 depth_texture_type]: #123
[#67 float16]: #90
[#67 float32]: #89
[#67 float_literal]: #85
[#67 hex_float_literal]: #113
[#67 ident]: #74
[#67 int32]: #91
[#67 int_literal]: #84
[#67 mat_prefix]: #82
[#67 minus]: #63
[#67 multisampled_texture_type]: #125
[#67 paren_expression]: #77
[#67 paren_left]: #87
[#67 pointer]: #93
[#67 primary_expression]: #68
[#67 sampled_texture_type]: #124
[#67 sampler_type]: #122
[#67 singular_expression]: #62
[#67 star]: #66
[#67 storage_texture_type]: #126
[#67 texture_and_sampler_types]: #96
[#67 tilde]: #65
[#67 type_decl_without_ident]: #80
[#67 uint32]: #92
[#67 unary_expression]: #207
[#67 vec_prefix]: #81
[#68 bracket_left]: #203
[#68 period]: #204
[#68 postfix_expression]: #202
[#68 singular_expression/0.1]: #201
[#75 argument_expression_list]: #199
[#75 paren_left]: #200
[#78 less_than]: #198
[#81 less_than]: #197
[#82 less_than]: #196
[#83 less_than]: #195
[#87 additive_expression]: #59
[#87 and]: #67
[#87 array_type_decl]: #94
[#87 bang]: #64
[#87 binary_and_expression]: #56
[#87 binary_or_expression]: #57
[#87 binary_xor_expression]: #58
[#87 bitwise_expression]: #54
[#87 bool_literal]: #86
[#87 callable]: #75
[#87 const_literal]: #76
[#87 decimal_float_literal]: #112
[#87 depth_texture_type]: #123
[#87 expression]: #194
[#87 float16]: #90
[#87 float32]: #89
[#87 float_literal]: #85
[#87 hex_float_literal]: #113
[#87 ident]: #74
[#87 int32]: #91
[#87 int_literal]: #84
[#87 mat_prefix]: #82
[#87 minus]: #63
[#87 multiplicative_expression]: #61
[#87 multisampled_texture_type]: #125
[#87 paren_expression]: #77
[#87 paren_left]: #87
[#87 pointer]: #93
[#87 primary_expression]: #68
[#87 relational_expression]: #51
[#87 sampled_texture_type]: #124
[#87 sampler_type]: #122
[#87 shift_expression]: #55
[#87 short_circuit_and_expression]: #53
[#87 short_circuit_or_expression]: #52
[#87 singular_expression]: #62
[#87 star]: #66
[#87 storage_texture_type]: #126
[#87 texture_and_sampler_types]: #96
[#87 tilde]: #65
[#87 type_decl_without_ident]: #80
[#87 uint32]: #92
[#87 unary_expression]: #60
[#87 vec_prefix]: #81
[#93 less_than]: #193
[#95 less_than]: #192
[#124 less_than]: #191
[#125 less_than]: #190
[#126 less_than]: #189
[#153 brace_left]: #188
[#153 compound_statement]: #187
[#154 ident]: #186
[#155 brace_left]: #184
[#155 struct_body_decl]: #183
[#156 equal]: #182
[#157 global_constant_decl/1.2]: #179
[#157 ident]: #180
[#157 variable_ident_decl]: #181
[#158 equal]: #178
[#159 colon]: #176
[#161 equal]: #174
[#161 global_variable_decl/0.2]: #173
[#162 less_than]: #171
[#162 variable_decl/0.1]: #169
[#162 variable_qualifier]: #170
[#169 ident]: #408
[#169 variable_decl/0.2]: #407
[#169 variable_ident_decl]: #409
[#171 address_space]: #406
[#174 additive_expression]: #59
[#174 and]: #67
[#174 array_type_decl]: #94
[#174 bang]: #64
[#174 binary_and_expression]: #56
[#174 binary_or_expression]: #57
[#174 binary_xor_expression]: #58
[#174 bitwise_expression]: #54
[#174 bool_literal]: #86
[#174 callable]: #75
[#174 const_literal]: #76
[#174 decimal_float_literal]: #112
[#174 depth_texture_type]: #123
[#174 expression]: #405
[#174 float16]: #90
[#174 float32]: #89
[#174 float_literal]: #85
[#174 hex_float_literal]: #113
[#174 ident]: #74
[#174 int32]: #91
[#174 int_literal]: #84
[#174 mat_prefix]: #82
[#174 minus]: #63
[#174 multiplicative_expression]: #61
[#174 multisampled_texture_type]: #125
[#174 paren_expression]: #77
[#174 paren_left]: #87
[#174 pointer]: #93
[#174 primary_expression]: #68
[#174 relational_expression]: #51
[#174 sampled_texture_type]: #124
[#174 sampler_type]: #122
[#174 shift_expression]: #55
[#174 short_circuit_and_expression]: #53
[#174 short_circuit_or_expression]: #52
[#174 singular_expression]: #62
[#174 star]: #66
[#174 storage_texture_type]: #126
[#174 texture_and_sampler_types]: #96
[#174 tilde]: #65
[#174 type_decl_without_ident]: #80
[#174 uint32]: #92
[#174 unary_expression]: #60
[#174 vec_prefix]: #81
[#176 array_type_decl]: #94
[#176 depth_texture_type]: #123
[#176 float16]: #90
[#176 float32]: #89
[#176 ident]: #315
[#176 int32]: #91
[#176 mat_prefix]: #318
[#176 multisampled_texture_type]: #125
[#176 pointer]: #93
[#176 sampled_texture_type]: #124
[#176 sampler_type]: #122
[#176 storage_texture_type]: #126
[#176 texture_and_sampler_types]: #96
[#176 type_decl]: #404
[#176 type_decl_without_ident]: #316
[#176 uint32]: #92
[#176 vec_prefix]: #317
[#178 additive_expression]: #59
[#178 and]: #67
[#178 array_type_decl]: #94
[#178 bang]: #64
[#178 binary_and_expression]: #56
[#178 binary_or_expression]: #57
[#178 binary_xor_expression]: #58
[#178 bitwise_expression]: #54
[#178 bool_literal]: #86
[#178 callable]: #75
[#178 const_literal]: #76
[#178 decimal_float_literal]: #112
[#178 depth_texture_type]: #123
[#178 expression]: #403
[#178 float16]: #90
[#178 float32]: #89
[#178 float_literal]: #85
[#178 hex_float_literal]: #113
[#178 ident]: #74
[#178 int32]: #91
[#178 int_literal]: #84
[#178 mat_prefix]: #82
[#178 minus]: #63
[#178 multiplicative_expression]: #61
[#178 multisampled_texture_type]: #125
[#178 paren_expression]: #77
[#178 paren_left]: #87
[#178 pointer]: #93
[#178 primary_expression]: #68
[#178 relational_expression]: #51
[#178 sampled_texture_type]: #124
[#178 sampler_type]: #122
[#178 shift_expression]: #55
[#178 short_circuit_and_expression]: #53
[#178 short_circuit_or_expression]: #52
[#178 singular_expression]: #62
[#178 star]: #66
[#178 storage_texture_type]: #126
[#178 texture_and_sampler_types]: #96
[#178 tilde]: #65
[#178 type_decl_without_ident]: #80
[#178 uint32]: #92
[#178 unary_expression]: #60
[#178 vec_prefix]: #81
[#179 equal]: #402
[#179 global_constant_decl/1.3]: #401
[#180 colon]: #176
[#182 array_type_decl]: #94
[#182 depth_texture_type]: #123
[#182 float16]: #90
[#182 float32]: #89
[#182 ident]: #315
[#182 int32]: #91
[#182 mat_prefix]: #318
[#182 multisampled_texture_type]: #125
[#182 pointer]: #93
[#182 sampled_texture_type]: #124
[#182 sampler_type]: #122
[#182 storage_texture_type]: #126
[#182 texture_and_sampler_types]: #96
[#182 type_decl]: #400
[#182 type_decl_without_ident]: #316
[#182 uint32]: #92
[#182 vec_prefix]: #317
[#184 attr]: #31
[#184 attribute]: #399
[#184 struct_body_decl/0.1]: #393
[#184 struct_body_decl/0.1/0]: #394
[#184 struct_body_decl/0.1/0/0.0]: #395
[#184 struct_member]: #396
[#184 struct_member/0.0]: #397
[#184 struct_member/0.0/0]: #398
[#186 paren_left]: #392
[#188 and]: #391
[#188 assignment_statement]: #366
[#188 brace_left]: #188
[#188 break_statement]: #363
[#188 compound_statement]: #367
[#188 compound_statement/0.1]: #351
[#188 compound_statement/0.1/0]: #352
[#188 continue_statement]: #364
[#188 decrement_statement]: #369
[#188 for_statement]: #359
[#188 func_call_statement]: #361
[#188 ident]: #377
[#188 if_clause]: #372
[#188 if_statement]: #356
[#188 increment_statement]: #368
[#188 lhs_expression]: #383
[#188 lhs_expression/0.0]: #386
[#188 lhs_expression/0.0/0]: #388
[#188 lhs_expression/0.0/0/0.0]: #389
[#188 loop_statement]: #358
[#188 return_statement]: #355
[#188 semicolon]: #354
[#188 star]: #390
[#188 statement]: #353
[#188 static_assert_statement]: #370
[#188 switch_statement]: #357
[#188 underscore]: #384
[#188 variable_decl]: #378
[#188 variable_statement]: #362
[#188 while_statement]: #360
[#189 texel_format]: #334
[#190 array_type_decl]: #94
[#190 depth_texture_type]: #123
[#190 float16]: #90
[#190 float32]: #89
[#190 ident]: #315
[#190 int32]: #91
[#190 mat_prefix]: #318
[#190 multisampled_texture_type]: #125
[#190 pointer]: #93
[#190 sampled_texture_type]: #124
[#190 sampler_type]: #122
[#190 storage_texture_type]: #126
[#190 texture_and_sampler_types]: #96
[#190 type_decl]: #333
[#190 type_decl_without_ident]: #316
[#190 uint32]: #92
[#190 vec_prefix]: #317
[#191 array_type_decl]: #94
[#191 depth_texture_type]: #123
[#191 float16]: #90
[#191 float32]: #89
[#191 ident]: #315
[#191 int32]: #91
[#191 mat_prefix]: #318
[#191 multisampled_texture_type]: #125
[#191 pointer]: #93
[#191 sampled_texture_type]: #124
[#191 sampler_type]: #122
[#191 storage_texture_type]: #126
[#191 texture_and_sampler_types]: #96
[#191 type_decl]: #332
[#191 type_decl_without_ident]: #316
[#191 uint32]: #92
[#191 vec_prefix]: #317
[#192 array_type_decl]: #94
[#192 depth_texture_type]: #123
[#192 float16]: #90
[#192 float32]: #89
[#192 ident]: #315
[#192 int32]: #91
[#192 mat_prefix]: #318
[#192 multisampled_texture_type]: #125
[#192 pointer]: #93
[#192 sampled_texture_type]: #124
[#192 sampler_type]: #122
[#192 storage_texture_type]: #126
[#192 texture_and_sampler_types]: #96
[#192 type_decl]: #331
[#192 type_decl_without_ident]: #316
[#192 uint32]: #92
[#192 vec_prefix]: #317
[#193 address_space]: #325
[#194 paren_right]: #323
[#195 array_type_decl]: #94
[#195 depth_texture_type]: #123
[#195 float16]: #90
[#195 float32]: #89
[#195 ident]: #315
[#195 int32]: #91
[#195 mat_prefix]: #318
[#195 multisampled_texture_type]: #125
[#195 pointer]: #93
[#195 sampled_texture_type]: #124
[#195 sampler_type]: #122
[#195 storage_texture_type]: #126
[#195 texture_and_sampler_types]: #96
[#195 type_decl]: #322
[#195 type_decl_without_ident]: #316
[#195 uint32]: #92
[#195 vec_prefix]: #317
[#196 array_type_decl]: #94
[#196 depth_texture_type]: #123
[#196 float16]: #90
[#196 float32]: #89
[#196 ident]: #315
[#196 int32]: #91
[#196 mat_prefix]: #318
[#196 multisampled_texture_type]: #125
[#196 pointer]: #93
[#196 sampled_texture_type]: #124
[#196 sampler_type]: #122
[#196 storage_texture_type]: #126
[#196 texture_and_sampler_types]: #96
[#196 type_decl]: #321
[#196 type_decl_without_ident]: #316
[#196 uint32]: #92
[#196 vec_prefix]: #317
[#197 array_type_decl]: #94
[#197 depth_texture_type]: #123
[#197 float16]: #90
[#197 float32]: #89
[#197 ident]: #315
[#197 int32]: #91
[#197 mat_prefix]: #318
[#197 multisampled_texture_type]: #125
[#197 pointer]: #93
[#197 sampled_texture_type]: #124
[#197 sampler_type]: #122
[#197 storage_texture_type]: #126
[#197 texture_and_sampler_types]: #96
[#197 type_decl]: #320
[#197 type_decl_without_ident]: #316
[#197 uint32]: #92
[#197 vec_prefix]: #317
[#198 array_type_decl]: #94
[#198 depth_texture_type]: #123
[#198 float16]: #90
[#198 float32]: #89
[#198 ident]: #315
[#198 int32]: #91
[#198 mat_prefix]: #318
[#198 multisampled_texture_type]: #125
[#198 pointer]: #93
[#198 sampled_texture_type]: #124
[#198 sampler_type]: #122
[#198 storage_texture_type]: #126
[#198 texture_and_sampler_types]: #96
[#198 type_decl]: #314
[#198 type_decl_without_ident]: #316
[#198 uint32]: #92
[#198 vec_prefix]: #317
[#200 additive_expression]: #59
[#200 and]: #67
[#200 argument_expression_list/0.1]: #309
[#200 argument_expression_list/0.1/0.0]: #310
[#200 argument_expression_list/0.1/0.0/0]: #311
[#200 argument_expression_list/0.1/0.0/0/0.0]: #312
[#200 array_type_decl]: #94
[#200 bang]: #64
[#200 binary_and_expression]: #56
[#200 binary_or_expression]: #57
[#200 binary_xor_expression]: #58
[#200 bitwise_expression]: #54
[#200 bool_literal]: #86
[#200 callable]: #75
[#200 const_literal]: #76
[#200 decimal_float_literal]: #112
[#200 depth_texture_type]: #123
[#200 expression]: #313
[#200 float16]: #90
[#200 float32]: #89
[#200 float_literal]: #85
[#200 hex_float_literal]: #113
[#200 ident]: #74
[#200 int32]: #91
[#200 int_literal]: #84
[#200 mat_prefix]: #82
[#200 minus]: #63
[#200 multiplicative_expression]: #61
[#200 multisampled_texture_type]: #125
[#200 paren_expression]: #77
[#200 paren_left]: #87
[#200 pointer]: #93
[#200 primary_expression]: #68
[#200 relational_expression]: #51
[#200 sampled_texture_type]: #124
[#200 sampler_type]: #122
[#200 shift_expression]: #55
[#200 short_circuit_and_expression]: #53
[#200 short_circuit_or_expression]: #52
[#200 singular_expression]: #62
[#200 star]: #66
[#200 storage_texture_type]: #126
[#200 texture_and_sampler_types]: #96
[#200 tilde]: #65
[#200 type_decl_without_ident]: #80
[#200 uint32]: #92
[#200 unary_expression]: #60
[#200 vec_prefix]: #81
[#203 additive_expression]: #59
[#203 and]: #67
[#203 array_type_decl]: #94
[#203 bang]: #64
[#203 binary_and_expression]: #56
[#203 binary_or_expression]: #57
[#203 binary_xor_expression]: #58
[#203 bitwise_expression]: #54
[#203 bool_literal]: #86
[#203 callable]: #75
[#203 const_literal]: #76
[#203 decimal_float_literal]: #112
[#203 depth_texture_type]: #123
[#203 expression]: #308
[#203 float16]: #90
[#203 float32]: #89
[#203 float_literal]: #85
[#203 hex_float_literal]: #113
[#203 ident]: #74
[#203 int32]: #91
[#203 int_literal]: #84
[#203 mat_prefix]: #82
[#203 minus]: #63
[#203 multiplicative_expression]: #61
[#203 multisampled_texture_type]: #125
[#203 paren_expression]: #77
[#203 paren_left]: #87
[#203 pointer]: #93
[#203 primary_expression]: #68
[#203 relational_expression]: #51
[#203 sampled_texture_type]: #124
[#203 sampler_type]: #122
[#203 shift_expression]: #55
[#203 short_circuit_and_expression]: #53
[#203 short_circuit_or_expression]: #52
[#203 singular_expression]: #62
[#203 star]: #66
[#203 storage_texture_type]: #126
[#203 texture_and_sampler_types]: #96
[#203 tilde]: #65
[#203 type_decl_without_ident]: #80
[#203 uint32]: #92
[#203 unary_expression]: #60
[#203 vec_prefix]: #81
[#204 member_ident]: #297
[#204 swizzle_name]: #298
[#212 and]: #67
[#212 array_type_decl]: #94
[#212 bang]: #64
[#212 bool_literal]: #86
[#212 callable]: #75
[#212 const_literal]: #76
[#212 decimal_float_literal]: #112
[#212 depth_texture_type]: #123
[#212 float16]: #90
[#212 float32]: #89
[#212 float_literal]: #85
[#212 hex_float_literal]: #113
[#212 ident]: #74
[#212 int32]: #91
[#212 int_literal]: #84
[#212 mat_prefix]: #82
[#212 minus]: #63
[#212 multisampled_texture_type]: #125
[#212 paren_expression]: #77
[#212 paren_left]: #87
[#212 pointer]: #93
[#212 primary_expression]: #68
[#212 sampled_texture_type]: #124
[#212 sampler_type]: #122
[#212 singular_expression]: #62
[#212 star]: #66
[#212 storage_texture_type]: #126
[#212 texture_and_sampler_types]: #96
[#212 tilde]: #65
[#212 type_decl_without_ident]: #80
[#212 uint32]: #92
[#212 unary_expression]: #296
[#212 vec_prefix]: #81
[#213 and]: #67
[#213 array_type_decl]: #94
[#213 bang]: #64
[#213 bool_literal]: #86
[#213 callable]: #75
[#213 const_literal]: #76
[#213 decimal_float_literal]: #112
[#213 depth_texture_type]: #123
[#213 float16]: #90
[#213 float32]: #89
[#213 float_literal]: #85
[#213 hex_float_literal]: #113
[#213 ident]: #74
[#213 int32]: #91
[#213 int_literal]: #84
[#213 mat_prefix]: #82
[#213 minus]: #63
[#213 multisampled_texture_type]: #125
[#213 paren_expression]: #77
[#213 paren_left]: #87
[#213 pointer]: #93
[#213 primary_expression]: #68
[#213 sampled_texture_type]: #124
[#213 sampler_type]: #122
[#213 singular_expression]: #62
[#213 star]: #66
[#213 storage_texture_type]: #126
[#213 texture_and_sampler_types]: #96
[#213 tilde]: #65
[#213 type_decl_without_ident]: #80
[#213 uint32]: #92
[#213 unary_expression]: #295
[#213 vec_prefix]: #81
[#214 and]: #67
[#214 array_type_decl]: #94
[#214 bang]: #64
[#214 bool_literal]: #86
[#214 callable]: #75
[#214 const_literal]: #76
[#214 decimal_float_literal]: #112
[#214 depth_texture_type]: #123
[#214 float16]: #90
[#214 float32]: #89
[#214 float_literal]: #85
[#214 hex_float_literal]: #113
[#214 ident]: #74
[#214 int32]: #91
[#214 int_literal]: #84
[#214 mat_prefix]: #82
[#214 minus]: #63
[#214 multisampled_texture_type]: #125
[#214 paren_expression]: #77
[#214 paren_left]: #87
[#214 pointer]: #93
[#214 primary_expression]: #68
[#214 sampled_texture_type]: #124
[#214 sampler_type]: #122
[#214 singular_expression]: #62
[#214 star]: #66
[#214 storage_texture_type]: #126
[#214 texture_and_sampler_types]: #96
[#214 tilde]: #65
[#214 type_decl_without_ident]: #80
[#214 uint32]: #92
[#214 unary_expression]: #294
[#214 vec_prefix]: #81
[#217 and]: #67
[#217 array_type_decl]: #94
[#217 bang]: #64
[#217 bool_literal]: #86
[#217 callable]: #75
[#217 const_literal]: #76
[#217 decimal_float_literal]: #112
[#217 depth_texture_type]: #123
[#217 float16]: #90
[#217 float32]: #89
[#217 float_literal]: #85
[#217 hex_float_literal]: #113
[#217 ident]: #74
[#217 int32]: #91
[#217 int_literal]: #84
[#217 mat_prefix]: #82
[#217 minus]: #63
[#217 multisampled_texture_type]: #125
[#217 paren_expression]: #77
[#217 paren_left]: #87
[#217 pointer]: #93
[#217 primary_expression]: #68
[#217 sampled_texture_type]: #124
[#217 sampler_type]: #122
[#217 singular_expression]: #62
[#217 star]: #66
[#217 storage_texture_type]: #126
[#217 texture_and_sampler_types]: #96
[#217 tilde]: #65
[#217 type_decl_without_ident]: #80
[#217 uint32]: #92
[#217 unary_expression]: #293
[#217 vec_prefix]: #81
[#218 and]: #67
[#218 array_type_decl]: #94
[#218 bang]: #64
[#218 bool_literal]: #86
[#218 callable]: #75
[#218 const_literal]: #76
[#218 decimal_float_literal]: #112
[#218 depth_texture_type]: #123
[#218 float16]: #90
[#218 float32]: #89
[#218 float_literal]: #85
[#218 hex_float_literal]: #113
[#218 ident]: #74
[#218 int32]: #91
[#218 int_literal]: #84
[#218 mat_prefix]: #82
[#218 minus]: #63
[#218 multisampled_texture_type]: #125
[#218 paren_expression]: #77
[#218 paren_left]: #87
[#218 pointer]: #93
[#218 primary_expression]: #68
[#218 sampled_texture_type]: #124
[#218 sampler_type]: #122
[#218 singular_expression]: #62
[#218 star]: #66
[#218 storage_texture_type]: #126
[#218 texture_and_sampler_types]: #96
[#218 tilde]: #65
[#218 type_decl_without_ident]: #80
[#218 uint32]: #92
[#218 unary_expression]: #292
[#218 vec_prefix]: #81
[#221 and]: #67
[#221 array_type_decl]: #94
[#221 bang]: #64
[#221 bool_literal]: #86
[#221 callable]: #75
[#221 const_literal]: #76
[#221 decimal_float_literal]: #112
[#221 depth_texture_type]: #123
[#221 float16]: #90
[#221 float32]: #89
[#221 float_literal]: #85
[#221 hex_float_literal]: #113
[#221 ident]: #74
[#221 int32]: #91
[#221 int_literal]: #84
[#221 mat_prefix]: #82
[#221 minus]: #63
[#221 multiplicative_expression]: #291
[#221 multisampled_texture_type]: #125
[#221 paren_expression]: #77
[#221 paren_left]: #87
[#221 pointer]: #93
[#221 primary_expression]: #68
[#221 sampled_texture_type]: #124
[#221 sampler_type]: #122
[#221 singular_expression]: #62
[#221 star]: #66
[#221 storage_texture_type]: #126
[#221 texture_and_sampler_types]: #96
[#221 tilde]: #65
[#221 type_decl_without_ident]: #80
[#221 uint32]: #92
[#221 unary_expression]: #290
[#221 vec_prefix]: #81
[#222 and]: #67
[#222 array_type_decl]: #94
[#222 bang]: #64
[#222 bool_literal]: #86
[#222 callable]: #75
[#222 const_literal]: #76
[#222 decimal_float_literal]: #112
[#222 depth_texture_type]: #123
[#222 float16]: #90
[#222 float32]: #89
[#222 float_literal]: #85
[#222 hex_float_literal]: #113
[#222 ident]: #74
[#222 int32]: #91
[#222 int_literal]: #84
[#222 mat_prefix]: #82
[#222 minus]: #63
[#222 multiplicative_expression]: #289
[#222 multisampled_texture_type]: #125
[#222 paren_expression]: #77
[#222 paren_left]: #87
[#222 pointer]: #93
[#222 primary_expression]: #68
[#222 sampled_texture_type]: #124
[#222 sampler_type]: #122
[#222 singular_expression]: #62
[#222 star]: #66
[#222 storage_texture_type]: #126
[#222 texture_and_sampler_types]: #96
[#222 tilde]: #65
[#222 type_decl_without_ident]: #80
[#222 uint32]: #92
[#222 unary_expression]: #290
[#222 vec_prefix]: #81
[#224 and]: #67
[#224 array_type_decl]: #94
[#224 bang]: #64
[#224 bool_literal]: #86
[#224 callable]: #75
[#224 const_literal]: #76
[#224 decimal_float_literal]: #112
[#224 depth_texture_type]: #123
[#224 float16]: #90
[#224 float32]: #89
[#224 float_literal]: #85
[#224 hex_float_literal]: #113
[#224 ident]: #74
[#224 int32]: #91
[#224 int_literal]: #84
[#224 mat_prefix]: #82
[#224 minus]: #63
[#224 multisampled_texture_type]: #125
[#224 paren_expression]: #77
[#224 paren_left]: #87
[#224 pointer]: #93
[#224 primary_expression]: #68
[#224 sampled_texture_type]: #124
[#224 sampler_type]: #122
[#224 singular_expression]: #62
[#224 star]: #66
[#224 storage_texture_type]: #126
[#224 texture_and_sampler_types]: #96
[#224 tilde]: #65
[#224 type_decl_without_ident]: #80
[#224 uint32]: #92
[#224 unary_expression]: #288
[#224 vec_prefix]: #81
[#226 and]: #67
[#226 array_type_decl]: #94
[#226 bang]: #64
[#226 bool_literal]: #86
[#226 callable]: #75
[#226 const_literal]: #76
[#226 decimal_float_literal]: #112
[#226 depth_texture_type]: #123
[#226 float16]: #90
[#226 float32]: #89
[#226 float_literal]: #85
[#226 hex_float_literal]: #113
[#226 ident]: #74
[#226 int32]: #91
[#226 int_literal]: #84
[#226 mat_prefix]: #82
[#226 minus]: #63
[#226 multisampled_texture_type]: #125
[#226 paren_expression]: #77
[#226 paren_left]: #87
[#226 pointer]: #93
[#226 primary_expression]: #68
[#226 sampled_texture_type]: #124
[#226 sampler_type]: #122
[#226 singular_expression]: #62
[#226 star]: #66
[#226 storage_texture_type]: #126
[#226 texture_and_sampler_types]: #96
[#226 tilde]: #65
[#226 type_decl_without_ident]: #80
[#226 uint32]: #92
[#226 unary_expression]: #287
[#226 vec_prefix]: #81
[#228 and]: #67
[#228 array_type_decl]: #94
[#228 bang]: #64
[#228 bool_literal]: #86
[#228 callable]: #75
[#228 const_literal]: #76
[#228 decimal_float_literal]: #112
[#228 depth_texture_type]: #123
[#228 float16]: #90
[#228 float32]: #89
[#228 float_literal]: #85
[#228 hex_float_literal]: #113
[#228 ident]: #74
[#228 int32]: #91
[#228 int_literal]: #84
[#228 mat_prefix]: #82
[#228 minus]: #63
[#228 multisampled_texture_type]: #125
[#228 paren_expression]: #77
[#228 paren_left]: #87
[#228 pointer]: #93
[#228 primary_expression]: #68
[#228 sampled_texture_type]: #124
[#228 sampler_type]: #122
[#228 singular_expression]: #62
[#228 star]: #66
[#228 storage_texture_type]: #126
[#228 texture_and_sampler_types]: #96
[#228 tilde]: #65
[#228 type_decl_without_ident]: #80
[#228 uint32]: #92
[#228 unary_expression]: #286
[#228 vec_prefix]: #81
[#229 additive_expression]: #59
[#229 and]: #67
[#229 array_type_decl]: #94
[#229 bang]: #64
[#229 bool_literal]: #86
[#229 callable]: #75
[#229 const_literal]: #76
[#229 decimal_float_literal]: #112
[#229 depth_texture_type]: #123
[#229 float16]: #90
[#229 float32]: #89
[#229 float_literal]: #85
[#229 hex_float_literal]: #113
[#229 ident]: #74
[#229 int32]: #91
[#229 int_literal]: #84
[#229 mat_prefix]: #82
[#229 minus]: #63
[#229 multiplicative_expression]: #61
[#229 multisampled_texture_type]: #125
[#229 paren_expression]: #77
[#229 paren_left]: #87
[#229 pointer]: #93
[#229 primary_expression]: #68
[#229 sampled_texture_type]: #124
[#229 sampler_type]: #122
[#229 shift_expression]: #285
[#229 singular_expression]: #62
[#229 star]: #66
[#229 storage_texture_type]: #126
[#229 texture_and_sampler_types]: #96
[#229 tilde]: #65
[#229 type_decl_without_ident]: #80
[#229 uint32]: #92
[#229 unary_expression]: #278
[#229 vec_prefix]: #81
[#230 additive_expression]: #59
[#230 and]: #67
[#230 array_type_decl]: #94
[#230 bang]: #64
[#230 bool_literal]: #86
[#230 callable]: #75
[#230 const_literal]: #76
[#230 decimal_float_literal]: #112
[#230 depth_texture_type]: #123
[#230 float16]: #90
[#230 float32]: #89
[#230 float_literal]: #85
[#230 hex_float_literal]: #113
[#230 ident]: #74
[#230 int32]: #91
[#230 int_literal]: #84
[#230 mat_prefix]: #82
[#230 minus]: #63
[#230 multiplicative_expression]: #61
[#230 multisampled_texture_type]: #125
[#230 paren_expression]: #77
[#230 paren_left]: #87
[#230 pointer]: #93
[#230 primary_expression]: #68
[#230 sampled_texture_type]: #124
[#230 sampler_type]: #122
[#230 shift_expression]: #284
[#230 singular_expression]: #62
[#230 star]: #66
[#230 storage_texture_type]: #126
[#230 texture_and_sampler_types]: #96
[#230 tilde]: #65
[#230 type_decl_without_ident]: #80
[#230 uint32]: #92
[#230 unary_expression]: #278
[#230 vec_prefix]: #81
[#231 additive_expression]: #59
[#231 and]: #67
[#231 array_type_decl]: #94
[#231 bang]: #64
[#231 bool_literal]: #86
[#231 callable]: #75
[#231 const_literal]: #76
[#231 decimal_float_literal]: #112
[#231 depth_texture_type]: #123
[#231 float16]: #90
[#231 float32]: #89
[#231 float_literal]: #85
[#231 hex_float_literal]: #113
[#231 ident]: #74
[#231 int32]: #91
[#231 int_literal]: #84
[#231 mat_prefix]: #82
[#231 minus]: #63
[#231 multiplicative_expression]: #61
[#231 multisampled_texture_type]: #125
[#231 paren_expression]: #77
[#231 paren_left]: #87
[#231 pointer]: #93
[#231 primary_expression]: #68
[#231 sampled_texture_type]: #124
[#231 sampler_type]: #122
[#231 shift_expression]: #283
[#231 singular_expression]: #62
[#231 star]: #66
[#231 storage_texture_type]: #126
[#231 texture_and_sampler_types]: #96
[#231 tilde]: #65
[#231 type_decl_without_ident]: #80
[#231 uint32]: #92
[#231 unary_expression]: #278
[#231 vec_prefix]: #81
[#232 additive_expression]: #59
[#232 and]: #67
[#232 array_type_decl]: #94
[#232 bang]: #64
[#232 bool_literal]: #86
[#232 callable]: #75
[#232 const_literal]: #76
[#232 decimal_float_literal]: #112
[#232 depth_texture_type]: #123
[#232 float16]: #90
[#232 float32]: #89
[#232 float_literal]: #85
[#232 hex_float_literal]: #113
[#232 ident]: #74
[#232 int32]: #91
[#232 int_literal]: #84
[#232 mat_prefix]: #82
[#232 minus]: #63
[#232 multiplicative_expression]: #61
[#232 multisampled_texture_type]: #125
[#232 paren_expression]: #77
[#232 paren_left]: #87
[#232 pointer]: #93
[#232 primary_expression]: #68
[#232 sampled_texture_type]: #124
[#232 sampler_type]: #122
[#232 shift_expression]: #282
[#232 singular_expression]: #62
[#232 star]: #66
[#232 storage_texture_type]: #126
[#232 texture_and_sampler_types]: #96
[#232 tilde]: #65
[#232 type_decl_without_ident]: #80
[#232 uint32]: #92
[#232 unary_expression]: #278
[#232 vec_prefix]: #81
[#233 additive_expression]: #59
[#233 and]: #67
[#233 array_type_decl]: #94
[#233 bang]: #64
[#233 bool_literal]: #86
[#233 callable]: #75
[#233 const_literal]: #76
[#233 decimal_float_literal]: #112
[#233 depth_texture_type]: #123
[#233 float16]: #90
[#233 float32]: #89
[#233 float_literal]: #85
[#233 hex_float_literal]: #113
[#233 ident]: #74
[#233 int32]: #91
[#233 int_literal]: #84
[#233 mat_prefix]: #82
[#233 minus]: #63
[#233 multiplicative_expression]: #61
[#233 multisampled_texture_type]: #125
[#233 paren_expression]: #77
[#233 paren_left]: #87
[#233 pointer]: #93
[#233 primary_expression]: #68
[#233 sampled_texture_type]: #124
[#233 sampler_type]: #122
[#233 shift_expression]: #281
[#233 singular_expression]: #62
[#233 star]: #66
[#233 storage_texture_type]: #126
[#233 texture_and_sampler_types]: #96
[#233 tilde]: #65
[#233 type_decl_without_ident]: #80
[#233 uint32]: #92
[#233 unary_expression]: #278
[#233 vec_prefix]: #81
[#234 additive_expression]: #59
[#234 and]: #67
[#234 array_type_decl]: #94
[#234 bang]: #64
[#234 bool_literal]: #86
[#234 callable]: #75
[#234 const_literal]: #76
[#234 decimal_float_literal]: #112
[#234 depth_texture_type]: #123
[#234 float16]: #90
[#234 float32]: #89
[#234 float_literal]: #85
[#234 hex_float_literal]: #113
[#234 ident]: #74
[#234 int32]: #91
[#234 int_literal]: #84
[#234 mat_prefix]: #82
[#234 minus]: #63
[#234 multiplicative_expression]: #61
[#234 multisampled_texture_type]: #125
[#234 paren_expression]: #77
[#234 paren_left]: #87
[#234 pointer]: #93
[#234 primary_expression]: #68
[#234 sampled_texture_type]: #124
[#234 sampler_type]: #122
[#234 shift_expression]: #280
[#234 singular_expression]: #62
[#234 star]: #66
[#234 storage_texture_type]: #126
[#234 texture_and_sampler_types]: #96
[#234 tilde]: #65
[#234 type_decl_without_ident]: #80
[#234 uint32]: #92
[#234 unary_expression]: #278
[#234 vec_prefix]: #81
[#240 additive_expression]: #59
[#240 and]: #67
[#240 array_type_decl]: #94
[#240 bang]: #64
[#240 bool_literal]: #86
[#240 callable]: #75
[#240 const_literal]: #76
[#240 decimal_float_literal]: #112
[#240 depth_texture_type]: #123
[#240 float16]: #90
[#240 float32]: #89
[#240 float_literal]: #85
[#240 hex_float_literal]: #113
[#240 ident]: #74
[#240 int32]: #91
[#240 int_literal]: #84
[#240 mat_prefix]: #82
[#240 minus]: #63
[#240 multiplicative_expression]: #61
[#240 multisampled_texture_type]: #125
[#240 paren_expression]: #77
[#240 paren_left]: #87
[#240 pointer]: #93
[#240 primary_expression]: #68
[#240 relational_expression]: #279
[#240 sampled_texture_type]: #124
[#240 sampler_type]: #122
[#240 shift_expression]: #55
[#240 singular_expression]: #62
[#240 star]: #66
[#240 storage_texture_type]: #126
[#240 texture_and_sampler_types]: #96
[#240 tilde]: #65
[#240 type_decl_without_ident]: #80
[#240 uint32]: #92
[#240 unary_expression]: #278
[#240 vec_prefix]: #81
[#242 additive_expression]: #59
[#242 and]: #67
[#242 array_type_decl]: #94
[#242 bang]: #64
[#242 bool_literal]: #86
[#242 callable]: #75
[#242 const_literal]: #76
[#242 decimal_float_literal]: #112
[#242 depth_texture_type]: #123
[#242 float16]: #90
[#242 float32]: #89
[#242 float_literal]: #85
[#242 hex_float_literal]: #113
[#242 ident]: #74
[#242 int32]: #91
[#242 int_literal]: #84
[#242 mat_prefix]: #82
[#242 minus]: #63
[#242 multiplicative_expression]: #61
[#242 multisampled_texture_type]: #125
[#242 paren_expression]: #77
[#242 paren_left]: #87
[#242 pointer]: #93
[#242 primary_expression]: #68
[#242 relational_expression]: #277
[#242 sampled_texture_type]: #124
[#242 sampler_type]: #122
[#242 shift_expression]: #55
[#242 singular_expression]: #62
[#242 star]: #66
[#242 storage_texture_type]: #126
[#242 texture_and_sampler_types]: #96
[#242 tilde]: #65
[#242 type_decl_without_ident]: #80
[#242 uint32]: #92
[#242 unary_expression]: #278
[#242 vec_prefix]: #81
[#244 additive_expression]: #59
[#244 and]: #67
[#244 array_type_decl]: #94
[#244 bang]: #64
[#244 binary_and_expression]: #56
[#244 binary_or_expression]: #57
[#244 binary_xor_expression]: #58
[#244 bitwise_expression]: #54
[#244 bool_literal]: #86
[#244 callable]: #75
[#244 const_literal]: #76
[#244 decimal_float_literal]: #112
[#244 depth_texture_type]: #123
[#244 expression]: #276
[#244 float16]: #90
[#244 float32]: #89
[#244 float_literal]: #85
[#244 hex_float_literal]: #113
[#244 ident]: #74
[#244 int32]: #91
[#244 int_literal]: #84
[#244 mat_prefix]: #82
[#244 minus]: #63
[#244 multiplicative_expression]: #61
[#244 multisampled_texture_type]: #125
[#244 paren_expression]: #77
[#244 paren_left]: #87
[#244 pointer]: #93
[#244 primary_expression]: #68
[#244 relational_expression]: #51
[#244 sampled_texture_type]: #124
[#244 sampler_type]: #122
[#244 shift_expression]: #55
[#244 short_circuit_and_expression]: #53
[#244 short_circuit_or_expression]: #52
[#244 singular_expression]: #62
[#244 star]: #66
[#244 storage_texture_type]: #126
[#244 texture_and_sampler_types]: #96
[#244 tilde]: #65
[#244 type_decl_without_ident]: #80
[#244 uint32]: #92
[#244 unary_expression]: #60
[#244 vec_prefix]: #81
[#245 additive_expression]: #59
[#245 and]: #67
[#245 array_type_decl]: #94
[#245 bang]: #64
[#245 binary_and_expression]: #56
[#245 binary_or_expression]: #57
[#245 binary_xor_expression]: #58
[#245 bitwise_expression]: #54
[#245 bool_literal]: #86
[#245 callable]: #75
[#245 const_literal]: #76
[#245 decimal_float_literal]: #112
[#245 depth_texture_type]: #123
[#245 expression]: #275
[#245 float16]: #90
[#245 float32]: #89
[#245 float_literal]: #85
[#245 hex_float_literal]: #113
[#245 ident]: #74
[#245 int32]: #91
[#245 int_literal]: #84
[#245 mat_prefix]: #82
[#245 minus]: #63
[#245 multiplicative_expression]: #61
[#245 multisampled_texture_type]: #125
[#245 paren_expression]: #77
[#245 paren_left]: #87
[#245 pointer]: #93
[#245 primary_expression]: #68
[#245 relational_expression]: #51
[#245 sampled_texture_type]: #124
[#245 sampler_type]: #122
[#245 shift_expression]: #55
[#245 short_circuit_and_expression]: #53
[#245 short_circuit_or_expression]: #52
[#245 singular_expression]: #62
[#245 star]: #66
[#245 storage_texture_type]: #126
[#245 texture_and_sampler_types]: #96
[#245 tilde]: #65
[#245 type_decl_without_ident]: #80
[#245 uint32]: #92
[#245 unary_expression]: #60
[#245 vec_prefix]: #81
[#246 additive_expression]: #59
[#246 and]: #67
[#246 array_type_decl]: #94
[#246 bang]: #64
[#246 binary_and_expression]: #56
[#246 binary_or_expression]: #57
[#246 binary_xor_expression]: #58
[#246 bitwise_expression]: #54
[#246 bool_literal]: #86
[#246 callable]: #75
[#246 const_literal]: #76
[#246 decimal_float_literal]: #112
[#246 depth_texture_type]: #123
[#246 expression]: #274
[#246 float16]: #90
[#246 float32]: #89
[#246 float_literal]: #85
[#246 hex_float_literal]: #113
[#246 ident]: #74
[#246 int32]: #91
[#246 int_literal]: #84
[#246 mat_prefix]: #82
[#246 minus]: #63
[#246 multiplicative_expression]: #61
[#246 multisampled_texture_type]: #125
[#246 paren_expression]: #77
[#246 paren_left]: #87
[#246 pointer]: #93
[#246 primary_expression]: #68
[#246 relational_expression]: #51
[#246 sampled_texture_type]: #124
[#246 sampler_type]: #122
[#246 shift_expression]: #55
[#246 short_circuit_and_expression]: #53
[#246 short_circuit_or_expression]: #52
[#246 singular_expression]: #62
[#246 star]: #66
[#246 storage_texture_type]: #126
[#246 texture_and_sampler_types]: #96
[#246 tilde]: #65
[#246 type_decl_without_ident]: #80
[#246 uint32]: #92
[#246 unary_expression]: #60
[#246 vec_prefix]: #81
[#247 interpolation_type_name]: #270
[#248 additive_expression]: #59
[#248 and]: #67
[#248 array_type_decl]: #94
[#248 bang]: #64
[#248 binary_and_expression]: #56
[#248 binary_or_expression]: #57
[#248 binary_xor_expression]: #58
[#248 bitwise_expression]: #54
[#248 bool_literal]: #86
[#248 callable]: #75
[#248 const_literal]: #76
[#248 decimal_float_literal]: #112
[#248 depth_texture_type]: #123
[#248 expression]: #269
[#248 float16]: #90
[#248 float32]: #89
[#248 float_literal]: #85
[#248 hex_float_literal]: #113
[#248 ident]: #74
[#248 int32]: #91
[#248 int_literal]: #84
[#248 mat_prefix]: #82
[#248 minus]: #63
[#248 multiplicative_expression]: #61
[#248 multisampled_texture_type]: #125
[#248 paren_expression]: #77
[#248 paren_left]: #87
[#248 pointer]: #93
[#248 primary_expression]: #68
[#248 relational_expression]: #51
[#248 sampled_texture_type]: #124
[#248 sampler_type]: #122
[#248 shift_expression]: #55
[#248 short_circuit_and_expression]: #53
[#248 short_circuit_or_expression]: #52
[#248 singular_expression]: #62
[#248 star]: #66
[#248 storage_texture_type]: #126
[#248 texture_and_sampler_types]: #96
[#248 tilde]: #65
[#248 type_decl_without_ident]: #80
[#248 uint32]: #92
[#248 unary_expression]: #60
[#248 vec_prefix]: #81
[#249 additive_expression]: #59
[#249 and]: #67
[#249 array_type_decl]: #94
[#249 bang]: #64
[#249 binary_and_expression]: #56
[#249 binary_or_expression]: #57
[#249 binary_xor_expression]: #58
[#249 bitwise_expression]: #54
[#249 bool_literal]: #86
[#249 callable]: #75
[#249 const_literal]: #76
[#249 decimal_float_literal]: #112
[#249 depth_texture_type]: #123
[#249 expression]: #268
[#249 float16]: #90
[#249 float32]: #89
[#249 float_literal]: #85
[#249 hex_float_literal]: #113
[#249 ident]: #74
[#249 int32]: #91
[#249 int_literal]: #84
[#249 mat_prefix]: #82
[#249 minus]: #63
[#249 multiplicative_expression]: #61
[#249 multisampled_texture_type]: #125
[#249 paren_expression]: #77
[#249 paren_left]: #87
[#249 pointer]: #93
[#249 primary_expression]: #68
[#249 relational_expression]: #51
[#249 sampled_texture_type]: #124
[#249 sampler_type]: #122
[#249 shift_expression]: #55
[#249 short_circuit_and_expression]: #53
[#249 short_circuit_or_expression]: #52
[#249 singular_expression]: #62
[#249 star]: #66
[#249 storage_texture_type]: #126
[#249 texture_and_sampler_types]: #96
[#249 tilde]: #65
[#249 type_decl_without_ident]: #80
[#249 uint32]: #92
[#249 unary_expression]: #60
[#249 vec_prefix]: #81
[#250 builtin_value_name]: #255
[#251 additive_expression]: #59
[#251 and]: #67
[#251 array_type_decl]: #94
[#251 bang]: #64
[#251 binary_and_expression]: #56
[#251 binary_or_expression]: #57
[#251 binary_xor_expression]: #58
[#251 bitwise_expression]: #54
[#251 bool_literal]: #86
[#251 callable]: #75
[#251 const_literal]: #76
[#251 decimal_float_literal]: #112
[#251 depth_texture_type]: #123
[#251 expression]: #254
[#251 float16]: #90
[#251 float32]: #89
[#251 float_literal]: #85
[#251 hex_float_literal]: #113
[#251 ident]: #74
[#251 int32]: #91
[#251 int_literal]: #84
[#251 mat_prefix]: #82
[#251 minus]: #63
[#251 multiplicative_expression]: #61
[#251 multisampled_texture_type]: #125
[#251 paren_expression]: #77
[#251 paren_left]: #87
[#251 pointer]: #93
[#251 primary_expression]: #68
[#251 relational_expression]: #51
[#251 sampled_texture_type]: #124
[#251 sampler_type]: #122
[#251 shift_expression]: #55
[#251 short_circuit_and_expression]: #53
[#251 short_circuit_or_expression]: #52
[#251 singular_expression]: #62
[#251 star]: #66
[#251 storage_texture_type]: #126
[#251 texture_and_sampler_types]: #96
[#251 tilde]: #65
[#251 type_decl_without_ident]: #80
[#251 uint32]: #92
[#251 unary_expression]: #60
[#251 vec_prefix]: #81
[#252 additive_expression]: #59
[#252 and]: #67
[#252 array_type_decl]: #94
[#252 bang]: #64
[#252 binary_and_expression]: #56
[#252 binary_or_expression]: #57
[#252 binary_xor_expression]: #58
[#252 bitwise_expression]: #54
[#252 bool_literal]: #86
[#252 callable]: #75
[#252 const_literal]: #76
[#252 decimal_float_literal]: #112
[#252 depth_texture_type]: #123
[#252 expression]: #253
[#252 float16]: #90
[#252 float32]: #89
[#252 float_literal]: #85
[#252 hex_float_literal]: #113
[#252 ident]: #74
[#252 int32]: #91
[#252 int_literal]: #84
[#252 mat_prefix]: #82
[#252 minus]: #63
[#252 multiplicative_expression]: #61
[#252 multisampled_texture_type]: #125
[#252 paren_expression]: #77
[#252 paren_left]: #87
[#252 pointer]: #93
[#252 primary_expression]: #68
[#252 relational_expression]: #51
[#252 sampled_texture_type]: #124
[#252 sampler_type]: #122
[#252 shift_expression]: #55
[#252 short_circuit_and_expression]: #53
[#252 short_circuit_or_expression]: #52
[#252 singular_expression]: #62
[#252 star]: #66
[#252 storage_texture_type]: #126
[#252 texture_and_sampler_types]: #96
[#252 tilde]: #65
[#252 type_decl_without_ident]: #80
[#252 uint32]: #92
[#252 unary_expression]: #60
[#252 vec_prefix]: #81
[#253 attrib_end]: #524
[#253 attrib_end/0.0]: #514
[#253 comma]: #516
[#254 attrib_end]: #523
[#254 attrib_end/0.0]: #514
[#254 comma]: #516
[#255 attrib_end]: #522
[#255 attrib_end/0.0]: #514
[#255 comma]: #516
[#268 attrib_end]: #521
[#268 attrib_end/0.0]: #514
[#268 comma]: #516
[#269 attrib_end]: #520
[#269 attrib_end/0.0]: #514
[#269 comma]: #516
[#270 attrib_end]: #518
[#270 attrib_end/0.0]: #514
[#270 comma]: #519
[#274 attrib_end]: #517
[#274 attrib_end/0.0]: #514
[#274 comma]: #516
[#275 attrib_end]: #515
[#275 attrib_end/0.0]: #514
[#275 comma]: #516
[#276 attrib_end]: #512
[#276 attrib_end/0.0]: #514
[#276 comma]: #513
[#278 shift_left]: #217
[#278 shift_right]: #218
[#289 forward_slash]: #213
[#289 modulo]: #214
[#289 star]: #212
[#291 forward_slash]: #213
[#291 modulo]: #214
[#291 star]: #212
[#297 bracket_left]: #203
[#297 period]: #204
[#297 postfix_expression]: #511
[#297 postfix_expression/1.2]: #510
[#298 bracket_left]: #203
[#298 period]: #204
[#298 postfix_expression]: #509
[#298 postfix_expression/2.2]: #508
[#308 bracket_right]: #506
[#309 paren_right]: #505
[#310 additive_expression]: #59
[#310 and]: #67
[#310 array_type_decl]: #94
[#310 bang]: #64
[#310 binary_and_expression]: #56
[#310 binary_or_expression]: #57
[#310 binary_xor_expression]: #58
[#310 bitwise_expression]: #54
[#310 bool_literal]: #86
[#310 callable]: #75
[#310 const_literal]: #76
[#310 decimal_float_literal]: #112
[#310 depth_texture_type]: #123
[#310 expression]: #504
[#310 float16]: #90
[#310 float32]: #89
[#310 float_literal]: #85
[#310 hex_float_literal]: #113
[#310 ident]: #74
[#310 int32]: #91
[#310 int_literal]: #84
[#310 mat_prefix]: #82
[#310 minus]: #63
[#310 multiplicative_expression]: #61
[#310 multisampled_texture_type]: #125
[#310 paren_expression]: #77
[#310 paren_left]: #87
[#310 pointer]: #93
[#310 primary_expression]: #68
[#310 relational_expression]: #51
[#310 sampled_texture_type]: #124
[#310 sampler_type]: #122
[#310 shift_expression]: #55
[#310 short_circuit_and_expression]: #53
[#310 short_circuit_or_expression]: #52
[#310 singular_expression]: #62
[#310 star]: #66
[#310 storage_texture_type]: #126
[#310 texture_and_sampler_types]: #96
[#310 tilde]: #65
[#310 type_decl_without_ident]: #80
[#310 uint32]: #92
[#310 unary_expression]: #60
[#310 vec_prefix]: #81
[#312 additive_expression]: #59
[#312 and]: #67
[#312 argument_expression_list/0.1/0.0/0]: #503
[#312 argument_expression_list/0.1/0.0/0/0.0]: #312
[#312 array_type_decl]: #94
[#312 bang]: #64
[#312 binary_and_expression]: #56
[#312 binary_or_expression]: #57
[#312 binary_xor_expression]: #58
[#312 bitwise_expression]: #54
[#312 bool_literal]: #86
[#312 callable]: #75
[#312 const_literal]: #76
[#312 decimal_float_literal]: #112
[#312 depth_texture_type]: #123
[#312 expression]: #313
[#312 float16]: #90
[#312 float32]: #89
[#312 float_literal]: #85
[#312 hex_float_literal]: #113
[#312 ident]: #74
[#312 int32]: #91
[#312 int_literal]: #84
[#312 mat_prefix]: #82
[#312 minus]: #63
[#312 multiplicative_expression]: #61
[#312 multisampled_texture_type]: #125
[#312 paren_expression]: #77
[#312 paren_left]: #87
[#312 pointer]: #93
[#312 primary_expression]: #68
[#312 relational_expression]: #51
[#312 sampled_texture_type]: #124
[#312 sampler_type]: #122
[#312 shift_expression]: #55
[#312 short_circuit_and_expression]: #53
[#312 short_circuit_or_expression]: #52
[#312 singular_expression]: #62
[#312 star]: #66
[#312 storage_texture_type]: #126
[#312 texture_and_sampler_types]: #96
[#312 tilde]: #65
[#312 type_decl_without_ident]: #80
[#312 uint32]: #92
[#312 unary_expression]: #60
[#312 vec_prefix]: #81
[#313 comma]: #502
[#314 greater_than]: #501
[#317 less_than]: #197
[#318 less_than]: #196
[#319 less_than]: #195
[#320 greater_than]: #500
[#321 greater_than]: #499
[#322 array_type_decl/0.3]: #497
[#322 comma]: #498
[#325 comma]: #496
[#331 greater_than]: #495
[#332 greater_than]: #494
[#333 greater_than]: #493
[#334 comma]: #492
[#351 brace_right]: #490
[#353 and]: #391
[#353 assignment_statement]: #366
[#353 brace_left]: #188
[#353 break_statement]: #363
[#353 compound_statement]: #367
[#353 compound_statement/0.1/0]: #489
[#353 continue_statement]: #364
[#353 decrement_statement]: #369
[#353 for_statement]: #359
[#353 func_call_statement]: #361
[#353 ident]: #377
[#353 if_clause]: #372
[#353 if_statement]: #356
[#353 increment_statement]: #368
[#353 lhs_expression]: #383
[#353 lhs_expression/0.0]: #386
[#353 lhs_expression/0.0/0]: #388
[#353 lhs_expression/0.0/0/0.0]: #389
[#353 loop_statement]: #358
[#353 return_statement]: #355
[#353 semicolon]: #354
[#353 star]: #390
[#353 statement]: #353
[#353 static_assert_statement]: #370
[#353 switch_statement]: #357
[#353 underscore]: #384
[#353 variable_decl]: #378
[#353 variable_statement]: #362
[#353 while_statement]: #360
[#355 semicolon]: #488
[#361 semicolon]: #487
[#362 semicolon]: #486
[#363 semicolon]: #485
[#364 semicolon]: #484
[#365 semicolon]: #483
[#366 semicolon]: #482
[#368 semicolon]: #481
[#369 semicolon]: #480
[#370 semicolon]: #479
[#371 additive_expression]: #59
[#371 and]: #67
[#371 array_type_decl]: #94
[#371 bang]: #64
[#371 binary_and_expression]: #56
[#371 binary_or_expression]: #57
[#371 binary_xor_expression]: #58
[#371 bitwise_expression]: #54
[#371 bool_literal]: #86
[#371 callable]: #75
[#371 const_literal]: #76
[#371 decimal_float_literal]: #112
[#371 depth_texture_type]: #123
[#371 expression]: #478
[#371 float16]: #90
[#371 float32]: #89
[#371 float_literal]: #85
[#371 hex_float_literal]: #113
[#371 ident]: #74
[#371 int32]: #91
[#371 int_literal]: #84
[#371 mat_prefix]: #82
[#371 minus]: #63
[#371 multiplicative_expression]: #61
[#371 multisampled_texture_type]: #125
[#371 paren_expression]: #77
[#371 paren_left]: #87
[#371 pointer]: #93
[#371 primary_expression]: #68
[#371 relational_expression]: #51
[#371 return_statement/0.1]: #477
[#371 sampled_texture_type]: #124
[#371 sampler_type]: #122
[#371 shift_expression]: #55
[#371 short_circuit_and_expression]: #53
[#371 short_circuit_or_expression]: #52
[#371 singular_expression]: #62
[#371 star]: #66
[#371 storage_texture_type]: #126
[#371 texture_and_sampler_types]: #96
[#371 tilde]: #65
[#371 type_decl_without_ident]: #80
[#371 uint32]: #92
[#371 unary_expression]: #60
[#371 vec_prefix]: #81
[#372 else_if_clause]: #475
[#372 if_statement/0.1]: #473
[#372 if_statement/0.1/0]: #474
[#373 additive_expression]: #59
[#373 and]: #67
[#373 array_type_decl]: #94
[#373 bang]: #64
[#373 binary_and_expression]: #56
[#373 binary_or_expression]: #57
[#373 binary_xor_expression]: #58
[#373 bitwise_expression]: #54
[#373 bool_literal]: #86
[#373 callable]: #75
[#373 const_literal]: #76
[#373 decimal_float_literal]: #112
[#373 depth_texture_type]: #123
[#373 expression]: #472
[#373 float16]: #90
[#373 float32]: #89
[#373 float_literal]: #85
[#373 hex_float_literal]: #113
[#373 ident]: #74
[#373 int32]: #91
[#373 int_literal]: #84
[#373 mat_prefix]: #82
[#373 minus]: #63
[#373 multiplicative_expression]: #61
[#373 multisampled_texture_type]: #125
[#373 paren_expression]: #77
[#373 paren_left]: #87
[#373 pointer]: #93
[#373 primary_expression]: #68
[#373 relational_expression]: #51
[#373 sampled_texture_type]: #124
[#373 sampler_type]: #122
[#373 shift_expression]: #55
[#373 short_circuit_and_expression]: #53
[#373 short_circuit_or_expression]: #52
[#373 singular_expression]: #62
[#373 star]: #66
[#373 storage_texture_type]: #126
[#373 texture_and_sampler_types]: #96
[#373 tilde]: #65
[#373 type_decl_without_ident]: #80
[#373 uint32]: #92
[#373 unary_expression]: #60
[#373 vec_prefix]: #81
[#374 brace_left]: #471
[#375 paren_left]: #470
[#376 additive_expression]: #59
[#376 and]: #67
[#376 array_type_decl]: #94
[#376 bang]: #64
[#376 binary_and_expression]: #56
[#376 binary_or_expression]: #57
[#376 binary_xor_expression]: #58
[#376 bitwise_expression]: #54
[#376 bool_literal]: #86
[#376 callable]: #75
[#376 const_literal]: #76
[#376 decimal_float_literal]: #112
[#376 depth_texture_type]: #123
[#376 expression]: #469
[#376 float16]: #90
[#376 float32]: #89
[#376 float_literal]: #85
[#376 hex_float_literal]: #113
[#376 ident]: #74
[#376 int32]: #91
[#376 int_literal]: #84
[#376 mat_prefix]: #82
[#376 minus]: #63
[#376 multiplicative_expression]: #61
[#376 multisampled_texture_type]: #125
[#376 paren_expression]: #77
[#376 paren_left]: #87
[#376 pointer]: #93
[#376 primary_expression]: #68
[#376 relational_expression]: #51
[#376 sampled_texture_type]: #124
[#376 sampler_type]: #122
[#376 shift_expression]: #55
[#376 short_circuit_and_expression]: #53
[#376 short_circuit_or_expression]: #52
[#376 singular_expression]: #62
[#376 star]: #66
[#376 storage_texture_type]: #126
[#376 texture_and_sampler_types]: #96
[#376 tilde]: #65
[#376 type_decl_without_ident]: #80
[#376 uint32]: #92
[#376 unary_expression]: #60
[#376 vec_prefix]: #81
[#377 argument_expression_list]: #468
[#377 paren_left]: #200
[#378 equal]: #467
[#379 ident]: #465
[#379 variable_ident_decl]: #466
[#379 variable_statement/2.1]: #464
[#380 ident]: #462
[#380 variable_ident_decl]: #463
[#380 variable_statement/3.1]: #461
[#383 and_equal]: #446
[#383 assignment_statement/0.1]: #434
[#383 compound_assignment_operator]: #438
[#383 division_equal]: #444
[#383 equal]: #437
[#383 minus_equal]: #442
[#383 minus_minus]: #436
[#383 modulo_equal]: #445
[#383 or_equal]: #447
[#383 plus_equal]: #441
[#383 plus_plus]: #435
[#383 shift_left_equal]: #450
[#383 shift_right_equal]: #449
[#383 times_equal]: #443
[#383 xor_equal]: #448
[#384 equal]: #433
[#385 additive_expression]: #59
[#385 and]: #67
[#385 array_type_decl]: #94
[#385 bang]: #64
[#385 binary_and_expression]: #56
[#385 binary_or_expression]: #57
[#385 binary_xor_expression]: #58
[#385 bitwise_expression]: #54
[#385 bool_literal]: #86
[#385 callable]: #75
[#385 const_literal]: #76
[#385 decimal_float_literal]: #112
[#385 depth_texture_type]: #123
[#385 expression]: #432
[#385 float16]: #90
[#385 float32]: #89
[#385 float_literal]: #85
[#385 hex_float_literal]: #113
[#385 ident]: #74
[#385 int32]: #91
[#385 int_literal]: #84
[#385 mat_prefix]: #82
[#385 minus]: #63
[#385 multiplicative_expression]: #61
[#385 multisampled_texture_type]: #125
[#385 paren_expression]: #77
[#385 paren_left]: #87
[#385 pointer]: #93
[#385 primary_expression]: #68
[#385 relational_expression]: #51
[#385 sampled_texture_type]: #124
[#385 sampler_type]: #122
[#385 shift_expression]: #55
[#385 short_circuit_and_expression]: #53
[#385 short_circuit_or_expression]: #52
[#385 singular_expression]: #62
[#385 star]: #66
[#385 storage_texture_type]: #126
[#385 texture_and_sampler_types]: #96
[#385 tilde]: #65
[#385 type_decl_without_ident]: #80
[#385 uint32]: #92
[#385 unary_expression]: #60
[#385 vec_prefix]: #81
[#386 core_lhs_expression]: #429
[#386 ident]: #430
[#386 paren_left]: #431
[#389 and]: #391
[#389 lhs_expression/0.0/0]: #428
[#389 lhs_expression/0.0/0/0.0]: #389
[#389 star]: #390
[#392 attr]: #31
[#392 attribute]: #427
[#392 function_header/0.3]: #419
[#392 param]: #424
[#392 param/0.0]: #425
[#392 param/0.0/0]: #426
[#392 param_list]: #420
[#392 param_list/0.0]: #421
[#392 param_list/0.0/0]: #422
[#392 param_list/0.0/0/0.0]: #423
[#393 attr]: #31
[#393 attribute]: #399
[#393 struct_member]: #418
[#393 struct_member/0.0]: #397
[#393 struct_member/0.0/0]: #398
[#395 attr]: #31
[#395 attribute]: #399
[#395 struct_body_decl/0.1/0]: #417
[#395 struct_body_decl/0.1/0/0.0]: #395
[#395 struct_member]: #396
[#395 struct_member/0.0]: #397
[#395 struct_member/0.0/0]: #398
[#396 comma]: #416
[#397 member_ident]: #415
[#399 attr]: #31
[#399 attribute]: #399
[#399 struct_member/0.0/0]: #414
[#402 additive_expression]: #59
[#402 and]: #67
[#402 array_type_decl]: #94
[#402 bang]: #64
[#402 binary_and_expression]: #56
[#402 binary_or_expression]: #57
[#402 binary_xor_expression]: #58
[#402 bitwise_expression]: #54
[#402 bool_literal]: #86
[#402 callable]: #75
[#402 const_literal]: #76
[#402 decimal_float_literal]: #112
[#402 depth_texture_type]: #123
[#402 expression]: #413
[#402 float16]: #90
[#402 float32]: #89
[#402 float_literal]: #85
[#402 hex_float_literal]: #113
[#402 ident]: #74
[#402 int32]: #91
[#402 int_literal]: #84
[#402 mat_prefix]: #82
[#402 minus]: #63
[#402 multiplicative_expression]: #61
[#402 multisampled_texture_type]: #125
[#402 paren_expression]: #77
[#402 paren_left]: #87
[#402 pointer]: #93
[#402 primary_expression]: #68
[#402 relational_expression]: #51
[#402 sampled_texture_type]: #124
[#402 sampler_type]: #122
[#402 shift_expression]: #55
[#402 short_circuit_and_expression]: #53
[#402 short_circuit_or_expression]: #52
[#402 singular_expression]: #62
[#402 star]: #66
[#402 storage_texture_type]: #126
[#402 texture_and_sampler_types]: #96
[#402 tilde]: #65
[#402 type_decl_without_ident]: #80
[#402 uint32]: #92
[#402 unary_expression]: #60
[#402 vec_prefix]: #81
[#406 comma]: #411
[#406 variable_qualifier/0.2]: #410
[#408 colon]: #176
[#410 greater_than]: #584
[#411 access_mode]: #583
[#415 colon]: #582
[#418 comma]: #581
[#418 struct_body_decl/0.3]: #580
[#419 paren_right]: #579
[#421 attr]: #31
[#421 attribute]: #427
[#421 param]: #578
[#421 param/0.0]: #425
[#421 param/0.0/0]: #426
[#423 attr]: #31
[#423 attribute]: #427
[#423 param]: #424
[#423 param/0.0]: #425
[#423 param/0.0/0]: #426
[#423 param_list/0.0/0]: #577
[#423 param_list/0.0/0/0.0]: #423
[#424 comma]: #576
[#425 ident]: #575
[#425 variable_ident_decl]: #574
[#427 attr]: #31
[#427 attribute]: #427
[#427 param/0.0/0]: #573
[#429 bracket_left]: #203
[#429 lhs_expression/0.2]: #571
[#429 period]: #204
[#429 postfix_expression]: #572
[#431 and]: #391
[#431 lhs_expression]: #570
[#431 lhs_expression/0.0]: #386
[#431 lhs_expression/0.0/0]: #388
[#431 lhs_expression/0.0/0/0.0]: #389
[#431 star]: #390
[#432 brace_left]: #188
[#432 compound_statement]: #569
[#433 additive_expression]: #59
[#433 and]: #67
[#433 array_type_decl]: #94
[#433 bang]: #64
[#433 binary_and_expression]: #56
[#433 binary_or_expression]: #57
[#433 binary_xor_expression]: #58
[#433 bitwise_expression]: #54
[#433 bool_literal]: #86
[#433 callable]: #75
[#433 const_literal]: #76
[#433 decimal_float_literal]: #112
[#433 depth_texture_type]: #123
[#433 expression]: #568
[#433 float16]: #90
[#433 float32]: #89
[#433 float_literal]: #85
[#433 hex_float_literal]: #113
[#433 ident]: #74
[#433 int32]: #91
[#433 int_literal]: #84
[#433 mat_prefix]: #82
[#433 minus]: #63
[#433 multiplicative_expression]: #61
[#433 multisampled_texture_type]: #125
[#433 paren_expression]: #77
[#433 paren_left]: #87
[#433 pointer]: #93
[#433 primary_expression]: #68
[#433 relational_expression]: #51
[#433 sampled_texture_type]: #124
[#433 sampler_type]: #122
[#433 shift_expression]: #55
[#433 short_circuit_and_expression]: #53
[#433 short_circuit_or_expression]: #52
[#433 singular_expression]: #62
[#433 star]: #66
[#433 storage_texture_type]: #126
[#433 texture_and_sampler_types]: #96
[#433 tilde]: #65
[#433 type_decl_without_ident]: #80
[#433 uint32]: #92
[#433 unary_expression]: #60
[#433 vec_prefix]: #81
[#434 additive_expression]: #59
[#434 and]: #67
[#434 array_type_decl]: #94
[#434 bang]: #64
[#434 binary_and_expression]: #56
[#434 binary_or_expression]: #57
[#434 binary_xor_expression]: #58
[#434 bitwise_expression]: #54
[#434 bool_literal]: #86
[#434 callable]: #75
[#434 const_literal]: #76
[#434 decimal_float_literal]: #112
[#434 depth_texture_type]: #123
[#434 expression]: #567
[#434 float16]: #90
[#434 float32]: #89
[#434 float_literal]: #85
[#434 hex_float_literal]: #113
[#434 ident]: #74
[#434 int32]: #91
[#434 int_literal]: #84
[#434 mat_prefix]: #82
[#434 minus]: #63
[#434 multiplicative_expression]: #61
[#434 multisampled_texture_type]: #125
[#434 paren_expression]: #77
[#434 paren_left]: #87
[#434 pointer]: #93
[#434 primary_expression]: #68
[#434 relational_expression]: #51
[#434 sampled_texture_type]: #124
[#434 sampler_type]: #122
[#434 shift_expression]: #55
[#434 short_circuit_and_expression]: #53
[#434 short_circuit_or_expression]: #52
[#434 singular_expression]: #62
[#434 star]: #66
[#434 storage_texture_type]: #126
[#434 texture_and_sampler_types]: #96
[#434 tilde]: #65
[#434 type_decl_without_ident]: #80
[#434 uint32]: #92
[#434 unary_expression]: #60
[#434 vec_prefix]: #81
[#461 equal]: #566
[#462 colon]: #176
[#464 equal]: #565
[#465 colon]: #176
[#467 additive_expression]: #59
[#467 and]: #67
[#467 array_type_decl]: #94
[#467 bang]: #64
[#467 binary_and_expression]: #56
[#467 binary_or_expression]: #57
[#467 binary_xor_expression]: #58
[#467 bitwise_expression]: #54
[#467 bool_literal]: #86
[#467 callable]: #75
[#467 const_literal]: #76
[#467 decimal_float_literal]: #112
[#467 depth_texture_type]: #123
[#467 expression]: #564
[#467 float16]: #90
[#467 float32]: #89
[#467 float_literal]: #85
[#467 hex_float_literal]: #113
[#467 ident]: #74
[#467 int32]: #91
[#467 int_literal]: #84
[#467 mat_prefix]: #82
[#467 minus]: #63
[#467 multiplicative_expression]: #61
[#467 multisampled_texture_type]: #125
[#467 paren_expression]: #77
[#467 paren_left]: #87
[#467 pointer]: #93
[#467 primary_expression]: #68
[#467 relational_expression]: #51
[#467 sampled_texture_type]: #124
[#467 sampler_type]: #122
[#467 shift_expression]: #55
[#467 short_circuit_and_expression]: #53
[#467 short_circuit_or_expression]: #52
[#467 singular_expression]: #62
[#467 star]: #66
[#467 storage_texture_type]: #126
[#467 texture_and_sampler_types]: #96
[#467 tilde]: #65
[#467 type_decl_without_ident]: #80
[#467 uint32]: #92
[#467 unary_expression]: #60
[#467 vec_prefix]: #81
[#469 brace_left]: #188
[#469 compound_statement]: #563
[#470 and]: #391
[#470 assignment_statement]: #561
[#470 decrement_statement]: #560
[#470 for_header]: #555
[#470 for_header/0.0]: #556
[#470 for_init]: #557
[#470 func_call_statement]: #562
[#470 ident]: #377
[#470 increment_statement]: #559
[#470 lhs_expression]: #383
[#470 lhs_expression/0.0]: #386
[#470 lhs_expression/0.0/0]: #388
[#470 lhs_expression/0.0/0/0.0]: #389
[#470 star]: #390
[#470 underscore]: #384
[#470 variable_decl]: #378
[#470 variable_statement]: #558
[#471 and]: #391
[#471 assignment_statement]: #366
[#471 brace_left]: #188
[#471 break_statement]: #363
[#471 compound_statement]: #367
[#471 continue_statement]: #364
[#471 decrement_statement]: #369
[#471 for_statement]: #359
[#471 func_call_statement]: #361
[#471 ident]: #377
[#471 if_clause]: #372
[#471 if_statement]: #356
[#471 increment_statement]: #368
[#471 lhs_expression]: #383
[#471 lhs_expression/0.0]: #386
[#471 lhs_expression/0.0/0]: #388
[#471 lhs_expression/0.0/0/0.0]: #389
[#471 loop_statement]: #358
[#471 loop_statement/0.2]: #552
[#471 loop_statement/0.2/0]: #553
[#471 return_statement]: #355
[#471 semicolon]: #354
[#471 star]: #390
[#471 statement]: #554
[#471 static_assert_statement]: #370
[#471 switch_statement]: #357
[#471 underscore]: #384
[#471 variable_decl]: #378
[#471 variable_statement]: #362
[#471 while_statement]: #360
[#472 brace_left]: #551
[#473 else_clause]: #549
[#473 if_statement/0.2]: #548
[#475 else_if_clause]: #475
[#475 if_statement/0.1/0]: #547
[#492 access_mode]: #542
[#496 array_type_decl]: #94
[#496 depth_texture_type]: #123
[#496 float16]: #90
[#496 float32]: #89
[#496 ident]: #315
[#496 int32]: #91
[#496 mat_prefix]: #318
[#496 multisampled_texture_type]: #125
[#496 pointer]: #93
[#496 sampled_texture_type]: #124
[#496 sampler_type]: #122
[#496 storage_texture_type]: #126
[#496 texture_and_sampler_types]: #96
[#496 type_decl]: #541
[#496 type_decl_without_ident]: #316
[#496 uint32]: #92
[#496 vec_prefix]: #317
[#497 greater_than]: #540
[#498 additive_expression]: #537
[#498 and]: #67
[#498 array_type_decl]: #94
[#498 bang]: #64
[#498 binary_and_expression]: #56
[#498 binary_or_expression]: #57
[#498 binary_xor_expression]: #58
[#498 bitwise_expression]: #538
[#498 bool_literal]: #86
[#498 callable]: #75
[#498 const_literal]: #76
[#498 decimal_float_literal]: #112
[#498 depth_texture_type]: #123
[#498 element_count_expression]: #536
[#498 float16]: #90
[#498 float32]: #89
[#498 float_literal]: #85
[#498 hex_float_literal]: #113
[#498 ident]: #74
[#498 int32]: #91
[#498 int_literal]: #84
[#498 mat_prefix]: #82
[#498 minus]: #63
[#498 multiplicative_expression]: #61
[#498 multisampled_texture_type]: #125
[#498 paren_expression]: #77
[#498 paren_left]: #87
[#498 pointer]: #93
[#498 primary_expression]: #68
[#498 sampled_texture_type]: #124
[#498 sampler_type]: #122
[#498 singular_expression]: #62
[#498 star]: #66
[#498 storage_texture_type]: #126
[#498 texture_and_sampler_types]: #96
[#498 tilde]: #65
[#498 type_decl_without_ident]: #80
[#498 uint32]: #92
[#498 unary_expression]: #539
[#498 vec_prefix]: #81
[#501 paren_expression]: #535
[#501 paren_left]: #87
[#504 argument_expression_list/0.1/0.2]: #533
[#504 comma]: #534
[#506 bracket_left]: #203
[#506 period]: #204
[#506 postfix_expression]: #532
[#506 postfix_expression/0.3]: #531
[#513 additive_expression]: #59
[#513 and]: #67
[#513 array_type_decl]: #94
[#513 bang]: #64
[#513 binary_and_expression]: #56
[#513 binary_or_expression]: #57
[#513 binary_xor_expression]: #58
[#513 bitwise_expression]: #54
[#513 bool_literal]: #86
[#513 callable]: #75
[#513 const_literal]: #76
[#513 decimal_float_literal]: #112
[#513 depth_texture_type]: #123
[#513 expression]: #530
[#513 float16]: #90
[#513 float32]: #89
[#513 float_literal]: #85
[#513 hex_float_literal]: #113
[#513 ident]: #74
[#513 int32]: #91
[#513 int_literal]: #84
[#513 mat_prefix]: #82
[#513 minus]: #63
[#513 multiplicative_expression]: #61
[#513 multisampled_texture_type]: #125
[#513 paren_expression]: #77
[#513 paren_left]: #87
[#513 pointer]: #93
[#513 primary_expression]: #68
[#513 relational_expression]: #51
[#513 sampled_texture_type]: #124
[#513 sampler_type]: #122
[#513 shift_expression]: #55
[#513 short_circuit_and_expression]: #53
[#513 short_circuit_or_expression]: #52
[#513 singular_expression]: #62
[#513 star]: #66
[#513 storage_texture_type]: #126
[#513 texture_and_sampler_types]: #96
[#513 tilde]: #65
[#513 type_decl_without_ident]: #80
[#513 uint32]: #92
[#513 unary_expression]: #60
[#513 vec_prefix]: #81
[#514 paren_right]: #529
[#519 interpolation_sample_name]: #525
[#525 attrib_end]: #613
[#525 attrib_end/0.0]: #514
[#525 comma]: #516
[#530 attrib_end]: #611
[#530 attrib_end/0.0]: #514
[#530 comma]: #612
[#537 minus]: #222
[#537 plus]: #221
[#541 comma]: #610
[#541 type_decl_without_ident/7.5]: #609
[#542 greater_than]: #608
[#546 additive_expression]: #59
[#546 and]: #67
[#546 array_type_decl]: #94
[#546 bang]: #64
[#546 binary_and_expression]: #56
[#546 binary_or_expression]: #57
[#546 binary_xor_expression]: #58
[#546 bitwise_expression]: #54
[#546 bool_literal]: #86
[#546 callable]: #75
[#546 const_literal]: #76
[#546 decimal_float_literal]: #112
[#546 depth_texture_type]: #123
[#546 expression]: #607
[#546 float16]: #90
[#546 float32]: #89
[#546 float_literal]: #85
[#546 hex_float_literal]: #113
[#546 ident]: #74
[#546 int32]: #91
[#546 int_literal]: #84
[#546 mat_prefix]: #82
[#546 minus]: #63
[#546 multiplicative_expression]: #61
[#546 multisampled_texture_type]: #125
[#546 paren_expression]: #77
[#546 paren_left]: #87
[#546 pointer]: #93
[#546 primary_expression]: #68
[#546 relational_expression]: #51
[#546 sampled_texture_type]: #124
[#546 sampler_type]: #122
[#546 shift_expression]: #55
[#546 short_circuit_and_expression]: #53
[#546 short_circuit_or_expression]: #52
[#546 singular_expression]: #62
[#546 star]: #66
[#546 storage_texture_type]: #126
[#546 texture_and_sampler_types]: #96
[#546 tilde]: #65
[#546 type_decl_without_ident]: #80
[#546 uint32]: #92
[#546 unary_expression]: #60
[#546 vec_prefix]: #81
[#550 brace_left]: #188
[#550 compound_statement]: #606
[#551 switch_body]: #603
[#551 switch_statement/0.3]: #601
[#551 switch_statement/0.3/0]: #602
[#552 continuing_statement]: #599
[#552 loop_statement/0.3]: #598
[#554 and]: #391
[#554 assignment_statement]: #366
[#554 brace_left]: #188
[#554 break_statement]: #363
[#554 compound_statement]: #367
[#554 continue_statement]: #364
[#554 decrement_statement]: #369
[#554 for_statement]: #359
[#554 func_call_statement]: #361
[#554 ident]: #377
[#554 if_clause]: #372
[#554 if_statement]: #356
[#554 increment_statement]: #368
[#554 lhs_expression]: #383
[#554 lhs_expression/0.0]: #386
[#554 lhs_expression/0.0/0]: #388
[#554 lhs_expression/0.0/0/0.0]: #389
[#554 loop_statement]: #358
[#554 loop_statement/0.2/0]: #597
[#554 return_statement]: #355
[#554 semicolon]: #354
[#554 star]: #390
[#554 statement]: #554
[#554 static_assert_statement]: #370
[#554 switch_statement]: #357
[#554 underscore]: #384
[#554 variable_decl]: #378
[#554 variable_statement]: #362
[#554 while_statement]: #360
[#555 paren_right]: #596
[#556 semicolon]: #595
[#565 additive_expression]: #59
[#565 and]: #67
[#565 array_type_decl]: #94
[#565 bang]: #64
[#565 binary_and_expression]: #56
[#565 binary_or_expression]: #57
[#565 binary_xor_expression]: #58
[#565 bitwise_expression]: #54
[#565 bool_literal]: #86
[#565 callable]: #75
[#565 const_literal]: #76
[#565 decimal_float_literal]: #112
[#565 depth_texture_type]: #123
[#565 expression]: #594
[#565 float16]: #90
[#565 float32]: #89
[#565 float_literal]: #85
[#565 hex_float_literal]: #113
[#565 ident]: #74
[#565 int32]: #91
[#565 int_literal]: #84
[#565 mat_prefix]: #82
[#565 minus]: #63
[#565 multiplicative_expression]: #61
[#565 multisampled_texture_type]: #125
[#565 paren_expression]: #77
[#565 paren_left]: #87
[#565 pointer]: #93
[#565 primary_expression]: #68
[#565 relational_expression]: #51
[#565 sampled_texture_type]: #124
[#565 sampler_type]: #122
[#565 shift_expression]: #55
[#565 short_circuit_and_expression]: #53
[#565 short_circuit_or_expression]: #52
[#565 singular_expression]: #62
[#565 star]: #66
[#565 storage_texture_type]: #126
[#565 texture_and_sampler_types]: #96
[#565 tilde]: #65
[#565 type_decl_without_ident]: #80
[#565 uint32]: #92
[#565 unary_expression]: #60
[#565 vec_prefix]: #81
[#566 additive_expression]: #59
[#566 and]: #67
[#566 array_type_decl]: #94
[#566 bang]: #64
[#566 binary_and_expression]: #56
[#566 binary_or_expression]: #57
[#566 binary_xor_expression]: #58
[#566 bitwise_expression]: #54
[#566 bool_literal]: #86
[#566 callable]: #75
[#566 const_literal]: #76
[#566 decimal_float_literal]: #112
[#566 depth_texture_type]: #123
[#566 expression]: #593
[#566 float16]: #90
[#566 float32]: #89
[#566 float_literal]: #85
[#566 hex_float_literal]: #113
[#566 ident]: #74
[#566 int32]: #91
[#566 int_literal]: #84
[#566 mat_prefix]: #82
[#566 minus]: #63
[#566 multiplicative_expression]: #61
[#566 multisampled_texture_type]: #125
[#566 paren_expression]: #77
[#566 paren_left]: #87
[#566 pointer]: #93
[#566 primary_expression]: #68
[#566 relational_expression]: #51
[#566 sampled_texture_type]: #124
[#566 sampler_type]: #122
[#566 shift_expression]: #55
[#566 short_circuit_and_expression]: #53
[#566 short_circuit_or_expression]: #52
[#566 singular_expression]: #62
[#566 star]: #66
[#566 storage_texture_type]: #126
[#566 texture_and_sampler_types]: #96
[#566 tilde]: #65
[#566 type_decl_without_ident]: #80
[#566 uint32]: #92
[#566 unary_expression]: #60
[#566 vec_prefix]: #81
[#570 paren_right]: #592
[#575 colon]: #176
[#578 comma]: #591
[#578 param_list/0.2]: #590
[#579 arrow]: #588
[#579 function_header/0.5]: #587
[#580 brace_right]: #586
[#582 array_type_decl]: #94
[#582 depth_texture_type]: #123
[#582 float16]: #90
[#582 float32]: #89
[#582 ident]: #315
[#582 int32]: #91
[#582 mat_prefix]: #318
[#582 multisampled_texture_type]: #125
[#582 pointer]: #93
[#582 sampled_texture_type]: #124
[#582 sampler_type]: #122
[#582 storage_texture_type]: #126
[#582 texture_and_sampler_types]: #96
[#582 type_decl]: #585
[#582 type_decl_without_ident]: #316
[#582 uint32]: #92
[#582 vec_prefix]: #317
[#588 attr]: #31
[#588 attribute]: #632
[#588 function_header/0.5/0.1]: #630
[#588 function_header/0.5/0.1/0]: #631
[#595 additive_expression]: #59
[#595 and]: #67
[#595 array_type_decl]: #94
[#595 bang]: #64
[#595 binary_and_expression]: #56
[#595 binary_or_expression]: #57
[#595 binary_xor_expression]: #58
[#595 bitwise_expression]: #54
[#595 bool_literal]: #86
[#595 callable]: #75
[#595 const_literal]: #76
[#595 decimal_float_literal]: #112
[#595 depth_texture_type]: #123
[#595 expression]: #629
[#595 float16]: #90
[#595 float32]: #89
[#595 float_literal]: #85
[#595 for_header/0.2]: #628
[#595 hex_float_literal]: #113
[#595 ident]: #74
[#595 int32]: #91
[#595 int_literal]: #84
[#595 mat_prefix]: #82
[#595 minus]: #63
[#595 multiplicative_expression]: #61
[#595 multisampled_texture_type]: #125
[#595 paren_expression]: #77
[#595 paren_left]: #87
[#595 pointer]: #93
[#595 primary_expression]: #68
[#595 relational_expression]: #51
[#595 sampled_texture_type]: #124
[#595 sampler_type]: #122
[#595 shift_expression]: #55
[#595 short_circuit_and_expression]: #53
[#595 short_circuit_or_expression]: #52
[#595 singular_expression]: #62
[#595 star]: #66
[#595 storage_texture_type]: #126
[#595 texture_and_sampler_types]: #96
[#595 tilde]: #65
[#595 type_decl_without_ident]: #80
[#595 uint32]: #92
[#595 unary_expression]: #60
[#595 vec_prefix]: #81
[#596 brace_left]: #188
[#596 compound_statement]: #627
[#598 brace_right]: #626
[#600 brace_left]: #625
[#600 continuing_compound_statement]: #624
[#601 brace_right]: #623
[#603 switch_body]: #603
[#603 switch_statement/0.3/0]: #622
[#604 additive_expression]: #59
[#604 and]: #67
[#604 array_type_decl]: #94
[#604 bang]: #64
[#604 binary_and_expression]: #56
[#604 binary_or_expression]: #57
[#604 binary_xor_expression]: #58
[#604 bitwise_expression]: #54
[#604 bool_literal]: #86
[#604 callable]: #75
[#604 case_selectors]: #620
[#604 const_literal]: #76
[#604 decimal_float_literal]: #112
[#604 depth_texture_type]: #123
[#604 expression]: #621
[#604 float16]: #90
[#604 float32]: #89
[#604 float_literal]: #85
[#604 hex_float_literal]: #113
[#604 ident]: #74
[#604 int32]: #91
[#604 int_literal]: #84
[#604 mat_prefix]: #82
[#604 minus]: #63
[#604 multiplicative_expression]: #61
[#604 multisampled_texture_type]: #125
[#604 paren_expression]: #77
[#604 paren_left]: #87
[#604 pointer]: #93
[#604 primary_expression]: #68
[#604 relational_expression]: #51
[#604 sampled_texture_type]: #124
[#604 sampler_type]: #122
[#604 shift_expression]: #55
[#604 short_circuit_and_expression]: #53
[#604 short_circuit_or_expression]: #52
[#604 singular_expression]: #62
[#604 star]: #66
[#604 storage_texture_type]: #126
[#604 texture_and_sampler_types]: #96
[#604 tilde]: #65
[#604 type_decl_without_ident]: #80
[#604 uint32]: #92
[#604 unary_expression]: #60
[#604 vec_prefix]: #81
[#605 colon]: #619
[#605 switch_body/1.1]: #618
[#607 brace_left]: #188
[#607 compound_statement]: #617
[#609 greater_than]: #616
[#610 access_mode]: #615
[#612 additive_expression]: #59
[#612 and]: #67
[#612 array_type_decl]: #94
[#612 bang]: #64
[#612 binary_and_expression]: #56
[#612 binary_or_expression]: #57
[#612 binary_xor_expression]: #58
[#612 bitwise_expression]: #54
[#612 bool_literal]: #86
[#612 callable]: #75
[#612 const_literal]: #76
[#612 decimal_float_literal]: #112
[#612 depth_texture_type]: #123
[#612 expression]: #614
[#612 float16]: #90
[#612 float32]: #89
[#612 float_literal]: #85
[#612 hex_float_literal]: #113
[#612 ident]: #74
[#612 int32]: #91
[#612 int_literal]: #84
[#612 mat_prefix]: #82
[#612 minus]: #63
[#612 multiplicative_expression]: #61
[#612 multisampled_texture_type]: #125
[#612 paren_expression]: #77
[#612 paren_left]: #87
[#612 pointer]: #93
[#612 primary_expression]: #68
[#612 relational_expression]: #51
[#612 sampled_texture_type]: #124
[#612 sampler_type]: #122
[#612 shift_expression]: #55
[#612 short_circuit_and_expression]: #53
[#612 short_circuit_or_expression]: #52
[#612 singular_expression]: #62
[#612 star]: #66
[#612 storage_texture_type]: #126
[#612 texture_and_sampler_types]: #96
[#612 tilde]: #65
[#612 type_decl_without_ident]: #80
[#612 uint32]: #92
[#612 unary_expression]: #60
[#612 vec_prefix]: #81
[#614 attrib_end]: #647
[#614 attrib_end/0.0]: #514
[#614 comma]: #516
[#618 brace_left]: #646
[#618 case_compound_statement]: #645
[#620 colon]: #644
[#620 switch_body/0.2]: #643
[#621 case_selectors/0.1]: #639
[#621 case_selectors/0.1/0]: #640
[#621 case_selectors/0.1/0/0.0]: #641
[#621 comma]: #642
[#625 and]: #391
[#625 assignment_statement]: #366
[#625 brace_left]: #188
[#625 break_statement]: #363
[#625 compound_statement]: #367
[#625 continue_statement]: #364
[#625 continuing_compound_statement/0.1]: #636
[#625 continuing_compound_statement/0.1/0]: #637
[#625 decrement_statement]: #369
[#625 for_statement]: #359
[#625 func_call_statement]: #361
[#625 ident]: #377
[#625 if_clause]: #372
[#625 if_statement]: #356
[#625 increment_statement]: #368
[#625 lhs_expression]: #383
[#625 lhs_expression/0.0]: #386
[#625 lhs_expression/0.0/0]: #388
[#625 lhs_expression/0.0/0/0.0]: #389
[#625 loop_statement]: #358
[#625 return_statement]: #355
[#625 semicolon]: #354
[#625 star]: #390
[#625 statement]: #638
[#625 static_assert_statement]: #370
[#625 switch_statement]: #357
[#625 underscore]: #384
[#625 variable_decl]: #378
[#625 variable_statement]: #362
[#625 while_statement]: #360
[#628 semicolon]: #635
[#630 array_type_decl]: #94
[#630 depth_texture_type]: #123
[#630 float16]: #90
[#630 float32]: #89
[#630 ident]: #315
[#630 int32]: #91
[#630 mat_prefix]: #318
[#630 multisampled_texture_type]: #125
[#630 pointer]: #93
[#630 sampled_texture_type]: #124
[#630 sampler_type]: #122
[#630 storage_texture_type]: #126
[#630 texture_and_sampler_types]: #96
[#630 type_decl]: #634
[#630 type_decl_without_ident]: #316
[#630 uint32]: #92
[#630 vec_prefix]: #317
[#632 attr]: #31
[#632 attribute]: #632
[#632 function_header/0.5/0.1/0]: #633
[#635 and]: #391
[#635 assignment_statement]: #664
[#635 decrement_statement]: #663
[#635 for_header/0.4]: #660
[#635 for_update]: #661
[#635 func_call_statement]: #665
[#635 ident]: #377
[#635 increment_statement]: #662
[#635 lhs_expression]: #383
[#635 lhs_expression/0.0]: #386
[#635 lhs_expression/0.0/0]: #388
[#635 lhs_expression/0.0/0/0.0]: #389
[#635 star]: #390
[#635 underscore]: #384
[#636 break_if_statement]: #658
[#636 continuing_compound_statement/0.2]: #657
[#638 and]: #391
[#638 assignment_statement]: #366
[#638 brace_left]: #188
[#638 break_statement]: #363
[#638 compound_statement]: #367
[#638 continue_statement]: #364
[#638 continuing_compound_statement/0.1/0]: #656
[#638 decrement_statement]: #369
[#638 for_statement]: #359
[#638 func_call_statement]: #361
[#638 ident]: #377
[#638 if_clause]: #372
[#638 if_statement]: #356
[#638 increment_statement]: #368
[#638 lhs_expression]: #383
[#638 lhs_expression/0.0]: #386
[#638 lhs_expression/0.0/0]: #388
[#638 lhs_expression/0.0/0/0.0]: #389
[#638 loop_statement]: #358
[#638 return_statement]: #355
[#638 semicolon]: #354
[#638 star]: #390
[#638 statement]: #638
[#638 static_assert_statement]: #370
[#638 switch_statement]: #357
[#638 underscore]: #384
[#638 variable_decl]: #378
[#638 variable_statement]: #362
[#638 while_statement]: #360
[#639 case_selectors/0.2]: #654
[#639 comma]: #655
[#641 case_selectors/0.1/0]: #653
[#641 case_selectors/0.1/0/0.0]: #641
[#641 comma]: #642
[#642 additive_expression]: #59
[#642 and]: #67
[#642 array_type_decl]: #94
[#642 bang]: #64
[#642 binary_and_expression]: #56
[#642 binary_or_expression]: #57
[#642 binary_xor_expression]: #58
[#642 bitwise_expression]: #54
[#642 bool_literal]: #86
[#642 callable]: #75
[#642 const_literal]: #76
[#642 decimal_float_literal]: #112
[#642 depth_texture_type]: #123
[#642 expression]: #652
[#642 float16]: #90
[#642 float32]: #89
[#642 float_literal]: #85
[#642 hex_float_literal]: #113
[#642 ident]: #74
[#642 int32]: #91
[#642 int_literal]: #84
[#642 mat_prefix]: #82
[#642 minus]: #63
[#642 multiplicative_expression]: #61
[#642 multisampled_texture_type]: #125
[#642 paren_expression]: #77
[#642 paren_left]: #87
[#642 pointer]: #93
[#642 primary_expression]: #68
[#642 relational_expression]: #51
[#642 sampled_texture_type]: #124
[#642 sampler_type]: #122
[#642 shift_expression]: #55
[#642 short_circuit_and_expression]: #53
[#642 short_circuit_or_expression]: #52
[#642 singular_expression]: #62
[#642 star]: #66
[#642 storage_texture_type]: #126
[#642 texture_and_sampler_types]: #96
[#642 tilde]: #65
[#642 type_decl_without_ident]: #80
[#642 uint32]: #92
[#642 unary_expression]: #60
[#642 vec_prefix]: #81
[#643 brace_left]: #646
[#643 case_compound_statement]: #651
[#646 and]: #391
[#646 assignment_statement]: #366
[#646 brace_left]: #188
[#646 break_statement]: #363
[#646 case_compound_statement/0.1]: #648
[#646 case_compound_statement/0.1/0]: #649
[#646 compound_statement]: #367
[#646 continue_statement]: #364
[#646 decrement_statement]: #369
[#646 for_statement]: #359
[#646 func_call_statement]: #361
[#646 ident]: #377
[#646 if_clause]: #372
[#646 if_statement]: #356
[#646 increment_statement]: #368
[#646 lhs_expression]: #383
[#646 lhs_expression/0.0]: #386
[#646 lhs_expression/0.0/0]: #388
[#646 lhs_expression/0.0/0/0.0]: #389
[#646 loop_statement]: #358
[#646 return_statement]: #355
[#646 semicolon]: #354
[#646 star]: #390
[#646 statement]: #650
[#646 static_assert_statement]: #370
[#646 switch_statement]: #357
[#646 underscore]: #384
[#646 variable_decl]: #378
[#646 variable_statement]: #362
[#646 while_statement]: #360
[#648 case_compound_statement/0.2]: #669
[#648 fallthrough_statement]: #670
[#650 and]: #391
[#650 assignment_statement]: #366
[#650 brace_left]: #188
[#650 break_statement]: #363
[#650 case_compound_statement/0.1/0]: #668
[#650 compound_statement]: #367
[#650 continue_statement]: #364
[#650 decrement_statement]: #369
[#650 for_statement]: #359
[#650 func_call_statement]: #361
[#650 ident]: #377
[#650 if_clause]: #372
[#650 if_statement]: #356
[#650 increment_statement]: #368
[#650 lhs_expression]: #383
[#650 lhs_expression/0.0]: #386
[#650 lhs_expression/0.0/0]: #388
[#650 lhs_expression/0.0/0/0.0]: #389
[#650 loop_statement]: #358
[#650 return_statement]: #355
[#650 semicolon]: #354
[#650 star]: #390
[#650 statement]: #650
[#650 static_assert_statement]: #370
[#650 switch_statement]: #357
[#650 underscore]: #384
[#650 variable_decl]: #378
[#650 variable_statement]: #362
[#650 while_statement]: #360
[#657 brace_right]: #667
[#666 additive_expression]: #59
[#666 and]: #67
[#666 array_type_decl]: #94
[#666 bang]: #64
[#666 binary_and_expression]: #56
[#666 binary_or_expression]: #57
[#666 binary_xor_expression]: #58
[#666 bitwise_expression]: #54
[#666 bool_literal]: #86
[#666 callable]: #75
[#666 const_literal]: #76
[#666 decimal_float_literal]: #112
[#666 depth_texture_type]: #123
[#666 expression]: #674
[#666 float16]: #90
[#666 float32]: #89
[#666 float_literal]: #85
[#666 hex_float_literal]: #113
[#666 ident]: #74
[#666 int32]: #91
[#666 int_literal]: #84
[#666 mat_prefix]: #82
[#666 minus]: #63
[#666 multiplicative_expression]: #61
[#666 multisampled_texture_type]: #125
[#666 paren_expression]: #77
[#666 paren_left]: #87
[#666 pointer]: #93
[#666 primary_expression]: #68
[#666 relational_expression]: #51
[#666 sampled_texture_type]: #124
[#666 sampler_type]: #122
[#666 shift_expression]: #55
[#666 short_circuit_and_expression]: #53
[#666 short_circuit_or_expression]: #52
[#666 singular_expression]: #62
[#666 star]: #66
[#666 storage_texture_type]: #126
[#666 texture_and_sampler_types]: #96
[#666 tilde]: #65
[#666 type_decl_without_ident]: #80
[#666 uint32]: #92
[#666 unary_expression]: #60
[#666 vec_prefix]: #81
[#669 brace_right]: #673
[#671 semicolon]: #672
[#674 semicolon]: #675
